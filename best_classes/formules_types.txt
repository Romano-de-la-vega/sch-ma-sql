namespace nom_au_choix;

function used to generate the Synchro Class menu //

function acp_pjs_GenerateBucketFilterMenu() {
  if (context._BM_AA_S_BREAKDOWN_TO_SYNCHRONIZE != "_BM_BS") { context._BM_AA_S_BREAKDOWN_TO_SYNCHRONIZE = "_BM_BS"; }
  this.string = context._BM_DA_SYNCHRO_CLASS_CURRENT_LANGUAGE;
  var Root = this;
  var Replaceitem =  Root.Appendmenuitem(plw.write_text_key("BudgetManager.replace_current_filter_by_the_selection"),"_BmReplaceCurrentFilterBySelection()");
  ReplaceItem.image = plc.image.get("import2");
  // Reset filter
  var ResetItem = Root.Appendmenuitem(plw.write_text_key("reset"),"resetbucketfilter()");
  //Le reset complet de la structure est autorise que si on ne travail pas sur une version
  // if(plc.contextopx2._BM_AA_S_BUDGET_VERSION == ""){
  if(context._BM_AA_S_BUDGET_VERSION == ""){
    // var CompleteResetItem = Root.Appendmenuitem(plw.write_text_key("BudgetManager.reset_structure"),"FullSynchroReset()");
    // var CompleteResetItem = Root.Appendmenuitem(plw.write_text_key("BudgetManager.reset_structure"),"_BmDoSynchronize();");
    var CompleteResetItem = Root.Appendmenuitem(plw.write_text_key("BudgetManager.reset_structure"),"callv2(\"_AcpStrat\",\"acp_pjs_SynchronizeBmStructure\");");
    CompleteResetItem.image = plc.image.get("warning_small");	
  }
}

Function used for Bucket Filter list of values //

function GetCurrentSynchroClas is not defined as a processes API so we need to define our own function

function acp_pjs_GetCurrentSynchroClass(){
  var UserClass = context._BM_AA_S_BREAKDOWN_TO_SYNCHRONIZE;
  var ClassJs = "Opx"+UserClass;
  var UserClassObject = ClassJs.FindClass();
  if(!(UserClassObject instanceof ObjectClass)){
    context._BM_AA_S_BREAKDOWN_TO_SYNCHRONIZE = "_BM_BS";
    UserClassObject = "Opx_BM_BS".findClass();
  }
  return UserClassObject;
}

function used to compute the drop down list content for the bucket filter field available in toolbar

function acp_pjs_ComputeBucketFilterObject(){
	// var SelectedClass = plw._bmRetrieveSynchroClass();
	var SelectedClass = context._BM_AA_S_BREAKDOWN_TO_SYNCHRONIZE;
	var SynchroClassObject = acp_pjs_GetCurrentSynchroClass(this : context);
	var list = new vector();
	if (SynchroClassObject instanceof ObjectClass) {
		var SynchroClassSymbol = SynchroClassObject.name;
		var FilterFormula = "";
		var FilterFormulaVector = plw._inf_js_compute_portfolio_filter();
		// var FilterFormulaVector = context.PTF_COST_FILTERS_COMPUTED;
		if (FilterFormulaVector instanceof vector) {
			FilterFormula = FilterFormulaVector.getplist(SelectedClass);
		    if (FilterFormula instanceof String && FilterFormula != "") {
    			var FilterForm = new formula(SynchroClassObject,FilterFormula,"BOOLEAN",false);
    			with(FilterForm.fromobject()) {
    				for (var elt in SynchroClassObject) {
    					list.push(elt);
    				}
    			}
		    }
		}
	}
	return list;
}

New dynamic fields to manage standard Bucket Filter //

function acp_pjs_GetPorttfolioValues(){
	var SelectedClass = context._BM_AA_S_BREAKDOWN_TO_SYNCHRONIZE;
	var SynchroClassObject = acp_pjs_GetCurrentSynchroClass(this : context);
	var FavFilterInfos = plw.getFavorFilterAllInfo__hashtable.get(SynchroClassObject);
	if (FavFilterInfos instanceof vector){
		var PortfolioField = FavFilterInfos.getplist("PORTFOLIO_FIELD");
		var PortfolioFieldObj = plc._FF_PT_FAVOR_FILTERS.getslotbyid(PortfolioField);
		if (PortfolioFieldObj instanceof ObjectAttribute) {
//			var CurrPorfolio = plc._FF_PT_FAVOR_FILTERS.get(currentpageobject()._STRAT_RA_PORTFOLIO);return CurrPorfolio;
			var CurrPorfolio = plc._FF_PT_FAVOR_FILTERS.get(context._FF_AA_S_LIST_NAME);
			if (CurrPorfolio instanceof plc._FF_PT_FAVOR_FILTERS) {
				return CurrPorfolio.get(PortfolioField);
			}
		}
	}
	return "";
}

function acp_pjs_ComputeUserParameterKey(){
	return context._BM_AA_S_BREAKDOWN_TO_SYNCHRONIZE+"_BM_AA_S_BUCKET_FILTER"+plw.CurrentPageObject().printattribute();
}

function acp_pjs_ACP_DA_BM_AA_S_BUCKET_FILTER_Reader(){
	// var CurFilter = context._BM_AA_S_BUCKET_FILTER;
	var UserParameterKey = acp_pjs_ComputeUserParameterKey();
	var CurFilter = plw.GetUserParameter(UserParameterKey);
	if (CurFilter == "" || CurFilter == undefined) {
		CurFilter = acp_pjs_GetPorttfolioValues();
		context._BM_AA_S_BUCKET_FILTER = CurFilter;
	} else if (CurFilter != context._BM_AA_S_BUCKET_FILTER) {
		context._BM_AA_S_BUCKET_FILTER = CurFilter;
	}
	plw.SetUserParameter(UserParameterKey,CurFilter);
	return CurFilter;
}

function acp_pjs_ACP_DA_BM_AA_S_BUCKET_FILTER_Modifier(value){
	var UserParameterKey = acp_pjs_ComputeUserParameterKey();
	if (value == "") { value = acp_pjs_GetPorttfolioValues(); }
	context._BM_AA_S_BUCKET_FILTER = value;
	plw.SetUserParameter(UserParameterKey,value);
	return value;
}

function acp_pjs_GetReportedFilesReader(){
	var CurStrat = plw.currentpageobject();
	var Filter = "";
	if (CurStrat instanceof plc.ordoproject) {
		Filter = CurStrat.printattribute();
		var SelectedVersions = context.ACP_DA_BM_AA_VERSION_LIST_TO_COMPARE;
		if (SelectedVersions != "") { Filter += ","+SelectedVersions; }
	}
	return Filter;
}

function acp_pjs_OpenProject(String PrjList){
	var PrjVect = PrjList.split(",");
	var PrjToOpen = new vector();
	for(var PrjId in PrjVect where PrjId != ""){
		var Prj = plc.ordoproject.get(PrjId);
		if(Prj instanceof plc.ordoproject && Prj.open == false){ PrjToOpen.push(Prj); }
	}
	if(PrjToOpen.length > 0){ PrjToOpen.callmacro("OPEN"); }
}

function acp_pjs_BucketVersion_Reader(FieldId){
	var UserParameterKey = FieldId+plw.CurrentPageObject().printattribute();
	var CurVersion = plw.GetUserParameter(UserParameterKey);
	if(CurVersion instanceof String){
		//acp_pjs_OpenProject(CurVersion);
		if(CurVersion != context.get(FieldId)) { context.set(FieldId,CurVersion); }
		return CurVersion;
	}
	return "";
}

function acp_pjs_BucketVersion_Modifier(value,FieldId){
	var UserParameterKey = FieldId+plw.CurrentPageObject().printattribute();
	context.set(FieldId,value);
	plw.SetUserParameter(UserParameterKey,value);
	return value;
}

function acp_pjs_GenerateBucketFilterDynAttr() {
	var BmBucketFilterField = context.getslotbyid("ACP_DA_BM_AA_S_BUCKET_FILTER");
	if (!(BmBucketFilterField instanceof ObjectAttribute)) {
		BmBucketFilterField = new ObjectAttribute(plc.contextopx2,"ACP_DA_BM_AA_S_BUCKET_FILTER","STRING");
	}
	BmBucketFilterField.reader = acp_pjs_ACP_DA_BM_AA_S_BUCKET_FILTER_Reader;
	BmBucketFilterField.modifier = acp_pjs_ACP_DA_BM_AA_S_BUCKET_FILTER_Modifier;
	BmBucketFilterField.comment = "Bucket Filter";
	BmBucketFilterField.length = 4000;
	
	var BmFileFilterField = context.getslotbyid("ACP_DA_BM_AA_S_FILE_FILTER");
	if (!(BmFileFilterField instanceof ObjectAttribute)) {
		BmFileFilterField = new ObjectAttribute(plc.contextopx2,"ACP_DA_BM_AA_S_FILE_FILTER","STRING");
	}
	BmFileFilterField.reader = acp_pjs_GetReportedFilesReader;
	BmFileFilterField.comment = "Bucket File Filter";
	BmFileFilterField.length = 4000;
	
	var BmVersionField = context.getslotbyid("ACP_DA_BM_AA_S_BUDGET_VERSION");
	if (!(BmVersionField instanceof ObjectAttribute)) {
		BmVersionField = new ObjectAttribute(plc.contextopx2,"ACP_DA_BM_AA_S_BUDGET_VERSION","STRING");
	}
	BmVersionField.reader = acp_pjs_BucketVersion_Reader.closure("_BM_AA_S_BUDGET_VERSION");
	BmVersionField.modifier = acp_pjs_BucketVersion_Modifier.closure("_BM_AA_S_BUDGET_VERSION");
	BmVersionField.comment = "Budget Version";
	BmVersionField.length = 4000;
	
	var BmVersionsField = context.getslotbyid("ACP_DA_BM_AA_VERSION_LIST_TO_COMPARE");
	if (!(BmVersionsField instanceof ObjectAttribute)) {
		BmVersionsField = new ObjectAttribute(plc.contextopx2,"ACP_DA_BM_AA_VERSION_LIST_TO_COMPARE","STRING");
	}
	BmVersionsField.reader = acp_pjs_BucketVersion_Reader.closure("_BM_AA_VERSION_LIST_TO_COMPARE");
	BmVersionsField.modifier = acp_pjs_BucketVersion_Modifier.closure("_BM_AA_VERSION_LIST_TO_COMPARE");
	BmVersionsField.comment = "Budget Versions";
	BmVersionsField.length = 4000;
}

Synchronization function //

function acp_pjs_GetParentFieldValue(){
	var UserClass = Context._BM_AA_S_BREAKDOWN_TO_SYNCHRONIZE;
	var SelectedClass = acp_pjs_GetCurrentSynchroClass(this : context);
	if (SelectedClass instanceof ObjectClass) {
		var TestSlot = SelectedClass.getslotbyid(UserClass);
		if (TestSlot instanceof ObjectAttribute) {
			return UserClass;
		} else {
			TestSlot = SelectedClass.getslotbyid("PARENT");
			if (TestSlot instanceof ObjectAttribute) {
				return "PARENT";
			}
		}
	}
	return "_BM_BS";
}

function acp_pjs_GetActivityFieldValue(){
	var UserClass = Context._BM_AA_S_BREAKDOWN_TO_SYNCHRONIZE;
	var TestSlot = plc.workstructure.getslotbyid(UserClass);
	if (TestSlot instanceof ObjectAttribute) return UserClass;
	return "";
}

function acp_pjs_GetParentBucketElt(SynchroClassObject,Xbs){
	var parentFieldName = acp_pjs_GetParentFieldValue();
	if (Xbs instanceof plc.object && Xbs.instanceof(SynchroClassObject)) {
		var ParentFieldObject = SynchroClassObject.getslotbyid(parentFieldName);
		if (ParentFieldObject instanceof ObjectAttribute) {
			return Xbs.get(parentFieldName);
		}
	}
	return false;
}

function acp_pjs_GetBucketActivity(CurrenStratProject,Xbs,IsAConsoLevel,IsAReserve) {
  var UserClass = Context._BM_AA_S_BREAKDOWN_TO_SYNCHRONIZE;//la classe doite etre fonction de celle choisie pour la synchro
  if(UserClass != "" && Xbs instanceof plc.object && CurrenStratProject instanceof plc.ordo_project) {
    var onbStr = Xbs.get("onb").tostring("####");
    var Tablekey = new keyattribute("OpxWbselement","_BM_AA_N_LINKED_OBJECT",onbStr);
    with(CurrenStratProject.fromObject()) {
      with(Tablekey.fromObject()) {
        for(var Activity in plc.network where (Activity._BM_AA_N_LINKED_OBJECT == onbStr)
          && Activity.Project ==  CurrenStratProject
          && Activity._BM_AA_B_IS_A_CONSO_LEVEL == IsAConsoLevel
          && Activity._BM_AA_B_RESERVE == IsAReserve
          && Activity._BM_AA_S_SYNCHRONISE_WITH.ToUpperCase() == UserClass.ToUppercase()){
			        var TargetName = (IsAReserve == true) ? "RESERVE (" + Xbs.name +")" : Xbs.name;
                    if (activity.name != TargetName) { activity.name = TargetName; }
			        var TargetDesc = (IsAReserve == true) ? "RESERVE (" + Xbs.desc +")" : Xbs.desc;
                    if (activity.desc != TargetDesc == true) { activity.desc = TargetDesc; }
					var ActivityFieldName = acp_pjs_GetActivityFieldValue();
                    if (activity.get(ActivityFieldName) != Xbs) { activity.set(ActivityFieldName,Xbs); }
                    return activity;
        }
      }
    }
  }
  return false;
}

function acp_pjs_CreateBucketActivity(CurrenStratProject,SynchroClassObject,Xbs,IsAConsoLevel,IsAReserve,FilterFormula){
	var parentFieldName = acp_pjs_GetParentFieldValue();
	if (Xbs instanceof plc.object && Xbs.instanceof(SynchroClassObject) && CurrenStratProject instanceof plc.ordo_project) {
		var FatherXbs = acp_pjs_GetParentBucketElt(SynchroClassObject,Xbs);
		var FatherAct = undefined;
		var ActName = Xbs.name;
		var ActDesc = Xbs.desc;
		if (IsAReserve) {
			FatherAct = acp_pjs_GetBucketActivity(this : context,CurrenStratProject,Xbs,false,false);
			ActName = "RESERVE (" + Xbs.name +")";
			ActDesc = "RESERVE (" + Xbs.desc +")";
		} else if (FatherXbs == SynchroClassObject.GetDefaultNode() || FatherXbs.callbooleanformula(FilterFormula) == false) {
			FatherAct = plw.top_level_ws(CurrenStratProject);
		} else {
			FatherAct = acp_pjs_GetBucketActivity(this : context,CurrenStratProject,FatherXbs,false,false);
		}
		plw.writetolog(" FatherAct "+FatherAct);
		if (FatherAct instanceof plc.workstructure) {
			var SynchedAct = new plc.network(NAME : ActName,
								  DATASET : CurrenStratProject,
								  DESC : ActDesc,
								  _BM_RA_WBS_USER : plw.currentopx2user().printattribute(),
								  _BM_AA_S_BM_MANAGER : plw.currentopx2user().printattribute(),
								  _BM_AA_N_LINKED_OBJECT : Xbs.onb.ToString("####"),
								  _BM_AA_S_SYNCHRONISE_WITH : Context._BM_AA_S_BREAKDOWN_TO_SYNCHRONIZE.Touppercase(),
								  _BM_AA_B_NO_INPUT : true,
								  DATES_CONS : false,
								  _BM_AA_B_RESERVE : IsAReserve,
								  _BM_AA_B_IS_A_CONSO_LEVEL : IsAConsoLevel,
								  WBS_ELEMENT : FatherAct);
								  
			var ActivityFieldName = acp_pjs_GetActivityFieldValue();
			SynchedAct.set(ActivityFieldName.ToUppercase(),Xbs);
			SynchedAct._ROA_DA_B_RPS_HIDE = true;
			return SynchedAct;
		}
	}
	return false;
}

function acp_pjs_GetReserveActivity(CurrenStratProject,SynchroClassObject,Xbs,FilterFormula){
	var ParentXbs = acp_pjs_GetParentBucketElt(SynchroClassObject,Xbs);
	if (ParentXbs.instanceof(SynchroClassObject) && FilterFormula instanceof string && ParentXbs.callbooleanformula(FilterFormula) == true) {
		var ReservedAct = acp_pjs_GetBucketActivity(this : context,CurrenStratProject,ParentXbs,false,true);
		if (!(ReservedAct instanceof plc.workstructure)) {
			ReservedAct = acp_pjs_CreateBucketActivity(CurrenStratProject,SynchroClassObject,ParentXbs,false,true,FilterFormula);
		}
		return ReservedAct;
	}
	return false;
}

function acp_pjs_SynchronizeBmStructure(){
	var question = plw.write_text_key("BudgetManager.synchronization_message");
	if(plw.question(question)){
		var CurrenStratProject = plw.currentpageobject();
		if (CurrenStratProject instanceof plc.ordo_project) {
			// Get the SynchroClass Selected
			var SelectedClass = context._BM_AA_S_BREAKDOWN_TO_SYNCHRONIZE;
			plw.writetolog("Starting Bucket Structure Synchronization on "+SelectedClass);
			var SynchroClassObject = acp_pjs_GetCurrentSynchroClass(this : context);
			if (SynchroClassObject instanceof ObjectClass) {
				var SynchroClassSymbol = SynchroClassObject.name;
				// Get the formula used to filter Breakdown
				var FilterFormulaVector = plw._inf_js_compute_portfolio_filter();
				if (FilterFormulaVector instanceof vector) {
					var FilterFormula = FilterFormulaVector.getplist(SelectedClass);
					if (FilterFormula instanceof String && FilterFormula != "") {
						var FilterForm = new formula(SynchroClassObject,FilterFormula,"BOOLEAN",false);
						var msg = "Synchro....";
						with (plw.no_locking){
							with(FilterForm.fromobject(),plw.monitoring(title: msg)) {
								for (var elt in SynchroClassObject order by ['LEVEL']) {
									var SynchedAct = acp_pjs_GetBucketActivity(this : context,CurrenStratProject,elt,false,false);
									if (!(SynchedAct instanceof plc.workstructure)) {
										SynchedAct = acp_pjs_CreateBucketActivity(CurrenStratProject,SynchroClassObject,elt,false,false,FilterFormula);
										// _Bm_Create_Reserve(Wbs.getinternalvalue("WBS_ELEMENT"));
									} else {
										// Check that the correct parent is attached to current elt
										var ParentXbs = acp_pjs_GetParentBucketElt(SynchroClassObject,elt);
										var ParentAct = acp_pjs_GetBucketActivity(this : context,CurrenStratProject,ParentXbs,false,false);
										if (ParentAct instanceof plc.workstructure && SynchedAct.wbs_element != ParentAct) {
											SynchedAct.wbs_element = ParentAct;
										}
									}
									if (SynchedAct instanceof plc.workstructure) {
										var ReserveAct = acp_pjs_GetReserveActivity(CurrenStratProject,SynchroClassObject,elt,FilterFormula);
									}
									msg.monitor(0);
								}
							}
							plw.writetolog("Checking for Bucket activities to remove");
							// Delete the removed elts
							with(CurrenStratProject.fromObject()){
								for (var Act in plc.workstructure where Act._BM_AA_S_SYNCHRONISE_WITH == SelectedClass.Touppercase() && Act._BM_AA_B_IS_A_CONSO_LEVEL == false order by [['INVERSE','LEVEL']]) {
									var XbsElt = SynchroClassObject.get(Act._BM_AA_N_LINKED_OBJECT.parseint());
									plw.writetolog("XbsElt "+XbsElt);
									if ((!(XbsElt.instanceof(SynchroClassObject))) || XbsElt.callbooleanformula(FilterFormula) == false){
										plw.writetolog("XbsElt deleted"+XbsElt);
										Act.delete();
									} 
								}
							}
						}
						// FullSynchroReset()
						// _Bm_Create_Reserve
						// GetBucketActivity
					}
				}
			}
			plw.writetolog("Bucket Structure Synchronization Completed");
		}
	}
}

function generate_strategic_user_portfolio(strat_axis){

  var name = strat_axis.name + "_strategic_portfolio";
  var desc = strat_axis.desc;
  var portfolioWP = strat_axis.ACP_UA_S_PORTFOLIO_WP;

  var UserPortfolio = plc._FF_PT_FAVOR_FILTERS.get(name);

  if (!(UserPortfolio instanceof   plc._FF_PT_FAVOR_FILTERS)){
    UserPortfolio = new plc._FF_PT_FAVOR_FILTERS(NAME : name
                                                    ,DESC : desc
                                                    ,_FF_AA_S_PROJECT_TYPE : "Project,Project.Workpackage,Strategic Project"
                                                    ,_FF_AA_B_EXPORTED : true
                                                    ,_FF_AA_S_CATEGORY : "Strategic Portfolio" 
                                                    ,_FF_AA_S_GROUP_WRITE : "ACP_PRF_ADMIN" 
                                                    ,_FF_AA_S_GROUP_READ : "ALL" 
                                                    ,_FF_AA_S_PROGRAM_FILTER : portfolioWP.printattribute("ID") 
                                                    ,_FF_AA_S_PRJ_STATUS : "Initiative,Running" 
                                                    ,_FF_RA_USER_FF   : "INTRANET" 
                                                    ,_FF_RA_USER_FF   : "INTRANET" 
                                                    ,#DATASET# : "ACP_CF_D_MASTER_DATA"
                                                    );
  }

  return UserPortfolio;

}

function dcma_initialize_lines(prj) {
	if (!(prj instanceof plc.ordoproject)) return false;
	for (var rule in plc.__USER_TABLE_ACP_UT_CHECK_PROJECT_RULE) {
		var cpt_total = 0;
		var cpt_ok = 0;
		var result;
		if (plc.__USER_TABLE_ACP_UT_CHECK_PROJECT_RULE_PROJECT_VALUE.get(rule.printattribute("ID") + "@" + prj.NAME)instanceof plc.__USER_TABLE_ACP_UT_CHECK_PROJECT_RULE_PROJECT_VALUE) {
			continue;
		} else {
			result = new plc.__USER_TABLE_ACP_UT_CHECK_PROJECT_RULE_PROJECT_VALUE(NAME: rule.printattribute("ID") + "@" + prj.NAME
																				  ,ACP_UA_CHECK_RULE: rule
																				  ,ACP_UA_N_THRESHOLD: rule.ACP_UA_N_THRESHOLD
																				  ,#DATASET# : prj
																				  ,ACP_UA_B_IS_ACTIVE: true
																				  ,ACP_UA_N_TARGET: rule.ACP_UA_N_TARGET_PERC);
		}

	}

	return true;
}

function dcma_compute_lines(prj) {
	if (!(prj instanceof plc.ordoproject)) return false;
	if (prj.ACP_UA_S_SANITY_CHECK_BASELINE == "") {
	    plw.alert("Please, select a baseline");
	    return false;
	}
	with (prj.fromobject()) {
		for (var prj_rule in plc.__USER_TABLE_ACP_UT_CHECK_PROJECT_RULE_PROJECT_VALUE where prj_rule.ACP_UA_B_IS_ACTIVE) {
			var target = prj_rule.ACP_UA_N_TARGET;
			var formula = prj_rule.ACP_UA_CHECK_RULE.ACP_UA_S_ACTIVITY_FORMULA;
			var Replaced_Formula = (prj_rule.ACP_UA_N_THRESHOLD != 0) ? formula.replaceregexp("ACP_UA_N_THRESHOLD", "'" + prj_rule.ACP_UA_N_THRESHOLD.ToString("####") + "d'") : formula;
			var scope_formula = (prj_rule.ACP_UA_CHECK_RULE.ACP_UA_S_DATA_SCOPE == "") ? "TRUE" : prj_rule.ACP_UA_CHECK_RULE.ACP_UA_S_DATA_SCOPE;
			var cpt_total = 0;
			var cpt_ok = 0;
			if (prj_rule.ACP_UA_CHECK_RULE.ACP_UA_S_ON_CLASS == "project") {
				prj_rule.ModifyWithPlist(["ACP_UA_N_TOTAL", 1, "ACP_UA_N_TOTAL_KO", prj.callNumberformula(Replaced_Formula)]);
			} else {
				for (var obj in plc.get(prj_rule.ACP_UA_CHECK_RULE.ACP_UA_S_ON_CLASS) where obj.callbooleanformula(scope_formula)){
					cpt_total++;
				}
				for (var obj in plc.get(prj_rule.ACP_UA_CHECK_RULE.ACP_UA_S_ON_CLASS) where obj.callbooleanformula(scope_formula) && !obj.callbooleanformula(Replaced_Formula)){
					cpt_ok++;
				}
				prj_rule.ModifyWithPlist(["ACP_UA_N_TOTAL", cpt_total, "ACP_UA_N_TOTAL_KO", cpt_total - cpt_ok]);
			}
		}
		for (var prj_rule in plc.__USER_TABLE_ACP_UT_CHECK_PROJECT_RULE_PROJECT_VALUE where !prj_rule.ACP_UA_B_IS_ACTIVE) {
			prj_rule.ModifyWithPlist(["ACP_UA_N_TOTAL", 0, "ACP_UA_N_TOTAL_KO", 0]);
		}
	}
	return true;
}

function dcma_reset_lines(prj){
	with(prj.fromobject()){
		for (var line in plc.__USER_TABLE_ACP_UT_CHECK_PROJECT_RULE_PROJECT_VALUE) line.delete();
	}
	dcma_initialize_lines(prj);
	return true;
}

GENERATE BASELINES ATTRIBUTES**************

function referenceField_Reader(object,Attclass,fieldSlot,refName){
  var value=undefined; 
  var type = fieldSlot.type;
  // for project fields, check if the baseline is loaded (4724)
  if (object instanceof plc.project)
  {
    for (var vRef in object.get(#REFERENCES#) where vRef.name==refName)
    {
        if (vRef.loaded!=true) return undefined;
    }
  }
	if (Type=="NUMBER") value=object.callnumberformula("REFERENCE_NUMBER_VALUE(\""+Attclass+"\",\""+object.printattribute()+"\",\""+fieldSlot.representation+"\",\""+refName+"\")");
	else if (type=="STRING") value=object.callstringformula("REFERENCE_STRING_VALUE(\""+Attclass+"\",\""+object.printattribute()+"\",\""+fieldSlot.representation+"\",\""+refName+"\")");
	else if (type=="BOOLEAN") value=object.callbooleanformula("REFERENCE_BOOLEAN_VALUE(\""+Attclass+"\",\""+object.printattribute()+"\",\""+fieldSlot.representation+"\",\""+refName+"\")");
	else if (type=="DATE") value=object.calldateformula("REFERENCE_DATE_VALUE(\""+Attclass+"\",\""+object.printattribute()+"\",\""+fieldSlot.representation+"\",\""+refName+"\")");
	else if (type=="DURATION") value=object.calldurationformula("REFERENCE_DURATION_VALUE(\""+Attclass+"\",\""+object.printattribute()+"\",\""+fieldSlot.representation+"\",\""+refName+"\")");
	else if (type != undefined && type.findclass() instanceof ObjectClass) value=object.callstringformula("REFERENCE_STRING_VALUE(\""+Attclass+"\",\""+object.printattribute()+"\",\""+fieldSlot.representation+"\",\""+refName+"\")");
	return value;
}

function GenerateReferenceSlot(RefName,Attclass,AttributeName){

	//var Oclass = plw._re_js_get_class(Attclass);
	var Sclass = "Opx" + Attclass;
	var Oclass = Sclass.findclass();
	var attribute = Oclass.getSlotbyid(AttributeName);
	if (Attribute == undefined){
		plw.writetolog("Attribute ~a doesn't exists anymore, please, remove it from reference template ~a".format(AttributeName,RefName));
		return true;
	}
	var attribute_type = (attribute.type.search("Opx") != false) ? "STRING" : attribute.type;
	if (attribute.descriptor.type.name.name == "END-DATE") attribute_type = "end-date";
	var RefAttributeName = "ACP_DA_REF_" + attribute.representation + "_" + RefName;
	var RefAttributeDesc = attribute.comment + " " + RefName;

	plw.writetolog("Generate attribute ~a on class ~a for reference ~a".format(RefAttributeName,Attclass,RefName));
	var ReferenceSlotAttribute = Oclass.getslot(RefAttributeName);
	if (!(ReferenceSlotAttribute instanceof ObjectAttribute)){
		ReferenceSlotAttribute = new ObjectAttribute(Oclass,RefAttributeName,attribute_type);
	}

	ReferenceSlotAttribute.reader = function () {return referenceField_Reader(this,Attclass,attribute,RefName);};
	ReferenceSlotAttribute.comment = RefAttributeDesc; 
	ReferenceSlotAttribute.module = "Baselines"; 
	ReferenceSlotAttribute.hiddenInIntranetServer = false;
	return true;
}

function acp_pjs_ReadRefDate(type) {
	if (this instanceof plc.REFERENCE_WORK_STRUCTURE){
		var DatePlist = this.getinternalvalue("referenced_dates");
		if (DatePlist instanceof list && DatePlist.length > 0) { 
			var CompactRefDate = DatePlist[0];
			return CompactRefDate.get(type);
		}
	}
	return -1;
}

function relaxed_link_after_command(arg) { 
    with(plw.no_locking){
        if (arg.right.file != arg.left.file){
            arg.ignored = true;
        }
    }
}

function relaxed_link(arg){
	var check_function =  function() { relaxed_link_after_command( arg );};
	check_function.evalaftercommand(); 
}

function publish_MnT_PNL(){
  plw.writetolog("Wrapper publish_MnT_PNL, publish M&T PNL, script ACP_PJS_PNL_FIX");
  plw._fin_publish_a_PnL("ACP_PNL_MT");
}

Creation of user POST Method on https://airbus-newppm-test.planisware.live/alt/plw/localhost:8400/SNOW_USER_CREATION
Example of Body:

{"NAME" : "zzzzbee"
,"DESC" : "afff"
,"EMAIL_ADDRESS" : "TestUserDESC@tutu.fr"
,"LOGIN" : "Test Login"
,"_PRJ_DA_PROFILE_NAME" : "ACP_PRF_PM"
,"LOGIN" : "Test Login"
,"LIST_OF_GROUPS" : "PORT_UG_S,PORT_UG_SA"
,"ACP_DA_PORTFOLIO_WP_READ" : "Airbus"
,"ACP_DA_PORTFOLIO_WP_READ_WRITE" : "Airbus"
}

function snow_create_user_get(json){
  return plc.opx2user.get(json).desc;
}

function snow_create_user(json){
  plw.writetolog("Web service SNOW_USER_CREATION with parameters ~a".format(json));

  if (json.NAME == "" || json.NAME == undefined){
    return "NAME missing";
  }
  if (plc.opx2user.get(json.NAME) != undefined){
    return "User ~a already exist".format(json.NAME);
  }
  if (json.DESC == "" || json.DESC == undefined){
    return "Desc missing";
  }
  if (json.EMAIL_ADDRESS == "" || json.EMAIL_ADDRESS == undefined){
    return "email missing";
  }
  if (plc.user_group.get(json._PRJ_DA_PROFILE_NAME) == undefined || !plc.user_group.get(json._PRJ_DA_PROFILE_NAME)._PRF_AA_B_PROFILE ){
    return "profile not correct";
  }
  if (json.LOGIN == "" || json.LOGIN == undefined){
    return "LOGIN missing";
  }

  if (plc.5bs.get(json.ACP_DA_PORTFOLIO_WP_READ) == undefined){
    return "ACP_DA_PORTFOLIO_WP_READ ~a is not correct".format(json.ACP_DA_PORTFOLIO_WP_READ);
  }

  if (plc.5bs.get(json.ACP_DA_PORTFOLIO_WP_READ_WRITE) == undefined){
    return "ACP_DA_PORTFOLIO_WP_READ_WRITE ~a is not correct".format(json.ACP_DA_PORTFOLIO_WP_READ_WRITE);
  }

  var vGroups = [];
  vGroups.push(json._PRJ_DA_PROFILE_NAME);  
  vGroups.push("ALL");
  if (json.LIST_OF_GROUPS  != undefined){
    for (var OtherGroups in json.LIST_OF_GROUPS.parsevector()) {
      if (plc.user_group.get(OtherGroups) instanceof plc.user_group){
        vGroups.push(OtherGroups);
      } else{
        return "Group ~a is not correct".format(OtherGroups);
      }
    }
  }

  try{
   var user = new plc.OPX2_USER(
                                NAME         : json.NAME,
                                COMMENT      : json.DESC,
                                EMAIL_ADDRESS : json.EMAIL_ADDRESS,
                                LOGIN : json.LOGIN,
                                OPX2_INTRANET_ACCESS : true,
                                ACP_UA_B_SEND_EMAIL_NEXT_BATCH : true,
                                LIST_OF_GROUPS : vGroups.join(",")
                              );
    user.modifywithplist(["ACP_DA_PORTFOLIO_WP_READ",json.ACP_DA_PORTFOLIO_WP_READ,"ACP_DA_PORTFOLIO_WP_READ_WRITE",json.ACP_DA_PORTFOLIO_WP_READ_WRITE]);
  } catch (error e){
    plw.writeln(e.printStackTrace());
    return e;
  }

  return "User ~a has been created".format(json.NAME);
}

JSE Add realtion to retreives childs

function map_bm_bs_childrens(f){
	if(this instanceof plc.5bs){
		with(this.fromobject()){
			for (var child in plc.5bs) f.call(child);
		}
	}	
}

method acp_pjs_scenario_portfolio_reader on plc.OrdoProject(){
	var result = [];
	var prj = this;
	for (var Scenario in plc._FF_PT_FAVOR_FILTERS where Scenario._KP_AA_B_IS_A_SCENARIO 
						&& Scenario._ff_aa_s_proj_list.parsevector(",").position(prj.printattribute()) instanceof Number){
		result.push(Scenario.printattribute());
	}
	return result.removeduplicates().join(",");
}

method acp_pjs_scenario_portfolio_modifier on plc.OrdoProject(val){
	var CurrentScenario = this.acp_pjs_scenario_portfolio_reader();
	var vCurrentScenario = [];
	CurrentScenario.parsevector(",").map(function () {vCurrentScenario.push(plc._FF_PT_FAVOR_FILTERS.get(this));});
	var vNewScenario = [];
	val.parsevector(",").map(function () {vNewScenario.push(plc._FF_PT_FAVOR_FILTERS.get(this));});

	//Cleaning of scenarios
	if (vCurrentScenario != undefined){
		var vRemovedScenario = vCurrentScenario.difference(vNewScenario);
		for (var RemovedScenario in vRemovedScenario){
			plw.alert(RemovedScenario);
			RemovedScenario.set("_ff_aa_s_proj_list",RemovedScenario.get("_ff_aa_s_proj_list").parsevector(",").remove(this.name).join(","));
		}
	}
	//Add new scenarios
	for (var o_scenario in vNewScenario){
		if (o_scenario!= undefined){
			var vProjects =o_scenario.get("_ff_aa_s_proj_list").parsevector(",");
			vProjects.push(this.printattribute("ID"));
			o_scenario.set("_ff_aa_s_proj_list",vProjects.join(","));
		}
	}
	return true;
}

function create_portfolio_scenarios_slot_project(){
	var slot = plw.getslotbyid(this : plc.OrdoProject, "ACP_DA_SCENARIOS_LIST");
	  if(!(slot instanceof objectAttribute)){
	    slot = new objectAttribute(plc.OrdoProject, "ACP_DA_SCENARIOS_LIST", #TEMP-TABLE::..._FF_PT_FAVOR_FILTERS#);
	  }  
	  if(slot instanceof objectAttribute) {
	    // slot.setPlist(#LIST-CLASS#,#TEMP-TABLE::..._FF_PT_FAVOR_FILTERS#);
	    slot.setPlist(#LIST-CLASS#,new symbol("_FF_PT_FAVOR_FILTERS","TEMP-TABLE"));
	    slot.comment  = "Scenarios";
	    slot.reader   = undefined;
	    slot.modifier = undefined;
	    slot.reader   = function (){return this.acp_pjs_scenario_portfolio_reader();};
	    slot.modifier   = function (val){return this.acp_pjs_scenario_portfolio_modifier(val);};
	    slot.hiddeninintranetserver = false;
	    slot.length = 9999999;
	  }
}

function acp_ojs_GetSourceProject(_bm_bs){
	if (_bm_bs instanceof plc.5bs) {
		for (var plc.ordo_project prj in _BM_BS.PROJECTS where (prj.dataset_class == plc.projecttype.get("Project") || prj.dataset_class == plc.projecttype.get("Project.Workpackage"))
						&& prj._PM_NF_B_IS_A_VERSION == false) {
			return prj;
		}
	}
	return undefined;
}

function acp_ojs_GetSourceTopLevelActivity(act){
	if (act instanceof plc.workstructure) {
		var Prj = acp_ojs_GetSourceProject(act._bm_bs);
		if (Prj instanceof plc.ordoproject){
			var DestAct = plw.top_level_ws(Prj);
            if (DestAct instanceof plc.workstructure) {
				return DestAct;
			}
		}
	}
	return undefined;
}

function acp_ojs_PrjName_Reader(){
    if (this instanceof plc.5bs) {
        var Prj = acp_ojs_GetSourceProject(this);
        if (Prj instanceof plc.ordoproject) {
            return Prj.printattribute();
        }
    }
   return "";
}

function acp_ojs_TopLvlAct_Reader(){
    if (this instanceof plc.5bs) {
        var Prj = acp_ojs_GetSourceProject(this);
        if (Prj instanceof plc.ordoproject) {
            var act = plw.top_level_ws(Prj);
            if (act instanceof plc.workstructure) {
                return act.printattribute();
            }
        }
    }
    return "";
}

function acp_ojs_RelatedPrjAttr_Reader(){
	if (this instanceof plc.workstructure){
		var Prj = acp_ojs_GetSourceProject(this._bm_bs);
		if(Prj instanceof plc.ordo_project){ return Prj.name; }
	}
	return "";
}

function acp_ojs_GenerateDa() {
    var PrjAttrName = "ACP_DA_S_PRJ";
    var PrjAttr = plc.5bs.getslotbyid(PrjAttrName);
    if (!(PrjAttr instanceof ObjectAttribute))  {
        PrjAttr = new ObjectAttribute(plc.5bs,PrjAttrName,"STRING");
    }
    PrjAttr.comment = "Portfolio/WP associated project/WP";
    PrjAttr.reader = acp_ojs_PrjName_Reader;
    PrjAttr.setcacheonreader();
    var ActAttrName = "ACP_DA_S_TOP_LVL_ACT";
    var ActAttr = plc.5bs.getslotbyid(ActAttrName);
    if (!(ActAttr instanceof ObjectAttribute))  {
        ActAttr = new ObjectAttribute(plc.5bs,ActAttrName,"STRING");
    }
    ActAttr.comment = "Portfolio/WP associated top level activity";
    ActAttr.reader = acp_ojs_TopLvlAct_Reader;
    ActAttr.setcacheonreader();
	var RelatedPrjName = "ACP_DA_S_BM_SOURCE_PRJ";
    var RelatedPrjAttr = plc.workstructure.getslotbyid(RelatedPrjName);
    if (!(RelatedPrjAttr instanceof ObjectAttribute))  {
        RelatedPrjAttr = new ObjectAttribute(plc.workstructure,RelatedPrjName,"STRING");
    }
    RelatedPrjAttr.comment = "Portfolio/WP Project";
    RelatedPrjAttr.reader = acp_ojs_RelatedPrjAttr_Reader;
    RelatedPrjAttr.setcacheonreader();
}

function acp_pjs_GetActVectors(plc.ordo_project StratPrj,boolean GetSource){
	var ActVectHt = new hashtable("STRING");
	if (StratPrj instanceof plc.ordo_project){
		var ActVect = new vector();
		var DestActVect = new vector();
		With(StratPrj.fromobject()){
			for (var Act in plc.workstructure where Act._BM_AA_B_RESERVE == false && Act._BM_AA_B_IS_A_CONSO_LEVEL == false && 
							Act._BM_AA_S_SYNCHRONISE_WITH == "_BM_BS" && Act._BM_AA_N_LINKED_OBJECT != ""){
				var BmElt = plc.5bs.get(Act._BM_AA_N_LINKED_OBJECT.parseInt());
				if (BmElt instanceof plc.5bs) {
					ActVect.push(Act);
					if (GetSource){
						var DestAct = acp_ojs_GetSourceTopLevelActivity(act);
						if (DestAct instanceof plc.workstructure) {
							DestActVect.push(DestAct);
						}
					}
				}
			}
		}
		ActVectHt.set("Source",ActVect);
		ActVectHt.set("Dest",DestActVect);
	}
	return ActVectHt;
}

function acp_pjs_ComputeAndIndexCurves(plc.ordo_project StratPrj, string Curvename, ExpType,date SDate,date EDate, ActVect,boolean DoNotConso,boolean IncludeChildrentSumIndex, object2Target : undefined,object3Target : undefined ){
	var hashtable CurveAndSumHt = new hashtable("STRING");

	
	if (StratPrj instanceof plc.ordo_project){
		var hashtable CurveHt = new hashtable("OBJECT");
		var hashtable SumHt = new hashtable("OBJECT");
		var string CurveName = costklib.findcurveName(Curvename, expenditure_type: ExpType);
		var CurveVect;
		if (object2Target != undefined && object3Target != undefined){
			 CurveVect = costklib.computecurves(CurveName,plc.cost_unit.Get("KEUR"),plc.time_unit.get("YEAR"),false,SDate,EDate,ActVect, donotconsolidate : DoNotConso,objects2:object2Target, objects3 : object3Target);
		} else if (object2Target != undefined){
			CurveVect = costklib.computecurves(CurveName,plc.cost_unit.Get("KEUR"),plc.time_unit.get("YEAR"),false,SDate,EDate,ActVect, donotconsolidate : DoNotConso,objects2:object2Target);
		}else if (object3Target != undefined){
			CurveVect = costklib.computecurves(CurveName,plc.cost_unit.Get("KEUR"),plc.time_unit.get("YEAR"),false,SDate,EDate,ActVect, donotconsolidate : DoNotConso,objects2:object3Target);
		}else{
			CurveVect = costklib.computecurves(CurveName,plc.cost_unit.Get("KEUR"),plc.time_unit.get("YEAR"),false,SDate,EDate,ActVect, donotconsolidate : DoNotConso);
		}
		for (var Curve in CurveVect){
			var ActArray = Curve.getinternalvalue("object_list");
			var Act = ActArray[0];
			CurveHt.set(Act,Curve);
			if (IncludeChildrentSumIndex) {
				var ChildrenCurveVect = (SumHt.get(Act.wbs_element) != undefined) ? SumHt.get(Act.wbs_element) : new vector();
				ChildrenCurveVect.push(Curve);
				SumHt.set(Act.wbs_element,ChildrenCurveVect);
			}
		}
		CurveAndSumHt.set("CurveHt",CurveHt);
		CurveAndSumHt.set("SumHt",SumHt);
	}
	return CurveAndSumHt;
}

function acp_pjs_PublishBudgetTarget(string TimeScope){

function acp_pjs_PublishBudgetTarget(date Sdate, date Edate){
    var StratPrj = plw.currentpageobject();
	if (StratPrj instanceof plc.ordoproject && StratPrj.DATASET_CLASS == plc.projecttype.get("Strategic Project")) {
		if (StratPrj._TM_NF_B_USER_CAN_WRITE_ON_PROJECT) {
			// var date Sdate;
			// var date Edate;
			// if (TimeScope == "Current Year"){
			// 	Sdate = plw.periodstart(new date(),"Year",0);
			// 	Edate =  plw.periodstart(new date(),"Year",1);
			// } else if(TimeScope == "Next 10 years"){
			// 	Sdate = plw.periodstart(new date(),"Year",0);
			// 	Edate =  plw.periodstart(new date(),"Year",10);				
			// } else{
			// 	Sdate = plw.periodstart(new date(),"Year",1);
			// 	Edate =  plw.periodstart(new date(),"Year",2);				
			// }
    		// Build Activity Vector from Strategic Project & Activity Vector from "standard" Project
			var ActVectHt = acp_pjs_GetActVectors(StratPrj,true);
    		var ActVect = ActVectHt.get("Source");
    		var DestActVect = ActVectHt.get("Dest");
    		// Compute curves
			var SourceCurveAndSumHt = acp_pjs_ComputeAndIndexCurves(StratPrj,"BLANKET_ARCHIVED_PREDICTED_COST", "_BM_ET_BUDGET", SDate, EDate, ActVect, false , true);
    		var CurveSourceHt = SourceCurveAndSumHt.get("CurveHt");
    		var CurveSourceChildrenHt = SourceCurveAndSumHt.get("SumHt");

    		var CostAccount = plc.cbs_node.get(context.ACP_SET_DEFAULT_TARGET_COST_ACCOUNT);
			var CostCategory = plc.ACP_PT_CBS_SUPP_2.get(context.ACP_SET_DEFAULT_TARGET_COST_CATEGORY);

			var DestCurveAndSumHt = acp_pjs_ComputeAndIndexCurves(StratPrj,"BLANKET_ARCHIVED_PREDICTED_COST", "ACP_ET_TARGET", SDate, EDate, DestActVect, false , false,object2Target : CostAccount, object3Target: CostCategory);
    		var CurveDestHt = DestCurveAndSumHt.get("CurveHt");
    		// Write new target value into destination projects
    		With(plw.no_locking,plw.no_alerts){
    		    context.ACP_UA_DO_NOT_LOCK_TARGET = true;
    			for (var Act in CurveSourceHt){
    				var ValueToSet = (CurveSourceHt.get(Act) instanceof plc.curve) ? CurveSourceHt.get(Act).get(SDate) : 0;
    				var ChildrenCurveVect = CurveSourceChildrenHt.get(Act);
    				if (ChildrenCurveVect instanceof array){
    				    for (var Curve in ChildrenCurveVect) { ValueToSet = ValueToSet - Curve.get(SDate); }
    				}
    				var DestAct = acp_ojs_GetSourceTopLevelActivity(Act);
    				var DestCurve = CurveDestHt.get(DestAct);
    				if (DestCurve instanceof plc.Curve){
    					DestCurve.set(SDate,ValueToSet,true,EDate);
    					DestAct.project.ACP_UA_D_LAST_TARGET_PUBLICATION_DATE = new date();
    					DestAct.project.ACP_UA_S_LAST_TARGET_PUBLICATION_USER = context.applet.user.name;;
    				}
    			}
    			context.ACP_UA_DO_NOT_LOCK_TARGET = false;
    			StratPrj.ACP_UA_D_LAST_TARGET_PUBLICATION_DATE = new date();
			    StratPrj.ACP_UA_S_LAST_TARGET_PUBLICATION_USER = context.applet.user.name;
    		}
    		plw.alert("Budget target was published for year ~a".format(Sdate.getYear()));
		} else { plw.alert("You do not have write access to Strategic Portfolio."); }
	}
}

function acp_ojs_PublishCurYearBudgetTarget(){
    var Check = plw.question("Do you really want to publish Current Year Budget Target to Projects / WP ?");
	if (Check) {
		acp_pjs_PublishBudgetTarget(plw.periodstart(new date(),"Year",0), plw.periodstart(new date(),"Year",1));
	}
}

function acp_ojs_PublishNextYearBudgetTarget(){
    var Check = plw.question("Do you really want to publish Next Year Budget Target to Projects / WP ?");
	if (Check) {
		acp_pjs_PublishBudgetTarget(plw.periodstart(new date(),"Year",1), plw.periodstart(new date(),"Year",2));
		// acp_pjs_PublishBudgetTarget("Next Year");
	}
}

function acp_ojs_PublishNext5YearBudgetTarget(){
    var Check = plw.question("Do you really want to publish the Next 5 Years Budget Target to Projects / WP ?");
	if (Check) {

		for (var integer i = 1; i <= 5 ; i++){
			acp_pjs_PublishBudgetTarget(plw.periodstart(new date(),"Year",i), plw.periodstart(new date(),"Year",i+1));
		}
	}
}

function acp_ojs_generate_target_output(project,OutputDefName,ExpType,Reserve){
	if (project instanceof plc.ordoproject && OutputDefName != ""){
		with(project.fromobject()){
			var outputDef = plc.OutputDef.get(OutputDefName);
			if(outputDef instanceof plc.OutputDef){
				//On indexe les outputs existantes
				var ActOutputHt = new hashtable("OBJECT");
				for (var x in outputDef.getinternalvalue("output_class")){
					var Act = x.ACTIVITY;
					var OutputHt = (ActOutputHt.get(Act) instanceof hashtable) ? ActOutputHt.get(Act) : new hashtable("STRING");
					(OutputHt.get(x.SD) instanceof plc.output) ? x.delete() : OutputHt.set(x.SD,x);
					ActOutputHt.set(Act,OutputHt);
				}
				var SDate = project.ACP_UF_D_MIN_TARGET_DATE;
				var Edate = project.ACP_UF_D_MAX_TARGET_DATE;
				if (SDate instanceof date && Edate instanceof date){
					// Build Activity Vector from Strategic Project & Activity Vector from "standard" Project
					var ActVectHt = acp_pjs_GetActVectors(project,false);
					var ActVect = ActVectHt.get("Source");
					// Compute curves
					var SourceCurveAndSumHt = acp_pjs_ComputeAndIndexCurves(project,"BLANKET_ARCHIVED_PREDICTED_COST", ExpType, SDate, EDate, ActVect, false , true);
					var CurveSourceHt = SourceCurveAndSumHt.get("CurveHt");
					var CurveSourceChildrenHt = SourceCurveAndSumHt.get("SumHt");
					// Write new target value into destination projects
					With(plw.no_locking,plw.no_alerts){
						var TimeWindowVect = new plw.datevector(plc.time_unit.get("YEAR"), SDate, Edate);
						for (var Act in CurveSourceHt){
							var ExistingOutputHt = ActOutputHt.get(Act);
							var ChildrenCurveVect = CurveSourceChildrenHt.get(Act);
							if (Reserve == false || ChildrenCurveVect instanceof array){
								for (var Dat in TimeWindowVect){
									var ExistingOutput = (ExistingOutputHt instanceof hashtable) ? ExistingOutputHt.get(Dat) : undefined;
									var ValueToSet = (CurveSourceHt.get(Act) instanceof plc.curve) ? CurveSourceHt.get(Act).get(Dat) : 0;
									for (var Curve in ChildrenCurveVect) { ValueToSet = ValueToSet - Curve.get(Dat); }
									// plw.writeln("Source Act "+Act+" Value "+ ValueToSet);
									var output_vector = new vector ();
									output_vector.push("DEF");
									output_vector.push(OutputDefName);
									output_vector.push("ACTIVITY");
									output_vector.push(Act);
									output_vector.push("DATASET");
									output_vector.push(Act.DATASET);
									output_vector.push("UNIT");
									output_vector.push("KEUR");
									output_vector.push("VALUE");
									output_vector.push(ValueToSet);
									output_vector.push("_BM_BS");
									output_vector.push(act._BM_BS);
									output_vector.push("START-DATE");
									output_vector.push(Dat);
									output_vector.push("END-DATE");
									output_vector.push(Dat);
									if(ExistingOutput instanceof plc.output){
										(ValueToSet != 0) ? ExistingOutput.modifywithplist(output_vector) : ExistingOutput.delete();
										ExistingOutputHt.rem(Dat);
									}else if(ValueToSet != 0){ ExistingOutput = "opxoutput".MakeOpx2ObjectWithPlist(output_vector); }
								}
							}
						}
						for(var Act in ActOutputHt){
							var ExistingOutputHt = ActOutputHt.get(Act);
							for(var RemainingOuutput in ExistingOutputHt){
								if(ExistingOutputHt.get(RemainingOuutput) instanceof plc.output){
									ExistingOutputHt.delete();
									ExistingOutputHt.rem(RemainingOuutput);
								}
							}
							ActOutputHt.rem(Act);
							ExistingOutputHt.delete();
						}
						ActOutputHt.delete();
					}
				}
			}
		}
	}
}

function acp_pjs_ComputeBudgetTarget(StratPrj){
if(StratPrj instanceof plc.ordo_project){
var Today = new date();
var tu = plc.time_unit.get("YEAR");
var SDate = plw.periodstart(Today, tu, -1);
var EDate = plw.periodstart(Today, tu, 5);
var string CurveName = costklib.findcurveName("BLANKET_ARCHIVED_PREDICTED_COST", expenditure_type: "_BM_ET_BUDGET");
var CurveVect = costklib.computecurves(CurveName,plc.cost_unit.Get("KEUR"),plc.time_unit.get("YEAR"),false,SDate,EDate,ActVect, donotconsolidate : DoNotConso);
}
}

function acp_pjs_OpenSelectedVersion(){
	var currentVersion = context._BM_AA_S_BUDGET_VERSION;
	var Prj = (currentVersion != "") ? plc.ordoproject.get(currentVersion) : plw.currentpageobject();
	if(Prj instanceof plc.ordoproject && Prj.open == false) { Prj.open(); }
}

function SynchronizeJiraProjects(){
    for (var project in plc.ordoProject where project.ACP_UA_B_JIRA_AUTO_SYNC){
        if (project.ACP_UA_S_JIRA_PROJECT != ""){
            with([plw.no_alerts,plw.no_locking]){ acp_import_jiraAPI(project);}
            plw.writeln("Project ~a has been treated".format(project.printattribute("NAME")));
        }
        else{ plw.writeln("No Jira project selected for the project ~a".format(project.printattribute("NAME")));}
    }
}

function for global check and referential creation before import

function acp_js_actuals_import_prechecks(sYear, CurrentEvent){
	var check = false;
	
	// hashtable preparation:
	var hCostCenterGroup = new hashtable("string");
	for (var oCCG in plc._inf_pt_cbs6){
		hCostCenterGroup.set(oCCG.get("ACP_UA_S_CODE"),oCCG.get("IDENTIFIER"));
	}
	
	var hEntity = new hashtable("string");
	for (var oEntity in plc._inf_pt_cbs4){
		hEntity.set(oEntity.get("ACP_UA_S_CODE"),oEntity.get("IDENTIFIER"));
	}
	
	// scan the TT
	for (var each in plc.ACP_TT_ACTUALS_IMPORT where each.get("EVENT") == CurrentEvent){
		// global check
		if (each.get("CALENDAR_YEARMONTH").substring(0,4) == sYear && each.get("CALENDAR_YEARMONTH").substring(4,6) == "01") check = true;
		
		// CCGs creation
		var oNewCCG = undefined;
		if (hCostCenterGroup.get(each.get("COST_CENTER_GROUP")) == undefined){
			oNewCCG = plc._inf_pt_cbs6.makeOpx2Object(
				"NAME",			each.get("COST_CENTER_GROUP"),
				"DESC",			each.get("COST_CENTER_GROUP"),
				"ACP_UA_S_CODE",each.get("COST_CENTER_GROUP"),
				"PARENT",		"ORPHAN_CCG",
				"FILE",			"ACP_CF_D_MASTER_DATA"
			);
			hCostCenterGroup.set(each.get("COST_CENTER_GROUP"), each.get("COST_CENTER_GROUP"));
		}
		// Entities creation
		var oNewEntity = undefined;
		if (hEntity.get(each.get("ENTITY")) == undefined ){
			var oNewEntity = plc._inf_pt_cbs4.makeOpx2Object(
				"NAME",			each.get("ENTITY"),
				"DESC",			each.get("ENTITY"),
				"ACP_UA_S_CODE",each.get("ENTITY"),
				"PARENT",		"ORPHAN_ENTITY",
				"FILE",			"ACP_CF_D_MASTER_DATA"
			);
			hEntity.set(each.get("ENTITY"), each.get("ENTITY"));
		};
	}
	return check;
}

function acp_js_actuals_import_remove_actuals_in_scope(sYear){
	var count = 0;
	for (var oActualExpenditure in plc.INCURRED_EXPENDITURE where oActualExpenditure.get("ACP_UA_N_YEAR").tostring("####") == sYear) {
		count++;
		oActualExpenditure.delete();
	}
	plw.writeln(Count.tostring("####") + " actuals expenditures deleted for year " + sYear);
}

function acp_js_actuals_import_remove_all_commitments(){
	var count = 0;
	for (var oActualExpenditure in plc.INCURRED_EXPENDITURE where oActualExpenditure.get("TYPE") == "Committed") {
		count++;
		oActualExpenditure.delete();
	}
	plw.writeln(Count.tostring("####") + " commitments  deleted");
}

function acp_js_actuals_import_upload_button(){
	var sTempDir = context.callstringformula("$TEMPORARY_FILES_DIRECTORY");
	var sDestinationDir = sTempDir + "actuals_ifrp/";

	//choose and upload
	var vTmpPathsObject = plw.selectfile("Actual import file","","*.csv").getserverfiles();
	if (vTmpPathsObject == false) return false;
	var vTmpPaths = vTmpPathsObject[0];
	var sTmpPath = vTmpPaths[0];
	var sFileName = vTmpPaths[1].split("\\").pop();
	var sDestinationPath = sDestinationDir+sFileName;
	// move it to the repository
	var oFileToMove = new pathname(sTmpPath);
	if (oFileToMove.probefile() != false) {
		oFileToMove.copyFile(sDestinationPath, true);
		oFileToMove.deleteFile();
	}
	acp_js_actuals_import_refresh_button();
}

function acp_js_actuals_import_refresh_button(){
	// clean the table
	for (var obj in plc.__USER_TABLE_ACP_UT_ACTUALS_IMPORT_FILE_MANAGEMENT) {
		obj.delete();
	}
	
	// update the list
	var sTempDir = context.callstringformula("$TEMPORARY_FILES_DIRECTORY");
	var sInputDirectory = sTempDir + "actuals_ifrp/";
	var oInputDirectory = new pathname(sInputDirectory);
	
	// create the repo if it doesn't exists
	if (sInputDirectory.probefile() == false) sInputDirectory.mkdir();

	for (var oPath in oInputDirectory){
		var oFile = plc.__USER_TABLE_ACP_UT_ACTUALS_IMPORT_FILE_MANAGEMENT.makeOpx2Object(
			"NAME",						oPath.tostring(),
			"ACP_UA_S_FILEPATH",		oPath.tostring(),
			"ACP_UA_D_FILE_LAST_DATE",	oPath.fileWriteDate(),
			"FILE",						"ACP_CF_D_OTHER_DATA"
		);
	}
}

function acp_js_actuals_import_delete_button(){
	for (var each in plw.currentselection()){
		each.acp_js_actuals_import_delete_file();
	}
	acp_js_actuals_import_refresh_button();
}

method acp_js_actuals_import_delete_file on plc.__USER_TABLE_ACP_UT_ACTUALS_IMPORT_FILE_MANAGEMENT (){
	var sTempDir = context.callstringformula("$TEMPORARY_FILES_DIRECTORY");
	var sInputDirectory = sTempDir + "actuals_ifrp/";
	var oFileInPlw = this;
	var oFileInServer = new pathname(oFileInPlw.printattribute("NAME"));
	if (oFileInServer.probefile() != false) oFileInServer.deleteFile();
	if (oFileInServer.probefile() == false) oFileInPlw.delete();
}

function acp_js_actuals_import_download_button(){
	for (var each in plw.currentselection()){
		each.acp_js_actuals_import_download_file();
	}
}

method acp_js_actuals_import_download_file on plc.__USER_TABLE_ACP_UT_ACTUALS_IMPORT_FILE_MANAGEMENT (){
	var oFileInPlw = this;
	var oFileInServer = new pathname(oFileInPlw.printattribute("NAME"));
	if (oFileInServer.probefile() != false) plw.downloadFileFromServer(oFileInPlw.printattribute("NAME"));
}

method acp_js_actuals_import_create_temp_file on plc.__USER_TABLE_ACP_UT_ACTUALS_IMPORT_FILE_MANAGEMENT(sFileNewName) {
	var oFileToTempify = new pathname (this.printattribute("NAME"));
	oFileToTempify.copyFile(sFileNewName,true);
	acp_js_actuals_import_refresh_button();
}

function apply_dmr_on_one_object(obj,slot,value_formula){
    obj.set(slot.representation,obj.callstringformula(value_formula));   
}

function apply_dmr_on_all_objects(dmrName){
    var dmr = plc._L1_PT_DCR.get(dmrName);
    var filter = dmr._L1_AA_S_CLASS_FILTER;
    var value_formula = dmr._L1_AA_S_TAKE_VALUE;
    var sClass = dmr._L1_AA_S_CLASS;
    var oClass = plw._utils_findclass(sClass);
    var datasetClass = dmr.project_types;
    var Att = dmr._L1_AA_S_ATTR;
    var slot = oClass.getslotbyid(Att);
    var DatasetClassFormula = "belongs(\"DATASET_CLASS\",\"~A\")".format(datasetClass);
    var steps_nb = 0;

    for ( var obj in oClass  where obj.callbooleanformula(DatasetClassFormula) && obj.callbooleanformula(filter)) steps_nb++;

    var pcall = new plw.parallelcall(call : function (obj) { apply_dmr_on_one_object(obj,slot,value_formula);}, batchsize : 10, nbthreads : 5);
    with ([plw.monitoring(title: '...Apply DMR', steps: steps_nb),pcall,plw.no_locking]){
    for ( var obj in oClass  where obj.callbooleanformula(DatasetClassFormula) && obj.callbooleanformula(filter) ){
          pcall(obj);
          "Apply DMR...".monitor(steps_nb);
        }
    }
  return true;
}

function acp_milestones_with_clashes_recompute(){

    context.CallMacro("RECOMPUTE-DATES");
    
    for (var act in plc.workstructure){
        with([plw.no_alerts,plw.no_locking]){
    		if(act.ACP_UA_B_ACTIVITY_CLASH){
    			act.ACP_UA_B_ACTIVITY_CLASH_BATCH = true;
            }else{
				act.ACP_UA_B_ACTIVITY_CLASH_BATCH = false;
			}
        }
    }
}

clean "See shared milestones" on each project

function acp_clean_See_Shared(){
	for (var oPrj in plc.project){
		oPrj.SEE_SHARED_MILESTONES_FROM = "";
	}
}

list of projects with shared milestones

function acp_vPrjWithShared(){
	var vPrjWithShared = new vector();
	for (var oPrj in plc.project where oPrj.5BS.printattribute("ID") != ""){
		with (oPrj.fromobject()){
			for (var oAct in plc.workstructure where oAct.SHARED_MILESTONE == true) {
				vPrjWithShared.push(oPrj);
				break;
			}
		}
	}
	return vPrjWithShared;
}

vector of WP children of the WP given

function acp_vWP_children(oWP){
	var vWPChildren = new vector();
	with(oWP.fromobject()){
		for (var oWPChild in oWP.children where oWPChild instanceof plc.5BS && oWPChild.5BS == oWP){
			vWPChildren.push(oWPChild);
		}
	}
	return vWPChildren;
}

vector of project identifiers with shared milestone under the WP given

function acp_vPrjWithSharedFromWP(oWP, vPrjWithShared){
	var vPrjWithSharedFromWP = new vector();
	for (var oPrj in vPrjWithShared where oPrj.5BS == oWP){
		vPrjWithSharedFromWP.push(oPrj.printattribute("ID"));
	}
	return vPrjWithSharedFromWP;
}

function acp_fix_the_list(vParentWP, vPrjWithShared, i){
i++; //depth
	for (var oParentWP in vParentWP){
		var vChildrenWP = acp_vWP_children(oParentWP);
		if (vChildrenWP.length > 0){ // si le WP a des enfants
			//identification des projets avec shared milestones
			var vPrjWithSharedFromWP = acp_vPrjWithSharedFromWP(oParentWP, vPrjWithShared);
			// application des share aux projets des WP enfants
			for (var oChildWP in vChildrenWP){
				for (var oPrj in plc.project where oPrj.5BS == oChildWP){
					var vSeeShared = oPrj.SEE_SHARED_MILESTONES_FROM.parsevector();
					vSeeShared = plw.vector_plus(vSeeShared, vPrjWithSharedFromWP);
					oPrj.SEE_SHARED_MILESTONES_FROM = vSeeShared.join(",");
				}
				acp_fix_the_list([oChildWP], vPrjWithShared, i);
			}
		}
	}
}

method DateSortingAttribute on plc.workstructure (attName){
	if (this instanceof plc.workstructure){
		var date = this.get(attName);
		if (date instanceof date) {
			return date.sdate;
		}
		else {
			return -1;
		}
	}		
}

insert_expenditure("Benefits",#ACP_RE_POP_EXPENDITURE_BENEFITS_PUB#,false);
insert_expenditure("Initial",#X_GEN_PLANNED_EXP_FORM#,true);
insert_expenditure("EVM",#X_GEN_PLANNED_EXP_FORM#,true);

function insert_expenditure(type,report,impose_unit){
    var string act="";
    var string cbs="";
    var string cbs2="";
    var string cbs4="";
    var string cbs5="";
    var string cbs6="";
    var string res="";
    var string unit = impose_unit ? context.default_cost_unit : "";
    
	for (var each in  plw.selection_get() where each.TIME_SYNTHESIS instanceof plc.TIME_SYNTHESIS){
		if (each.TIME_SYNTHESIS.ACTIVITY.internal==false){act=each.TIME_SYNTHESIS.ACTIVITY;}
		if (each.TIME_SYNTHESIS.COST_ACCOUNT.internal==false){cbs=each.TIME_SYNTHESIS.COST_ACCOUNT;}
		if (each.TIME_SYNTHESIS._INF_RA_CBS2.internal==false){cbs2=each.TIME_SYNTHESIS._INF_RA_CBS2;}
		if (each.TIME_SYNTHESIS._INF_RA_CBS4.internal==false){cbs4=each.TIME_SYNTHESIS._INF_RA_CBS4;}
		if (each.TIME_SYNTHESIS._INF_RA_CBS5.internal==false){cbs5=each.TIME_SYNTHESIS._INF_RA_CBS5;}
		if (each.TIME_SYNTHESIS._INF_RA_CBS6.internal==false){cbs6=each.TIME_SYNTHESIS._INF_RA_CBS6;}
		if (each.TIME_SYNTHESIS.UNIT.internal==false){unit=each.TIME_SYNTHESIS.UNIT;}
		break;
    }
	
	var sd = undefined;
	var ed = undefined;
    if(!plw._utilisvirtualdataset("") && plw.CurrentPageObject() instanceof plc.ordo_project){
        var prj_sd = plw.CurrentPageObject().get("OD");
        var prj_ed = plw.CurrentPageObject().get("ED");
        
		sd = (prj_sd <=  context.GEN_CHART_DD) ? prj_sd : context.GEN_CHART_DD;
		ed = (prj_ed >=  context.GEN_CHART_ED) ? prj_ed : context.GEN_CHART_ED;
    } else{
		sd = context.GEN_CHART_DD;
		ed = context.GEN_CHART_ED;
	}

    if (plw.selection_length() != 0){
        plc.expenditure.editobject(report,[
										  "WORK-STRUCTURE",act
										  ,"COST_ACCOUNT",cbs
										  ,"_INF_RA_CBS4",cbs4
										  ,"_INF_RA_CBS5",cbs5
										  ,"_INF_RA_CBS6",cbs6
										  ,"DURATION_COMPUTATION",#FIXED-DATES#
										  ,"TYPE",type
										  ,"SD",sd
										  ,"ED",ed
										  ,"UNIT",unit
										  ]);
    } else{
        plc.expenditure.editobject(report,[
											"TYPE",type
											,"DURATION_COMPUTATION",#FIXED-DATES#
											,"SD",sd
											,"ED",ed
											,"UNIT",unit
											]);
    }   	
	
	
}

function GetCurrentProjectActivityListQuestion(){
	var CurrentPage = plw.currentpageobject();
	if (CurrentPage instanceof plc.ordoproject){
		return CurrentPage;
	} 
	if (CurrentPage instanceof plc.virtualdataset){
		var lPrj = new list();
		if (CurrentPage.selected_activities != ""){
			for (var wbs in CurrentPage.getinternalvalue("selected_activities") ){
				lPrj.unshift(wbs);
			}
		}else{
			for (var prj in CurrentPage.getinternalvalue("Selected_Datasets")){
				lPrj.unshift(prj);
			}
		}
		if (lPrj.length == 1){
			return lPrj[0];
		} else{
			var lChoice = new list();
			var cpt = 0;
			for (var prj in lPrj){
				if (cpt == 0 ) {
					cpt++;
					continue;
				}
				lChoice.push(new list(cpt,prj.printattribute()));
				cpt++;
			}
			 var answer = true;
			 var msg = "To which project do you want to create the forecast?";
			 var answer =  msg.userquestion("Select a project/activity",lPrj[0].printattribute(),"Cancel",lChoice);
			 if (answer == true) return lPrj[0];
			 if (!(answer)) return false;
			 return lPrj[answer];
		}
	}
}

function insert_expenditure_no_dialog(type,impose_unit,NumbLine){
    var string act="";
    var string cbs="";
    var string cbs2="";
    var string cbs4="";
    var string cbs5="";
    var string cbs6="";
    var string res="";
    var string cbs_supp_2=plc.ACP_PT_CBS_SUPP_2.get("Standard");
    var string unit = impose_unit ? context.default_cost_unit : "KEUR";
	
	var sd = undefined;
	var ed = undefined;
	var exp = undefined;
	var project;

	for (var each in  plw.selection_get() where each.TIME_SYNTHESIS instanceof plc.TIME_SYNTHESIS){
		if (each.TIME_SYNTHESIS.ACTIVITY.internal==false){act=each.TIME_SYNTHESIS.ACTIVITY; project = each.TIME_SYNTHESIS.ACTIVITY.FILE;}
		if (each.TIME_SYNTHESIS.COST_ACCOUNT.internal==false){cbs=each.TIME_SYNTHESIS.COST_ACCOUNT;}
		if (each.TIME_SYNTHESIS._INF_RA_CBS2.internal==false){cbs2=each.TIME_SYNTHESIS._INF_RA_CBS2;}
		if (each.TIME_SYNTHESIS._INF_RA_CBS4.internal==false){cbs4=each.TIME_SYNTHESIS._INF_RA_CBS4;}
		if (each.TIME_SYNTHESIS._INF_RA_CBS5.internal==false){cbs5=each.TIME_SYNTHESIS._INF_RA_CBS5;}
		if (each.TIME_SYNTHESIS._INF_RA_CBS6.internal==false){cbs6=each.TIME_SYNTHESIS._INF_RA_CBS6;}
		if (each.TIME_SYNTHESIS.ACP_RA_CBS_SUPP_2.internal==false){cbs_supp_2=each.TIME_SYNTHESIS.ACP_RA_CBS_SUPP_2;}
		if (each.TIME_SYNTHESIS.UNIT.internal==false){unit=each.TIME_SYNTHESIS.UNIT;}
		break;
    }
	
	if (act == ""){
		var currentPage = GetCurrentProjectActivityListQuestion();
		project = (currentPage instanceof plc.ordo_project) ? currentPage :"";
		act = (currentPage instanceof plc.workstructure) ?  currentPage : plw._UtilsGetTopLevel(currentPage).pop();
	}

	
    if(!plw._utilisvirtualdataset("") && plw.CurrentPageObject() instanceof plc.ordo_project){
		var prj_sd = plw.CurrentPageObject().get("OD");
        var prj_ed = plw.CurrentPageObject().get("ED");
        
		sd = (prj_sd <=  context.GEN_CHART_DD) ? prj_sd : context.GEN_CHART_DD;
		ed = (prj_ed >=  context.GEN_CHART_ED) ? prj_ed : context.GEN_CHART_ED;
		if (act == "" || act == undefined ){
			act = plw._UtilsGetTopLevel(project).pop();
		}
    } else{
		sd = context.GEN_CHART_DD;
		ed = context.GEN_CHART_ED;
	}
	// Generate CBS3: 
	for (var i = 1; i <= NumbLine; i++){
		var cbs3 = new plc._INF_PT_CBS3(NAME:context.CallStringFormula("GENERATE_CODE(\"ACP_CG_CBS3_LINE\")"),file : project);
		if (!(cbs3 instanceof plc._INF_PT_CBS3)) return false;
		
		if (plw.selection_length() != 0){
			 exp = new plc.expenditure(
									  WORK_STRUCTURE:act
									  ,FILE:project
									  ,COST_ACCOUNT: cbs
									  ,_INF_RA_CBS2: cbs2
									  ,_INF_RA_CBS3: cbs3
									  ,_INF_RA_CBS4: cbs4
									  ,_INF_RA_CBS5 : cbs5
									  ,_INF_RA_CBS6 : cbs6
									  ,ACP_RA_CBS_SUPP_2 : cbs_supp_2
									  ,DURATION_COMPUTATION:#FIXED-DATES#
									  ,TYPE : type
									  ,SD : sd
									  ,ED : ed
									  ,UNIT : unit
									  );
		} else{
			exp = new plc.expenditure(
									TYPE:type
									,WORK_STRUCTURE:act
									,FILE:project
									,DURATION_COMPUTATION:#FIXED-DATES#
									,ACP_RA_CBS_SUPP_2 : cbs_supp_2
									,_INF_RA_CBS3:cbs3
									,SD:sd
									,ED:ed
									,UNIT:unit
									);
			}
	}
}

function acp_initialize_evm(){
    var oCurObject = plw.CurrentPageObject(); 
    with(oCurObject.fromobject()) {
        var i = 0;
        if (plw.selection_length() != 0){
             var boolean question = plw.question("Are you sure you want to initialize EVM with selected forecast(s)?");
            if(!question) {return false;}
            else{
            	for (var each in  plw.selection_get() where each.TIME_SYNTHESIS instanceof plc.TIME_SYNTHESIS && each.TIME_SYNTHESIS.TYPE != "EVM" && each.TIME_SYNTHESIS.ACTIVITY.ACP_UA_B_FOR_EVM){
            	     for(var pe in each.TIME_SYNTHESIS.get("relation-Expenditure")){
						var LineNumberObject = new plc._INF_PT_CBS3(NAME:context.CallStringFormula("GENERATE_CODE(\"ACP_CG_CBS3_LINE\")"),file : oCurObject);
            	        with([plw.no_locking,plw.no_alerts]) pe.copy("type","EVM" , "_CHG_RA_CHANGE_OF_SCOPE", "","_INF_RA_CBS3",LineNumberObject);
            	        i++;
            	     }
            	}
            	if(i == 0){plw.alert("No forecasts related to EVM activity");}
            }
        }
        else{
            var boolean question = plw.question("Are you sure you want to initialize EVM with all existing forecasts?");
            if(!question) {return false;}
            else{
                for (var pe in plc.expenditure where pe.ACP_UA_B_IS_FORECAST && pe.ACTIVITY.ACP_UA_B_FOR_EVM){
					var LineNumberObject = new plc._INF_PT_CBS3(NAME:context.CallStringFormula("GENERATE_CODE(\"ACP_CG_CBS3_LINE\")"),file : oCurObject);
        			with([plw.no_locking,plw.no_alerts]) pe.copy("type","EVM" , "_CHG_RA_CHANGE_OF_SCOPE", "","_INF_RA_CBS3",LineNumberObject);
        			i++;
        		}
        		if(i == 0){plw.alert("No forecasts related to EVM activity");}
            }
        }
    }
}

function acp_ojs_select_cpn(){
    var link = new hyperlink("Fvalue",
                           "Attribute",
                           "ID",
                           "EditorType",
                           "ACP_RE_FUNDING_SOURCE_CPN",
                           "Popup",
                           true);
    if(link != undefined && link != false)
	{
		  link.go(context);
	}
}

Used to generate Line number on project forecast

function acp_ojs_initialize_line_number(){
    var oCurObject = plw.CurrentPageObject(); 
	var LineNumberObject = undefined;
	var i = 0;
	
    with(oCurObject.fromobject()){
		var boolean question = plw.question("Forecast will be initialize, do you want to continue?");
		if(!question) {return false;}
		else{
			for (var pe in plc.expenditure where pe._INF_RA_CBS3.internal==true){	
				LineNumberObject = new plc._INF_PT_CBS3(NAME:context.CallStringFormula("GENERATE_CODE(\"ACP_CG_CBS3_LINE\")"),file : oCurObject);
				with([plw.no_locking,plw.no_alerts]) pe._INF_RA_CBS3 = LineNumberObject;	
				i++;				
			}
			plw.alert(i+" Forecast line(s) have been initialized");
		}
	}	
}*/

Used to generate Line number on project forecast

function acp_ojs_initialize_line_number(){
    var oCurObject = plw.CurrentPageObject(); 
	var LineNumberObject = undefined;
	var i = 0;
	
    with(oCurObject.fromobject()){
		var boolean question = plw.question("Forecast will be initialize, do you want to continue?");
		if(!question) {return false;}
		else{
			for(var ts in oCurObject.get("TIME-SYNTS") where ts._INF_RA_CBS3.internal==true){
				LineNumberObject = new plc._INF_PT_CBS3(NAME:context.CallStringFormula("GENERATE_CODE(\"ACP_CG_CBS3_LINE\")"),file : oCurObject);
				with([plw.no_locking,plw.no_alerts]) ts._INF_RA_CBS3 = LineNumberObject;
				i++;
				/*for (var pe in ts.get("RELATION-EXPENDITURE") where pe._INF_RA_CBS3.internal==true){
					with([plw.no_locking,plw.no_alerts]) pe._INF_RA_CBS3 = LineNumberObject;
				}*/
			}
			plw.alert(i+" Forecast line(s) have been initialized");
		}
	}	
}

function acp_js_cvault_import_prechecks(){	
	var NewLine = "get_char".call(10);
	var n_countImportedObject = 0;
	var n_countRejectedObject = 0;
		var oNewPENAME;
		var oNeWMSN;
	for (var o_tempact in plc.ACP_TT_CVAULT) {
		n_countImportedObject++;
		var message_vect = new Vector();
		var message = "";
		// Blocking Error
		if (o_tempact.MSN == 0 || o_tempact.PENAME == "" || o_tempact.PROGRAM=="") {
			message = "Error: Empty key (Program, MSN, PE-NAME)";
			message_vect.push(message);
			o_tempact.NOT_TO_TREAT=true;
			n_countRejectedObject++;
		}
		if (o_tempact.BASELINE_ENTRY == undefined && o_tempact.BASELINE_EXIT == undefined && o_tempact.TARGET_ENTRY == undefined &&
			o_tempact.TARGET_EXIT == undefined) {
			message = "Error: Target and Baseline dates are empty";
			message_vect.push(message);
			 o_tempact.NOT_TO_TREAT=true;
			 n_countRejectedObject++;
;
		}
		if (o_tempact.ACHIEVED_START == undefined && o_tempact.ACHIEVED_END == undefined && o_tempact.TARGET_ENTRY == undefined &&
			o_tempact.TARGET_EXIT == undefined && o_tempact.BASELINE_ENTRY == undefined && o_tempact.BASELINE_EXIT == undefined) {
			message = "Error: Target , Actual and baseline dates are empty";
			message_vect.push(message);
			 o_tempact.NOT_TO_TREAT=true;
			 n_countRejectedObject++;

		}
		// Empty dates
		if (o_tempact.TARGET_ENTRY == undefined && o_tempact.TARGET_EXIT != undefined) {
			message = "Target Entry is empty -> Target Exit is used instead";
			message_vect.push(message);
			o_tempact.TARGET_ENTRY = o_tempact.TARGET_EXIT;
		}
		if (o_tempact.TARGET_ENTRY != undefined && o_tempact.TARGET_EXIT == undefined) {
			message = "Target Exit is empty -> Target Entry is used instead";
			message_vect.push(message);
			o_tempact.TARGET_EXIT = o_tempact.TARGET_ENTRY;
		}
		if (o_tempact.ACHIEVED_START == undefined && o_tempact.ACHIEVED_END != undefined) {
			message = "Achieved Start is empty -> Achieved End is used instead";
			message_vect.push(message);
			o_tempact.ACHIEVED_START = o_tempact.ACHIEVED_END;
		}
		if (o_tempact.ACHIEVED_START != undefined && o_tempact.ACHIEVED_END == undefined) {
			message = "Achieved End is empty -> Achieved Start is used instead";
			message_vect.push(message);
			// o_tempact.ACHIEVED_END = o_tempact.ACHIEVED_START;
		}
		if (o_tempact.BASELINE_ENTRY == undefined && o_tempact.BASELINE_EXIT != undefined) {
			message = "Baseline Entry is empty -> Baseline Exit is used instead";
			message_vect.push(message);
			// o_tempact.BASELINE_ENTRY = o_tempact.BASELINE_EXIT;
		}
		if (o_tempact.BASELINE_ENTRY != undefined && o_tempact.BASELINE_EXIT == undefined) {
			message = "Baseline Exit is empty -> Baseline Entry is used instead";
			message_vect.push(message);
			// o_tempact.BASELINE_EXIT = o_tempact.BASELINE_ENTRY;
		}
        // Inconsistent data
		if (o_tempact.TARGET_ENTRY != undefined && o_tempact.TARGET_EXIT != undefined) {
			if (o_tempact.TARGET_ENTRY> o_tempact.TARGET_EXIT) {
				message = "Inconsistent data: Target Entry > Target Exit -> Target Exit is used for both dates";
				message_vect.push(message);
				// o_tempact.TARGET_ENTRY = o_tempact.TARGET_EXIT;
		}
		}
		if (o_tempact.ACHIEVED_START != undefined && o_tempact.ACHIEVED_END != undefined) {
			if (o_tempact.ACHIEVED_START> o_tempact.ACHIEVED_END) {
				message = "Inconsistent data: Achieved Start > Achieved End -> Achieved End is used for both dates";
				message_vect.push(message);
				// o_tempact.ACHIEVED_START = o_tempact.ACHIEVED_END;
			}
		}
		if (o_tempact.BASELINE_ENTRY != undefined && o_tempact.BASELINE_EXIT != undefined) {
			if (o_tempact.BASELINE_ENTRY> o_tempact.BASELINE_EXIT) {
				message = "Inconsistent data: Baseline Entry > Baseline Exit -> Baseline Exit is used for both dates";
				message_vect.push(message);
				// o_tempact.BASELINE_ENTRY = o_tempact.BASELINE_EXIT;
			}
		}
		if(o_tempact.PENAME!=undefined || o_tempact.MSN!=undefined  ){
		if(plc.__USER_TABLE_ACP_UT_PE_NAME.get(o_tempact.PENAME)== undefined){
				oNewPENAME = plc.__USER_TABLE_ACP_UT_PE_NAME.makeOpx2Object(
				"NAME",			o_tempact.PENAME,
				"DESC",			o_tempact.PENAME,
				"FILE",			"ACP_CF_D_MASTER_DATA"
			);
		}
		if(plc.__USER_TABLE_ACP_UT_MSN_LIST.get(o_tempact.MSN)== undefined){
			oNeWMSN = plc.__USER_TABLE_ACP_UT_MSN_LIST.makeOpx2Object(
				"NAME",			o_tempact.MSN,
				"DESC",			o_tempact.MSN,
				"FILE",			"ACP_CF_D_MASTER_DATA"
			);
		}}
		o_tempact.log_interface = message_vect.join(NewLine);
	}
	if (n_countImportedObject != 0) {
	}		plw.writeln(n_countImportedObject + " line(s) have been imported successfully.");

	if (n_countRejectedObject != 0) {
		plw.writeln(n_countRejectedObject + " Lline(s) have been rejected.");
	}

	}

function acp_js_cvault_compare_data(){
var hashtable_act = new hashTable("STRING");
	var n_countTreatedObject = 0;
	// Fill in the hashtable with APC-JAGUAR Data
	for (var o_tempact in plc.ACP_TT_CVAULT where ( o_tempact.PENAME!="" && o_tempact.PROGRAM!="" && o_tempact.MSN!=undefined )) {
		// plw.alert(o_tempact.MSN);
		var s_key = o_tempact.PROGRAM+ "_" + o_tempact.MSN + "_" + o_tempact.PENAME ;
		hashtable_act.set(s_key, o_tempact);
	}
	
// Loop on Activity
	for (var o_activity in "opxACTIVITY" where o_activity.ACP_UA_B_JAGUAR_UPDATE_REQUIRED && (o_activity.ACP_UA_S_PROGRAM_C_VAULT != "" || o_activity.ACP_UA_S_MSN_CVAULT !="" || o_activity.ACP_UA_S_JAGUAR_PE_NAME != ""))
	{   var program_id="";
	  var pename_id="";
		if(o_activity.ACP_UA_S_PROGRAM_C_VAULT!=""&& o_activity.ACP_UA_S_PROGRAM_C_VAULT!=undefined)
		{program_id=o_activity.ACP_UA_S_PROGRAM_C_VAULT;}
		if(o_activity.ACP_UA_S_JAGUAR_PE_NAME!=""&& o_activity.ACP_UA_S_JAGUAR_PE_NAME!=undefined)
		{pename_id=o_activity.ACP_UA_S_JAGUAR_PE_NAME.index;}
	
			var s_tempKey = program_id+ "_" + o_activity.ACP_UA_S_MSN_CVAULT + "_" + pename_id;
			var o_tempact = hashtable_act.get(s_tempKey);
			var NewLine = "get_char".call(10);
			var message_vect = new Vector();
			if(o_tempact!=undefined){
			    message_vect.push(o_tempact.log_interface);
		//	message_vect.push(o_activity.ACP_UA_S_NOTEPAD_INTERFACING);
		if(!o_tempact.NOT_TO_TREAT){
if (	o_tempact.TARGET_ENTRY != o_activity.PS ){ 
			message_vect.push("APC-JAGUAR TARGET ENTRY = "+o_tempact.TARGET_ENTRY +" and Planisware Planned Start = "+o_activity.PS);
			}
if (	o_tempact.TARGET_EXIT != o_activity.PF){
	message_vect.push("APC-JAGUAR TARGET EXIT = "+o_tempact.TARGET_EXIT +" and Planisware Planned Finish = "+"PRINT_DATE".CallMacro(o_activity.PF,"DD/MM/YYYY"));
}
if (	o_tempact.ACHIEVED_START != o_activity.AS){
		message_vect.push("APC-JAGUAR ACHIEVED START = "+o_tempact.ACHIEVED_START +" and Planisware Actual Start = "+o_activity.AS);

}
if (	o_tempact.ACHIEVED_END != o_activity.AF){
		message_vect.push("APC-JAGUAR ACHIEVED END = "+o_tempact.ACHIEVED_END +" and Planisware Actual Finish = "+o_activity.AF);

}
if (	o_tempact.BASELINE_ENTRY != o_activity.ACP_UA_D_CURRENT_BL_SD){
	message_vect.push("APC-JAGUAR BASELINE ENTRY = "+o_tempact.BASELINE_ENTRY +" and Planisware BASELINE SD = "+o_activity.ACP_UA_D_CURRENT_BL_SD);

}
if (	o_tempact.BASELINE_EXIT != o_activity.ACP_UA_D_CURRENT_BL_ED){
	message_vect.push("APC-JAGUAR BASELINE_EXIT = "+o_tempact.BASELINE_EXIT +" and Planisware BASELINE ED = "+o_activity.ACP_UA_D_CURRENT_BL_ED);

		}}
o_activity.ACP_UA_S_NOTEPAD_INTERFACING = message_vect.join(NewLine);
	}}
	if (n_countTreatedObject != 0) {
		plw.writeln(n_countTreatedObject + " line(s) have been treated.");
	}
	}

function acp_js_cvault_import_update_dates(){	

var hashtable_act = new hashTable("STRING");
	
	// Fill in the hashtable with APC-JAGUAR Data
	for (var o_tempact in plc.ACP_TT_CVAULT where ( o_tempact.PENAME!="" && o_tempact.PROGRAM!="" && o_tempact.MSN!=undefined ) ) {
		// plw.alert(o_tempact.MSN);
		var s_key = o_tempact.PROGRAM+ "_" +o_tempact.MSN+ "_" + o_tempact.PENAME ;
		hashtable_act.set(s_key, o_tempact);
	}
	// plw.alert(hashtable_act);
// Loop on Activity
	for (var o_activity in "opxACTIVITY" where o_activity.ACP_UA_B_JAGUAR_UPDATE_REQUIRED && (o_activity.ACP_UA_S_PROGRAM_C_VAULT != ""|| o_activity.ACP_UA_S_MSN_CVAULT !="" || o_activity.ACP_UA_S_JAGUAR_PE_NAME != ""))
	{   var program_id="";
	  var pename_id="";
		if(o_activity.ACP_UA_S_PROGRAM_C_VAULT!=""&& o_activity.ACP_UA_S_PROGRAM_C_VAULT!=undefined)
		{program_id=o_activity.ACP_UA_S_PROGRAM_C_VAULT;}
		if(o_activity.ACP_UA_S_JAGUAR_PE_NAME!=""&& o_activity.ACP_UA_S_JAGUAR_PE_NAME!=undefined)
		{pename_id=o_activity.ACP_UA_S_JAGUAR_PE_NAME.index;}
	
		var s_tempKey = program_id+ "_" + o_activity.ACP_UA_S_MSN_CVAULT + "_" + pename_id;
		var o_tempact = hashtable_act.get(s_tempKey);
		// activity selected for APC update but with inconsistent key
		if(o_activity.ACP_UA_B_JAGUAR_UPDATE_REQUIRED && ( o_activity.ACP_UA_S_MSN_CVAULT == "" || o_activity.ACP_UA_S_JAGUAR_PE_NAME == ""))
		{
				with(plw.no_locking){
				o_activity.ACP_UA_D_JAGUAR_LAST_REFRESH = context.CallDateFormula("$DATE_OF_THE_DAY");
				o_activity.ACP_UA_S_NOTEPAD_INTERFACING = "Activity selected for APC update but with inconsistent key (Program,MSN Number, PE-NAME)";
			}
		}
		
	}
}

function acp_js_cvault_import_upload_button(){
	var sTempDir = context.callstringformula("$TEMPORARY_FILES_DIRECTORY");
	var s_dateOfTheDate = context.callStringFormula("PRINT_DATE($DATE_OF_THE_DAY,\"YYYYMMDD\")");
	var sDestinationDir = sTempDir +"cvault_ifrp/";

	//choose and upload
	var vTmpPaths = plw.selectfile("JAGUAR_t_up_M_" + s_dateOfTheDate  ,"","*.csv").getserverfiles()[0];
	var sTmpPath = vTmpPaths[0];
	var sFileName = vTmpPaths[1].split("\\").pop();
	var sDestinationPath = sDestinationDir+sFileName;
	// move it to the repository
	var oFileToMove = new pathname(sTmpPath);
	if (oFileToMove.probefile() != false) {
		oFileToMove.copyFile(sDestinationPath, true);
		oFileToMove.deleteFile();
	}
	acp_js_cvault_import_refresh_button();
}

function acp_js_cvault_clean_temp_table(){	
for (var obj in plc.ACP_TT_CVAULT) {
		obj.delete();
	}
}

function acp_js_cvault_import_refresh_button(){
	// clean the table
	for (var obj in plc.__USER_TABLE_ACP_UT_IMPORT_CVAULT_FILE_MANAGEMENT) {
		obj.delete();
	}
	
	// update the list
	var sTempDir = context.callstringformula("$TEMPORARY_FILES_DIRECTORY");
	var sInputDirectory = sTempDir +"cvault_ifrp/";
	var oInputDirectory = new pathname(sInputDirectory);
	
	// create the repo if it doesn't exists
	if (sInputDirectory.probefile() == false) sInputDirectory.mkdir();

	for (var oPath in oInputDirectory){
		var oFile = plc.__USER_TABLE_ACP_UT_IMPORT_CVAULT_FILE_MANAGEMENT.makeOpx2Object(
			"NAME",						oPath.tostring(),
			"ACP_UA_S_CV_FILEPATH",		oPath.tostring(),
			"ACP_UA_D_CV_FILE_LAST_DATE",	oPath.fileWriteDate(),
			"FILE",						"ACP_CF_D_OTHER_DATA"
		);
	}
}

function acp_js_cvault_import_delete_button(){
	for (var each in plw.currentselection()){
		each.acp_js_cvault_import_delete_file();
	}
	acp_js_cvault_import_refresh_button();
}

method acp_js_cvault_import_delete_file on plc.__USER_TABLE_ACP_UT_IMPORT_CVAULT_FILE_MANAGEMENT (){
	var sTempDir = context.callstringformula("$TEMPORARY_FILES_DIRECTORY");
	var sInputDirectory = sTempDir +"cvault_ifrp/";
	var oFileInPlw = this;
	var oFileInServer = new pathname(oFileInPlw.printattribute("NAME"));
	if (oFileInServer.probefile() != false) oFileInServer.deleteFile();
	if (oFileInServer.probefile() == false) oFileInPlw.delete();
}

function acp_js_cvault_import_download_button(){
	for (var each in plw.currentselection()){
		each.acp_js_cvault_import_download_file();
	}
}

method acp_js_cvault_import_download_file on plc.__USER_TABLE_ACP_UT_IMPORT_CVAULT_FILE_MANAGEMENT (){
	var oFileInPlw = this;
	var oFileInServer = new pathname(oFileInPlw.printattribute("NAME"));
	if (oFileInServer.probefile() != false) plw.downloadFileFromServer(oFileInPlw.printattribute("NAME"));
}

method acp_js_actuals_cvault_create_temp_file on plc.__USER_TABLE_ACP_UT_IMPORT_CVAULT_FILE_MANAGEMENT(sFileNewName) {
	var oFileToTempify = new pathname (this.printattribute("NAME"));
	oFileToTempify.copyFile(sFileNewName,true);
	acp_js_cvault_import_refresh_button();
}

function publish_last_financial_baseline(){
	for (var baseline_admin in plc._L1_PT_REF_ADMIN where baseline_admin.ACP_UA_B_IS_FINANCIAL_BASELINE){
		plw.writeln("Publishing baseline for ~a".format(baseline_admin.name));
		var PrjFilter = "ACP_UA_S_LAST_FINANCIAL_BASELINE <> ACP_UA_S_LAST_BASELINE_FINANCE_ORIGIN AND ACP_UA_S_LAST_FINANCIAL_BASELINE = \"~a\"".format(baseline_admin.name);
		var vRefAtt = [];
		vRefAtt.push("NAME");
		vRefAtt.push("LAST_FINANCIAL_BASELINE");
		vRefAtt.push("DESC");
		vRefAtt.push(baseline_admin.name);
		vRefAtt.push(#TYPE-DATE#);
		vRefAtt.push(baseline_admin.name);
		vRefAtt.push("replace_old");
		vRefAtt.push(true);
		vRefAtt.push("_PM_AA_S_CREATED_BY");
		vRefAtt.push("Admin");
		try{
			plw.bulk_create_references("LAST_FINANCIAL_BASELINE", PrjFilter, "", vRefAtt);
		} catch(error e){
			plw.writeln("Error in baseline creation LAST_FINANCIAL_BASELINE for ~a, function publish_last_financial_baseline".format(baseline_admin.name));
		}
	}
}

function publish_last_financial_baseline_on_project(prjname){
  var oPrj = plc.ordoproject.get(prjname);
  for (var baseline_admin in plc._L1_PT_REF_ADMIN where baseline_admin.ACP_UA_B_IS_FINANCIAL_BASELINE){
    plw.writeln("Publishing baseline for ~a".format(baseline_admin.name));
    var PrjFilter = "NAME = \"~a\" AND ACP_UA_S_LAST_FINANCIAL_BASELINE <> ACP_UA_S_LAST_BASELINE_FINANCE_ORIGIN AND ACP_UA_S_LAST_FINANCIAL_BASELINE = \"~a\"".format(prjname,baseline_admin.name);
    var vRefAtt = [];
    vRefAtt.push("NAME");
    vRefAtt.push("LAST_FINANCIAL_BASELINE");
    vRefAtt.push("DESC");
    vRefAtt.push(baseline_admin.name);
    vRefAtt.push(#TYPE-DATE#);
    vRefAtt.push(baseline_admin.name);
    vRefAtt.push("replace_old");
    vRefAtt.push(true);
    vRefAtt.push("_PM_AA_S_CREATED_BY");
    vRefAtt.push("Admin");
    try{
      plw.bulk_create_references("LAST_FINANCIAL_BASELINE", PrjFilter, "", vRefAtt,1);
      
    } catch(error e){
      plw.writeln("Error in baseline creation LAST_FINANCIAL_BASELINE for ~a, function publish_last_financial_baseline".format(baseline_admin.name));
    }
  }
  plw.alert("The baseline defined for budget is now: " +  oPrj.ACP_UA_S_LAST_FINANCIAL_BASELINE);
}

function timeSynthesisProjectSlotModifier(val,ts){
	var act = plw._UtilsGetTopLevel(val).pop();
	ts.set(#WORK-STRUCTURE#,act);
}

function acp_js_portfoilo_funder_level_2() {
  var ListOfparents = new vector(this);
  var CurrentFunder = this.ACP_UA_B_SHOW_PORTFOLIO_WP_FUNDER;
  var CurrentLevel = CurrentFunder.LEVEL;
  while(CurrentLevel>2) {
    CurrentFunder = CurrentFunder.CHILD_OF;
    CurrentLevel--;
  }
  return CurrentFunder;
}

function acp_ojs_create_funding_pe(){
    if(context.ACP_UA_S_OC_CPN == ""){
        plw.alert("Please select a CPN.");
        return; 
    } 
    var string unit = context.default_cost_unit;
    var oCpn = plc._INF_PT_CBS2.get(context.ACP_UA_S_OC_CPN);
    if(oCpn instanceof plc._INF_PT_CBS2){
        var oAct = plw._UtilsGetTopLevel(oCpn.project).pop();
        //if(oCpn.ACP_UA_RA_ACTIVITY instanceof plc.workstructure) 
            //oAct = oCpn.ACP_UA_RA_ACTIVITY;
        var file = oCpn.PROJECT;
        var oFs = oCpn.ACP_UA_RA_TYPE_OF_FUNDING;
        var exp = new plc.expenditure(
									  WORK_STRUCTURE:oAct
									  ,FILE:file
									  ,_INF_RA_CBS2: oCpn
									  ,_INF_RA_CBS5 : oFs
									  ,TYPE : "Funding contract"
									  ,UNIT : unit
									  );

    }
}

function acp_ojs_create_funding_pe(){
if(context.ACP_UA_S_OC_CPN == ""){
plw.alert("Please select a CPN.");
return;
}
var string unit = context.default_cost_unit;
var oCpn = plc._INF_PT_CBS2.get(context.ACP_UA_S_OC_CPN);
if(oCpn instanceof plc._INF_PT_CBS2){
var oAct = plw._UtilsGetTopLevel(oCpn.project).pop();
if(oCpn.ACP_UA_RA_ACTIVITY instanceof plc.workstructure)
oAct = oCpn.ACP_UA_RA_ACTIVITY;
var file = oCpn.PROJECT;
var oFs = oCpn.ACP_UA_RA_TYPE_OF_FUNDING;
var exp = new plc.expenditure(
WORK_STRUCTURE:oAct
,FILE:file
,_INF_RA_CBS2: oCpn
,_INF_RA_CBS5 : oFs
,TYPE : "Funding contract"
,UNIT : unit
);

}
}

function create_new_funding_source(type){
    var funding_source = plc._INF_PT_CBS5.get("All Funding sources");
    var fsType = "";
    if(type == "I") fsType = "SELF_FUNDING";
    for (var funding in plw.selection_get()){
        funding_source = funding;
        break;
    }

    var link = new Hyperlink("Creationform",
        "Class", "_INF_PT_CBS5",
        //"Editortype", "ACP_RE_FUNDING_SOURCE_PUB",
        "Editortype", "ACP_RE_FUNDING_SOURCE_PUB",
        "DefaultA1", "FILE",
        "DefaultV1", "ACP_CF_D_FUNDING_SOURCE_DATA",
        "DefaultA2", "PARENT",
        "DefaultV2", funding_source
     //   "DefaultA3", "ACP_UA_S_TYPE_OF_FUNDING_CATEGORY ",
      //  "DefaultV3", fsType
        );
    if (! (link instanceof Hyperlink)) return -1;
    link.go();
 return true;
}

function acp_ojs_create_funding_pe(){

    var string unit = context.default_cost_unit;
    var funding_contract = plc.ordo_project.get("FUNDING_CONTRACT");
    var oAct = plw._UtilsGetTopLevel(funding_contract).pop();
    var exp = new plc.expenditure(
								  WORK_STRUCTURE:oAct
								  ,FILE:funding_contract
								  ,TYPE : "Funding contract"
								  ,SD : context.GEN_CHART_DD
								  ,ED : context.GEN_CHART_ED
								  ,UNIT : unit
								  );

}

function run_generate_baseline(nPortfolio){
	var subject = "Automatic Baseline creation";
	var oCurrentUser = "opxUser".get(context.ACP_GS_BASELINE_RECIPIENT);
	var recipient = oCurrentUser.email_address;
	var sender = context.ACP_GS_SMTP_SENDER;
	plw.writeln("nPortfolio "+nPortfolio);
	var oPortfolio = plc._FF_PT_FAVOR_FILTERS.get(nPortfolio.parsenumber());	
	var sPortfolio = oPortfolio.printattribute();
	context._FF_AA_S_LIST_NAME = sPortfolio;
	var current_date = new date();	
	var adminBaseline = context.ACP_UA_S_GBL_SELECTED_BASELINE;
	try{
		
			
		plw.writeln("oPortfolio "+oPortfolio);
		var Mail_Body = "Baseline ~a for portfolio ~a is ready".format(adminBaseline,context._FF_AA_S_LIST_NAME);		
		var result = false;
		result= plw.take_Reference_with_parameter_in_batch_ext(context.ACP_UA_S_GBL_SELECTED_BASELINE,"PM_PRJ_FILTER",oPortfolio,true);		
		var bsuccess = true;		
		if(result != false){bsuccess = false;}
		var GBL_Hist = new plc.__USER_TABLE_ACP_UT_GBL_HISTORY(Name : "ACP_CG_GBL_HIST_CODE",
															   File :  context._ADM_SET_PREFERENCE_FILE,                      
															   ACP_UA_S_GBL_HIST_USER :context.ACP_GS_BASELINE_RECIPIENT,
															   ACP_UA_D_GBL_HIST_DATE : current_date,
															   ACP_UA_B_GBL_HIST_SUCCESS : 	bsuccess,
															   ACP_UA_S_GBL_HIST_BASELINE : context.ACP_UA_S_GBL_SELECTED_BASELINE ,
															   ACP_UA_S_GBL_HIST_PORTFOLIO : sPortfolio);
		_acp_baseline.publish_last_financial_baseline(); //JSE 29/07/2021 Add Baseline Publication (US 32 - Baselines)
		plw._Utils_Send_Mail(recipient.parselist(),sender,subject,Mail_Body,"");
		return true;
	}
	catch(error err){
		plw.writeln("Error in run_generate_baseline :: "+err.toString());
		plw.writeln("Error in run_generate_baseline info :: [User : "+context.ACP_GS_BASELINE_RECIPIENT+" ,Portfolio : "+sPortfolio+", Baseline : "+adminBaseline+"]");
		var GBL_Hist = new plc.__USER_TABLE_ACP_UT_GBL_HISTORY(Name : "ACP_CG_GBL_HIST_CODE",
															   File :  context._ADM_SET_PREFERENCE_FILE,                      
															   ACP_UA_S_GBL_HIST_USER :context.ACP_GS_BASELINE_RECIPIENT,
															   ACP_UA_D_GBL_HIST_DATE : current_date,
															   ACP_UA_B_GBL_HIST_SUCCESS : 	false,
															   ACP_UA_S_GBL_HIST_BASELINE : context.ACP_UA_S_GBL_SELECTED_BASELINE ,
															   ACP_UA_S_GBL_HIST_PORTFOLIO : sPortfolio);
															   
		var Mail_Body = "Problem occured when creating baseline ~a for portfolio ~a ! Please contact your administrator.".format(adminBaseline,context._FF_AA_S_LIST_NAME);								
		plw._Utils_Send_Mail(recipient.parselist(),sender,subject,Mail_Body,"");
	}
}

function to launch global portfolio baseline's batch, it is called on "Take baseline" button (Data Management > PotfolioBaseline)

function acp_ojs_launch_gbl_batch(){
	context.ACP_GS_BASELINE_RECIPIENT = plw.currentopx2user().printattribute();
	if(context._FF_AA_S_LIST_NAME == ""){plw.alert("Please select a user portfolio"); return "";}
	if(context.ACP_UA_S_GBL_SELECTED_BASELINE == ""){plw.alert("Please select a baseline"); return "";}
	var check = plw.question("Do you really want to launch a background baseline taking process?");
	if(check){
		with([plw.no_alerts,plw.no_locking]){
			var  oPortfolio = plc._FF_PT_FAVOR_FILTERS.get(context._FF_AA_S_LIST_NAME);
			var nPortfolio = oPortfolio.get("ONB");
			plw.runBackgroundProcess ("Generate Global Baseline", "namespace _acp_batch; run_generate_baseline(\""+nPortfolio+"\");", 0);
		}
		plw.alert("The baseline taking process has been launched, you will receive a confirmation email shortly");
		context.applet.refresh();
	}
}

***Generation of Dates attributes on project******//

function reader_milestone_project_ps(project,wbs_type){
	with(project.fromObject()){
		for (var act in plc.task where act.WBS_TYPE == wbs_type && act.du == 0){
			return act.#REAL-START#;
		}
	}
}

function modifier_milestone_project_ps(val,project,wbs_type){
	with(project.fromObject()){
		if (val < project.OD){
			plw.alert("The date ~a cannot be setted before project origin date ~a".format(val,project.OD));
			return;
		}
		for (var act in plc.task where act.WBS_TYPE == wbs_type && act.du == 0){
			act.set("SNE",-1);
			act.set("AS",-1);
			act.set("EXPECTED_FINISH",-1);
			act.set("PS",val);
			act.recomputeCostandDate();
		}
	}
}

function locker_milestone_project_ps(project,wbs_type){
	if (!(project instanceof plc.ordo_project)) return true;
	with(project.fromObject()){
		for (var act in plc.task where act.WBS_TYPE == wbs_type && act.du == 0){
			return false;
		}
	}
	return true;
}

function creation_dynamic_attribute_wbs_type(wbs_type){
	var GateDynamicAttributeName = "ACP_DA_D_PS_~a".format(wbs_type.name);
	var GateDynamicAttributeNameDesc = "date | ~a".format(wbs_type.name);
	var  GateDynamicAttributeNameSlot = plc.ordo_project.getslot(GateDynamicAttributeName);
	if (!(GateDynamicAttributeNameSlot instanceof ObjectAttribute)){
		GateDynamicAttributeNameSlot = new ObjectAttribute(plc.ordo_project,GateDynamicAttributeName,"DATE");
	}
	GateDynamicAttributeNameSlot.reader = function () {return reader_milestone_project_ps(this ,wbs_type);};
	GateDynamicAttributeNameSlot.locker = undefined;
	GateDynamicAttributeNameSlot.locker = function () {return locker_milestone_project_ps(this.object,wbs_type);};
	GateDynamicAttributeNameSlot.modifier = function (val) {return modifier_milestone_project_ps(val,this ,wbs_type);};
	GateDynamicAttributeNameSlot.comment = GateDynamicAttributeNameDesc; 
	GateDynamicAttributeNameSlot.hiddenInIntranetServer = false;
}

function generate_project_gate_attributes(){
    for (var wbs_type in plc.wbs_type where wbs_type._WT_AA_B_DISPLAY_FIELD){
    	creation_dynamic_attribute_wbs_type(wbs_type);
    }
}

function InitialCostNRCReader(project,unit, tu,sd,ed,cost_account,offset){
	if (!(project instanceof plc.ordoproject)) return 0;
	var topact = plw._UtilsGetTopLevel(project);
	if (topact instanceof Vector  && topact[0] instanceof plc.workstructure){
		var CostCurve = costklib.computecurves("Archived estimate at completion", "KEUR", "Year" , true, sd, ed, topact[0]);
		return CostCurve.get(sd);
	}
	return 0;
}

function InitialCostNRCModifier(val,project,unit, tu,sd,ed,cost_account,offset){
	if (!(project instanceof plc.ordoproject)) return 0;

	var LineNumberObject = undefined;
	with(project.fromobject()){
		for (var line_number in plc._INF_PT_CBS3 where  line_number.file == project){
			LineNumberObject = line_number;
		}
		if (LineNumberObject == undefined){
			LineNumberObject = new plc._INF_PT_CBS3(NAME:context.CallStringFormula("GENERATE_CODE(\"ACP_CG_CBS3_LINE\")"),file : project);
		}
	}


	var topact = plw._UtilsGetTopLevel(project);
	if (topact instanceof Vector  && topact[0] instanceof plc.workstructure){
		var CostCurve = costklib.computecurves("Archived estimate at completion [Initial]", "KEUR", "Year" , true, sd, ed, topact[0], objects2: cost_account, objects3 : LineNumberObject);
		CostCurve.set(sd, val, true, ed);
	}
	return 0;
}

We lock the field if other CBS are used in the project

function InitialCostNRCReaderLocker(project){
	if (!(project instanceof plc.ordo_project)) return true;
	with(project.fromObject()){
		for (var exp in plc.expenditure where !exp._INF_RA_CBS2.internal 
											|| !exp._INF_RA_CBS4.internal 
											|| !exp._INF_RA_CBS5.internal 
											|| !exp._INF_RA_CBS6.internal 
											|| !exp._INF_RA_CBS6.internal 
											|| !exp.ACP_RA_CBS_SUPP_1.internal 
											// || !exp.ACP_RA_CBS_SUPP_2.internal 
											|| !exp.ACP_RA_CBS_SUPP_3.internal 
											|| !exp.ACP_RA_CBS_SUPP_4.internal 
											|| !exp.ACP_RA_CBS_SUPP_5.internal 
											)
		return true;
	}
	return false;
}

curve.set(startdate, value, fixed, enddate);

function GenerateCostNRCAttribute(unit, tu,sd,ed,cost_account,offset){
	var CostForecastDynamicAttributeName = "ACP_DA_N_FORECAST_~a".format(offset);
	var CostForecastDynamicAttributeNameDesc = "Forecast ~a K€".format(sd.getyear());
	var  CostForecastDynamicAttributeNameSlot = plc.ordo_project.getslot(CostForecastDynamicAttributeName);
	if (!(CostForecastDynamicAttributeNameSlot instanceof ObjectAttribute)){
		CostForecastDynamicAttributeNameSlot = new ObjectAttribute(plc.ordo_project,CostForecastDynamicAttributeName,"Number");
	}
	CostForecastDynamicAttributeNameSlot.reader = function () {return InitialCostNRCReader(this,unit, tu,sd,ed,cost_account,offset);};
	CostForecastDynamicAttributeNameSlot.locker = undefined;
	CostForecastDynamicAttributeNameSlot.locker = function () {return InitialCostNRCReaderLocker(this.object);};
	CostForecastDynamicAttributeNameSlot.modifier = function (val) {return InitialCostNRCModifier(val,this,unit, tu,sd,ed,cost_account,offset);};
	CostForecastDynamicAttributeNameSlot.comment = CostForecastDynamicAttributeNameDesc; 
	CostForecastDynamicAttributeNameSlot.hiddenInIntranetServer = false;

}

function GenerateCostAttributeAtProjectLevel(){
	var cost_account = plc.cbs_node.get("All Cost accounts");
	for (var i = -1;i <= 7; i++){
		var sd = plw.periodstart(new date(),"Year",i);
		var ed = plw.periodstart(new date(),"Year",i +1);
		GenerateCostNRCAttribute("KEUR", "Year",sd,ed,cost_account,i);
	}
}

function acp_interprojectlinks_relation_mapper(f){
	var project = plw.currentpageobject();
	if (project instanceof plc.ordoproject){

		for (var link in project.get("_SYN_REL_INTERPJ_LINKS") where link.PA.file != link.succ_activity.file){

			if (link.succ_activity.file != project){
				f.call(link.succ_activity);
			}
			if (link.PA.file != project){
				f.call(link.PA);
			}
		}

	}
}

Synchronized activities in the current schedule

function MapSynchronizedActivitiesCurrentProjectContextMapper(f) {
	var file = plw.currentpageobject();
	if (!(file instanceof plc.ordoproject)) return;
	with (file.fromobject()){
		for (var act in plc.workstructure where act.get("SYNCHRONIZE_WITH") != ""){
			f.call(act);
		}
	}
	
}

function acp_last_activity_sync_wf_transaction_mapper(f){
	if(this instanceof plc.workstructure){
		var succ_act = plc.workstructure.get(this.ACP_UA_S_SMOOTH_LINKED_ACTIVITY_SUCCESSOR_ID) ;
		if (succ_act instanceof plc.workstructure && succ_act.lasttransaction() instanceof plc.process_transaction){
			f.call(succ_act.lasttransaction());
		} else{
			if(this.lasttransaction() instanceof plc.process_transaction){
				f.call(this.lasttransaction());
			}
		}	
	}
}

function SharedMilestoneMapper(f){
	var project = this;
	var vSharedProject = project.getinternalvalue("see_shared_milestones_from");

	for (var shared_project in vSharedProject){
		with (shared_project.fromobject()){
			for (var act in plc.workstructure where act.shared_milestone){
				f.call(act);
			}
		}
	}
}

function SharedMilestoneMapperContextMapper(f) {
	var file = plw.currentpageobject();
	if (!(file instanceof plc.ordoproject)) return;
		for (var syncAct in file.get("ACP_DR_SHARED_ACTIVITIES")){
			f.call(syncAct);
		}
	
}

function SharedMilestoneMapperContextMapper(f) {
var file = plw.currentpageobject();
if (!(file instanceof plc.ordoproject)) return;
for (var syncAct in file.get("ACP_DR_SHARED_ACTIVITIES")){
f.call(syncAct);
}

}

Display shared milestones

function SharedMilestoneMapperContextMapper(f) {
	var file = plw.currentpageobject();
	var vSharedProject = file.getinternalvalue("see_shared_milestones_from");
		
	if (!(file instanceof plc.ordoproject)) return;
	for (var shared_project in vSharedProject){
		with (shared_project.fromobject()){
			for (var act in plc.workstructure where act.shared_milestone){
				f.call(act);
			}
		}
	}
	
}

Check API error when call Synchronize_Link

function synchronize_smooth_links_attached_to_act(){
	for (var act in plw.selection_get() where act instanceof plc.work_structure) {
	  // Synchronize and update name and desc (3915)  
	  for (var slink in act.get("SLINKS") where slink._SYN_AA_B_SMOOTHLINK) 
	  {
		synchroLinkMod.Synchronize_Link(slink);
		acp_synch_other_properties(slink);
	  }
	  for (var plink in act.get("PLINKS") where plink._SYN_AA_B_SMOOTHLINK) 
	  {
		synchroLinkMod.Synchronize_Link(plink);
		acp_synch_other_properties(plink);
	  }
	  acp_synch_other_properties_pastesync(act);
	}
	return true;
}

function delete_smooth_links_attached_to_act(){
	for (var act in plw.selection_get() where act instanceof plc.work_structure) {
	  for (var slink in act.get("SLINKS") where slink._SYN_AA_B_SMOOTHLINK) slink.delete();
	  for (var plink in act.get("PLINKS") where plink._SYN_AA_B_SMOOTHLINK) plink.delete();
	}
	return true;
}

Synchronize all links (used for activity form)

function synchronize_all_links_attached_to_act(){
	for (var link in plw.selection_get() where link instanceof plc.constraint) {
	    synchroLinkMod.Synchronize_Link(link);
	    acp_synch_other_properties(link);
	}
	return true;
}

Delete all links (used for activity form)

function delete_all_links_attached_to_act(){
	for (var link in plw.selection_get() where link instanceof plc.constraint) {
	    link.delete();
	}
	return true;
}

function hyperlinkSendMilestoneDialog(){
var Number selectionLength = plw.selection_length();
var project = plw.currentpageobject();
var vAct = new vector();
var vListAct = new vector();
var obj;
for (var act in plw.selection_get()) obj = act;
if(selectionLength <= 0 || obj.FILE != plw.currentpageobject()) {
    plw.alert("Please, select an activity from the Gantt");
 }else{
 	var selection = plw.selection_get();
	for (var act in selection where act instanceof plc.workstructure) {
		vAct.push(act);
		vListAct.push(act.printattribute("ID"));
	}

	for (var act in vAct){
	
		if(!act.CallBooleanFormula("?WBS_ELEMENT") && act.DU==0){
			//Initialise les champs du context
			context.ACP_UA_S_COPY_SYNC_POPUP_SOURCE_ACT = vListAct.join(",");
			context.ACP_UA_S_SEND_FOR_SYNCHRO_PLAN = "Send to another project ?";
			context.ACP_UA_S_SEND_FOR_SYNCHRO_SUCC_PRED = "My project is predecessor ?";
			context.ACP_UA_S_COPY_SYNC_POPUP_TARGET_ACT = "";
			context.ACP_UA_S_SEND_FOR_SYNCHRO_LINK_LAG = "";
			context.ACP_UA_S_COPY_SYNC_POPUP_PROJECT_FILTER = "";
			
			var linkType = this.editor.ACP_UA_S_SEND_FOR_SYNCHRO_LINK_TYPE;		
			var olink = new hyperlink("Fvalue",
					 "Attribute",
					 "ID",
					 "Editortype",
					 //"ACP_RE_L1_MILESTONE_SEND",
					"ACP_RE_L1_MILESTONE_SEND_GANTT_PUB",
					 "popup",
					 true);	
			olink.go(context);
			break;
		} else{
			plw.alert("Only milestones can be sent. Please select activitie(s) with no duration");
		}
	}
 }
}

function SendMilestoneToAnotherPlan(){
	
	var plan = this.editor.ACP_UA_S_SEND_FOR_SYNCHRO_PLAN;
	var successor = this.editor.ACP_UA_S_SEND_FOR_SYNCHRO_SUCC_PRED;
	var source_act = context.ACP_UA_S_COPY_SYNC_POPUP_SOURCE_ACT;
	var target_wbs = this.editor.ACP_UA_S_COPY_SYNC_POPUP_TARGET_ACT;
	var lag = this.editor.ACP_UA_S_SEND_FOR_SYNCHRO_LINK_LAG;
	var linkType = this.editor.ACP_UA_S_SEND_FOR_SYNCHRO_LINK_TYPE;
	var vPlan = this.editor.ACP_UA_S_COPY_SYNC_POPUP_PROJECT_FILTER;

	var act;
	var wbs;
	var pred;
	var succ;
	var prjsource;
	var prj;
	var vCheckRight=false;
	var alreadysent=false;
	
	for(var vAct in source_act.parselist()){
	    
	    //JSE 21/09/2021 --> Simplification after UAT at Airbus, decided by Sebastien Ferrie and Mi-GSO to simplify in release Alpha to sending to another plan, current prj as predecessor, Finish Start link
	    plan = "Send to another project ?";
	    successor = "My project is predecessor ?";
	    linkType =  "FINISH-START";
	    
	   
		
	if (plan == "Pull from another project ?"){
		act = plc.workstructure.get(target_wbs);
		prjsource = act.file.name;
		prj = plw.currentpageobject();
		//Check right access on both plan
		if(act.file.ACP_UA_B_USER_HAS_WRITE_ACCESS || prj.ACP_UA_B_USER_HAS_WRITE_ACCESS) vCheckRight = true;
	}
	if(plan == "Send to another project ?"){
		act = plc.workstructure.get(vAct);
		prjsource = act.file.name;
		prj = plc.project.get(vPlan);
		//Check right access on both plan
		if(act.file.ACP_UA_B_USER_HAS_WRITE_ACCESS || prj.ACP_UA_B_USER_HAS_WRITE_ACCESS) vCheckRight = true;
	}

  with(prj.fromobject()){
for(var each in act.get("SLINKS") where each._SYN_AA_B_SMOOTHLINK && each.file==prj)
{ 
   alreadysent=true;   }
}
if (alreadysent){   
    plw.alert("selected milestone "+ act.name+" has already been sent to the selected plan " + prj.desc);
    context.ACP_UA_S_COPY_SYNC_POPUP_PROJECT_FILTER="";
}
else{
	if(successor!="" && vPlan!=""){
		if(vCheckRight){
				with([plw.no_locking,plw.no_alerts]){
					//Activity creation
                    var new_act = act.copywithplist([#DATASET#,prj,
                    								 #NETWORK#,prj,
                    								 "ACP_RO_PLANNER_ACT",act.file.PROJECT_TEAM,
                    								 //"ACP_RO_SENDER_SYNCHRO",act.ACP_RO_SENDER_SYNCHRO,
                    								 "ACP_RO_SENDER_SYNCHRO",plw.currentopx2user().printattribute(),
                    								 "ACP_UA_S_SOURCE_PROJECT",prjsource,
                    								 "ACP_UA_B_SYNCHRO_SENT",true,
                    								 "ACP_UA_B_SCH_ATT_1",false,
                    								 "ACP_UA_B_SCH_ATT_2",false,
                    								 "ACP_UA_B_SCH_ATT_3",false,
                    								 "ACP_UA_D_SCH_ATT_1",-1,
                    								 "ACP_UA_D_SCH_ATT_2",-1,
                    								 "ACP_UA_D_SCH_ATT_3",-1,
                    								 "ACP_UA_N_SCH_ATT_1",undefined,
                    								 "ACP_UA_N_SCH_ATT_2",undefined,
                    								 "ACP_UA_N_SCH_ATT_3",undefined,
                    								 "ACP_UA_PICK_SCH_ATT_1",undefined,
                    								 "ACP_UA_PICK_SCH_ATT_2",undefined,
                    								 "ACP_UA_PICK_SCH_ATT_3",undefined,
                    								 "ACP_UA_S_SCH_ATT_1","",
                    								 "ACP_UA_S_SCH_ATT_2","",
                    								 "ACP_UA_S_SCH_ATT_3","",
                    								 "_INF_RA_ACT_TYPE_2","",
                    								 "_INF_RA_ACT_TYPE_5",""
                    								 ]);
					//Set order number after object creation. Doesn't works at creation
					new_act.ORDER_NUMBER = 0;
					//Set the Portfolio of the project after deliverable sent
					new_act._BM_BS = new_act.PROJECT._BM_BS;
				
					if (successor == "My project is successor ?"){
						pred = new_act;
						succ = act;
					}
					if (successor == "My project is predecessor ?"){
						pred = act;
						succ = new_act;
					}
					var link;
					if(successor != ""){
						//Link creation
						link = new plc.CONSTRAINT(TYPE: linkType,
													  LEFT: pred,
													  RIGHT: succ);
						link.set("_SYN_AA_B_SMOOTHLINK",true);
						synchroLinkMod.Synchronize_Link(link);
					}
					
					new_act.recomputecostanddate();
					act.recomputecostanddate();
					synchroLinkMod.Synchronize_Link(link);
					plw.alert("Deliverable : "+new_act.NAME+" has been created in the plan : "+prj.printattribute());
				}
				this.editor.delete();
			}
			else{
				plw.alert("You need to have write access at least on one of both plan "+prj.name+" or "+act.file.name+" to perform this action");
			}
		}
		else{
			plw.alert("Please fill in the form to send the deliverable");
			//cancelcurrenttransaction();
		}
	}
	}
	return ;
}

Used to generate list of "Actvities" with interproject links in "Data" page

function _acp_js_showactivitiesandinterprojectlinks(f) {
	var project = plw.currentpageobject();
	var vPrj = new vector();
	var vActVirtualDataset = [];
	var vResult = [];
	if ((project instanceof plc.ordoproject)) {
		vPrj.push(project);
	}else if (project instanceof plc.virtualdataset && project.getinternalvalue("selected-datasets").InstanceOf("Array")){

	   vPrj = project.getvirtualdatasetprojectlist(); 
	}else if(project instanceof plc.virtualdataset && project.getinternalvalue("selected-Activities").InstanceOf("Array")){ // JSE 2022/02/14 Handle case of virtual dataset of activities only
		vActVirtualDataset = project.getinternalvalue("selected-Activities");
	} 
	else return false;
	for(var project in vPrj){
        var vSharedProject = project.getinternalvalue("see_shared_milestones_from");
    	if(context._INF_AA_B_DISPLAY_INTERPRJ_LINKS){
    		//Parcours des liens interprojets
    		for (var link in project.get("_SYN_REL_INTERPJ_LINKS") where link.PA.file != link.succ_activity.file){
    			if (link.succ_activity.file != project){
					vResult.push(link.succ_activity);
    			}
    			if (link.PA.file != project){
					vResult.push(link.PA);
    			}
    		}
    		//Parcours des SharedMilestones
    		for (var shared_project in vSharedProject){
    			with (shared_project.fromobject()){
    				for (var act in plc.workstructure where act.shared_milestone){
						vResult.push(act);
    				}
    			}
    		}
    	}
    	//Parcours des activités du projet
		with(project.fromobject()){
			 for (var act in plc.workstructure){
					vResult.push(act);
		   	}
		}
	}
	with(project.fromobject()){ // JSE 2022/02/14 Handle case of virtual dataset of activities only
		for (var child in plc.workstructure){ 
			vResult.push(child);
		}
	}
	vResult = vResult.removeduplicates();
	for (var act in vResult) f.call(act);
}

Used on workbox aggregator ACP_AGGR_CLASH

function acp_milestones_with_clashes(f){
	
	with(new KeyAttribute(plc.workstructure,"ACP_UA_B_ACTIVITY_CLASH_BATCH",true).FromObject()){
		for (var act in plc.workstructure where act.ACP_UA_B_ACTIVITY_CLASH_BATCH && act.PROJECT.ACP_UA_B_USER_WRITE){	
			f.call(act);
		}
	}
}

function acp_GetNewActivityId(sourceId,project){
	//search exact matching
	with(new KeyAttribute(plc.workstructure,["_PRI_AA_S_EXT_PROJ"],[project.printattribute("NAME") + "@" + sourceId]).FromObject()){
	  var keyString =  project.printattribute("NAME") + "@" + sourceId;
		for (var act in plc.workstructure where act._PRI_AA_S_EXT_PROJ == keyString && act.file == project){
			return act.printattribute("ID");
		}
	}
	return "";
}

get format attributes

function acp_js_HashTableAttributes(format){
	var hashAtt = new hashtable("STRING");
	for (var att in format.get("_IMPEX_DYN_RA_ATTRIBUTES")){
		hashAtt.set(att.planisware_attribute,att.column_name);
	}
	return hashAtt;
}

get Jira API rest object

function acp_js_get_jira_uri(){
	var oJiraAPI = plc._JIRA_URI.get("ACP_JIRA_API");
	if (oJiraAPI instanceof plc._JIRA_URI) return oJiraAPI;
	return "";
}

Build object endpoint

function acp_js_get_object_url(object,filter){	
	var oJiraAPI = acp_js_get_jira_uri();
	var sUrlSuffix = "&rs:source=Jira";
	if(!oJiraAPI instanceof plc._JIRA_URI) return "";
	var sEndpoint = oJiraAPI._JIRA_AA_S_URL+object+filter+sUrlSuffix;
	return sEndpoint;
}

get user Credentials

function acp_js_get_Credentials_Auth(){
	var oJiraAPI = acp_js_get_jira_uri();
	if(!oJiraAPI instanceof plc._JIRA_URI) return "";
	var user = oJiraAPI._JIRA_AA_S_USER;
	var pwd = oJiraAPI._JIRA_AA_S_USER_PWD;
	var s_EncodedCredentials = base64klib.encode(user + ":" + pwd, uri: false);
	var cons Headers = new list(new cons("Authorization", "Basic " + s_EncodedCredentials));
	return Headers;
}

Retreive object data from Jira API

function acp_js_get_object_data(object,filter){
	var cons Headers = acp_js_get_Credentials_Auth();
	if (Headers == "") return false;
	var sUrl = acp_js_get_object_url(object,filter);
	if (sUrl == "") return false;
	var (response,status,raw) = restklib.doRequest(#GET#,sUrl,false,headers: Headers);
	if(status.tostring()!="200")
	{
		plw.writetolog("Error JiraAPIImport (acp_js_get_object_data) : "+response);
		return false;
	}
	return response;
}

Get Project list

function acp_js_get_project_list(){
	var response = acp_js_get_object_data("Project","");
	if(response == false) return "";
	var vList = [];
	for (var elt in response){
	    if (elt.position(#projectSourceId#) != undefined) {
		    vList.push(elt.getplist(#projectSourceId#)+sepStr+elt.getplist(#projectName#));
	    }
	}
	return vList;
}

function acp_js_get_ie_format_att(sPlwAtt,sClass,sFormat){
	var oFormat = plc.impexformat.get(sFormat);
	if (!oFormat instanceof plc.impexformat) return "";
	var htAtt = acp_js_HashTableAttributes(oFormat);
	var oClass = plc.get(sClass);
	if (!oClass instanceOf objectClass) return "";
	var slot = oClass.getslot(sPlwAtt);
	if (!slot instanceOf objectAttribute) return "";
	var intAtt =  slot.descriptor.NAME;
	var att = htAtt.get(intAtt.toString());
	return att;
}

function acp_js_parse_date(sDate){
	var dDate = sDate.parsedate("[Date format #1]");
	if(dDate instanceof date) return dDate;
	dDate = sDate.parsedate("YYYY/MM/DD");
	if(dDate instanceof date) return dDate;
	dDate = sDate.parsedate("YYMMDD");
	if(dDate instanceof date) return dDate;
	return -1;
}

function acp_js_parse_end_date(sDate){
	var vDate=acp_js_parse_date(sDate);
	if (vDate instanceof date) return "PERIOD_START".callmacro(vDate,"DAY",1);
	return -1;
}

function acp_import_jiraAPI_create_act (CurrentProject,elt,sType){
	//sprint = iteration; release = version
	var dToday = new date();
	var begofYear = "PERIOD_START".callmacro(new date(), "YEAR", 0);
	var plist = [];
	var newTask;
	var sJiraDescAtt = (sType == "Release") ? acp_js_get_ie_format_att("DESC","work_structure",sReleaseFormat) : acp_js_get_ie_format_att("DESC","work_structure",sSprintFormat);
	var sJiraNameAtt = (sType == "Release") ? acp_js_get_ie_format_att("NAME","work_structure",sReleaseFormat) : acp_js_get_ie_format_att("NAME","work_structure",sSprintFormat);
	var sJiraIDAtt = (sType == "Release") ? acp_js_get_ie_format_att("_PRI_AA_S_EXT_PROJ","work_structure",sReleaseFormat) : acp_js_get_ie_format_att("_PRI_AA_S_EXT_PROJ","work_structure",sSprintFormat);
	var sJiraPSAtt = (sType == "Release") ? acp_js_get_ie_format_att("PS","work_structure",sReleaseFormat) : acp_js_get_ie_format_att("PS","work_structure",sSprintFormat);
	var sJiraPFAtt = (sType == "Release") ? acp_js_get_ie_format_att("PF","work_structure",sReleaseFormat) : acp_js_get_ie_format_att("PF","work_structure",sSprintFormat);
	
	var sName = elt.getplist(new symbol(sJiraNameAtt,"KEYWORD"));
	if (sName == "") return false;
	var sDesc = (elt.getplist(new symbol(sJiraDescAtt,"KEYWORD")) != "") ? elt.getplist(new symbol(sJiraDescAtt,"KEYWORD")) : elt.getplist(new symbol(sJiraNameAtt,"KEYWORD"));
	plist.push("file");
	plist.push(CurrentProject.printattribute("NAME")); 
	plist.push("NAME");
	plist.push(sName);
	plist.push("DESC");
	plist.push(sDesc);
	plist.push("_PRI_AA_S_EXT_PROJ");
	plist.push(CurrentProject.NAME+"@"+elt.getplist(new symbol(sJiraIDAtt,"KEYWORD")));
	if(sType == "Release"){	
		var sreleasedate = (elt.getplist(new symbol(sJiraPFAtt,"KEYWORD")) != "") ? elt.getplist(new symbol(sJiraPFAtt,"KEYWORD")) : elt.getplist(new symbol(sJiraPSAtt,"KEYWORD"));
		if(sreleasedate.length > 10) sreleasedate = sreleasedate.substring(0,10);
		var releasedate = acp_js_parse_end_date(sreleasedate);
		if (releasedate == -1) releasedate = begofYear;
		plist.push("DU");
		plist.push(0);
		if(releasedate < dToday){
			plist.push("AS");
			plist.push(releasedate);
			plist.push("AF");
			plist.push(releasedate);
		}
		else {
			plist.push("PS");
			plist.push(releasedate);
		}
		with([plw.no_alerts,plw.no_locking]){
			newTask = plc.task.makeopx2objectwithplist(plist);
			newTask.set("_PM_DA_IS_A_MILESTONE",true);
		}
		
	}
	else{
		var sPS = elt.getplist(new symbol(sJiraPSAtt,"KEYWORD"));
		if(sPS instanceof vector) sPS = sPS[0];
		if(sPS.length > 10) sPS = sPS.substring(0,10);
		var dPS = acp_js_parse_date(sPS);
		if (dPS == -1) dPS = begofYear;
		var sPF = elt.getplist(new symbol(sJiraPFAtt,"KEYWORD"));
		if(sPF instanceof vector) sPF = sPF[0];
		if(sPF.length > 10) sPF = sPF.substring(0,10);
		var dPF = acp_js_parse_end_date(sPF);
		if (dPF == -1) dPF = "PERIOD_START".callmacro(dPS,"MONTH",1);
		//var du = "DIFF_DATE".callmacro(dPS,dPF,"");
		//plist.push("DU");
		//plist.push(du);
		if(dPF < dToday){
			plist.push("AS");
			plist.push(dPS);
			plist.push("AF");
			plist.push(dPF);
		}
		else{
			plist.push("PS");
			plist.push(dPS);
			plist.push("PF");
			plist.push(dPF);
		}
		with([plw.no_alerts,plw.no_locking]){
			newTask = plc.task.makeopx2objectwithplist(plist);
		}
	}
	return newTask;
		
}

function acp_import_jiraAPI_update_act (CurrentProject,oAct,elt,sType){
	var dToday = new date();
	var begofYear = "PERIOD_START".callmacro(new date(), "YEAR", 0);
	var plist = [];
	var updatedTask;
	var sJiraDescAtt = (sType == "Release") ? acp_js_get_ie_format_att("DESC","work_structure",sReleaseFormat) : acp_js_get_ie_format_att("DESC","work_structure",sSprintFormat);
	var sJiraNameAtt = (sType == "Release") ? acp_js_get_ie_format_att("NAME","work_structure",sReleaseFormat) : acp_js_get_ie_format_att("NAME","work_structure",sSprintFormat);
	var sJiraIDAtt = (sType == "Release") ? acp_js_get_ie_format_att("_PRI_AA_S_EXT_PROJ","work_structure",sReleaseFormat) : acp_js_get_ie_format_att("_PRI_AA_S_EXT_PROJ","work_structure",sSprintFormat);
	var sJiraPSAtt = (sType == "Release") ? acp_js_get_ie_format_att("PS","work_structure",sReleaseFormat) : acp_js_get_ie_format_att("PS","work_structure",sSprintFormat);
	var sJiraPFAtt = (sType == "Release") ? acp_js_get_ie_format_att("PF","work_structure",sReleaseFormat) : acp_js_get_ie_format_att("PF","work_structure",sSprintFormat);
	var sName = elt.getplist(new symbol(sJiraNameAtt,"KEYWORD"));
	if (sName == "") return false;
	var sDesc = (elt.getplist(new symbol(sJiraDescAtt,"KEYWORD")) != "") ? elt.getplist(new symbol(sJiraDescAtt,"KEYWORD")) : elt.getplist(new symbol(sJiraNameAtt,"KEYWORD"));
	plist.push("file");
	plist.push(CurrentProject.printattribute("NAME")); 
	plist.push("NAME");
	plist.push(sName);
	plist.push("DESC");
	plist.push(sDesc);

	if(sType == "Release"){	
		var sreleasedate = (elt.getplist(new symbol(sJiraPFAtt,"KEYWORD")) != "") ? elt.getplist(new symbol(sJiraPFAtt,"KEYWORD")) : elt.getplist(new symbol(sJiraPSAtt,"KEYWORD"));
		if(sreleasedate.length > 10) sreleasedate = sreleasedate.substring(0,10);
		var releasedate = acp_js_parse_end_date(sreleasedate);
		if (releasedate == -1) releasedate = begofYear;
		plist.push("DU");
		plist.push(0);
		if(releasedate < dToday){
			plist.push("AS");
			plist.push(releasedate);
			plist.push("AF");
			plist.push(releasedate);
		}
		else {
			plist.push("PS");
			plist.push(releasedate);
		}
		with([plw.no_alerts,plw.no_locking]){
			updatedTask = oAct.modifywithplist(plist);
		}
		
	}
	else{
		var sPS = elt.getplist(new symbol(sJiraPSAtt,"KEYWORD"));
		if(sPS instanceof vector) sPS = sPS[0];
		if(sPS.length > 10) sPS = sPS.substring(0,10);
		var dPS = acp_js_parse_date(sPS);
		if (dPS == -1) dPS = begofYear;
		var sPF = elt.getplist(new symbol(sJiraPFAtt,"KEYWORD"));
		if(sPF instanceof vector) sPF = sPF[0];
		if(sPF.length > 10) sPF = sPF.substring(0,10);
		var dPF = acp_js_parse_end_date(sPF);
		if (dPF == -1) dPF = "PERIOD_START".callmacro(dPS,"MONTH",1);
		//var du = "DIFF_DATE".callmacro(dPS,dPF,"");
		//plist.push("DU");
		//plist.push(du);
		if(dPF < dToday){
			plist.push("AS");
			plist.push(dPS);
			plist.push("AF");
			plist.push(dPF);
		}
		else{
			plist.push("PS");
			plist.push(dPS);
			plist.push("PF");
			plist.push(dPF);
		}
		with([plw.no_alerts,plw.no_locking]){
			updatedTask = oAct.modifywithplist(plist);
		}
	}
	return updatedTask;
		
}

extract project id when selection

function acp_js_select_project_id(){
	var selectedV = this.editor.USER_ATTRIBUTE_ACP_UA_S_JIRA_PROJECT;
	if(! selectedV instanceof string) return false;
	var vSelectedV = selectedV.split(sepStr);
	with ([plw.no_locking, plw.no_alerts]){
    	this.editor.USER_ATTRIBUTE_ACP_UA_S_JIRA_PROJECT = vSelectedV[0];
    	this.editor.USER_ATTRIBUTE_ACP_UA_S_JIRA_PROJECT_DESC = vSelectedV[1];
	}
}

function acp_import_jiraAPI(CurrentProject){
	//var CurrentProject = this.object;
	var oJiraPrj = CurrentProject.ACP_UA_S_JIRA_PROJECT;
	var dToday = new date();
	var begofYear = "PERIOD_START".callmacro(new date(), "YEAR", 0);
	var dOriginDate = "PERIOD_START".callmacro(new date(), "YEAR", -10);
	with ([plw.no_locking, plw.no_alerts]){CurrentProject.set("OD",dOriginDate);}
	if(oJiraPrj == "" || oJiraPrj == undefined){
		plw.alert("A jira project needed to be selected");
		return true;
	}
	var bupdate = false;
	var	sQuestion = "The current project ~a will be updated from the jira project ~a. 
Do you want to continue?".format(CurrentProject.name,oJiraPrj);
	if (!(context.callBooleanFormula("$OPX2BATCH_MODE"))){	
    	var question = plw.question(sQuestion);	
        if(!question) return true;
	}
	CurrentProject.ACP_UA_S_EXTERNAL_REFERENCE = oJiraPrj;
	var sFilterV = sFilterPrefix+"versionProjectSourceId:"+oJiraPrj;
	var sFilterI = sFilterPrefix+"iterationProjectSourceId:"+oJiraPrj;
	//Release
	var VersionData = acp_js_get_object_data("Version",sFilterV);
	//Sprint
	var IterationData = acp_js_get_object_data("Iteration",sFilterI);
	
	var jiraVersionID = acp_js_get_ie_format_att("_PRI_AA_S_EXT_PROJ","work_structure",sReleaseFormat);
	var jiraIterationID = acp_js_get_ie_format_att("_PRI_AA_S_EXT_PROJ","work_structure",sSprintFormat);
	//plw.alert(IterationData);
	if(VersionData != false && VersionData.length > 0){
		for (var elt in VersionData){
			//plw.alert(elt);
			var sAct = acp_GetNewActivityId(elt.getplist(new symbol(jiraVersionID,"KEYWORD")),CurrentProject);	
			if(sAct != ""){
				var oAct = plc.workstructure.get(sAct);
				acp_import_jiraAPI_update_act (CurrentProject,oAct,elt,"Release");
			}
			else{
				acp_import_jiraAPI_create_act (CurrentProject,elt,"Release");
			}
		}
		bupdate = true;
	}
	if(IterationData != false && IterationData.length > 0){
		for (var elt in IterationData){
			var sAct = acp_GetNewActivityId(elt.getplist(new symbol(jiraIterationID,"KEYWORD")),CurrentProject);	
			if(sAct != ""){
				var oAct = plc.workstructure.get(sAct);
				acp_import_jiraAPI_update_act (CurrentProject,oAct,elt,"Sprint");
			}
			else{
				acp_import_jiraAPI_create_act (CurrentProject,elt,"Sprint");
			}
		}
		bupdate = true;
	}
	if (bupdate) plw.alert("Data updated with success");
	else plw.alert("No Data found for jira project ~a. Contact your admin to check it!".format(oJiraPrj));
	
	
	return true;
}

function acp_import_jiraAPI_project(){
	var CurrentProject = this.object;
	acp_import_jiraAPI(CurrentProject);
}

old version
generate object file into plw temp directory

function acp_js_generate_object_file(object){
	var sdata = acp_js_get_object_data(object,"");
	if (sdata == false) return false;
	var data = restklib.formatJSON(sdata);
	var sPrefix = object+"_";
	var sFileName = sPrefix+sTempFileName;
	if(sInputDirectory.ProbeFile() ==  false) sInputDirectory.makedirectory();
	var sPath = sInputDirectory+sFileName;
	var fileOS = new plw.fileoutputstream(sPath,"overwrite");
	if(fileOS){
		fileOS.write(data);
	}
	fileOS.close();
	//base64kLib.decodeToFile(data, sPath);
	if(sPath.ProbeFile() != false){
		return sPath;
	}
	return false;

}

import object file into planisware

function acp_js_impex_import_data(format,target){
	try{
		with ([plw.no_locking, plw.no_alerts]){
			var plc.impextarget oTarget = plc.impextarget.get(target);
			var CurrentEvent = undefined;
			if(oTarget instanceOf plc.ImpexTarget){
				var plc.impexformat oFormat = plc.impexformat.get(format);
				CurrentEvent = plw.DoImportWithFormatAndTarget(this : oFormat,oTarget,true);
			}
			//CurrentEvent.DoImport(true);
			//plw._Impex_ClearErrorSelectionTable();
			//plw._Impex_FillErrorTable(CurrentEvent);
			return true;
		}
	}
	catch(error err){
		plw.writeln("acp_js_impex_import_data - error in Impex import data :: "+err.toString());
		return false;
	}
}

function acp_js_main_import(object,format,target){
	plw.writeln("########Main jira API import start...######");
	plw.writeln("---------------Request API and generate "+object+" file---------------------");
	var bGenerateFile = acp_js_generate_object_file(object);
	if(bGenerateFile == false){
		plw.writeln("Error when generating "+object+" json file!");
		return false;
	}
	plw.writeln("---------------"+object+" file is generated with success : "+bGenerateFile+"------------------");
	plw.writeln("----------------Start Impex import file ...-------------------");
	plw.writeln("Format :: "+format);
	plw.writeln("Target :: "+target);
	var bImpex = acp_js_impex_import_data(format,target);
	if(bImpex){
		plw.writeln("Error when importing "+object+" json file!");
		return false;
	}
	plw.writeln(object+" file is imported with success");
	plw.writeln("----------------End Impex import file ...-------------------");
	plw.writeln("########Main jira API import end...######");
	
}

function GetBoardIdFromProjectName(connector,JiraProjectName,boardName){
	var result = [];
	if (!(connector instanceof plc._JIRA_URI))return false;
	if (connector._JIRA_AA_S_BEARER_FOR == "") return false;
	var s_URL = "https://jira.airbus.corp/rest/agile/1.0/board?projectKeyOrId=~a".format(JiraProjectName);
	var BearerToken = plw.currentopx2user().callstringFormula(connector._JIRA_AA_S_BEARER_FOR);
	var Headers = new list(new cons("Authorization", "Bearer " + BearerToken));
	with (plw.restcontext(content_type: 'application/json;charset=utf-8',accept: 'application/json')){
		var (response,status,raw) = restklib.doRequest(#GET#,s_URL,false,headers: Headers); 
		for (var sprint in response.getplist(#values#) where sprint.getplist(#name#) == boardName){
			return sprint.getplist(#id#).ToString();
		}
		return response.getplist(#values#)[0].getplist(#id#).ToString();
	}
	return "";
}

function GetProjectList(connector){
	var result = [];
	if (!(connector instanceof plc._JIRA_URI))return false;
	if (connector._JIRA_AA_S_BEARER_FOR == "") return false;
	var s_URL = "https://jira.airbus.corp/rest/api/2/project";
	var BearerToken = plw.currentopx2user().callstringFormula(connector._JIRA_AA_S_BEARER_FOR);
	var Headers = new list(new cons("Authorization", "Bearer " + BearerToken));
	with (plw.restcontext(content_type: 'application/json;charset=utf-8',accept: 'application/json')){
		var (response,status,raw) = restklib.doRequest(#GET#,s_URL,false,headers: Headers); 
		 for (var prj in response){
			 result.push(prj[7] + " | " + prj[9]);
		 } 
	}
	return result;
}

function ProjectListDisplayScript(){
    var project = this.object;
    if (project.GetInternalValue("ACP_UA_RING_JIRA_CONNECTOR").length > 0){
	    return GetProjectList(project.GetInternalValue("ACP_UA_RING_JIRA_CONNECTOR")[0]);
    }
}

function AllocateWBSElement(Project){
    with(Project.fromobject()){
    	for (var JiraInfo in plc._JIRA_PT_INFORMATION where JiraInfo._JIRA_AA_CLASS == "Task"){
    		var connector_name = JiraInfo._JIRA_RA_SERVER.name;
    		var wbs_name =Project.Name + "_" + connector_name;
    		var wbs_element = plc.network.get(wbs_name);
    		if (wbs_element == undefined){
    			wbs_element = new plc.network(#DATASET# : Project, #NAME# : wbs_name,#COMMENT# : connector_name);
    		}
    		JiraInfo._JIRA_RA_OBJECT.set(#NETWORK#,wbs_element);
    	}
    }
    return true;
}

function ImportPostScripts(project){
    with(project.fromobject()){
        for (var act in plc.workstructure where act.du <= 1440){
            with(plw.no_locking) act.du = 0;
        }
    }
    AllocateWBSElement(Project);
}

function ConnectAndSynchronize(project){

    var vJira_project = project.get("ACP_UA_S_JIRA_PROJECT").parsevector("|");
    var Jira_ProjectName = vJira_project[0].rtrim(" ");

    with(plw.no_alerts){
        for (var RestConnector in project.GetInternalValue("ACP_UA_RING_JIRA_CONNECTOR")){
            if (RestConnector.name == "Sprints"){
                //We retreive board ID
                Jira_ProjectName = GetBoardIdFromProjectName(RestConnector,Jira_ProjectName,vJira_project[1].ltrim(" "));
            }
			
			//Implement JQL Formula
			
			context.ACP_UA_S_JIRA_CURRENT_JQL = "project=~a AND ~a".format(Jira_ProjectName,RestConnector.get("ACP_UA_S_JIRA_JQL"));
            //  restmod.unlink(project,RestConnector,#ID#,Jira_ProjectName);
            restmod.link(project,RestConnector,#ID#,Jira_ProjectName);
            restmod.pull(project,RestConnector);
        }
        ImportPostScripts(project);
    }
    return true;
}

function acp_GetNewActivityId(sourceId,project){
	//search exact matching
	with(new KeyAttribute(plc.workstructure,["_PRI_AA_S_EXT_PROJ"],[project.printattribute("NAME") + "@" + sourceId]).FromObject()){
	  var keyString =  project.printattribute("NAME") + "@" + sourceId;
		for (var act in plc.workstructure where act._PRI_AA_S_EXT_PROJ == keyString && act.file == project){
			return act.printattribute("ID");
		}
	}
	/**
	//If not found, it might be an issue with non UTF8 char
	with(project.fromobject()){
		var keyString =  project.printattribute("NAME") + "@" + sourceId;
    var reg = new regexp("[^a-zA-Z0-9]");
		for (var act in plc.workstructure where reg.regreplace(act._PRI_AA_S_EXT_PROJ,"") == reg.regreplace(keyString,"")){
			return act.printattribute("ID");
		}
	}
	**/
	//Last case, we return nil
	return "";
}

method acp_import_jira_create_act on plc.__user_table_acp_ut_jira_acticity(CurrentProject){
	var jiraAct = this;
	var dToday = new date();
	var begofYear = "PERIOD_START".callmacro(new date(), "YEAR", 0);
	var plist = [];
	var newTask;
	var sDesc = (jiraAct.DESC != "") ? jiraAct.DESC : jiraAct.NAME;
	plist.push("file");
	plist.push(CurrentProject.printattribute("NAME")); 
	plist.push("NAME");
	plist.push(jiraAct.get("NAME"));
	plist.push("DESC");
	plist.push(sDesc);
	plist.push("_PRI_AA_S_EXT_PROJ");
	plist.push(CurrentProject.NAME+"@"+jiraAct.ACP_UA_S_SOURCE_ID);
	if(jiraAct.ACP_UA_S_TYPE == "Release"){	
		var releasedate = (jiraAct.ACP_UA_D_RELEASE instanceof date) ? jiraAct.ACP_UA_D_RELEASE : begofYear;
		plist.push("PS");
		plist.push(releasedate);
		plist.push("DU");
		plist.push(0);
		if(releasedate < dToday){
			plist.push("AF");
			plist.push(releasedate);
		}
		with([plw.no_alerts,plw.no_locking]){
			newTask = plc.task.makeopx2objectwithplist(plist);
			newTask.set("_PM_DA_IS_A_MILESTONE",true);
		}
		
	}
	else{
		var du = "DIFF_DATE".callmacro(jiraAct.ACP_UA_D_SD,jiraAct.ACP_UA_D_ED,"");
		plist.push("PS");
		plist.push(jiraAct.ACP_UA_D_SD);
		plist.push("DU");
		plist.push(du);
		if(jiraAct.ACP_UA_D_ED < dToday){
			plist.push("AF");
			plist.push(jiraAct.ACP_UA_D_ED);
		}
		with([plw.no_alerts,plw.no_locking]){
			newTask = plc.task.makeopx2objectwithplist(plist);
		}
	}
	return newTask;
		
}

method acp_import_jira_update_act on plc.__user_table_acp_ut_jira_acticity(CurrentProject,oAct){
	var jiraAct = this;
	var dToday = new date();
	var begofYear = "PERIOD_START".callmacro(new date(), "YEAR", 0);
	var plist = [];
	var updatedTask;
	var sDesc = (jiraAct.DESC != "") ? jiraAct.DESC : jiraAct.NAME;
	plist.push("file");
	plist.push(CurrentProject.printattribute("NAME")); 
	plist.push("NAME");
	plist.push(jiraAct.get("NAME"));
	plist.push("DESC");
	plist.push(sDesc);

	if(jiraAct.ACP_UA_S_TYPE == "Release"){	
		var releasedate = (jiraAct.ACP_UA_D_RELEASE instanceof date) ? jiraAct.ACP_UA_D_RELEASE : begofYear;
		plist.push("PS");
		plist.push(releasedate);
		plist.push("DU");
		plist.push(0);
		if(releasedate < dToday){
			plist.push("AF");
			plist.push(releasedate);
		}
		with([plw.no_alerts,plw.no_locking]){
			updatedTask = oAct.modifywithplist(plist);
		}
		
	}
	else{
		var du = "DIFF_DATE".callmacro(jiraAct.ACP_UA_D_SD,jiraAct.ACP_UA_D_ED,"");
		plist.push("PS");
		plist.push(jiraAct.ACP_UA_D_SD);
		plist.push("DU");
		plist.push(du);
		if(jiraAct.ACP_UA_D_ED < dToday){
			plist.push("AF");
			plist.push(jiraAct.ACP_UA_D_ED);
		}
		with([plw.no_alerts,plw.no_locking]){
			updatedTask = oAct.modifywithplist(plist);
		}
	}
	return updatedTask;
		
}

function acp_import_jira(CurrentProject){
	var CurrentProject = this.object;
	var oJiraPrj = CurrentProject.ACP_UA_REL_JIRA_PROJECT;
	var dToday = new date();
	var begofYear = "PERIOD_START".callmacro(new date(), "YEAR", 0);	
	if(oJiraPrj == "" || oJiraPrj == undefined){
		plw.alert("A jira project needed to be selected");
		return true;
	}
	var b_update = false;
	
	var sQuestion = "The current project ~a will be replaced by the jira project ~a. 
Do you want to continue?".format(CurrentProject.name,oJiraPrj.NAME);


	//JSE 08/12/2021 --> We always update the project b_update
//	if(oJiraPrj.NAME == CurrentProject.ACP_UA_S_EXTERNAL_REFERENCE){
		sQuestion = "The current project ~a will be updated from the jira project ~a. 
Do you want to continue?".format(CurrentProject.name,oJiraPrj.NAME);
		 b_update = true;
//	}
	var question = plw.question(sQuestion);	
	if(!question) return true;
	var monitoringMsg = "Cleaning Project";
	CurrentProject.ACP_UA_S_EXTERNAL_REFERENCE = oJiraPrj.NAME;
	


	
	
	if(!b_update){
		with(plw.monitoring(title : monitoringMsg)) {
			_mig_up.clean_before_import(CurrentProject);
			monitoringMsg.monitor(true);
		}
		for(var each in oJiraPrj.user_attribute_inverse_acp_ua_rel_jira_project___user_table_acp_ut_jira_acticity ){
			each.acp_import_jira_create_act(CurrentProject);
		}
		plw.alert("data import with success");
	}
	else{
		for(var each in oJiraPrj.user_attribute_inverse_acp_ua_rel_jira_project___user_table_acp_ut_jira_acticity ){
			var sAct = acp_GetNewActivityId(each.ACP_UA_S_SOURCE_ID,CurrentProject);			
			if(sAct != ""){
				var oAct = plc.workstructure.get(sAct);
				each.acp_import_jira_update_act(CurrentProject,oAct);
			}
			else{
				each.acp_import_jira_create_act(CurrentProject);
			}
		}
		plw.alert("Data update with success");
	}
	
	return true;
}

function acp_import_jira_project(){
	var CurrentProject = this.object;
	acp_import_jira(CurrentProject);
}

function GeneratePortfolioAverageScoreAttributeNRCAttribute(ScoTemplate){
	plw.writetolog("Generating portfolio scoring attribute average for ~a".format(ScoTemplate.printattribute("ID")));
	var LocalScoreAttributeName = "ACP_DA_N_AVERAGE_"+ScoTemplate.ACP_UA_S_FIELD_NAME;
	var  LocalScoreAttributeNameSlot = plc._FF_PT_FAVOR_FILTERS.getslot(LocalScoreAttributeName);
	if (!(LocalScoreAttributeNameSlot instanceof ObjectAttribute)){
		LocalScoreAttributeNameSlot = new ObjectAttribute(plc._FF_PT_FAVOR_FILTERS,LocalScoreAttributeName,"Number");
	}
	var formula = "ITER_NUMBER_AVERAGE(\"_FF_RA_PROJECTS\",\"TRUE\",\"~a\")".format(ScoTemplate.ACP_UA_S_FIELD_NAME);

	LocalScoreAttributeNameSlot.reader = function () {return this.callnumberformula(formula);};
	LocalScoreAttributeNameSlot.comment = "Average " + ScoTemplate.desc; 
	LocalScoreAttributeNameSlot.hiddenInIntranetServer = false;
}

function GeneratePortfolioMaxScoreAttributeNRCAttribute(ScoTemplate){
	plw.writetolog("Generating portfolio scoring attribute maximum for ~a".format(ScoTemplate.printattribute("ID")));
	var LocalScoreAttributeName = "ACP_DA_N_MAX_"+ScoTemplate.ACP_UA_S_FIELD_NAME;
	var  LocalScoreAttributeNameSlot = plc._FF_PT_FAVOR_FILTERS.getslot(LocalScoreAttributeName);
	if (!(LocalScoreAttributeNameSlot instanceof ObjectAttribute)){
		LocalScoreAttributeNameSlot = new ObjectAttribute(plc._FF_PT_FAVOR_FILTERS,LocalScoreAttributeName,"Number");
	}
	var formula = "ITER_NUMBER_MAX(\"_FF_RA_PROJECTS\",\"TRUE\",\"~a\")".format(ScoTemplate.ACP_UA_S_FIELD_NAME);

	LocalScoreAttributeNameSlot.reader = function () {return this.callnumberformula(formula);};
	LocalScoreAttributeNameSlot.comment = "Maximum " + ScoTemplate.desc; 
	LocalScoreAttributeNameSlot.hiddenInIntranetServer = false;
}

function _acp_js_exp_date(arg){
	var vChange = this;
	
	if(arg=="First"){
		if(vChange instanceof plc._CHG_PT_CHANGE_OF_SCOPE){
			for(var exp in vChange.get("r._CHG_RA_CHANGE_OF_SCOPE.EXPENDITURE") where exp.quantity!=0 order by ['SD']){
				return exp.SD;
				break;
			}
			return -1;
		}
	}else if(arg=="Last"){
		if(vChange instanceof plc._CHG_PT_CHANGE_OF_SCOPE){
			for(var exp in vChange.get("r._CHG_RA_CHANGE_OF_SCOPE.EXPENDITURE")  where exp.quantity!=0 order by [['INVERSE','SD']]){
				var Day = context.calldateformula("PERIOD_START('"+exp.ED+"',\"DAY\",-1)");
				return Day;
				break;
			}
			return -1;
		}		
	}else return -1;
}

function _acp_js_change_schedule_impacts_date(attName){
	var vAct = this;
	
	if(vAct instanceof plc.workstructure){
		var vListStartDate = new vector();
		//Loop on Schedule impacts of the activity
		for(var vChangeAct in vAct.get("r._CHG_RA_ACT._CHG_PT_CHG_ACT ") where vChangeAct.get(attName) instanceof date order by [['INVERSE',attName]]){
			return vChangeAct.get(attName);
			break;
		}
	}else return -1;
}

function _acp_js_generate_change_schedule_impacts_date_field(SlotName,SlotComment,SlotRetrieved){
	//Dynamic attribute that retrieve the latest Start or Finish Date of the scheduling impact change of scope
	var LatestDateSlotName = SlotName;
	var objectattribute LatestDateSlot = plc.workstructure.getslotbyid(LatestDateSlotName);
	if (!( LatestDateSlot instanceof objectattribute)){
	LatestDateSlot = new objectattribute(plc.workstructure, LatestDateSlotName, "DATE");
	}

	LatestDateSlot.comment = SlotComment;
	LatestDateSlot.reader = undefined;
	LatestDateSlot.reader = _acp_js_change_schedule_impacts_date.closure(SlotRetrieved);
	LatestDateSlot.modifier = undefined;
	LatestDateSlot.hiddeninintranetserver = false;
}

function open_project_dialog(){
    if (plw.currentpageobject() instanceof plc.ordoproject){
        var link = new Hyperlink("FValue",
					 "ATTRIBUTE", "ID",
					 "EditorType","_PM_POPUP_PROJECT_FORM",
					 "POPUP", true
					 );
    link.go(plw.currentpageobject());
    }
return true;
}

JSE Open Google drive on right menu "Airbus" button

function OpenGDriveBXMenu(){
 var link =  new hyperlink("url",
                "Page",
                context._ADM_SET_USE_CUSTOM_HEADER_LOGO_LINK,
                "Popup",true);
  link.go(Context);
}

function OpenSNOWMenu(){
 var link =  new hyperlink("url",
                "Page",
                "https://airbus.service-now.com/welcome/",
              // "https://airbus.service-now.com/welcome?id=sc_cat_item&sys_id=44f2af0ddb8eb3c067e6125239961954&sysparm_category=e15706fc0a0a0aa7007fc21e1ab70c2f",
                "Popup",true);
  link.go(Context);
}

function acp_pjs_PnlEquationReader(){
    if (this instanceof plc.expenditure){
        return this._INF_RA_CBS3.desc;
    }
    return "";
}

function acp_pjs_PnlEquationModifier(value){
    if(this instanceof plc.expenditure){
        if(value != ""){
            with(this.activity.file.fromobject()){
                for (var x in plc._inf_pt_cbs3 where x.desc == value){
                    this._inf_ra_cbs3 = x;
                    return x.desc;
                }
            }
        }
    }
}

function acp_pjs_PnlStartReader(){
    var Prj = (this instanceof plc.ordoproject) ? this : plw.currentpageobject();
    if(Prj instanceof plc.ordoproject){
        return (Prj.ACP_UF_D_PNL_SD != -1 && Prj.ACP_UF_D_PNL_SD != undefined) ? Prj.ACP_UF_D_PNL_SD : Prj.od;
    }
    return -1;
}

function acp_pjs_PnlStartModifier(value){
    var Prj = (this instanceof plc.ordoproject) ? this : plw.currentpageobject();
    if(Prj instanceof plc.ordoproject){
        Prj.ACP_UF_D_PNL_SD=value;
    }
}

function acp_pjs_PnlStartLocker(){
    var Prj = (this.object instanceof plc.ordoproject) ? this.object : plw.currentpageobject();
    return (Prj instanceof plc.ordoproject && Prj.ACP_UA_B_LOCK_PNL) ? true : false;
}

function acp_pjs_PublishPnL(plc.ordoproject project){
    if (project instanceof plc.ordoproject) {
        var DoPublish = plw.question("Are you sure you want to publish NRC, RC & Benefits content from Business Case to Cost Page ?");
        if(DoPublish){
            // First we generate the line numbers (CBS3) to support the expenditures creations
            var EqTemplVect = new vector(plc._PE_PT_EQUA_EQUATEMP.get("ACP_EQT_PNL_PUBLICATION_LINE_NBRS"));
            var EqVector = new vector();
            for (var EqTempl in EqTemplVect) {
            	for (var Eq in EqTempl.get("r._PE_RA_EQUA_EQET._PE_PT_EQUA_EQUATION") where Eq._PE_AA_EQUA_ACTIVE) {
            		EqVector.push(Eq);
            	}
            }
            var PrjVect = new vector(plw.top_level_ws(project));
            With(plw.no_Locking) { plw.Applyequations(this: PrjVect, EqVector); }
            // Then we update the expenditures ACP_EQT_PNL_PUBLICATION_EXP
            var EqTemplVect = new vector(plc._PE_PT_EQUA_EQUATEMP.get("ACP_EQT_PNL_PUBLICATION_EXP"));
            var EqVector = new vector();
            for (var EqTempl in EqTemplVect) {
            	for (var Eq in EqTempl.get("r._PE_RA_EQUA_EQET._PE_PT_EQUA_EQUATION") where Eq._PE_AA_EQUA_ACTIVE) {
            		EqVector.push(Eq);
            	}
            }
            var PnlValuesVect = new vector();
            With(project.fromobject()){ for (var x in plc.pnlvalue) { PnlValuesVect.push(x); } }
            With(plw.no_Locking) { plw.Applyequations(this: PnlValuesVect, EqVector); }
            plw.alert("Business case publication is completed Successfully");
        }
    }
}

function acp_bmbs_relation_mapper(f){
	var project = this;
	var vresult= new vector();
	if (project instanceof plc.ordoproject){
	    //For the project, we check his BM_BS and adding at the end to search easily all his children on BM_BS level (example Airbus\CTO\)
        var project_bmbs = project.get("_BM_BS");
		with (project_bmbs.fromobject()){
			for (var oChildPortfolio in plc.5BS where oChildPortfolio != project_bmbs){
				for (var oWP in oChildPortfolio.get("projects") where oWP.get("DATASET_CLASS").printAttribute("ID")=="Project.Workpackage") {
					f.call(oWP);
				}
			}
		}
	}
}

function CreateNewWorkpackage(){

    if (plw.selection_length() != 1 ){
        plw.alert("Please, select a project or a workpackage");
        return;
    }
    
    var o_PrjParent = undefined;
    
    for (var elt in plw.selection_get() where elt instanceof plc.ordoproject){
        o_PrjParent = elt;
    }
    
    var editor = "_PM_POPUP_PROJECT_FORM";
    var dataset_class = plc.project_type.get("Project.Workpackage");
    
  if(editor instanceof string && editor != ""){
    Context._GUI_IS_IN_CREATION = true;
    var DefaultDatasets = o_PrjParent.get("LIST-OF-PROVIDERS");
    var state = o_PrjParent.get("_STA_RA_PRJ_STATUS");
    var parent_wp = o_PrjParent.get("_BM_BS");
    var wp = "";
    if (parent_wp != undefined){
        wp = parent_wp;
    }
    var sd = context.calldateformula(context._PM_DEFAULT_SD);
    var ed = context.calldateformula(context._PM_DEFAULT_ED);
    var link = new Hyperlink("Creationform",
        "Class", "Project",
        "Editortype", editor,
        "DefaultA1", "ORIGIN-DATE",
        "DefaultV1", sd,
        "DefaultA2", "END-DATE",
        "DefaultV2", ed,
        "DefaultA3", "LIST-OF-PROVIDERS",
        "DefaultV3", DefaultDatasets,
        "DefaultA4", "PROJECT_TYPE",
        "DefaultV4", dataset_class,
        "DefaultA5", "_STA_RA_PRJ_STATUS",
        "DefaultV5", state,
        "DefaultA7", "_BM_BS",
        "DefaultV7", wp,
        "DefaultA6", "NAME",
        "DefaultV6", "ACP_CG_PROJECT_NAME"
    );
    if (! (link instanceof Hyperlink)) return -1;
    link.go();
  }
}

function getParent(){
    var o_PrjParent = undefined;
    
    for (var elt in plw.selection_get() where elt instanceof plc.ordoproject){
        o_PrjParent = elt;
    }
    return o_PrjParent;
}

function popup_createnewproject(editor){
  if(editor instanceof string && editor != ""){
    Context._GUI_IS_IN_CREATION = true;
    var DefaultDatasets = _GlobalSettingsComputeFilesToLinkToProjects().join(",");
    var sd = new Date();
    // sd + 1 year
    var ed = new Date(sd.date + 365*24*60*60);
    var link = new Hyperlink("Creationform",
                             "Class", "Project",
                             "Editortype", editor,
                             "DefaultA1", "ORIGIN-DATE",
                             "DefaultV1", sd,
                             "DefaultA2", "END-DATE",
                             "DefaultV2", ed,
                             "DefaultA3", "LIST-OF-PROVIDERS",
                             "DefaultV3", DefaultDatasets,
                             "DefaultA4", "PROJECT_TYPE",
                             "DefaultV4", "_GuiGetDefaultProjectType".Call(this,"PM"),
							 "DefaultA5", "NAME",
                             "DefaultV5", "ACP_CG_PROJECT_NAME"
                             );
    if (! (link instanceof Hyperlink)) return -1;
    return _pm_new_project_generic(link);
  }
}

function _GlobalSettingsComputeFilesToLInkToProjects(){
  var FileToLink = new vector();
  //the default file should always be there
  var DefaultFile = plc.commondataset.get(plw.ProcessesCommonfileName);
  for(var Key in "OpxGlobalSettings" where Key._SET_DA_B_LINKED_TO_PROJECT){
    var JsSetting = Key;
    if(JsSetting != undefined){
      var CommonFileName = Context.get(JsSetting.Name);
      //If the new value entry is selected, we do not need to create the corresponding common file
      if(CommonFileName != "" && CommonFileName != undefined){
        var CommonFile = plc.dataset.get(CommonFileName);
        if(CommonFile InstanceOf plc.commondataset){
          FileToLink.push(CommonFileName);
        }
      }
    }
  }

  for(var Key in plw.GlobalSettingHash where plw.GlobalSettingHash.get(Key).IsLinkedToProject == true){
    var JsSetting = plw.GlobalSettingHash.get(Key);
    if(JsSetting != undefined){
      var CommonFileName = Context.get(JsSetting.Name);
      if(CommonFileName != "" && CommonFileName != undefined){
        var CommonFile = plc.dataset.get(CommonFileName);
        if(CommonFile InstanceOf plc.commondataset){
          FileToLink.push(CommonFileName);
        }
      }
    }
  }
  FileToLink.push(DefaultFile.Name);
  if(FileToLink != false && FileToLink.length > 0){
    return FileToLink.RemoveDuplicates();
  }else{
    return false;
  }
}

function _pm_new_project_generic(link) {
  var CommonFileDefaultValueArray = plc.ordo_project.getSlotByID("LIST-OF-PROVIDERS").defaultvalue;
  var CommonFileDefaultValue = undefined;

  if (! (link instanceof Hyperlink)) return -1;

  if ((CommonFileDefaultValueArray instanceof Array) && CommonFileDefaultValueArray.length > 0) {
    CommonFileDefaultValue = CommonFileDefaultValueArray[1];
    for (var Commonfile in CommonFileDefaultValue) {
      // On parcours la liste des common files par default
      // pour verifier qu'ils existent tous bien.
      if (! (plc.dataset.get(Commonfile.name) instanceof plc.dataset)) {
        //au moins un des fichiers n'est pas present
        //on sort et on affiche un message
        var alertmessage = write_text_key("project.new.project_creation_alert");
        alert(alertmessage);
        return -2;
      }
    }
  }
  	with(plw.no_applet_refresh) {
    Context._PRJ_WZD_AA_S_TEMPLATE = "";
  }

  link.go(context);
  return 0;
}

redefine rename_colunm function

function Rename_Column(class,text_key,slot) {
  var slot = class.getslot(slot);
  slot.comment = plw.write_text_key(text_key);
}

function RelatedProjectsMapper(f){
	if (!(this instanceof plc.ordoproject)) return;
	if (this.get("_sc_aa_s_proj_dep") == "") return;
	for (var ReqProjects in this.get("_sc_aa_s_proj_dep").parsevector(",")){
		if (plc.ordoproject.get(ReqProjects) instanceof plc.ordoproject){
			f.call(plc.ordoproject.get(ReqProjects) );
		}
	}	
}

function DrawStatusReportField(editorObject, project, status_report){
	if (project instanceof plc.ordoproject && editorObject instanceof graphics){
		var image  = "";
		var width = 0;
		var height = 0;
		if (project.get(status_report) instanceof plc._soc_pt_status_rep_label){
			image = project.get(status_report)._SOC_AA_S_ICONE;
			width = math.round(editorObject.width);
			height = math.round(editorObject.height);
		} else{
			image = "OPX2_BIG_EDIT_ICON";
			width = math.round(editorObject.width/3);
			height = math.round(editorObject.height/3);
		}
		 editorObject.drawimage(image,0,0,true,width,height,true,1,1);
		 var mousablearea = editorObject.createmousablearea(0,0,editorObject.width,editorObject.height);
		 mousablearea.thickness = -1;
		 mousablearea.onClick = function (){plc._SOC_PT_STATUS_REPORT.get(status_report.replaceregexp("_SOC_DYN_","")).statusReport_showContextMenu(project);};
		 MousableArea.DeclareMousableArea(editorObject);
	}
}

function callRoadmapImage(project){
	var NewImage = plw.choosefile(plw.write_text_key("PLM.chooseAnImage"), context._PLM_SET_IMAGE_EXTENSIONS);
	if(NewImage != undefined){
	project._ROA_DOC_ROADMAP_IMAGE = NewImage;
	}
}

function DrawStatusReportRoadmapImage(editorObject, project){
	if (project instanceof plc.ordoproject && editorObject instanceof graphics){
		var image  = "";
		var width = 0;
		var height = 0;
		if (project.get("_ROA_DOC_ROADMAP_IMAGE") instanceof plc.document){
			image = project.get("_ROA_DOC_ROADMAP_IMAGE");
			width = math.round(editorObject.width);
			height = math.round(editorObject.height);
		} else{
			image = "OPX2_BIG_EDIT_ICON";
			width = math.round(editorObject.width/5);
			height = math.round(editorObject.height/5);
		}
		 editorObject.drawimage(image,0,0,true,width,height,true,1,1);
		 var mousablearea = editorObject.createmousablearea(0,0,editorObject.width,editorObject.height);
		 mousablearea.thickness = -1;
		 mousablearea.onClick = function (){return callRoadmapImage(project);};
		 MousableArea.DeclareMousableArea(editorObject);
	}
}

function DrawStatusReportFieldObject(editorObject, object, status_report){
	if (editorObject instanceof graphics){
		var image  = "";
		var width = 0;
		var height = 0;
		if (object.get(status_report) instanceof plc._soc_pt_status_rep_label){
			image = object.get(status_report)._SOC_AA_S_ICONE;
			width = math.round(editorObject.width);
			height = math.round(editorObject.height);
		} else{
			image = "OPX2_BIG_EDIT_ICON";
			width = math.round(editorObject.width/3);
			height = math.round(editorObject.height/3);
		}
		 editorObject.drawimage(image,0,0,true,width,height,true,1,1);
		 var mousablearea = editorObject.createmousablearea(0,0,editorObject.width,editorObject.height);
		 mousablearea.thickness = -1;
		 mousablearea.onClick = function (){plc._SOC_PT_STATUS_REPORT.get(status_report.replaceregexp("_SOC_DYN_","")).statusReport_showContextMenu(object);};
		 MousableArea.DeclareMousableArea(editorObject);
	}
}

Function used to write in the error log file for migration

function generate_error (content) {
    var line_break = context.callstringformula("get_char(10)");
    Error_fileStream.writeln(content);
}

function create_outputstreams(error_file_name){
    var path = context.callstringformula("$TEMPORARY_FILES_DIRECTORY");
    var currentDate = new Date();
    var user = context.applet.user.name;
    currentDate = currentDate.toString("YYYY-MM-DD HH:MM").replaceRegExp("[^0-9]","_");
    var error_filename = currentDate + error_file_name;
    var error_fullpath_name = path + error_filename;
    Error_fileStream = new plw.fileOutputStream (error_fullpath_name);
    var error_vect = new vector(error_fullpath_name,user + "_" + error_filename);
    return error_vect;
}

UTILS ******************/

function GetExternalEntity(format){
return format.table_name;
}

function GetFilterEntity(format){
return format._IMPEX_AA_S_NOTEPAD;
}

function GetAdditionalActivityFilter(Entity){
    var KeyFilterSelection = context.ACP_UA_S_MIG_ATTRIBUTE_FILTER_KEY;
    var KeyFilter = (KeyFilterSelection == "MSN") ? "2bs/name" : "au_ra_pep_id/name";
    var value = context.ACP_UA_S_MIG_VALUE_FILTER_KEY;
    var AddFilterActivity = "";

    if (Entity == "work_structure") AddFilterActivity = "~a eq  '~a'".format(KeyFilter,value);
    if (Entity == "constraint") AddFilterActivity = "right/~a eq  '~a' or left/~a eq  '~a'".format(KeyFilter,value,KeyFilter,value);
    if (Entity == "expenditure") AddFilterActivity = "work_structure/~a eq  '~a'".format(KeyFilter,value);
    return AddFilterActivity;
}

function GetNewActivityId(sourceId,project){
    //search exact matching
    with(new KeyAttribute(plc.workstructure,["_PRI_AA_S_EXT_PROJ"],[project.printattribute("NAME") + "@" + sourceId]).FromObject()){
      var keyString =  project.printattribute("NAME") + "@" + sourceId;
        for (var act in plc.workstructure where act._PRI_AA_S_EXT_PROJ == keyString && act.file == project){
            return act.printattribute("ID");
        }
    }
    //If not found, it might be an issue with non UTF8 char
    with(project.fromobject()){
        var keyString =  project.printattribute("NAME") + "@" + sourceId;
    var reg = new regexp("[^a-zA-Z0-9]");
        for (var act in plc.workstructure where reg.regreplace(act._PRI_AA_S_EXT_PROJ,"") == reg.regreplace(keyString,"")){
            return act.printattribute("ID");
        }
    }
    //Last case, we return the top level activity
    return plw._UtilsGetTopLevel(project).pop().printattribute("ID");
}

function GetEncodedCredentialHeader(){
    var user = (context.ACP_SET_B_MIG_UP_USE_CURRENT_USER_NAME == true) ? context.applet.user.login : context.ACP_UA_S_MIG_ENDPOINT._JIRA_AA_S_USER;
    var pwd = context.ACP_UA_S_MIG_ENDPOINT._JIRA_AA_S_USER_PWD;
    var s_EncodedCredentials = base64klib.encode(user + ":" + pwd, uri: false);
    var cons Headers = new list(new cons("Authorization", "Basic " + s_EncodedCredentials));
    return Headers;
}

function LookForMissingObjects(entity,relation,value){
    if (value == "") return true;
    if (relation == "PROGRESS-METHOD") return true;//JSE Specific case, PROGRESS-METHOD exists on Task, Network BUT not on activity
    var Slot = plw._utils_findclass(entity).getslot(relation);
    var SlotType = (slot.representation == "PROJECT_CALENDAR") ? "OpxCalendar" : slot.type; //JSE Project Calendar is considered as a string...
    if (SlotType.search("Opx") instanceof Number){
        var RelationClass =  SlotType.findclass(); 
        if(RelationClass == undefined) RelationClass = SlotType.replaceregexp("Bs","breakdown").findclass();
        if (RelationClass.get(value) != undefined){
             return true;
        } else{
            var message = "~a (~a): value ~a not found".format(slot.Representation,Slot.descriptor.comment.multilingual_getLanguageString("ENGLISH"),value);
             return message;
        }
    } else{
        return true;
    }
}

function get_format(endpoint,entity){
    var format ;
    for (var format in endpoint.get("USER_ATTRIBUTE_INVERSE_ACP_UA_MIG_REST_CONNECTOR.IMPEX-FORMAT") where format.object_class.toUppercase() == entity.toUppercase()){
        return format;
    }
}

function HashTableAttributes(format){
    var hashAtt = new hashtable("STRING");
    for (var att in format.get("_IMPEX_DYN_RA_ATTRIBUTES")){
        hashAtt.set(att.import_attribute,[att.planisware_attribute,att.import_conversion_formula]);
    }
return hashAtt;
}

function ApplyImportFormula(hashAttribute,attribute,value){

    if(hashAttribute.get(attribute.ToUpperCase()) == undefined) return value;
    var formula = hashAttribute.get(attribute.ToUpperCase())[1];
    if (formula == ""){
        return value;
    } else{
        var ToEvaluate =  formula.replaceregexp("ID","\""  + value + "\"");
        var result;
        //JSE Ugly, but v6.2 odata convert boolean to number 
        if (attribute.search("_aa_b_") instanceof Number){
            result = context.callBooleanformula(ToEvaluate);
        } else{
            result = context.callstringformula(ToEvaluate);
        }
        return result;
    }
}

function GetConversionAttribute(HashAttribute,att){
    var ConvertedAtt = HashAttribute.get(att.ToUpperCase());
    if (ConvertedAtt != undefined){
     return ConvertedAtt[0];
    } else{
        return att;
    }
 }

function listAttribute(format){
    var vList = [];
    for (var att in format.get("_IMPEX_DYN_RA_ATTRIBUTES")){
        vList.push(att.import_attribute);
    }
return vList.join(",").toLowerCase();
}

function IsWBSElementType(entity,relation){
    var Slot = plw._utils_findclass(entity).getslot(relation);
    if(!(slot instanceof ObjectAttribute)) return false;
    var SlotType =  slot.type;
    if (SlotType == "OpxWbsElement" || SlotType == "OpxActivity" || SlotType == "OpxTask"){
        return true;
    } else{
        return false;
    }
}

function AllocateLineNumberAfterImport(project){
    with([project.fromobject(),plw.no_locking]){
        for (var ts in plc.time_synthesis where ts._INF_RA_CBS3.internal){
            var cbs3 = new plc._INF_PT_CBS3(NAME:context.CallStringFormula("GENERATE_CODE(\"ACP_CG_CBS3_LINE\")"),file : project);
            // ts._INF_RA_CBS3 = cbs3;   
            with([plw.no_locking,plw.no_alerts]) ts._INF_RA_CBS3 = cbs3;   //Z1T24UP20-4504 [UAT] Import with filter key - Script issue
            
        }
    }
    return true;
}

function extractONBfromodataID(odataID){
    // https://airbus-updev-dev-conv.planisware.lo/alt/plw/localhost:8400/odata/network(120235506137)
    var start = odataID.position("(");
    var end = odataID.position(")");
    return odataID.substring(start+1,end);
}

END OF UTILS ******************/

function return_project_list(Headers,endPoint){
var s_URL  = endPoint + "project?$select=name" + "&$filter=loaded%20eq%20true%20and%20version_number%20eq%200";
    with (plw.restcontext(content_type: 'application/json;charset=utf-8',accept: 'application/json')){
        var (response,status,raw) = restklib.doRequest(#GET#,s_URL,false,headers: Headers);
        //filter on bolean doesn't work the same
        if (response.getplist(#value#).length == 0){
            s_URL  = endPoint + "project?$select=name" + "&$filter=loaded";
            (response,status,raw) = restklib.doRequest(#GET#,s_URL,false,headers: Headers);
        }
        var vAnswer = [];
        for (var elt in response.getplist(#value#)){
            vAnswer.push(elt.getplist(#name#));
        }
        
        return vAnswer;
    }
}

Project**/

function return_project_update_list(Headers,endPoint,projectName){
    var lAttributes = listAttribute(this: "", get_format(endPoint,"Project"));
    var endPointUrl = endPoint._JIRA_AA_S_URL;
    var s_URL  = endPointUrl + "project?$select=" + lAttributes + "&$filter=name%20eq%20'" + projectName + "'";
    try{
        with (plw.restcontext(content_type: 'application/json;charset=utf-8',accept: 'application/json')){
            var (response,status,raw) = restklib.doRequest(#GET#,s_URL,false,headers: Headers);
            var vAnswer = [];
            for (var elt in response.getplist(#value#)){
                var vValues = new hashtable("STRING");
                for (var att in lAttributes.parsevector(",")){
                    vValues.set(att,elt.getplist(new symbol(att,"KEYWORD")));
                }
                vAnswer.push(vValues);
            }
            return vAnswer;
        }
    } catch (error e){
        plw.writeln(e);
        plw.alert("Error with connexion");
    }
}

function update_project_value(project,vPrj,endPoint,CurrentProject){
    var format = get_format(endPoint,"Project");
    var HashAttribute = HashTableAttributes(format);
    for (var elt in vPrj){
        var plist = [];
        for (var att in elt){
            var ConvertedAtt = GetConversionAttribute(HashAttribute,att);

            if (att == "class") continue;

            if (elt.get(att).search("Date") instanceof Number && elt.get(att).position("/") instanceof Number){
                var sNumber = elt.get(att).ltrim("/Date(").rtrim(")/").parsenumber();
                var sdate = new date(sNumber/1000 + 60*60*24);

                if (sdate instanceof Date && sdate > new date (1980,1,1)) {
                    plist.push(att.substitute("_","-"));
                    plist.push(sdate);
                } else{
                    continue;
                }   
            }else{
                plist.push(ConvertedAtt.substitute("_","-"));
                if (LookForMissingObjects(this: "","Project",ConvertedAtt,ApplyImportFormula(HashAttribute,att,elt.get(att))) == true){
                    plist.push(ApplyImportFormula(HashAttribute,att,elt.get(att)));
                } else{
                    plist.push("");
                    plw.alert(LookForMissingObjects(this: "","Project",ConvertedAtt,ApplyImportFormula(HashAttribute,att,elt.get(att))));
                }
            }
        }
        with([plw.no_locking,plw.inactive_objects_displayed]){CurrentProject.modifywithplist(plist);}
    }
}

function mig_list_project_possible_values(){
    if (context.ACP_UA_S_MIG_ENDPOINT == "") return true;
    var endPointUrl = context.ACP_UA_S_MIG_ENDPOINT._JIRA_AA_S_URL;
    var cons Headers = GetEncodedCredentialHeader();
    this.possiblevalues =  return_project_list(Headers,endPointUrl);
}

function update_project(Headers,endPoint,s_project,CurrentProject){
    var vPrj =  return_project_update_list(Headers,endPoint,s_project);
    update_project_value(s_project,vPrj,endPoint,CurrentProject);
    return true;

}

Build expenditure type filter

function buildExpenditureFilterUP3P(){
    var vTypesSelected = context.ACP_UA_S_MIG_UP3P_EXPENDITURE_FILTER.parsevector(",");
    if (context.ACP_UA_S_MIG_UP3P_EXPENDITURE_FILTER == "") return "";
    var Filter = "";
    for (var Type in vTypesSelected){
        if (Filter !="") {
            Filter+= " or ";
        }
        if (Type == "Standard") Type = "";
        if (Type == "All") return "";

        if (Type == "Attribute 'Is an Output'"){
            Filter += " _fin_aa_b_pnl_output ";
        } else{
            Filter += "type eq '~a'".format(Type);
        }
    }
    Filter = "(~a)".format(Filter);
    return filter;
}

function GetObjectList(Headers,endPoint,s_project,EntityName,Tree,UseProjectRelation){
    var lAttributes = listAttribute(this: "", get_format(endPoint,EntityName));
    var endPointUrl = endPoint._JIRA_AA_S_URL;
    lAttributes+= ",class,id";
    var EntityInternalName = plw._utils_findclass(EntityName).name.ToString().substitute("-","_").toLowerCase();
    var format = get_format(endPoint,EntityName);
    var filter = "";
    if (context.ACP_UA_B_MIG_USE_MULTIPRJ_WITH_KEY && context.ACP_UA_S_MIG_VALUE_FILTER_KEY != ""){
        filter =  (GetFilterEntity(format) == "") ? GetAdditionalActivityFilter(EntityInternalName) : GetFilterEntity(format) + " and " + GetAdditionalActivityFilter(EntityInternalName);
    }else{
        filter = (GetFilterEntity(format) == "") ? "" : GetFilterEntity(format) ;
    }

    //Filter Planned Expenditure for UP3P
    if (EntityName == "Planned expenditure" && endPoint == plc._JIRA_URI.get("UP 3P")){
        filter+= buildExpenditureFilterUP3P();

    }
    


    var sourceEntityInternalName = GetExternalEntity(format).toLowerCase();
    var urlFilter = "";
    var orderBy = Tree ? "&$orderby=level%20asc" : "";
    var s_URL  ="";
    if (UseProjectRelation){
        urlFilter = (filter!= "") ? "&$filter=" + plw.uriencodestring(filter): "";
        s_URL  = endPointUrl + "project('" + s_project+ "')/" + sourceEntityInternalName + "?$select=" + lAttributes + orderBy + urlFilter;
    }else{
        urlFilter = (filter!= "") ? " and " + plw.uriencodestring(filter): "";
        s_URL  = endPointUrl  + sourceEntityInternalName + "?$select=" + lAttributes + "&$filter=dataset%20eq%20'" + urlFilter + s_project + "'" + orderBy ;
    }
    // plw.alert(s_URL);
    try{
        with (plw.restcontext(content_type: 'application/json;charset=utf-8',accept: 'application/json')){
            var (response,status,raw) = restklib.doRequest(#GET#,s_URL,false,headers: Headers);
            // var vAnswer = [];
            var list vAnswer = new list();
             // var list Preferedcolorvector = new list();
            for (var elt in response.getplist(#value#)){
                var vValues = new hashtable("STRING");
                for (var att in lAttributes.parsevector(",")){
                    vValues.set(att,elt.getplist(new symbol(att,"KEYWORD")));
                }
                // plw.alert(extractONBfromodataID(elt[1]));
                vValues.set("ACP_UA_S_UP_MIG_SOURCE_ID",extractONBfromodataID(elt[1])); // Add ONB by parsing the odata ID
                 // act.ACP_UA_S_UP_MIG_SOURCE_ID = elt.get("id");
                // vAnswer.push(vValues);
                vAnswer.unshift(vValues);
            }
            // vAnswer.inspect();
            return vAnswer.reverse();
        }
    } catch(error e){
        plw.writeln(e);
        plw.alert("Error with connexion");
    }
}

function CreateObjectInCurrentProject(vObj,endPoint,s_project,EntityName,CurrentProject){
    var format = get_format(endPoint,EntityName);
    var HashAttribute = HashTableAttributes(format);
    var AlertMessage = [];
    var string msg = "Creation of ~a".format(EntityName);
    var nbElt = vObj.length;
    
    plw.alert(msg + " quantity : " + nbElt);

    with ([plw.monitoring(title: msg, steps: nbElt),plw.positiveonbstack()]) {
        for (var elt in vObj){
            var list plist = new list();
            plist.unshift("file");
            plist.unshift(CurrentProject.printattribute("NAME"));
            for (var att in elt){

                var ConvertedAtt = GetConversionAttribute(HashAttribute,att);

                //Find Slot (case of slots defined on task and subprojects, but not on activities)
                var Slot = plw._utils_findclass(EntityName).getslot(ConvertedAtt);
                if (!(Slot instanceof ObjectAttribute) && EntityName == "Activity"){
                    Slot = (plc.task.getslot(ConvertedAtt) instanceof ObjectAttribute) ? plc.task.getslot(ConvertedAtt) : plc.network.getslot(ConvertedAtt);
                }

                //Specific case for boolean from UP3P
                if (Slot.type == "BOOLEAN" && elt.get(att) instanceof Integer){
                    if (elt.get(att) == 0) {
                        plist.unshift(ConvertedAtt);
                        plist.unshift(false);  
                        continue;
                    }
                    if (elt.get(att) == 1) {
                        plist.unshift(ConvertedAtt);
                        plist.unshift(true);  
                        continue;
                    }
                 }


                if (ConvertedAtt == "class") continue;
                if (ConvertedAtt == "id") {
                    if (!(plw._utils_findclass(EntityName).getslot("_PRI_AA_S_EXT_PROJ") instanceof ObjectAttribute)) continue;
                    plist.unshift("_PRI_AA_S_EXT_PROJ");
                    plist.unshift(CurrentProject.printattribute("NAME") + "@" + elt.get(att));  
                    continue;
                }

                if (elt.get(att) instanceof String && elt.get(att).position("/") instanceof Number && elt.get(att).search("/Date") != false){
                    var sNumber = elt.get(att).ltrim("/Date(").rtrim(")/").parsenumber();
                    var sdate = new date(sNumber/1000 + 60*60*24);
                    if (sdate instanceof Date && sdate > new date (1980,1,1)) {
                        plist.unshift(ConvertedAtt.substitute("_","-"));
                        plist.unshift(sdate);
                    } else{
                        plist.unshift(ConvertedAtt.substitute("_","-"));
                        plist.unshift(-1);
                    }
                }else{
                    plist.unshift(ConvertedAtt.substitute("_","-"));
                    if(IsWBSElementType(this: "",EntityName,ConvertedAtt)){
                        plist.unshift(GetNewActivityId(this: "",elt.get(att),CurrentProject));
                    }
                    else if (elt.get(att) instanceof String && elt.get(att).search(s_project + ":") != false){
                        var vElt = elt.get(att).parsevector(":");
                        plist.unshift(vElt[1]);
                    } else{
                        if (!IsWBSElementType(this: "",EntityName,ConvertedAtt) && LookForMissingObjects(this: "",EntityName,ConvertedAtt,ApplyImportFormula(HashAttribute,att,elt.get(att))) == true){
                            plist.unshift(ApplyImportFormula(HashAttribute,att,elt.get(att)));
                        } else{
                            plist.unshift("");
                            var msg = LookForMissingObjects(this: "",EntityName,ConvertedAtt,elt.get(att));
                            if (msg != "")  {
                                AlertMessage.unshift(LookForMissingObjects(this: "",EntityName,ConvertedAtt,elt.get(att)));
                            }
                        }
                    }
                }
            }

            var newObj;
            with([plw.no_alerts,plw.no_locking,plw.inactive_objects_displayed]){
                if (elt.get("class") == "TASK"){
                    newObj = plc.task.makeopx2objectwithplist(plist.reverse());
                } else if (elt.get("class") == "SUBPROJECT"){
                    newObj = plc.network.makeopx2objectwithplist(plist.reverse());
                } else{
                    newObj = plw._utils_findclass(EntityName).makeopx2objectwithplist(plist.reverse());

                }
            }
        plist.clear();
        msg.monitor(nbElt);
        }
        vObj.delete();
    }

    var cleanAlertMessage = AlertMessage.removeduplicates();
    if (cleanAlertMessage.length > 0){
        var message = cleanAlertMessage.join(plw.string_code_char(10));
        plw.alert(message);
        
        generate_error(message);
        
        var d_now = new date();
        var date_format = "~a-~a-~a ~ah~am~as ".format(d_now.getyear(),d_now.getmonth(),d_now.getdate(),d_now.gethours(),d_now.getminutes(),d_now.getseconds());
        var MessageID = context.applet.user.name + " " + date_format;
        var parameters = CurrentProject.printattribute() + " Link to " + s_project;
        var ErrorLog = new plc.__USER_TABLE_ACP_UT_MIG_UP_MESSAGES(Name : MessageID, DESC : parameters, ACP_UA_T_VALUES_NOT_FOUND : message, FILE : "ACP_CF_D_COMMON_DATA" );
    }
}

function ImportEntity(Headers,endPoint,s_project,EntityName,Tree,UseProjectRelation,cleanBefore,CurrentProject){
    try{
        if (cleanBefore){
            with(CurrentProject.fromobject()){
                for (var elt in plw._utils_findclass(EntityName) where elt.#DATASET# == CurrentProject){
                    elt.delete();
                }
            }
        }
        
        if (!(get_format(endPoint,EntityName) instanceof plc.IMPEX_FORMAT)) return false;
        var vObj = GetObjectList(this: "",Headers,endPoint,s_project,EntityName,Tree,UseProjectRelation);
        // vObj.inspect();
        CreateObjectInCurrentProject(vObj,endPoint,s_project,EntityName,CurrentProject);
    }
    catch(error e){
        plw.alert(e.tostring());
    }
}

function delete_level_one_act(currentproject){
    var toplevelws = plw._UtilsGetTopLevel(currentproject).pop();
    var vActToUpdate = [];
    var ActToDelete = [];

    with(currentproject.fromobject()){
        for (var wbs in plc.workstructure where wbs.level == 2){
            ActToDelete.push(wbs);
        }
        for (var wbs in plc.workstructure where wbs.level == 3){
            vActToUpdate.push(wbs);
        }
    }

    for (var act in vActToUpdate ){
        act.set("WBS_ELEMENT",toplevelws);
    }
    for (var act in ActToDelete ){
        act.get("EXPENDITURES").map(function (){this.set("activity",toplevelws);}); 
        act.delete();
    }
}

function clean_before_import(currentproject){
    with(currentproject.fromobject()){
        for (var wbs in plc.workstructure where wbs.level > 1){
            wbs.delete();
        }
        
        for (var exp in plc.expenditure){
            exp.delete();
        }
    }

}

function convertReceivedDate(StringDate){
    if (StringDate instanceof String && StringDate.position("/") instanceof Number && StringDate.search("/Date") != false){
        var sNumber = StringDate.ltrim("/Date(").rtrim(")/").parsenumber();
        var sdate = new date(sNumber/1000 + 60*60*24);
        if (sdate instanceof Date && sdate > new date (1980,1,1)) {
            return sdate;
        } else{
            return -1;
        }
    }
    return false;
}

function postUpdateVerticalPosition(Headers,endPoint,s_project,currentproject){
    var endPointUrl = endPoint._JIRA_AA_S_URL;
    var format = get_format(endPoint,"Activity");
    var s_URL  = endPointUrl + "project('" + s_project+ "')/workstructure"  + "?$select=id,current_date,_roa_da_n_rps_voffset,_roa_da_n_rps_onum,_bm_da_top_label,_bm_da_bottom_label,_bm_da_right_label,_bm_da_left_label" ;
    var vAnswer = [];

    try{
        with (plw.restcontext(content_type: 'application/json;charset=utf-8',accept: 'application/json')){
            var (response,status,raw) = restklib.doRequest(#GET#,s_URL,false,headers: Headers);
            for (var elt in response.getplist(#value#)){

                var vValues = new hashtable("STRING");
                for (var att in "id,current_date,_roa_da_n_rps_voffset,_roa_da_n_rps_onum,_bm_da_top_label,_bm_da_bottom_label,_bm_da_right_label,_bm_da_left_label".parsevector(",")){
                    vValues.set(att,elt.getplist(new symbol(att,"KEYWORD")));
                }
                
                vAnswer.push(vValues);
            }
        }
        // for (var elt in vAnswer where elt.get("_roa_da_n_rps_voffset") !=0){
        // for (var elt in vAnswer  where elt.get("_roa_da_n_rps_onum") !=0){
        for (var elt in vAnswer ){
            var act = plc.workstructure.get(GetNewActivityId(elt.get("id"),CurrentProject));
            if (act instanceof plc.workstructure){
                act.acp_ua_s_mig_activity_onb = elt.get("onb");
                act._roa_da_n_rps_voffset = elt.get("_roa_da_n_rps_voffset");
                act._roa_da_n_rps_onum = elt.get("_roa_da_n_rps_onum");
                act._bm_da_top_label = elt.get("_bm_da_top_label");
                act._bm_da_bottom_label = elt.get("_bm_da_bottom_label");
                act._bm_da_right_label = elt.get("_bm_da_right_label");
                act._bm_da_left_label = elt.get("_bm_da_left_label");
                act._bm_da_center_label = elt.get("_bm_da_center_label");
                if (act.AF == undefined && act.AS != undefined ) {
                     act.PD = convertReceivedDate(elt.get("current_date"));
                }

                // act.ACP_UA_S_UP_MIG_SOURCE_ID = elt.get("id");

            }
        }
    } catch(error e){
        plw.writeln(e);
        plw.alert("Error with connection");
    }
    vAnswer.delete();
}

function ManageOrderNumber(EntityName,UseProjectRelation,CurrentProject){
  
    var endPoint = context.ACP_UA_S_MIG_ENDPOINT;
    var cons Headers = GetEncodedCredentialHeader();
    var s_project = plw.uriencodestring(context.ACP_UA_S_MIG_SELECTED_PROJECT_NOTE);
    var endPointUrl = endPoint._JIRA_AA_S_URL;
    var EntityInternalName = plw._utils_findclass(EntityName).name.ToString().substitute("-","_").toLowerCase();
    var format = get_format(endPoint,EntityName);

    if (format == undefined) return;

    var sourceEntityInternalName = GetExternalEntity(format).toLowerCase();

    var orderBy = "&$orderby=order_number%20asc";
    var s_URL  ="";
    if (UseProjectRelation){
        s_URL  = endPointUrl + "project('" + s_project+ "')/" + sourceEntityInternalName + "?$select=id,order_number" + orderBy;
    }else{
        s_URL  = endPointUrl  + sourceEntityInternalName + "?$select=id,order_number&$filter=dataset%20eq%20'" + s_project + "'" + orderBy ;
    }

  try{
    with (plw.restcontext(content_type: 'application/json;charset=utf-8',accept: 'application/json')){
          var (response,status,raw) = restklib.doRequest(#GET#,s_URL,false,headers: Headers);
          for (var elt in response.getplist(#value#)){
                var result = [elt.getplist(new symbol("id","KEYWORD")),elt.getplist(new symbol("order_number","KEYWORD"))];
                var obj = (EntityName == "Activity") ? plw._utils_findclass(EntityName).get(GetNewActivityId(result[0],CurrentProject)) : plw._utils_findclass(EntityName).get(result[0]);
                    if (obj != undefined)  obj.order_number = result[1];
          }
    }
  } catch(error e){
    plw.writeln(e);
    plw.alert("Error with connection");
  }

}

function ImportFromUPwithArgs(endPoint,sourceProjectName,CurrentProject,MultipleProjects){

    context.ACP_UA_S_MIG_ENDPOINT = endPoint;
    var cons Headers =GetEncodedCredentialHeader();
    // var CurrentProject = plw.currentpageobject();
    var question = plw.question("The current project ~a will be replaced by ~a from ~a, in case of missing master data, these ones will be emptied and a dialog will list them. 
Do you want to continue?".format(CurrentProject.name,sourceProjectName,endPoint.DESC));
    if(!question) return true;

    // context.ACP_UA_S_MIG_ATTRIBUTE_FILTER_KEY = "";
    // context.ACP_UA_S_MIG_VALUE_FILTER_KEY = "";
    // var MultipleProjects = context.ACP_UA_B_MIG_USE_MULTIPRJ_WITH_KEY;
    
    
    var error_fullpath_and_name = create_outputstreams("migration_error_log.txt");
    // Error_fileStream.writeln("sep=;");
    Error_fileStream.writeln("user: ~a, PaniswareE7 Project ~a, target project".format(context.applet.user.name,CurrentProject.name, plw.uriencodestring(sourceProjectName)));

    
    var monitoringMsg = "Cleaning Project";
    with(plw.monitoring(title : monitoringMsg)) {
        clean_before_import(CurrentProject);
        monitoringMsg.monitor(true);
    }

    if (!MultipleProjects){
        var s_project = plw.uriencodestring(sourceProjectName);
        update_project(Headers,endPoint,s_project,CurrentProject);
        ImportEntity(Headers,endPoint,s_project,"TimeLine Grouping",true,false,true,CurrentProject);
        ImportEntity(Headers,endPoint,s_project,"Activity",true,true,false,CurrentProject);
        ImportEntity(Headers,endPoint,s_project,"link",false,true,false,CurrentProject);
        ImportEntity(Headers,endPoint,s_project,"Planned expenditure",false,true,true,CurrentProject);
        postUpdateVerticalPosition(Headers,endPoint,s_project,CurrentProject);
        
    } else{
        for (var project in sourceProjectName.parsevector(",")){
            var s_project = plw.uriencodestring(project);
            ImportEntity(Headers,endPoint,s_project,"TimeLine Grouping",true,false,false,CurrentProject);
        }
        for (var project in sourceProjectName.parsevector(",")){
            var s_project = plw.uriencodestring(project);
            ImportEntity(Headers,endPoint,s_project,"Activity",true,true,false,CurrentProject);
        }
        for (var project in sourceProjectName.parsevector(",")){
            var s_project = plw.uriencodestring(project);
            ImportEntity(Headers,endPoint,s_project,"link",false,true,false,CurrentProject);
        }
        for (var project in sourceProjectName.parsevector(",")){
            var s_project = plw.uriencodestring(project);
            ImportEntity(Headers,endPoint,s_project,"Planned expenditure",false,true,false,CurrentProject);
        }
        for (var project in sourceProjectName.parsevector(",")){
            var s_project = plw.uriencodestring(project);
            postUpdateVerticalPosition(Headers,endPoint,s_project,CurrentProject);
        }
    }
    // ImportEntity(Headers,endPoint,s_project,"Actual expenditure",false,true,true);

    

    //Delete Level1 Act
    if (!MultipleProjects) delete_level_one_act(CurrentProject);

    //JSE: Dirty, but I didn't found other way to manager order number
    monitoringMsg = "Re-Order objects";
    with(plw.monitoring(title : monitoringMsg)) {
        ManageOrderNumber("Activity",true,CurrentProject);
        ManageOrderNumber("Activity",true,CurrentProject);
        ManageOrderNumber("TimeLine Grouping",false,CurrentProject);
        ManageOrderNumber("TimeLine Grouping",false,CurrentProject);
        monitoringMsg.monitor(true);
    }

//JSE : Generation of Line Number CBS to be display in the forecast input
    AllocateLineNumberAfterImport(CurrentProject);


    //Put origin project name on L1 Activity
    var toplevelws = plw._UtilsGetTopLevel(CurrentProject).pop();
    // toplevelws.set("_PRI_AA_S_EXT_PROJ",s_project);
    if (!MultipleProjects) toplevelws.set("_PRI_AA_S_EXT_PROJ",toplevelws.file.name + "@" + sourceProjectName);
    if (!MultipleProjects) CurrentProject.set("ACP_UA_S_EXTERNAL_REFERENCE",sourceProjectName);

    if (this instanceof graphics) this.editor.delete();
    plw.alert("Import successful");
    
    Error_fileStream.close();
    plw.Downloadfilefromserver(error_fullpath_and_name[0],error_fullpath_and_name[1]);
    
    
    return true;
}

function validate_import_up_dev(){
    var endPoint = context.ACP_UA_S_MIG_ENDPOINT;
    var CurrentProject = plw.currentpageobject();
    var MultipleProjects = context.ACP_UA_B_MIG_USE_MULTIPRJ_WITH_KEY;
    var sourceProjectName = context.ACP_UA_S_MIG_SELECTED_PROJECT_NOTE;

    ImportFromUPwithArgs(endPoint,sourceProjectName,CurrentProject,MultipleProjects);
}

function project_updev_p2p_act(Headers,endPoint,s_project,type){
	var lAttributes = "id,dataset,synchronize_with";
	var endPointUrl = endPoint._JIRA_AA_S_URL;
	var s_URL  = endPointUrl + "project('" + s_project+ "')/task" + "?$select=" + lAttributes + "&$expand=synchronize_with($select=dataset,id)&$filter=user_attribute_au_nf_s_activity_type%20eq%20'"+ type + "'";
	try{
		with (plw.restcontext(content_type: 'application/json;charset=utf-8',accept: 'application/json')){
	        var (response,status,raw) = restklib.doRequest(#GET#,s_URL,false,headers: Headers);
	        var vAnswer = [];
	        for (var elt in response.getplist(#value#)){
	        	var vValues = new hashtable("STRING");
	        	for (var att in lAttributes.parsevector(",")){
	        		vValues.set(att,elt.getplist(new symbol(att,"KEYWORD")));
	        	}
	        	vAnswer.push(vValues);
	        }
	        return vAnswer;
		}
	} catch(error e){
		plw.writeln(e);
		plw.alert("Error with connexion");
	}
}

function link_p2p_projects(){
	var endPoint = context.ACP_UA_S_MIG_ENDPOINT;
	var cons Headers = GetEncodedCredentialHeader();

	
	var toplevelws = plw._UtilsGetTopLevel(plw.currentpageobject()).pop();
	var s_project = toplevelws._PRI_AA_S_EXT_PROJ;
	var vObj =  project_updev_p2p_act(Headers,endPoint,s_project,"P2P_CONS");
	var vTargetsFiles = [];
	for (var act in vObj){
		var vSync = act.get("synchronize_with");
		vTargetsFiles.push(vSync[3]);
	}

	if (vTargetsFiles.length == 0){
		plw.alert("The project ~a doesn't have any P2P Consummer in UP Dev 2.0".format(s_project));
		return true;
	}
	var question = plw.question("The current project has P2P producers in the projects ~a Do you want to continue?".format(vTargetsFiles.removeduplicates().join(",")));
	if (!question) return false;

	//Create links
	

	for (var act in vObj){
		var currentAct = act.get("id");
		var currentproject = act.get("dataset");

		var vSync = act.get("synchronize_with");
		var targetFile = vSync[3];
		var targetId = vSync[5];
			
		var right = plc.workstructure.get(GetNewActivityId(currentAct,plw.currentpageobject()));
		var target_plw_project;

		for (var act in plc.network where act.level == 1 && act._PRI_AA_S_EXT_PROJ == targetFile){
			target_plw_project = act.file;
		}
		if (!(target_plw_project instanceof plc.ordoproject)) {
			plw.alert("No project corresponding to ~a has been found".format(targetFile));
			continue;
		} 
		
		var left = plc.workstructure.get(GetNewActivityId(targetId,target_plw_project));

		if (!(right instanceof plc.workstructure)){
			plw.alert("Activity ~a is not found in the project ~a".format(currentAct,currentproject));
			continue;
		}
		if (!(left instanceof plc.workstructure)){
			plw.alert("Activity ~a is not found in the project ~a".format(targetId,targetFile));
			continue;
		}
		var link = new plc.CONSTRAINT(TYPE: #FINISH-START# ,
									  LEFT: left,
									  RIGHT: right);
		link.set("_SYN_AA_B_SMOOTHLINK",true);
	}
}

link_p2p_projects();

function return_migrated_project(ExternalName){

/**
	var prj;
	with(false.fromobject()){
		for (var actL1 in plc.network where actL1.level == 1 && actL1._PRI_AA_S_EXT_PROJ != ""){
			if (actL1._PRI_AA_S_EXT_PROJ.parsevector("@").length != 0 && actL1._PRI_AA_S_EXT_PROJ.parsevector("@")[1] == ExternalName){

				prj == actL1.#DATASET#;
				break;
			}
		}

		if (prj instanceof plc.ordoproject){
			for (var actL1 in plc.network where actL1.level == 2 && actL1._PRI_AA_S_EXT_PROJ != ""){
				if (actL1._PRI_AA_S_EXT_PROJ.parsevector("@").length != 0 && actL1._PRI_AA_S_EXT_PROJ.parsevector("@")[1] == ExternalName){

					prj == actL1.#DATASET#;
					break;
				}
			}
		}

	}

	return prj;
**/


	with(false.fromobject()){
		for (var prj in plc.ordo_project where prj.ACP_UA_S_EXTERNAL_REFERENCE == ExternalName){
			return prj;
		}
	}

}

function mapAttributesMigration (f) {
    var plc.__USER_TABLE_ACP_UT_UP3P_LIST_SLOTS o_slot = this;
    for (var MapRelation in o_slot.get("USER_ATTRIBUTE_INVERSE_ACP_UA_ATTRIBUTE_RELATION.__USER_TABLE_ACP_UT_UP_ATTRIBUTE_MAPPING")){
           f.call(MapRelation);
        }
}

function CreateBackSynchronizeWith(project){

	var vSynchronizedProject = [];
	var vSynchronizedProjectNotFound = [];
	with(project.fromobject()){
		for (var source_act in plc.workstructure where  source_act.ACP_UA_S_MIG_TEMPO_SYNC_WITH_FILE != "" && return_migrated_project(source_act.ACP_UA_S_MIG_TEMPO_SYNC_WITH_FILE) != undefined){
			vSynchronizedProject.push(source_act.ACP_UA_S_MIG_TEMPO_SYNC_WITH + " linked to project " + source_act.ACP_UA_S_MIG_TEMPO_SYNC_WITH_FILE);
		}
	// }
		for (var source_act in plc.workstructure where  source_act.ACP_UA_S_MIG_TEMPO_SYNC_WITH_FILE != "" && return_migrated_project(source_act.ACP_UA_S_MIG_TEMPO_SYNC_WITH_FILE) == undefined){
			vSynchronizedProjectNotFound.push(source_act.ACP_UA_S_MIG_TEMPO_SYNC_WITH_FILE);
		}

		if (vSynchronizedProjectNotFound.length != 0){
			var question2 = plw.question("The following project are required for synchronization, but not found in Planisware E7, do you want to continue?: ~a ~a".format(context.CallStringFormula("get_char(10)"),vSynchronizedProjectNotFound.removeduplicates().join(context.CallStringFormula("get_char(10)"))));
			if (!question2) return false;
		}

		var question = plw.question("Do you want to re-create synchronization link(s): " + vSynchronizedProject.removeduplicates().join(context.CallStringFormula("get_char(10)")));
		if (!question) return false;
			for (var source_act in plc.workstructure where  source_act.ACP_UA_S_MIG_TEMPO_SYNC_WITH_FILE != "" && return_migrated_project(source_act.ACP_UA_S_MIG_TEMPO_SYNC_WITH_FILE) != undefined){
				var ProjectContainer = return_migrated_project(source_act.ACP_UA_S_MIG_TEMPO_SYNC_WITH_FILE);
				var TempoSyncWith = source_act.ACP_UA_S_MIG_TEMPO_SYNC_WITH;

				if(TempoSyncWith.search(":") instanceof Number){
					TempoSyncWith = TempoSyncWith.parsevector(":")[1];
				}
				var ToSyncWith = GetNewActivityId(TempoSyncWith,ProjectContainer);
				source_act.set("SYNCHRONIZE_WITH",ToSyncWith);
		}
	}

	plw.alert("~a activitie(s) synchronized".format(vSynchronizedProject.length));
}

function CreateBackSynchronizeWith(project){

var vSynchronizedProject = [];
var vSynchronizedProjectNotFound = [];
with(project.fromobject()){
for (var source_act in plc.workstructure where  source_act.ACP_UA_S_MIG_TEMPO_SYNC_WITH_FILE != "" && return_migrated_project(source_act.ACP_UA_S_MIG_TEMPO_SYNC_WITH_FILE) != undefined){
vSynchronizedProject.push(source_act.ACP_UA_S_MIG_TEMPO_SYNC_WITH + " linked to project " + source_act.ACP_UA_S_MIG_TEMPO_SYNC_WITH_FILE);
}
}
for (var source_act in plc.workstructure where  source_act.ACP_UA_S_MIG_TEMPO_SYNC_WITH_FILE != "" && return_migrated_project(source_act.ACP_UA_S_MIG_TEMPO_SYNC_WITH_FILE) == undefined){
vSynchronizedProjectNotFound.push(source_act.ACP_UA_S_MIG_TEMPO_SYNC_WITH_FILE);
}

if (vSynchronizedProjectNotFound.length != 0){
var question2 = plw.question("The following project are required for synchronization, but not found in Planisware E7, do you want to continue?: ~a ~a".format(context.CallStringFormula("get_char(10)"),vSynchronizedProjectNotFound.removeduplicates().join(context.CallStringFormula("get_char(10)"))));
if (!question2) return false;
}

var question = plw.question("Do you want to re-create synchronization link(s): " + vSynchronizedProject.removeduplicates().join(context.CallStringFormula("get_char(10)")));
if (!question) return false;
for (var source_act in plc.workstructure where  source_act.ACP_UA_S_MIG_TEMPO_SYNC_WITH_FILE != "" && return_migrated_project(source_act.ACP_UA_S_MIG_TEMPO_SYNC_WITH_FILE) != undefined){
var ProjectContainer = return_migrated_project(source_act.ACP_UA_S_MIG_TEMPO_SYNC_WITH_FILE);
var TempoSyncWith = source_act.ACP_UA_S_MIG_TEMPO_SYNC_WITH;

if(TempoSyncWith.search(":") instanceof Number){
TempoSyncWith = TempoSyncWith.parsevector(":")[1];
}
var ToSyncWith = GetNewActivityId(TempoSyncWith,ProjectContainer);
source_act.set("SYNCHRONIZE_WITH",ToSyncWith);
}
}

plw.alert("~a activitie(s) synchronized".format(vSynchronizedProject.length));
}

function GetSynchronizedActID(SyncFile,SyncID){
	var ka = new keyAttribute(plc.workstructure,[#USER_ATTRIBUTE_ACP_UA_S_UP_MIG_SOURCE_FILE#,#USER_ATTRIBUTE_ACP_UA_S_UP_MIG_SOURCE_ID#],[SyncFile,SyncID]);
	with(false.fromobject()){
		with(ka.fromObject()) {
			for (var act in plc.workstructure where act.#USER_ATTRIBUTE_ACP_UA_S_UP_MIG_SOURCE_FILE# == SyncFile && act.#USER_ATTRIBUTE_ACP_UA_S_UP_MIG_SOURCE_ID# == SyncID){
				return act;
			}
		}
	}
	return undefined;
}

function CreateBackSynchronizeWith(project){
	var msg= "";
	var cpt_found = 0;
	var cpt_Notfound = 0;
	with(project.fromobject()){
		for (var Act in plc.workstructure where act.ACP_UA_S_MIG_TEMPO_SYNC_WITH_FILE != ""){
			var SyncActivity = GetSynchronizedActID(Act.#USER_ATTRIBUTE_ACP_UA_S_MIG_TEMPO_SYNC_WITH_FILE#,Act.#USER_ATTRIBUTE_ACP_UA_S_MIG_TEMPO_SYNC_WITH#);
			msg += context.callstringformula("get_char(10)");
			if (SyncActivity != undefined){
				Act.set("SYNCHRONIZE_WITH",SyncActivity);
				msg += "~a is now synchronized with ~a".format(Act.printattribute("ID") + "-" + Act.printattribute("DESC")  ,SyncActivity.printattribute("ID") + " - " + SyncActivity.printattribute("DESC"));
				cpt_found++;
			}else{
				msg += "No synchronized source activity found for ~a".format(Act.printattribute("ID"));
				cpt_Notfound ++;
			}
		}
	}
	plw.alert("~a has been synchronized, and ~a cannot be synchronized".format(cpt_found,cpt_Notfound));
	plw.alert(msg);
}

Map extra attributes functions

function ListAttributeExtra(entity){
var vAttributes = [];
		for (var att in plc.__USER_TABLE_ACP_UT_UP3P_LIST_SLOTS where att.ACP_UA_REST_APPLICATION == context.ACP_UA_S_MIG_ENDPOINT &&  att.ACP_UA_S_MAP_ADDITIONAL_ENTITY == context.ACP_UA_S_MAP_ADDITIONAL_ENTITY) vAttributes.push(att);
			return vAttributes;
	// }
}

function PopulateListAttribute(){
	if (context.ACP_UA_S_MIG_ENDPOINT == "") return true;
	var endPointUrl = context.ACP_UA_S_MIG_ENDPOINT._JIRA_AA_S_URL;
	var cons Headers = GetEncodedCredentialHeader();
	// var entity = "work_structure";
	var entity = entityExtraAttribute().name.ToString().substitute("-","_").toLowerCase();
	this.possiblevalues =  ListAttributeExtra(entity);

}

function ActivitiesListAttributes(){
	var entity = entityExtraAttribute();
	if (!entity) return [];
	var vSlots = [];
		for (var att in entity.listslots() where att.shadowed == false 
														&& att instanceof ObjectSlot 
														&& att.get("externaltype") != undefined
														&& att.comment !=""
														){

			var slotName = att.internalname.name;
			if (slotName.search("_BASELINE") instanceof Number) continue;
			if (slotName.search("_NF_") instanceof Number) continue;
			if (att.get("PROPAGATED-FROM-CONTEXT") != undefined) continue;
			vSlots.push(att.internalname.name.toLowerCase().replaceregexp("-","_"));
		}
	this.possiblevalues =vSlots;
}

function GetMappingConvertedValue(MapAttribute,value){
	if (value == "") {
		return "";
	}
	if (MapAttribute.get("ACP_DR_ATTRIBUTES_LINKED") == undefined || MapAttribute.get("ACP_DR_ATTRIBUTES_LINKED").length == 0) {
		return value;
	}

	for (var mapping in MapAttribute.get("ACP_DR_ATTRIBUTES_LINKED") where mapping.ACP_UA_S_SOURCE_VALUE == value){
		return mapping.ACP_UA_S_PLANISWARE_VALUE;
	}

	return value;
}

function entityExtraAttribute(){

	var Attribute = (context.acp_ua_s_mig_source_extra_attribute == "") ? "" : plc.__USER_TABLE_ACP_UT_UP3P_LIST_SLOTS.get(context.acp_ua_s_mig_source_extra_attribute);
	if (Attribute == "") return false;
	var StringEntity = Attribute.ACP_UA_S_MAP_ADDITIONAL_ENTITY;
	if (StringEntity == "") return false;
	return "Opx~a".format(StringEntity).findclass();
}

function UpdateExtraAttribute(){
	var endPoint = context.ACP_UA_S_MIG_ENDPOINT;
	var cons Headers = GetEncodedCredentialHeader();
	var CurrentProject = plw.currentpageobject();
	var endPointUrl = endPoint._JIRA_AA_S_URL;
	var Attribute = (context.acp_ua_s_mig_source_extra_attribute != "") ? plc.__USER_TABLE_ACP_UT_UP3P_LIST_SLOTS.get(context.acp_ua_s_mig_source_extra_attribute).name : "";
	var WorkingClass = entityExtraAttribute();

	var lowercaseAttribute = Attribute.toLowerCase();
	var plw7Attribute = context.ACP_UA_S_MIG_PLWE7_ATTRIBUTE;
	var integer totalSteps = 0;
	var integer count = 0;
	var vAnswer = [];
	// var vSourceProjects = CurrentProject.ACP_UA_S_EXTERNAL_REFERENCE.parsevector(",");
	var vSourceProjects = [];
	
	if (vSourceProjects.length == 0){ //Case external reference field is empty
		with(CurrentProject.fromobject()){
			for (var o_activity in plc.workstructure where o_activity.ACP_UA_S_UP_MIG_SOURCE_FILE != "") vSourceProjects.push(o_activity.ACP_UA_S_UP_MIG_SOURCE_FILE);
		}
	}


	var activityTableFromResponse = new plw.vect();
	for (var act in WorkingClass where act.get("ACP_UA_S_UP_MIG_SOURCE_ID") != "" )  totalSteps++;

	with([CurrentProject.fromobject(),plw.monitoring(title :"Import attribute", steps : totalSteps),plw.restcontext(content_type: 'application/json;charset=utf-8',accept: 'application/json')]){
		for (var proj in vSourceProjects.removeduplicates()) {
			var s_URL = endPointUrl + "project('~a')/~a?$select=OBJECT_NUMBER,~a".format(plw.uriencodestring(proj),WorkingClass.name.ToString().substitute("-","_").toLowerCase(),Attribute);
		//	plw.alert(s_URL);
			var (response,status,raw) = restklib.doRequest(#GET#,s_URL,false,headers: Headers);
			if (status == 200){
				var targetAttribute = context.ACP_UA_S_MIG_PLWE7_ATTRIBUTE;
				try{
					if (!(response instanceof cons)) continue;
					//store in htable
					for (var o_activity in response.getplist(#value#)){
						var vValues = new hashtable("STRING");
						vValues.set("object_number",o_activity.getplist(#object_number#));
						vValues.set(lowercaseAttribute, o_activity.getplist(new symbol(lowercaseAttribute,"KEYWORD")));
						vAnswer.push(vValues);
					}
				} catch(error e){
					plw.alert("An error happened on project ~a".format(proj.printattribute()));
				//	plw.writeln(e.printStackTrace());
				}
			}
		}

		for (var act in WorkingClass where act.get("ACP_UA_S_UP_MIG_SOURCE_ID") != "" ){
			count++;
			var value;
			var sourceONB = act.get("ACP_UA_S_UP_MIG_SOURCE_ID").parsenumber();
			for (var l_activity in vAnswer){
				if (l_activity.get("object_number") == sourceONB) value = l_activity.get(lowercaseAttribute);
			}
			try{
			    
			    if (value == undefined) continue;
				// Dirty case for boolean, UP3P has an old version of ODATA and return 0 for False and 1 for True
			    if (WorkingClass.getslotbyid(plw7Attribute).type == "BOOLEAN" && value instanceof Integer){
			    	if (value == 0) value = false;
			     	if (value == 1) value = true;
			    }
            
				if (!(value instanceof Boolean)){				 
					if (value.search("Date") instanceof Number && value.position("/") instanceof Number){
						var sNumber = value.ltrim("/Date(").rtrim(")/").parsenumber();
						var sdate = new date(sNumber/1000 + 60*60*24);
						
						if (sdate instanceof Date && sdate > new date (1980,1,1)) {
							act.set(WorkingClass.getslotbyid(plw7Attribute).representation,sdate);
						} 
					}else{
						var ConvertedValue = GetMappingConvertedValue(plc.__USER_TABLE_ACP_UT_UP3P_LIST_SLOTS.get(Attribute),value);
						 	try{
						 		act.set(WorkingClass.getslotbyid(plw7Attribute).representation,ConvertedValue);
						 	} catch (error e){
						 		plw.alert("Impossible to set ~a to into the attribute ~a".format(ConvertedValue,plw7Attribute));
						 	}
					}
				}else{
					if (WorkingClass.getslotbyid(plw7Attribute).type == "BOOLEAN"){
						act.set(WorkingClass.getslotbyid(plw7Attribute).representation,value);
					}
				}
			} catch(error e){
				plw.alert("An error happened on activity ~a".format(act.printattribute()));
				plw.writeln(e.printStackTrace());
			}
			"Importing attribute".monitor(count);
		}
	}
	plw.alert("Update done");
}

LookForMissingObjects(this: "",EntityName,ConvertedAtt,elt.get(att))

function  AttributeDescFromID(SlotID){
    var SlotName = plc.__USER_TABLE_ACP_UT_UP3P_LIST_SLOTS.get(SlotID).name;
	// plw.alert(SlotName);
	var slot = plc.workstructure.getslotbyid(SlotName);
	if (slot instanceof ObjectAttribute){
		var representation = slot.representation;
		var desc = slot.comment;
		var label = "~a (~a)".format(representation,desc);
		return label;
	}else{
	return "Not found in PLWE7";
	}
}

function duplicate_project_exp(project){
	with(project.fromobject()){
		for (var exp in plc.expenditure){
			exp.copywithplist(["TYPE","ACP_ET_MIG_BASELINE_STD"]);
		}
	}
return true;
}

function CreateTempoBaseline(project){
// with(plw.no_db_recording){ 
with([plw.no_db_recording,plw.no_locking]){ 
	  var Reference = new plc.reference(NAME:"TEMPORARY_FOR_MIGRATION"
								  , DESC:"TEMPORARY_FOR_MIGRATION"
								  , replace_old:true
								  , FILE: project
								  , TEMPLATE: ""
								  , #TYPE-DATE#: "REAL"
								  , _PM_AA_S_CREATED_BY:Context.Applet.User.Name
								  );
	  	  return Reference;
	}
}

function duplicate_baseline(project,source){
	var name;
	var answer = "Baseline".userquestion("Select a baseline"
															 ,"FREE_1_BASELINE"
															 ,"Cancel"
															 ,[new list(1,"FREE_2_BASELINE"),new list(2,"FREE_3_BASELINE"),new list(3,"EVM_BASELINE")]
															 );
	switch(answer){
	  case 1:
	  	name = "FREE_2_BASELINE";
	  	break;
	  case 2:
	  	name = "FREE_3_BASELINE";
	  	break;
	  case 3:
	  	name = "EVM_BASELINE";
	  	break;
	  case true:
	 	  name = "FREE_1_BASELINE";
	 	  break;
	 	}

	  var Reference = new plc.reference(NAME:name
								  , DESC:name
								  , replace_old:true
								  , FILE: project
								  , TEMPLATE: ""
								  , #TYPE-DATE#: source
								  , _PM_AA_S_CREATED_BY:Context.Applet.User.Name
								  );

		return Reference;
}

function CleanProjectBaseline(project){
	with([project.fromobject(),plw.no_locking]){
		for (var ref_exp in plc.REFERENCED_EXPENDITURE where ref_exp.type != "ACP_ET_MIG_BASELINE_STD" && ref_exp.Reference.name == "TEMPORARY_FOR_MIGRATION"){
			ref_exp.delete();
		}

		//to change

		for (var ref_exp in plc.REFERENCED_EXPENDITURE where ref_exp.type == "ACP_ET_MIG_BASELINE_STD" && ref_exp.Reference.name == "TEMPORARY_FOR_MIGRATION"){
			ref_exp.type = "EVM";
			ref_exp.quantity = 6565;
		}

		// EVM

	}
}

function CleanCurrentProject(project){
	with([project.fromobject(),plw.no_locking]){
		for (var exp in plc.expenditure where exp.type == "ACP_ET_MIG_BASELINE_STD") exp.delete();
	}

}

function DeleteTempoBaseline (project){
	with([project.fromobject(),plw.no_locking]){
	 for (var baseline in plc.reference where baseline.name == "TEMPORARY_FOR_MIGRATION") baseline.delete();
	}
}

TEMPORARY_FOR_MIGRATION

*******************Migration dates

function OdataDate(OdataDate){
    var sNumber = OdataDate.ltrim("/Date(").rtrim(")/").parsenumber();
    var sdate = new date(sNumber/1000 + 60*60*24);
     if (sdate instanceof Date && sdate > new date (1980,1,1)){
        return sdate;
     }else{
        return -1;
     }
}

function ProposeReference(Headers,endPoint,s_project,currentproject){
    var endPointUrl = endPoint._JIRA_AA_S_URL;
    var s_URL  = endPointUrl + "project('" + s_project+ "')/reference"  + "?$select=id,name" ;
    var vAnswer = [];
    try{
        with (plw.restcontext(content_type: 'application/json;charset=utf-8',accept: 'application/json')){
            var (response,status,raw) = restklib.doRequest(#GET#,s_URL,false,headers: Headers);
            for (var elt in response.getplist(#value#)){
               if (plw.question(elt.getplist(#name#))){
                    return elt.getplist(#id#);
               }    
            }
        }
    } catch(error e){
        plw.writeln(e);
        plw.alert("Error with connection");
    }
}

function GetReferenceDates(Headers,endPoint,s_project,currentproject){
    var endPointUrl = endPoint._JIRA_AA_S_URL;
    var ref_number = ProposeReference(Headers,endPoint,s_project,currentproject);
    var s_URL  = endPointUrl + "reference(" + ref_number+ ")/reference_date"  + "?$select=id,start_date,end_date&$expand=reference_workstructure($select=structure_number)" ;
    var vValues = new hashtable("NUMBER");

    try{
        with (plw.restcontext(content_type: 'application/json;charset=utf-8',accept: 'application/json')){
            var (response,status,raw) = restklib.doRequest(#GET#,s_URL,false,headers: Headers);
            for (var elt in response.getplist(#value#)){
                var structure_number = elt.getplist(#reference_workstructure#).getplist(#structure_number#);
                vValues.set(structure_number,[OdataDate(elt.getplist(#start_date#)),OdataDate(elt.getplist(#end_date#))]);
            }
            return vValues;
        }
    } catch(error e){
        plw.writeln(e);
        plw.alert("Error with connection");
    }
}

function MigrateRefDate(ref_date,vDates){
	var actOnb = ref_date.get("Reference_work_structure").get("structure_number");
	var SourceApplicationOnb = plc.workstructure.get(actOnb).ACP_UA_S_MIG_ACTIVITY_ONB.parsenumber();
	var vActDates = vDates.get(SourceApplicationOnb);
	if (vActDates != undefined){
		with(plw.no_locking){
			ref_date.set("start_date",vActDates[0]);
			ref_date.set("end_date",vActDates[1]);
		}
	}
}

function migrate_project(Headers,endPoint,s_project,project){
 var vDates = GetReferenceDates(Headers,endPoint,s_project,project);
	for (var reference in project.get("REFERENCES") where reference.name == "TEMPORARY_FOR_MIGRATION"){
		with(reference.fromobject()){
			for (var ref_date in plc.reference_date){
				MigrateRefDate(ref_date,vDates);
			}
		}
	}
}

Context fields for Local & TCO scoring //

function acp_pjs_TcoSocringTemplateReader(){
	var CurrentSct = plc._SCA_PT_SCT.get(context._SCA_AA_S_OC_SCT_SCA_FILTER);
	if (context._SCA_AA_S_OC_SCT_SCA_FILTER != "" && CurrentSct instanceof plc._SCA_PT_SCT){
		return CurrentSct.printattribute();
	} else {
		context._SCA_AA_S_OC_SCT_SCA_FILTER = "Corporate Scorecard";
	}
	return "";
}

function acp_pjs_SocringTemplateModifier(Value){
	var CurrentSct = plc._SCA_PT_SCT.get(context._SCA_AA_S_OC_SCT_SCA_FILTER);
	var NewSct = plc._SCA_PT_SCT.get(Value);
	if (Value != "" && NewSct instanceof plc._SCA_PT_SCT){
		context._SCA_AA_S_OC_SCT_SCA_FILTER = Value;
	} 
}

function acp_pjs_LocalSocringTemplateReader(){
	var CurrentSct = plc._SCA_PT_SCT.get(context._SCA_AA_S_OC_SCT_SCA_FILTER);
	if (context._SCA_AA_S_OC_SCT_SCA_FILTER != "" && CurrentSct instanceof plc._SCA_PT_SCT && CurrentSct.ACP_UA_B_IS_A_LOCAL_SCORE){
		return CurrentSct.printattribute();
	}
	return "";
}

function acp_pjs_LocalSocringTemplateModifier(Value){
	var CurrentSct = plc._SCA_PT_SCT.get(context._SCA_AA_S_OC_SCT_SCA_FILTER);
	var NewSct = plc._SCA_PT_SCT.get(Value);
	if (Value != "" && NewSct instanceof plc._SCA_PT_SCT && NewSct.ACP_UA_B_IS_A_LOCAL_SCORE){
		context._SCA_AA_S_OC_SCT_SCA_FILTER = Value;
	} else if (Value != "") {
		plw.alert("Selected Scorecard Template is not a Local Scorecard.");
	} else {
	    context._SCA_AA_S_OC_SCT_SCA_FILTER = Value;
	}
}

function acp_sca_scorecard_for_scoring_input(){
   // plw.alert(this);
    "sca_scorecard_for_scoring_input".callmacro(this,this.object);
}

Scoring Consolidation methods //

function acp_pjs_HasBeenScored(plc._SCA_PT_SCT sct,plc._SCA_PT_SCA current_scorecard){
  if (sct instanceof plc._SCA_PT_SCT && current_scorecard instanceof plc._SCA_PT_SCA) {
    for (var elt in current_scorecard.get("r._SCA_RA_SCO_SCA._SCA_PT_SCO") where (elt._SCA_RA_SCO_SCT == sct || elt._SCA_RA_SCO_SCT.ischildof(sct))) {
      return true;
    }
  }
  return false;
}

_AcpScoring.acp_pjs_ScaSum

function acp_pjs_ScaSum(plc._SCA_PT_SCT sct, info, user, correction, multi_user, average, strategy, _this, current_scorecard, lvl1sct){
  var inf = info.get(sct);
  var hashtable noDouble = new hashtable();
  var Sum = 0;
  for(var elt in inf.children) { 
    var sub = info.get(elt);
    if(noDouble.get(elt) == undefined && sub.evaluatedFilter == true){
      var childScore = scoringMod.scorecardScoreCustoCompute(elt, info, user, correction, multi_user, average, strategy, _this, current_scorecard, lvl1sct);
      Sum += childScore;
      noDouble.set(elt,true);
    }
  }
  return Sum;
}

sum of the topics capped from -1 to 3
_AcpScoring.acp_pjs_SumWithMinAndMax

function acp_pjs_SumWithMinAndMax(plc._SCA_PT_SCT sct, info, user, correction, multi_user, average, strategy, _this, current_scorecard, lvl1sct){
  var Sum = acp_pjs_ScaSum(sct, info, user, correction, multi_user, average, strategy, _this, current_scorecard, lvl1sct);
  if(Sum < -1) return -1;
  else if (Sum > 3)  return 3;
  else return Sum;
}

_AcpScoring.acp_pjs_computeMax_scoredOnly

function acp_pjs_computeMax_scoredOnly(plc._SCA_PT_SCT sct, info, user, correction, multi_user, average, strategy, _this, current_scorecard, lvl1sct){
  var inf = info.get(sct);
  var hashtable noDouble = new hashtable();
  var max = false;
  for(var elt in inf.children where acp_pjs_HasBeenScored(elt,current_scorecard)) {
    var sub = info.get(elt);
    if(noDouble.get(elt) == undefined && sub.evaluatedFilter == true){
      var childScore = scoringMod.scorecardScoreCustoCompute(elt, info, user, correction, multi_user, average, strategy, _this, current_scorecard, lvl1sct);
      max = (max == false) ? childScore : math.max(max, childScore);
      noDouble.set(elt,true);
    }
  }
  if(max instanceof number){
    return max;
  }
  return 0;
}

_AcpScoring.acp_pjs_computeMin_scoredOnly

function acp_pjs_computeMin_scoredOnly(plc._SCA_PT_SCT sct, info, user, correction, multi_user, average, strategy, _this, current_scorecard, lvl1sct){
  var inf = info.get(sct);
  var hashtable noDouble = new hashtable();
  var min = false;
  for(var elt in inf.children where acp_pjs_HasBeenScored(elt,current_scorecard)) {
    var sub = info.get(elt);
    if(noDouble.get(elt) == undefined && sub.evaluatedFilter == true){
      var childScore = scoringMod.scorecardScoreCustoCompute(elt, info, user, correction, multi_user, average, strategy, _this, current_scorecard, lvl1sct);
      min = (min == false) ? childScore : math.min(min, childScore);
      noDouble.set(elt,true);
    }
  }
  if(min instanceof number){
    return min;
  }
  return 0;
}

_AcpScoring.acp_pjs_computWeightedAverage_scoredOnly

function acp_pjs_computWeightedAverage_scoredOnly(plc._SCA_PT_SCT sct, info, user, correction, multi_user, average, strategy, _this, current_scorecard, lvl1sct){
  var inf = info.get(sct);
  var hashtable noDouble = new hashtable();
  var score = 0;
  var sumWeight = 0;
  for(var elt in inf.children where acp_pjs_HasBeenScored(elt, current_scorecard)) {
    var sub = info.get(elt);
    if(noDouble.get(elt) == undefined && sub.evaluatedFilter == true){
      score += scoringMod.scorecardScoreCustoCompute(elt, info, user, correction, multi_user, average, strategy, _this, current_scorecard, lvl1sct) * sub.weightStrategy;
      sumWeight += sub.weightStrategy;
      noDouble.set(elt,true);
    }
  }
  if(score instanceof number){
    if(sumweight!=0){
      score = score/sumWeight;
      return score;
    }
  }
  return 0;
}

_AcpScoring.acp_pjs_computePrepareTheFuture

function acp_pjs_computePrepareTheFuture(plc._SCA_PT_SCT sct, info, user, correction, multi_user, average, strategy, _this, current_scorecard, lvl1sct){
  var MaxValue = acp_pjs_computeMax_scoredOnly(sct, info, user, correction, multi_user, average, strategy, _this, current_scorecard, lvl1sct);
  var inf = info.get(sct);
  var hashtable noDouble = new hashtable();
  var NbrMax = 0;
  var NbrMax_1 = 0;
  var NbNotEmpty = 0;
  for(var elt in inf.children where acp_pjs_HasBeenScored(elt, current_scorecard)) {
    var sub = info.get(elt);
    if(noDouble.get(elt) == undefined && sub.evaluatedFilter == true){
      NbNotEmpty++;
      var score = scoringMod.scorecardScoreCustoCompute(elt, info, user, correction, multi_user, average, strategy, _this, current_scorecard, lvl1sct) * sub.weightStrategy;
      if (score == MaxValue) NbrMax++;
	  else if (score == MaxValue - 1) NbrMax_1++;
      noDouble.set(elt,true);
    }
  }
  if (NbNotEmpty == 0) return 0;
  else if (NbrMax > 1 || MaxValue == -1) return MaxValue;
  else if (NbrMax_1 < 2) return MaxValue - 1;
  else return MaxValue - 0.5;
}

function acp_sca_get_sct_level1(sct){
  if (sct instanceOf plc._SCA_PT_SCT){
    if (sct.Parent== plc._SCA_PT_SCT.getdefaultnode()){
      return sct;
    }
    else {
      return acp_sca_get_sct_level1(sct.Parent);
    }
  } else {
    return undefined;
  }
}

method acp_sca_get_top_parent on plc._SCA_PT_SCT(){
  if(this instanceof  plc._SCA_PT_SCT){
    if(this.level <= 1)	return this;
    var parent = this.parent;
    var safeguard = 100;
    while(parent.level > 1 && safeguard > 0){
      parent = parent.parent;
      safeguard--;
    }
    return parent;
  }
  return false;
}

function Getscorecard(project,sct){
  var result = new vector();
  var onb = project.onb;
  if(onb Instanceof Number && sct instanceof plc._SCA_PT_SCT){
    var value = math.round(onb);
    var key = new keyattribute("Opx_SCA_PT_SCA","_SCA_AA_N_OBJECT_ONB",value);
    var parent = sct.acp_sca_get_top_parent();

    with(key.fromobject()){
      for(var scorecard in plc._SCA_PT_SCA where scorecard._SCA_AA_N_OBJECT_ONB == value){
        if((project instanceof plc.Project && project == scorecard.PROJECT) ||
           scorecard.PROJECT == project.PROJECT || (!(scorecard.PROJECT instanceof plc.ordo_project))){
          result.push(scorecard);
        }
      }
    }
    key.delete();
  }
  if(result.length == 0){
    return false;
  }else if(result.length > 1){
    // Sort scorecards on timestamp
    result.sort(">",plw.sca_Scorecard_Timestamp_Accessor);
  }
  return result.pop();
}

function acp_sca_get_corrected_score_value(project, sct){
  var sca = Getscorecard(project,sct);
  if(sca InstanceOf plc._SCA_PT_SCA && sct InstanceOf plc._SCA_PT_SCT){
    with(project.fromobject()){
      for(var x in sca.get("r._SCA_RA_SCC_SCA._SCA_PT_SCC") where x._SCA_RA_SCC_SCT == sct && x._SCA_AA_B_DELETED == false order by [['INVERSE','ONB']]){
        var res = x._SCA_AA_N_VALUE;
        if(res InstanceOf Number){
          return res;
        }
      }
    }
  }

  return 0;
}

function acp_sca_corrected_score_modifier_with_args(project,sct,value){
  // check if  score correction is enabled
  var ancestor_sct = acp_sca_get_sct_level1(sct);
  // return;
  var sca = Getscorecard(project,sct);

  if (!(sca instanceof plc._SCA_PT_SCA)){
    plw.alert("Impossible to correct a project that has no score");
    return true;
  }

  if(ancestor_sct._SCA_AA_B_SCO_CORRECTION){
    // we don't create the corrected score on the current scorecard only,
    // but on all scorecards of the object because in case of simulateneous scorecard creation on various clusters
    var corrected_score = acp_sca_get_corrected_score_value(project,sct);

    if(value InstanceOf Number){
      if(value !=0){
        if(!(corrected_score InstanceOf plc._SCA_PT_SCC)){
            //we have to input a new value, no corrected score exist
            corrected_score = new plc._SCA_PT_SCC(FILE : sca.file,_SCA_RA_SCC_SCA: sca, _SCA_RA_SCC_SCT : sct,_SCA_AA_N_VALUE :value);
            if(corrected_score InstanceOf plc._SCA_PT_SCC){
              corrected_score.positiveonb();
            }else{
              plw.alert(plw.write_text_key("sca.alert.sco.CreationProblem"));
            }
          }else{
          //we have to input a new value, but a corrected score already exist
          corrected_score._SCA_AA_N_VALUE = value;
        }
      }else{
        //we have to reset a value
        //for the moment we never delete a score
        if(corrected_score InstanceOf plc._SCA_PT_SCC){
          corrected_score._SCA_AA_N_VALUE = 0;
          //corrected_score.delete();
        }
      }
    }
  }
}

function acp_corrected_score_locker(sct){
  if(context.callbooleanformula("USER_IN_GROUP($CURRENT_USER,\"" + sct._SCA_DA_CORRECTION_SCORING_USER_GROUP + "\")")) return false;
  return true;
}

function acp_GenerateScoreCardValidationAttribute(ScoTemplate){
  if (ScoTemplate.level>=2)
  {
      plw.writetolog("Generating scorecard validation attribute ~a".format(ScoTemplate.printattribute("ID")));
      var ScoreValidationAttributeName = "ACP_DA_N_"+ScoTemplate.printattribute("NAME")+ "_CORRECTED_SCORE";
      var  ScoreValidationAttributeSlot = plc.ordoproject.getslot(ScoreValidationAttributeName);
      if (!(ScoreValidationAttributeSlot instanceof ObjectAttribute)){
        ScoreValidationAttributeSlot = new ObjectAttribute(plc.ordoproject,ScoreValidationAttributeName,"Number");
      }
      ScoreValidationAttributeSlot.reader = function () {return acp_sca_get_corrected_score_value(this, ScoTemplate);};
      ScoreValidationAttributeSlot.modifier = function (val) {return acp_sca_corrected_score_modifier_with_args(this, ScoTemplate,val);};
      ScoreValidationAttributeSlot.locker = function () {return acp_corrected_score_locker(ScoTemplate);};
      ScoreValidationAttributeSlot.comment =  ScoTemplate.desc + " (corrected)"; 
      ScoreValidationAttributeSlot.hiddenInIntranetServer = false;
  }
  // add dyn field with ONB for PEX Portfolio Scoring validation (as standard fields)
  if (ScoTemplate.level<=2)
  {
      var ScoreValidationAttributeNameONB = "ACP_DA_N_"+"PRINT_NUMBER".callmacro(ScoTemplate.ONB,"####")+ "_CORRECTED_SCORE";
      var  ScoreValidationAttributeSlotonb = plc.ordoproject.getslot(ScoreValidationAttributeNameONB);
      if (!(ScoreValidationAttributeSlotonb instanceof ObjectAttribute)){
        ScoreValidationAttributeSlotonb = new ObjectAttribute(plc.ordoproject,ScoreValidationAttributeNameONB,"Number");
      }
      ScoreValidationAttributeSlotonb.reader = function () {return acp_sca_get_corrected_score_value(this, ScoTemplate);};
      ScoreValidationAttributeSlotonb.modifier = function (val) {return acp_sca_corrected_score_modifier_with_args(this, ScoTemplate,val);};
      ScoreValidationAttributeSlotonb.locker = function () {return acp_corrected_score_locker(ScoTemplate);};
      ScoreValidationAttributeSlotonb.comment =  ScoTemplate.desc + " ( corrected )"; 
      ScoreValidationAttributeSlotonb.hiddenInIntranetServer = true;
  }
}

function to generate dynamic corrected score at object level (to be evaluated on start)

function acp_sca_create_object_corrected_score_field(){
	for(var sct in plc._SCA_PT_SCT where sct._SCA_NF_B_ACTIVE){
		var obj = sct;
		if (obj.level != 1) obj = obj.acp_sca_get_top_parent();
		var ClassName = obj.get("_SCA_AA_S_OBJECT_CLASS");
		if(ClassName instanceof string && ClassName != ""){
			var clName = "Opx" + ClassName;
			var cl = clName.findclass();
			if(cl instanceof objectClass && sct.ACP_UA_SCA_B_CREATE_CORRECTED_SCORE_AT){
				//Slot named by name and with a smart reader when several template have the same name
				acp_sca_create_an_object_corrected_score_field_name_based(sct,clName);
			}
		}
	}
}

function acp_sca_get_scorecard_field_user_consolidated_score(scorecard, field){
  if(scorecard InstanceOf plc._SCA_PT_SCA && field InstanceOf plc._SCA_PT_SCT){
		var ancestor_sct = acp_sca_get_sct_level1(field);
		var multi_user = true;
		if (ancestor_sct._SCA_AA_B_MONO_USER) multi_user = false;
    
		var result = acp_sca_compute_scorecard_field_user_consolidated_score(scorecard, field, true);
		if(result) return result;
		return 0;
	}
}

function acp_sca_compute_scorecard_field_user_consolidated_score(current_scorecard, field, correction){
	if(current_scorecard instanceof plc._SCA_PT_SCA && current_scorecard._SCA_RA_SCA_SCT instanceof plc._SCA_PT_SCT && current_scorecard._SCA_RA_SCA_SCT.level > 0 &&
		field InstanceOf plc._SCA_PT_SCT){
		var lvl1sct = acp_sca_get_sct_level1(field);
		if(lvl1sct instanceof plc._SCA_PT_SCT){
			// check if a corrected score exists
			if(correction){
				var corrected_score = acp_sca_get_corrected_score_value(current_scorecard, field);
				if(corrected_score){
					return corrected_score;
				}
			}
		}
	}
}

function acp_sca_object_score_reader_name_based(sct_vector){
	if(this != undefined && sct_vector instanceof vector){
		var sctValid = undefined;
		//Looking for applicable max priority scorecard template
		sctValid = acp_sca_return_applicable_max_prio_sct(this,sct_vector);

		if(sctValid instanceof plc._SCA_PT_SCT){//A valid scorecard template is applicable
			// compute the score for this scorecard template
			var scalist = acp_sca_get_scorecard_from_object_and_sct(this,sctValid);
			if(scalist instanceof Vector && scalist.length>0){
				var sca = scalist[0];
				if(sca instanceof plc._SCA_PT_SCA){
					var result = acp_sca_get_scorecard_field_user_consolidated_score(sca, sctValid);
					if(result) return result;
				}
			}
		}
	}
	return 0;
}

function acp_sca_object_score_modifier_name_based(value, sct_vector){
// plw.alert("modifier");
// plw.alert("this:" + this);
// plw.alert("sct_vector: " + sct_vector);
// plw.alert("value:" + value);
	if(this != undefined && sct_vector instanceof vector){
// plw.alert("suite");
		var sctValid = undefined;
		//Looking for applicable max priority scorecard template
		sctValid = acp_sca_return_applicable_max_prio_sct(this,sct_vector);

		if(sctValid instanceof plc._SCA_PT_SCT){//A valid scorecard template is applicable
			// compute the score for this scorecard template
			var scalist = acp_sca_get_scorecard_from_object_and_sct(this,sctValid);
			if(scalist instanceof Vector && scalist.length>0){
				var sca = scalist[0];
				if(sca instanceof plc._SCA_PT_SCA){
// plw.alert("des questions?");
					var result = acp_sca_corrected_score_modifier_with_args(sca, sctValid, value);
					if(result) return result;
				}
			}
		}
	}
	return 0;
}

function acp_sca_corrected_score_modifier_with_args(sca, sct, value){
	// plw.alert("value:" + value);
	// check if  score correction is enabled
	var ancestor_sct = acp_sca_get_sct_level1(sct);
	if(ancestor_sct._SCA_AA_B_SCO_CORRECTION){
		// we don't create the corrected score on the current scorecard only,
		// but on all scorecards of the object because in case of simulateneous scorecard creation on various clusters
		var corrected_score = acp_sca_get_corrected_score(sca,sct);
		if(value InstanceOf Number){
			if(value !=0){
				if(!(corrected_score InstanceOf plc._SCA_PT_SCC)){
					// plw.alert("cas 1");
					//we have to input a new value, no corrected score exist
					corrected_score = new plc._SCA_PT_SCC(FILE:sca.file,_SCA_RA_SCC_SCA:sca,_SCA_RA_SCC_SCT:sct,_SCA_AA_N_VALUE:value);
					if(corrected_score InstanceOf plc._SCA_PT_SCC){
						corrected_score.positiveonb();
					}else{
						plw.alert(write_text_key("sca.alert.sco.CreationProblem"));
					}
				}else{
					//we have to input a new value, but a corrected score already exist
					// plw.alert("cas 2");
					corrected_score._SCA_AA_N_VALUE = value;
				}
			}else{
				// plw.alert("cas 3");
				//we have to reset a value
				//for the moment we never delete a score
				if(corrected_score InstanceOf plc._SCA_PT_SCC){
					corrected_score._SCA_AA_N_VALUE = 0;
					//corrected_score.delete();
				}
			}
		}
	}
}

function acp_corrected_score_locker(sct){
	if(context.callbooleanformula("USER_IN_GROUP($CURRENT_USER,\"" + sct._SCA_DA_CORRECTION_SCORING_USER_GROUP + "\")")) return false;
	return true;
}

function acp_sca_create_an_object_corrected_score_field_name_based(sct,clName){
	var cl = clName.findclass();
	var slotName = sct.acp_sca_js_get_corrected_score_attribute_name_name_based();
	//writetolog("slotName : " + slotName);
	var slot = clName.findclass().getslotbyid(slotName);
	if(slot == undefined) slot = new ObjectAttribute (cl,slotName,"NUMBER");
	if(slot != undefined){
		with(plw.no_locking){
			var ScorecardForPlist = acp_sca_add_sct_to_slot_plist(slot,sct);//return the plist of sct applicable to slot
			var field_desc = sct.acp_sca_get_field_desc();
			slot.comment=field_desc;
			//slot.slot_setcategory(get_text_key_message_string("sca.sco.score"));
			slot.reader = undefined;
			slot.reader = acp_sca_object_score_reader_name_based.closure(ScorecardForPlist);
			slot.locker = undefined;
			slot.locker = acp_corrected_score_locker.closure(sct);
			slot.modifier = undefined;
			slot.modifier = acp_sca_object_score_modifier_name_based.closure(ScorecardForPlist);
			slot.setCacheOnReader();
			var hidden = true;
			if (context._INF_AA_B_SCORECARDS_MODULE) hidden = sct._SCA_AA_B_HIDDEN_FIELDS;
			slot.hiddenInIntranetServer = hidden;
			acp_sca_manage_Activity_SubClass_slot(cl,slotName,hidden);
		}
	}
}

method acp_sca_js_get_corrected_score_attribute_name_name_based on plc._SCA_PT_SCT(){
	var name = acp_GenerateDynamicFieldName(this.name);
	if(name.length>64) name = name.substring(0,63);
	return "_SCA_DA_N_" + name + "_CORRECTED_SCORE";
}

**********************************************************************************************
following functions created only because of standard ones generate "not published in API" issue
**********************************************************************************************

method acp_sca_get_field_desc on plc._SCA_PT_SCT(){
	if(this instanceof plc._SCA_PT_SCT){
		var desc = this.desc;
		var textKeyDesc = this.getinternalvalue("DESC");
		if(textKeyDesc instanceof symbol){
			if(plc.Message.get(textKeyDesc.tostring()) instanceof plc.message){
				desc = get_text_key_message_string(textKeyDesc.tostring());
			}
		}
		return desc + " (corrected)";
	}
	return false;
}

function acp_GenerateDynamicFieldName(fieldName) {
	if (fieldName InstanceOf string) {
		// Non vide
		if ( fieldName.length < 1) return "NO_NAME";
		// Champs qui commencent par un nombre interdits dans plw
		if ( fieldName.parsenumber("####",0,1) instanceof Number) fieldName = "_" + fieldName;
		var re = new regexp("[^a-zA-Z0-9]");
		fieldName = re.regreplace(fieldName , "_");
		fieldName = fieldName.ToUppercase().substring(0,79);
	}
	return fieldName;
}

function acp_sca_add_sct_to_slot_plist(slot,sct){
  //Add sct to slot plist - return the plist of sct applicable to slot
  var PlistId = new symbol ("_SCA_SCORECARD_TEMPLATE","KEYWORD");
  var ScorecardForPlist = undefined;
  if(slot.plist == false){
    ScorecardForPlist = new vector (PlistId,new vector(sct));
    ScorecardForPlist = ScorecardForPlist.parselist();
    slot.plist = ScorecardForPlist;
  } else {
    ScorecardForPlist = slot.getPlist(PlistId);
    if(ScorecardForPlist instanceof vector){
      //SCORECARD-TEMPLATE stored in slot plist
      if (ScorecardForPlist.position(sct)==undefined){
        ScorecardForPlist.push(sct);
        slot.setPlist(PlistId,ScorecardForPlist);
      }
    } else {
      //SCORECARD-TEMPLATE not present in slot plist
      ScorecardForPlist = new vector(sct);
      slot.plist.push(PlistId);
      slot.plist.push(ScorecardForPlist);
    }
  }
  return ScorecardForPlist;
}

function acp_sca_manage_Activity_SubClass_slot(actClass,slotName,hidden){
  if(actClass.findclass()=="OpxActivity".findclass()){
    var subClasses = new vector("OpxWbsElement","OpxTask");
    for (var vclass in subClasses){
      var slot2 = vclass.getslotbyid(slotName);
      if(slot2 instanceof ObjectAttribute){
        slot2.hiddenInIntranetServer = hidden;
      }
    }
  }
}

function acp_sca_return_applicable_max_prio_sct(object,sct_vector){
  var sctValid = undefined;
  var cacheKey = "sca_return_applicable_max_prio_sct" + this.toString() + object.toString()+ sct_vector.toString();
  var AlreadyDone= plw.getTemporaryObject(cacheKey);
  if (AlreadyDone==undefined) {
    //Looking for applicable max priority scorecard template
    var applicables_sct = acp_sca_get_all_templates(object,true);
    if(applicables_sct instanceof vector && applicables_sct.length>0){
      //writetolog("applicables_sct : " + applicables_sct + " object : " + object);
      //limit to scored template
      var limitList = acp_sca_return_scored_sct(object,applicables_sct);
      if(limitList instanceof vector && limitList.length>0){
        sctValid = acp_sca_return_sctlvl1Template(sct_vector,limitList);
      }
      if(sctValid==undefined){
        sctValid = acp_sca_return_sctlvl1Template(sct_vector,applicables_sct);
      }
      if(sctValid!=undefined){
        var result = new vector(sctValid);
        result.storeTemporaryObject(cacheKey);
      }
    }
  } else {
    if(AlreadyDone instanceof vector){
      if(AlreadyDone[0] instanceof plc._SCA_PT_SCT){
        sctValid = AlreadyDone[0];
      }
    }
  }
  return sctValid;
}

function acp_sca_get_scorecard_from_object_and_sct(obj,sct){
  // Sorted in the timestamp (unique) order, the last one (chronologically) is the first element [0] of the list
  var result = new vector();
  var onb = obj.onb;

  if(onb Instanceof Number && sct instanceof plc._SCA_PT_SCT){
    var value = math.round(onb);
    var key = new keyattribute("Opx_SCA_PT_SCA","_SCA_AA_N_OBJECT_ONB",value);
    var parent = sct.acp_sca_get_top_parent();

    with(key.fromobject()){
      for(var scorecard in plc._SCA_PT_SCA where scorecard._SCA_AA_N_OBJECT_ONB == value){
        if((obj instanceof plc.Project && obj == scorecard.PROJECT) ||
           scorecard.PROJECT == obj.PROJECT || (!(scorecard.PROJECT instanceof plc.Project))){
          result.push(scorecard);
        }
      }
    }
    key.delete();
  }
  if(result.length == 0){
    return false;
  }else if(result.length > 1){
    // Sort scorecards on timestamp
    result.sort(">",plw.sca_Scorecard_Timestamp_Accessor);
  }
  return result;
}

function acp_sca_get_sct_level1(sct){
  if (sct instanceOf plc._SCA_PT_SCT){
    if (sct.Parent== plc._SCA_PT_SCT.getdefaultnode()){
      return sct;
    }
    else {
      return acp_sca_get_sct_level1(sct.Parent);
    }
  } else {
    return undefined;
  }
}

function acp_sca_get_corrected_score(sca, sct){
  if(sca InstanceOf plc._SCA_PT_SCA && sct InstanceOf plc._SCA_PT_SCT){
    for(var x in sca.r__sca_ra_scc_sca__sca_pt_scc where x._SCA_RA_SCC_SCT == sct && x._SCA_AA_B_DELETED == false order by [["INVERSE","ONB"]]){
      return x;
    }
  }
  return false;
}

function acp_sca_get_corrected_score_value(sca, sct){
  if(sca InstanceOf plc._SCA_PT_SCA && sct InstanceOf plc._SCA_PT_SCT){
    for(var x in sca.r__sca_ra_scc_sca__sca_pt_scc where x._SCA_RA_SCC_SCT == sct && x._SCA_AA_B_DELETED == false order by [["INVERSE","ONB"]]){
      var res = x._SCA_AA_N_VALUE;
      if(res InstanceOf Number){
        return res;
      }
    }
  }
  return false;
}

function acp_sca_get_all_templates(o_object,filter){
  var v_result = new Vector();
  var o_objectclass = o_object.findclass();
  if(o_objectclass instanceof objectclass){
    with(false.fromobject()){
      // we take only the elements having the selected class and complying with the associated filter (ex : gate 2 only)
      for(var o_template in plc._SCA_PT_SCT
            where o_template.level == 1 && o_template._SCA_NF_B_ACTIVE
            order by ["_SCA_AA_N_PRIORITY","NAME","OBJECT-NUMBER"]){
        var o_templateClassName = "Opx" + o_template.get("_SCA_AA_S_OBJECT_CLASS");
        var o_templateClass = o_templateClassName.findclass();
        if(o_templateClass instanceof objectclass &&
           o_objectclass.InheritFrom(o_templateClass)){
          if((!(filter)) || o_object.CallBooleanFormula(o_template._SCA_AA_S_FILTER)){
            v_result.push(o_template);
          }
        }
      }
    }
    if(v_result.length>0){
      v_result.sort("sca_templates_sort");
      return v_result;
    }
  }
  return false;
}

function acp_sca_return_scored_sct(object,sct_vector){
  var sctVect = new vector();
  var thisString = this.toString();
  var ObjString = (this == object) ? thisString : object.toString();
  var cacheKey = "sca_return_scored_sct" + thisString + ObjString + sct_vector.toString();
  var AlreadyDone= plw.getTemporaryObject(cacheKey);
  if (AlreadyDone==undefined) {
    for(var sct in sct_vector){
      var sca = acp_sca_get_scorecard_from_object_and_sct(object,sct);
      if(sca instanceof vector){
        sca = sca[0];
      }
      if(sca instanceof plc._SCA_PT_SCA){
        var test = false;
        //at least one score exist
        for(var score in sca.get(new symbol("r._SCA_RA_SCO_SCA._SCA_PT_SCO", "KEYWORD")) where score._SCA_RA_SCO_SCT.acp_sca_get_top_parent() == sct) {
          if(score._SCA_AA_B_DELETED == false && (score._SCA_RA_SCO_USER != "" || sct._SCA_AA_B_MONO_USER)){
            test = true;
            break;
          }
        }
        if(test){
          sctVect.push(sct);
        }
      }
    }
    sctVect.storeTemporaryObject(cacheKey);
  } else {
    if(AlreadyDone instanceof vector){
      sctVect = AlreadyDone;
    }
  }
  return sctVect;
}

function acp_sca_return_sctlvl1Template(sct_vector,applicables_sct){
  var sctValid = undefined;
  for(var sctLevel1 in applicables_sct){
    //the last applicables_sct is the one with the priority with the smaller number so the higher priority.
    //so we parse all the applicables_sct to have the higher priority at last
    for(var sct in sct_vector){
      if(sct instanceof plc._SCA_PT_SCT){
        if(sct==sctLevel1 || sct.ischildof(sctLevel1)){
          //writetolog("sctLevel1 : " + sctLevel1 + " " + sctLevel1._SCA_AA_N_PRIORITY);
          sctValid = sct;
          break;
        }
      }
    }
  }
  return sctValid;
}

method acp_sca_get_top_parent on plc._SCA_PT_SCT(){
  if(this instanceof  plc._SCA_PT_SCT){
    if(this.level <= 1)	return this;
    var parent = this.parent;
    var safeguard = 100;
    while(parent.level > 1 && safeguard > 0){
      parent = parent.parent;
      safeguard--;
    }
    return parent;
  }
  return false;
}

function GetCurrentSelection(){
  var vSelection = [];
  if (context.ACP_UA_S_TAG_CURRENT_OBJECT != "" && context.ACP_UA_S_TAG_CLASS_NAME != "" ){
    var obj = plc.get(context.ACP_UA_S_TAG_CLASS_NAME).get(context.ACP_UA_S_TAG_CURRENT_OBJECT);
    if (obj != undefined) vSelection.push(obj);
  } else{
    for (var obj in plw.selection_get()){
        vSelection.push(obj);
    }
	if (vSelection.length == 0){ // case for line number in pex
		for (var ctobj in  plw.selection_get() where ctobj.TIME_SYNTHESIS instanceof plc.TIME_SYNTHESIS){
			var ts = ctobj.TIME_SYNTHESIS;
			vSelection.push(ts._inf_ra_cbs3);
		}
	}
  }
  return vSelection;
}

function GetCurrentSelection(){
var vSelection = [];
if (context.ACP_UA_S_TAG_CURRENT_OBJECT != "" && context.ACP_UA_S_TAG_CLASS_NAME != "" ){
var obj = plc.get(context.ACP_UA_S_TAG_CLASS_NAME).get(context.ACP_UA_S_TAG_CURRENT_OBJECT);
if (obj != undefined) vSelection.push(obj);
} else{
for (var obj in plw.selection_get()){
vSelection.push(obj);
}
if (vSelection.length == 0){ // case for line number in pex
for (var ctobj in  plw.selection_get() where ctobj.TIME_SYNTHESIS instanceof plc.TIME_SYNTHESIS){
var ts = ctobj.TIME_SYNTHESIS;
vSelection.push(ts._inf_ra_cbs3);
}
}
}
return vSelection;
}

function GetCurrentSelection(){
  var vSelection = [];
  if (context.ACP_UA_S_TAG_CURRENT_OBJECT != "" && context.ACP_UA_S_TAG_CLASS_NAME != "" ){
    var obj = plc.get(context.ACP_UA_S_TAG_CLASS_NAME).get(context.ACP_UA_S_TAG_CURRENT_OBJECT);
    if (obj != undefined) vSelection.push(obj);
  } else{
    for (var ctobj in  plw.selection_get() where ctobj.get("TIME_SYNTHESIS") instanceof plc.TIME_SYNTHESIS){ // case for line number in pex
      var ts = ctobj.TIME_SYNTHESIS;
      vSelection.push(ts._inf_ra_cbs3);
    }
    if (vSelection.length != 0) return vSelection;

    for (var obj in plw.selection_get()){
        vSelection.push(obj);
    }
  }
  return vSelection;
}

function UpdateHistory(className,tag_onb){
  var CurrentUserParameter = "ACP_UP_LAST_USED_TAG_~a".format(className);
  var CurrentUserParameterValue = plw.GetUserParameter(CurrentUserParameter);
  if (CurrentUserParameterValue == undefined ||CurrentUserParameterValue == ""){
     plw.SetUserParameter(CurrentUserParameter,tag_onb);
  }else{
    var newValue = CurrentUserParameterValue + "," + tag_onb;
    var VnewValue = newValue.parsevector().removeduplicates().reverse();
    var vLatest = [];
    if (VnewValue.length >= 8){
      vLatest.push(VnewValue[7]);
      vLatest.push(VnewValue[6]);
      vLatest.push(VnewValue[5]);
      vLatest.push(VnewValue[4]);
      vLatest.push(VnewValue[3]);
      vLatest.push(VnewValue[2]);
      vLatest.push(VnewValue[1]);
      vLatest.push(VnewValue[0]);
    } else{
      vLatest = VnewValue;
    }
    plw.SetUserParameter(CurrentUserParameter,vLatest.join(","));
  }
}

function additional_tag(tag,className){
  var vSelection = GetCurrentSelection();
  for (var object in vSelection){
    // var ObjectsTags = object.ACP_UA_S_FREE_TAG.parsevector(",");
    var ObjectsTags = object.ACP_UR_FREE_TAGS.parsevector(",");
    // ObjectsTags.push(tag.onb.toString());
    // ObjectsTags.push(tag.NAME);
    ObjectsTags.push(tag.printattribute());
    // object.set("ACP_UA_S_FREE_TAG",ObjectsTags.removeduplicates().join(","));
    object.set("ACP_UR_FREE_TAGS",ObjectsTags.removeduplicates().join(","));
  }
//   UpdateHistory(className,tag.onb.toString());
  UpdateHistory(className,tag.onb.toString());
}

function new_tag(editor,className){
  this.editor.apply();
  var value = this.editor.object.ACP_UA_S_ENTER_TAG;
  if (value == "") return true;
  var New_Tag;

  // for (var tagAdmin in plc.__USER_TABLE_ACP_UT_TAGS_FREE where tagAdmin.printattribute("ID") == value 
  for (var tagAdmin in plc.__USER_TABLE_ACP_UT_TAGS_FREE where tagAdmin.printattribute("DESC") == value 
                                             && tagAdmin.ACP_UA_S_CLASS_NAME == className) {
    New_Tag = tagAdmin;
  }
  if (!(New_Tag instanceof plc.__USER_TABLE_ACP_UT_TAGS_FREE)){
    New_Tag = new plc.__USER_TABLE_ACP_UT_TAGS_FREE(Name : value
                                                   ,ACP_UA_S_CLASS_NAME :  className
                                                   // ,ACP_UA_S_COLOR_CODE :  "OBJ33"
                                                   ,ACP_UA_S_COLOR_CODE :  context.ACP_UA_S_TAG_COLOR
                                                  // ,File :  context._ADM_SET_PREFERENCE_FILE
                                                   ,FILE : context.ACP_GS_TAG_FILE
                                                   ,DESC :  value);
    New_Tag.positiveonb();
  }
//   var vSelection = GetCurrentSelection();
//   for (var object in vSelection){
//       var ObjectsTags = object.ACP_UA_S_FREE_TAG.parsevector(",");
//       ObjectsTags.push(New_Tag.onb.toString());
//       object.set("ACP_UA_S_FREE_TAG",ObjectsTags.removeduplicates().join(","));
//       // object.set("ACP_UA_S_FREE_TAG",ObjectsTags.join(",")); // doesn't seem to be necessary
//   }
//   UpdateHistory(className,New_Tag.onb.toString());
    additional_tag(New_Tag,className);
   this.editor.object.ACP_UA_S_ENTER_TAG = "";
   this.editor.refresh();
}

function RemoveTagFromSelection( tagObject ){
  var vSelection = GetCurrentSelection();
    for (var object in vSelection){
        // var ObjectsTags = object.ACP_UA_S_FREE_TAG.parsevector(",").remove(tagObject.onb.toString());
        var ObjectsTags = object.ACP_UR_FREE_TAGS.parsevector(",").remove(tagObject.printattribute());
        object.set("ACP_UR_FREE_TAGS",ObjectsTags.join(","));
    }
}

function html_tag(value){
// function html_tag(vTags){
  var result = "<html>";
  var vTags = value.parsevector(",");
  for (var elt in vTags){
    //   var objectTag = plc.__USER_TABLE_ACP_UT_TAGS_FREE.get(elt.parsenumber());
      var objectTag = plc.__USER_TABLE_ACP_UT_TAGS_FREE.get(elt);
      if (!(objectTag == undefined)){
        // if (!(elt == undefined)){
            // result += "<span style=\"color: #fff; background: " +plw.color_htmlTruecolor(plw.color(objectTag.ACP_UA_S_COLOR_CODE)) + "; width: 100px; padding: 1px 5px; font-weight: bold; -webkit-border-radius: 30px;\">"+ objectTag.printattribute("ID") +"</span> ";
            result += "<span style=\"color: #fff; background: " +plw.color_htmlTruecolor(plw.color(objectTag.ACP_UA_S_COLOR_CODE)) + "; width: 100px; padding: 1px 5px; font-weight: bold; -webkit-border-radius: 30px;\">"+ objectTag.printattribute("DESC") +"</span> ";
            // result += "<span style=\"color: #fff; background: " +plw.color_htmlTruecolor(plw.color(elt.ACP_UA_S_COLOR_CODE)) + "; width: 100px; padding: 1px 5px; font-weight: bold; -webkit-border-radius: 30px;\">"+ elt.printattribute("ID") +"</span> ";
      }
  }
  result+="</html>";
  return result;
}

function tag_no_html(value){
    var result = [];
    var vTags = value.parsevector(",");
// function tag_no_html(vTags){
    var result = [];
    for (var elt in vTags){
        // var objectTag = plc.__USER_TABLE_ACP_UT_TAGS_FREE.get(elt.parsenumber());
        var objectTag = plc.__USER_TABLE_ACP_UT_TAGS_FREE.get(elt);
    if (!(objectTag == undefined)){
        // if (!(elt == undefined)){
        // result.push(objectTag.printattribute("ID"));
        result.push(objectTag.printattribute("DESC"));
            // result.push(elt.printattribute("ID"));
        }
    }
    return result.join(",");
}

function FavoriteTags(f){
  var classname = context.ACP_UA_S_TAG_CLASS_NAME; 
  var CurrentUserParameter = "ACP_UP_LAST_USED_TAG_~a".format(className);
  var CurrentUserParameterValue = plw.GetUserParameter(CurrentUserParameter);
  for (var tag in CurrentUserParameterValue.parsevector(",")){
    if (plc.__USER_TABLE_ACP_UT_TAGS_FREE.get(tag.parsenumber()) instanceof plc.__USER_TABLE_ACP_UT_TAGS_FREE){
        f.call(plc.__USER_TABLE_ACP_UT_TAGS_FREE.get(tag.parsenumber()));
    }
  }
}

function SelectedTags(f){
var vSelectedTags = [];
var vSelection = GetCurrentSelection();
 for (var object in vSelection){
  // object.ACP_UA_S_FREE_TAG.parsevector(",").map(function(){vSelectedTags.push(this);});
  object.ACP_UR_FREE_TAGS.parsevector(",").map(function(){vSelectedTags.push(this);});
 }
  for (var tag in vSelectedTags.removeduplicates()){
    // if (plc.__USER_TABLE_ACP_UT_TAGS_FREE.get(tag.parsenumber()) instanceof plc.__USER_TABLE_ACP_UT_TAGS_FREE){
    if (plc.__USER_TABLE_ACP_UT_TAGS_FREE.get(tag) instanceof plc.__USER_TABLE_ACP_UT_TAGS_FREE){
      // f.call(plc.__USER_TABLE_ACP_UT_TAGS_FREE.get(tag.parsenumber()));
      f.call(plc.__USER_TABLE_ACP_UT_TAGS_FREE.get(tag));
    }
  }
}

****************************Have the list of objects where the tag is applied********************//////////

function GetObjectsFromTag(f){
//search exact matching
plw.alert("in GetObjectsFromTag function");
var plc.__USER_TABLE_ACP_UT_TAGS_FREE o_tag = this;
var s_Target_Class = o_tag.ACP_UA_S_CLASS_NAME;
var v_keyAttributes = ["ACP_DA_T_TAG_NO_HTML"];
var v_keyValues = [o_tag.NAME];
with(new KeyAttribute(plc.archivableObject,v_keyAttributes,v_keyValues).FromObject()){
for (var obj in s_Target_Class where obj.KeyAttribute[0] == v_keyValues[0]){
f.call(obj);
}
}
}

var objectRelation TargetObjectsObjRelation = plw.getslotbyid(this : plc.__USER_TABLE_ACP_UT_TAGS_FREE,"ACP_DR_TARGET_OBJECTS");
if(! (TargetObjectsObjRelation instanceof objectRelation)) {
TargetObjectsObjRelation = new objectRelation(plc.__USER_TABLE_ACP_UT_TAGS_FREE, "ACP_DR_TARGET_OBJECTS");
}
TargetObjectsObjRelation.comment = "Target Objects";
TargetObjectsObjRelation.connectedtoclass =  plc.archivableObject;
TargetObjectsObjRelation.mapmethod = _acp_tag_management.GetObjectsFromTag;

****************************************Filter tags on object list*******************************//////////

Get all the filters currently applied in the general search

function getTagListFromFilter(){
  var v_finalFilter = new vector();
  var s_currentFilter = context._INF_DA_S_FILTER;
  if (s_currentFilter.search("[ACP_DA_T_TAG_NO_HTML=") instanceof int){
    v_finalFilter = s_currentFilter.substring(s_currentFilter.searchchar("=")+1, s_currentFilter.searchchar("]"));
    v_finalFilter = v_finalFilter.parsevector(",");
  }
  return v_finalFilter;
}

Filter object list on tags

function filterViewWithTag( tagObject, action ){
  var v_finalFilter = getTagListFromFilter();
  // depending on action, we add or remove 1 element of the filter
  if (action == "add"){
    // v_finalFilter.push(tagObject.NAME);//.removeduplicates()
    v_finalFilter.push(tagObject.DESC);//.removeduplicates()
  } else if (action == "remove"){
    // v_finalFilter.remove(tagObject.NAME);
    v_finalFilter.remove(tagObject.DESC);
  }
  // reconstruct the full filter in string
  var s_finalFullFilter = "";
  var s_finalFilter = "";
  for (var filt in v_finalFilter){
    if (s_finalFilter != "") {s_finalFilter = s_finalFilter + ",";}
    s_finalFilter = s_finalFilter + filt;
  }
  if (s_finalFilter != "") {
    s_finalFullFilter = "[ACP_DA_T_TAG_NO_HTML="+s_finalFilter+"]";
  }
  context._INF_DA_S_FILTER = s_finalFullFilter;
}

"USER_ATTRIBUTE_INVERSE_ACP_UA_RA_CCG.WORK-STRUCTURE"

function OpenTransverseSchedule(reverseRelation,className){
    var obj = this.object;
    var vActivities = [];
    var selected_portofio = context._FF_AA_S_LIST_NAME;
    if (selected_portofio == "" ){
        plw.alert("Please select a portfolio filter in the toolbar");
        return true;
    }
    with (obj.fromobject()){
       for (var obj_child in plc.get(className)){
            for (var act in obj_child.get(reverseRelation) where act instanceof plc.network ) vActivities.push(act);
        }
    }
	vActivities.recomputeCostandDate();
	var vFilteredActivities = [];

	//var formula = "FILE.PM_PRJ_FILTER AND IF (OC.GEN_CHART_DD <> -1) THEN (PF > OC.GEN_CHART_DD) ELSE TRUE FI AND IF (OC.GEN_CHART_ED <> -1) THEN (PS < OC.GEN_CHART_ED) ELSE TRUE FI ";
	var formula = "FILE.PM_PRJ_FILTER";

	for (var act in vActivities.removeduplicates() where act.callBooleanformula(formula) ){
	//	vFilteredActivities.push(act);
		
		with(act.fromobject()){
		    for (var childAct in plc.workstructure) vFilteredActivities.push(childAct);
		}
	}
   
    if (vFilteredActivities.length == 0 ){
        plw.alert("No activity found in the selected scope ~a - ~a, portfolio ~a".format(obj.name, obj.desc, selected_portofio ));
    }
    var vd = new plc.VirtualDataset();
   //  vFilteredActivities.inspect();
    vd.SELECTED_ACTIVITIES = vFilteredActivities;
    
   // vd.SELECTED_ACTIVITIES.inspect();
    //return true;
    plw._guiGoToModuleObjectAndReport("PM",vd,"","","");
    return true;
}

function _acp_js_user_deactivation(){
	var vDate = new date();
	var vSettingDuration = plc._L1_PT_SETTINGS.get("ACP_GS_DU_USER_DEACTIVATION");
	var vSettingDurationCreationDate = plc._L1_PT_SETTINGS.get("ACP_GS_DU_USER_DEACTIVATION_CREATION_DATE");
	//Loop on user to check those with a last transaction date > 180d and Creation date > 10d
	//for(var vUser in plc.opx2user where !vUser._INF_NF_B_TEMPLATE_USER && vUser.CallBooleanFormula("DIFF_DATE(LAST_TRANSACTION_DATE,'"+vDate+"','')>'180d'") 
	for(var vUser in plc.opx2user where !vUser._INF_NF_B_TEMPLATE_USER && vUser.CallBooleanFormula("DIFF_DATE(LAST_TRANSACTION_DATE,'"+vDate+"','')>'"+vSettingDuration._L1_AA_N_CUST_SETTING+"'") 
		&& vUser.CallBooleanFormula("DIFF_DATE(ACP_UA_D_USER_CREATION_DATE,'"+vDate+"','')>'"+vSettingDurationCreationDate._L1_AA_N_CUST_SETTING+"'")){
		with([plw.no_locking]){
		    //keep old value
		    vUser.ACP_UA_S_GROUP_LIST_ARCHIVE = vUser.GROUPS_LIST;
            vUser.ACP_UA_S_PORTFOLIO_READ_ARCHIVE = vUser.ACP_DA_PORTFOLIO_WP_READ;
            vUser.ACP_UA_S_PORTFOLIO_WRITE_ARCHIVE = vUser.ACP_DA_PORTFOLIO_WP_READ_WRITE;
            //clean value field
            vUser.GROUPS_LIST = "";
            vUser.ACP_DA_PORTFOLIO_WP_READ = "";
            vUser.ACP_DA_PORTFOLIO_WP_READ_WRITE = "";
            //deactivate and set the date
			vUser.INACTIVE = true;
			vUser.ACP_UA_D_DEACTIVATION_DATE = vDate;
		}
	}
}

function _acp_user_gdpr_cleaning(){
	var vDate = new date();
	var vSettingDuration = plc._L1_PT_SETTINGS.get("ACP_GS_DU_USER_GDPR_CLEANING");
	//Loop on user to check those Inactive date > 365d
	for(var vUser in plc.opx2user where vUser.get("INACTIVE") && vUser.CallBooleanFormula("DIFF_DATE(ACP_UA_D_DEACTIVATION_DATE,'"+vDate+"','')>'"+vSettingDuration._L1_AA_N_CUST_SETTING+"'")){
		with(plw.no_locking){
			vUser.DESC = "";
			vUser.EMAIL_ADDRESS = "";
			vUser._INF_DOC_USER_PHOTO = "";
		}
	}
}

method acp_pjs_portfolio_read_write_reader on plc.opx2user(field){
	var vPortoflio = this.get("USER_ATTRIBUTE_INVERSE_" + field + ".5BS");
	if (vPortoflio!= undefined){
		return vPortoflio.removeduplicates();
	}
}

method acp_pjs_portfolio_read_write_modifier on plc.opx2user(val,field){
	var vCurrentPortfolio = this.acp_pjs_portfolio_read_write_reader(field);
	var vNewPortfolio = [];
	val.parsevector(",").map(function () {vNewPortfolio.push(plc.5bs.get(this));});
	//Cleaning of portfolios
	if (vCurrentPortfolio != undefined){
		var vRemovedPortfolios = vCurrentPortfolio.difference(vNewPortfolio);
		for (var removedPortfolio in vRemovedPortfolios){
			removedPortfolio.set(field,removedPortfolio.getinternalvalue(field).remove(this));
		}
	}
	//Add new portfolios
	for (var portfolio in vNewPortfolio){
		if (portfolio!= undefined){
			var vUsers =portfolio.get(field).parsevector(",");
			vUsers.push(this.printattribute("ID"));
			portfolio.set(field,vUsers.join(","));
		}
	}
	return true;
}

function create_portfolio_slot_on_users(){
	var slot = plw.getslotbyid(this : plc.opx2user, "ACP_DA_PORTFOLIO_WP_READ_WRITE");
	  if(!(slot instanceof objectAttribute)){
	    slot = new objectAttribute(plc.opx2user, "ACP_DA_PORTFOLIO_WP_READ_WRITE", #OTHER-TREES:...5BS#);
	  }  
	  if(slot instanceof objectAttribute) {
	    slot.setPlist(#LIST-CLASS#,#OTHER-TREES:5BS#);
	    slot.comment  = "Portfolio/WP Read/Write";
	    slot.reader   = undefined;
	    slot.modifier = undefined;
	    slot.reader   = function (){return this.acp_pjs_portfolio_read_write_reader("ACP_UA_S_USER_WRITE");};
	    slot.modifier   = function (val){return this.acp_pjs_portfolio_read_write_modifier(val,"ACP_UA_S_USER_WRITE");};
	    slot.hiddeninintranetserver = false;
	    slot.length = 9999999;
	  }

	  var slot = plw.getslotbyid(this : plc.opx2user, "ACP_DA_PORTFOLIO_WP_READ");
	  if(!(slot instanceof objectAttribute)){
	    slot = new objectAttribute(plc.opx2user, "ACP_DA_PORTFOLIO_WP_READ", #OTHER-TREES:...5BS#);
	  }  
	  if(slot instanceof objectAttribute) {
	    slot.setPlist(#LIST-CLASS#,#OTHER-TREES:5BS#);
	    slot.comment  = "Portfolio/WP Read";
	    slot.reader   = undefined;
	    slot.modifier = undefined;
	    slot.reader   = function (){return this.acp_pjs_portfolio_read_write_reader("ACP_UA_S_USER_READ");};
	    slot.modifier   = function (val){return this.acp_pjs_portfolio_read_write_modifier(val,"ACP_UA_S_USER_READ");};
	    slot.hiddeninintranetserver = false;
	    slot.length = 9999999;
	  }
}

function acp_pjs_access_users (f,field) {
    var plc.ordo_project o_prj = this;
    var l_users = o_prj.get(field);
    var v_users = l_users.split(",");
    for (var s_user in v_users){
            var o_user = plc.GroupOrUser.get(s_user);
            if (o_user != undefined && o_user instanceof plc.GroupOrUser){
                f.call(o_user);
            }
        }
}

function acp_pjs_cbs_3_line_number (f) {
    var plc.workstructure o_act = this;
    var vCBS3 = [];
    for (var synt in o_act.get("TIME-SYNTS") where synt._INF_RA_CBS3 instanceof plc._INF_PT_CBS3 && !synt._INF_RA_CBS3.internal)  vCBS3.push(synt._INF_RA_CBS3);
    for (var cbs3 in vCBS3.removeduplicates()) f.call(cbs3);
    
}

function  workflow_change_next_action(){
	var Change = this;
	var vInfo = plw.wf_workflowActionAndTaskInfo(this: Change, false,false);
	var vActions  = vInfo[2];
	for (var action in vActions where Change.IsActionFeasible(action) && (action.comment == "Submit" || action.comment == "Accept")){
		return action.comment;
	}
	return "";
}

function  workflow_change_previous_action(){
	var Change = this;
	var vInfo = plw.wf_workflowActionAndTaskInfo(this: Change, false,false);
	var vActions  = vInfo[2];
	// for (var action in vActions where Change.IsActionFeasible(action) && (action.comment != "Submit" && action.comment != "Accept" && action.comment != "Refuse")){
	for (var action in vActions where Change.IsActionFeasible(action) && (action.comment.search("Back") instanceof Number)){
		return action.comment;
	}
	return "";
}

function  workflow_change_refuse_action(){
	var Change = this;
	var vInfo = plw.wf_workflowActionAndTaskInfo(this: Change, false,false);
	var vActions  = vInfo[2];
	for (var action in vActions where Change.IsActionFeasible(action) && (action.comment == "Refuse")){
		return action.comment;
	}
	return "";
}

function GoToNextWFActionPEX(){
	for (var obj in plw.selection_get()){
		var Change = (obj instanceof plc._CHG_PT_CHANGE_OF_SCOPE) ? obj : obj._CHG_PT_CHANGE_OF_SCOPE;
		var vInfo = plw.wf_workflowActionAndTaskInfo(this: Change, false,false);
		var vActions  = vInfo[2];
		for (var action in vActions where Change.IsActionFeasible(action) && (action.comment == "Submit" || action.comment == "Accept")){
			Change.PerformAction(action);
			plw.alert("Change ~a has been ~a".format(Change.name,action.comment));
		}
	}
}

function GoToSendBackWFActionPEX(){
	for (var obj in plw.selection_get()){
		var Change = (obj instanceof plc._CHG_PT_CHANGE_OF_SCOPE) ? obj : obj._CHG_PT_CHANGE_OF_SCOPE;
		var vInfo = plw.wf_workflowActionAndTaskInfo(this: Change, false,false);
		var vActions  = vInfo[2];
		for (var action in vActions where Change.IsActionFeasible(action) && (action.comment.search("Back") instanceof Number)){
			Change.PerformAction(action);
			plw.alert("Change ~a has been ~a".format(Change.name,action.comment));
		}
	}
}

function GoToRefuseWFActionPEX(){
	for (var obj in plw.selection_get()){
		var Change = (obj instanceof plc._CHG_PT_CHANGE_OF_SCOPE) ? obj : obj._CHG_PT_CHANGE_OF_SCOPE;
		var vInfo = plw.wf_workflowActionAndTaskInfo(this: Change, false,false);
		var vActions  = vInfo[2];
		for (var action in vActions where Change.IsActionFeasible(action) && (action.comment == "Refuse")){
			Change.PerformAction(action);
			plw.alert("Change ~a has been ~a".format(Change.name,action.comment));
		}
	}
}

function GoToResetActionPEX(){
    if (plw.question("Are you sure to re-initialize the selected change(s)? All the history will be lost")){	for (var obj in plw.selection_get()){
    		var Change = (obj instanceof plc._CHG_PT_CHANGE_OF_SCOPE) ? obj : obj._CHG_PT_CHANGE_OF_SCOPE;
        	if (Change.ACP_UA_S_APPLICABLE_WORKFLOW == "1 step"){	
            	with(plw.no_locking){
            		change._CHG_RA_CHANGE_STATE = "Initial";
            	}
        	}
    		else{
    		    plw.alert("Only workflow with 1 step can be re-initialized");
    		}
    		
    		
    	}
    }
}

function postscriptOBSElementImprot(){
    with([plw.no_locking,plw.no_alerts,plw.inactive_objects_displayed]){
    	var DateOfTheDay = new date();
    	var StartOfTheDay = new date(DateOfTheDay.getYear(), DateOfTheDay.Getmonth(), DateOfTheDay.Getdate());
    	for (var obs in plc.obs_node where  (obs.get("ACP_UA_S_LAST_IMPORT_DATE") instanceof Date && obs.get("ACP_UA_S_LAST_IMPORT_DATE") < StartOfTheDay) 
    									  || obs.get("ACP_UA_S_LAST_IMPORT_DATE") == -1
    									  || obs.get("ACP_UA_S_LAST_IMPORT_DATE") == undefined){
    		obs.set("INACTIVE",true);
    	}
    }
}

function  WFNotePadReader(){
	var result = "";
	var change = this;
	var pt = this.lasttransaction();
	if (!(pt instanceof plc.ProcessTransaction)) return "";
	while ( pt.previous instanceof plc.processtransaction){
		pt = pt.previous;
	}
	var comments = pt.get("r._NWF_RA_TRANSACTION._NWF_PT_COMMENTS");
	for (var message in comments order by ['_NWF_AA_D_DATE']){
		var task = message._NWF_RA_TRANSACTION.get("task");
		if (!(task instanceof plc.Process_task)) return "";
		var status =  task.get("description");
		result += "-----------" + plw.char(10);
		result += message._NWF_AA_S_AUTHOR.tostring() + " - " + message._NWF_AA_D_DATE ;
		result += message.richtext("_NWF_AA_T_COMMENT");
		result += plw.char(10);
	}
	
	return result;
}

Allowed to comment workflows on activities

method overwriteCommentRights on plc.workstructure(plc.opx2user user, plc.processtransaction processtransaction) {
  return true;
}

function open_change_of_scope_on_selection(){
	var selected_expenditure = [];
	var vChanges = [];
	for (var ctobj in  plw.selection_get() where ctobj.TIME_SYNTHESIS instanceof plc.TIME_SYNTHESIS){
		var ts = ctobj.TIME_SYNTHESIS;
		for (var pe in ts.get("RELATION-EXPENDITURE")){
			selected_expenditure.push(pe);
			vChanges.push(pe._CHG_RA_CHANGE_OF_SCOPE);
		}
	}
	//Open change dialog only if pe is linked to a change
	for (var change in vChanges.removeduplicates()){
		if(change.internal == false){
		//	change.editobject("_CHG_POPUP_CREATE_CHANGE");
			
			  
            var o_Change_link = new hyperlink("Fvalue",
            				 "Attribute",
            				 "ID",
            				 "Editortype",
            				 "_CHG_POPUP_CREATE_CHANGE",
            				 "popup",
            				 false);	
            o_Change_link.go(change);


		}else{
			plw.alert("The selected expenditure is not linked to a change");
		}
	}
}

function attached_expenditure_to_change_of_scope(){
	var change = plc._CHG_PT_CHANGE_OF_SCOPE.get(context.ACP_UA_S_CHANGE_OF_SCOPE);
	with([plw.no_locking,plw.no_alerts]){
		for (var ctobj in  plw.selection_get() where ctobj.TIME_SYNTHESIS instanceof plc.TIME_SYNTHESIS){
		var ts = ctobj.TIME_SYNTHESIS;
			for (var pe in ts.get("RELATION-EXPENDITURE")){
				pe._CHG_RA_CHANGE_OF_SCOPE = change;
				pe.type = change._CHG_RA_CHANGE_STATE._CHG_ST_AA_S_EXP_DESC;
			}
		}
	}
}

function acp_wf_getPossibleActions(transacToDo){
  var result = new vector();
  if ( transacToDo instanceof plc.ProcessTransaction &&
       transacToDo.task instanceof plc.Process_task && acp_wf_currentUserIsResponsible(transacToDo)) {
    var object = transacToDo.object;
    for(var action in transacToDo.process.get("Actions") where action.UpStream_Task==transacToDo.task){
      if(action.DISPLAY_BUTTON_ONLY_WHEN_ACTIVABLE == false || object.IsActionFeasible(action) == true){
        result.push(action);
      }
    }
  }
  return result;
}

function acp_wf_currentUserIsResponsible(transacToDo){
  var result=false;
  if ( transacToDo instanceof plc.ProcessTransaction){
    var listRole=transacToDo.getinternalvalue("ASSIGNMENT");
    var RespRole=new symbol("R","KEYWORD");
    if(listRole.position(RespRole) instanceof Number){
      result=true;
    }
  }
  return result;
}

function acp_ojs_top_ws_level(){
	var sOactID = "";
	if(this instanceof plc.ordo_project){
		var oAct = plw.top_level_ws(this);
		if(oAct instanceof plw.work_structure){sOactID = oAct.printattribute();}
	}
	return sOactID;
}

method acp_ojs_wf_perform_action on plc._CHG_PT_CHANGE_OF_SCOPE(){
	var object = this; // change
	var transacToDo = object.lasttransaction();
	var possibleActions = acp_wf_getPossibleActions(transacToDo);
	var ActionToPerform = undefined;
	for(var action in possibleActions where action.NAME.SEARCH("Accept_Proposal")){ActionToPerform = action;}
	if(ActionToPerform != undefined){
		if(object.IsActionFeasible(ActionToPerform) == true)
		{			
			with([plw.no_locking,plw.no_alerts]){object._CHG_RA_CHANGE_STATE = plc._CHG_PT_CHANGE_STATE.get("Submitted"); object.PerformAction(ActionToPerform);}
		}
	}

}

function update_change_status_on_selection(){
	var Number selectionLength = plw.selection_length();
	var current_user_id = plw.currentopx2user().printattribute();
	var file = plw.currentpageobject();
	var workflow = file.ACP_UA_S_PWP_P_FORECAST_VAL_WF;
	var bResp = "USER_IN_GROUP".callmacro(current_user_id,file.ACP_RO_PWP_PROJECT_TEAM);
	if(workflow != "" && bResp == false){plw.alert("Only Project Team's users are allowed to perform this action!"); return false;}
	var selected_expenditure = [];
	var vChanges = [];
	for (var ctobj in  plw.selection_get() where ctobj.TIME_SYNTHESIS instanceof plc.TIME_SYNTHESIS){
		var ts = ctobj.TIME_SYNTHESIS;
		for (var pe in ts.get("RELATION-EXPENDITURE")){
			selected_expenditure.push(pe);
		}
	}

	with([plw.no_locking,plw.no_alerts]){
		if(selectionLength>0){
			//Parcours des dépenses sélectionnées
			for (var pe in selected_expenditure where pe.type=="Initial"){
				if(pe._CHG_RA_CHANGE_OF_SCOPE instanceof plc._CHG_PT_CHANGE_OF_SCOPE && pe._CHG_RA_CHANGE_OF_SCOPE.internal == false){
					if(workflow != "" && bResp){
						pe._CHG_RA_CHANGE_OF_SCOPE.acp_ojs_wf_perform_action();
					}
					else{
						pe._CHG_RA_CHANGE_OF_SCOPE._CHG_RA_CHANGE_STATE = plc._CHG_PT_CHANGE_STATE.get("Submitted");
					}
					pe.type = pe._CHG_RA_CHANGE_OF_SCOPE._CHG_RA_CHANGE_STATE._CHG_ST_AA_S_EXP_DESC;
				}else{
					plw.alert("The forecast "+pe.NAME+" cannot be submitted because it is not linked to a change");
				}
			}
		}else{
			with (file.fromobject()){
				for (var pe in plc.expenditure where pe.type=="Initial"){
					if(pe._CHG_RA_CHANGE_OF_SCOPE instanceof plc._CHG_PT_CHANGE_OF_SCOPE && pe._CHG_RA_CHANGE_OF_SCOPE.internal == false){
						if(workflow != "" && bResp){
							pe._CHG_RA_CHANGE_OF_SCOPE.acp_ojs_wf_perform_action();
						}
						else{
							pe._CHG_RA_CHANGE_OF_SCOPE._CHG_RA_CHANGE_STATE = plc._CHG_PT_CHANGE_STATE.get("Submitted");
						}
						pe.type = pe._CHG_RA_CHANGE_OF_SCOPE._CHG_RA_CHANGE_STATE._CHG_ST_AA_S_EXP_DESC;
					}else{
					plw.alert("The forecast "+pe.NAME+" cannot be submitted because it is not linked to a change");
				}
				}
			}
		}
	}
}

function generate_new_change_on_selection(vObject : undefined){
  var Number selectionLength = (vObject instanceof Vector) ? vObject.length : plw.selection_length();
  var file = (vObject instanceof Vector) ? vObject[0].file : plw.currentpageobject();
  var vSelection = [];

  if (vObject instanceof Vector){
    vSelection = vObject;
  }else{
     for (var ctobj in  plw.selection_get() where ctobj.TIME_SYNTHESIS instanceof plc.TIME_SYNTHESIS){
       vSelection.push(ctobj.TIME_SYNTHESIS);
     }
  }
  var selected_expenditure = [];
  var vChanges = [];

  var selectedTS = [];
  if (selectionLength > 0 ){
    for (var ctobj in  vSelection where ctobj instanceof plc.TIME_SYNTHESIS && ctobj.type == "Initial") {
          if(ctobj.COST_ACCOUNT.internal ){
            plw.alert("Cost account is mandatory before creating a change");
            return;
          }
          selectedTS.push(ctobj);
        }
  }else{
    if (!plw.question("No line is selected, the creation will be applied to all the costs lines without changes. Do you want to continue?")) return false;
    for (var ctobj in file.get("TIME-SYNTS") where ctobj.TIME_SYNTHESIS instanceof plc.TIME_SYNTHESIS && ctobj.TIME_SYNTHESIS.type == "Initial") {
          if(ctobj.TIME_SYNTHESIS.COST_ACCOUNT.internal){
            plw.alert("Cost account is mandatory before creating a change");
            return;
          }
          selectedTS.push(ctobj.TIME_SYNTHESIS);
        }
  }

  //Check there a least one non null value
  var nonNull = false;
  for (var ts in selectedTS where ts.archived_estimate_at_completion != 0){
    nonNull = true;
    break;
  }
  if (!nonNull) {
    plw.alert("A change cannot be created without any values");
    return false;
  }


  for (var ts in selectedTS){
    for (var pe in ts.get("RELATION-EXPENDITURE")){
      selected_expenditure.push(pe);
      if (pe._CHG_RA_CHANGE_OF_SCOPE instanceof plc._CHG_PT_CHANGE_OF_SCOPE && pe._CHG_RA_CHANGE_OF_SCOPE.internal==false) vChanges.push(pe._CHG_RA_CHANGE_OF_SCOPE);
    }
  }

  var change_proposal = new list();
  var cpt = 2;
  for (var chg in vChanges.removeduplicates()){

    change_proposal.push(new list(cpt,chg.printattribute()));
    cpt++;
  }
  var answer = true;
  if(change_proposal.length != 0){
    var msg = "To which change do you want to link the selected forecast?";
     answer = msg.userquestion("Select a change","New change","Cancel",change_proposal);

    if (answer == false) {
      return true;
    }
  }
  var plc._CHG_PT_CHANGE_OF_SCOPE change ;
  if (answer instanceof Number){
    for (var choice in change_proposal where choice[0] == answer){
      change = plc._CHG_PT_CHANGE_OF_SCOPE.get(choice[1]);
    }
  }
  if (answer == true){
      change = new plc._CHG_PT_CHANGE_OF_SCOPE(file: file,
                               name: "ACP_CG_CHANGE_OF_SCOPE_GENERATOR",
                               ACP_UA_TYPE_OF_CHANGE: "Forecast",
                               _CHG_RA_CHANGE_STATE: plc._CHG_PT_CHANGE_STATE.get("Initial"));
  }
  
  //Open change form after creation
  //change.editobject("_CHG_POPUP_CREATE_CHANGE");
  
  //Open change in instance
  
    var o_Change_link = new hyperlink("Fvalue",
  				 "Attribute",
  				 "ID",
  				 "Editortype",
  				 "_CHG_POPUP_CREATE_CHANGE",
  				 "popup",
  				 false);	
  o_Change_link.go(change);

  with([plw.no_locking,plw.no_alerts]){
      //Parcours des dépenses sélectionnées
      for (var ts in selectedTS){
          for (var pe in ts.get("RELATION-EXPENDITURE")){
             if(pe.quantity == 0 ){
                pe.delete();
                continue;
             }
              pe._CHG_RA_CHANGE_OF_SCOPE = change;
              pe.type = change._CHG_RA_CHANGE_STATE._CHG_ST_AA_S_EXP_DESC;
          }
      }
  }
}

JSE 15 11 2021 button for the screen change with full screen change

function new_change_without_costs(file){
  var change = new plc._CHG_PT_CHANGE_OF_SCOPE(file: file,
                               name: "ACP_CG_CHANGE_OF_SCOPE_GENERATOR",
                               ACP_UA_TYPE_OF_CHANGE: "Forecast",
                               _CHG_RA_CHANGE_STATE: plc._CHG_PT_CHANGE_STATE.get("Initial"));

  var o_Change_link = new hyperlink("Fvalue",
				 "Attribute",
				 "ID",
				 "Editortype",
				 "_CHG_POPUP_CREATE_CHANGE",
				 "popup",
				 false);	
o_Change_link.go(change);
}

function change_new_change_on_activity( default_activity, default_dataset ){
   var hyperlink link = new Hyperlink("CreationForm",
                           "Class","_CHG_PT_CHANGE_OF_SCOPE",
                           "EditorType","_CHG_POPUP_CREATE_CHANGE",
                           "DefaultA1","DATASET",
                           "DefaultV1",default_dataset, 
                           "DefaultA2","_CHG_RA_CHANGE_ACT",
                           "DefaultV2",default_activity,
						   "DefaultA3","_CHG_RA_CHANGE_STATE",
                           "DefaultV3","Initial"
                           );
  link.go(context);
}

function change_new_change_hyperlink(){
  var string default_dataset = "changeOfScopeMod_change_compute_project_default_value".callmacro();
  change_new_change_on_activity( "", default_dataset );
}

function change_new_change_on_activity( default_activity, default_dataset ){
var hyperlink link = new Hyperlink("CreationForm",
"Class","_CHG_PT_CHANGE_OF_SCOPE",
"EditorType","_CHG_POPUP_CREATE_CHANGE",
"DefaultA1","DATASET",
"DefaultV1",default_dataset,
"DefaultA2","_CHG_RA_CHANGE_ACT",
"DefaultV2",default_activity,
"DefaultA3","_CHG_RA_CHANGE_STATE",
"DefaultV3","Initial"
);
link.go(context);
}
function change_new_change_hyperlink(){
var string default_dataset = "changeOfScopeMod_change_compute_project_default_value".callmacro();
change_new_change_on_activity( "", default_dataset );
}

function generate_new_change_benefits_on_selection(){
	var Number selectionLength = plw.selection_length();
	var file = plw.currentpageobject();
	var selected_expenditure = [];
	var vChanges = [];

	for (var ctobj in  plw.selection_get() where ctobj.TIME_SYNTHESIS instanceof plc.TIME_SYNTHESIS){
		var ts = ctobj.TIME_SYNTHESIS;
		for (var pe in ts.get("RELATION-EXPENDITURE") ){
			selected_expenditure.push(pe);
			if (pe._CHG_RA_CHANGE_OF_SCOPE instanceof plc._CHG_PT_CHANGE_OF_SCOPE && !pe._CHG_RA_CHANGE_OF_SCOPE.internal) vChanges.push(pe._CHG_RA_CHANGE_OF_SCOPE);
		}
	}

	var change_proposal = new list();
	var cpt = 2;
	for (var chg in vChanges.removeduplicates()){

		change_proposal.push(new list(cpt,chg.printattribute()));
		cpt++;
	}
	var msg = "To which change do you want to link the selected forecast?";
	var answer = (change_proposal.length == 0)? true : msg.userquestion("Select a change","New change","Cancel",change_proposal);

	if (answer == false) return true;
	var plc._CHG_PT_CHANGE_OF_SCOPE change ;
	if (answer instanceof Number){
		for (var choice in change_proposal where choice[0] == answer){
			change = plc._CHG_PT_CHANGE_OF_SCOPE.get(choice[1]);
		}
	}

	if (answer == true){
			 change = new plc._CHG_PT_CHANGE_OF_SCOPE(file: plw.currentpageobject(),
													 name: "ACP_CG_CHANGE_OF_SCOPE_GENERATOR",
													 ACP_UA_TYPE_OF_CHANGE: "Benefits",
													 _CHG_RA_CHANGE_STATE: plc._CHG_PT_CHANGE_STATE.get("Benefits"));
			
	}
	
	//Open change form after creation
	//change.editobject("_CHG_POPUP_CREATE_CHANGE");
	
	  
    var o_Change_link = new hyperlink("Fvalue",
				 "Attribute",
				 "ID",
				 "Editortype",
				 "_CHG_POPUP_CREATE_CHANGE",
				 "popup",
				 false);	
    o_Change_link.go(change);



	// selected_expenditure.inspect();
	with([plw.no_locking,plw.no_alerts]){
		if(selectionLength>0){
			//Parcours des dépenses sélectionnées
			for (var pe in selected_expenditure where pe.type=="Benefits"){
				pe._CHG_RA_CHANGE_OF_SCOPE = change;
				// pe.type = change._CHG_RA_CHANGE_STATE._CHG_ST_AA_S_EXP_DESC;
			}
		}else{
			with (file.fromobject()){
				for (var pe in plc.expenditure where pe.type=="Benefits"){
					pe._CHG_RA_CHANGE_OF_SCOPE = change;
					// pe.type = change._CHG_RA_CHANGE_STATE._CHG_ST_AA_S_EXP_DESC;
				}
			}
		}
	}
	
}

END of Changes for Benefits

function acp_change_last_transaction_mapper(f){
	if(this instanceof plc._CHG_PT_CHANGE_OF_SCOPE){
		if(this.lasttransaction() instanceof plc.process_transaction){
			f.call(this.lasttransaction());
		}
	}	
}

JSE: function used to rest workflow when selecting a new one on Change dialog

function acp_js_reset_change_workflow(change){
    /**
	var question = plw.question("Are you sure to change the current workflow? All the history will be lostAAAAAAAA");
	if (!question) {
	    return true;
	}
	**/
	change.ResetWorkflow();
	/**
	for (var pt in change.get("PROCESS-TRANSACTIONS")){
	 pt.delete();
	}
	**/
	with(plw.no_locking){
		change._CHG_RA_CHANGE_STATE = "Initial";
	}
	this.editor.apply();
	return true;
}

function duplicateChangeInfos(source,target){
	if (plw.question("Are you sure to copy information to the current change from ~a - ~a".format(source.name,source.desc))){
				target.modifyWithPlist(["DESC",source.DESC
									  ,"ACP_UA_TYPE_OF_CHANGE",source.ACP_UA_TYPE_OF_CHANGE
									  ,"ACP_UA_TARGETED_BASELINE",source.ACP_UA_TARGETED_BASELINE
									  ,"ACP_UA_RISK_OPP",source.ACP_UA_RISK_OPP
									  ,"ACP_UA_S_OWNER",source.ACP_UA_S_OWNER
									  ,"ACP_UA_S_CURRENT_SITUATION",source.ACP_UA_S_CURRENT_SITUATION
									  ,"NOTE_PAD",source.NOTE_PAD
									  ,"_CHG_RING_CHG_ACT",source._CHG_RING_CHG_ACT
									  ,"ACP_UA_S_FUTURE_SITUATION",source.ACP_UA_S_FUTURE_SITUATION
									  ,"PARENT",source.PARENT
									  ]);
	}
	return true;
}

Display in the status by baseline for a change

function  change_by_baseline_reader(bLatestFin){
	var result = "";
	if(this instanceof plc._CHG_PT_CHANGE_OF_SCOPE){
		var changed_looked = this.name;
		var o_prj = this.file;
		var sLastFinancial=(o_prj instanceof plc.ordo_project) ? o_prj.ACP_UA_S_LAST_FINANCIAL_BASELINE : "";
		for (var ref in o_prj.get("REFERENCES") where ref.LOADED==true && (bLatestFin==false || (sLastFinancial!="" && ref.name==sLastFinancial)) ){
			var chg_Baseline = o_prj.get("ACP_DA_REF_ACP_UA_S_CHANGE_STATUSES_~a".format(ref.name));
			if (chg_Baseline!=undefined && chg_Baseline.search(changed_looked) instanceof Number){
				for (var elt in chg_Baseline.parsevector(",")){
					if (elt.search(changed_looked) instanceof Number){
						result += ref.name + ":" + elt.parsevector(":")[1] + plw.getchar(10);
					}
				}
			}
		}
	}
	return result;
}

SDELATTRE 202501 : Added to fix temporatily baseline multi baseline on same project

function GetSMPLockBaseline(oProj,refName){
 var Lockkey = oProj.NAME + refName;
 var Locked = plw.getjsobjectlock(Lockkey).#SMPCONTROL#;
 if (!(Locked)){
  return false;
 }else{
  return true;
 }
}

function ah_js_general_baseline_creation(oProj,sAct_list,refName){
	var exception_formula=plw.compile_reference_activity_filter(refName,oProj,sAct_list);
	// Check baseline exist
	var plc.reference baseline_to_update = plw._PM_Getreference(oProj,refName);
	var boolean update = ( baseline_to_update instanceof plc.reference ) ? true : false;
	if (update)	 
		plw._pm_updateReference(oProj,baseline_to_update,exception_formula);   		 		  //Update baseline if it does not exist		
	else   
		plw.create_reference_with_parameter(refName,refName,oProj,false,exception_formula);   // Create baseline if it does not exist
}

function ah_create_update_wp_baseline(refName,act_list){
 var act_vec = act_list.parselist();
 var proj_hash = new hashtable();
 var oAct;
 var oProj;
 var exception_formula;
 var exception_formula_proj;
 
 // CASE 1 - LAST_AGREED
 if (refName=="LAST_AGREED"){
     var evm_ms_selected = false;
  for (var sAct in act_vec){
   with ([plw.no_locking, plw.no_alerts]) {
    oAct = plc.workstructure.get(sAct);
    if (oAct instanceof plc.workstructure){
        if (oAct.AH_UA_B_ACT_EVM_MILESTONE==false){
         oAct.SD_BUDGET=oAct.PS;
         oAct.ED_BUDGET=oAct.PF;
        }
        else  
      evm_ms_selected = true;
    }
   }
  }
  if (evm_ms_selected) plw.alert("For EVM Milestones, please use the menu \"Track>Distribute Budget\" to update Last Agreed dates.");
 } 
 else{
	// CASE 2 - DATE FIELDS
	var sd_field = ah_bl_sd_slot(refName,false);
	var ed_field = ah_bl_ed_slot(refName,false);

	if (sd_field!=undefined && ed_field!=undefined)
	{
		for (var sAct in act_vec)
		{
			oAct = plc.workstructure.get(sAct);
			if (oAct instanceof plc.workstructure)
			{
				with ([plw.no_locking, plw.no_alerts]) {
					oAct.set(sd_field,oAct.PS);
					oAct.set(ed_field,oAct.PF);
				}
			}
		}
	}
	else
	{
	  for (var sAct in act_vec){
	   oAct = plc.workstructure.get(sAct);
	   oProj =  oAct.PROJECT;
	   
	   exception_formula_proj=proj_hash.get(oProj);
	   if (exception_formula_proj!=undefined)  exception_formula="LIST_MERGE".call(exception_formula_proj,sAct);
	   else exception_formula=sAct;
	   
	   proj_hash.set(oProj,exception_formula);  
	  }

	  var oRefAdmin = plc._L1_PT_REF_ADMIN.get(refName);
	  if (oRefAdmin != undefined){
	   // CASE 3 - PENDING BASELINE
	   if (oRefAdmin.get("AH_UA_B_BATCH_MODE") == true){
		// Add Baseline in pending table (for the one flag as Batch mode)
		for (var oProj in proj_hash){
		 var current_user = context.callstringformula("$CURRENT_USER");
		 var current_date = new date();
		 var pending_baseline = undefined;
		  pending_baseline = new plc.__USER_TABLE_AH_UT_PENDING_BASELINE(File:oProj
						   ,NAME: oRefAdmin.printattribute() + "-" +  current_user + "-" + current_date
						   ,AH_UA_D_REQUESTED_AT:current_date
						   ,AH_UR_USER_REQUESTED_BY:current_user
						   ,AH_UR_ACTIVITIES:proj_hash.get(oProj)
						   ,AH_UR_BASELINE:oRefAdmin
						   );
				 
		   plw.alert("This type of baseline is taken in a background process.");
		   plw.alert("NEXT RUN :" + context.AH_UF_OC_S_NEXT_RUN_PENDING_BASELINE+".");
		   plw.alert("Click on PENDING BASELINE to check the process state.");     
		}    
	   }
	   else{
		// CASE 4 - DIRECT BASELINE
		// Take baseline with the exception formula for identified projects
		for (var oProj in proj_hash){
		  ah_js_general_baseline_creation(oProj,proj_hash.get(oProj),refName);
		} 
	   }    
	 }
	}
 }
}

function ah_js_ba_take_pending_baseline(){
	for (var oProj in plc.project where oProj.AH_UF_B_PENDING_BASELINE == true){
		with(oProj.fromobject()) {
			for (var oPendingBaseline in plc.__USER_TABLE_AH_UT_PENDING_BASELINE where oPendingBaseline.callbooleanformula("AH_UA_D_BASELINE_CREATED_AT = -1")    ){
				var sAct_list = oPendingBaseline.printattribute("AH_UR_ACTIVITIES");
				var refName = oPendingBaseline.printattribute("AH_UR_BASELINE");
				plw.writeln("!! START BASELINE CREATION for " + oPendingBaseline + "-" + oPendingBaseline.ONB );
				ah_js_general_baseline_creation(oProj,sAct_list,refName);
				oPendingBaseline.AH_UA_D_BASELINE_CREATED_AT = new date();
				plw.writeln("!! END BASELINE CREATION for " + oPendingBaseline + "-" + oPendingBaseline.ONB );
				
			}		
		}
	}
	
}

START DA AH_DA_OC_PENDING_BASELINE (used for toolbar filter//

function ah_js_pending_baseline_reader(){
	var CurrentObject = plw.CurrentPageObject();
	//Prj case
	if (CurrentObject instanceof plc.project) return CurrentObject.AH_UF_B_PENDING_BASELINE ;
	//Multiproject Case
	else if (CurrentObject instanceof plc.virtual_dataset && CurrentObject.getInternalValue("SELECTED-DATASETS")!=false){
		var prj_list = CurrentObject.get("SELECTED-DATASETS");
		var prj_vect = prj_list.split(",");
		for (var sPrj in prj_vect){
			var oPrj = plc.project.get(sPrj);
			if (oPrj != undefined && oPrj.AH_UF_B_PENDING_BASELINE)		return true;
		}
	}	
	//Workpackage Case
	else if (CurrentObject instanceof plc.virtual_dataset){
		var act_list =  CurrentObject.get("SELECTED-ACTIVITIES");
		var act_vect = act_list.split(",");
		for (var sAct in act_vect){
			var oAct = plc.network.get(sAct);
			if (oAct != undefined && oAct.AH_UF_B_PENDING_BASELINE_ON_CHILD_ACT) return true;
		}
	}
	return false;
}

function ah_js_pending_baseline_locker(){
	return true;
}

function baseline_date_type_creation(){
  plw.writetolog("Running baseline_date_type_creation");
  "AH_DT_LAST_AGREED".addtypedate("Last agreed",baseline_type_reader.closure(#BUDGET-START#), baseline_type_reader.closure(#BUDGET-FINISH#));
  "AH_DT_OP_25_29".addtypedate("OP_25_29",baseline_type_reader.closure(#USER_ATTRIBUTE_AH_UA_D_BL_OP_25_29_SD#), baseline_type_reader.closure(#USER_ATTRIBUTE_AH_UA_D_BL_OP_25_29_ED#));
  "AH_DT_INITIAL".addtypedate("Initial",baseline_type_reader.closure(#USER_ATTRIBUTE_AH_UA_D_BL_INITIAL_SD#), baseline_type_reader.closure(#USER_ATTRIBUTE_AH_UA_D_BL_INITIAL_ED#));
  
}

function ah_rel_plink(){
  var rel = new ObjectRelation(plc.work_structure,"AH_REL_PLINK");
  rel.Mapmethod = ah_get_interworkpackage_plinks;
  rel.ConnectedToClass = plc.constraint;
  rel.Comment = "Collaboration predecessor links";
}

function ah_rel_slink(){
  var rel = new ObjectRelation(plc.work_structure,"AH_REL_SLINK");
  rel.Mapmethod = ah_get_interworkpackage_slinks;
  rel.ConnectedToClass = plc.constraint;
  rel.Comment = "Collaboration successor links";
}

function ah_rel_owner_activity(){
  var rel = new ObjectRelation(plc.work_structure,"AH_CASCADED_OWNER");
  rel.Mapmethod = ah_get_owner_activity;
  rel.ConnectedToClass = plc.work_structure;
  rel.Comment = "Cascaded Owner activity";
}

function ah_rel_receiver_activity(){
  var rel = new ObjectRelation(plc.work_structure,"AH_CASCADED_RECEIVERS");
  rel.Mapmethod = ah_get_receiver_activity;
  rel.ConnectedToClass = plc.work_structure;
  rel.Comment = "Cascaded Receivers activity";
}

function ah_get_interworkpackage_not_readable_slinks_locker(){
	return true;
}

function ah_rel_not_readable_slink(){
	
	var slot_name = "AH_DA_N_NOT_READABLE_SLINK";
	var slot_desc = "successor link that are not readable";
	var slot = new ObjectAttribute(plc.workstructure,slot_name,"NUMBER");
	slot.comment = slot_desc;
	slot.reader = ah_get_interworkpackage_not_readable_slinks;
	slot.locker = ah_get_interworkpackage_not_readable_slinks_locker;
	slot.hiddeninintranetserver = false;	
	
}

renvoie une hashtable des projets de la page courante (wpm or projet or multiples projects)

function ah_js_get_current_pj_hashtable(){
  
  var h_pj = new hashtable("object");  
  
  var o_current_object = plw.currentpageobject();
  if (o_current_object instanceof plc.project){
    h_pj.set(o_current_object,o_current_object);
    return h_pj;
  }

  if (o_current_object instanceof plc.virtual_dataset){
    if (o_current_object.getinternalvalue("SELECTED-DATASETS") != false){
      for (var o_pj in o_current_object.getinternalvalue("SELECTED-DATASETS")){h_pj.set(o_pj,o_pj);} //dans le cas d'un virtual dataset de projet, on renvoie le vecteur de projet
      return h_pj;
    }

    if (o_current_object.getinternalvalue("SELECTED-ACTIVITIES") != false){
      for (var o_act in o_current_object.getinternalvalue("SELECTED-ACTIVITIES")){h_pj.set(o_act.project,o_act.project);} //virtualdataset d'activit?
      return h_pj;
    }
  }
  return h_pj;
}

function _lockerForProg() { return true; }

function ah_evm_context_portfolio_slot_modifier(newValue, s_slot) {
	var portfolio = plc._FF_PT_FAVOR_FILTERS.get(context._FF_AA_S_LIST_NAME);
	if(portfolio instanceof plc._FF_PT_FAVOR_FILTERS){
	    portfolio.set(s_slot, newValue);
	}
}

Functions setting the dates for export bw

function ah_js_set_current_year(){
	var date = new date();
	context.GEN_CHART_DD = "PERIOD_START".call(date,"YEAR",0);
	context.GEN_CHART_ED = "PERIOD_START".call(date,"YEAR",1);
}

function ah_js_set_next_year(){
	var date = new date();
	context.GEN_CHART_DD = "PERIOD_START".call(date,"YEAR",1);
	context.GEN_CHART_ED = "PERIOD_START".call(date,"YEAR",2);
}

function ah_js_set_last_year(){
	var date = new date();
	context.GEN_CHART_DD = "PERIOD_START".call(date,"YEAR",-1);
	context.GEN_CHART_ED = "PERIOD_START".call(date,"YEAR",0);
}

Function used to merge 2 plist. Values of the second list overwrite those of the primary

function mergePlist(plist1, plist2) {
    var mergedPlist = new vector();
	if(plist1!=undefined && plist2!=undefined && plist1 instanceof vector && plist2 instanceof vector && plw.is_even(plist1.length) && plw.is_even(plist2.length))
	{
		var h_merged = new hashtable("string");
		for (var i = 0; i < plist1.length; i += 2) {
			h_merged.set(plist1[i], plist1[i + 1]);
		}
		for (var i = 0; i < plist2.length; i += 2) {
			h_merged.set(plist2[i], plist2[i + 1]);
		}
		for(var attr in h_merged)
		{
			mergedPlist.push(attr);
			mergedPlist.push(h_merged.get(attr));
		}
	}
    return mergedPlist;
}

function ah_pjs_mig_activity_attributes_unitary(o_act){
	ah_pjs_update_activity_field(o_act,"AH_UA_B_CONTRACTUAL_MILESTONE","AU_AA_B_CONTRACTUAL_MS","","");
	ah_pjs_update_activity_field(o_act,"AH_UA_D_CONTRACTUAL_DATE","AU_AA_D_CONTRACTUAL_DATE","","");
	ah_pjs_update_activity_field(o_act,"AH_UA_S_SORTING_ATTRIBUTE_01","AU_AA_S_SORTING_01","","");
	ah_pjs_update_activity_field(o_act,"AH_UA_S_SORTING_ATTRIBUTE_02","AU_AA_S_SORTING_02","","");
	ah_pjs_update_activity_field(o_act,"AH_UA_S_SORTING_ATTRIBUTE_03","AU_AA_S_SORTING_03","","");
	ah_pjs_update_activity_field(o_act,"AH_UA_S_SORTING_ATTRIBUTE_04","AU_AA_S_SORTING_04","","");
	ah_pjs_update_activity_field(o_act,"AH_UA_S_SORTING_ATTRIBUTE_05","AU_AA_S_SORTING_05","","");
	ah_pjs_update_activity_field(o_act,"AH_UA_S_SORTING_ATTRIBUTE_06","AU_AA_S_SORTING_06","","");
	ah_pjs_update_activity_field(o_act,"AH_UA_S_SORTING_ATTRIBUTE_07","AU_AA_S_SORTING_07","","");
	ah_pjs_update_activity_field(o_act,"AH_UA_S_SORTING_ATTRIBUTE_08","AU_AA_S_SORTING_08","","");
	ah_pjs_update_activity_field(o_act,"AH_UA_S_SORTING_ATTRIBUTE_09","AU_AA_S_SORTING_09","","");
	ah_pjs_update_activity_field(o_act,"AH_UA_S_SORTING_ATTRIBUTE_10","AU_AA_S_SORTING_10","","");
	ah_pjs_update_activity_field(o_act,"AH_UA_S_SORTING_ATTRIBUTE_11","AU_AA_S_SORTING_11","","");
	ah_pjs_update_activity_field(o_act,"AH_UA_S_SORTING_ATTRIBUTE_12","AU_AA_S_SORTING_12","","");
	ah_pjs_update_activity_field(o_act,"AH_UA_S_SORTING_ATTRIBUTE_13","AU_AA_S_SORTING_13","","");
	ah_pjs_update_activity_field(o_act,"AH_UA_S_SORTING_ATTRIBUTE_14","AU_AA_S_SORTING_14","","");
	ah_pjs_update_activity_field(o_act,"AH_UA_S_SORTING_ATTRIBUTE_15","AU_AA_S_SORTING_15","","");
	ah_pjs_update_activity_field(o_act,"AH_UA_SAP_MAPPING_KEY","AU_AA_S_UPH_SAP_KEY","NAME",plc.__USER_TABLE_AH_UT_SAP_MAPPING);
	ah_pjs_update_activity_field(o_act,"AH_UA_S_ACTIVITY_STATUS","AU_RA_ACTIVITY_STATUS","NAME",plc.__USER_TABLE_AH_UT_ACTIVITY_STATUS);
	ah_pjs_update_activity_field(o_act,"AH_UA_S_ACT_WP_CONTRIBUTOR","AU_RA_CONTRIBUTOR","NAME",plc.RESOURCE);
	ah_pjs_update_activity_field(o_act,"AH_UA_S_ROUTE_TO","AU_RA_ROUTE_TO","NAME",plc.__USER_TABLE_AH_UT_ROUTE_TO);
	ah_pjs_update_activity_field(o_act,"AH_UA_B_DISTRIB_BUDGET_DATE","AU_UA_DISTRIB_BUDGET_DATE","","");
	ah_pjs_update_activity_field(o_act,"AH_UA_B_RECOVERY_PLAN","AU_UA_L1B_B_AH_RECOVERY_PLAN","","");
	ah_pjs_update_activity_field(o_act,"AH_UA_S_CATEGORY","AU_UA_L1B_S_AH_CATEGORY","NAME",plc.__USER_TABLE_AH_UT_ACT_CATEGORY);
	ah_pjs_update_activity_field(o_act,"AU_UA_T_CE_INTERNAL_COMMENT","AU_UA_L1B_S_AH_CE_INTERNAL_COMMENT","","");
	//ah_pjs_update_activity_field(o_act,"AH_UA_S_LEVEL_OF_CONFIDENCE","AU_UA_EVM_LEVEL_OF_CONFIDENCE","NAME",plc.__USER_TABLE_AH_UT_LEVEL_OF_CONFIDENCE);
	ah_pjs_update_activity_field(o_act,"AH_UA_S_ACT_WP_CONTRIBUTOR2","AU_UA_L1B_S_AH_CONTRIBUTOR2","NAME",plc.RESOURCE);
	ah_pjs_update_activity_field(o_act,"AU_UA_T_CE_INTERNAL_COMMENT","AU_UA_L1B_S_AH_CE_INTERNAL_COMMENT","","");
	ah_pjs_update_activity_field(o_act,"AH_UA_S_ROOT_CAUSE","AU_UA_L1B_S_AH_ROOT_CAUSE","NAME",plc.__USER_TABLE_AH_UT_ROOT_CAUSE);
	ah_pjs_update_activity_field(o_act,"AH_UA_B_UNDER_PENALTIES","AU_UA_B_UNDER_PENALTIES","","");
	//o_act.AH_UA_S_ACT_AC_MISSION = o_act.AU_AA_S_MISSION; // Not at activity level
	//o_act.AH_UA_S_PGM_SAP_ID = o_act.AU_AA_S_PGM_SAP_ID; // Not at activity level
	//o_act.AH_UA_S_WP_LEADER_ROLE = o_act.AU_AA_S_PRJ_POBS; // Not at activity level
	//o_act.AH_UA_S_ACT_AC_PSP_ELEMENT = o_act.AU_AA_S_PSP_ELEMENT; // Not at activity level
	//o_act.AH_UA_S_ACT_WP_CONTRIBUTOR = o_act.AU_RA_CONTRIBUTOR; // Not at activity level
	//o_act.AH_UA_S_ACT_AC_VARIANT = o_act.AU_RA_VARIANT; // Not at activity level
	//o_act.AH_UA_S_ACT_WP_LEADER = o_act.AU_RA_WP_LEADER; // Not at activity level
	//o_act.AH_UA_S_ACT_WP_LEADER_SIGLUM = o_act.AU_RA_WP_LEADER_SIGLUM; // Not at activity level
	ah_pjs_update_activity_field(o_act,"AH_UA_B_CRITICAL_PATH","AU_AA_B_CRITICAL_PATH","","");
	ah_pjs_update_activity_field(o_act,"AH_UA_B_MAJOR_MS","AU_AA_B_MAJOR_MS","","");
	ah_pjs_update_activity_field(o_act,"AH_UA_B_TECHNICAL_MS","AU_AA_B_TECHNICAL_MS","","");
	ah_pjs_update_activity_field(o_act,"AH_UA_B_TIMETIME_SELECTED","AU_AA_B_TIMETIME_SELECTED","","");
	ah_pjs_update_activity_field(o_act,"AH_UA_D_SAP_MAINTAINED","AU_AA_D_SAP_MAINTAINED","","");
	//o_act.BREAKDOWN_2 = o_act.AU_AA_N_MSN_ID; --> We keep the same value
	ah_pjs_update_activity_field(o_act,"AH_UA_T_COST_SORTING_01","AU_AA_S_COST_SORTING_01","","");
	ah_pjs_update_activity_field(o_act,"AH_UA_T_COST_SORTING_02","AU_AA_S_COST_SORTING_02","","");
	ah_pjs_update_activity_field(o_act,"AH_UA_T_COST_SORTING_03","AU_AA_S_COST_SORTING_03","","");
	ah_pjs_update_activity_field(o_act,"AH_UA_T_COST_SORTING_04","AU_AA_S_COST_SORTING_04","","");
	ah_pjs_update_activity_field(o_act,"AH_UA_T_COST_SORTING_05","AU_AA_S_COST_SORTING_05","","");
	ah_pjs_update_activity_field(o_act,"AH_UA_S_PE_NAME","AU_AA_S_JAGUAR_PE_NAME","","");
    if (o_act.BREAKDOWN_8 instanceof plc.8BS) o_act._INF_RA_ACT_TYPE_2 = plc._INF_PT_ACT_TYPE_2.get(o_act.BREAKDOWN_8.AH_UA_N_DM_TARGET_TL);
    if (o_act.AU_RA_SORT_MS_1 instanceof plc.8BS) o_act.AH_UA_S_MS_01 = plc._INF_PT_ACT_TYPE_2.get(o_act.AU_RA_SORT_MS_1.AH_UA_N_DM_TARGET_TL);
    if (o_act.AU_RA_SORT_MS_2 instanceof plc.8BS) o_act.AH_UA_S_MS_02 = plc._INF_PT_ACT_TYPE_2.get(o_act.AU_RA_SORT_MS_2.AH_UA_N_DM_TARGET_TL);
    if (o_act.AH_UA_S_MS_03 instanceof plc.8BS) o_act.AH_UA_S_MS_03 = plc._INF_PT_ACT_TYPE_2.get(o_act.AH_UA_S_MS_03.AH_UA_N_DM_TARGET_TL);
	ah_pjs_update_activity_field(o_act,"AH_UA_S_LEVEL_OF_CONFIDENCE","AU_UA_EVM_LEVEL_OF_CONFIDENCE","ID",plc.__USER_TABLE_AH_UT_LEVEL_OF_CONFIDENCE);
	ah_pjs_update_activity_field(o_act,"AH_UA_B_CE_LF_REVIEW","AU_UA_L1B_B_AH_CE_LF_REVIEW","","");
	ah_pjs_update_activity_field(o_act,"AH_UA_S_CONTRACTED","AU_UA_L1B_S_AH_CONTRACTED","","");
	ah_pjs_update_activity_field(o_act,"AH_UA_S_DELIVERABLE_RESPONSIBLE_NAME","AU_UA_L1B_S_AH_DELIVERABLE_RESP_NAME","","");
	ah_pjs_update_activity_field(o_act,"AH_UA_S_DELIVERABLE_REVIEW_NAME","AU_UA_L1B_S_AH_DELIVERABLE_REVIEW_NAME","","");
	ah_pjs_update_activity_field(o_act,"AH_UA_B_TASK_TO_ICMS","AU_UA_TASK_TO_ICMS","","");
	// Z1T24UP20-6320 - Milestone status
	ah_pjs_update_activity_field(o_act,"AH_UA_S_MILESTONE_STATUS","_SOC_DYN_AU_AA_MILESTONE_STATUS","NAME","");
	ah_pjs_update_activity_field(o_act,"AH_UA_D_MILESTONE_STATUS_DATE","_SOC_DYN_AU_AA_MILESTONE_STATUS_DATE","","");
	ah_pjs_update_activity_field(o_act,"AH_UA_S_MILESTONE_STATUS_USER","_SOC_DYN_AU_AA_MILESTONE_STATUS_USER","NAME","");
	ah_pjs_update_activity_field(o_act,"AH_UA_S_MILESTONE_STATUS_USER_LABEL","_SOC_DYN_AU_AA_MILESTONE_STATUS_USER_LABEL","","");
	ah_pjs_update_activity_field(o_act,"AH_UA_S_MILESTONE_STATUS_NOTEPAD","_SOC_DYN_AU_AA_MILESTONE_STATUS_NOTEPAD","","");
	if( o_act.AH_UA_S_ACT_WP_BUDGET_LINES=="") ah_pjs_update_activity_field(o_act,"AH_UA_S_ACT_WP_BUDGET_LINES","BREAKDOWN_1","NAME",plc._INF_PT_CBS2);
	
	
	// OBS Element
	// Clean previous value
	o_act.OBS_ELEMENT = "";
	// Set the new value
	var obs_element = plc.OBS_NODE.get(o_act.AU_UA_S_DM_OBS_ELEMENT);

	if (obs_element != undefined)
	{
		o_act._BM_AA_N_TRACK_ACT_ONB = obs_element.ONB;
	}
	
	// Z1T24UP20-6237 - EVM Type to cost account 
	if (o_act.AU_UA_ACT_EVM_MILESTONE && o_act.AU_RA_EVM_TYPE.printattribute()!="")
	{
		if (o_act.AU_RA_EVM_TYPE.printattribute()=="Distributed")
		{
			o_act.COST_ACCOUNT="";
		}
		else if (o_act.AU_RA_EVM_TYPE.printattribute()=="Flight Hours")
		{
			o_act.COST_ACCOUNT="Flight Hours";
		}
		else if (o_act.AU_RA_EVM_TYPE.printattribute()=="Vendors")
		{
			o_act.COST_ACCOUNT="Vendors";
		}
	}
	
	// Z1T24UP20-6063
	ah_pjs_update_activity_field(o_act,"AH_UA_T_CHANGE_PROPOSAL","AU_AA_T_CHANGE_PROPOSAL","","");
	ah_pjs_update_activity_field(o_act,"AH_UA_T_DEL_REF","AU_AA_S_DEL_REF","","");
	ah_pjs_update_activity_field(o_act,"AH_UA_T_L1B_S_AH_MAS","AU_UA_L1B_S_AH_SQUADS","","");
	ah_pjs_update_activity_field(o_act,"AH_UA_N_LAYOUT_LEVEL","AU_UA_N_LAYOUT_LEVEL","","");
	ah_pjs_update_activity_field(o_act,"NOTE_PAD","AU_AA_S_BCB_COMMENT","","");
	ah_pjs_update_activity_field(o_act,"AH_UA_S_CLASH_RESP_DESC","AU_AA_S_CLASH_RESP_DESC","","");
	ah_pjs_update_activity_field(o_act,"AH_UA_S_L1B_S_AH_FUNDING","AU_UA_L1B_S_AH_FUNDING","",""); // Warning: not supposed to be used anymore (old way for EVM), but still in use at AIRCRAFT-MRO
	ah_pjs_update_activity_field(o_act,"AH_UA_B_SOW","AU_AA_B_SOW","","");
}

function ah_pjs_mig_activity_attributes(o_project){
    
    with(o_project.fromobject())
    {
		for (var o_act in "opxActivity" where o_act.project instanceof plc.dataset &&  o_act.project.DM_UA_B_PRJ_MIGRATED){
            ah_pjs_mig_activity_attributes_unitary(o_act);
		}
    }
}

Migrate critical milestones

function ah_pjs_mig_critical_milestones_activity(o_act) {

	var criticity = plc.__USER_TABLE_AH_UT_CRITICITY.get(o_act.AU_RA_CRITIC_MILESTONE.printattribute());
	var category = plc.__USER_TABLE_AH_UT_ACT_CATEGORY.get(o_act.AU_RA_CRITIC_MILESTONE.printattribute());
	
	//Les criticités sont stockés dans le fichier commun par défaut, les catégories dans un fichier commun propre à chaque programme, on se base donc sur le nom du fichier pour déterminer si l'objet est une criticité ou une catégorie
	if (criticity instanceof plc.__USER_TABLE_AH_UT_CRITICITY) {
		o_act.AH_UA_S_CRITICITY = criticity;
	}
	else {
		if (category instanceof plc.__USER_TABLE_AH_UT_ACT_CATEGORY)
		{
			o_act.AH_UA_S_CATEGORY = category;
		}
	}
}

function ah_pjs_mig_actual_exp(o_act){
    with(o_act.fromObject())
    {
    	for (var o_act_exp in plc.incurred_expenditure where o_act_exp.AH_UA_B_ACT_EXP_MIGRATED==false)
    	{
			ah_pjs_update_actual_exp_field(o_act_exp,"_INF_RA_CBS3","_INF_RA_CBS2","NAME",plc._INF_PT_CBS3); // Type of cost
			ah_pjs_update_actual_exp_field(o_act_exp,"AH_UA_AE_WBSE","AU_UA_AE_WBSE","NAME",plc.__USER_TABLE_AH_UT_WBSE); // WBSe
			o_act_exp._INF_RA_CBS2="";
			ah_pjs_update_actual_exp_field(o_act_exp,"_INF_RA_CBS2","BREAKDOWN_1","NAME",plc._INF_PT_CBS2); // Budget line
			o_act_exp.AH_UA_B_ACT_EXP_MIGRATED = true;
    	}
    }
}

*****************************************  ACTIVITIES ********************************************//

Function to update activity field with a test
Function to update activity field with a test
function ah_pjs_update_activity_field(activity,new_field,old_field,object_attribute,target_class)
{
try{
var value = activity.get(old_field);
Get linked attribute
if (value instanceof plc.object && object_attribute!="")
{
value = value.get(object_attribute);
}
var value_before_transformation = value;
Check if the value belong to the selected class
if (target_class!="")
{
var o_class = target_class.findclass();
if (o_class instanceof ObjectClass)
{

value = value.replaceregexp(",","");
var o_value = o_class.get(value);

if (o_value==undefined)
{
ah_pjs_log_activity_to_activity_field_error(activity,new_field,value_before_transformation);
value = "";
}
}
}

if (value!="")
{
activity.set(new_field,value);
}
}
catch(error e){
if(e != undefined){plw.writetolog("AH DataMigration - Impossible to update field " + new_field + " for activity " + activity.printattribute() +" - " + e); e.printStacktrace();}
}
}

function ah_pjs_log_activity_to_activity_field_error(activity,field,value)
{
var error_type = "Mapping activity to activity field";
var error_code = "1";
var object_class = "Activity";
var activity_id = activity.printattribute();
var key = error_code + "_" + field + "_" + value;

if (plc.__USER_TABLE_AH_UT_DM_ERROR_LOG.get(key)==undefined)
{
var error_log = new plc.__USER_TABLE_AH_UT_DM_ERROR_LOG(NAME : key
,AH_UA_S_ERROR_TYPE : error_type
,AH_UA_S_OBJECT_CLASS : object_class
,AH_UA_S_TARGET_FIELD : field
,AH_UA_S_VALUE : value
,FILE : "DM_CF_L1_DATA_MIG"
);
}
}

function ah_pjs_mig_activity_attributes_unitary(o_act){
ah_pjs_update_activity_field(o_act,"AH_UA_B_CONTRACTUAL_MILESTONE","AU_AA_B_CONTRACTUAL_MS","","");
ah_pjs_update_activity_field(o_act,"AH_UA_D_CONTRACTUAL_DATE","AU_AA_D_CONTRACTUAL_DATE","","");
ah_pjs_update_activity_field(o_act,"AH_UA_S_SORTING_ATTRIBUTE_01","AU_AA_S_SORTING_01","","");
ah_pjs_update_activity_field(o_act,"AH_UA_S_SORTING_ATTRIBUTE_02","AU_AA_S_SORTING_02","","");
ah_pjs_update_activity_field(o_act,"AH_UA_S_SORTING_ATTRIBUTE_03","AU_AA_S_SORTING_03","","");
ah_pjs_update_activity_field(o_act,"AH_UA_S_SORTING_ATTRIBUTE_04","AU_AA_S_SORTING_04","","");
ah_pjs_update_activity_field(o_act,"AH_UA_S_SORTING_ATTRIBUTE_05","AU_AA_S_SORTING_05","","");
ah_pjs_update_activity_field(o_act,"AH_UA_S_SORTING_ATTRIBUTE_06","AU_AA_S_SORTING_06","","");
ah_pjs_update_activity_field(o_act,"AH_UA_S_SORTING_ATTRIBUTE_07","AU_AA_S_SORTING_07","","");
ah_pjs_update_activity_field(o_act,"AH_UA_S_SORTING_ATTRIBUTE_08","AU_AA_S_SORTING_08","","");
ah_pjs_update_activity_field(o_act,"AH_UA_S_SORTING_ATTRIBUTE_09","AU_AA_S_SORTING_09","","");
ah_pjs_update_activity_field(o_act,"AH_UA_S_SORTING_ATTRIBUTE_10","AU_AA_S_SORTING_10","","");
ah_pjs_update_activity_field(o_act,"AH_UA_S_SORTING_ATTRIBUTE_11","AU_AA_S_SORTING_11","","");
ah_pjs_update_activity_field(o_act,"AH_UA_S_SORTING_ATTRIBUTE_12","AU_AA_S_SORTING_12","","");
ah_pjs_update_activity_field(o_act,"AH_UA_S_SORTING_ATTRIBUTE_13","AU_AA_S_SORTING_13","","");
ah_pjs_update_activity_field(o_act,"AH_UA_S_SORTING_ATTRIBUTE_14","AU_AA_S_SORTING_14","","");
ah_pjs_update_activity_field(o_act,"AH_UA_S_SORTING_ATTRIBUTE_15","AU_AA_S_SORTING_15","","");
ah_pjs_update_activity_field(o_act,"AH_UA_SAP_MAPPING_KEY","AU_AA_S_UPH_SAP_KEY","NAME",plc.__USER_TABLE_AH_UT_SAP_MAPPING);
ah_pjs_update_activity_field(o_act,"AH_UA_S_ACTIVITY_STATUS","AU_RA_ACTIVITY_STATUS","NAME",plc.__USER_TABLE_AH_UT_ACTIVITY_STATUS);
ah_pjs_update_activity_field(o_act,"AH_UA_S_ACT_WP_CONTRIBUTOR","AU_RA_CONTRIBUTOR","NAME",plc.RESOURCE);
ah_pjs_update_activity_field(o_act,"AH_UA_S_ROUTE_TO","AU_RA_ROUTE_TO","NAME",plc.__USER_TABLE_AH_UT_ROUTE_TO);
ah_pjs_update_activity_field(o_act,"AH_UA_B_DISTRIB_BUDGET_DATE","AU_UA_DISTRIB_BUDGET_DATE","","");
ah_pjs_update_activity_field(o_act,"AH_UA_B_RECOVERY_PLAN","AU_UA_L1B_B_AH_RECOVERY_PLAN","","");
ah_pjs_update_activity_field(o_act,"AH_UA_S_CATEGORY","AU_UA_L1B_S_AH_CATEGORY","NAME",plc.__USER_TABLE_AH_UT_ACT_CATEGORY);
ah_pjs_update_activity_field(o_act,"AU_UA_T_CE_INTERNAL_COMMENT","AU_UA_L1B_S_AH_CE_INTERNAL_COMMENT","","");
ah_pjs_update_activity_field(o_act,"AH_UA_S_LEVEL_OF_CONFIDENCE","AU_UA_EVM_LEVEL_OF_CONFIDENCE","NAME",plc.__USER_TABLE_AH_UT_LEVEL_OF_CONFIDENCE);
ah_pjs_update_activity_field(o_act,"AH_UA_S_ACT_WP_CONTRIBUTOR2","AU_UA_L1B_S_AH_CONTRIBUTOR2","NAME",plc.RESOURCE);
ah_pjs_update_activity_field(o_act,"AU_UA_T_CE_INTERNAL_COMMENT","AU_UA_L1B_S_AH_CE_INTERNAL_COMMENT","","");
ah_pjs_update_activity_field(o_act,"AH_UA_S_ROOT_CAUSE","AU_UA_L1B_S_AH_ROOT_CAUSE","NAME",plc.__USER_TABLE_AH_UT_ROOT_CAUSE);
ah_pjs_update_activity_field(o_act,"AH_UA_B_UNDER_PENALTIES","AU_UA_B_UNDER_PENALTIES","","");
o_act.AH_UA_S_ACT_AC_MISSION = o_act.AU_AA_S_MISSION; // Not at activity level
o_act.AH_UA_S_PGM_SAP_ID = o_act.AU_AA_S_PGM_SAP_ID; // Not at activity level
o_act.AH_UA_S_WP_LEADER_ROLE = o_act.AU_AA_S_PRJ_POBS; // Not at activity level
o_act.AH_UA_S_ACT_AC_PSP_ELEMENT = o_act.AU_AA_S_PSP_ELEMENT; // Not at activity level
o_act.AH_UA_S_ACT_WP_CONTRIBUTOR = o_act.AU_RA_CONTRIBUTOR; // Not at activity level
o_act.AH_UA_S_ACT_AC_VARIANT = o_act.AU_RA_VARIANT; // Not at activity level
o_act.AH_UA_S_ACT_WP_LEADER = o_act.AU_RA_WP_LEADER; // Not at activity level
o_act.AH_UA_S_ACT_WP_LEADER_SIGLUM = o_act.AU_RA_WP_LEADER_SIGLUM; // Not at activity level
ah_pjs_update_activity_field(o_act,"AH_UA_B_CRITICAL_PATH","AU_AA_B_CRITICAL_PATH","","");
ah_pjs_update_activity_field(o_act,"AH_UA_B_MAJOR_MS","AU_AA_B_MAJOR_MS","","");
ah_pjs_update_activity_field(o_act,"AH_UA_B_TECHNICAL_MS","AU_AA_B_TECHNICAL_MS","","");
ah_pjs_update_activity_field(o_act,"AH_UA_B_TIMETIME_SELECTED","AU_AA_B_TIMETIME_SELECTED","","");
ah_pjs_update_activity_field(o_act,"AH_UA_D_SAP_MAINTAINED","AU_AA_D_SAP_MAINTAINED","","");
o_act.BREAKDOWN_2 = o_act.AU_AA_N_MSN_ID; --> We keep the same value
ah_pjs_update_activity_field(o_act,"AH_UA_T_COST_SORTING_01","AU_AA_S_COST_SORTING_01","","");
ah_pjs_update_activity_field(o_act,"AH_UA_T_COST_SORTING_02","AU_AA_S_COST_SORTING_02","","");
ah_pjs_update_activity_field(o_act,"AH_UA_T_COST_SORTING_03","AU_AA_S_COST_SORTING_03","","");
ah_pjs_update_activity_field(o_act,"AH_UA_T_COST_SORTING_04","AU_AA_S_COST_SORTING_04","","");
ah_pjs_update_activity_field(o_act,"AH_UA_T_COST_SORTING_05","AU_AA_S_COST_SORTING_05","","");
ah_pjs_update_activity_field(o_act,"AH_UA_S_PE_NAME","AU_AA_S_JAGUAR_PE_NAME","","");
if (o_act.BREAKDOWN_8 instanceof plc.8BS) o_act._INF_RA_ACT_TYPE_2 = plc._INF_PT_ACT_TYPE_2.get(o_act.BREAKDOWN_8.AH_UA_N_DM_TARGET_TL);
if (o_act.AU_RA_SORT_MS_1 instanceof plc.8BS) o_act.AH_UA_S_MS_01 = plc._INF_PT_ACT_TYPE_2.get(o_act.AU_RA_SORT_MS_1.AH_UA_N_DM_TARGET_TL);
if (o_act.AU_RA_SORT_MS_2 instanceof plc.8BS) o_act.AH_UA_S_MS_02 = plc._INF_PT_ACT_TYPE_2.get(o_act.AU_RA_SORT_MS_2.AH_UA_N_DM_TARGET_TL);
if (o_act.AH_UA_S_MS_03 instanceof plc.8BS) o_act.AH_UA_S_MS_03 = plc._INF_PT_ACT_TYPE_2.get(o_act.AH_UA_S_MS_03.AH_UA_N_DM_TARGET_TL);
ah_pjs_update_activity_field(o_act,"AH_UA_S_LEVEL_OF_CONFIDENCE","AU_UA_EVM_LEVEL_OF_CONFIDENCE","ID",plc.__USER_TABLE_AH_UT_LEVEL_OF_CONFIDENCE);
ah_pjs_update_activity_field(o_act,"AH_UA_B_CE_LF_REVIEW","AU_UA_L1B_B_AH_CE_LF_REVIEW","","");
ah_pjs_update_activity_field(o_act,"AH_UA_S_CONTRACTED","AU_UA_L1B_S_AH_CONTRACTED","","");
ah_pjs_update_activity_field(o_act,"AH_UA_S_DELIVERABLE_RESPONSIBLE_NAME","AU_UA_L1B_S_AH_DELIVERABLE_RESP_NAME","","");
ah_pjs_update_activity_field(o_act,"AH_UA_S_DELIVERABLE_REVIEW_NAME","AU_UA_L1B_S_AH_DELIVERABLE_REVIEW_NAME","","");
ah_pjs_update_activity_field(o_act,"AH_UA_B_TASK_TO_ICMS","AU_UA_TASK_TO_ICMS","","");
Z1T24UP20-6320 - Milestone status
ah_pjs_update_activity_field(o_act,"AH_UA_S_MILESTONE_STATUS","_SOC_DYN_AU_AA_MILESTONE_STATUS","NAME","");
ah_pjs_update_activity_field(o_act,"AH_UA_D_MILESTONE_STATUS_DATE","_SOC_DYN_AU_AA_MILESTONE_STATUS_DATE","","");
ah_pjs_update_activity_field(o_act,"AH_UA_S_MILESTONE_STATUS_USER","_SOC_DYN_AU_AA_MILESTONE_STATUS_USER","NAME","");
ah_pjs_update_activity_field(o_act,"AH_UA_S_MILESTONE_STATUS_USER_LABEL","_SOC_DYN_AU_AA_MILESTONE_STATUS_USER_LABEL","","");
ah_pjs_update_activity_field(o_act,"AH_UA_S_MILESTONE_STATUS_NOTEPAD","_SOC_DYN_AU_AA_MILESTONE_STATUS_NOTEPAD","","");
if( o_act.AH_UA_S_ACT_WP_BUDGET_LINES=="") ah_pjs_update_activity_field(o_act,"AH_UA_S_ACT_WP_BUDGET_LINES","BREAKDOWN_1","NAME",plc._INF_PT_CBS2);

OBS Element
Clean previous value
o_act.OBS_ELEMENT = "";
Set the new value
var obs_element = plc.OBS_NODE.get(o_act.AU_UA_S_DM_OBS_ELEMENT);

if (obs_element != undefined)
{
o_act._BM_AA_N_TRACK_ACT_ONB = obs_element.ONB;
}

Z1T24UP20-6237 - EVM Type to cost account
if (o_act.AU_UA_ACT_EVM_MILESTONE && o_act.AU_RA_EVM_TYPE.printattribute()!="")
{
if (o_act.AU_RA_EVM_TYPE.printattribute()=="Distributed")
{
o_act.COST_ACCOUNT="";
}
else if (o_act.AU_RA_EVM_TYPE.printattribute()=="Flight Hours")
{
o_act.COST_ACCOUNT="Flight Hours";
}
else if (o_act.AU_RA_EVM_TYPE.printattribute()=="Vendors")
{
o_act.COST_ACCOUNT="Vendors";
}
}

Z1T24UP20-6063
ah_pjs_update_activity_field(o_act,"AH_UA_T_CHANGE_PROPOSAL","AU_AA_T_CHANGE_PROPOSAL","","");
ah_pjs_update_activity_field(o_act,"AH_UA_T_DEL_REF","AU_AA_S_DEL_REF","","");
ah_pjs_update_activity_field(o_act,"AH_UA_T_L1B_S_AH_MAS","AU_UA_L1B_S_AH_SQUADS","","");
ah_pjs_update_activity_field(o_act,"AH_UA_N_LAYOUT_LEVEL","AU_UA_N_LAYOUT_LEVEL","","");
ah_pjs_update_activity_field(o_act,"NOTE_PAD","AU_AA_S_BCB_COMMENT","","");
ah_pjs_update_activity_field(o_act,"AH_UA_S_CLASH_RESP_DESC","AU_AA_S_CLASH_RESP_DESC","","");
ah_pjs_update_activity_field(o_act,"AH_UA_S_L1B_S_AH_FUNDING","AU_UA_L1B_S_AH_FUNDING","",""); // Warning: not supposed to be used anymore (old way for EVM), but still in use at AIRCRAFT-MRO
ah_pjs_update_activity_field(o_act,"AH_UA_B_SOW","AU_AA_B_SOW","","");
}

function ah_pjs_mig_activity_attributes(o_project){

with(o_project.fromobject())
{
for (var o_act in "opxActivity" where o_act.project instanceof plc.dataset &&  o_act.project.DM_UA_B_PRJ_MIGRATED){
ah_pjs_mig_activity_attributes_unitary(o_act);
}
}
}

Migrate critical milestones
function ah_pjs_mig_critical_milestones_activity(o_act) {

var criticity = plc.__USER_TABLE_AH_UT_CRITICITY.get(o_act.AU_RA_CRITIC_MILESTONE.printattribute());
var category = plc.__USER_TABLE_AH_UT_ACT_CATEGORY.get(o_act.AU_RA_CRITIC_MILESTONE.printattribute());

Les criticités sont stockés dans le fichier commun par défaut, les catégories dans un fichier commun propre à chaque programme, on se base donc sur le nom du fichier pour déterminer si l'objet est une criticité ou une catégorie
if (criticity instanceof plc.__USER_TABLE_AH_UT_CRITICITY) {
o_act.AH_UA_S_CRITICITY = criticity;
}
else {
if (category instanceof plc.__USER_TABLE_AH_UT_ACT_CATEGORY)
{
o_act.AH_UA_S_CATEGORY = category;
}
}
}

SAP Link
function ah_pjs_mig_update_sap_links()
{
var n_sum=0;
var sap_mapping;

var vActVect = new vector();

for (var ms in plc.workstructure where ms.AU_AA_S_UPH_SAP_KEY!="" && ms.FILE instanceof plc.dataset)
{
sap_mapping = plc.__USER_TABLE_AH_UT_SAP_MAPPING.get(ms.AU_AA_S_UPH_SAP_KEY);
if (sap_mapping instanceof plc.__USER_TABLE_AH_UT_SAP_MAPPING)
{
ms.AH_UA_SAP_MAPPING_KEY = ms.AU_AA_S_UPH_SAP_KEY;
n_sum++;
}
}

plw.writetolog("AH Data Migration - "+n_sum + " milestones updated!");
}

*********************************************** ACTUAL EXPENDITURES *********************************************//

function ah_pjs_log_actual_to_actual_field_error(Actual_Exp,field,value)
{
var error_type = "Mapping Actual Expenditure to Actual Expenditure field";
var error_code = "4";
var object_class = "Actual Expenditure";
var activity_id = Actual_Exp.printattribute();
var key = error_code + "_" + field + "_" + value;

if (plc.__USER_TABLE_AH_UT_DM_ERROR_LOG.get(key)==undefined)
{
var error_log = new plc.__USER_TABLE_AH_UT_DM_ERROR_LOG(NAME : key
,AH_UA_S_ERROR_TYPE : error_type
,AH_UA_S_OBJECT_CLASS : object_class
,AH_UA_S_TARGET_FIELD : field
,AH_UA_S_VALUE : value
);
}
}

function ah_pjs_update_actual_exp_field(actual_exp,new_field,old_field,object_attribute,target_class)
{
try{
var value = actual_exp.get(old_field);

Get linked attribute
if (value instanceof plc.object && object_attribute!="")
{
value = value.get(object_attribute);
}
var value_before_transformation = value;

Check if the value belong to the selected class
if (target_class!="")
{
var o_class = target_class.findclass();
if (o_class instanceof ObjectClass)
{
value = value.replaceregexp(",","");
var o_value = o_class.get(value);

if (o_value==undefined)
{
ah_pjs_log_actual_to_actual_field_error(actual_exp,new_field,value);
value="";
}
}
}

if (value!="")
actual_exp.set(new_field,value);
}
catch(error e){
if(e != undefined){plw.writetolog("AH Data Migration - Impossible to update field " + new_field + " for Actual Expenditure " + actual_exp.printattribute() +" - " + e); e.printStacktrace();}
}
}

function ah_pjs_mig_actual_exp(o_act){
with(o_act.fromObject())
{
for (var o_act_exp in plc.incurred_expenditure where o_act_exp.AH_UA_B_ACT_EXP_MIGRATED==false)
{
ah_pjs_update_actual_exp_field(o_act_exp,"_INF_RA_CBS3","_INF_RA_CBS2","NAME",plc._INF_PT_CBS3); // Type of cost
ah_pjs_update_actual_exp_field(o_act_exp,"AH_UA_AE_WBSE","AU_UA_AE_WBSE","NAME",plc.__USER_TABLE_AH_UT_WBSE); // WBSe
o_act_exp._INF_RA_CBS2="";
ah_pjs_update_actual_exp_field(o_act_exp,"_INF_RA_CBS2","BREAKDOWN_1","NAME",plc._INF_PT_CBS2); // Budget line
o_act_exp.AH_UA_B_ACT_EXP_MIGRATED = true;
}
}
}

********************************************* PROJECT TIMELINE GROUPING ****************************************//

function ah_pjs_mig_MasterScheduleGrouping_project(o_project){

	var createdObj = new hashtable("string");
    
    with(o_project.fromObject())
    {
    	for (var o_MsG in "opxBREAKDOWN_8" where o_MsG.FILE instanceof plc.dataset && o_MsG.FILE==o_project order by ["LEVEL"]){
    
    		var s_file_orig = o_MsG.file;
    		var s_file_target;
    		var s_program;
    		
    		if (s_file_orig instanceof plc.dataset && s_file_orig?.CLASS=="PROJECT" &&  (s_file_orig.AH_UA_B_DM_PROJECT_TO_MIGRATE || s_file_orig._INF_NF_S_PRJ_STATE_INTERNAL == "TEMPLATE" || s_file_orig._ROA_AA_B_ROADMAP_PROJECT))
    		{
    			s_file_target=s_file_orig;
    			s_program = s_file_orig._BM_BS.AH_UA_DM_WP_PROGRAM;
    		}
    		
    
    		var s_id_pere = o_MsG.8BS.printattribute();
    		var o_pere = createdObj.get( s_id_pere );
    
    		var obj = new plc._INF_PT_ACT_TYPE_2(
    			NAME:o_MsG.name,
    			DESC:o_MsG.desc,
    			AH_S_MS_GRP_PROG:s_program,
    			PARENT:o_pere,
    			FILE:s_file_target);
    		
    		if (s_file_orig instanceof plc.dataset && s_file_orig?.CLASS=="PROJECT" &&  (s_file_orig.AH_UA_B_DM_PROJECT_TO_MIGRATE || s_file_orig._INF_NF_S_PRJ_STATE_INTERNAL == "TEMPLATE" || s_file_orig._ROA_AA_B_ROADMAP_PROJECT))
    		{
    			obj.AH_UA_B_WORKPACKAGE_TL_GRP=true;
    			obj.AH_S_TL_GRP_WP = plw.top_level_ws(s_file_orig);
    		}
    
    		createdObj.set( o_MsG.id.printattribute(), obj );
    		
    		obj.positiveonb();
		    o_MsG.AH_UA_N_DM_TARGET_TL = obj.ONB;
    	}
    }
}

****************************************** SYNCHRONIZATION LINKS ***********************************************//

function ah_datamig_sync_link(project){
	var synchro_type;
	var prod_act;

    with(project.fromobject())
    {
    	for (var cons_act in plc.workstructure where cons_act.project instanceof plc.dataset &&  cons_act.project.DM_UA_B_PRJ_MIGRATED && cons_act.SYNCHRONIZE_WITH!="") /*cons_act.project.AH_UA_B_DM_PROJECT_TO_MIGRATE*/ 
    	{
    		try{
    		    if (cons_act.SYNCHRONIZE_WITH instanceof plc.workstructure && cons_act.SYNCHRONIZE_WITH.PROJECT instanceof plc.dataset && cons_act.SYNCHRONIZE_WITH.PROJECT.DM_UA_B_PRJ_MIGRATED)
    		    {
        			if (cons_act.BREAKDOWN_3!=undefined)
        			{
        				synchro_type = cons_act.BREAKDOWN_3.printattribute();
        				prod_act = cons_act.SYNCHRONIZE_WITH;
        
        				// Cascaded Activities
        				if (synchro_type=="TDBU_PROD" || synchro_type=="CASCADED_RECEIVER" || synchro_type=="PICKED")
        				{
        					// Update consumer activity
        					plw.writetolog("AH Data Migration - Update clone activity : " + cons_act.printattribute());
        					cons_act.FSD=cons_act.PS;
        					cons_act.AH_UA_S_ORIGIN_ACTIVITY = prod_act;
        					cons_act.AH_UA_B_CLONE_ACTIVITY = true;
        					// Z1T24UP20-6331 - Add [Clone] in activity Name
        					cons_act.NAME = "[CLONE] " + cons_act.NAME;
        					// Set OBS Element
        					cons_act._BM_AA_N_TRACK_ACT_ONB = prod_act._BM_AA_N_TRACK_ACT_ONB;
        					// Z1T24UP20-6802
        					cons_act.TASK_TYPE = prod_act.TASK_TYPE;
        
        					// Create link between activities
        					plw.writetolog("AH Data Migration - Create clone link between " + prod_act.printattribute() + " and " + cons_act.printattribute());
        					var cascaded_lk = new plc.constraint(PA : prod_act,
        														 SUCC_ACTIVITY : cons_act,
        														 TYPE : "START-START",
        														 CAL : cons_act.CAL,
        														 AH_UA_B_CLONE_LINK : true,
        														 //_SYN_AA_B_SMOOTHLINK : true,
        														 FILE : cons_act.PROJECT
        														 );
        					cascaded_lk._SYN_AA_B_SMOOTHLINK=true;
        				}
        				else
        				{
        					// Collaboration activity
        					if (synchro_type=="P2P_CONS" || synchro_type=="TDBU_CONS")
        					{
        						plw.writetolog("AH Data Migration - Create collaboration link between " + prod_act.printattribute() + " and " + cons_act.printattribute());
        						var collaboration_lk = new plc.constraint(PA : prod_act,
        																  SUCC_ACTIVITY : cons_act,
        																  TYPE : "FINISH-START",
        																  CAL : cons_act.CAL,
        																  AH_UA_B_LK_INTER_WP : true,
        																  //_SYN_AA_B_SMOOTHLINK : true,
        																  FILE : cons_act.PROJECT
        																  );
        						collaboration_lk._SYN_AA_B_SMOOTHLINK=true;
        					}
        				}
        			}
        
        			plw.writetolog("AH Data Migration - Remove synchronyzation link on activity : " + cons_act.printattribute());
        			cons_act.SYNCHRONIZE_WITH="";
    		    }
    		    else
    		    {
    		        plw.writetolog("AH Data Migration - Activity not found for Synchronization link : " + cons_act.SYNCHRONIZE_WITH);
                    plw.writetolog("AH Data Migration - Remove synchronyzation link on activity : " + cons_act.printattribute());
        			cons_act.SYNCHRONIZE_WITH="";
    		    }
    		}
    		catch(error e){
    			if(e != undefined){plw.writetolog("AH Data Migration - Impossible to create link for activity " + cons_act.printattribute() +" - " + e); e.printStacktrace();}
    		}				
    	}
    }
}

function ah_pjs_mig_budget_elements(o_act){
    with(o_act.fromObject())
    {
    	for (var o_be in plc.budget_line where o_be.AH_UA_B_BE_MIGRATED==false)
    	{
    		// o_be.AH_UA_B_DISTRIBUTED_ON_TOP_LEVEL =  o_be.AU_UA_B_DISTRIBUTED_ON_TOP_LEVEL; // Distributed on top level
    		o_be.AH_UA_D_LAST_BATCH_UPDATE =  o_be.AU_UA_D_LAST_BATCH_UPDATE; // Last batch update
    		o_be.AH_UA_S_IMPORT_BATCH =  o_be.AU_UA_S_IMPORT_BATCH; // Import Batch
			ah_pjs_update_be_field(o_be,"AH_UA_S_BUDGET_ELEMENT_SOURCE","AU_RA_BUDGET_LINE_SOURCE","",""); // Budget Element
			ah_pjs_update_be_field(o_be,"_INF_RA_CBS3","_INF_RA_CBS2","NAME",plc._INF_PT_CBS3); // Type of cost
			ah_pjs_update_be_field(o_be,"AH_UA_S_FUNDING","AU_RA_FUNDING_SOURCE","NAME",plc.CONTRACT_WORKPACKAGE); // Funding source
			// Empty CBS2 - Z1T24UP20-6980
			o_be._INF_RA_CBS2="";
			ah_pjs_update_be_field(o_be,"_INF_RA_CBS2","BREAKDOWN_1","NAME",plc._INF_PT_CBS2); // Budget line
    		o_be._INF_RA_CBS2 =  o_be.BREAKDOWN_1.printattribute(); // Budget line
    		o_be.AH_UA_N_EVM_LANDING_POINT_AC =  o_be.AU_UA_N_EVM_LANDING_POINT_AC; // Landing point AC
    		o_be.AH_UA_N_EVM_LANDING_POINT_EV =  o_be.AU_UA_N_EVM_LANDING_POINT_EV; // Landing Point EV
    		o_be.AH_UA_S_LP_YEAR =  o_be.AU_UA_S_LP_YEAR; // Landing Point Year
    		if (o_be.TYPE=="Archived")
    		    o_be.TYPE = "Expenditures";
    	    if (o_be.getinternalvalue("TYPE")=="AU_ET_UNDISTRIBUTED")
    	        o_be.setinternalvalue("TYPE",new symbol("AH_ET_UNDISTRIBUTED","KEYWORD"));
    		
    		o_be.AH_UA_B_BE_MIGRATED = true;
    	}
    }
}

Z1T24UP20-6090 --> User defined portfolios

function ah_pjs_mig_user_portfolios(){

    with ([plw.map_shadowed_objects, plw.no_locking,plw.no_historization, plw.no_alerts]) {
    	for(var portfolio in plc._FF_PT_FAVOR_FILTERS)
    	{
        	try{
        		var user = portfolio._FF_RA_USER_FF;
        		plw.writetolog("AH DataMigration - start portfolio " + portfolio );
        		if (user instanceof plc.opx2_user && portfolio._FF_AA_B_EXPORTED==false && user.inactive==true) plw.writetolog("AH DataMigration - not migrated - user inactive");
        		if (portfolio.AU_UA_S_PROJECTS=="" && portfolio.AU_UA_S_PROJECTS_W=="") plw.writetolog("AH DataMigration - not migrated - no projects to become projects or workpackage");
        		if (portfolio.AU_UA_B_NO_NEED_MIGRATE) plw.writetolog("AH DataMigration - not migrated - no need to migrate");
        		
        		if (!((user instanceof plc.opx2_user && portfolio._FF_AA_B_EXPORTED==false && user.inactive==true) 
        			|| (portfolio.AU_UA_S_PROJECTS=="" && portfolio.AU_UA_S_PROJECTS_W=="") 
        			|| (portfolio.AU_UA_B_NO_NEED_MIGRATE))) {
        			    
        			if (portfolio.AU_UA_S_TO_NAME=="") portfolio.AU_UA_S_TO_NAME = portfolio.NAME;
        		    if (portfolio.AU_UA_S_TO_DESC=="") portfolio.AU_UA_S_TO_DESC = portfolio.DESC;
        		    if (portfolio.AU_UA_S_PORT_FORMULA=="") portfolio.AU_UA_S_PORT_FORMULA = portfolio._FF_AA_T_FORMULA;
        		    if (portfolio.AU_UA_S_PICK_LIST=="") portfolio.AU_UA_S_PICK_LIST = portfolio._FF_AA_S_PROJ_LIST;
        			
        			if (portfolio.AU_UA_B_TO_WPF) { // move to workpackage filter
        			    plw.writetolog("AH DataMigration - move to workpackage filter");
        				var statusVector=new vector();
        				if (portfolio._FF_AA_B_DISPLAY_ACT_PRJ && plc.__USER_TABLE_AH_UT_WORKPACKAGE_STATUS.get("Active") != undefined) statusVector.push("Active");
        				if (portfolio._FF_AA_B_SIMU && plc.__USER_TABLE_AH_UT_WORKPACKAGE_STATUS.get("Simulation") != undefined) statusVector.push("Simulation");
        				if (portfolio._FF_AA_B_CLOSED_PRJ && plc.__USER_TABLE_AH_UT_WORKPACKAGE_STATUS.get("Closed") != undefined) statusVector.push("Closed");
        				if (portfolio._FF_AA_B_CONSO_PRJ && plc.__USER_TABLE_AH_UT_WORKPACKAGE_STATUS.get("Conso_proj") != undefined) statusVector.push("Conso_proj");
        				if (portfolio._FF_AA_B_DISPLAY_PORT && plc.__USER_TABLE_AH_UT_WORKPACKAGE_STATUS.get("Conso_port") != undefined) statusVector.push("Conso_port");
        				if (portfolio._FF_AA_B_DISPLAY_PERM_PRJ && plc.__USER_TABLE_AH_UT_WORKPACKAGE_STATUS.get("Permanent") != undefined) statusVector.push("Permanent");
        				if (portfolio._FF_AA_B_DISPLAY_VERSION  && plc.__USER_TABLE_AH_UT_WORKPACKAGE_STATUS.get("Version") != undefined) statusVector.push("Version");
        				if (portfolio._FF_AA_B_DISPLAY_LAYOUT  && plc.__USER_TABLE_AH_UT_WORKPACKAGE_STATUS.get("Layout") != undefined) statusVector.push("Layout");
        				if (portfolio._FF_AA_B_PROJECT_TEMPLATE && plc.__USER_TABLE_AH_UT_WORKPACKAGE_STATUS.get("Template") != undefined) statusVector.push("Template");
        				
        				var fileWPF = portfolio._FF_AA_B_EXPORTED ? "AH_CF_D_COMMON_DATA" : "@" + Context.CallStringFormula("$CURRENT_USER").ToUpperCase();
        				var wpf;
        				try{
        				    wpf = new plc.__USER_TABLE_AH_UT_WORKPACKAGE_FILTER(#NAME#,portfolio.AU_UA_S_TO_NAME,#DESC#,portfolio.AU_UA_S_TO_DESC,#FILE#,fileWPF,
        					#AH_UA_S_OWNER#,user,#AH_UA_B_SHARED#,portfolio._FF_AA_B_EXPORTED,#AH_UA_S_WP_FILTER#,portfolio.AU_UA_S_WPF_FORMULA,#AH_UA_S_WP_STATUS#, statusVector.join(","),
        					#AH_UA_S_READ_ACCESS_GROUPS#,ah_pjs_mig_mapping_user_groups(portfolio._FF_AA_S_GROUP_READ),#AH_UA_S_WRITE_ACCESS_GROUPS#,ah_pjs_mig_mapping_user_groups(portfolio._FF_AA_S_GROUP_WRITE),
        					#AH_UA_T_EVM_YEARLY_COMMENT#,portfolio.AU_UA_EVM_E2E_COMMENT,#AH_UA_T_EVM_E2E_COMMENT#,portfolio.AU_UA_EVM_E2E_COMMENT);
        				} catch(error e){
    		            if(e != undefined){plw.writetolog("AH DataMigration - Impossible to migrate user portfolio " + portfolio +" problem with the creation of workpackage filter for - " + portfolio + " - error - " + e); e.printStacktrace();}
    	                }
        					
        				plw.writetolog("AH DataMigration - create workpackage filter - " + wpf);
                        try{
							var PrjList = portfolio.AU_UA_S_PICK_LIST.split(",");
							var WbsVector = new vector();
							var WbsList = "";
							for(var Prj in PrjList){
								var oPrj = plc.ordo_project.get(Prj);
								if(oPrj instanceof plc.ordo_project){
									WbsVector.push(plw.top_level_ws(oPrj));
								}
							}
							WbsList = WbsVector.join(",");
        				    if (wpf instanceof plc.__USER_TABLE_AH_UT_WORKPACKAGE_FILTER) wpf.modifywithplist(new vector("AH_UA_S_WP_LIST", WbsList));
                        } catch(error e){
    		            if(e != undefined){plw.writetolog("AH DataMigration - Impossible to migrate user portfolio " + portfolio +" problem with the portfolio.AU_UA_S_PICK_LIST - " + portfolio.AU_UA_S_PICK_LIST + " - error - " + e); e.printStacktrace();}
    	                }
                        
        			
        			} else { // stay a portfolio
        			    plw.writetolog("AH DataMigration - stay a portfolio " + portfolio);
        				portfolio.AH_UA_EVM_YEARLY_COMMENT=portfolio.AU_UA_EVM_YEARLY_COMMENT;
        				portfolio.AH_UA_EVM_E2E_COMMENT=portfolio.AU_UA_EVM_E2E_COMMENT;
        				portfolio._FF_AA_T_FORMULA = portfolio.AU_UA_S_PORT_FORMULA;
        				portfolio._FF_AA_S_PROJ_LIST = portfolio.AU_UA_S_PICK_LIST;
        				portfolio.NAME = portfolio.AU_UA_S_TO_NAME;
        				portfolio.DESC = portfolio.AU_UA_S_TO_DESC;
        				portfolio._FF_AA_S_GROUP_READ = ah_pjs_mig_mapping_user_groups(portfolio._FF_AA_S_GROUP_READ);
        				portfolio._FF_AA_S_GROUP_WRITE = ah_pjs_mig_mapping_user_groups(portfolio._FF_AA_S_GROUP_WRITE);
        				// the category (only if it remains a portfolio)(_FF_AA_S_CATEGORY idem)
        				portfolio.FILE = "AH_CF_D_COMMON_DATA";
        				//apply the Planisware backup function
        				plw.backupOnbFromValueOnPortfolioFilter(portfolio.NAME);
        			} 
        		}
        	}
        	catch(error e){
    		if(e != undefined){plw.writetolog("AH DataMigration - Impossible to migrate user portfolio " + portfolio +" - " + e); e.printStacktrace();}
    	    }
    	    plw.writetolog("AH DataMigration - end portfolio " + portfolio );
    	}
    }
}

function ah_pjs_mig_critical_milestones() {
	var s_target_file = "AH_CF_D_MASTER_DATA";
	var s_target_file_local = "AH_CF_D_LOCAL_DATA";
	//Migration des critical milestones en criticités et catégories
	for (var o_crt_ms in "opxAU_PT_CRITICAL_MILESTONE" where o_crt_ms.FILE instanceof plc.dataset order by ["LEVEL"]) {
		//Les criticités sont stockés dans le fichier commun par défaut, les catégories dans un fichier commun propre à chaque programme, on se base donc sur le nom du fichier pour déterminer si l'objet est une criticité ou une catégorie
		if (o_crt_ms.printattribute()=="proposed TCO" || o_crt_ms.printattribute()=="Contract Top Milestone")
		{
		    var o_act_cat = new plc.__USER_TABLE_AH_UT_ACT_CATEGORY (#NAME#,o_crt_ms.NAME,
    				#DESC#,o_crt_ms.DESC,
    				#FILE#,s_target_file_local);
    				o_act_cat.AH_UA_S_PROGRAM ="All";
		}
		else
		{
    		if (o_crt_ms.FILE.printattribute() == "AU_CF_DATA"){
    			var o_act_crit=new plc.__USER_TABLE_AH_UT_CRITICITY (#NAME#,o_crt_ms.NAME,
    				#DESC#,o_crt_ms.DESC,
    				#FILE#,s_target_file);
    			//Rattachement au parent pour les éléments qui ne sont pas de niveau 1
    			if (o_crt_ms.CallBooleanFormula(" LEVEL > 1  ")) {
    				o_act_crit.AH_UT_CRITICITY  = o_crt_ms.PARENT.printattribute();
    			}
				// Initiate field "To program dashboard" on TCO and MMS
				if (o_crt_ms.printattribute()=="TCO" || o_crt_ms.printattribute()=="MMS")
				{
					o_act_crit.AH_UA_B_CRITIC_FOR_PROGRAM_DASHBOARD = true;
				}
    		}
    		else {
    			var o_act_cat = new plc.__USER_TABLE_AH_UT_ACT_CATEGORY (#NAME#,o_crt_ms.NAME,
    				#DESC#,o_crt_ms.DESC,
    				#FILE#,s_target_file_local);
    			//Rattachement du Route to au programme s'il existe, les programmes doivent avoir été migrés au préalable
    			if (o_crt_ms.CallBooleanFormula(" ?OBJECT_EXISTS(\"_BM_BS\",SUBSTITUTE(\"\",\"AU_CF_DATA_\",FILE) )  ")) {
    				o_act_cat.AH_UA_S_PROGRAM = o_crt_ms.CallStringFormula(" SUBSTITUTE(\"\",\"AU_CF_DATA_\",FILE)  ");
    			}
    			//Rattachement au parent pour les éléments qui ne sont pas de niveau 1
    			if (o_crt_ms.CallBooleanFormula(" LEVEL > 1  ")) {
    				o_act_cat.AH_UT_ACT_CATEGORY  = o_crt_ms.PARENT.printattribute();
    			}
    		}
		}
		
	}
}

Z1T24UP20-6877

function ah_pjs_mig_categories() {
	for(var cat in plc.USER_ATTRIBUTE_PV where cat.type == "CATEGORY")
	{
		var cat_id = cat.internal_value;
		var o_cat = plc.__USER_TABLE_AH_UT_ACT_CATEGORY.get( cat_id );
		if( o_cat==undefined)
		{
			o_cat = new plc.__USER_TABLE_AH_UT_ACT_CATEGORY(NAME : cat.DESCRIPTION
									,DESC : cat.DESCRIPTION
									,FILE : "AH_CF_D_MASTER_DATA");
		}		
	}
}

function ah_pjs_mig_route_to(){
	var s_target_file = "AH_CF_D_LOCAL_DATA";
	//Parcours des Route to par niveau pour reconstruire l'arborescence
	for (var o_route_to in "opxAU_PT_ROUTE_TO" where o_route_to.FILE instanceof plc.dataset order by ["LEVEL"]) {
		with(plw.no_alerts){
			var o_route_to_migr = new plc.__USER_TABLE_AH_UT_ROUTE_TO (#NAME#,o_route_to.NAME,
				#DESC#,o_route_to.DESC,
				#FILE#,s_target_file);
				//Rattachement au parent pour les éléments qui ne sont pas de niveau 1
			if (o_route_to.CallBooleanFormula(" LEVEL > 1  ")) {
				o_route_to_migr.AH_UT_ROUTE_TO  = o_route_to.PARENT.printattribute();
			}
			//Rattachement du Route to au programme s'il existe, les programmes doivent avoir été migrés au préalable
			if (o_route_to.CallBooleanFormula(" ?OBJECT_EXISTS(\"_BM_BS\",SUBSTITUTE(\"\",\"AU_CF_DATA_\",FILE) )  ")) {
				o_route_to_migr.AH_UA_S_ROUTE_PROG = o_route_to.CallStringFormula(" SUBSTITUTE(\"\",\"AU_CF_DATA_\",FILE)  ");
			}
		}
	}
}

function ah_pjs_mig_serial_number(){
	var s_target_file = "AH_CF_D_LOCAL_DATA";
	var o_common_dataset = plc.commondataset.get("AU_CF_DATA");
	var o_global_prog = plc.5bs.get("All");
	
	
	    //Parcours des MSN par niveau pour reconstruire l'arborescence
    	for (var o_sn in plc.2bs where o_sn.FILE instanceof plc.dataset order by [["INVERSE","LEVEL"]]) {
    	    with(plw.no_alerts){
    	        
    	        var prog = "";
    	        var prog_req = "";
    	        
    	        if (o_sn.file==o_common_dataset)
    			{
    				prog=o_global_prog;
    			}
    			else
    			{
    				//Rattachement des MSN to au programme s'il existe, les programmes doivent avoir été migrés au préalable
    				if (o_sn.CallBooleanFormula(" ?OBJECT_EXISTS(\"_BM_BS\",SUBSTITUTE(\"\",\"AU_CF_DATA_\",FILE) )")) {
    					prog = o_sn.CallStringFormula(" SUBSTITUTE(\"\",\"AU_CF_DATA_\",FILE)  ");
    				}
    			}
    			
    			if (plc.5bs.get(o_sn.AU_AA_S_MSN_PROGRAM) instanceof plc.5bs)
    			{
    				prog_req = o_sn.AU_AA_S_MSN_PROGRAM;
    			}
    			// !!!! Change file at the end to be able to retrieve the program before
    			o_sn.file=s_target_file;
    			o_sn.AH_UA_S_PROGRAM = prog;
    			o_sn.AH_UA_S_PROGRAM_REQ_FOR = prog_req;
    		}
    	}
    	
    	// Update program for default SN
    	var default_sn = plc.2bs.get("MSN_DEFAULT_AH");
    	if (default_sn instanceof plc.2bs)
    	    default_sn.AH_UA_S_PROGRAM=o_global_prog;
}

function ah_pjs_mig_activity_types(){
	var s_target_file = "AH_CF_D_MASTER_DATA";
	//Modification du rattachement du fichier commun source pour éviter les problèmes de dépendance et permettre le déplacement
	var o_common_dataset = plc.commondataset.get("AU_CF_DATA");
	var s_common_dataset_bck = o_common_dataset.COMMON_FILES;
	o_common_dataset.COMMON_FILES = ah_remove_deleted_files(o_common_dataset.COMMON_FILES + ","+ s_target_file);
	//Déplacement des activity types vers le nouveau fichier commun
	for (var o_act_type in "opxWBS_TYPE" where o_act_type.FILE instanceof plc.dataset order by ["LEVEL"]) {
		with(plw.no_locking){
			o_act_type.FILE = s_target_file;
		}
		//Migration des valeurs des anciens champs V6 vers les nouveaux champs E7
		o_act_type.AH_UA_B_IS_A_WP = o_act_type.AU_UA_L1B_B_AH_WORKPACKAGE;
		o_act_type.AH_UA_S_WP_FUNCTION = o_act_type.AU_UA_S_DM_FUNCTION;
		o_act_type.AH_UA_B_EVM_MILESTONE = o_act_type.AU_UA_GML_EVM_MILESTONE;
	}
	
	// Set Aircraft for Activity Type IND
	var aircraft_at = plc.WBS_TYPE.get("IND");
	if (aircraft_at instanceof plc.WBS_TYPE)
	    aircraft_at.AH_UA_B_AIRCRAFT = true;
	//Remise à l'état initial du rattachement du fichier commun source
	o_common_dataset.COMMON_FILES = ah_remove_deleted_files(s_common_dataset_bck);
}

Data Migration usergroups

function ah_pjs_mig_usergroups(){
	// Data Migration usergroups
	//for(var o_UserGroups in #TOOL-BAR::SELECTION-ATOM#){ //debug
	for (var o_UserGroups in "OpxUserGroups".getObjectClass()){
		if(!o_UserGroups.AH_UA_B_LOCAL_GROUP && o_UserGroups.AU_UA_B_DM_LOCAL_GROUP) o_UserGroups.AH_UA_B_LOCAL_GROUP = true;
		if(!o_UserGroups.AH_UA_B_LOCAL_ADMIN && o_UserGroups.AU_UA_B_DM_LOCAL_ADMIN) 
		{
		    o_UserGroups.AH_UA_B_LOCAL_ADMIN = true;
		}
		if(!o_UserGroups.AH_UA_B_LOCAL_ACCESS && o_UserGroups.AU_UA_B_DM_PROG_ACCESS) o_UserGroups.AH_UA_B_LOCAL_ACCESS = true;
		
		// Update function
		o_UserGroups.AH_UA_S_LOCAL_FUNCTION=o_UserGroups.AU_UA_S_DM_FUNCTION;
		// Update program
		o_UserGroups.AH_UA_S_LOCAL_PROG=o_UserGroups.AU_UA_S_DM_PROGRAM;
	}
}

Master schedule grouping (Breakdown_8) is migrated to timeline grouping (_INF_PT_ACT_TYPE_2)
Name, desc and tree structure are taken from Master schedule grouping
Program (AH_S_MS_GRP_PROG) is taken from File if not global program in Master Schedule grouping (AU_UA_B_GLOBAL_PROGRAM)

Data Migration Master Schedule Grouping

function ah_pjs_mig_MasterScheduleGrouping_master_data(){

	var createdObj = new hashtable("string");

	//for(var o_MsG in #TOOL-BAR::SELECTION-ATOM#){ //debug
	for (var o_MsG in "opxBREAKDOWN_8" where o_MsG.FILE instanceof plc.dataset order by ["LEVEL"])
	{

		var s_file_orig = o_MsG.file;
		var s_file_target;
		var s_program;
		
		if (s_file_orig instanceof plc.dataset && s_file_orig?.CLASS!="PROJECT")
		{
			if (s_file_orig=="AU_CF_DATA")
			{
				s_file_target="AH_CF_D_MASTER_DATA";
				s_program = "";
			}
			else
			{
				s_file_target="AH_CF_D_LOCAL_DATA";
				if (o_MsG.CallBooleanFormula(" ?OBJECT_EXISTS(\"_BM_BS\",SUBSTITUTE(\"\",\"AU_CF_DATA_\",FILE) )  "))
					s_program = o_MsG.CallStringFormula(" SUBSTITUTE(\"\",\"AU_CF_DATA_\",FILE)  ");
				else
					s_program = "";
			}
		}
		

		var s_id_pere = o_MsG.8BS.printattribute();
		var o_pere = createdObj.get( s_id_pere );

		var obj = new plc._INF_PT_ACT_TYPE_2(
			NAME:o_MsG.name,
			DESC:o_MsG.desc,
			AH_S_MS_GRP_PROG:s_program,
			NOTE_PAD:o_MsG.NOTE_PAD,
			PARENT:o_pere,
			FILE:s_file_target);
        
        // Set order number after object creation
        obj.ORDER_NUMBER = o_MsG.ORDER_NUMBER;
		createdObj.set( o_MsG.id.printattribute(), obj );
		
		obj.positiveonb();
		o_MsG.AH_UA_N_DM_TARGET_TL = obj.ONB;
	}
	for (var o_MsG in "opxBREAKDOWN_8" where o_MsG.FILE instanceof plc.dataset)
	{
	    var MsCible = plc._INF_PT_ACT_TYPE_2.get(o_MsG.NAME);
	    if(MsCible != undefined && MsCible != ""){
	        MsCible.ORDER_NUMBER=o_Msg.ORDER_NUMBER;
	    }
	}
}

SAP mapping

function ah_pjs_mig_sap_mapping(){
	var sap_mapping_new;
	var count=0;
	for (var sap_mapping_old in "opxAU_PT_SAP_MS_MAPPING" where sap_mapping_old.FILE instanceof plc.dataset)
	{
		sap_mapping_new = new plc.__USER_TABLE_AH_UT_SAP_MAPPING(NAME : sap_mapping_old.AU_AA_S_MAPPING_IMPORT_KEY
													,AH_UA_S_PROGRAM : sap_mapping_old.AU_RA_SAP_PROGRAMME
													,AH_UA_S_SAP_MS_NAME : sap_mapping_old.AU_AA_S_SAP_NAME
													,AH_UA_S_UPH_MS_NAME : sap_mapping_old.AU_AA_S_UPH_NAME
													,AH_UA_UPH_MS_DESC : sap_mapping_old.AU_AA_S_UPH_DESC
													,NOTE_PAD :sap_mapping_old.AU_AA_S_NOTEPAD
													,FILE : "AH_CF_D_MASTER_DATA"
													);
													
		count++;
	}
	
	plw.writetolog("AH Data Migration - Copy of " + count + " sap mapping to new table.");
}

function ah_pjs_mig_level_of_confidentiality(){	
	for (var old_lc in "OpxAU_PT_CONFIDENTIALITY" where old_lc.FILE instanceof plc.dataset)
	{
		var new_lc = new plc.__USER_TABLE_AH_UT_LEVEL_OF_CONFIDENTIALITY (#NAME#,old_lc.NAME,
		#DESC#,old_lc.DESC,
		#FILE#,"AH_CF_D_MASTER_DATA");
		new_lc.AH_UA_B_DEACTIVATE_HIGHLIGHT = old_lc.AU_UA_B_ACTIVE;
	}
}

function ah_pjs_mig_business_project_status(){
	for (var bps in plc._STA_PT_PRJ_STATUS where bps.FILE instanceof plc.dataset)
	{
		bps.FILE="AH_CF_D_MASTER_DATA";
	}
}

function ah_pjs_mig_calendars() {
	var s_target_file = "AH_CF_D_MASTER_DATA";
	for (var o_cal in "opxCALENDAR" where o_cal.FILE instanceof plc.dataset order by ["NAME"]){
	    plw.writetolog("[DEBUG] AH Data Migration - ah_pjs_mig_calendars - " + o_cal + " was in " + o_cal.FILE);
		o_cal.FILE = s_target_file;
	}
}

Z1T24UP20-6719 - SAP Programs

function ah_pjs_mig_sap_programs(){
	var list_sap_prog = new vector();
	for (var prog in plc.5BS where prog.AU_AA_S_SAP_ID!="")
	{
		var list_sap_prog2 = prog.AU_AA_S_SAP_ID.split(",");
		for (var sap_prog in list_sap_prog2)
		{
			list_sap_prog.push(sap_prog);
		}
	}
	list_sap_prog = list_sap_prog.removeduplicates();
	
	for (var prog in list_sap_prog)
	{
		var sap_prog = new plc.__USER_TABLE_AH_UT_SAP_PROGRAM( NAME : prog
															  ,DESC : prog
															  ,FILE : "AH_CF_D_MASTER_DATA");
	}
}

function export_dpm(String sDumpDefaultName : "", String sDatasetFilter : "NOT PROCESSES",String sProjectFilter : "false", String sUserFilter : "false", String sUsergroupFilter : "false",Boolean bDownload : true){
  
  var Date d_now = new date();
  var String s_dpm_full_name = (sDumpDefaultName == "") ? "DATABASE_NAME".callmacro() + " - " + d_now.tostring("YYYY-MM-DD:HHhMMmSSs").substitutestring(":","_") + ".dpm" : sDumpDefaultName + ".dpm";

  // building selecteddataset vector based on filter formula on 
  var Vector v_selectedDatasets = new vector();
  
  with ([plw.map_shadowed_objects, plw.no_locking]) {
    // select common files with dataset filter
    for (var plc.common_dataset o_file in plc.common_dataset where o_file.callbooleanformula(sDatasetFilter)){
      if (o_file.OBJECT_NUMBER instanceof number && o_file.OBJECT_NUMBER>0) {
        v_selectedDatasets.push(o_file);
      }
    }

    // select projects with project filter
    for (var plc.ordo_project o_pj in plc.ordo_project where o_pj.callbooleanformula(sProjectFilter)){
      if (o_pj.OBJECT_NUMBER instanceof number && o_pj.OBJECT_NUMBER>0) {
        v_selectedDatasets.push(o_pj);
      }
    }
    
    // select workspaces with project filter
    for (var plc.workspace o_wrkspc in plc.workspace where o_wrkspc.project.callbooleanformula(sProjectFilter)){
      if(o_wrkspc.OBJECT_NUMBER instanceof number && o_wrkspc.OBJECT_NUMBER>0) {
        v_selectedDatasets.push(o_wrkspc);
      }
    }

    // select users with user filter
    for (var plc.opx2_user o_user in plc.opx2_user where o_user.callbooleanformula(sUserFilter)){
      if (o_user.OBJECT_NUMBER instanceof number && o_user.OBJECT_NUMBER>0) {
        v_selectedDatasets.push(o_user);
      }
    }

    // select user groups with user group filter
    for (var plc.usergroup o_user_group in plc.usergroup where o_user_group.callbooleanformula(sUsergroupFilter)){
      if (o_user_group.OBJECT_NUMBER instanceof number && o_user_group.OBJECT_NUMBER>0) {
        v_selectedDatasets.push(o_user_group);
      }
    }
  }

  //building pathname
  var String s_admin_pcs_folder = context.CallStringFormula("$TEMPORARY_FILES_DIRECTORY").substitutestring("/tmp/plw/","/tmp/adminPSC/");  //can be replaced by function getpscdirectory in v7
  var String s_fullpath = s_admin_pcs_folder + "dpm/" + s_dpm_full_name;
  var Pathname o_fullpath = new pathName(s_fullpath);
  
  // setting dpm options
  var list l_dumpOptions = dumpklib.getDefaultDumpOptions(this:#MODULE#);
  l_dumpOptions.setplist(#DUMP-FILE#,o_fullpath);
  l_dumpOptions.setplist(#DUMP-CACHE-OBJECTS#,false);
  l_dumpOptions.setplist(#DUMP-AUDIT-OBJECTS#,false);
  l_dumpOptions.setplist(#DUMP-STATUS-OBJECTS#,false);
  l_dumpOptions.setplist(#ONLY-SOME-OBJECTS#,false);
  l_dumpOptions.setplist(#DUMP-DOCUMENT-OBJECTS#,true);
  l_dumpOptions.setplist(#ANONYMIZE-OBJECTS#,false);
  l_dumpOptions.setplist(#SELECTED-DATASETS#,v_selectedDatasets.sort("<").parselist());
  
  // generating dpm
  #MODULE#.dumpdatabase(s_fullpath,l_dumpOptions);

  //downloading dpm
  if(bDownload == true){
    plw.downloadFileFromServer(s_fullpath + ".gz");
  }
  
  return s_fullpath + ".gz";
}

function ah_prog_motm_act_rel(){
  var rel = new ObjectRelation(plc.5BS,"AH_REL_PROG_OTM_ACT");
  rel.Mapmethod = ah_prog_motm_act;
  rel.ConnectedToClass = plc.workstructure;
  rel.Comment = "OTM activities of the program";
}

Colorhandler for activities maintained by SAP

function ah_js_sap_colorhandler_function(gantt){
	var color = false;
	if ( this instanceof plc.workstructure){
		if(this.AH_UA_SAP_MAPPING_KEY != "" && this.AH_UA_B_SAP_SYNCHRO) {
			color = plw.color("LIGHT-YELLOW");
		}
	}
	return color;
}

function ah_js_sap_colorhandler_wrapper(Gantt){
	gantt.addcolorhandler(ah_js_sap_colorhandler_function);
}

Function to import files on server manually

function ah_js_manual_sap_import(MAR,DON,Contract){
	var sSelectedPath = context.AH_CS_SAP_IMPORT_IN;
	
	if (MAR)
	{
		var vTmpPathsObject = plw.selectfile("SAP Marignane","","*.txt").getserverfiles();
		var sFileName = "sap_Import_MAR.txt";
		var vTmpPaths = vTmpPathsObject[0];
		var sTmpPath = vTmpPaths[0];
		var sDestinationPath = sSelectedPath+sFileName;
		var oFileToMove = new pathname(sTmpPath);
		oFileToMove.copyFile(sDestinationPath, true);
	}	
	
	if (DON)
	{
		var vTmpPathsObject = plw.selectfile("SAP Donauworth","","*.txt").getserverfiles();
		var sFileName = "sap_Import_DON.txt";
		var vTmpPaths = vTmpPathsObject[0];
		var sTmpPath = vTmpPaths[0];
		var sDestinationPath = sSelectedPath+sFileName;
		var oFileToMove = new pathname(sTmpPath);
		oFileToMove.copyFile(sDestinationPath, true);
	}

	if (Contract)
	{
		var vTmpPathsObject = plw.selectfile("SAP Contracts","","*.txt").getserverfiles();
		var sFileName = "sapatprg_co_data.txt";
		var vTmpPaths = vTmpPathsObject[0];
		var sTmpPath = vTmpPaths[0];
		var sDestinationPath = sSelectedPath+sFileName;
		var oFileToMove = new pathname(sTmpPath);
		oFileToMove.copyFile(sDestinationPath, true);
	}	
}

Batch functions
Remove space at the end of string

function ah_js_trim(str){
	str = str.replaceregexp(" +$","");
	return str;
}

Get toplevel activity

method ah_js_get_unique_top_level on plc.ordo_project(){
	var v_root = plw._UtilsGetTopLevel(this);
	if(v_root instanceof vector && v_root.length == 1) return v_root[0];
	else return false;
}

function ah_rel_tl_groups(){
  var rel = new ObjectRelation(plc.dataset,"AH_REL_TH_GROUPS");
  rel.Mapmethod = ah_get_tl_groups;
  rel.ConnectedToClass = plc._INF_PT_ACT_TYPE_2;
  rel.Comment = "Timeline groupings (Rel)";
}

function ah_az_fn_trend_datasource_count(File, stype) {
	var vActVect = ah_az_fn_trend_datasource_list(File, stype);
	var number = vActVect.length;
	return number;
}

function ah_az_fn_trend_datasource_list(File, stype) {
	var vActVect = new vector();
	var new_vActVect = new vector();
	with(file.fromobject()) {

		for (var oAct in plc.WORK_STRUCTURE  where(oAct.get(stype) == true) && oAct.act_filter order by ['PS'])
		{
			vActVect.push(oAct);
		}
	}
	return vActVect;
}

function ah_az_fn_trend_initset_boundaries() {
	var sTimeUnit = context.time_unit5.printattribute();
	if(sTimeUnit == "DAY") {
	    context.time_unit5 = "week";                                                         
        context.date_format5 = "OpxDateFormat".get("JJ/MM/AA");
        sTimeUnit = context.time_unit5.printattribute();
	}
	if( context.AH_CHART_DD==undefined) context.AH_CHART_DD=context.GEN_CHART_DD;
	if( context.AH_CHART_ED==undefined) context.AH_CHART_ED=context.GEN_CHART_ED;
	
	var mindatex = context.calldateformula("PERIOD_START('"+context.AH_CHART_DD+"',\""+sTimeUnit+"\",0)");
	var maxdatex = context.calldateformula("PERIOD_START('"+context.AH_CHART_ED+"',\""+sTimeUnit+"\",1)");
	var mindatey = context.calldateformula("PERIOD_START('"+context.AH_CHART_DD+"',\""+sTimeUnit+"\",0)");
	var maxdatey = context.calldateformula("PERIOD_START('"+context.AH_CHART_ED+"',\""+sTimeUnit+"\",1)");
	
	// stores data in context
	context.az_var_trend_mindatex = mindatex;
	// plw.alert( "mindatex : " + mindatex );
	// plw.alert( "Date réelle : " + context.calldateformula("PERIOD_START('"+context.AH_CHART_DD+"',\""+sTimeUnit+"\",0)"));
	// plw.alert( "context.az_var_trend_mindatex : " + context.az_var_trend_mindatex);
	context.az_var_trend_maxdatex = maxdatex;
	context.az_var_trend_mindatey = mindatey;
	context.az_var_trend_maxdatey = maxdatey;
}

Retrieving colors from activities

function ah_az_fn_trend_datasource_colors(vAct_vect) {
	var vColorVect = new hashtable("STRING");
	for (var vAct in vAct_vect where vAct instanceof plc.WORK_STRUCTURE) {
		var vActColor = vAct.get("_INF_DA_FINAL_COLOR");
		vColorVect.set(vAct.printattribute(), vActColor);
	}
	return vColorVect;
}

function retrieving the X coordinates dates (dates when the save occured)

function ah_az_fn_trend_getXdates(oAct) {
	var vDates = new vector();
	var vToday = context.calldateformula("$DATE_OF_THE_DAY");
	var Tablekey = new keyattribute("OpxDatesForTimeTime","AH_UA_S_TIMECURVE_ACT",oAct);
	if (oAct instanceof plc.WORK_STRUCTURE) {
	    with(Tablekey.fromobject()) {
    		for (var vHist in "OpxDatesForTimeTime" where vHist.AH_UA_S_TIMECURVE_ACT==oAct order by ['AH_UA_D_TIMECURVE_DATEX']){		
    			var oAct_xDate = vHist.get("AH_UA_D_TIMECURVE_DATEX");
    			if (oAct_xDate != undefined) {
    				vDates.push(oAct_xDate);
    			}
    		}
	    }
		//We push the current date in the vector
		//if (oAct.get("AF") != undefined ) vDates.push(vToday);
	}
	return vDates;
}

Function retrieving the Y coordinates dates (Planned finish)

function ah_az_fn_trend_getYdates(oAct) {
	var vDates = new vector();
	var Tablekey = new keyattribute("OpxDatesForTimeTime","AH_UA_S_TIMECURVE_ACT",oAct);
	if (oAct instanceof plc.WORK_STRUCTURE) {
	    with(Tablekey.fromobject()) {
    		for (var vHist in "OpxDatesForTimeTime" where vHist.AH_UA_S_TIMECURVE_ACT==oAct order by ['AH_UA_D_TIMECURVE_DATEX']){		
    			var oAct_yDate = vHist.get("AH_UA_D_TIMECURVE_DATEY");
    			if (oAct_yDate != undefined) {
    				vDates.push(oAct_yDate);
    			}
    		}
		//if (oAct.get("AF") != undefined ) vDates.push(oAct.get("AF"));
	    }
	}
	return vDates;
}

function to exclude dates after Actual Finish

function ah_az_fn_trend_update_actualfinish(oAct, vXdates, vYdates) {
	var vResult = new hashtable("STRING");
	if (oAct instanceof plc.WORK_STRUCTURE) {
		var vActFinish = oAct.get("AF");
		 if (vActFinish!="" && vActFinish!=undefined){
		//if (false) {
			// Activity has an actual finish. It will be the last point
			var vResult_x = new vector();
			var vResult_y = new vector();
			for (var vIndex = 0; vIndex < vXdates.length; vIndex++) {
				if (vXdates[vIndex] < vActFinish) {
					vResult_x.push(vXdates[vIndex]);
					vResult_y.push(vYdates[vIndex]);
				}
			}
			vResult_x.push(vActFinish);
			vResult_y.push(vActFinish);
			vResult.set("X", vResult_x);
			vResult.set("Y", vResult_y);
		} else {
			vResult.set("X", vXdates);
			vResult.set("Y", vYdates);
		}
	}
	return vResult;
}

sdelattre 2024-12-12

function ah_js_increase_y_boundary_if_needed(vYcord) {
	var maxdatey = context.az_var_trend_maxdatey;  //init max
	if (maxdatey instanceof date && vYcord != false && vYcord != undefined && vYcord.length > 0 && vYcord[0] != undefined ) {
		for (var Ycoord in vYcord where (Ycoord instanceof date && Ycoord > maxdatey)) {
				maxdatey = Ycoord;
		}
		
	}
	context.az_var_trend_maxdatey = maxdatey;
}

function AH_JS_UPDATE_FIRST_ITEMS() {
	var oAct_list = ah_az_fn_trend_datasource_list(plw.CurrentPageObject(), "AH_UA_B_TIMETIME_SELECTED");
	var nselected_acts = oAct_list.length;
	var max_elmt = math.round(context.AH_CS_SET_NUMBER_MILESTONE);
	if (nselected_acts < max_elmt)
		max_elmt = nselected_acts;
	var oAct_list = oAct_list.subseq(0, max_elmt);
	var new_vActVect = new vector();
	var new_vect = new vector();
	for (var oAct in oAct_list order by ['PS']) {
		new_vect.push(oAct.printattribute());
	}
	context.AH_AA_S_FIRST_TEN_ITEM = new_vect.join(",");
	// plw.alert( context.AH_AA_S_FIRST_TEN_ITEM );
}

function ah_Pm_Draw_time_curve(arg, stype) {
	// This is the project or virtual dataset currently opened
	var vFile = arg;
	// This is the list of milestones selected for display
	var new_vActVect = new vector();
	var oAct_list = ah_az_fn_trend_datasource_list(vFile, stype);
	// writeln("oAct_list=&&&=>"+oAct_list)
	var nselected_acts = oAct_list.length;
	// context.AU_AA_L1_N_TIMECURVE_ACTSELECT = nselected_acts;
	// reducing the selection to 10 first elements
	// var max_elmt = math.min(oAct_list.length, 10);
	var max_elmt = math.round(context.AH_CS_SET_NUMBER_MILESTONE);
	if (nselected_acts < max_elmt)
		max_elmt = nselected_acts;
	var oAct_list = oAct_list.subseq(0, max_elmt);

	// alert("oAct_list=====>"+oAct_list)
	//KBE 27/02 : limiter l'affichage
	var oAct_list_ID = new vector();
	// alert("oAct_list: " + oAct_list)
	if (oAct_list != false && oAct_list.length > 0 && oAct_list.length <= max_elmt) {
		// Initial setup of boundaries
		// plw.alert( "init boundaries");
		ah_az_fn_trend_initset_boundaries();
	}

	// This is the list of colors for the selected activities
	var vHtcolors = ah_az_fn_trend_datasource_colors(oAct_list);

	// This will be the list of displayed curves
	var curves = new vector();

	var vCoordinates_ht = new hashtable();

	for (var oAct in oAct_list) {
		// plw.alert("oAct"+oAct);
		//KBE 27/02 : limiter l'affichage
		oAct_list_ID.push(oAct.printattribute());
		var xcoord = new vector();
		var ycoord = new vector();

		// The X coordinates will be the dates were the save has been performed
		xcoord = ah_az_fn_trend_getXdates(oAct);
		// The Y coordinates are  the milestone historical dates at these points
		ycoord = ah_az_fn_trend_getYdates(oAct);
		var vFiltered_dates = ah_az_fn_trend_update_actualfinish(oAct, xcoord, ycoord);
		xcoord = vFiltered_dates.get("X");
		ycoord = vFiltered_dates.get("Y");
		vCoordinates_ht.set("X_" + oAct.printattribute(), xcoord);
		vCoordinates_ht.set("Y_" + oAct.printattribute(), ycoord);

		ah_js_increase_y_boundary_if_needed(ycoord);
		
		// We get the activity color
		var vLineColor = undefined;
		var vAct_id = oAct.printattribute();
		var vAct_color = vHtcolors.get(vAct_id);
		if (vAct_color != undefined)
			vLineColor = plw.color(vAct_color);

		// We create the trend curve
		var vCurveName = oAct._INF_DA_S_LEGEND_LABEL + " [" + oAct.project._INF_DA_S_LEGEND_LABEL + "]";
		var curve = new curve(xcoord,
				Ycoord,
				"Name", vCurveName,
				"color", vLineColor,
				"linecolor", vLineColor,
				"linewidth", 2,
				"type", "curve");
		curves.push(curve);
	}
	//KBE 27/02 : limiter l'affichage du style appliquer sur les activités AU_ST_ACT_COLOR_TIME_TIME_DIAG
	context.AH_AA_S_FIRST_TEN_ITEM = oAct_list_ID.join(",");
	// plw.alert( "context.AH_AA_S_FIRST_TEN_ITEM : " + context.AH_AA_S_FIRST_TEN_ITEM  );
	//bisectrix drawing
	
	// plw.alert( "context.az_var_trend_mindatey" + context.az_var_trend_mindatey);
	// plw.alert( "context.az_var_trend_mindatex" + context.az_var_trend_mindatex);
	// plw.alert( "context.az_var_trend_maxdatey" + context.az_var_trend_maxdatey);
	// plw.alert( "context.az_var_trend_maxdatex" + context.az_var_trend_maxdatex);		
	
	if (context.az_var_trend_mindatey != undefined && context.az_var_trend_mindatex != undefined &&
		context.az_var_trend_maxdatex != undefined && context.az_var_trend_maxdatey != undefined && 
		context.az_var_trend_mindatex instanceof date && context.az_var_trend_maxdatex instanceof date &&
		context.az_var_trend_mindatey instanceof date && context.az_var_trend_maxdatey instanceof date) {
			
		// CREATION OF BISECTRIX
		// plw.alert( "BISECTRIX" );
		var vBisectrice_x = new vector();
		var sTimeUnit = context.time_unit5.printattribute();
		var Mindatex = context.calldateformula("PERIOD_START('"+context.AH_CHART_DD+"',\""+sTimeUnit+"\",0)");
		var Maxdatex = context.calldateformula("PERIOD_START('"+context.AH_CHART_ED+"',\""+sTimeUnit+"\",1)");
		
		var TimeUnit = "opxtimeunit".get(sTimeUnit);

		//var Bis_xdatevector = new datevector(TimeUnit, Mindatex, Maxdatex);
		var Bis_xdatevector = [].datevector(TimeUnit, Mindatex, Maxdatex);

		for (var date in Bis_xdatevector) {
			vBisectrice_x.push(date);
		}
		var vLineColor = plw.color("GREY");
		var vLine = 2;
		var curve = new curve(vBisectrice_x,
				vBisectrice_x,
				"Name", plw.write_text_key("projectReporting.timeCurve.bisectrix_curve_name"),
				"color", vLineColor,
				"linecolor", vLineColor,
				"linewidth", vLine,
				"type", "curve");
		curves.push(curve);
		
		// CREATION OF TIME NOW LINE
		var vToday = context.calldateformula("$DATE_OF_THE_DAY");
		var vTimenow_x = new vector();
		vTimenow_x.push(vToday);
		vTimenow_x.push(vToday);

		var vTimenow_y = new vector();
		vTimenow_y.push(Bis_xdatevector[0]);
		vTimenow_y.push(Bis_xdatevector[Bis_xdatevector.length - 1]);

		var vLineColor = plw.color("RED");
		var vLine = 3;
		var curve = new curve(vTimenow_x,
				vTimenow_y,
				"Name", plw.write_text_key("date.timeNow"),
				"color", vLineColor,
				"linecolor", vLineColor,
				"linewidth", vLine,
				"type", "curve");
		curves.push(curve);
			
		var week_or_month = context.time_unit5.printattribute();
		var x_start = context.az_var_trend_mindatex;
		var x_finish = context.az_var_trend_maxdatex;
		// var xdatevector = new datevector(week_or_month, x_start, x_finish);
		var xdatevector = [].datevector(week_or_month, x_start, x_finish);	
		
		var y_start = context.az_var_trend_mindatey;
		var y_finish = context.az_var_trend_maxdatey;
		// var ydatevector = new datevector(week_or_month, y_start, y_finish);
		var ydatevector = [].datevector(week_or_month, y_start, y_finish);

		var XAxis_Legend = "dates history";
		var YAxis_Legend = "Planned finish";
		
		var plot = this.drawcurves(curves,
				// "xmin", context.calldateformula("BEG_OF_MONTH('" + context.AH_CHART_DD + "')"),
				"xmin", x_start,
				"xmax", x_finish,
				"xvalues", xdatevector,
				"xunit", XAxis_Legend,
				"YlMin", context.calldateformula("BEG_OF_MONTH('" + context.AH_CHART_DD + "')"),
				"YlMax", context.AH_CHART_ED,
				"ylunit", YAxis_Legend,
				"ylvalues", ydatevector,
				"drawlegend", (context._PM_AA_B_DISPLAY_TABLE==false) ? true : false,
				"legend-lines", 2);
		// plot.inspect();
		/*
		for (var oAct in oAct_list) {
			var oAct_ydates = vCoordinates_ht.get("Y_" + oAct.printattribute());
			var oAct_xdates = vCoordinates_ht.get("X_" + oAct.printattribute());
			var oAct_actfinish = oAct.get("AF");
			for (var vIndex = 0; vIndex < oAct_ydates.length; vIndex++) {
				var s_x = oAct_xdates[vIndex].sdate;
				var s_y = oAct_ydates[vIndex].sdate;
				var x = plot.x(s_x);
				var y = plot.y(s_y);
				var diameter = undefined;
				var vAct_color = vHtcolors.get(oAct.printattribute());

				if (vAct_color != undefined)
					this.foreground = plw.color(vAct_color);
				diameter = 8;

				// icon is 16x16
				var ximage = x - 8;
				var yimage = y - 8;

				x = x - math.round(diameter / 2);
				y = y - math.round(diameter / 2);
				this.linewidth = 2;
				if (oAct_actfinish != "" && oAct_actfinish != undefined && oAct_xdates[vIndex] >= oAct_actfinish) {
					// this.fillrectangle(x,y,11,11);
				} else {
					// this.fillarc(x,y,math.round(diameter), math.round(diameter), 0, 360*64);
				}
				if (false) {
					// this.drawimage("warning_small",ximage,yimage,true);
				}
			}
		}*/
	}
}

function ah_js_timecurve_batch() {
	// delete history outside of the time window
	//ah_js_timecurve_batch_clean();

	// Save history
	ah_js_timecurve_batch_save();
}

function ah_js_timecurve_batch_clean() {
	// function to clean the history table, reducing the value to the time window
	var logdate = new date();
	plw.writeln("Cleaning of historization for time curve started at " + logdate.tostring("YYYY/MM/DD HH:MM:SS"));
	var count = 0;
	var countdeleted = 0;
	for (var each in "OpxDatesForTimeTime") {
		count++;
		// we delete entries older than now - 24 month
		if (each.AH_UA_D_TIMECURVE_DATEX < context.calldateformula("PERIOD_START('" + context.calldateformula("$DATE_OF_THE_DAY") + "',\"Month\",-24)")) {
			countdeleted++;
			plw.writeln(each + " will be deleted (reason: entry older than 24 month before now)");
			plw.writeln("AH_UA_D_TIMECURVE_DATEX: " + each.AH_UA_D_TIMECURVE_DATEX);
			plw.writeln("less than: " + context.calldateformula("PERIOD_START('" + context.calldateformula("$DATE_OF_THE_DAY") + "',\"Month\",-24)"));
			each.delete();
		} else
			// we delete entries with a CBD higher than now + 24 month
			if (each.AH_UA_D_TIMECURVE_DATEY > context.calldateformula("PERIOD_START('" + context.calldateformula("$DATE_OF_THE_DAY") + "',\"Month\",24)")) {
				countdeleted++;
				plw.writeln(each + " will be deleted (reason: planned finish saved is in more than 24 month after now)");
				plw.writeln("AH_UA_D_TIMECURVE_DATEY: " + each.AH_UA_D_TIMECURVE_DATEY);
				plw.writeln("more than: " + context.calldateformula("PERIOD_START('" + context.calldateformula("$DATE_OF_THE_DAY") + "',\"Month\",24)"));
				each.delete();
			}
	}
	plw.writeln(countdeleted + "/" + count + " entries deleted in history");
	var logdate = new date();
	plw.writeln("Cleaning of historization for time curve finished at " + logdate.tostring("YYYY/MM/DD HH:MM:SS"));
}

function ah_js_timecurve_batch_save() {
	// function to store the dates in the history table
	var logdate = new date();
	plw.writeln("Historization for time curve started at " + logdate.tostring("YYYY/MM/DD HH:MM:SS"));
	var countcreated = 0;
	for (var oAct in "opxActivity" where oAct.AF == undefined && oAct.DU==0 && oAct.AH_UA_B_TIMETIME_TORECORD) {
		if (oAct.PF <= context.calldateformula("PERIOD_START('" + context.calldateformula("$DATE_OF_THE_DAY") + "',\"Month\",24)") &&
			oAct.PF >= context.calldateformula("PERIOD_START('" + context.calldateformula("$DATE_OF_THE_DAY") + "',\"Month\",-24)")) {
			// the line is created only if there is no entry for the same "Act"_"save date"
			var sAct_onb = oAct.printattribute("ONB");
			var sToday = context.calldateformula("$DATE_OF_THE_DAY").tostring("YYYYMMDD");
			var sHist_id = sAct_onb + "_" + sToday;
			var oHist = "OpxDatesForTimeTime".get(sHist_id);
			if (oHist == undefined) {
				countcreated++;
				var oHistocurve = new plc.__USER_TABLE_AH_UT_TIMECURVE_DATES(
						AH_UA_D_TIMECURVE_DATEX: context.calldateformula("$DATE_OF_THE_DAY"),
						AH_UA_D_TIMECURVE_DATEY: oAct.AH_UA_PLANNED_DATE,
						AH_UA_S_TIMECURVE_ACT: oAct,
						// AU_AA_S_TIMECURVE_PRJ,		oAct.printattribute("PROJECT"),
						NAME: sHist_id,
						// saved in project
						FILE: "AH_CF_D_MASTER_DATA"
					);
			}
		}
	}
	plw.writeln(countcreated + " entries created in history");
	var logdate = new date();
	plw.writeln("Historization for time curve finished at " + logdate.tostring("YYYY/MM/DD HH:MM:SS"));
}

function ah_js_timecurve_clean_all() {
	var logdate = new date();
	plw.writeln("Cleaning of all historization for time curve started at " + logdate.tostring("YYYY/MM/DD HH:MM:SS"));
	var countdeleted = 0;
	for (var each in "OpxDatesForTimeTime") {
		countdeleted++;
		each.delete();
	}
	var logdate = new date();
	plw.writeln("Cleaning of all historization for time curve finished at " + logdate.tostring("YYYY/MM/DD HH:MM:SS"));
	plw.writeln(countdeleted + " entries deleted");
}

function ah_rel_wp_link(){
  var rel = new ObjectRelation(plc.dataset,"AH_REL_WP_LINK");
  rel.Mapmethod = ah_get_wp_links;
  rel.ConnectedToClass = plc.constraint;
  rel.Comment = "Wp links";
}

function ah_rel_wp_for_workbox(){
  var rel = new ObjectRelation("OpxContextOpx2","AH_REL_WP_FOR_WORKBOX");
  rel.Mapmethod = ah_get_wp_for_workbox;
  rel.ConnectedToClass = plc.network;
  rel.Comment = "Workpackage for workbox";
}

function ah_rel_be_for_workbox(){
  var rel = new ObjectRelation("OpxContextOpx2","AH_REL_BE_FOR_WORKBOX");
  rel.Mapmethod = ah_get_be_for_workbox;
  rel.ConnectedToClass = plc.budget_line;
  rel.Comment = "Budget Elements for workbox";
}

function ElearningTreeviewCallback(plc._GUI_PT_ELEARNING Subject){
  if(Subject Instanceof plc._GUI_PT_ELEARNING){
    SetSelectedSubjectInTreeview(Subject);
    //reset subject onb to view
     context._ELEARN_AA_N_SUBJECT_TO_VIEW_ONB = 0;
    //Redraw the path otherwise it is not updated
    plw.redrawallwindows();
  }
}

function GetSelectedSubjectIntreeviewId(){
  var plc._GUI_PT_ELEARNING Subject = GetTreeviewSubject();
  if(Subject != false){
    return Subject.Printattribute();
  }
  return "";
}

function GetSelectedSubjectInTreeview(){
  return GetTreeviewSubject();
}

function SetSelectedSubjectInTreeview(plc._GUI_PT_ELEARNING Subject){
  SettreeviewSubject(Subject);
  //  context.ELEARNING_SELECTED_TREEVIEW_SUBJECT = Subject;
}

function GetListOfSubjectParent(plc._GUI_PT_ELEARNING Subject){
  var Result = Subject.comment;
  if(Subject.parent instanceof plc._GUI_PT_ELEARNING && (!Subject.parent.internal)){
    Result += "@@" + GetListOfSubjectParent(Subject.Parent);
  }
  return Result;
}

function GetSelectedSubjectPath(){
  var plc._GUI_PT_ELEARNING SelectedSubject = GetSelectedSubjectInTreeview();
  if(SelectedSubject instanceof plc._GUI_PT_ELEARNING){
    var ListOfParent = GetListOfSubjectParent(SelectedSubject);
    return ListOfParent.split("@@").reverse();
  }
  return false;
}

return the element to display in the viewer

function GetSelectedElearningDoc(){
  return context._ELEARN_AA_N_SUBJECT_TO_VIEW_ONB;
}

function ElearningRightPanelCallback(graphics graph){
  context._ELEARN_AA_B_RIGHT_PANEL_CONDITION = (!context._ELEARN_AA_B_RIGHT_PANEL_CONDITION);
}

function DrawRightArrowforElearning(graphics graph){
  var number menuwidth = 35;
  var number menuheight = graph.height - 4;
  var number menux = graph.width - menuwidth;
  var number menuy = 0;
  var string fieldtoupdate = "_ELEARN_AA_B_RIGHT_PANEL_CONDITION";
  var plc.image img = (!context.get(fieldtoupdate)) ?"opximage".get("ic_chevron_right_grey_24") :"opximage".get("ic_chevron_left_grey_24");
  var foregroundcolor = plw.color("CARDSBCKG");
  graph.foreground = foregroundcolor;
  graph.fillrectangle(menux,menuy,menuwidth,menuheight + 2);
  if(img instanceof plc.image){
    var imagex = math.round(menux + (menuwidth/2 - img.width/2));
    var imagey = math.round(menuy + (menuheight/2 - img.height/2));
    graph.drawimage(img,imagex,imagey,true,img.width,img.height);
    var mousablearea = graph.createmousablearea(imagex,imagey,imagex + menuwidth,imagey + menuheight);
    mousablearea.priority = 1;
    mousablearea.ReplayKey = "ELEARNING_RIGHT_PANEL_DISPLAY_ARROW";
    mousablearea.onclick = ElearningRightPanelCallback.closure(graph);
    mousablearea.bubblehelp = #@"ihm.display_right_panel".current;
    mousablearea.declaremousablearea(graph);
  }
}

function DrawElearningTreeviewPath(graphics graph){
  var vector SelectedPath = GetSelectedSubjectPath();
  if(SelectedPath instanceof vector){
    var number margin = 5;
    var number marginbetweentextandimage = 0;
    var plw.font font = plw._ihm_GetFont(10,false);
    var plc.image separatorimage = plc.image.get("ic_chevron_right_grey_24");
    var number SepImageWidth = separatorimage.width;
    var number SepImageheight = separatorimage.height;
    var number startx = margin;
    var number imagey = this.height/2 - SepImageheight/2;
    graph.foreground = plw.color("FDNSF");
    graph.font = font;
    //draw directory path
    for(var i = 0;i <= SelectedPath.length -1;i++){
      var string path = SelectedPath[i];
      var number pathwidth = font.textwidth(path,path.bytelength);
      graph.drawstring(Path,path.bytelength,math.round(startx),0,math.round(pathwidth),graph.height,"left","center");
      //do not draw the imag if it is the last element
      if(i < SelectedPath.length -1){
	var number imagex = pathwidth + marginbetweentextandimage;
	graph.drawimage(separatorimage,math.round(imagex),math.round(imagey),true,SepImageWidth,SepImageheight);
	startx +=  pathwidth + SepImageWidth + marginbetweentextandimage;
      }else{
	startx += pathwidth + marginbetweentextandimage;
      }
    }
    //add selected subject path at the end
    var SelectedSubject = GetSelectedElearningDoc();
    if(SelectedSubject instanceof number && SelectedSubject != 0){
      var plc._GUI_PT_ELEARNING SubjectObj = plc._GUI_PT_ELEARNING.get(SelectedSubject);
      var string SubjectComment = SubjectObj.Comment;
      if(SubjectComment instanceof string){
	var number LabelWith = font.textwidth(SubjectComment,SubjectComment.bytelength);
	var number imagex = startx + marginbetweentextandimage;
	graph.drawimage(separatorimage,math.round(imagex),math.round(imagey),true,SepImageWidth,SepImageheight);
	//draw the string
	graph.drawstring(SubjectComment,SubjectComment.bytelength,math.round(imagex + marginbetweentextandimage + SepImageWidth),0,math.round(LabelWith),graph.height,"left","center");
	
      }
      //draw the right arrow
      DrawRightArrowforElearning(graph);
    }
  }
}

function SetTreeviewSubject(plc._GUI_PT_ELEARNING Subject){
  Context._ELEARN_AA_N_TREEVIEW_SUBJECT = Subject.onb;
}

function GetTreeviewSubject(){
  var plc._GUI_PT_ELEARNING Subject = plc._GUI_PT_ELEARNING.get(Context._ELEARN_AA_N_TREEVIEW_SUBJECT);
  return Subject instanceof plc._GUI_PT_ELEARNING ? Subject : false;
}

reset selected element when clicking on the root item of the treeview

function AllitemtreeviewmenuCallback(){
  Context._ELEARN_AA_N_TREEVIEW_SUBJECT = 0;
}

_ELEARN_AA_N_TREEVIEW_SUBJECT

function DrawElearningTreeview(widget javamenu){
  if(Javamenu instanceof javamenu){
    var Checkhash = new hashtable("OBJECT");
    var Rootitem =  javamenu.Appendmenuitem("","");
    var AllItem = javamenu.Appendmenuitem(#@"elearning.all_elearning".current,function(){AllitemtreeviewmenuCallback();});
    AllItem.image = plc.image.get("ic_folder_close_grey_18");
    var plc._GUI_PT_ELEARNING SelectedSubject = GetTreeviewSubject();//context.ELEARNING_SELECTED_TREEVIEW_SUBJECT;
    //set the plus and minus icon
    javamenu.plus_icon = "opximage".get("ic_keyboard_arrow_right_grey_18");
    javamenu.minus_icon = "opximage".get("ic_keyboard_arrow_down_grey_18");
    var String Searchstring = context._INF_AA_S_FILTER == "" ? "opx_GUI_PT_ELEARNING" : context._INF_AA_S_FILTER.indexrequest(plc._GUI_PT_ELEARNING);
    for(var subject in Searchstring order by ['_ELEARN_AA_N_ORDER','HIERARCHICAL_CODE']){
      if(subject._ELEARN_NF_B_FILTER_TYPE && (!Subject.get("?empty"))){
	var item = undefined;
	var plc._GUI_PT_ELEARNING Parent = Subject.Parent;
	var Parent = Checkhash.get(Subject.Parent);
	if(Parent instanceof plw.newmenuitem){
	  item  = Parent.Appendmenuitem(Subject.Comment_multi_lingual,plw.function_getlispCallable(ElearningTreeviewCallback.closure(item,subject)));
	  Checkhash.set(Subject,item);
	}else{
	  //add the item in the hashtable
	  item = AllItem.appendmenuitem(Subject.comment_multi_lingual,plw.function_getlispCallable(ElearningTreeviewCallback.closure(item,subject)));
	  Checkhash.set(Subject,item);
	}
	if(item instanceof plw.newmenuitem){
	  item.image = plc.image.get("ic_folder_close_grey_18");
	  if(SelectedSubject instanceof plc._GUI_PT_ELEARNING && SelectedSubject == Subject){
	    item.foreground = plw.color("_ISSD");
	  }else{
	  item.foreground = plw.color("FDNSF");
	  }
	}
      }
    }
  }
}

function DrawBackimage(graphics graph){
  var plc.image image = plc.image.get("ic_arrow_back_grey_24");
  if(image instanceof plc.image && context._ELEARN_AA_N_SUBJECT_TO_VIEW_ONB != 0){
    image.opximage_drawCentered(this,image.width,image.height);
  }
}

function ElearningFolderCallback(plc._GUI_PT_ELEARNING Subject){
  SetTreeviewSubject(Subject);  
  //reset subject to view field
  context._ELEARN_AA_N_SUBJECT_TO_VIEW_ONB = 0;
  plw.redrawallwindows();
}

function DrawElearningFolderImage(graphics graph,plc._GUI_PT_ELEARNING Subject){
  var FolderImage = plc.image.get("ic_folder_grey_48");
  if(FolderImage instanceof plc.image){
    var number imagewidth = FolderImage.width;
    var number imageheight = FolderImage.height;
    var number imagex = graph.width/2 - imagewidth/2;
    var number imagey = graph.height/2 - imageheight/2;
    graph.drawimage(FolderImage,math.round(imagex),math.round(imagey),true,imagewidth,imageheight);
    var mousablearea = graph.createmousablearea(math.round(imagex),math.round(imagey),math.round(imagex + imagewidth),math.round(imagey + imageheight));
    mousablearea.priority = 1;
    mousablearea.onclick = ElearningFolderCallback.Closure(Subject);
    mousablearea.declaremousablearea(graph);
  }
}

function DrawElearningthumbnailImage(graphics graph, plc._GUI_PT_ELEARNING Subject){
  if(Subject._gui_aa_s_elearning_type != ""){
    graph._Elearn_DrawThumNailImage(Subject);
  }else{
    DrawElearningFolderImage(graph,subject);
  }
}

function DrawSubjectSmallicon(graphics graph,plc._GUI_PT_ELEARNING Subject){
  var image = undefined;
  if(Subject._gui_aa_s_elearning_type != ""){
    var String SubjectType = Subject.getinternalvalue("_GUI_AA_S_ELEARNING_TYPE").ToString();
    image = (SubjectType != undefined) ? plc.image.get(IconHashable.get(SubjectType)) : false;
  }else{
    image = plc.image.get("ic_folder_grey_48");
  }
    if(image instanceof plc.image){
      var number imagewidth = 18;
      var number imageheight = 18;
      var imagex = graph.width/2 -imagewidth/2;
      var imagey = graph.height/2 - imageheight/2;
      graph.drawimage(image,math.round(imagex),math.round(imagey),true,imagewidth,imageheight);
    }
}

function getUrlVars() {
     var vars = {};
     var parts = window.location.href.replace(/[?&]+([^=&]+)=([^&]*)/gi, function(m,key,value) {
     vars[key] = value;});
     return vars;
    }

function getredirectvalue(){
    var url = window.location.search.substring(1);
    var urlstring = \"\";
    var redirect=  \"\";
//we need to add a special case for IE 11 that does not support new URL function
  if(typeof URL === \"function\"){
     urlstring = new URL(document.location.href);
     redirect = urlstring.searchParams.get(\"redirect\");
   }else{
    redirect = getUrlVars()[\"redirect\"];
   }
   // var redirect = urlstring.searchParams.get(\"redirect\");
    return redirect;
  }
function setiframesrc(){
  var url=\"https://player.vimeo.com/video/\";
  var valuetoset = url + getredirectvalue();
  document.getElementById(\"frame1\").setAttribute(\"src\",valuetoset);
  }
</script>

</head>
<body onload=\"setiframesrc();\">
  <iframe id=\"frame1\"  width=100% height=100%   frameborder=\"0\" title=\"xxxxx\" webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe>
</body>
</html>";

function Istheresubjecttodisplay(){
  return (math.round(context._ELEARN_AA_N_SUBJECT_TO_VIEW_ONB) instanceof number && math.round(context._ELEARN_AA_N_SUBJECT_TO_VIEW_ONB) != 0) ? true : false;
}
Istheresubjecttodisplay.exportfunction(false,"BOOLEAN");

//Write the html page content
function Computevideoviewer(stream,args){
  stream.write(htmlcode);
}

//create an object url to draw the html content
function GenerateUrlObjectForVideo(){
  var urlarglist = new vector();
  urlarglist.push("Name");
  urlarglist.push("Video-viewer");
  urlarglist.push("Mime-type");
  urlarglist.push("text/html");
  urlarglist.push("compute-form"),
  urlarglist.push(Computevideoviewer.code);
  Var url = plc.url.makeOpx2ObjectwithPlist(urlarglist);
  //export the url to publish it
  url.exporturl();
  return url;
}

//create the url
GenerateUrlObjectForVideo();

function GetVideoUrl(plc._GUI_PT_ELEARNING Subject){
  var UrlforVideo = "Video-viewer".geturl();
  if(Subject Instanceof plc._GUI_PT_ELEARNING){
    var videourl = Subject._ELEARN_AA_S_VIDEO_URL;
    if(context._ELEARN_AA_B_USE_ALT_URL){
     videourl = Subject._ELEARN_AA_S_ALT_URL;
    }
    if(videourl instanceof string && videourl != ""){
      //parse url to get the video id
      var ParsedUrl = videourl.split("/");
      if(Parsedurl instanceof vector && parsedurl.length > 4){
        var videoId = Parsedurl[3];
	if(videoId instanceof string && videoUrl != ""){
	  return UrlforVideo + "?redirect=" + videoId;
	}
      }
    }
  }
}

//manage e-learning subject link according to the type
function Generateviewerurl(){
  var Subject = plc._GUI_PT_ELEARNING.get(math.round(context._ELEARN_AA_N_SUBJECT_TO_VIEW_ONB));
  if(Subject instanceof plc._GUI_PT_ELEARNING){
    var type = Subject.getinternalvalue("_GUI_AA_S_ELEARNING_TYPE");
    if(type == #VIDEO_URL#){
      var UrlToDiplay =  Getvideourl(Subject);
      return UrlToDiplay;
    }else if(type == #TOUR#){
      Subject._Plw_Tour_LaunchTourFromElearning(false);
      return "";
    }else{
      var Document = "OpxDocument".get(subject._ELEARN_DA_S_DOCUMENT);
      if(document instanceof plc.document){
	return document.GetAnnotationUrl();
      }
    }
  }
  return "";
}
Generateviewerurl.exportfunction(false,"string");


//draw the main title
function DrawMaintitleinThumbnail(graphics graph, plc._GUI_PT_ELEARNING Subject){
  var string label = Subject.COMMENT_MULTI_LINGUAL;
  var font =  plw._ihm_GetFont(9,false);
   var number Cellwidth = graph.width;
  var number Cellheight = graph.height;
  var number labelwidth = font.textwidth(label,label.bytelength);
  var number labelheight = plw.string_getTextHeight(label,Cellwidth,font);
  if(labelwidth > Cellwidth  && labelheight > Cellheight){
    label = label.string_fittowidth(font,Cellwidth,0,label.bytelength,"...");
  }
  graph.foreground = plw.color("FDNSF");
  graph.drawstring(label,label.bytelength,0,0,Cellwidth,graph.height,"left","center");
}


//draw subject comment in the thumbnail
function DrawSubjectDescInThumbnail(graphics graph, plc._GUI_PT_ELEARNING Subject){
  var string label = Subject._ELEARN_AA_S_DETAILS_MULTI_LINGUAL;
  var font =  plw._ihm_GetFont(10,false);
   var number Cellwidth = graph.width;
  var number Cellheight = graph.height;
  var number labelwidth = font.textwidth(label,label.bytelength);
  var number labelheight = plw.string_getTextHeight(label,Cellwidth,font);
  var number cellpadding = 1;
  // if(labelwidth > Cellwidth){
  if(labelheight > Cellheight){
    //label = label.string_fitToWidth(font,Cellwidth,0,label.bytelength,"...");
    label = plw.string_truncateStringOutOfBox(label,font,Cellwidth - cellpadding,Cellheight);
  }
  graph.foreground = plw.color("CHC");
  graph.drawstring(label,label.bytelength,5,0,Cellwidth - cellpadding,graph.height,"left","center");
}

 
namespace _au_evm;
// V1.13 - FME - 20231108 - Z1T24UP20-6463 au_js_evm_distribute_evm_budget --> replace return by alert to interpret end of function
// V1.12 - LFA - 20230926 - Update 'au_js_evm_distribute_evm_budget' --> Parenthesis missing on call to delete
// V1.11 - FLC - 20230908 - Z1T24UP20-6364 - Update 'au_js_evm_move_budget_line_elements' to update Distribution Source before move
// V1.10 - FLC - 20230727 - Z1T24UP20-6259 - Update 'au_evm_get_or_create_budget_line_activity' to manage BCR Perfo cas before Reserve
// V1.9 - LFA - 20230726 - Add type = "Expenditures" for budget element creation in au_js_evm_distribute_evm_budget and au_budget_modifier
// V1.8 - FLC - 20230724 - Z1T24UP20-6259 - Add function 'au_evm_get_or_create_budget_line_activity' & update function 'au_js_evm_move_budget_line_elements'
// V1.7 - LFA - 20230717 - Z1T24UP20-6296 - Modification of function au_budget_modifier to allow input even if there is no budget imported
// V1.6 - LFA - 20230711 - Z1T24UP20-6292 - Modification of function au_js_evm_distribute_evm_budget to modify budget element when it already exist
// V1.5 - LFA - 20230413 - Z1T24UP20-6016 - Modification of functions au_js_evm_distribute_budget and au_budget_modifier to exclude budget elements with type the type of cost with "Show in dashboard by default" = false from dis
// V1.4 - EPI - 20230322 - INC004350580 - Modification of au_js_evm_modifybefore_project_breakdown_1 and au_js_evm_warn_move_budget_line_elements to check if the budget line the user want to use is compatible with the rule in the DMRs
// V1.3 - LFA - 20230233 - Update budget date at the beginning of function au_js_evm_distribute_budget
// V1.2 - LFA - 20230222 - Z1T24UP20-5875 - Modify function au_js_evm_get_milestones_for_distribution - weight of a distributed milestone must be calculated using Budget start & end dates
//                         Z1T24UP20-5873 - Modify function au_js_evm_distribute_budget - Start date & End date budget must be updated according to PS/PF when EVM distribute on budget date is unticked
//                         Z1T24UP20-5874 - Modify function au_js_evm_distribute_budget - when the budget start & end dates are updated, the budget element dates of the corresponding milestone must follow
// V1.1 - LFA - 20230220 - Modify function au_js_evm_distribute_evm_budget to ditribute on SD_BUDGET & ED_BUDGET
// V1.0 - LFA - 20230215 - Modify function au_js_evm_distribute_evm_budget &  au_budget_modifier to add withoulocking to update budget dates
// V0.9 - LFA - 20221117 - Update Start & End date budget on non distributed milestones
//                       - Do not untick EVM Milestones on OTM
// V0.8 - LFA - 20221012 - Take into account budget date or current date for non distributed cost accounts - Z1T24UP20-5163
// V0.7 - LFA - 20220929 - Fix bug on distribution of budget - Z1T24UP20-4983
// V0.6 - FME - 20220923 - Function to get projects in current portfolio -  Improvement of Budget Line filter in dashboards - Z1T24UP20-4786
// V0.5 - LFA - 20220912 - Start date budget and End date budget no working when re-distribute - Z1T24UP20-4785
// V0.4 - LFA - 20220831 - Bug Fixing - Z1T24UP20-4663 / Z1T24UP20-4665 / Z1T24UP20-4664
// V0.3 - LFA - 20220828 - Take current dates if the OP Baseline dates are empty - Z1T24UP20-4474 
// V0.2 - LFA - 20220802 - Do not initialize fields AU_UA_EVM_OP_SD & AU_UA_EVM_OP_ED / Use dates of OP Baseline - Z1T24UP20-4474 
// V0.1 - LFA - 20220722 - Creation of dynamic attribute AU_DA_MS_BUDGET_INPUT - Z1T24UP20-4255

// ----------------------------------------
// OTD 131201 Option "Vertical line at = Fixed date" in PEX Queries is not mapped with a configurable field
// hashtable '_re_js_datestyle_middledateCorrespondancetable' is defined in Processes script _RE_DATESMENU_GLOBAL => added script dependency
// ----------------------------------------

plw._re_js_datestyle_middledateCorrespondancetable.set("reporting.Date_styles.FixedDate", "PERIOD_START(OC.AU_CS_COST_TIMENOW,\"MONTH\",-1)");

// ----------------------------------------
// Function to get projects in current portfolio
// ----------------------------------------


function projects_in_selected_portfolio(plw.string code)
{
   var portfolio = plc._FF_PT_FAVOR_FILTERS.get(context._FF_AA_S_LIST_NAME);
   var vPrjVect = new vector();
   if(portfolio instanceof plc._FF_PT_FAVOR_FILTERS){
	  for(var project in portfolio)
	  {
		 vPrjVect.push(project.name);
	  }
   } else
   {
	  vPrjVect.push(" ");
   }
   return vPrjVect.join(",");
}

projects_in_selected_portfolio.exportfunction(["String"],"STRING","Projects in selected portfolio");

// ----------------------------------------
// Function used to print a hashtable
// ----------------------------------------
method au_js_printattribute_hashtable on hashtable()
{
	var h_vect = new vector();
	for(var o in this)
	{
		if(o instanceof STRING)
		{
			h_vect.push(o);
		} else {
			h_vect.push(o.printattribute());
		}
	}
	return h_vect.join(",");
}

// ----------------------------------------
// EVM Functions used for Budget distribution
// ----------------------------------------

// Function used to return the list of EVM Milestones for Budget distribution
// Return a hashtable of activities
function au_js_evm_get_milestones_for_distribution(o_project, o_sd, o_ed, o_bs1)
{
	var h_act = new hashtable("object");
	if (o_project instanceof plc.project)
	{
		with(o_project.fromobject())
		{
			// Z1T24UP20-5875 - weight of a distributed milestone must be calculated using Budget start & end dates
			for (var o_act in plc.WORK_STRUCTURE where o_act.AU_UA_MILESTONES_FOR_BUDGET_DISTRIB && o_act.SD_BUDGET >= o_sd && o_act.ED_BUDGET <= o_ed)
			{
				// Depending on Distribution mode set at Project level, compatibiliyty check is done between Activity Budget Line and current Budget Line
				if(!(o_project.AU_UA_PRJ_MULTI_1BS) || (o_bs1 instanceof plc.1BS && o_act.BREAKDOWN_1==o_bs1))
				{
					h_act.set(o_act, o_act);
				}
			}
		}
	}
	return h_act;
}

// Distribute budget for the given budget line
function au_js_evm_distribute_evm_budget(o_bud_elmt)
{
	if(o_bud_elmt instanceof plc.BUDGET_LINE && o_bud_elmt.type=="Imported")
	{
		// Bypass locks on distributed budget (AU_LO_EVM_DISTRIBUTED_BUDGET)
		with(plw.no_locking)
		{
			// Get the list of previously distributed milestones
			var hash_ms_distributed = new hashtable("NUMBER");
			var o_ms_onb;
			for(var o_bl in o_bud_elmt.get("r.AU_RA_BUDGET_LINE_SOURCE.BUDGET-LINE") where !o_bl.AU_UA_MILESTONE_PASSED)
			{
				o_ms_onb =  o_bl.ACTIVITY.ONB;
				hash_ms_distributed.set(o_ms_onb,o_bl);
			}
			
			var o_costaccount = o_bud_elmt.COST_ACCOUNT;
			var o_bs1 = o_bud_elmt.BREAKDOWN_1;
			var o_cbs2 = o_bud_elmt._INF_RA_CBS2;
			
			// Check mandatory attributed for budget distribution
			if(o_costaccount instanceof plc.CBS_NODE && o_bs1 instanceof plc.1BS && o_cbs2 instanceof plc._INF_PT_CBS2)
			{
				// Check cost account to distribute budget only on Cost account identified as 'Distributed'
				if(o_costaccount.AU_UA_B_COST_ACC_EVM_DISTRIBUTED)
				{
					// List milestones for budget distribution for the considered budget line

					var h_act = au_js_evm_get_milestones_for_distribution(o_bud_elmt.PROJECT, o_bud_elmt.SD, o_bud_elmt.ED, o_bs1);

					var n_act_count = h_act.CountHash();
					
					if(n_act_count>0)
					{
						// Create new budget lines
						
						// Compute milestone weight
						var n_milestone_weight = o_bud_elmt.AU_UA_BUDGET_TO_DISTRIBUTE / n_act_count;
						
						// Loop on each milestone to distribute budget
						for (var o_milestone in h_act)
						{
							// Z1T24UP20-4474 --> Use dates of OP Baseline
							// First time budget is allocated to a milestone, 'SD_BUDGET' & 'ED_BUDGET' are initialized
							if(o_milestone.SD_BUDGET==undefined)
							{
								o_milestone.SD_BUDGET = o_milestone.PS;
							}
							if(o_milestone.ED_BUDGET==undefined)
							{
								o_milestone.ED_BUDGET = o_milestone.PF;
							}
																					
							// Z1T24UP20-5874 - when the budget start & end dates are updated, the budget element dates of the corresponding milestone must follow
							// Update budget dates on activity (EVM Distributed on Budget Date = false)
							if (o_milestone.AU_UA_DISTRIB_BUDGET_DATE==false)
							{
									o_milestone.SD_BUDGET = o_milestone.PS;
									o_milestone.ED_BUDGET = o_milestone.PF;
							}
							
							var d_sd_bl=o_milestone.SD_BUDGET;
							var d_ed_bl=o_milestone.ED_BUDGET;							
										
							// Creation or update of each budget line
							var bl_to_update = hash_ms_distributed.get(o_milestone.ONB);
							
							if (bl_to_update!=undefined && bl_to_update instanceof plc.BUDGET_LINE)
							{
								// Update existing budget element
								bl_to_update.QUANTITY=n_milestone_weight;
								bl_to_update.SD=d_sd_bl;
								bl_to_update.ED=d_ed_bl;						
								bl_to_update.COST_ACCOUNT=o_costaccount;
								bl_to_update._INF_RA_CBS2=o_cbs2;
								bl_to_update.BREAKDOWN_1=o_bs1;
								bl_to_update.AU_RA_FUNDING_SOURCE=o_bs1.AU_UA_1BS_FUNDING;
								
								// Remove budget element from hashtable because it should not be deleted
								hash_ms_distributed.set(o_milestone.ONB,"");
							}
							else
							{							
								// Create new budget element for the miletone
								var vBudgetLine = new plc.BUDGET_LINE(
									ACTIVITY:o_milestone,
									QUANTITY:n_milestone_weight,
									SD:d_sd_bl,
									ED:d_ed_bl,						
									FILE:o_bud_elmt.PROJECT,
									//Defect Z1T24UP20-3988 : can't distribute with probability in the type field
									//TYPE:o_bs1.AU_UA_1BS_PROBABILITY,
									COST_ACCOUNT:o_costaccount,
									TYPE:"Expenditures",
									_INF_RA_CBS2:o_cbs2,
									AU_RA_BUDGET_LINE_SOURCE:o_bud_elmt,
									BREAKDOWN_1: o_bs1,
									AU_RA_FUNDING_SOURCE:o_bs1.AU_UA_1BS_FUNDING
								);
							}
						}
					} else {
						plw.alert( plw.write_Text_Key("budget.distribute_no_milestone").format(o_bud_elmt.PROJECT.printattribute(), o_bud_elmt.SD.tostring(context.DATE_FORMAT1), o_bud_elmt.ED.tostring(context.DATE_FORMAT1)));
					}
					
					// Delete the previous budget element not updated
					for (var o_ms in hash_ms_distributed)
					{
						var o_bl = hash_ms_distributed.get(o_ms);
						if (o_bl instanceof plc.BUDGET_LINE)
							o_bl.delete();
					}
					
					// Delete hashtable
					h_act.delete();
				}
			}
			
			// Delete hashtable 
			hash_ms_distributed.delete();
		}
	}
}

// Create budget elements for BCR
function au_js_evm_distribute_evm_budget_notified(o_bud_elmt)
{
	// Filter on budget element same budget line and same activity
	var vec = new vector();
	vec.push( o_bud_elmt.BREAKDOWN_1 );
	vec.push( o_bud_elmt.ACTIVITY );
	var filter = plw.objectset( vec );
	with( filter.fromObject())
	{
		for (var o_bud_elmt_scope in plc.BUDGET_LINE where o_bud_elmt_scope.ACTIVITY.AU_UA_MILESTONES_FOR_BUDGET_DISTRIB && !o_bud_elmt_scope._INF_RA_CBS2.AU_UA_CBS2_BCR && o_bud_elmt.type=="Expenditures")
		{	
			// Copy of scope budget line at the new dates
			var list1 = new vector();
			list1.push("_INF_RA_CBS2");
			list1.push(o_bud_elmt._INF_RA_CBS2);
			list1.push("SD");
			list1.push(o_bud_elmt.SD);
			list1.push("ED");
			list1.push(o_bud_elmt.ED);
			var o_new_scope = o_bud_elmt_scope.copywithplist(list1);
			
			// Copy of scope budget line with a negative quantity			
			var list2 = new vector();
			list2.push("_INF_RA_CBS2");
			list2.push(o_bud_elmt._INF_RA_CBS2);
			list2.push("QUANTITY");
			var new_quantity = - o_bud_elmt_scope.QUANTITY;
			list2.push(new_quantity);
			var o_new_scope2 = o_bud_elmt_scope.copywithplist(list2);
		}
	}
}


// Function used to get the list of Projects in o_current_object
function au_js_get_pj_hashtable(o_current_object)
{
	var h_pj = new hashtable("object");

	if (o_current_object instanceof plc.project)
	{
		h_pj.set(o_current_object, o_current_object);
		return h_pj;
	}
	
	if (o_current_object instanceof plc.virtualdataset)
	{
		if (o_current_object.getinternalvalue("selected_datasets") != false)
		{
			for (var o_pj in o_current_object.getinternalvalue("selected_datasets"))
			{
				h_pj.set(o_pj,o_pj);
			} //dans le cas d'un virtual dataset de projet, on renvoie le vecteur de projet
			return h_pj;
		}
		
		// Virtualdataset of activities
		if (o_current_object.getinternalvalue("selectedactivities") != false){
			for (var o_act in o_current_object.getinternalvalue("selectedactivities"))
			{
				h_pj.set(o_act.project,o_act.project);
			}
			return h_pj;
		}
	}
	return h_pj;
}

function au_js_evm_distribute_budget()
{
	var h_messages = new hashtable("string");
	
	// Launch on full project

	var o_currentpageobject = plw.currentpageobject();
	var h_pj = au_js_get_pj_hashtable(o_currentpageobject);
	var o_bud_elmt_bcr;
	var h_cbs2 = new hashtable("object");

	if(h_pj.CountHash()>0)
	{
		if(plw.Question(plw.write_Text_Key("budget.distribute_project").format(h_pj.au_js_printattribute_hashtable())))
		{
			for(var plc.project o_project in h_pj)
			{
				with(o_project.fromObject())
				{
					with(plw.no_locking)
					{
						// Update SD_BUDGET_DATE & ED_BUDGET_DATE
						// Tick AU_UA_DISTRIB_BUDGET_DATE for all milestones				
						for (var o_milestone in plc.WORK_STRUCTURE)
						{	
							// Distributed milestones
							if (o_milestone.AU_UA_MILESTONES_FOR_BUDGET_DISTRIB)
							{
								if (o_milestone.AU_UA_DISTRIB_BUDGET_DATE==false)
								{									
									//Z1T24UP20-5873 - Start date & End date budget must be updated according to PS/PF when EVM distribute on budget date is unticked
									o_milestone.SD_BUDGET = o_milestone.PS;
									o_milestone.ED_BUDGET = o_milestone.PF;
									o_milestone.AU_UA_DISTRIB_BUDGET_DATE=true;
								}								
								else
								{
									// Initiate budget date on first distribution
									if(o_milestone.SD_BUDGET==undefined)
									{
										o_milestone.SD_BUDGET = o_milestone.PS;
									}
									if(o_milestone.ED_BUDGET==undefined)
									{
										o_milestone.ED_BUDGET = o_milestone.PF;
									}
									
									o_milestone.AU_UA_DISTRIB_BUDGET_DATE=true;
								}								
							}
							else
							{							
								//Non distributed milestones 
								if (o_milestone.AU_UA_B_MS_COST_ACCOUNT_NOT_DISTRIBUTED && o_milestone.AU_UA_DISTRIB_BUDGET_DATE==false)
								{
									// Update milestone budget dates
									o_milestone.SD_BUDGET = o_milestone.PS;
									o_milestone.ED_BUDGET = o_milestone.PF;
									o_milestone.AU_UA_DISTRIB_BUDGET_DATE=true;
									
									// Update budget element date
									for (var be in o_milestone.get("BUDGET-LINES"))
									{
										be.SD = o_milestone.SD_BUDGET;
										be.ED = o_milestone.ED_BUDGET;
									}
								}
							}
						}
					}
					
					// Loop on each 'Undistributed' budget elements
					// Z1T24UP20-6016 - Do not distribute the type of cost with "Show in dashboard by default" = false
					for (var o_bud_elmt in plc.BUDGET_LINE where o_bud_elmt.ACTIVITY.IS_TOP_LEVEL && o_bud_elmt.AU_UA_B_BL_COST_ACCOUNT_NOT_DISTRIBUTED==false && o_bud_elmt._INF_RA_CBS2.AU_UA_CBS2_DASHBOARD_DEFAUT) 
					{						
						h_messages.set(au_js_evm_distribute_evm_budget(o_bud_elmt),0);
					}

					// Stop +/- for BCR - Z1T24UP20-5874
					// Loop on each distributed BCR
					/*for (var o_bud_elmt in plc.BUDGET_LINE where !o_bud_elmt.ACTIVITY.IS_TOP_LEVEL && o_bud_elmt._INF_RA_CBS2.AU_UA_CBS2_BCR) 
					{
						au_js_evm_distribute_evm_budget_notified(o_bud_elmt);
					}*/									

				}
			}
		}
	}	
	
	for(var s_message in h_messages where s_message!=undefined)
	{
		plw.alert(s_message);
	}
}

// ----------------------------------------
// EVM Functions used for batch
// ----------------------------------------

function au_js_evm_update_budget_line_cost_time_now()
{
	// Get Cost Time Now
	var o_date = context.get("AU_CS_COST_TIMENOW");
	if(o_date instanceof date)
	{
		// Loop on BUDGET_LINE class
		for(var o_bud_line in plc.BUDGET_LINE where o_bud_line.PROJECT.get("?ACTIVE"))
		{
			var o_fp = o_bud_line.BREAKDOWN_1;
			if(!(o_fp instanceof plc.1BS) || o_fp==undefined || o_fp.printattribute()=="")
			{
				o_fp = o_bud_line.ACTIVITY.BREAKDOWN_1;
			}
			if(o_fp instanceof plc.1BS && o_fp!=undefined && o_fp.printattribute()!="")
			{
				// Update only Budget Lines associated to LINEAR EVM Method
				if(o_fp.Getinternalvalue("AU_UA_1BS_EVM_METHOD").tostring()=="LINEAR")
				{
					with(plw.no_locking)
					{
						o_bud_line.COST_TIMENOW = o_date;
						plw.writetolog("COST_TIMENOW has been update on Budget Line "+o_bud_line.printattribute()+" of project "+o_bud_line.PROJECT.printattribute());
					}
				}
			}
		}
	}
}

// ----------------------------------------
// EVM Dynamic attributes
// ----------------------------------------

// Funtions used to define dynamic attribute on context for EVM Comment on User-defined Portfolio

function au_evm_context_portfolio_slot_reader(s_slot)
{
	var portfolio = plc._FF_PT_FAVOR_FILTERS.get(context._FF_AA_S_LIST_NAME);
	if(portfolio instanceof plc._FF_PT_FAVOR_FILTERS){
	    return portfolio.get(s_slot);
	} else {
		return undefined;
	}
}

function au_evm_context_portfolio_slot_modifier(newValue, s_slot) {
	var portfolio = plc._FF_PT_FAVOR_FILTERS.get(context._FF_AA_S_LIST_NAME);
	if(portfolio instanceof plc._FF_PT_FAVOR_FILTERS){
	    portfolio.set(s_slot, newValue);
	}
}

function au_evm_context_portfolio_slot_locker()
{
	var portfolio = plc._FF_PT_FAVOR_FILTERS.get(context._FF_AA_S_LIST_NAME);
	if(portfolio instanceof plc._FF_PT_FAVOR_FILTERS){
	    return false;
	} else {
		return true;
	}
}

function au_evm_create_dynamic_attribute()
{
	try{
		var slot = new objectAttribute(plc.context_opx2,"AU_DA_EVM_E2E_COMMENT","MULTI-LINE-STRING");
		slot.Comment = "EVM E2E Comment";
		slot.Reader = au_evm_context_portfolio_slot_reader.closure("AU_UA_EVM_E2E_COMMENT");
		slot.Modifier = au_evm_context_portfolio_slot_modifier.closure("AU_UA_EVM_E2E_COMMENT");
		slot.Locker = false;
		slot.hiddenInIntranetServer = true;
		slot.connecting = false;
		
		var slot = new objectAttribute(plc.context_opx2,"AU_DA_EVM_YEARLY_COMMENT","MULTI-LINE-STRING");
		slot.Comment = "EVM Yearly Comment";
		slot.Reader = au_evm_context_portfolio_slot_reader.closure("AU_UA_EVM_YEARLY_COMMENT");
		slot.Modifier = au_evm_context_portfolio_slot_modifier.closure("AU_UA_EVM_YEARLY_COMMENT");
		slot.Locker = false;
		slot.hiddenInIntranetServer = true;
		slot.connecting = false;
	}
	catch(error e){
		// plw.writeln("Could not create slot due to error: " + e);
		plw.alert("Could not create slot due to error: " + e);
	}
}

au_evm_create_dynamic_attribute();

// plw.writetolog("AU_JS_EVM_FUNCTIONS : replace change_filter_activity_change from _CHG_JS2_CHANGE_OF_SCOPE ");

// namespace changeOfScopeMod;

// function change_filter_activity_change(){  
 
  // return true;
// }
// change_filter_activity_change.exportfunction([], "BOOLEAN", "Change activity picklist filter");


// Function used to move objects linked to Budget Line (plc.1BS) to target project (plc.ORDOPROJECT)
// 	- Budget element (plc.BUDGET_LINE) associated to top level activity
//	- BCR (plc._CHG_PT_CHANGE_OF_SCOPE) associated to top level activity
//	- Actuals (plc.INCURRED_EXPENDITURE)

function au_js_evm_move_budget_line_elements(plc.1BS o_bud_line, plc.ORDOPROJECT o_target_prj)
{
	// Get top level activity of target project
	var v_TopLevelAct_TargetPrj = plw._UtilsGetTopLevel(o_target_prj);
	if(v_TopLevelAct_TargetPrj instanceof vector && v_TopLevelAct_TargetPrj.length==1)
	{
		var o_TopLevelAct = v_TopLevelAct_TargetPrj[0];

		// Move data to target project
		with([plw.no_locking, plw.no_alerts])
		{
			with(o_bud_line.fromobject())
			{
				// plc.BUDGET_LINE
				// Z1T24UP20-6364: empty 'Distribution source' field before move -> error message no link between these datasets
				var h_budget_line_source = new hashtable("object");
				for(var o_bud_elemt in plc.BUDGET_LINE where o_bud_elemt.AU_RA_BUDGET_LINE_SOURCE!="")
				{
					h_budget_line_source.set(o_bud_elemt, o_bud_elemt.AU_RA_BUDGET_LINE_SOURCE);
					o_bud_elemt.AU_RA_BUDGET_LINE_SOURCE="";
				}
				
				for(var o_bud_elemt in plc.BUDGET_LINE)
				{
					// Get target activity
					var o_act =  au_evm_get_or_create_budget_line_activity(o_wp_act : o_TopLevelAct, type_of_cost : o_bud_elemt._INF_RA_CBS2, cost_account : o_bud_elemt.COST_ACCOUNT);
					
					var o_RA_CHANGE_OF_SCOPE = o_bud_elemt._CHG_RA_CHANGE_OF_SCOPE;
					// If Activity is top level, then move Budget elements & BCR (Change of scope) else delete
					if(o_bud_elemt.ACTIVITY instanceof plc.WORKSTRUCTURE && (o_bud_elemt.ACTIVITY.IS_TOP_LEVEL || o_bud_elemt.COST_ACCOUNT.AU_UA_B_COST_ACC_IMP_END || o_bud_elemt._INF_RA_CBS2.AU_UA_CBS2_DASHBOARD_DEFAUT==false))
					{
						// If defined, Manage BCR -> move to top level activity of target project
						if(o_bud_elemt._CHG_RA_CHANGE_OF_SCOPE instanceof plc._CHG_PT_CHANGE_OF_SCOPE && o_bud_elemt._CHG_RA_CHANGE_OF_SCOPE.printattribute()!="")
						{
							// cut the relation link beetween budget element and change before moving to other file
							o_bud_elemt._CHG_RA_CHANGE_OF_SCOPE=undefined;
							o_RA_CHANGE_OF_SCOPE.modifywithplist(new vector("FILE", o_target_prj));
						}
						// Manage Budget element
						o_bud_elemt.modifywithplist(new vector("ACTIVITY", o_act, "FILE", o_target_prj, "_CHG_RA_CHANGE_OF_SCOPE", o_RA_CHANGE_OF_SCOPE));
					} else {
						o_bud_elemt.delete();
					}
				}
				
				// Z1T24UP20-6364: restore 'Distribution source' link after move
				for(var o_bud_elemt in h_budget_line_source)
				{
					o_bud_elemt.AU_RA_BUDGET_LINE_SOURCE=h_budget_line_source.get(o_bud_elemt);
				}
				
				// plc.INCURRED_EXPENDITURE
				for(var o_actual in plc.INCURRED_EXPENDITURE)
				{
					o_actual.modifywithplist(new vector("ACTIVITY", o_TopLevelAct, "FILE", o_target_prj));
				}
			}
		}
	}
	return true;
}

// Function used to warn 
function au_js_evm_warn_move_budget_line_elements(oldV, newV)
{
	var o_budget_prj = plc.ORDOPROJECT.get(context.get("AU_CS_EVM_BUDGET_PROJECT"));
	if(o_budget_prj instanceof plc.ORDOPROJECT && this instanceof plc.ORDOPROJECT)
	{

		//
		if(newV instanceof String && newV!="")
		{
			//Verification of the DMR because it's not working on lvl 1 (may not be needed on E7)
			for(var s_1bs in newV.split(',') where !(oldV.split(',').position(s_1bs) instanceof Number))
			{
				var o_1bs = plc.1BS.get(s_1bs);
				if(o_1bs instanceof plc.1BS && o_1bs.printattribute()!="" && !(!o_1bs.AU_UA_B_1BS_EVM_METHOD_LINEAR && !o_1bs.AU_UA_B_USED_BY_PROJECT && o_1bs.AU_UA_1BS_PROGRAM!="" && o_1bs.AU_UA_1BS_PROGRAM.AU_NF_S_TOP_PARENT==this._BM_BS.AU_NF_S_TOP_PARENT))
				{
					plw.alert(plw.write_text_key("budget.impossible_value"));
					this.CancelCurrentTransaction();
				}
			}
		}
		else{
			// Store warn message in temporary object to avoid multiple occurence for the current user
			var o_user = plc.OPX2_USER.get(context.callstringformula("$CURRENT_USER"));
			var b_warn_move = plw.gettemporaryobject(o_user, "evm_warn_move_budget_line_elements");
			if(b_warn_move==undefined)
			{
				b_warn_move = plw.question(plw.write_text_key("budget.move_question"));
				b_warn_move.storetemporaryobject(o_user, "evm_warn_move_budget_line_elements");
			}
			
			if(b_warn_move)
			{
				var h_move_1BS = new hashtable("object");
				
				// BREAKDOWN_1
				// Move budget lines elements to Budget Project
				if(oldV instanceof plc.1BS && oldV.printattribute()!="")
				{
					au_js_evm_move_budget_line_elements(oldV, o_budget_prj);
				}
				// Move budget lines elements to Current Project
				if(newV instanceof plc.1BS && newV.printattribute()!="")
				{
					au_js_evm_move_budget_line_elements(newV, this);
					h_move_1BS.set(newV, newV);
				}
				
				// AU_UA_PRJ_OTHER_1BS
				if(oldV instanceof String && oldV!="")
				{
					// Move budget lines elements to Budget Project
					for(var s_1bs in oldV.split(',') where !(newV.split(',').position(s_1bs) instanceof Number))
					{
						var o_1bs = plc.1BS.get(s_1bs);
						if(o_1bs instanceof plc.1BS && o_1bs.printattribute()!="")
						{
							au_js_evm_move_budget_line_elements(o_1bs, o_budget_prj);
						}
					}
				}
				if(newV instanceof String && newV!="")
				{
					// Move budget lines elements to Current Project
					for(var s_1bs in newV.split(',') where !(oldV.split(',').position(s_1bs) instanceof Number))
					{
						var o_1bs = plc.1BS.get(s_1bs);
						if(o_1bs instanceof plc.1BS && o_1bs.printattribute()!="")
						{
							au_js_evm_move_budget_line_elements(o_1bs, this);
							h_move_1BS.set(o_1bs, o_1bs);
						}
					}
				}
				
				// Manage 'don't forget to distribute' message
				for(var o_1bs in h_move_1BS where o_1bs.getinternalvalue("AU_UA_1BS_EVM_METHOD").tostring()!="LINEAR")
				{
					plw.alert(plw.write_text_key("budget.dont_forget_distribute"));
					break;
				}
				
				
				} else {
				this.CancelCurrentTransaction();
			}
			return b_warn_move;
		}
		
	}
}

// Function used to 'untag' EVM Milestones for a given project
function au_js_evm_remove_milestone_tag(plc.ORDOPROJECT o_project)
{
	var n_act_count = 0;
	with([plw.no_locking, plw.no_alerts])
	{
		with(o_project.fromobject())
		{
			for (var o_act in plc.WORK_STRUCTURE where o_act.AU_UA_ACT_EVM_MILESTONE && o_act.AU_UA_L1B_S_AH_OTM=="")
			{
				o_act.AU_UA_ACT_EVM_MILESTONE = false;
				n_act_count++;
			}
		}
	}
	return n_act_count;
}

function au_js_evm_warn_milestone_tag(plc.ORDOPROJECT o_project)
{
	// Store warn message in temporary object to avoid multiple occurence for the current user
	var o_user = plc.OPX2_USER.get(context.callstringformula("$CURRENT_USER"));
	var b_warn_move = plw.gettemporaryobject(o_user, "evm_warn_milestone_tag");
	if(b_warn_move==undefined)
	{
		// b_warn_move = !(plw.question("Do you want to keep the milestone EVM Tag? If 'yes' ML EVM tag not removes, If 'no' ML EVM tag automaticcaly removed after confirmation")); // write_text_key("XXXXXXXXXX");
		b_warn_move = !(plw.question(plw.write_Text_Key("budget.evm_tag_question").format(o_project.printattribute())));
		b_warn_move.storetemporaryobject(o_user, "evm_warn_milestone_tag");
	}
	if(b_warn_move)
	{
		var n_act = au_js_evm_remove_milestone_tag(o_project);
	}
}

// Function used to warn 
function au_js_evm_modifybefore_project_breakdown_1(oldV, newV)
{
	//Creation of an attribute to check a part of the rule on breakdown_1
	var b_check;
	if (newV.internal==false && this.AU_UA_PRJ_MULTI_1BS_TYPE != "Single Budget Line for the Project"){
		b_check = ! newV.AU_UA_B_1BS_EVM_METHOD_LINEAR;
	}
	else {
		b_check =  true;
	}
	
	//Verification of the DMR because it's not working on lvl 1 (may not be needed on E7)
	if((!(!newV.AU_UA_B_USED_BY_PROJECT && newV.AU_UA_1BS_PROGRAM != "" && newV.AU_UA_1BS_PROGRAM.AU_NF_S_TOP_PARENT == this._BM_BS.AU_NF_S_TOP_PARENT && b_check) || newV == this.BREAKDOWN_1) && newV.internal==false){
		plw.alert(plw.write_text_key("budget.impossible_value"));
		this.CancelCurrentTransaction();
	}
	else{
		var b_warn_move = au_js_evm_warn_move_budget_line_elements(oldV, newV);
		if(b_warn_move && this instanceof plc.ORDOPROJECT)
		{
			if(oldV instanceof plc.1BS && oldV.printattribute()!="" && newV instanceof plc.1BS && newV.printattribute()=="")
			{
				au_js_evm_warn_milestone_tag(this);
			}
		}
	}
	
}

// Implementation of 'modifybeforeMethod' as VALUE_BEFORE formulas are not available in Planisware V6.3.5
var slot_project_breakdown_1 = plc.ordoproject.getSlot("BREAKDOWN_1"); 
slot_project_breakdown_1.modifybeforeMethod = au_js_evm_modifybefore_project_breakdown_1;

var slot_project_au_ua_prj_other_1bs = plc.ordoproject.getSlot("AU_UA_PRJ_OTHER_1BS"); 
slot_project_au_ua_prj_other_1bs.modifybeforeMethod = au_js_evm_warn_move_budget_line_elements;

//******************* Dynamic attribute for Budget input ************************************/
// Locker
function au_budget_locker()
{
	var result = true;
	var oMs=this;
	if (oMs.FINISHED==false && oMs.AU_UA_B_MS_COST_ACCOUNT_NOT_DISTRIBUTED)
			result=false;
	return result;
}
// Reader
function au_budget_reader()
{
	var oMs=this;
	var result = oMs.BUDGET_AT_COMPLETION;
	return result;
}

// Modifier
function au_budget_modifier(value)
{
	var oMs=this;
	var o_costaccount = oMs.COST_ACCOUNT;
	var top_level_ws = plw.top_level_ws(oMs.PROJECT);
	var quantity = 0;
	var remaining = value;
	var ms_sd = oMs.PS;
	var ms_ed = oMs.PF;
	
	/// Initiate budget date on first input
	with(plw.no_locking)
	{
		if(oMS.SD_BUDGET==undefined)
		{
			oMS.SD_BUDGET = oMS.PS;
		}
		if(oMS.ED_BUDGET==undefined)
		{
			oMS.ED_BUDGET = oMS.PF;
		}
	}

	// Update the budget date 
	if (oMS.AU_UA_DISTRIB_BUDGET_DATE==false)
	{
		with(plw.no_locking)
		{
			oMs.SD_BUDGET=oMs.PS;
			oMs.ED_BUDGET=oMs.PF;
		}		
		oMS.AU_UA_DISTRIB_BUDGET_DATE=true;
	}
	
	// By default --> Distribution is done on budget date
	if (oMS.SD_BUDGET!=undefined)
		ms_sd=oMS.SD_BUDGET;		
	if (oMS.ED_BUDGET!=undefined)
		ms_ed=oMS.ED_BUDGET;
	
	var o_bs1;
	var o_cbs2;
	
	// Delete previous budget elements
	for(var o_be in oMs.get("BUDGET-LINES"))
	{
		o_be.delete();
	}	
		
	// Get the list of budget element linked to the top wbs element with the same cost account as the milestone
	var sum = 0;
	var nb_BE = 0;
	var be_imported = new hashtable();
	
	var list = [];
	list.push(top_level_ws);
	list.push(o_costaccount);
	
	var filter = plw.objectset(list);
	with(filter.fromobject()) {
		if (oMs.project.AU_UA_PRJ_MULTI_1BS)
		{
			// Z1T24UP20-6016 - Exclude budget elements with the type of cost with "Show in dashboard by default" = false
			for (var o_bud_elmt in plc.BUDGET_LINE where oMs.SD_BUDGET >= o_bud_elmt.SD && oMs.SD_BUDGET <= o_bud_elmt.ED && o_bud_elmt.BREAKDOWN_1==oMs.BREAKDOWN_1 && o_bud_elmt._INF_RA_CBS2.AU_UA_CBS2_DASHBOARD_DEFAUT)
			{
				sum = sum + o_bud_elmt.QUANTITY;
				nb_BE++;
				be_imported.set(o_bud_elmt,o_bud_elmt.QUANTITY);
				break;
			}
		}
		else
		{
			// Z1T24UP20-6016 - Exclude budget elements with the type of cost with "Show in dashboard by default" = false
			for (var o_bud_elmt in plc.BUDGET_LINE where oMs.SD_BUDGET >= o_bud_elmt.SD && oMs.SD_BUDGET <= o_bud_elmt.ED && o_bud_elmt._INF_RA_CBS2.AU_UA_CBS2_DASHBOARD_DEFAUT)
			{
				sum = sum + o_bud_elmt.QUANTITY;
				nb_BE++;
				be_imported.set(o_bud_elmt,o_bud_elmt.QUANTITY);
			}
		}		
	}
	
	if (nb_BE==0)
	{
		//plw.alert("There is no imported budget element for the milestone : "+ oMs.name);
		//Z1T24UP20-6296 - Create a budget element even if there is no budget to distribute
		o_bs1 = oMS.PROJECT.BREAKDOWN_1;
			
		var vBudgetLine = new plc.BUDGET_LINE(
		ACTIVITY:oMs,
		QUANTITY:value,
		SD:ms_sd,
		ED:ms_ed,						
		FILE:oMS.PROJECT,
		COST_ACCOUNT:o_costaccount,
		TYPE:"Expenditures",
		_INF_RA_CBS2:"Scope",
		//AU_RA_BUDGET_LINE_SOURCE:"",
		BREAKDOWN_1: o_bs1,
		AU_RA_FUNDING_SOURCE:o_bs1.AU_UA_1BS_FUNDING,
		AU_UA_B_NO_BUDGET_IMPORTED:true
		);		
	}
	else
	{
	// Create new budget elements using the value entered by the user
		for (var o_bud_elmt in be_imported)
		{
			nb_BE--;
			if (nb_BE==0)
			{
				quantity = remaining;
			}			
			else
			{
				quantity = value*(be_imported.get(o_bud_elmt)/sum);
				remaining = remaining - quantity;
			}		

			o_bs1 = o_bud_elmt.BREAKDOWN_1;
			o_cbs2 = o_bud_elmt._INF_RA_CBS2;
			
			var vBudgetLine = new plc.BUDGET_LINE(
			ACTIVITY:oMs,
			QUANTITY:quantity,
			SD:ms_sd,
			ED:ms_ed,						
			FILE:o_bud_elmt.PROJECT,
			COST_ACCOUNT:o_costaccount,
			TYPE:"Expenditures",
			_INF_RA_CBS2:o_cbs2,
			AU_RA_BUDGET_LINE_SOURCE:o_bud_elmt,
			BREAKDOWN_1: o_bs1,
			AU_RA_FUNDING_SOURCE:o_bs1.AU_UA_1BS_FUNDING
			);		
		}
	}
}

var slot = new objectAttribute(plc.workstructure,"AU_DA_MS_BUDGET_INPUT","NUMBER");
slot.Comment = "EVM Budget (KEUR)";
slot.Reader = au_budget_reader;
slot.Modifier = au_budget_modifier;
slot.Locker = au_budget_locker;
slot.hiddenInIntranetServer = false;
slot.connecting = false;

//******************* End - Dynamic attribute for Budget input - End ************************************/

// Function used to get or create the target activity for "Imported" budget allocation
function au_evm_get_or_create_budget_line_activity(plc.work_structure o_wp_act : undefined, plc._INF_PT_CBS2 type_of_cost : undefined, plc.CBS_NODE cost_account : undefined)
{
	if(o_wp_act!=undefined && type_of_cost!=undefined && cost_account!= undefined)
	{
		var vec_fromobj = new vector();
		vec_fromobj.push(o_wp_act);
		
		// BCR Perfo
		if(type_of_cost.AU_UA_CBS2_DASHBOARD_DEFAUT==false)
		{
			var o_wbs_type = plc.WBS_TYPE.get(context.AU_CS_EVM_NON_EV_WBS_TYPE);
			vec_fromobj.push(o_wbs_type);
			var b_bool = true;
			var filter = plw.objectset(vec_fromobj);
			// Case 1: Fromobject to find activity
			with(filter.fromobject())
			{
				for(var o_act in plc.work_structure where o_act.PROJECT.version_number==0)
				{
					return o_act;
					b_bool = false;
					break;
				}
			}
			// Case 2: no activity is found, create it
			if(b_bool)
			{
				var pList = new vector("NAME",o_wbs_type.printattribute()+"_"+o_wp_act.printattribute(),"DESC",o_wbs_type.printattribute(),"WBS_ELEMENT",o_wp_act,"WBS_TYPE",o_wbs_type,"SNE",o_wp_act.PS,"DU",o_wp_act.DU);
				var o_act = plc.TASK.makeopx2objectwithplist(plist);
				return o_act;
			}
		}
		
		// Reserve: budget to import at the end of the year?
		if(cost_account.AU_UA_B_COST_ACC_IMP_END)
		{
			var o_wbs_type = plc.WBS_TYPE.get(context.AU_CS_EVM_LINEAR_WBS_TYPE);
			vec_fromobj.push(o_wbs_type);
			var b_bool = true;
			var filter = plw.objectset(vec_fromobj);
			// Case 1: Fromobject to find activity
			with(filter.fromobject())
			{
				for(var o_act in plc.work_structure where o_act.PROJECT.version_number==0)
				{
					return o_act;
					b_bool = false;
					break;
				}
			}
			// Case 2: no activity is found, create it
			if(b_bool)
			{
				var pList = new vector("NAME",o_wbs_type.printattribute()+"_"+o_wp_act.printattribute(),"DESC",o_wbs_type.printattribute(),"WBS_ELEMENT",o_wp_act,"WBS_TYPE",o_wbs_type,"SNE",o_wp_act.PS,"DU",o_wp_act.DU);
				var o_act = plc.TASK.makeopx2objectwithplist(plist);
				return o_act;
			}
		}
		
		// General case, return o_wp_act
		return o_wp_act;
	}
}
 
namespace _au_evm_interface;
// V1.15 - LFA - 20230926 - Z1T24UP20-6383 - Modification au_js_new_budget_element to take the sd & ed value for the creation of budget elements
// V1.14 - FLC - 20230920 - Z1T24UP20-6360 - add 'plw.no_alerts' to 'au_js_new_budget_element' to avoid TYPE update by Processes DMR
// V1.13 - LFA - 20230919 - Call function au_js_evm_move_budget_line_elements with the right namespace in au_js_evm_move_budget_line_elements
// V1.12 - FLC - 20230918 - Z1T24UP20-6360 - Modification of function 'au_js_new_budget_element', 'au_js_octopus_create_budget_element' & 'au_js_octopus_create_BCR_budget_element' to manage Linear Case
// V1.11 - FLC - 20230915 - Z1T24UP20-6372 - Modification of function 'au_js_update_budget_elements' to change TYPE of Budget elements
// V1.10 - LFA - 20230829 - Modification of function au_js_new_budget_element to update fields AU_UA_D_LAST_BATCH_UPDATE and AU_UA_S_IMPORT_BATCH after creation of budget element
// V1.9 - LFA - 20230802 - Modification of function au_js_new_budget_element 
//                         Do not set change for expenditure budget element because of DMR _CHG_DMR_PROPAG_TYPE_ON_BUDGL that force the type with the type of change
// V1.8 - FLC - 20230724 - Z1T24UP20-6259 - Modification of function 'au_js_new_budget_element' & 'au_js_update_budget_elements'
// V1.7 - FME - 29MAI23 - Z1T24UP20-6011 - Modification au_js_update_budget_elements for reserve budget
// V1.6 - LFA - 13APR23 - Z1T24UP20-6016 - Modification of function au_js_new_budget_element to create a budget element of type expenditure for imported budget elements with type the type of cost with "Show in dashboard by default"
// V1.5 - EPI - 06MAR23 - Modification of functions au_js_batch_octopus and au_js_gallium_impex to verify the existence of the file before managing duplicates in the hashtable
// V1.4 - EPI - 14FEB23 - Modification of function au_js_batch_octopus and au_js_octopus_create_BCR_budget_element to manage duplicates in the BCR input file, remove update of the BCR budget element (only creation)
// V1.3 - LFA - 07FEB23 - Modification of function au_js_update_budget_elements to delete BE from copied project whatever the date of the BE - Z1T24UP20-5792
// V1.2 - EPI - 25JAN23 - Modification of function au_js_batch_gallium to correct the input_file_path
// V1.1 - LFA - 16JAN23 - Modification of function au_js_update_budget_elements to process only BE of current and next years
// V1.0 - LFA - 13JAN23 - Modification of function au_js_batch_octopus to manage deltion of budget elements with a Quantity = 0 - Z1T24UP20-5523
// V0.9 - LFA - 10JAN23 - Modification of function au_js_new_budget_element to add date of batch execution and type of batch
//                        Modification of functions au_js_gallium_create_budget_element,au_js_gallium_bcr_budget_element,au_js_octopus_create_budget_element,au_js_octopus_create_BCR_budget_element to add batch type && batch execution date
// V0.8 - LFA - 19DEC22 - Creation of function au_js_update_budget_elements to update / remove Budget Elements - Z1T24UP20-5453 & Z1T24UP20-5447
// V0.7 - LFA - 10DEC22 - Modification of functions au_js_batch_gallium & au_js_gallium_create_budget_element
//                        Modification function au_js_octopus_create_budget_element
// V0.6 - LFA - 30NOV22 - Add Try/Catch in functions Gallium to manage errors
// V0.5 - LFA - 29NOV22 - Replace AU_UA_S_1BS_ROOT_ROOT_ACTIVITY by AU_UA_S_1BS_ROOT_ROOT_ACTIVITY_NAME
// V0.4 - LFA - 23NOV22 - Manage case for which several Octopus Cost Categories are mapped with the same Cost Account
// V0.3 - LFA - 18NOV22 - Add Try/Catch in function au_js_octopus_create_budget_element to manage errors
// V0.2 - LFA - 25OCT22 - Z1T24UP20-4868 - Modification of functions au_js_octopus_create_budget_element & au_js_octopus_create_BCR_budget_element to convert quantity to k€
// V0.1 - LFA - 29JUL22 - Z1T24UP20-4365 - Modification of functions au_js_octopus_BCR_impex & au_js_octopus_create_BCR_budget_element to take into account Budget line name in Change of scope name

//******************************************************************
// Generic functions - used for both Octopus and Gallium interface
//******************************************************************
//Check if the number has good format - used because field might not be 0 but empty
function au_js_check_number_format(n_number){
	var result =n_number;
	if(!(n_number instanceof Number) || n_number ==undefined)result = 0;	
	return result;
}
//Mapping with programme referential
function au_js_mapping_programme(s_prog_before,s_interface){
	var s_prog_after = "";
	if(s_interface == "gallium"){
		for (var o_programme in "opx_BM_BS" where o_programme.AU_UA_S_PROG_MAPPING_GALLIUM != ""){
			var b_found = false;
			var list_prog_mapping = o_programme.AU_UA_S_PROG_MAPPING_GALLIUM;
			var v_prog_mapping = list_prog_mapping.parseVector();
			for (var s_prog_mapping in v_prog_mapping){
				if (s_prog_before == s_prog_mapping){
					s_prog_after = o_programme.NAME;
					b_found = true;
					break;
				}
			}
			if (b_found == true)break;
		}
		}else if(s_interface == "octopus"){
		for (var o_programme in "opx_BM_BS" where o_programme.AU_UA_S_PROG_MAPPING_OCTOPUS != ""){
			var b_found = false;
			var list_prog_mapping = o_programme.AU_UA_S_PROG_MAPPING_OCTOPUS;
			var v_prog_mapping = list_prog_mapping.parseVector();
			for (var s_prog_mapping in v_prog_mapping){
				if (s_prog_before == s_prog_mapping){
					s_prog_after = o_programme.NAME;
					b_found = true;
					break;
				}
			}
			if (b_found == true)break;
		}	
	}
	return s_prog_after;
}
//Mapping with resource referential
function au_js_mapping_resource(s_resource_before,s_interface){
	var s_resource_after = "";
	if(s_interface == "gallium"){
		for (var o_alloc in "opxResource" where o_alloc.AU_UA_S_RES_MAPPING_GALLIUM != ""){
			var b_found = false;
			var list_alloc_mapping = o_alloc.AU_UA_S_RES_MAPPING_GALLIUM;
			var v_alloc_mapping = list_alloc_mapping.parseVector();
			for (var s_alloc_mapping in v_alloc_mapping){
				if (s_resource_before == s_alloc_mapping){
					s_resource_after = o_alloc.NAME;
					b_found = true;
					break;
				}
			}
			if (b_found == true)break;
		}
		}else if(s_interface == "octopus"){
		for (var o_alloc in "opxResource" where o_alloc.AU_UA_S_RES_MAPPING_OCTOPUS != ""){
			var b_found = false;
			var list_alloc_mapping = o_alloc.AU_UA_S_RES_MAPPING_OCTOPUS;
			var v_alloc_mapping = list_alloc_mapping.parseVector();
			for (var s_alloc_mapping in v_alloc_mapping){
				if (s_resource_before == s_alloc_mapping ){
					//Reject cell (no value) if is a function is false 
					if(o_alloc.AU_UA_B_RES_FUNCTION == true){
						s_resource_after = o_alloc.NAME;
					}
					b_found = true;
					break;
				}
			}
			if (b_found == true)break;
		}		
	}
	return s_resource_after;
}
//Mapping with funding source referential
function au_js_mapping_funding_source(s_fund_before,s_interface){
	var s_fund_after = "";
	if(s_interface == "gallium"){
		for (var o_fund in "opxAU_PT_FUNDING_SOURCE" where o_fund.AU_UA_S_FUND_MAPPING_GALLIUM != ""){
			var b_found = false;
			var list_fund_mapping = o_fund.AU_UA_S_FUND_MAPPING_GALLIUM;
			var v_fund_mapping = list_fund_mapping.parseVector();
			for (var s_fund_mapping in v_fund_mapping){
				if (s_fund_before == s_fund_mapping){
					s_fund_after = o_fund.NAME;
					b_found = true;
					break;
				}
			}
			if (b_found == true)break;
		}
		}else if(s_interface == "octopus"){
		for (var o_fund in "opxAU_PT_FUNDING_SOURCE" where o_fund.AU_UA_S_FUND_MAPPING_OCTOPUS != ""){
			var b_found = false;
			var list_fund_mapping = o_fund.AU_UA_S_FUND_MAPPING_OCTOPUS;
			var v_fund_mapping = list_fund_mapping.parseVector();
			for (var s_fund_mapping in v_fund_mapping){
				if (s_fund_before == s_fund_mapping){
					s_fund_after = o_fund.NAME;
					b_found = true;
					break;
				}
			}
			if (b_found == true)break;
		}	
	}
	return s_fund_after;
}
//Mapping with cost account referential
function au_js_mapping_cost_account(s_cost_acc_before,s_interface){
	var s_cost_acc_after = "";
	if(s_interface == "gallium"){
		for (var o_cost_acc in "opxCOST_ACCOUNT" where o_cost_acc.AU_UA_S_COST_ACC_MAPPING_GALLIUM != ""){
			var b_found = false;
			var list_cost_acc_mapping = o_cost_acc.AU_UA_S_COST_ACC_MAPPING_GALLIUM;
			var v_cost_acc_mapping = list_cost_acc_mapping.parseVector();
			for (var s_cost_acc_mapping in v_cost_acc_mapping){
				if (s_cost_acc_before == s_cost_acc_mapping){
					s_cost_acc_after = o_cost_acc.NAME;
					b_found = true;
					break;
				}
			}
			if (b_found == true)break;
		}			
		}else if(s_interface == "octopus"){
		for (var o_cost_acc in "opxCOST_ACCOUNT" where o_cost_acc.AU_UA_S_COST_ACC_MAPPING_OCTOPUS != ""){
			var b_found = false;
			var list_cost_acc_mapping = o_cost_acc.AU_UA_S_COST_ACC_MAPPING_OCTOPUS;
			var v_cost_acc_mapping = list_cost_acc_mapping.parseVector();
			for (var s_cost_acc_mapping in v_cost_acc_mapping){
				if (s_cost_acc_before == s_cost_acc_mapping){
					s_cost_acc_after = o_cost_acc.NAME;
					b_found = true;
					break;
				}
			}
			if (b_found == true)break;
		}		
	}
	return s_cost_acc_after;
}
//Mapping with type of cost (CBS2) Referential 
function au_js_mapping_type_cost(s_type_cost_before,s_interface){
	var s_type_cost_after = "";
	if(s_interface == "gallium"){
		for (var o_type_cost in "opx_INF_PT_CBS2" where o_type_cost.AU_UA_S_TYPE_COST_MAPPING_GALLIUM != ""){
			var b_found = false;
			var list_type_cost_mapping = o_type_cost.AU_UA_S_TYPE_COST_MAPPING_GALLIUM;
			var v_type_cost_mapping = list_type_cost_mapping.parseVector();
			for (var s_type_cost_mapping in v_type_cost_mapping){
				if (s_type_cost_before == s_type_cost_mapping){
					s_type_cost_after = o_type_cost.NAME;
					b_found = true;
					break;
				}
			}
			if (b_found == true)break;
		}
		}else if(s_interface == "octopus"){
		for (var o_type_cost in "opx_INF_PT_CBS2" where o_type_cost.AU_UA_S_TYPE_COST_MAPPING_OCTOPUS != ""){
			var b_found = false;
			var list_type_cost_mapping = o_type_cost.AU_UA_S_TYPE_COST_MAPPING_OCTOPUS;
			var v_type_cost_mapping = list_type_cost_mapping.parseVector();
			for (var s_type_cost_mapping in v_type_cost_mapping){
				if (s_type_cost_before == s_type_cost_mapping){
					s_type_cost_after = o_type_cost.NAME;
					b_found = true;
					break;
				}
			}
			if (b_found == true)break;
		}	
	}
	return s_type_cost_after;
}

//Creation of a new Budget Element
function au_js_new_budget_element(o_activity, n_qty, d_SD, d_ED, s_type_cost, s_type, s_unit, s_cost_acc, o_budget_line, s_change, date, batch_type)
{
	if(o_activity instanceOf plc.work_structure && o_budget_line instanceOf plc.1BS)
	{
		var o_cost_account = plc.CBS_NODE.get(s_cost_acc);
		var o_type_of_cost = plc._INF_PT_CBS2.get(s_type_cost);
		if(o_cost_account instanceOf plc.CBS_NODE && o_type_of_cost instanceOf plc._INF_PT_CBS2)
		{
			// Get target task for WBS creation
			var o_task_act = _au_evm.au_evm_get_or_create_budget_line_activity(o_wp_act : o_activity, type_of_cost : o_type_of_cost, cost_account : o_cost_account);
			
			// Manage start & end dates + type
			var sd = plw.periodstart(d_SD, "YEAR", 0);
			var ed = plw.periodstart(sd, "YEAR", 1).previous("DAY");
			var s_created_type = s_type;
			
			// Case Reserve : budget is set on December
			if(o_cost_account.AU_UA_B_COST_ACC_IMP_END)
			{
				sd = plw.periodstart(sd, "MONTH", 11);
			}
			// Case BCR Perfo : budget is set to the end of the year
			if(o_type_of_cost.AU_UA_CBS2_DASHBOARD_DEFAUT==false)
			{
				sd = ed;
			}
			// Case Linear
			if(!(o_cost_account.AU_UA_B_COST_ACC_IMP_END) && o_type_of_cost.AU_UA_CBS2_DASHBOARD_DEFAUT && o_budget_Line.AU_UA_1BS_EVM_METHOD == "Linear" && (o_budget_Line.AU_UA_D_OCT_LINEAR_SD instanceof date) && (o_budget_Line.AU_UA_D_OCT_LINEAR_SD instanceof date))
			{
				// Update dates in case of Linear Budget Line
				sd = o_budget_Line.AU_UA_D_OCT_LINEAR_SD;
				ed = o_budget_Line.AU_UA_D_OCT_LINEAR_ED;
				// Manage Type of Budget element in case of Linear Budget Line
				s_created_type = "Expenditures";
			}
			
			// Z1T24UP20-6360 - add 'plw.no_alerts' to TYPE update by Processes DMR '_CHG_DMR_PROPAG_TYPE_ON_BUDGL' (_MOD_CHANGE_OF_SCOPE) when _CHG_RA_CHANGE_OF_SCOPE is assigned
			with(plw.no_alerts)
			{
				// Create 'Imported' Budget element (or 'Expenditures' for Linear)
				var BEpList = new vector(
					"ACTIVITY", o_task_act,
					"QUANTITY", n_qty, 
					"SD", sd, 
					"ED", ed, 
					"UNIT", s_unit,
					"_INF_RA_CBS2", o_type_of_cost,
					"TYPE", s_created_type,	
					"COST_ACCOUNT", o_cost_account,
					"RES", o_budget_Line.AU_UA_1BS_ALLOCATION,
					"AU_RA_FUNDING_SOURCE", o_budget_Line.AU_UA_1BS_FUNDING,
					//"AU_UA_S_IMPORT_BATCH", batch_type,
					//"AU_UA_D_LAST_BATCH_UPDATE", date,
					"_CHG_RA_CHANGE_OF_SCOPE", s_change,
					"BREAKDOWN_1", o_budget_Line
					);
				var o_be_imported = plc.BUDGET_LINE.makeopx2objectwithplist(BEpList);
				o_be_imported.AU_UA_D_LAST_BATCH_UPDATE = date;
				o_be_imported.AU_UA_S_IMPORT_BATCH = batch_type;
				
				// Z1T24UP20-6016 & Z1T24UP20-6259 - If Reserve or BCR Perfo, create 'Expenditure' Budget element
				if(s_created_type=="Imported" && o_cost_account.AU_UA_B_COST_ACC_IMP_END || o_type_of_cost.AU_UA_CBS2_DASHBOARD_DEFAUT==false)
				{
					// Set Plist to cerate link with source Budget element (AU_RA_BUDGET_LINE_SOURCE)
					var BEExppList = new vector(
					"ACTIVITY", o_task_act,
					"QUANTITY", n_qty, 
					"SD", sd, 
					"ED", ed, 
					"UNIT", s_unit,
					"_INF_RA_CBS2", o_type_of_cost,
					"TYPE", "Expenditures",	
					"COST_ACCOUNT", o_cost_account,
					"RES", o_budget_Line.AU_UA_1BS_ALLOCATION,
					"AU_RA_FUNDING_SOURCE", o_budget_Line.AU_UA_1BS_FUNDING,
					//"AU_UA_S_IMPORT_BATCH", batch_type,
					//"AU_UA_D_LAST_BATCH_UPDATE", date,
					// Change cannot be set because of DMR _CHG_DMR_PROPAG_TYPE_ON_BUDGL that force the type with the type of change
					//"_CHG_RA_CHANGE_OF_SCOPE", s_change,
					"BREAKDOWN_1", o_budget_Line,
					"AU_RA_BUDGET_LINE_SOURCE", o_be_imported
					);
					var o_be_exp = plc.BUDGET_LINE.makeopx2objectwithplist(BEExppList);
					o_be_exp.AU_UA_D_LAST_BATCH_UPDATE = date;
					o_be_exp.AU_UA_S_IMPORT_BATCH = batch_type;
				}
			}
		}
	}
}

//******************************************************************
//Gallium Part
//******************************************************************

//************************
//Gallium Budget Line & scope file
//************************

//function used in Gallium interface, called in the impex format
function au_js_gallium_impex()
{
	plw.writeln("*******************************************************");	
	plw.writeln("Beginning of the UPH Gallium Budget Lines import au_js_gallium_impex");
	//create the hashtable of lines in the file to deactivate the non present lines
	//need to do the hashtable because all lines are not imported (frozen and all 0)
	var h_importedlines = new hashtable();
	//Parsing the impex temp table
	for (var o_temp_line in this.temp_impex_data){
		plw.writeln("Budget Line - Processing o_temp_line " + o_temp_line.WORK_ITEM_CODE +"-"+ o_temp_line.PROGRAMME +"-"+ o_temp_line.DIRECTORATE);
		try{
			//transform empty values or strings in budget to 0
			o_temp_line.BUDGET_N = au_js_check_number_format(o_temp_line.BUDGET_N);
			o_temp_line.BUDGET_N1 = au_js_check_number_format(o_temp_line.BUDGET_N1);
			o_temp_line.BUDGET_N2 = au_js_check_number_format(o_temp_line.BUDGET_N2);
			o_temp_line.BUDGET_N3 = au_js_check_number_format(o_temp_line.BUDGET_N3);
			o_temp_line.BUDGET_N4 = au_js_check_number_format(o_temp_line.BUDGET_N4);
			
			//check if the budget line is not Frozen or has budgets, if not then delete the line in temp table to not import it
			var b_imported = false;
			var s_id_BL = o_temp_line.WORK_ITEM_CODE +"-"+ o_temp_line.PROGRAMME +"-"+ o_temp_line.DIRECTORATE;
			var b_associated_cost = true;
			if (o_temp_line.BUDGET_N ==0 && o_temp_line.BUDGET_N1==0 && o_temp_line.BUDGET_N2 ==0 && o_temp_line.BUDGET_N3 ==0 && o_temp_line.BUDGET_N4 ==0)
			{
				b_associated_cost = false;
			}
			if(o_temp_line.STATUS !="Frozen")plw.writeln("Budget Line "+ s_id_BL + " has been rejected because of the status " + o_temp_line.STATUS);
			if(b_associated_cost == false)plw.writeln("Budget Line "+ s_id_BL + " has been rejected because all costs are null/empty ");
			if(o_temp_line.STATUS =="Frozen" && b_associated_cost){
				b_imported = true;
				
				//linking the attributes with the mapping fields in Programme referential
				o_temp_line.PROGRAMME_MAPPED = au_js_mapping_programme(o_temp_line.PROGRAMME,"gallium");
				
				//linking the attributes with the mapping fields in Resource referential
				o_temp_line.DIRECTORATE_MAPPED = au_js_mapping_resource(o_temp_line.DIRECTORATE,"gallium");
				
				//linking the attributes with the mapping fields in Funding Source referential
				o_temp_line.FUNDING_SOURCE_MAPPED = au_js_mapping_funding_source(o_temp_line.FUNDING_SOURCE,"gallium");
				
				//concatenation for name - No need because put in the Impex
				//o_temp_line.WORK_ITEM_CODE = o_temp_line.WORK_ITEM_CODE +"-"+ o_temp_line.PROGRAMME +"-"+ o_temp_line.DIRECTORATE;
				//Set the Owner to EX - No need because put in the Impex
				//o_temp_line.OWNER = "EX";
				//Set the file to au_cf_data - No need because put in the Impex
				//o_temp_line.FILE = "AU_CF_DATA";
				
				//Set the exception for probability - can't do it in converstion formula because OC.AU_CS_EVM_GALLIUM_PROBA_EXCEPTION don't work in 6.3.5
				//For the regular cases, the probability is set by the impex
				if (o_temp_line.PROBABILITY == context.get("AU_CS_EVM_GALLIUM_PROBA_EXCEPTION")){
					if(o_temp_line.CATEGORY.substring(0,context.get("AU_CS_EVM_GALLIUM_CAT_EXCEPTION").length)==context.get("AU_CS_EVM_GALLIUM_CAT_EXCEPTION")){
						o_temp_line.PROBABILITY = "Probable";
						}else{
						o_temp_line.PROBABILITY = o_temp_line.ENTITY;
					}
				}
				
				//Set the import date to current date
				o_temp_line.IMPORT_DATE = new date();
				//Set the inactive value to false - Except if Allocation = ET
				if(o_temp_line.DIRECTORATE_MAPPED == "ET"){
					o_temp_line.INACTIVE = true;
					} else {
					o_temp_line.INACTIVE = false;
				}
				
				//Check if the father exist in the hierarchy, if not create it, if yes update it
				var s_id_BL_father = o_temp_line.WORK_ITEM_CODE +"-"+ o_temp_line.PROGRAMME;
				var o_BL_father = plc.1BS.get(s_id_BL_father);
				if (o_BL_father == undefined){
					var plist = new vector("NAME", s_id_BL_father, 
						"DESC", o_temp_line.WORK_ITEM_CODE, 
						"INACTIVE", true, 
						"AU_UA_1BS_OWNER", "EX", 
						"AU_UA_1BS_FUNDING",o_temp_line.FUNDING_SOURCE_MAPPED, 
						"AU_UA_1BS_PROGRAM",o_temp_line.PROGRAMME_MAPPED,
						"AU_UA_1BS_GROUPING",o_temp_line.CATEGORY,
						"AU_UA_1BS_PROBABILITY",o_temp_line.PROBABILITY,
						"BREAKDOWN_1","GALLIUM_" +o_temp_line.PROGRAMME_MAPPED,
					"FILE","AU_CF_DATA");
					var o_BL_father = plc.1BS.makeopx2objectwithplist(plist);
					}else{
					o_BL_father.DESC = o_temp_line.WORK_ITEM_CODE;
					o_BL_father.AU_UA_1BS_FUNDING = o_temp_line.FUNDING_SOURCE_MAPPED;
					o_BL_father.AU_UA_1BS_PROGRAM = o_temp_line.PROGRAMME_MAPPED;
					o_BL_father.AU_UA_1BS_GROUPING = o_temp_line.CATEGORY;
					o_BL_father.AU_UA_1BS_PROBABILITY = o_temp_line.PROBABILITY;
				}
				o_temp_line.BL_HIERARCHY = s_id_BL_father;
			}				
			//fill the hashtable before deleting lines in temp table
			h_importedlines.set(o_temp_line,o_temp_line);
			//delete lines in temp table to not import them
			if(b_imported == false) {
				o_temp_line.delete();
			}
		}
		catch(error e){
			if(e != undefined){plw.writetolog("Gallium - Error on import of budget line :  " + e); e.printStacktrace();}
		}
	}
	//Put as inactive the Budget Lines which were imported before (import date not empty) but not currently in the file
	var Dateoftheday = new date();
	
	for (var o_budget_Line in plc.1BS where o_budget_Line.INACTIVE ==false && (o_budget_Line.AU_UA_D_GALLIUM_IMPORT_DATE instanceof date) && o_budget_Line.AU_UA_D_GALLIUM_IMPORT_DATE.tostring("DD-MM-YYYY") != Dateoftheday.tostring("DD-MM-YYYY")){
		
		if(h_importedlines.get(o_budget_Line) == undefined) o_budget_Line.inactive = true;
	}
	plw.writeln("End of the UPH Gallium import au_js_gallium_impex");
	plw.writeln("*******************************************************");
}

//function used after the impex commit, to create the budget elements after the budget Lines
function au_js_gallium_create_budget_element()
{
	var Dateoftheday = new date();
	var n_year = Dateoftheday.getyear();
	//used for manual input - removed because batch//var vTmpPathsObject = plw.selectfile("Gallium Budget elements","","*.csv").getserverfiles();
	var sFileName = "Gallium_for_HIP_Budget_Lines.csv";
	var sSelectedPath = "/local/home/2A44_SFTP/gallium_import/";
	var sArchivePath = "/local/home/2A44_SFTP/gallium_import/archive/";
	//used for manual input - removed because batch//if (vTmpPathsObject == false) return false;
	//used for manual input - removed because batch//var vTmpPaths = vTmpPathsObject[0];
	//used for manual input - removed because batch//var sTmpPath = vTmpPaths[0];
	var sDestinationPath = sSelectedPath+sFileName;
	var sArchivedfile = sArchivePath+Dateoftheday.toString("YYYY-MM-DD")+"_"+sFileName;
	//used for manual input - removed because batch//var oFileToMove = new pathname(sDestinationPath);
	if (sDestinationPath.probeFile() != false) {
		//used for manual input - removed because batch//oFileToMove.copyFile(sDestinationPath, true);
		sDestinationPath.copyFile(sArchivedfile, true);
		var plc.impextarget target;
		target = plc.impextarget.get("AU_IMP_TARGET_GALLIUM_BUDGET_ELEMENTS:CSV file format");
		if(Target instanceOf plc.ImpexTarget){
			var plc.impexformat format;
			format = plc.impexformat.get("Budget Line:AU_IMPEX_GALLIUM_BUDGET_ELEMENTS");
			
			plw.writeln("*******************************************************");
			plw.writeln("Beginning of the UPH Gallium Budget Elements import au_js_gallium_create_budget_element");
			//Import in Temp table to parse it and create X Budget elements for each line
			var CurrentEvent = plw.DoImportWithFormatAndTarget(this : Format,Target,false);
			//initializing the variable which don't depend on the temp table
			var s_Default_cbs2 = context.get("AU_CS_DEFAULT_CBS2");
			var o_Default_cbs2 = "opx_INF_PT_CBS2".get(s_Default_cbs2);	
			var s_Default_type = "Imported";
			var s_Default_Unit = "KEUR";
			var d_SD0 = new date();
			var d_ED0 = new date(n_year+0,12,31);
			var d_SD1 = new date();
			var d_ED1 = new date(n_year+1,12,31);
			var d_SD2 = new date();
			var d_ED2 = new date(n_year+2,12,31);
			var d_SD3 = new date();
			var d_ED3 = new date(n_year+3,12,31);
			var d_SD4 = new date();
			var d_ED4 = new date(n_year+4,12,31);
			for (var o_temp_line in CurrentEvent.temp_impex_data){
				plw.writeln("Budget Element - Processing o_temp_line " + o_temp_line.WORK_ITEM_CODE +"-"+ o_temp_line.PROGRAMME +"-"+ o_temp_line.DIRECTORATE);
				try{
					//transform empty values or strings in budget to 0
					o_temp_line.BUDGET_N = au_js_check_number_format(o_temp_line.BUDGET_N);
					o_temp_line.BUDGET_N1 = au_js_check_number_format(o_temp_line.BUDGET_N1);
					o_temp_line.BUDGET_N2 = au_js_check_number_format(o_temp_line.BUDGET_N2);
					o_temp_line.BUDGET_N3 = au_js_check_number_format(o_temp_line.BUDGET_N3);
					o_temp_line.BUDGET_N4 = au_js_check_number_format(o_temp_line.BUDGET_N4);
					
					var s_id_BL = o_temp_line.WORK_ITEM_CODE +"-"+ o_temp_line.PROGRAMME +"-"+ o_temp_line.DIRECTORATE;
					var b_associated_cost = true;
					var b_inactivebefore = false;
					if (o_temp_line.BUDGET_N ==0 && o_temp_line.BUDGET_N1==0 && o_temp_line.BUDGET_N2 ==0 && o_temp_line.BUDGET_N3 ==0 && o_temp_line.BUDGET_N4 ==0)
					{
						b_associated_cost = false;
					}
					if(o_temp_line.STATUS =="Frozen" && b_associated_cost)
					{
						var o_budget_Line = plc.1BS.get(s_id_BL);
						if(o_budget_Line instanceof plc.1BS){
							//linking the attributes with the mapping fields in Resource referential
							o_temp_line.DIRECTORATE_MAPPED = au_js_mapping_resource(o_temp_line.DIRECTORATE,"gallium");
							
							//linking the attributes with the mapping fields in Cost Account referential
							o_temp_line.SPENDING_TYPE_MAPPED = au_js_mapping_cost_account(o_temp_line.SPENDING_TYPE,"gallium");
							var o_cost_account = "OpxCostAccount".get( o_temp_line.SPENDING_TYPE_MAPPED);
							if ( o_cost_account.AU_UA_B_COST_ACC_IMP_END ){
								d_SD0 = new date(n_year+0,12,1);
								d_SD1 = new date(n_year+1,12,1);
								d_SD2 = new date(n_year+2,12,1);
								d_SD3 = new date(n_year+3,12,1);
								d_SD4 = new date(n_year+4,12,1);
								} else {
								d_SD0 = new date(n_year+0,1,1);
								d_SD1 = new date(n_year+1,1,1);
								d_SD2 = new date(n_year+2,1,1);
								d_SD3 = new date(n_year+3,1,1);
								d_SD4 = new date(n_year+4,1,1);
							}
							//Check if the project exist and get it
							var s_project;
							if(o_budget_Line.AU_UA_B_USED_BY_PROJECT){
								s_project = o_budget_Line.AU_UA_S_1BS_ROOT_ROOT_ACTIVITY_NAME;
							}
							
							if(s_project == "" || s_project == undefined){
								s_project = context.get("AU_CS_EVM_BUDGET_PROJECT");
							}
							var o_project = "opxProject".get(s_project);
							var v_TopLevelAct_TargetPrj = plw._UtilsGetTopLevel(o_project);
							if(v_TopLevelAct_TargetPrj instanceof vector && v_TopLevelAct_TargetPrj.length==1)
							{
								var o_TopLevelAct = v_TopLevelAct_TargetPrj[0];
								var b_updateN = false;
								var b_updateN1 = false;
								var b_updateN2 = false;
								var b_updateN3 = false;
								var b_updateN4 = false;
								//check for the budget elements in the project if update or create
								//Update the quantity only, other fields are used to detect if it exists
								with(o_project.fromobject()) for(var o_BudgetElement in plc.budget_line where o_BudgetElement.dataset == o_project && o_BudgetElement.BREAKDOWN_1 == o_budget_Line){
									//check on Type/Type of cost/Cost account - The BL is checked with the for
									if(o_BudgetElement.TYPE == s_Default_type && o_BudgetElement._INF_RA_CBS2 == o_Default_cbs2 && o_BudgetElement.COST_ACCOUNT.Name == o_temp_line.SPENDING_TYPE_MAPPED){
										if(o_BudgetElement.SD == d_SD0 && o_BudgetElement.ED == d_ED0){
											b_updateN = true;
											o_BudgetElement.QUANTITY = o_temp_line.BUDGET_N;
											o_BudgetElement.AU_UA_S_IMPORT_BATCH = "Gallium";
											o_BudgetElement.AU_UA_D_LAST_BATCH_UPDATE = Dateoftheday;
										}
										if(o_BudgetElement.SD == d_SD1 && o_BudgetElement.ED == d_ED1){
											b_updateN1 = true;
											o_BudgetElement.QUANTITY = o_temp_line.BUDGET_N1;
											o_BudgetElement.AU_UA_S_IMPORT_BATCH = "Gallium";
											o_BudgetElement.AU_UA_D_LAST_BATCH_UPDATE = Dateoftheday;
										}
										if(o_BudgetElement.SD == d_SD2 && o_BudgetElement.ED == d_ED2){
											b_updateN2 = true;
											o_BudgetElement.QUANTITY = o_temp_line.BUDGET_N2;
											o_BudgetElement.AU_UA_S_IMPORT_BATCH = "Gallium";
											o_BudgetElement.AU_UA_D_LAST_BATCH_UPDATE = Dateoftheday;
										}									
										if(o_BudgetElement.SD == d_SD3 && o_BudgetElement.ED == d_ED3){
											b_updateN3 = true;
											o_BudgetElement.QUANTITY = o_temp_line.BUDGET_N3;
											o_BudgetElement.AU_UA_S_IMPORT_BATCH = "Gallium";
											o_BudgetElement.AU_UA_D_LAST_BATCH_UPDATE = Dateoftheday;
										}										
										if(o_BudgetElement.SD == d_SD4 && o_BudgetElement.ED == d_ED4){
											b_updateN4 = true;
											o_BudgetElement.QUANTITY = o_temp_line.BUDGET_N4;
											o_BudgetElement.AU_UA_S_IMPORT_BATCH = "Gallium";
											o_BudgetElement.AU_UA_D_LAST_BATCH_UPDATE = Dateoftheday;
										}
									}
								}	
								
								//Creation of the new budget lines
								with([plw.no_locking, plw.no_alerts])
								{
									//Activation of the BL if inactive (creation doesn't work if inactive) to reactivate after
									if(o_budget_Line.INACTIVE == true){
										b_inactivebefore = true;
										o_budget_Line.INACTIVE = false;
									}
									//There is 5 new elements because one line in the file can create from 1 to 5 lines
									if(o_temp_line.BUDGET_N != 0 && !b_updateN){
										au_js_new_budget_element(o_TopLevelAct,o_temp_line.BUDGET_N,d_SD0,d_ED0,s_Default_cbs2,s_Default_type,s_Default_Unit,o_temp_line.SPENDING_TYPE_MAPPED,o_budget_Line,"",Dateoftheday,"Gallium");
									}
									if(o_temp_line.BUDGET_N1 != 0 && !b_updateN1){
										au_js_new_budget_element(o_TopLevelAct,o_temp_line.BUDGET_N1,d_SD1,d_ED1,s_Default_cbs2,s_Default_type,s_Default_Unit,o_temp_line.SPENDING_TYPE_MAPPED,o_budget_Line,"",Dateoftheday,"Gallium");
									}									
									if(o_temp_line.BUDGET_N2 != 0 && !b_updateN2){
										au_js_new_budget_element(o_TopLevelAct,o_temp_line.BUDGET_N2,d_SD2,d_ED2,s_Default_cbs2,s_Default_type,s_Default_Unit,o_temp_line.SPENDING_TYPE_MAPPED,o_budget_Line,"",Dateoftheday,"Gallium");
									}							
									if(o_temp_line.BUDGET_N3 != 0 && !b_updateN3){
										au_js_new_budget_element(o_TopLevelAct,o_temp_line.BUDGET_N3,d_SD3,d_ED3,s_Default_cbs2,s_Default_type,s_Default_Unit,o_temp_line.SPENDING_TYPE_MAPPED,o_budget_Line,"",Dateoftheday,"Gallium");
									}							
									if(o_temp_line.BUDGET_N4 != 0 && !b_updateN4){
										au_js_new_budget_element(o_TopLevelAct,o_temp_line.BUDGET_N4,d_SD4,d_ED4,s_Default_cbs2,s_Default_type,s_Default_Unit,o_temp_line.SPENDING_TYPE_MAPPED,o_budget_Line,"",Dateoftheday,"Gallium");
									}
									//reactivation of BL if it was inactive before
									if(b_inactivebefore == true){									
									o_budget_Line.INACTIVE = true;}
								}
							}
						}
					}
				}
				catch(error e){
					if(e != undefined){plw.writetolog("Gallium - Error on import of Budget Element :  " + e); e.printStacktrace();}
				}
			}
			CurrentEvent.delete();	
		}
		sDestinationPath.deleteFile();
		plw.writeln("End of the UPH Gallium import au_js_gallium_create_budget_element");
		plw.writeln("*******************************************************");
	}
}

//************************
//Gallium BCR - Changes and associated budget elements
//************************
//function used in Gallium BCR interface, called in the impex format
function au_js_gallium_impex_bcr(){
	plw.writeln("*******************************************************");	
	plw.writeln("Beginning of the UPH Gallium Changes import au_js_gallium_impex_bcr");
	//Parsing the impex temp table
	for (var o_temp_line in this.temp_impex_data){
		plw.writeln("BCR Before - Processing o_temp_line " + o_temp_line.WORK_ITEM_CODE +"-"+ o_temp_line.PROGRAMME +"-"+ o_temp_line.DIRECTORATE);
		try{
			//transform empty values or strings in budget to 0	
			o_temp_line.BUDGET_N = au_js_check_number_format(o_temp_line.BUDGET_N);
			o_temp_line.BUDGET_N1 = au_js_check_number_format(o_temp_line.BUDGET_N1);
			o_temp_line.BUDGET_N2 = au_js_check_number_format(o_temp_line.BUDGET_N2);
			o_temp_line.BUDGET_N3 = au_js_check_number_format(o_temp_line.BUDGET_N3);
			o_temp_line.BUDGET_N4 = au_js_check_number_format(o_temp_line.BUDGET_N4);
			
			//check if the budget line has budgets, if not then delete the line in temp table to not import it
			var b_imported = false;
			var b_associated_cost = true;
			var b_Budget_Line_exist = false;
			var s_id_BL = o_temp_line.WORK_ITEM_CODE +"-"+ o_temp_line.PROGRAMME +"-"+ o_temp_line.DIRECTORATE;
			if (o_temp_line.BUDGET_N ==0 && o_temp_line.BUDGET_N1==0 && o_temp_line.BUDGET_N2 ==0 && o_temp_line.BUDGET_N3 ==0 && o_temp_line.BUDGET_N4 ==0)
			{
				b_associated_cost = false;
				plw.writeln("Budget Line "+ s_id_BL + " has been rejected because all costs are null/empty ");
			}
			var o_budget_Line = plc.1BS.get(s_id_BL);
			if(!(o_budget_Line instanceof plc.1BS)){	
				plw.writeln("Budget Line "+ s_id_BL + " has been rejected because it is not created in the referential ");
				}else{
				b_Budget_Line_exist = true;
			}
			if(b_associated_cost && b_Budget_Line_exist){
				b_imported = true;	
				//Get the project through the budget line
				var s_project;
				if(o_budget_Line.AU_UA_B_USED_BY_PROJECT){
					s_project = o_budget_Line.AU_UA_S_1BS_ROOT_ROOT_ACTIVITY_NAME;
				}
				if(s_project == "" || s_project == undefined){
					s_project = context.get("AU_CS_EVM_BUDGET_PROJECT");
				}
				var o_project = "opxProject".get(s_project);
				if(o_project instanceof plc.project){}
				{
					o_temp_line.FILE = o_project.NAME;
				}
				//Mapping 
				o_temp_line.TYPE_MAPPED = au_js_mapping_type_cost(o_temp_line.TYPE,"gallium");
			}
			//delete lines in temp table to not import them
			if(b_imported == false) {
				o_temp_line.delete();
			}	
		}
		catch(error e){
			if(e != undefined){plw.writetolog("Gallium - Error on import of BCR Before :  " + e); e.printStacktrace();}
		}
	}
	plw.writeln("End of the UPH Gallium Changes import au_js_gallium_impex_bcr");
	plw.writeln("*******************************************************");
}

//function used after the impex commit, to create the budget elements after the budget Lines
function au_js_gallium_bcr_budget_element()
{
	var Dateoftheday = new date();
	var n_year = Dateoftheday.getyear();
	var sFileName = "Gallium_for_HIP_BCR.csv";
	var sSelectedPath = "/local/home/2A44_SFTP/gallium_import/";
	var sArchivePath = "/local/home/2A44_SFTP/gallium_import/archive/";
	var sDestinationPath = sSelectedPath+sFileName;
	var sArchivedfile = sArchivePath+Dateoftheday.toString("YYYY-MM-DD")+"_"+sFileName;	
	
	if (sDestinationPath.probeFile() != false) {
		plw.writeln("*******************************************************");
		plw.writeln("Beginning of the UPH Gallium Budget Elements import au_js_gallium_bcr_budget_element");		
		sDestinationPath.copyFile(sArchivedfile, true);
		var plc.impextarget target;
		target = plc.impextarget.get("AU_IMP_TARGET_GALLIUM_BCR:CSV file format");
		
		if(Target instanceOf plc.ImpexTarget){
			var plc.impexformat format;
			format = plc.impexformat.get("Change of scope:AU_IMPEX_GALLIUM_BCR");
			//Import in Temp table to parse it and create X Budget elements for each line
			var CurrentEvent = plw.DoImportWithFormatAndTarget(this : Format,Target,false);
			//initializing the variable which don't depend on the temp table
			var s_Default_type = "Imported";
			var s_Default_Unit = "KEUR";
			var d_SD0 = new date(n_year+0,1,1);
			var d_ED0 = new date(n_year+0,12,31);
			var d_SD1 = new date(n_year+1,1,1);
			var d_ED1 = new date(n_year+1,12,31);
			var d_SD2 = new date(n_year+2,1,1);
			var d_ED2 = new date(n_year+2,12,31);
			var d_SD3 = new date(n_year+3,1,1);
			var d_ED3 = new date(n_year+3,12,31);
			var d_SD4 = new date(n_year+4,1,1);
			var d_ED4 = new date(n_year+4,12,31);			
			
			for (var o_temp_line in CurrentEvent.temp_impex_data){
				plw.writeln("BCR After - Processing o_temp_line " + o_temp_line.WORK_ITEM_CODE +"-"+ o_temp_line.PROGRAMME +"-"+ o_temp_line.DIRECTORATE);
				try{
					//transform empty values or strings in budget to 0
					o_temp_line.BUDGET_N = au_js_check_number_format(o_temp_line.BUDGET_N);
					o_temp_line.BUDGET_N1 = au_js_check_number_format(o_temp_line.BUDGET_N1);
					o_temp_line.BUDGET_N2 = au_js_check_number_format(o_temp_line.BUDGET_N2);
					o_temp_line.BUDGET_N3 = au_js_check_number_format(o_temp_line.BUDGET_N3);
					o_temp_line.BUDGET_N4 = au_js_check_number_format(o_temp_line.BUDGET_N4);
					
					var s_id_BL = o_temp_line.WORK_ITEM_CODE +"-"+ o_temp_line.PROGRAMME +"-"+ o_temp_line.DIRECTORATE;
					var b_associated_cost = true;
					var b_inactivebefore = false;
					if (o_temp_line.BUDGET_N ==0 && o_temp_line.BUDGET_N1==0 && o_temp_line.BUDGET_N2 ==0 && o_temp_line.BUDGET_N3 ==0 && o_temp_line.BUDGET_N4 ==0)
					{
						b_associated_cost = false;
					}
					if(b_associated_cost)
					{
						//check if the change and BL exists before creating Budget element
						var o_budget_Line = plc.1BS.get(s_id_BL);
						var o_BCR = "opx_CHG_PT_CHANGE_OF_SCOPE".get(o_temp_line.BCR_NR);
						if(o_budget_Line instanceof plc.1BS && o_BCR != undefined){
							//linking the attributes with the mapping fields in Cost Account referential
							var s_cost_account_after = au_js_mapping_cost_account(o_temp_line.SPENDING_TYPE,"gallium");
							
							//Check if the project exist and get it
							var s_project;
							if(o_budget_Line.AU_UA_B_USED_BY_PROJECT){
								s_project = o_budget_Line.AU_UA_S_1BS_ROOT_ROOT_ACTIVITY_NAME;
							}
							if(s_project == "" || s_project == undefined){
								s_project = context.get("AU_CS_EVM_BUDGET_PROJECT");
							}
							var o_project = "opxProject".get(s_project);
							var v_TopLevelAct_TargetPrj = plw._UtilsGetTopLevel(o_project);
							if(v_TopLevelAct_TargetPrj instanceof vector && v_TopLevelAct_TargetPrj.length==1)
							{
								var o_TopLevelAct = v_TopLevelAct_TargetPrj[0];
								var b_updateN = false;
								var b_updateN1 = false;
								var b_updateN2 = false;
								var b_updateN3 = false;
								var b_updateN4 = false;
								//check for the budget elements in the project if update or create
								//Update the quantity only, other fields are used to detect if it exists
								with(o_project.fromobject()) for(var o_BudgetElement in plc.budget_line where o_BudgetElement.dataset == o_project && o_BudgetElement.BREAKDOWN_1 == o_budget_Line && o_BudgetElement._CHG_RA_CHANGE_OF_SCOPE == o_BCR){
									//check on Cost account - The BL & Change are checked with the for - other attributes are inherited from BL or Change
									if(o_BudgetElement.COST_ACCOUNT.Name == s_cost_account_after){
										if(o_BudgetElement.SD == d_SD0 && o_BudgetElement.ED == d_ED0){
											b_updateN = true;
											o_BudgetElement.QUANTITY = o_temp_line.BUDGET_N;
											o_BudgetElement.AU_UA_S_IMPORT_BATCH = "Gallium";
											o_BudgetElement.AU_UA_D_LAST_BATCH_UPDATE = Dateoftheday;
										}
										if(o_BudgetElement.SD == d_SD1 && o_BudgetElement.ED == d_ED1){
											b_updateN1 = true;
											o_BudgetElement.QUANTITY = o_temp_line.BUDGET_N1;
											o_BudgetElement.AU_UA_S_IMPORT_BATCH = "Gallium";
											o_BudgetElement.AU_UA_D_LAST_BATCH_UPDATE = Dateoftheday;
										}
										if(o_BudgetElement.SD == d_SD2 && o_BudgetElement.ED == d_ED2){
											b_updateN2 = true;
											o_BudgetElement.QUANTITY = o_temp_line.BUDGET_N2;
											o_BudgetElement.AU_UA_S_IMPORT_BATCH = "Gallium";
											o_BudgetElement.AU_UA_D_LAST_BATCH_UPDATE = Dateoftheday;
										}									
										if(o_BudgetElement.SD == d_SD3 && o_BudgetElement.ED == d_ED3){
											b_updateN3 = true;
											o_BudgetElement.QUANTITY = o_temp_line.BUDGET_N3;
											o_BudgetElement.AU_UA_S_IMPORT_BATCH = "Gallium";
											o_BudgetElement.AU_UA_D_LAST_BATCH_UPDATE = Dateoftheday;
										}										
										if(o_BudgetElement.SD == d_SD4 && o_BudgetElement.ED == d_ED4){
											b_updateN4 = true;
											o_BudgetElement.QUANTITY = o_temp_line.BUDGET_N4;
											o_BudgetElement.AU_UA_S_IMPORT_BATCH = "Gallium";
											o_BudgetElement.AU_UA_D_LAST_BATCH_UPDATE = Dateoftheday;
										}
									}
								}	
								//Creation of the new budget lines
								with([plw.no_locking])
								{
									//Activation of the BL if inactive (creation doesn't work if inactive) to reactivate after
									if(o_budget_Line.INACTIVE == true){
										b_inactivebefore = true;
										o_budget_Line.INACTIVE = false;
									}
									var s_CBS2_NAME = o_BCR.AU_UA_CHANGE_SCOPE_TYPE_OF_COST;
									//There is 5 new elements because one line in the file can create from 1 to 5 lines
									if(o_temp_line.BUDGET_N != 0 && !b_updateN){
										au_js_new_budget_element(o_TopLevelAct,o_temp_line.BUDGET_N,d_SD0,d_ED0,s_CBS2_NAME,s_Default_type,s_Default_Unit,s_cost_account_after,o_budget_Line,o_BCR.NAME,Dateoftheday,"Gallium");
									}
									if(o_temp_line.BUDGET_N1 != 0 && !b_updateN1){
										au_js_new_budget_element(o_TopLevelAct,o_temp_line.BUDGET_N1,d_SD1,d_ED1,s_CBS2_NAME,s_Default_type,s_Default_Unit,s_cost_account_after,o_budget_Line,o_BCR.NAME,Dateoftheday,"Gallium");
									}									
									if(o_temp_line.BUDGET_N2 != 0 && !b_updateN2){
										au_js_new_budget_element(o_TopLevelAct,o_temp_line.BUDGET_N2,d_SD2,d_ED2,s_CBS2_NAME,s_Default_type,s_Default_Unit,s_cost_account_after,o_budget_Line,o_BCR.NAME,Dateoftheday,"Gallium");
									}							
									if(o_temp_line.BUDGET_N3 != 0 && !b_updateN3){
										au_js_new_budget_element(o_TopLevelAct,o_temp_line.BUDGET_N3,d_SD3,d_ED3,s_CBS2_NAME,s_Default_type,s_Default_Unit,s_cost_account_after,o_budget_Line,o_BCR.NAME,Dateoftheday,"Gallium");
									}							
									if(o_temp_line.BUDGET_N4 != 0 && !b_updateN4){
										au_js_new_budget_element(o_TopLevelAct,o_temp_line.BUDGET_N4,d_SD4,d_ED4,s_CBS2_NAME,s_Default_type,s_Default_Unit,s_cost_account_after,o_budget_Line,o_BCR.NAME,Dateoftheday,"Gallium");
									}
									//reactivation of BL if it was inactive before
									if(b_inactivebefore == true){									
									o_budget_Line.INACTIVE = true;}
								}
							}
						}
					}
				}
				catch(error e){
					if(e != undefined){plw.writetolog("Gallium - Error on import of BCR After :  " + e); e.printStacktrace();}
				}
			}
			CurrentEvent.delete();
		}
		sDestinationPath.deleteFile();
		plw.writeln("End of the UPH Gallium import au_js_gallium_create_budget_element");
		plw.writeln("*******************************************************");		
	}
}

//Function called by the Gallium batch
// It will call the impex for BL creation/update 
// then it will call Budget element function for creation/update
function au_js_batch_gallium(){	
	plw.writeln("*******************************************************");
	plw.writeln("Beginning of the UPH Gallium Batch");	
	
	// Generate the file for the budget line
	var sFileName = "Gallium_for_HIP_Budget_Lines_Without_Duplicates.csv";
	var sSelectedPath = "/local/home/2A44_SFTP/gallium_import/";
	var sArchivePath = "/local/home/2A44_SFTP/gallium_import/archive/";
	var sDestinationPath = sSelectedPath+sFileName;
	
	var input_file_path = "/local/home/2A44_SFTP/gallium_import/Gallium_for_HIP_Budget_Lines.csv";
	
	if(input_file_path.probeFile() != false){
		var fips = new plw.fileinputstream(input_file_path);
		var fops = new plw.fileoutputstream(sDestinationPath,"OVERWRITE");	
		
		var bl_hash = new hashtable("STRING");
		
		var sline = fips.readline();
		while (sline!=undefined)
		{
			var line_split = sline.split(",");
			var bl_id = line_split[0] + "_" + line_split[1] + "_" + line_split[6];
			if (bl_hash.get(bl_id)==undefined)
			{
				bl_hash.set(bl_id,"BL");
				fops.writeln(sline);			
			}
			sline = fips.readline();
		}
		
		fops.close();
		fips.close();
		
		// Archive file
		var Dateoftheday = new date();
		var sArchivedfile = sArchivePath+Dateoftheday.toString("YYYY-MM-DD")+"_"+sFileName;
		
		//Launching the Impex for Budget Line (1BS) creation and update
		//The script is defined at format level
		var target = plc.impextarget.get("AU_IMP_TARGET_GALLIUM_BUDGET_LINES:CSV file format");
		if(Target instanceOf plc.ImpexTarget){
			var plc.impexformat format;
			format = plc.impexformat.get("Budget Line:AU_IMPEX_GALLIUM_BUDGET_LINE");
			var CurrentEvent = plw.DoImportWithFormatAndTarget(this : Format,Target,false);
			CurrentEvent.DoImport(true);
		}
		
		// Delete Budget Line path
		sDestinationPath.deleteFile();
	}
	
	//Launching the creation/update of budget elements
	au_js_gallium_create_budget_element();
	
	//Launching the creation/update of changes
	//The script is defined at format level
	var target = plc.impextarget.get("AU_IMP_TARGET_GALLIUM_BCR:CSV file format");
	if(Target instanceOf plc.ImpexTarget){
		var plc.impexformat format;
		format = plc.impexformat.get("Change of scope:AU_IMPEX_GALLIUM_BCR");
		var CurrentEvent = plw.DoImportWithFormatAndTarget(this : Format,Target,false);
		// Create here the Change of scope 
		CurrentEvent.DoImport(true);
	}
	//Launching the creation/update of BCR budget elements
	au_js_gallium_bcr_budget_element();
	
	
	plw.writeln("End of the UPH Gallium Batch");
	plw.writeln("*******************************************************");
}
au_js_batch_gallium.exportFunction();

//Function used for manual import - if no access to the server - not used in the batch, only on JSEval
function au_js_manual_gallium_import(){
	var vTmpPathsObject = plw.selectfile("Gallium Budget elements","","*.csv").getserverfiles();
	var sFileName = "Gallium_for_HIP_Budget_Lines.csv";
	var sSelectedPath = "/local/home/2A44_SFTP/gallium_import/";
	if (vTmpPathsObject == false) return false;
	var vTmpPaths = vTmpPathsObject[0];
	var sTmpPath = vTmpPaths[0];
	var sDestinationPath = sSelectedPath+sFileName;
	var oFileToMove = new pathname(sTmpPath);
	oFileToMove.copyFile(sDestinationPath, true);
	
	vTmpPathsObject = plw.selectfile("Gallium BCR","","*.csv").getserverfiles();
	sFileName = "Gallium_for_HIP_BCR.csv";
	if (vTmpPathsObject == false) return false;
	vTmpPaths = vTmpPathsObject[0];
	sTmpPath = vTmpPaths[0];
	sDestinationPath = sSelectedPath+sFileName;
	var oFileToMove = new pathname(sTmpPath);
	oFileToMove.copyFile(sDestinationPath, true);	
	au_js_batch_gallium();
}

//******************************************************************
//Octopus Part
//******************************************************************
//Function called by the Octopus batch
function au_js_batch_octopus(){	
	plw.writeln("*******************************************************");
	plw.writeln("Beginning of the UPH Octopus Batch");
	//set variable to archive files after impex
	var sSelectedPath = "/local/home/2A44_SFTP/octopus_import/";
	var sArchivePath = "/local/home/2A44_SFTP/octopus_import/archive/";
	var Dateoftheday = new date();
	//Launching the Impex for Budget Line (1BS) creation and update
	//The script au_js_octopus_BL_impex is used at format level
	var target_BL = plc.impextarget.get("AU_IMP_TARGET_OCT_BL:CSV file format");
	if(target_BL instanceOf plc.ImpexTarget){
		var sFileName = "S_EVM_Budget_line.csv";
		var sDestinationPath = sSelectedPath+sFileName;
		var sArchivedfile = sArchivePath+Dateoftheday.toString("YYYY-MM-DD")+"_"+sFileName;
		if (sDestinationPath.probeFile() != false) {
			var plc.impexformat format_BL;
			format_BL = plc.impexformat.get("Budget Line:AU_IMPEX_OCTOPUS_BUDGET_LINE");
			plw.writeln("*******************************************************");
			plw.writeln("Beginning of the UPH Octopus Budget Line import");	
			var CurrentEvent = plw.DoImportWithFormatAndTarget(this : format_BL,target_BL,false);
			CurrentEvent.DoImport(true);
			sDestinationPath.copyFile(sArchivedfile, true);
			sDestinationPath.deleteFile();
		}
		plw.writeln("End of the UPH Octopus Budget Line import");	
		plw.writeln("*******************************************************");		
	}
	//Launching the Impex for WBSE
	//No script on impex format
	var target_WBSE = plc.impextarget.get("AU_IMP_TARGET_OCT_WBSE:CSV file format");
	if(target_WBSE instanceOf plc.ImpexTarget){
		var sFileName = "S_EVM_WBSE.csv";
		var sDestinationPath = sSelectedPath+sFileName;
		var sArchivedfile = sArchivePath+Dateoftheday.toString("YYYY-MM-DD")+"_"+sFileName;
		if (sDestinationPath.probeFile() != false) {
			var plc.impexformat format_WBSE;
			format_WBSE = plc.impexformat.get("WBSe:AU_IMPEX_OCTOPUS_WBSE");
			plw.writeln("*******************************************************");
			plw.writeln("Beginning of the UPH Octopus WBSE import");	
			var CurrentEvent = plw.DoImportWithFormatAndTarget(this : format_WBSE,target_WBSE,false);
			CurrentEvent.DoImport(true);
			sDestinationPath.copyFile(sArchivedfile, true);
			sDestinationPath.deleteFile();
		}		
		plw.writeln("End of the UPH Octopus WBSE import");	
		plw.writeln("*******************************************************");	
	}	
	//Launching the script for creation/update of Budget Elements
	//The script will call the impex to work easily on Temp table. It can't be in the impex because we don't commit (unicity issues)
	// Budget_Ref
	au_js_octopus_create_budget_element();
	
	//Launching the Impex for BCR creation and update
	//The script is defined at format level
	//Creation of the file without_duplicates for BCR import
	var sFileName = "S_EVM_Budget_Bridge_Without_Duplicates.csv";
	var sDestinationPath = sSelectedPath+sFileName;
	var input_file_path = "/local/home/2A44_SFTP/octopus_import/S_EVM_Budget_Bridge.csv";
	
	if(input_file_path.probeFile() != false){
		var fips = new plw.fileinputstream(input_file_path);
		var fops = new plw.fileoutputstream(sDestinationPath,"OVERWRITE");
		
		var bl_hash = new hashtable("STRING");
		
		var sline = fips.readline();
		while (sline!=undefined)
		{
			var line_split = sline.split(";");
			var bl_id = line_split[5] + "_" + line_split[3];
			if (bl_hash.get(bl_id)==undefined)
			{
				bl_hash.set(bl_id,"BL");
				fops.writeln(sline);			
			}
			sline = fips.readline();
		}
		
		fops.close();
		fips.close();
		
		var target = plc.impextarget.get("AU_IMP_TARGET_OCT_BCR:CSV file format");
		if(Target instanceOf plc.ImpexTarget){
			//var sFileName = "S_EVM_Budget_Bridge.csv";
			//var sDestinationPath = sSelectedPath+sFileName;
			if (sDestinationPath.probeFile() != false) {		
				var plc.impexformat format;
				format = plc.impexformat.get("Change of scope:AU_IMPEX_OCTOPUS_BCR");
				plw.writeln("*******************************************************");
				plw.writeln("Beginning of the UPH Octopus BCR import");
				var CurrentEvent = plw.DoImportWithFormatAndTarget(this : Format,Target,false);
				CurrentEvent.DoImport(true);
				plw.writeln("End of the UPH Octopus BCR import");	
				plw.writeln("*******************************************************");	
			}
		}
	}
	
	
	
	//Launching the creation/update of budget elements
	au_js_octopus_create_BCR_budget_element();
	
	//Delete Budget element with Quantity = 0
	for(var o_BudgetElement in plc.budget_line where o_BudgetElement.ACTIVITY.IS_TOP_LEVEL && o_BudgetElement.QUANTITY==0)
	{
		plw.writetolog("Delete budget element " + o_BudgetElement + " because quantity is 0.");
		o_BudgetElement.delete();	
	}
	
	plw.writeln("End of the UPH Octopus Batch");
	plw.writeln("*******************************************************");
}
au_js_batch_octopus.exportFunction();

//Function called in the Octopus Budget Line Impex
function au_js_octopus_BL_impex(){
	plw.writeln("*******************************************************");	
	plw.writeln("Beginning of the UPH Octopus Budget Lines import au_js_octopus_BL_impex");
	//create the hastable of lines in the file to deactivate the non present lines
	var h_importedlines = new hashtable();
	//Parsing the impex temp table
	for (var o_temp_line in this.temp_impex_data){
		//linking the attributes with the mapping fields in Resource referential
		o_temp_line.OWNER_MAPPED = au_js_mapping_resource(o_temp_line.BUDGET_OWNER_2L,"octopus");
		
		//linking the attributes with the mapping fields in Programme referential
		o_temp_line.TARGET_LETTER_MAPPED = au_js_mapping_programme(o_temp_line.TARGET_LETTER_DESC,"octopus");
		
		//linking the attributes with the mapping fields in Funding Source referential
		o_temp_line.FUNDING_MAPPED = au_js_mapping_funding_source(o_temp_line.FUNDING,"octopus");
		
		//Set the Alloc to ET - No need because put in the Impex
		//o_temp_line.ALLOCATION = "EX";
		//Set the file to au_cf_data - No need because put in the Impex
		//o_temp_line.FILE = "AU_CF_DATA";
		//Rule for EVM_Method : take only the string before the first underscore
		//Set in the impex
		//Set the Probability to Sure - No need because put in the Impex
		//o_temp_line.PROBABILITY = "Sure"
		
		//Set the Inactive to false
		o_temp_line.INACTIVE = False;
		
		//Set the import date to current date
		o_temp_line.IMPORT_DATE = new date();
		
		//Check if the father exist in the hierarchy, if not the line will be created at top level
		var s_id_BL_father = "OCTOPUS_"+ o_temp_line.TARGET_LETTER_MAPPED;
		var o_BL_father = plc.1BS.get(s_id_BL_father);
		if (o_BL_father != undefined){
			o_temp_line.BL_HIERARCHY = s_id_BL_father;
		}		
		//Put the line in the hashtable before deleting them
		h_importedlines.set(o_temp_line,o_temp_line);
		
	}
	
	//Put as inactive the Budget Lines which were imported before (import date not empty) but not currently in the file
	var Dateoftheday = new date();
	for (var o_budget_Line in plc.1BS where o_budget_Line.INACTIVE ==false && (o_budget_Line.AU_UA_D_OCTOPUS_IMPORT_DATE instanceof date) && o_budget_Line.AU_UA_D_OCTOPUS_IMPORT_DATE.tostring("DD-MM-YYYY") != Dateoftheday.tostring("DD-MM-YYYY")){
		
		if(h_importedlines.get(o_budget_Line) == undefined) o_budget_Line.inactive = true;
	}
	plw.writeln("End of the UPH Octopus Budget Lines import au_js_octopus_BL_impex");
	plw.writeln("*******************************************************");	
}

//Function called for import Octopus Budget Element - outside impex because no commit
function au_js_octopus_create_budget_element()
{
	plw.writeln("*******************************************************");	
	plw.writeln("Beginning of the UPH Octopus Budget Elements import au_js_octopus_create_budget_element");
	
	var Dateoftheday = new date();
	var sFileName = "S_EVM_Budget_Ref.csv";
	var sSelectedPath = "/local/home/2A44_SFTP/octopus_import/";
	var sArchivePath = "/local/home/2A44_SFTP/octopus_import/archive/";
	var sDestinationPath = sSelectedPath+sFileName;
	var sArchivedfile = sArchivePath+Dateoftheday.toString("YYYY-MM-DD")+"_"+sFileName;
	if (sDestinationPath.probeFile() != false) {
		sDestinationPath.copyFile(sArchivedfile, true);
		var plc.impextarget target;
		target = plc.impextarget.get("AU_IMP_TARGET_OCT_BUDGET_ELEMENT:CSV file format");
		if(Target instanceOf plc.ImpexTarget){
			var plc.impexformat format;
			format = plc.impexformat.get("Budget line:AU_IMPEX_OCTOPUS_BUDGET_ELEMENT");
			
			//Import in Temp table to parse it and create X Budget elements for each line
			var CurrentEvent = plw.DoImportWithFormatAndTarget(this : Format,Target,false);
			//initializing the variable which don't depend on the temp table
			var s_Default_cbs2 = context.get("AU_CS_DEFAULT_CBS2");
			var o_Default_cbs2 = "opx_INF_PT_CBS2".get(s_Default_cbs2);	
			var s_Default_type = "Imported";
			var s_Default_Unit = "KEUR";
			//Construction of the new hashtable to be imported (concat of lines based on all relevant info except qty)
			//I wanted to put the vector as key and qty as value but the get doesn't work... so concatenation it is.
			var h_importedlines = new hashtable("STRING");
			for (var o_temp_line in CurrentEvent.temp_impex_data){				
				var s_status = o_temp_line.BCR_STATUS.touppercase();
				var s_ID = o_temp_line.COST_CATEGORY + o_temp_line.FISCAL_YEAR + o_temp_line.BUDGET_LINE;
				if(s_status == "VALIDATED"){
					var v_lineID = new Vector(o_temp_line.COST_CATEGORY,o_temp_line.FISCAL_YEAR,o_temp_line.BUDGET_LINE,o_temp_line.QUANTITY);
					if(h_importedlines.get(s_ID) == undefined){
						h_importedlines.set(s_ID,v_lineID);
						} else{
						var v_temp = h_importedlines.get(s_ID);
						v_temp[3] = v_temp[3] + o_temp_line.QUANTITY;
						h_importedlines.set(s_ID,v_temp);
					}
				}
			}			
			//Modification and creation of Budget elements based on the hashtable
			var h_treatedlines = new hashtable("STRING");
			for (var s_import_line in h_importedlines){
				plw.writeln("Processing line : " + s_import_line);
				try{
					//Initializing the Budget Line
					var v_import_Line = h_importedlines.get(s_import_line);
					var s_id_BL = v_import_line[2];
					var o_budget_Line = plc.1BS.get(s_id_BL);
					if(o_budget_Line instanceof plc.1BS){
						//linking the attributes with the mapping fields in Cost Account referential
						var s_cost_acc_before = v_import_line[0];
						var s_cost_acc_after = au_js_mapping_cost_account(s_cost_acc_before,"octopus");
						var o_cost_account = "OpxCostAccount".get(s_cost_acc_after);
						//Set the Start Date and End date depending if BL is Linear or not
						//If Linear, dates should have been imported with BL import --> Z1T24UP20-6360: case managed in au_js_new_budget_element
						//If no linear dates, then the fiscal year is taken
						var d_SD = new date(v_import_line[1],1,1);
						var d_ED = new date(v_import_line[1],12,31);
						//Check if the project exist and get it - set the activity with same string because level1 act
						var s_project;
						if(o_budget_Line.AU_UA_B_USED_BY_PROJECT){
							s_project = o_budget_Line.AU_UA_S_1BS_ROOT_ROOT_ACTIVITY_NAME;
						}
						if(s_project == "" || s_project == undefined){
							s_project = context.get("AU_CS_EVM_BUDGET_PROJECT");
						}
						var o_project = "opxProject".get(s_project);
						var v_TopLevelAct_TargetPrj = plw._UtilsGetTopLevel(o_project);
						if(v_TopLevelAct_TargetPrj instanceof vector && v_TopLevelAct_TargetPrj.length==1)
						{
							var o_TopLevelAct = v_TopLevelAct_TargetPrj[0];
							//check for the budget elements in the project if update or create
							//Update the quantity only, other fields are used to detect if it exists (SD/ED + Cost account + Task + BL + type of cost)
							//No comparison on the Type because Linear Type is expenditure instead of imported (&& o_BudgetElement.TYPE == s_Default_type)
							var b_update = true;
							with(o_project.fromobject()) for(var o_BudgetElement in plc.budget_line where o_BudgetElement.dataset == o_project && o_BudgetElement.BREAKDOWN_1 == o_budget_Line){
								if(o_BudgetElement.SD.tostring("DD/MM/YYYY") == d_SD.tostring("DD/MM/YYYY") && o_BudgetElement.ED.tostring("DD/MM/YYYY") == d_ED.tostring("DD/MM/YYYY") && o_BudgetElement.ACTIVITY == o_TopLevelAct && o_BudgetElement._INF_RA_CBS2.NAME == s_Default_cbs2 && o_BudgetElement.COST_ACCOUNT.NAME == s_cost_acc_after ){
									// ID based on the real cost account
									var treated_id = s_cost_acc_after+"_"+v_import_line[2]+"_"+o_budget_Line;
									if(h_treatedlines.get(treated_id)==undefined) {
										o_BudgetElement.QUANTITY = v_import_line[3]/1000;
										b_update = false;
										// Add in hashtable to know it has been treated once for this cost account/Fiscal year/BL in current import
										h_treatedlines.set(treated_id,o_BudgetElement);
										break;
									}
									else
									{
										o_BudgetElement.QUANTITY = o_BudgetElement.QUANTITY+v_import_line[3]/1000;
										o_BudgetElement.AU_UA_S_IMPORT_BATCH = "Octopus";
										o_BudgetElement.AU_UA_D_LAST_BATCH_UPDATE = Dateoftheday;
										b_update = false;
									}
								}						
							}
							if(b_update == true){
								with(plw.no_locking){
									//temporary reactivation of BL - create doesn't work if inactive
									var b_inactivebefore = false;
									if(o_budget_Line.INACTIVE == true){
										b_inactivebefore = true;
										o_budget_Line.INACTIVE = false;
									}
									//Creation of line
									au_js_new_budget_element(o_TopLevelAct,v_import_line[3]/1000,d_SD,d_ED,s_Default_cbs2,s_Default_type,s_Default_Unit,s_cost_acc_after,o_budget_Line,"",Dateoftheday,"Octopus");
									// Add in hashtable to know it has been treated once for this cost account/Fiscal year/BL in current import
									var treated_id = s_cost_acc_after+"_"+v_import_line[2]+"_"+o_budget_Line;
									h_treatedlines.set(treated_id,"New");
									//put back the inactive if needed
									if(b_inactivebefore == true){									
										o_budget_Line.INACTIVE = true;
									}
								}
							}
						}						
					}
				}
				catch(error e){
					if(e != undefined){plw.writetolog("Octopus - Error on import of budget element :  " + e); e.printStacktrace();}
				}
			}
			CurrentEvent.delete();
			sDestinationPath.deleteFile();
			
		}
	}
	plw.writeln("End of the UPH Octopus Budget Elements import au_js_octopus_create_budget_element");
	plw.writeln("*******************************************************");	
}

//Function called in the Octopus Budget Bridge (BCR) Impex
//Function called in the Octopus Budget Bridge (BCR) Impex
function au_js_octopus_BCR_impex(){
	plw.writeln("*******************************************************");	
	plw.writeln("Beginning of the UPH Octopus BCR import au_js_octopus_BCR_impex");
	//Parsing the impex temp table
	for (var o_temp_line in this.temp_impex_data){	
		//Find the Budget Line and check if it exists
		
		//linking the attributes with the mapping fields in Type of cost referential
		o_temp_line.CLUSTER_MAPPED = au_js_mapping_type_cost(o_temp_line.CLUSTER,"octopus");
		
		//Get the project through the budget line
		var o_budget_Line = plc.1BS.get(o_temp_line.BUDGET_LINE);
		if(o_budget_Line instanceof plc.1BS){
			var s_project;
			if(o_budget_Line.AU_UA_B_USED_BY_PROJECT){
				s_project = o_budget_Line.AU_UA_S_1BS_ROOT_ROOT_ACTIVITY_NAME;
			}
			if(s_project == "" || s_project == undefined){
				s_project = context.get("AU_CS_EVM_BUDGET_PROJECT");
			}
			var o_project = "opxProject".get(s_project);
			var o_project = "opxProject".get(s_project);
			if(o_project instanceof plc.project){}
			{
				o_temp_line.FILE = o_project.NAME;
			}
		}
		
		// Z1T24UP20-4365 - split BCR, to get 1 BCR per BL
		// Get the parent BCR 
		var parent_BCR = plc._CHG_PT_CHANGE_OF_SCOPE.get(o_temp_line.BCR_NAME);
		// The BCR if it does not exist
		
		if (parent_BCR == undefined)
		{
			plw.writeln("Creation of parent BCR " + o_temp_line.BCR_NAME);
			
			parent_BCR = new plc._CHG_PT_CHANGE_OF_SCOPE(NAME : o_temp_line.BCR_NAME
				,DESC : o_temp_line.BCR_DESC
				,FILE : "AU_CF_DATA"
			);
		}	
		
		if (parent_BCR instanceof plc._CHG_PT_CHANGE_OF_SCOPE)
		o_temp_line.PARENT = parent_BCR.printattribute();
		
		// Update name and description
		o_temp_line.BCR_NAME = o_temp_line.BCR_NAME + "_" + o_temp_line.BUDGET_LINE;
		
	}
	plw.writeln("End of the UPH Octopus BCR import au_js_octopus_BCR_impex");
	plw.writeln("*******************************************************");	
}

//Function called for import Octopus BCR Budget Element - outside impex because no commit
function au_js_octopus_create_BCR_budget_element(){
	plw.writeln("*******************************************************");	
	plw.writeln("Beginning of the UPH Octopus BCR Budget Elements import au_js_octopus_create_BCR_budget_element");
	
	var Dateoftheday = new date();
	var sFileName = "S_EVM_Budget_Bridge.csv";
	var sSelectedPath = "/local/home/2A44_SFTP/octopus_import/";
	var sArchivePath = "/local/home/2A44_SFTP/octopus_import/archive/";
	var sDestinationPath = sSelectedPath+sFileName;
	var sArchivedfile = sArchivePath+Dateoftheday.toString("YYYY-MM-DD")+"_"+sFileName;
	if (sDestinationPath.probeFile() != false) {
		sDestinationPath.copyFile(sArchivedfile, true);
		var plc.impextarget target;
		target = plc.impextarget.get("AU_IMP_TARGET_OCT_BUDGET_BRIDGE:CSV file format");
		if(Target instanceOf plc.ImpexTarget){
			var plc.impexformat format;
			format = plc.impexformat.get("Change of scope:AU_IMPEX_OCTOPUS_BUDGET_ELEMENT_FROM_BCR");
			
			//Import in Temp table to parse it and create X Budget elements for each line
			var CurrentEvent = plw.DoImportWithFormatAndTarget(this : Format,Target,false);
			//initializing the variable which don't depend on the temp table
			var s_Default_type = "Imported";
			var s_Default_Unit = "KEUR";
			
			//Modification and creation of Budget elements based on impex temp table
			for (var o_temp_line in CurrentEvent.temp_impex_data){
				try{
					//Initializing the Budget Line
					var s_id_BL = o_temp_line.BUDGET_LINE;
					var o_budget_Line = plc.1BS.get(s_id_BL);
					//check if the change exists before creating Budget element
					var s_change = o_temp_line.BCR_NAME+"_"+o_temp_line.BUDGET_LINE;
					var o_BCR = "opx_CHG_PT_CHANGE_OF_SCOPE".get(s_change);
					if(o_budget_Line instanceof plc.1BS && o_temp_line.BCR_STATUS.touppercase()=="VALIDATED" && o_BCR != undefined){
						//linking the attributes with the mapping fields in Cost Account referential
						var s_cost_acc_after = au_js_mapping_cost_account(o_temp_line.COST_CATEGORY,"octopus");
						var o_cost_account = "OpxCostAccount".get(s_cost_acc_after);
						//linking the attributes with the mapping fields in Type of cost referential
						var s_type_cost_after = au_js_mapping_type_cost(o_temp_line.CLUSTER,"octopus");
						
						//Set the Start Date and End date depending if BL is Linear or not
						//If Linear, dates should have been imported with BL import
						//If no linear dates, then the fiscal year is taken
						
						// Z1T24UP20-6360 -> Linear case now managed in 'au_js_new_budget_element'
						
						var d_SD = new date(o_temp_line.FISCAL_YEAR,12,1);
						var d_ED = new date(o_temp_line.FISCAL_YEAR,12,31);
						//Check if the project exist and get it - set the activity with same string because level1 act
						var s_project;
						if(o_budget_Line.AU_UA_B_USED_BY_PROJECT)
						{
							s_project = o_budget_Line.AU_UA_S_1BS_ROOT_ROOT_ACTIVITY_NAME;
						}
						if(s_project == "" || s_project == undefined){
							s_project = context.get("AU_CS_EVM_BUDGET_PROJECT");
						}
						var o_project = "opxProject".get(s_project);
						var v_TopLevelAct_TargetPrj = plw._UtilsGetTopLevel(o_project);
						/*if(v_TopLevelAct_TargetPrj instanceof vector && v_TopLevelAct_TargetPrj.length==1)
						{*/
						var o_TopLevelAct = v_TopLevelAct_TargetPrj[0];
						//check for the budget elements in the project if update or create
						//Update the quantity only, other fields are used to detect if it exists (SD/ED + Cost account + Task + BL + type of cost + Change)
						//No comparison on the Type because Linear Type is expenditure instead of imported (&& o_BudgetElement.TYPE == s_Default_type)
						var b_update = true;						
						/*with(o_project.fromobject()) for(var o_BudgetElement in plc.budget_line where o_BudgetElement.dataset == o_project && o_BudgetElement.BREAKDOWN_1 == o_budget_Line){
							if(o_BudgetElement.SD == d_SD && o_BudgetElement.ED == d_ED && o_BudgetElement.ACTIVITY == o_TopLevelAct && o_BudgetElement._INF_RA_CBS2.NAME == s_type_cost_after && o_BudgetElement.COST_ACCOUNT.NAME == s_cost_acc_after && o_BudgetElement._CHG_RA_CHANGE_OF_SCOPE.NAME == s_change){
							o_BudgetElement.QUANTITY = o_temp_line.BUDGET_VAR/1000;
							o_BudgetElement.AU_UA_S_IMPORT_BATCH = "Octopus";
							o_BudgetElement.AU_UA_D_LAST_BATCH_UPDATE = Dateoftheday;
							b_update = false;
							break;
							}						
						}*/
						if(b_update == true)
						{
							if (s_type_cost_after == "" || s_type_cost_after == undefined || o_temp_line.CLUSTER == ""){
								plw.writetolog("Incorrect cluster for BCR : ~a , year : ~a, cost category : ~a, cluster : ~a, probability : ~a".format(s_change,o_temp_line.FISCAL_YEAR,o_temp_line.COST_CATEGORY,o_temp_line.CLUSTER,o_temp_line.OCTOPUS_PROBABILITY));
							}
							else{
								with(plw.no_locking){
									au_js_new_budget_element(o_TopLevelAct,o_temp_line.BUDGET_VAR/1000,d_SD,d_ED,s_type_cost_after,s_Default_type,s_Default_Unit,s_cost_acc_after,o_budget_Line,s_change,Dateoftheday,"Octopus");	
								}
							}
						}
						//}						
					}
				}
				catch(error e)
				{
					if(e != undefined){plw.writetolog("Octopus - Error on import of budget element :  " + e); e.printStacktrace();}
				}
			}
			CurrentEvent.delete();
			sDestinationPath.deleteFile();
			plw.writeln("End of the UPH Octopus BCR Budget Elements import au_js_octopus_create_BCR_budget_element");
			plw.writeln("*******************************************************");	
		}
	}
}

//Function used for manual import - if no access to the server - not used in the batch, only on JSEval
//launch like : au_js_manual_octopus_import("S_EVM_Budget_Ref.csv");
function au_js_manual_octopus_import(csv_name)
{
	var vTmpPathsObject = plw.selectfile("EVM","","*.csv").getserverfiles();
	var sFileName = csv_name;
	var sSelectedPath = "/local/home/2A44_SFTP/octopus_import/";
	if (vTmpPathsObject == false) return false;
	var vTmpPaths = vTmpPathsObject[0];
	var sTmpPath = vTmpPaths[0];
	var sDestinationPath = sSelectedPath+sFileName;
	var oFileToMove = new pathname(sTmpPath);
	oFileToMove.copyFile(sDestinationPath, true);
}

// Update on Budget Elements - Z1T24UP20-5453, Z1T24UP20-5447 & Z1T24UP20-6372
function au_js_update_budget_elements()
{
	with(plw.no_locking)
	{
		// STEP 1: Move budget element that are linked to a Budget line that is not linked to the project - Z1T24UP20-5447
		for(var o_bl in plc.1BS where o_bl.AU_UA_S_PROJECT_USED!="")
		{
			var b_bool = false;
			with(o_bl.fromobject())
			{
				for(var o_be in plc.BUDGET_LINE where o_be.BREAKDOWN_1==o_bl && o_be.FILE.printattribute()!=o_bl.AU_UA_S_PROJECT_USED)
				{
					b_bool = true;
					break;
				}
			}
			
			if(b_bool)
			{
				var o_target_prj = plc.ordo_project.get(o_bl.AU_UA_S_PROJECT_USED) instanceof plc.ordo_project ? plc.ordo_project.get(o_bl.AU_UA_S_PROJECT_USED) : plc.ordo_project.get("BUDGET_PROJECT");
				// Move Budget elements to 'Used by Project'
				plw.alert("Move Budget elements to the project '" + o_bl.AU_UA_S_PROJECT_USED + "' associated with Budget line " +o_bl.printattribute() + ".");
				_au_evm.au_js_evm_move_budget_line_elements(o_bl, o_target_prj);
			}
		}
		
		// STEP 2: Manage Budget elements dates & properties in case of Budget line EVM Method change
		// Filter to manage only Budget elements of the current year, having a Budget line ticked 'Budget Elements To Update'
		for(var o_be in plc.BUDGET_LINE where o_be.SD>="PERIOD_START".call(new date(),"YEAR",0) && o_be.BREAKDOWN_1 instanceof plc.1BS && o_be.BREAKDOWN_1.AU_UA_B_BE_TO_UPDATE)
		{
			// Do no manage Budget elements having Type of cost = BCR Perfo or Cost account = Reserve -> they should be kept as is
			if(!(o_be._INF_RA_CBS2.AU_UA_CBS2_DASHBOARD_DEFAUT==false || o_be.COST_ACCOUNT.AU_UA_B_COST_ACC_IMP_END))
			{
				// 2.A Case EVM Method = Linear
				if (o_be.BREAKDOWN_1.AU_UA_1BS_EVM_METHOD=="Linear")
				{
					// 2.A.1: At Workpackage level, if EVM Method has been changed from Milestone to Linear, change the type to Expenditures
					if(o_be.ACTIVITY.IS_TOP_LEVEL && o_be.TYPE=="Imported" && o_be.AU_RA_BUDGET_LINE_SOURCE=="")
					{
						plw.writeln("Update Type for Budget element " + o_be.printattribute() + " - Type Before : " + o_be.TYPE + " - Date After : Expenditures.");
						o_be.TYPE = "Expenditures";
						o_be.COST_TIMENOW = context.get("AU_CS_COST_TIMENOW");
					}
					// 2.A.2: At task level
					if(!(o_be.ACTIVITY.IS_TOP_LEVEL) && o_be.TYPE=="Expenditures" && o_be.AU_RA_BUDGET_LINE_SOURCE!="")
					{
						// Remove Budget elements
						o_be.delete();
					}
					// 2.A.3: Update dates of Budget elements to align with Budget Line LINEAR Dates
					if (o_be instanceof plc.BUDGET_LINE && o_be.BREAKDOWN_1.AU_UA_D_OCT_LINEAR_SD!=undefined && o_be.SD!=o_be.BREAKDOWN_1.AU_UA_D_OCT_LINEAR_SD)
					{
						plw.writeln("Update Start Date for Budget element " + o_be.printattribute() + " - Date Before : " + o_be.SD + " - Date After : "+ o_be.BREAKDOWN_1.AU_UA_D_OCT_LINEAR_SD + ".");
						o_be.SD=o_be.BREAKDOWN_1.AU_UA_D_OCT_LINEAR_SD;
					}
					if (o_be instanceof plc.BUDGET_LINE && o_be.BREAKDOWN_1.AU_UA_D_OCT_LINEAR_ED!=undefined && o_be.ED!=o_be.BREAKDOWN_1.AU_UA_D_OCT_LINEAR_ED)
					{
						plw.writeln("Update End Date for budget element " + o_be.printattribute() + " - Date Before : " + o_be.ED + " - Date After : "+ o_be.BREAKDOWN_1.AU_UA_D_OCT_LINEAR_ED + ".");
						o_be.ED=o_be.BREAKDOWN_1.AU_UA_D_OCT_LINEAR_ED;	
					}
				// 2.B Case EVM Method = Milestone
				} else if (o_be.BREAKDOWN_1.AU_UA_1BS_EVM_METHOD=="Milestone")
				{
					// 2.B.1: At Workpackage level, if EVM Method has been changed from Linear to Milestone, change the type to Imported
					if(o_be.ACTIVITY.IS_TOP_LEVEL && o_be.TYPE=="Expenditures" && o_be.AU_RA_BUDGET_LINE_SOURCE=="")
					{
						plw.writeln("Update Type for Budget element " + o_be.printattribute() + " - Type Before : " + o_be.TYPE + " - Date After : Imported.");
						o_be.TYPE = "Imported";
					}
				}
			}
		}
		
		// STEP 2: Manage Budget Lines: untick 'Budget Elements To Update'
		for (var o_bl in plc.1BS where o_bl.AU_UA_B_BE_TO_UPDATE)
		{
			// Remove linear dates if milestone method
			if (o_bl.AU_UA_1BS_EVM_METHOD=="Milestone")
			{
				o_bl.AU_UA_D_OCT_LINEAR_SD = undefined;
				o_bl.AU_UA_D_OCT_LINEAR_ED = undefined;
				plw.writeln("Remove LINEAR dates for Budget Line : " + o_bl.printattribute()+".");
			}
			o_bl.AU_UA_B_BE_TO_UPDATE=false;
		}
	}
}
au_js_update_budget_elements.exportfunction(); 
namespace _ah_export_bw;

// Function from E7 to recompute query
function ah_impex_refreshPEXQueryCostTables(query, startDate, endDate) {
  var costTableClass = query._pex_js_getCostTableClass();

  if(costTableClass instanceof ObjectClass) {
    for(var ctClass in plw._pex_js_getNumericCostTables(costTableClass)) {
      var ct = plc.CostTable.get(ctClass.NAME.NAME);

      if(startDate instanceof Date && endDate instanceof Date) {
        ct.start_date = "DATE(\"" + startDate.tostring("JJ-MM-AA:HHhIImSSs") + "\", \"JJ-MM-AA:HHhIImSSs\")";
        ct.end_date = "DATE(\"" + endDate.tostring("JJ-MM-AA:HHhIImSSs") + "\", \"JJ-MM-AA:HHhIImSSs\")";
      }
      ct.refresh();
    }
  }

  query.pex_initializeDynamicFields(new symbol("FORCED"));
  query._pex_js_getCosttableStatus("OVERRIDE");
}


function ah_impex_checkPexQueryCostTable(query) {
  if(query._pex_js_isPossibleToConvertIntoCostTable() == true) {
    var buildInformation = query._pex_js_BuildCostTables_extended(new vector("maxComputationDelay", 0));
    return query._pex_js_setMasterForQuery(buildInformation[1]); 
  }
}

// Current Year by Portfolio
function ah_export_bw_current_year_by_portfolio(port,fops)
{
	// Apply Portfolio
	var port_name = port.printattribute();
	context._FF_AA_S_LIST_NAME = port_name;
	plw.applyFilter(context._FF_NF_S_FAVORITE_FORMULA);

	// Refresh dates and costs
	with(port.fromObject()) {
		for(var project in plc.Project where project.PM_PRJ_FILTER) {
		  plw.writetolog("Computing costs and dates of project ~a".format(project.printattribute()));
		  project.recomputeCostandDate();
		}
	}

	var query = plc._PEX_PT_QUERY.get("AU_QY_EVM_BW_CUR");
	var date = new date();
	var startDate = "PERIOD_START".call(date,"YEAR",0);
	var endDate = "PERIOD_START".call(date,"YEAR",1);

	ah_impex_checkPexQueryCostTable(query);
	ah_impex_refreshPEXQueryCostTables(query, startDate, endDate);

	// Monitoring
	var nb_line = 0;
	for(var o_line in "OpxAU_CT_EVM_BW_CUR".findclass()){nb_line++;}
	var s_monitor_message = "Write to file...";

	// separator;
	var sep = ",";
	// Number format
	var format = "####.0000";
	var zero = "0.0000";
	
	with(plw.monitoring(title: s_monitor_message, steps:nb_line))
	{
		for (var o in "OpxAU_CT_EVM_BW_CUR".findclass())
		{
			// Fields 
			var budget_line = o.ALIAS_1BS;
			var cost_account = o.ALIAS_CBS_NODE;
			var typeofcost = o.ALIAS__INF_PT_CBS2;
			var bl_owner = o.1BS_USER_ATTRIBUTE_AU_UA_1BS_OWNER_DISPLAY;
			var not_null = false;
			
			// PV
			var pv1 = o.ct__pv_2023_jan.tostring(format);
			not_null = (not_null || (pv1!=zero)) ? true : false;
			var pv2 = o.ct__pv_2023_feb.tostring(format);
			not_null = (not_null || (pv2!=zero)) ? true : false;
			var pv3 = o.ct__pv_2023_mar.tostring(format);
			not_null = (not_null || (pv3!=zero)) ? true : false;
			var pv4 = o.ct__pv_2023_apr.tostring(format);
			not_null = (not_null || (pv4!=zero)) ? true : false;
			var pv5 = o.ct__pv_2023_may.tostring(format);
			not_null = (not_null || (pv5!=zero)) ? true : false;
			var pv6 = o.ct__pv_2023_jun.tostring(format);
			not_null = (not_null || (pv6!=zero)) ? true : false;
			var pv7 = o.ct__pv_2023_jul.tostring(format);
			not_null = (not_null || (pv7!=zero)) ? true : false;
			var pv8 = o.ct__pv_2023_aug.tostring(format);
			not_null = (not_null || (pv8!=zero)) ? true : false;
			var pv9 = o.ct__pv_2023_sep.tostring(format);
			not_null = (not_null || (pv9!=zero)) ? true : false;
			var pv10 = o.ct__pv_2023_oct.tostring(format);
			not_null = (not_null || (pv10!=zero)) ? true : false;
			var pv11 = o.ct__pv_2023_nov.tostring(format);
			not_null = (not_null || (pv11!=zero)) ? true : false;
			var pv12 = o.ct__pv_2023_dec.tostring(format);
			not_null = (not_null || (pv12!=zero)) ? true : false;
			// EV 
			var ev1 = o.ct__ev_2023_jan.tostring(format);
			not_null = (not_null || (ev1!=zero)) ? true : false;
			var ev2 = o.ct__ev_2023_feb.tostring(format);
			not_null = (not_null || (ev2!=zero)) ? true : false;
			var ev3 = o.ct__ev_2023_mar.tostring(format);
			not_null = (not_null || (ev3!=zero)) ? true : false;
			var ev4 = o.ct__ev_2023_apr.tostring(format);
			not_null = (not_null || (ev4!=zero)) ? true : false;
			var ev5 = o.ct__ev_2023_may.tostring(format);
			not_null = (not_null || (ev5!=zero)) ? true : false;
			var ev6 = o.ct__ev_2023_jun.tostring(format);
			not_null = (not_null || (ev6!=zero)) ? true : false;
			var ev7 = o.ct__ev_2023_jul.tostring(format);
			not_null = (not_null || (ev7!=zero)) ? true : false;
			var ev8 = o.ct__ev_2023_aug.tostring(format);
			not_null = (not_null || (ev8!=zero)) ? true : false;
			var ev9 = o.ct__ev_2023_sep.tostring(format);
			not_null = (not_null || (ev9!=zero)) ? true : false;
			var ev10 = o.ct__ev_2023_oct.tostring(format);
			not_null = (not_null || (ev10!=zero)) ? true : false;
			var ev11 = o.ct__ev_2023_nov.tostring(format);
			not_null = (not_null || (ev11!=zero)) ? true : false;
			var ev12 = o.ct__ev_2023_dec.tostring(format);
			not_null = (not_null || (ev12!=zero)) ? true : false;
			// EV TREND
			var evt1 = o.ct__ev_trend_2023_jan.tostring(format);
			not_null = (not_null || (evt1!=zero)) ? true : false;
			var evt2 = o.ct__ev_trend_2023_feb.tostring(format);
			not_null = (not_null || (evt2!=zero)) ? true : false;
			var evt3 = o.ct__ev_trend_2023_mar.tostring(format);
			not_null = (not_null || (evt3!=zero)) ? true : false;
			var evt4 = o.ct__ev_trend_2023_apr.tostring(format);
			not_null = (not_null || (evt4!=zero)) ? true : false;
			var evt5 = o.ct__ev_trend_2023_may.tostring(format);
			not_null = (not_null || (evt5!=zero)) ? true : false;
			var evt6 = o.ct__ev_trend_2023_jun.tostring(format);
			not_null = (not_null || (evt6!=zero)) ? true : false;
			var evt7 = o.ct__ev_trend_2023_jul.tostring(format);
			not_null = (not_null || (evt7!=zero)) ? true : false;
			var evt8 = o.ct__ev_trend_2023_aug.tostring(format);
			not_null = (not_null || (evt8!=zero)) ? true : false;
			var evt9 = o.ct__ev_trend_2023_sep.tostring(format);
			not_null = (not_null || (evt9!=zero)) ? true : false;
			var evt10 = o.ct__ev_trend_2023_oct.tostring(format);
			not_null = (not_null || (evt10!=zero)) ? true : false;
			var evt11 = o.ct__ev_trend_2023_nov.tostring(format);
			not_null = (not_null || (evt11!=zero)) ? true : false;
			var evt12 = o.ct__ev_trend_2023_dec.tostring(format);
			not_null = (not_null || (evt12!=zero)) ? true : false;
			// AC 
			var ac1 = o.ct__ac_2023_jan.tostring(format);
			not_null = (not_null || (ac1!=zero)) ? true : false;
			var ac2 = o.ct__ac_2023_feb.tostring(format);
			not_null = (not_null || (ac2!=zero)) ? true : false;
			var ac3 = o.ct__ac_2023_mar.tostring(format);
			not_null = (not_null || (ac3!=zero)) ? true : false;
			var ac4 = o.ct__ac_2023_apr.tostring(format);
			not_null = (not_null || (ac4!=zero)) ? true : false;
			var ac5 = o.ct__ac_2023_may.tostring(format);
			not_null = (not_null || (ac5!=zero)) ? true : false;
			var ac6 = o.ct__ac_2023_jun.tostring(format);
			not_null = (not_null || (ac6!=zero)) ? true : false;
			var ac7 = o.ct__ac_2023_jul.tostring(format);
			not_null = (not_null || (ac7!=zero)) ? true : false;
			var ac8 = o.ct__ac_2023_aug.tostring(format);
			not_null = (not_null || (ac8!=zero)) ? true : false;
			var ac9 = o.ct__ac_2023_sep.tostring(format);
			not_null = (not_null || (ac9!=zero)) ? true : false;
			var ac10 = o.ct__ac_2023_oct.tostring(format);
			not_null = (not_null || (ac10!=zero)) ? true : false;
			var ac11 = o.ct__ac_2023_nov.tostring(format);
			not_null = (not_null || (ac11!=zero)) ? true : false;
			var ac12 = o.ct__ac_2023_dec.tostring(format);
			not_null = (not_null || (ac12!=zero)) ? true : false;
			// AC TREND
			var act1 = o.ct__ac_trend_2023_jan.tostring(format);
			not_null = (not_null || (act1!=zero)) ? true : false;
			var act2 = o.ct__ac_trend_2023_feb.tostring(format);
			not_null = (not_null || (act2!=zero)) ? true : false;
			var act3 = o.ct__ac_trend_2023_mar.tostring(format);
			not_null = (not_null || (act3!=zero)) ? true : false;
			var act4 = o.ct__ac_trend_2023_apr.tostring(format);
			not_null = (not_null || (act4!=zero)) ? true : false;
			var act5 = o.ct__ac_trend_2023_may.tostring(format);
			not_null = (not_null || (act5!=zero)) ? true : false;
			var act6 = o.ct__ac_trend_2023_jun.tostring(format);
			not_null = (not_null || (act6!=zero)) ? true : false;
			var act7 = o.ct__ac_trend_2023_jul.tostring(format);
			not_null = (not_null || (act7!=zero)) ? true : false;
			var act8 = o.ct__ac_trend_2023_aug.tostring(format);
			not_null = (not_null || (act8!=zero)) ? true : false;
			var act9 = o.ct__ac_trend_2023_sep.tostring(format);
			not_null = (not_null || (act9!=zero)) ? true : false;
			var act10 = o.ct__ac_trend_2023_oct.tostring(format);
			not_null = (not_null || (act10!=zero)) ? true : false;
			var act11 = o.ct__ac_trend_2023_nov.tostring(format);
			not_null = (not_null || (act11!=zero)) ? true : false;
			var act12 = o.ct__ac_trend_2023_dec.tostring(format);
			not_null = (not_null || (act12!=zero)) ? true : false;
			
			if (true)
			{
				var result = budget_line+sep+cost_account+sep+typeofcost+sep+bl_owner+sep;
				result+=pv1+sep+pv2+sep+pv3+sep+pv4+sep+pv5+sep+pv6+sep+pv7+sep+pv8+sep+pv9+sep+pv10+sep+pv11+sep+pv12+ sep;
				result+=ev1+sep+ev2+sep+ev3+sep+ev4+sep+ev5+sep+ev6+sep+ev7+sep+ev8+sep+ev9+sep+ev10+sep+ev11+sep+ev12+ sep;
				result+=evt1+sep+evt2+sep+evt3+sep+evt4+sep+evt5+sep+evt6+sep+evt7+sep+evt8+sep+evt9+sep+evt10+sep+evt11+sep+evt12+ sep;
				result+=ac1+sep+ac2+sep+ac3+sep+ac4+sep+ac5+sep+ac6+sep+ac7+sep+ac8+sep+ac9+sep+ac10+sep+ac11+sep+ac12+ sep;
				result+=act1+sep+act2+sep+act3+sep+act4+sep+act5+sep+act6+sep+act7+sep+act8+sep+act9+sep+act10+sep+act11+sep+act12;
				
				fops.writeln(result);
			}
			s_monitor_message.monitor(nb_line);
		}
	}
}

// Next Year By Portfolio
function ah_export_bw_next_year_by_portfolio(port,fops)
{
	// Apply Portfolio
	var port_name = port.printattribute();
	context._FF_AA_S_LIST_NAME = port_name;
	plw.applyFilter(context._FF_NF_S_FAVORITE_FORMULA);

	// Refresh dates and costs
	with(port.fromObject()) {
		for(var project in plc.Project where project.PM_PRJ_FILTER) {
		  plw.writetolog("Computing costs and dates of project ~a".format(project.printattribute()));
		  project.recomputeCostandDate();
		}
	}

	var query = plc._PEX_PT_QUERY.get("AU_QY_EVM_BW_CUR_Y2");
	var date = new date();
	var startDate = "PERIOD_START".call(date,"YEAR",1);
	var endDate = "PERIOD_START".call(date,"YEAR",2);

	ah_impex_checkPexQueryCostTable(query);
	ah_impex_refreshPEXQueryCostTables(query, startDate, endDate);

	// Monitoring
	var nb_line = 0;
	for(var o_line in "OpxAU_CT_EVM_BW_CUR_Y2".findclass()){nb_line++;}
	var s_monitor_message = "Write to file...";

	// separator;
	var sep = ",";
	// Number format
	var format = "####.0000";
	var zero = "0.0000";
	
	with(plw.monitoring(title: s_monitor_message, steps:nb_line))
	{
		for (var o in "OpxAU_CT_EVM_BW_CUR_Y2".findclass())
		{
			// Fields 
			var budget_line = o.ALIAS_1BS;
			var cost_account = o.ALIAS_CBS_NODE;
			var typeofcost = o.ALIAS__INF_PT_CBS2;
			var bl_owner = o.1BS_USER_ATTRIBUTE_AU_UA_1BS_OWNER_DISPLAY;
			var not_null = false;
			
			// PV
			var pv1 = o.ct__pv_2024_jan.tostring(format);
			not_null = (not_null || (pv1!=zero)) ? true : false;
			var pv2 = o.ct__pv_2024_feb.tostring(format);
			not_null = (not_null || (pv2!=zero)) ? true : false;
			var pv3 = o.ct__pv_2024_mar.tostring(format);
			not_null = (not_null || (pv3!=zero)) ? true : false;
			var pv4 = o.ct__pv_2024_apr.tostring(format);
			not_null = (not_null || (pv4!=zero)) ? true : false;
			var pv5 = o.ct__pv_2024_may.tostring(format);
			not_null = (not_null || (pv5!=zero)) ? true : false;
			var pv6 = o.ct__pv_2024_jun.tostring(format);
			not_null = (not_null || (pv6!=zero)) ? true : false;
			var pv7 = o.ct__pv_2024_jul.tostring(format);
			not_null = (not_null || (pv7!=zero)) ? true : false;
			var pv8 = o.ct__pv_2024_aug.tostring(format);
			not_null = (not_null || (pv8!=zero)) ? true : false;
			var pv9 = o.ct__pv_2024_sep.tostring(format);
			not_null = (not_null || (pv9!=zero)) ? true : false;
			var pv10 = o.ct__pv_2024_oct.tostring(format);
			not_null = (not_null || (pv10!=zero)) ? true : false;
			var pv11 = o.ct__pv_2024_nov.tostring(format);
			not_null = (not_null || (pv11!=zero)) ? true : false;
			var pv12 = o.ct__pv_2024_dec.tostring(format);
			not_null = (not_null || (pv12!=zero)) ? true : false;
			// EV 
			var ev1 = o.ct__ev_2024_jan.tostring(format);
			not_null = (not_null || (ev1!=zero)) ? true : false;
			var ev2 = o.ct__ev_2024_feb.tostring(format);
			not_null = (not_null || (ev2!=zero)) ? true : false;
			var ev3 = o.ct__ev_2024_mar.tostring(format);
			not_null = (not_null || (ev3!=zero)) ? true : false;
			var ev4 = o.ct__ev_2024_apr.tostring(format);
			not_null = (not_null || (ev4!=zero)) ? true : false;
			var ev5 = o.ct__ev_2024_may.tostring(format);
			not_null = (not_null || (ev5!=zero)) ? true : false;
			var ev6 = o.ct__ev_2024_jun.tostring(format);
			not_null = (not_null || (ev6!=zero)) ? true : false;
			var ev7 = o.ct__ev_2024_jul.tostring(format);
			not_null = (not_null || (ev7!=zero)) ? true : false;
			var ev8 = o.ct__ev_2024_aug.tostring(format);
			not_null = (not_null || (ev8!=zero)) ? true : false;
			var ev9 = o.ct__ev_2024_sep.tostring(format);
			not_null = (not_null || (ev9!=zero)) ? true : false;
			var ev10 = o.ct__ev_2024_oct.tostring(format);
			not_null = (not_null || (ev10!=zero)) ? true : false;
			var ev11 = o.ct__ev_2024_nov.tostring(format);
			not_null = (not_null || (ev11!=zero)) ? true : false;
			var ev12 = o.ct__ev_2024_dec.tostring(format);
			not_null = (not_null || (ev12!=zero)) ? true : false;
			// EV TREND
			var evt1 = o.ct__ev_trend_2024_jan.tostring(format);
			not_null = (not_null || (evt1!=zero)) ? true : false;
			var evt2 = o.ct__ev_trend_2024_feb.tostring(format);
			not_null = (not_null || (evt2!=zero)) ? true : false;
			var evt3 = o.ct__ev_trend_2024_mar.tostring(format);
			not_null = (not_null || (evt3!=zero)) ? true : false;
			var evt4 = o.ct__ev_trend_2024_apr.tostring(format);
			not_null = (not_null || (evt4!=zero)) ? true : false;
			var evt5 = o.ct__ev_trend_2024_may.tostring(format);
			not_null = (not_null || (evt5!=zero)) ? true : false;
			var evt6 = o.ct__ev_trend_2024_jun.tostring(format);
			not_null = (not_null || (evt6!=zero)) ? true : false;
			var evt7 = o.ct__ev_trend_2024_jul.tostring(format);
			not_null = (not_null || (evt7!=zero)) ? true : false;
			var evt8 = o.ct__ev_trend_2024_aug.tostring(format);
			not_null = (not_null || (evt8!=zero)) ? true : false;
			var evt9 = o.ct__ev_trend_2024_sep.tostring(format);
			not_null = (not_null || (evt9!=zero)) ? true : false;
			var evt10 = o.ct__ev_trend_2024_oct.tostring(format);
			not_null = (not_null || (evt10!=zero)) ? true : false;
			var evt11 = o.ct__ev_trend_2024_nov.tostring(format);
			not_null = (not_null || (evt11!=zero)) ? true : false;
			var evt12 = o.ct__ev_trend_2024_dec.tostring(format);
			not_null = (not_null || (evt12!=zero)) ? true : false;
			// AC 
			var ac1 = o.ct__ac_2024_jan.tostring(format);
			not_null = (not_null || (ac1!=zero)) ? true : false;
			var ac2 = o.ct__ac_2024_feb.tostring(format);
			not_null = (not_null || (ac2!=zero)) ? true : false;
			var ac3 = o.ct__ac_2024_mar.tostring(format);
			not_null = (not_null || (ac3!=zero)) ? true : false;
			var ac4 = o.ct__ac_2024_apr.tostring(format);
			not_null = (not_null || (ac4!=zero)) ? true : false;
			var ac5 = o.ct__ac_2024_may.tostring(format);
			not_null = (not_null || (ac5!=zero)) ? true : false;
			var ac6 = o.ct__ac_2024_jun.tostring(format);
			not_null = (not_null || (ac6!=zero)) ? true : false;
			var ac7 = o.ct__ac_2024_jul.tostring(format);
			not_null = (not_null || (ac7!=zero)) ? true : false;
			var ac8 = o.ct__ac_2024_aug.tostring(format);
			not_null = (not_null || (ac8!=zero)) ? true : false;
			var ac9 = o.ct__ac_2024_sep.tostring(format);
			not_null = (not_null || (ac9!=zero)) ? true : false;
			var ac10 = o.ct__ac_2024_oct.tostring(format);
			not_null = (not_null || (ac10!=zero)) ? true : false;
			var ac11 = o.ct__ac_2024_nov.tostring(format);
			not_null = (not_null || (ac11!=zero)) ? true : false;
			var ac12 = o.ct__ac_2024_dec.tostring(format);
			not_null = (not_null || (ac12!=zero)) ? true : false;
			// AC TREND
			var act1 = o.ct__ac_trend_2024_jan.tostring(format);
			not_null = (not_null || (act1!=zero)) ? true : false;
			var act2 = o.ct__ac_trend_2024_feb.tostring(format);
			not_null = (not_null || (act2!=zero)) ? true : false;
			var act3 = o.ct__ac_trend_2024_mar.tostring(format);
			not_null = (not_null || (act3!=zero)) ? true : false;
			var act4 = o.ct__ac_trend_2024_apr.tostring(format);
			not_null = (not_null || (act4!=zero)) ? true : false;
			var act5 = o.ct__ac_trend_2024_may.tostring(format);
			not_null = (not_null || (act5!=zero)) ? true : false;
			var act6 = o.ct__ac_trend_2024_jun.tostring(format);
			not_null = (not_null || (act6!=zero)) ? true : false;
			var act7 = o.ct__ac_trend_2024_jul.tostring(format);
			not_null = (not_null || (act7!=zero)) ? true : false;
			var act8 = o.ct__ac_trend_2024_aug.tostring(format);
			not_null = (not_null || (act8!=zero)) ? true : false;
			var act9 = o.ct__ac_trend_2024_sep.tostring(format);
			not_null = (not_null || (act9!=zero)) ? true : false;
			var act10 = o.ct__ac_trend_2024_oct.tostring(format);
			not_null = (not_null || (act10!=zero)) ? true : false;
			var act11 = o.ct__ac_trend_2024_nov.tostring(format);
			not_null = (not_null || (act11!=zero)) ? true : false;
			var act12 = o.ct__ac_trend_2024_dec.tostring(format);
			not_null = (not_null || (act12!=zero)) ? true : false;
			
			if (true)
			{
				var result = budget_line+sep+cost_account+sep+typeofcost+sep+bl_owner+sep;
				result+=pv1+sep+pv2+sep+pv3+sep+pv4+sep+pv5+sep+pv6+sep+pv7+sep+pv8+sep+pv9+sep+pv10+sep+pv11+sep+pv12+ sep;
				result+=ev1+sep+ev2+sep+ev3+sep+ev4+sep+ev5+sep+ev6+sep+ev7+sep+ev8+sep+ev9+sep+ev10+sep+ev11+sep+ev12+ sep;
				result+=evt1+sep+evt2+sep+evt3+sep+evt4+sep+evt5+sep+evt6+sep+evt7+sep+evt8+sep+evt9+sep+evt10+sep+evt11+sep+evt12+ sep;
				result+=ac1+sep+ac2+sep+ac3+sep+ac4+sep+ac5+sep+ac6+sep+ac7+sep+ac8+sep+ac9+sep+ac10+sep+ac11+sep+ac12+ sep;
				result+=act1+sep+act2+sep+act3+sep+act4+sep+act5+sep+act6+sep+act7+sep+act8+sep+act9+sep+act10+sep+act11+sep+act12;
				
				fops.writeln(result);
			}

			s_monitor_message.monitor(nb_line);
		}
	}
}


function ah_export_bw_current_year_global()
{
	// file
	var Current_user = context.callstringformula("$CURRENT_USER");
	var vdate=new date();
	var file_name = "export_BW_Current_Year_"+Current_user+"_"+vdate.tostring("YYYYMMDDTHHMMSSZ")+".csv";
	var path = "/tmp/"+file_name;
	var fops = new plw.fileoutputstream(path,"OVERWRITE");
	var sep = ",";

	// First line
	var first_line = "Budget Line Key" + sep + "Cost account" + sep + "Type of cost" + sep + "BL Owner" + sep;
	first_line+="PV JAN (KEUR)" + sep + "PV FEB (KEUR)" + sep + "PV MAR (KEUR)" + sep + "PV APR (KEUR)" + sep + "PV MAY (KEUR)" + sep + "PV JUN (KEUR)" + sep + "PV JUL (KEUR)" + sep + "PV AUG (KEUR)" + sep + "PV SEP (KEUR)" + sep + "PV OCT (KEUR)" + sep + "PV NOV (KEUR)" + sep + "PV DEC (KEUR)"+ sep;
	first_line+="EV JAN (KEUR)" + sep + "EV FEB (KEUR)" + sep + "EV MAR (KEUR)" + sep + "EV APR (KEUR)" + sep + "EV MAY (KEUR)" + sep + "EV JUN (KEUR)" + sep + "EV JUL (KEUR)" + sep + "EV AUG (KEUR)" + sep + "EV SEP (KEUR)" + sep + "EV OCT (KEUR)" + sep + "EV NOV (KEUR)" + sep + "EV DEC (KEUR)"+ sep;
	first_line+="EVT JAN (KEUR)" + sep + "EVT FEB (KEUR)" + sep + "EVT MAR (KEUR)" + sep + "EVT APR (KEUR)" + sep + "EVT MAY (KEUR)" + sep + "EVT JUN (KEUR)" + sep + "EVT JUL (KEUR)" + sep + "EVT AUG (KEUR)" + sep + "EVT SEP (KEUR)" + sep + "EVT OCT (KEUR)" + sep + "EVT NOV (KEUR)" + sep + "EVT DEC (KEUR)"+ sep;
	first_line+="AC JAN (KEUR)" + sep + "AC FEB (KEUR)" + sep + "AC MAR (KEUR)" + sep + "AC APR (KEUR)" + sep + "AC MAY (KEUR)" + sep + "AC JUN (KEUR)" + sep + "AC JUL (KEUR)" + sep + "AC AUG (KEUR)" + sep + "AC SEP (KEUR)" + sep + "AC OCT (KEUR)" + sep + "AC NOV (KEUR)" + sep + "AC DEC (KEUR)"+ sep;
	first_line+="ACT JAN (KEUR)" + sep + "ACT FEB (KEUR)" + sep + "ACT MAR (KEUR)" + sep + "ACT APR (KEUR)" + sep + "ACT MAY (KEUR)" + sep + "ACT JUN (KEUR)" + sep + "ACT JUL (KEUR)" + sep + "ACT AUG (KEUR)" + sep + "ACT SEP (KEUR)" + sep + "ACT OCT (KEUR)" + sep + "ACT NOV (KEUR)" + sep + "ACT DEC (KEUR)";
	fops.writeln(first_line);

	var nb_line = 0;
	for(var port in plc._FF_PT_FAVOR_FILTERS where port.AU_UA_B_EXPORT_BW){nb_line++;}
	var s_monitor_message = "Export BW...";

	with(plw.monitoring(title: s_monitor_message, steps:nb_line))
	{
		for (var port in plc._FF_PT_FAVOR_FILTERS where port.AU_UA_B_EXPORT_BW)
		{
			ah_export_bw_current_year_by_portfolio(port,fops);
			s_monitor_message.monitor(nb_line);
		}
	}
	
	fops.close();
	
	// Empty Portfolio
	context._FF_AA_S_LIST_NAME = "";
	plw.applyFilter(context._FF_NF_S_FAVORITE_FORMULA);	

	plw.downloadFileFromServer(path,file_name);
}

// Export for next Year
function ah_export_bw_next_year_global()
{
	// file
	var Current_user = context.callstringformula("$CURRENT_USER");
	var vdate=new date();
	var file_name = "export_BW_Next_Year_"+Current_user+"_"+vdate.tostring("YYYYMMDDTHHMMSSZ")+".csv";
	var path = "/tmp/"+file_name;
	var fops = new plw.fileoutputstream(path,"OVERWRITE");
	var sep = ",";

	// First line
	var first_line = "Budget Line Key" + sep + "Cost account" + sep + "Type of cost" + sep + "BL Owner" + sep;
	first_line+="PV JAN (KEUR)" + sep + "PV FEB (KEUR)" + sep + "PV MAR (KEUR)" + sep + "PV APR (KEUR)" + sep + "PV MAY (KEUR)" + sep + "PV JUN (KEUR)" + sep + "PV JUL (KEUR)" + sep + "PV AUG (KEUR)" + sep + "PV SEP (KEUR)" + sep + "PV OCT (KEUR)" + sep + "PV NOV (KEUR)" + sep + "PV DEC (KEUR)" + sep;
	first_line+="EV JAN (KEUR)" + sep + "EV FEB (KEUR)" + sep + "EV MAR (KEUR)" + sep + "EV APR (KEUR)" + sep + "EV MAY (KEUR)" + sep + "EV JUN (KEUR)" + sep + "EV JUL (KEUR)" + sep + "EV AUG (KEUR)" + sep + "EV SEP (KEUR)" + sep + "EV OCT (KEUR)" + sep + "EV NOV (KEUR)" + sep + "EV DEC (KEUR)" + sep;
	first_line+="EVT JAN (KEUR)" + sep + "EVT FEB (KEUR)" + sep + "EVT MAR (KEUR)" + sep + "EVT APR (KEUR)" + sep + "EVT MAY (KEUR)" + sep + "EVT JUN (KEUR)" + sep + "EVT JUL (KEUR)" + sep + "EVT AUG (KEUR)" + sep + "EVT SEP (KEUR)" + sep + "EVT OCT (KEUR)" + sep + "EVT NOV (KEUR)" + sep + "EVT DEC (KEUR)" + sep;
	first_line+="AC JAN (KEUR)" + sep + "AC FEB (KEUR)" + sep + "AC MAR (KEUR)" + sep + "AC APR (KEUR)" + sep + "AC MAY (KEUR)" + sep + "AC JUN (KEUR)" + sep + "AC JUL (KEUR)" + sep + "AC AUG (KEUR)" + sep + "AC SEP (KEUR)" + sep + "AC OCT (KEUR)" + sep + "AC NOV (KEUR)" + sep + "AC DEC (KEUR)" + sep;
	first_line+="ACT JAN (KEUR)" + sep + "ACT FEB (KEUR)" + sep + "ACT MAR (KEUR)" + sep + "ACT APR (KEUR)" + sep + "ACT MAY (KEUR)" + sep + "ACT JUN (KEUR)" + sep + "ACT JUL (KEUR)" + sep + "ACT AUG (KEUR)" + sep + "ACT SEP (KEUR)" + sep + "ACT OCT (KEUR)" + sep + "ACT NOV (KEUR)" + sep + "ACT DEC (KEUR)";
	fops.writeln(first_line);

	var nb_line = 0;
	for(var port in plc._FF_PT_FAVOR_FILTERS where port.AU_UA_B_EXPORT_BW){nb_line++;}
	var s_monitor_message = "Export BW...";

	with(plw.monitoring(title: s_monitor_message, steps:nb_line))
	{
		for (var port in plc._FF_PT_FAVOR_FILTERS where port.AU_UA_B_EXPORT_BW)
		{
			ah_export_bw_next_year_by_portfolio(port,fops);
			s_monitor_message.monitor(nb_line);
		}
	}
	
	fops.close();
	
	// Empty Portfolio
	context._FF_AA_S_LIST_NAME = "";
	plw.applyFilter(context._FF_NF_S_FAVORITE_FORMULA);

	plw.downloadFileFromServer(path,file_name);
} 
/// AAL HPQC 42466 OTD 97490 MS export

namespace roaPlvMod;


function gui_gantt_groupBackgroundDrawingHandler(Graphics g, plc.OrdoProject layout, plc.Dataset dataset: undefined) {
  "Background drawing handler for personalizable layouts.
  Return: Boolean, whether the kernel should draw a default background (true) or if we already took care of it (false).
  Secondary value: Integer, a return code.
  @param g Graphics: A Graphics object.
  @param dataset Optional plc.OrdoProject-or-plc.VirtualDataset: The project, or virtual dataset for which we are drawing backgrounds.
    If nothing is given, the project list will be computed from the current list of activities in the Gantt.
  @param layout plc.OrdoProject: The layout to be applied (and personalized) to the project."
  if (! (g instanceof Graphics)) return values (true, -1);
  if (! (layout instanceof plc.OrdoProject)) return values (true, -2);

  var plc.GanttDelta gantt = g.gantt;
  if (! (gantt instanceof plc.GanttDelta)) return values (true, -3);
  if ((! (dataset instanceof plc.OrdoProject))
      && (! (dataset instanceof plc.VirtualDataset))) {
    dataset = gui_gantt_getDatasets(gantt);
    if (! (dataset instanceof Vector)) return values (true, -4);
  }

  var ObjectAttribute groupBySlot = roa_getGroupByAttributeSlot(layout);
  var Boolean groupByActive = (groupBySlot instanceof ObjectAttribute);
  
  var multiline = gantt.getInternalValue(#MULTILINE#);
  var Gantt_groupHeightPlist groupHeight = gantt.getInternalValue(#GROUP-HEIGHT#);
  if (! (groupHeight instanceof Gantt_groupHeightPlist)) return values (true, -5);
  var Vector ghPlist = groupHeight.plist;
  if (! (ghPlist instanceof Vector)) return values (true, -6);
  
  // Get to the maximum number of lines by iterating through the line array until a FALSE is found.
  var Integer linemax = multiline.numberOfAllocatedLines;
  var Vector lineArray = multiline.lineArray;
  var Integer lineArrayMax = lineArray.length;
  while (linemax < lineArrayMax) {
    var List lmax = lineArray[linemax];
    if (lmax.car == false) break;
    linemax++;
  }
  
  var Integer x = - this.x;
  //var Integer w = this.widget.width;
  var Integer w = this.width;
  var plg_hash = plg_getRelevantForProjectAndLayoutByGroupObj(dataset, layout, orderLabel: true);
  if (! (plg_hash instanceof HashTable)) return values (true, -7);
  
  var accessGroupObject = function (arrLine) {
    if (! (arrLine instanceof Cons)) return values (undefined, -1);
    var data = arrLine.car;
    if (! (data instanceof Vector)) return values (undefined, -2);
    if (data.length < 3) return values (undefined, -3);
    var objCons = data[2];
    if (! (objCons instanceof Cons)) return values (undefined, -4);
    var mrk = objCons.car;
    if (! (mrk instanceof plw.Mrk)) return values (undefined, -5);
    return values ((mrk.value instanceof List) ? mrk.value.car : mrk.value, 0);
  };
  
  // Iterate over the raw lines of the Gantt, looking for groups to colorize.
  var drawBg = function(g, sl, el, plg) {
    if (sl instanceof Integer) {
      var bgColor = plg_getBackgroundColor(plg);
      if (bgColor) {
        g.foreground = bgColor;
        g.fillRectangle(x, g.lineToY(sl) - g.y, w, g.lineToY(el) - g.lineToY(sl) + g.y);
      }
    }  
  };
  
  for (var Integer line = 0; line < linemax; line++) {
    // Try to access the grouping objects on the Gantt only when the "group by" property is defined on the the layout.
    var (grpObject, Integer grpRtVal) = groupByActive ? accessGroupObject(lineArray[line]) : values (undefined, 0);
    if (grpRtVal < 0) continue;
    
    var plc._ROA_TT_PLG plg = plg_hash.get(grpObject);
    if (! (plg instanceof plc._ROA_TT_PLG)) continue;

    var grpHeight = ghPlist.getPlist(grpObject);
    if (! (grpHeight instanceof Integer)) continue;
    
    // check for folded state
    if (grpHeight > 0){
      if (line + 1 >= linemax){
        grpHeight = 0;
      }
      else if (groupByActive) {
        var (nextGrpObject, Integer nextGrpRtVal) = accessGroupObject(lineArray[line + 1]);
        if (nextGrpRtVal >= 0){
          var plc._ROA_TT_PLG nextPlg = plg_hash.get(nextGrpObject);
           if (nextPlg instanceof plc._ROA_TT_PLG){
            grpHeight = 0;
           }
        }
      }
    }
    
    drawBg(g, line, line + grpHeight + 1, plg);
    line += grpHeight;
  }
  return values (false, 0);
}

// PLWSCRIPT: _ROA_JS2_PERSONALIZED_LAYOUT_GROUPINGS | GENDEPS

namespace roaPlvMod;

cached function plg_getRelevantForProjectAndLayoutByGroupObj(dataset, plc.OrdoProject layout, Boolean orderLabel: false) {
  "Retrieves all relevant PLG objects for a given project and layout and store them in a hash table by group object.
  Return: Hash table, a hash mapping the grouping objects to their PLG elements.
  Secondary value: Integer, a return code.
  @param dataset plc.OrdoProject-or-plc.VirtualDataset-or-Vector: Either a project or a virtual dataset or a vector.
  @param layout plc.OrdoProject: A layout.
  @param orderLabel Optional Boolean: Whether the full label is being requested (true) or not (false"
  if ((! (dataset instanceof plc.OrdoProject))
      && (! (dataset instanceof plc.VirtualDataset))
      && (! (dataset instanceof Vector))) {
    return values (undefined, -1);
  }
  if (! (layout instanceof plc.OrdoProject)) return values (undefined, -2);
  
  var HashTable hsh = new HashTable("STRING");
  for (var plg in plg_getRelevantForProjectAndLayout(this : context, dataset, layout)) {
    hsh.set(plg_getGroupObject(plg, orderLabel: orderLabel), plg);
  }
  return values (hsh, 0);
} 
namespace _airbus;


// For home page configuration (HIP Sprint 4 - RQM-87). 
// Checks if a program is accessible by the user (i.e. if they have access right to at least one project in that program). 
// Is used in AU_NF_B_PROGRAM_ACCESS (level 1). 
function au_js_program_accessible(program) {
	var o_program = plc.5bs.get(program);

	with (o_program.fromobject()) {
		for (var o_project in plc.ordo_project where (o_project.au_nf_s_prj_program==o_program.name && o_project._INF_NF_S_PRJ_STATE_INTERNAL!="CLOSED")) {
			return true;
		}
	}
	return false;
}
au_js_program_accessible.exportfunction(["STRING"], "BOOLEAN", "return TRUE if the program contains an accessible project for the user, FALSE otherwise");


// For User group management (HIP Sprint 4 - RQM-310). 
// Lists the description of the users, from a list of users. 
// Is used in AU_NF_USER_NAME_LIST (level 1). 
function au_js_list_desc_user(user_list) {
	var string_list = user_list.toString();
	var liste = "";
	var desc_list_vect = new vector();
	for (var each in string_list.parselist() where each != ""){
		var obj = plc.GrouporUser.get(each);
		if (obj != undefined) {
			desc_list_vect.push(obj.CallStringFormula("DESC"));
		}
	}
	liste = desc_list_vect.join(",");
	return liste;
}
au_js_list_desc_user.exportfunction(["STRING"], "STRING", "Returns the list of user descriptions from the list of user names. ");


// For User group management (HIP Sprint 4 - RQM-310). 
// Used in au_js_list_projects_by_user_group. 
// Returns true if a user group belongs to a list of user groups. 
function au_js_user_group_in_groups(user_group, listUserGroups) {
	var boolean result = false;
	var v_UserGroups = listUserGroups.split(",");
	for (var s_currentUserGroup in v_UserGroups where(s_currentUserGroup != "")) {
		if (user_group.name == s_currentUserGroup) {
			return true;
		}
	}
	return result;
}

// For User group management (HIP Sprint 4 - RQM-310). 
// Returns the list of projects linked to a user group (read or write access). 
// Used in AU_NF_USER_GROUP_PROJECTS (level 1). 
function au_js_list_projects_by_user_group(name) {
	
	var user_group = plc.usergroup.get(name);
	var list_project = '';
	var list_vect = new vector();

	for (var project in plc.ordo_project where (au_js_user_group_in_groups(user_group, project.GROUP_READ_WRITE+","+project.GROUP_READ_ONLY)==true)) {
		list_vect.push(project.name);
	}
	list_project = list_vect.join(", ");
	return list_project;
	
}
au_js_list_projects_by_user_group.exportfunction(["STRING"], "STRING", "Returns the list of projects accessible by a user group. ");

// For User group management (HIP Sprint 4 - RQM-310). 
// Returns the list of projects linked to a user group (read or write access). 
// Used in AU_NF_USER_GROUP_PROJECTS (level 1). 
function au_js_list_projects_write_by_user_group(name) {
	
	var user_group = plc.usergroup.get(name);
	var list_project = '';
	var list_vect = new vector();

	for (var project in plc.ordo_project where (au_js_user_group_in_groups(user_group, project.GROUP_READ_WRITE)==true)) {
		list_vect.push(project.name);
	}
	list_project = list_vect.join(", ");
	return list_project;
	
}
au_js_list_projects_write_by_user_group.exportfunction(["STRING"], "STRING", "Returns the list of projects accessible by a user group on write mode. ");


// For User group management (HIP Sprint 4 - RQM-310). 
// Returns the list of projects linked to a user group (read or write access). 
// Used in AU_NF_USER_GROUP_PROJECTS (level 1). 
function au_js_list_projects_read_by_user_group(name) {
	
	var user_group = plc.usergroup.get(name);
	var list_project = '';
	var list_vect = new vector();

	for (var project in plc.ordo_project where (au_js_user_group_in_groups(user_group, project.GROUP_READ_ONLY)==true)) {
		list_vect.push(project.name);
	}
	list_project = list_vect.join(", ");
	return list_project;
	
}
au_js_list_projects_read_by_user_group.exportfunction(["STRING"], "STRING", "Returns the list of projects accessible by a user group on read mode. ");

//ATO : v3.4 US20 : have start date and end date filled in forecast pop-up
function AB_JS_Get_Selected_date(Class,date_type){
	var ReturnValue = new date();
	ReturnValue = -1;
	var class2 = "Opx" + Class;
	for(var Each in plw.getCurrentSelection())
	{
		if((Each != undefined && Each != false &&  Each.findclass() == class2.findclass()) || (Each != undefined && Each != false && Each.findclass().inheritfrom(class2)))
		{
			if(date_type == "start_date")
			{
				ReturnValue = Each.PS;
			}
			else if(date_type == "end_date")
			{
				ReturnValue = Each.PF;
			}
		}
	}
	return ReturnValue;
}
AB_JS_Get_Selected_date.exportFunction(["STRING","STRING"],"DATE","This function retrieve the end date or start date of the selected attribute in table."); 
namespace _ah_data_migration;

with ([plw.map_shadowed_objects, plw.no_locking,plw.no_historization, plw.no_alerts]) {
  	var scope = "All/TRANSVERSE,All/DAUPHIN,All/H175,All/KCP,All/SUPPORT,All/LOG_4.0,All/MSC-G,All/MSC-F,All/ST,All/X9,All/TESTING,All/H160,All/TIGER,All/DOORS,All/VSR700,All/SP,All/FT,All/PROTOTYPE,All/TRANSFO,All/MECA_4.0,All/CE,All/H123,All/S9 -Exotec";
	var list_of_project = new vector();
  	var v_prog_scope = scope.split(",");
    var nb_project =0;
        
     for (var s_prog in v_prog_scope)
     {
	    var o_prog = plc.5BS.get(s_prog);
        if (o_prog instanceof plc.5BS)
        {
    		for (var vProj in plc.project where vProj.DM_UA_B_PRJ_MIGRATED && vProj.callbooleanformula("BELONGS(\"_BM_BS\",\""+o_prog.printattribute()+"\")"))
            {
    			plw.writetolog("AH Datamigration Baseline - Add project to load : " + vProj.printattribute());
    			list_of_project.push(vProj);
    			nb_project++;
            }
         }
     }
     for (var vProj in plc.project where vProj.DM_UA_B_PRJ_MIGRATED && (vProj._BM_BS.printattribute() == "All" || vProj._BM_BS.printattribute()=="") )
     {
		plw.writetolog("AH Datamigration Baseline - Add project to load : " + vProj.printattribute());
		list_of_project.push(vProj);
		nb_project++;
     }
    
    // Open projects
    list_of_project.callmacro("OPEN");
    plw.writetolog("AH Datamigration Baseline - Number of project load : "+nb_project);
    for (var o_project in list_of_project)
    {
        //Delete Old Baselines
        for (var ref in o_project.get("REFERENCES"))
        {
            ref.delete();
        }
        
        //ah_datamig_sync_link(o_project);
        ah_baseline_migration("AU_UA_D_DM_LAST_AGREED_SD", "AU_UA_D_MIG_LAST_AGREED_ED", "LAST_AGREED", "Last Agreed Baseline",o_project);
    ah_baseline_migration("AU_AA_D_GLOBAL_BL_SD", "AU_AA_D_GLOBAL_BL_ED", "GLOBAL", "Global Baseline",o_project);
    ah_baseline_migration("AU_AA_D_INIBL_SD", "AU_AA_D_INIBL_ED", "INITIAL", "Initial Baseline",o_project);
    ah_baseline_migration("AH_UA_TMP_MIG_OP_SD", "AH_UA_TMP_MIG_OP_ED", "OP", "OP",o_project);
    ah_baseline_migration("AH_UA_TMP_MIG_FC1_SD", "AH_UA_TMP_MIG_FC1_ED", "FC1", "FC1",o_project);
    ah_baseline_migration("AH_UA_TMP_MIG_FREEZE_1_SD", "AH_UA_TMP_MIG_FREEZE_1_ED", "FREEZE_1", "FREEZE 1",o_project);
    }
} 
namespace _ah_data_migration;

with ([plw.map_shadowed_objects, plw.no_locking,plw.no_historization, plw.no_alerts]) {
   	var scope = "All/LABO,All/SP,All/AIRCRAFT-MRO";
	var list_of_project = new vector();
    var v_prog_scope = scope.split(",");
    var nb_project =0;
    
     for (var s_prog in v_prog_scope)
     {
         
		
		var o_prog = plc.5BS.get(s_prog);
        if (o_prog instanceof plc.5BS)
        {
			for (var vProj in plc.project where vProj.DM_UA_B_PRJ_MIGRATED && vProj.callbooleanformula("BELONGS(\"_BM_BS\",\""+o_prog.printattribute()+"\")"))
            {
				plw.writetolog("AH Datamigration Baseline - Add project to load : " + vProj.printattribute());
				list_of_project.push(vProj);
				nb_project++;			
         	}
         }
				
     }
    // Open projects
    list_of_project.callmacro("OPEN");
    plw.writetolog("AH Datamigration Baseline - Number of project load : "+nb_project);
    for (var o_project in list_of_project)
    {
        //Delete Old Baselines
        for (var ref in o_project.get("REFERENCES"))
        {
            ref.delete();
        }
        
        //ah_datamig_sync_link(o_project);
        ah_baseline_migration("AU_UA_D_DM_LAST_AGREED_SD", "AU_UA_D_MIG_LAST_AGREED_ED", "LAST_AGREED", "Last Agreed Baseline",o_project);
    	ah_baseline_migration("AU_AA_D_GLOBAL_BL_SD", "AU_AA_D_GLOBAL_BL_ED", "GLOBAL", "Global Baseline",o_project);
    	ah_baseline_migration("AU_AA_D_INIBL_SD", "AU_AA_D_INIBL_ED", "INITIAL", "Initial Baseline",o_project);
    	ah_baseline_migration("AH_UA_TMP_MIG_OP_SD", "AH_UA_TMP_MIG_OP_ED", "OP", "OP",o_project);
    	ah_baseline_migration("AH_UA_TMP_MIG_FC1_SD", "AH_UA_TMP_MIG_FC1_ED", "FC1", "FC1",o_project);
    	ah_baseline_migration("AH_UA_TMP_MIG_FREEZE_1_SD", "AH_UA_TMP_MIG_FREEZE_1_ED", "FREEZE_1", "FREEZE 1",o_project);
    }
} 
namespace _ah_data_migration;

with ([plw.map_shadowed_objects, plw.no_locking,plw.no_historization, plw.no_alerts]) {
   	var scope = "All/NH90,All/H145";
	var list_of_project = new vector();
    var v_prog_scope = scope.split(",");
    var nb_project =0;
    
     for (var s_prog in v_prog_scope)
     {
         
		
		var o_prog = plc.5BS.get(s_prog);
        if (o_prog instanceof plc.5BS)
        {
			for (var vProj in plc.project where vProj.DM_UA_B_PRJ_MIGRATED && vProj.callbooleanformula("BELONGS(\"_BM_BS\",\""+o_prog.printattribute()+"\")"))
            {
				plw.writetolog("AH Datamigration Baseline - Add project to load : " + vProj.printattribute());
				list_of_project.push(vProj);
				nb_project++;			
         	}
         }
				
     }
    // Open projects
    list_of_project.callmacro("OPEN");
    plw.writetolog("AH Datamigration Baseline - Number of project load : "+nb_project);
    for (var o_project in list_of_project)
    {
        //Delete Old Baselines
        for (var ref in o_project.get("REFERENCES"))
        {
            ref.delete();
        }
        
        //ah_datamig_sync_link(o_project);
        ah_baseline_migration("AU_UA_D_DM_LAST_AGREED_SD", "AU_UA_D_MIG_LAST_AGREED_ED", "LAST_AGREED", "Last Agreed Baseline",o_project);
    	ah_baseline_migration("AU_AA_D_GLOBAL_BL_SD", "AU_AA_D_GLOBAL_BL_ED", "GLOBAL", "Global Baseline",o_project);
    	ah_baseline_migration("AU_AA_D_INIBL_SD", "AU_AA_D_INIBL_ED", "INITIAL", "Initial Baseline",o_project);
    	ah_baseline_migration("AH_UA_TMP_MIG_OP_SD", "AH_UA_TMP_MIG_OP_ED", "OP", "OP",o_project);
    	ah_baseline_migration("AH_UA_TMP_MIG_FC1_SD", "AH_UA_TMP_MIG_FC1_ED", "FC1", "FC1",o_project);
    	ah_baseline_migration("AH_UA_TMP_MIG_FREEZE_1_SD", "AH_UA_TMP_MIG_FREEZE_1_ED", "FREEZE_1", "FREEZE 1",o_project);
    }
} 
namespace _ah_data_migration;

with ([plw.map_shadowed_objects, plw.no_locking,plw.no_historization, plw.no_alerts]) {
   	var scope = "All/LH,All/H135";
	var list_of_project = new vector();
    var v_prog_scope = scope.split(",");
    var nb_project =0;
    
     for (var s_prog in v_prog_scope)
     {
         
		
		var o_prog = plc.5BS.get(s_prog);
        if (o_prog instanceof plc.5BS)
        {
			for (var vProj in plc.project where vProj.DM_UA_B_PRJ_MIGRATED && vProj.callbooleanformula("BELONGS(\"_BM_BS\",\""+o_prog.printattribute()+"\")"))
            {
				plw.writetolog("AH Datamigration Baseline - Add project to load : " + vProj.printattribute());
				list_of_project.push(vProj);
				nb_project++;			
         	}
         }
				
     }
    // Open projects
    list_of_project.callmacro("OPEN");
    plw.writetolog("AH Datamigration Baseline - Number of project load : "+nb_project);
    for (var o_project in list_of_project)
    {
        //Delete Old Baselines
        for (var ref in o_project.get("REFERENCES"))
        {
            ref.delete();
        }
        
        //ah_datamig_sync_link(o_project);
        ah_baseline_migration("AU_UA_D_DM_LAST_AGREED_SD", "AU_UA_D_MIG_LAST_AGREED_ED", "LAST_AGREED", "Last Agreed Baseline",o_project);
    	ah_baseline_migration("AU_AA_D_GLOBAL_BL_SD", "AU_AA_D_GLOBAL_BL_ED", "GLOBAL", "Global Baseline",o_project);
    	ah_baseline_migration("AU_AA_D_INIBL_SD", "AU_AA_D_INIBL_ED", "INITIAL", "Initial Baseline",o_project);
    	ah_baseline_migration("AH_UA_TMP_MIG_OP_SD", "AH_UA_TMP_MIG_OP_ED", "OP", "OP",o_project);
    	ah_baseline_migration("AH_UA_TMP_MIG_FC1_SD", "AH_UA_TMP_MIG_FC1_ED", "FC1", "FC1",o_project);
    	ah_baseline_migration("AH_UA_TMP_MIG_FREEZE_1_SD", "AH_UA_TMP_MIG_FREEZE_1_ED", "FREEZE_1", "FREEZE 1",o_project);
    }
} 
namespace _batch_20240801T174823;
plw.writetolog("Test Lancement de batch"); 
namespace _batch_20240806T151833;
for(var act in plc.workstructure){
plw.writetolog("test ok");
}

for(var act in plc.workstructure){
plw.writetolog("test ok");
}

for(var act in plc.workstructure){
plw.writetolog("test ok");
} 
namespace _batch_20240810T202449;
for(var oact in plc.workstructure){
    
    plw.writetolog("ok "+oact);
    for(var obj in plc.constraint){
    
    plw.writetolog("ok ok "+obj);
    
        for(var obj in plc.network){
    
            plw.writetolog("ok ok "+obj);
    
        }
    }
}
 
namespace _ah_baseline;
	ah_js_ba_take_pending_baseline(); 
//* -*- Mode: pjs -*- *****************************************************
//  COPYRIGHT (C) PLANISWARE $Date: 2021/03/27 08:01:05 $                                            
//                                                                          
//  All Rights Reserved                                                     
// 
//  This program and the information contained herein are confidential to
//  and the property of PLANISWARE and are made available only to PLANISWARE
//  employees for the sole purpose of conducting PLANISWARE business.
// 
//  This program and copy therof and the information contained herein shall
//  be maintained in strictest confidence ; shall not be copied in whole or
//  in part except as authorized by the employee's manager ; and shall not
//  be disclosed or distributed (a) to persons who are not PLANISWARE employees,
//  or (b) to PLANISWARE employees for whom such information is not necessary in
//  connection with their assigned responsabilities.
// 
//  There shall be no exceptions to the terms and conditions set forth
//  herein except as authorized in writing by the responsible PLANISWARE General
//  Manager.
//
// 
//  FILE    : $RCSfile: batch_BMX_BA_SYNCHRO_.pjs,v $
// 
//  AUTHOR  : $Author: vfraize $
// 
//  VERSION : $Id: batch_BMX_BA_SYNCHRO_.pjs,v 3.1 2021/03/27 08:01:05 vfraize Exp $
// 
//  PURPOSE :
// 
//  HISTORY :
//  Log : https://cvs.planisware.com/viewvc/customers/Biomerieux_Explor/batch_BMX_BA_SYNCHRO_.pjs?view=log
//**************************************************************************

namespace _project_group;
function bmx_batch_synchro_for_project_group(){
plw.writeln("loading script");
for(var o_pj in plc.ORDO_PROJECT){
	plw.writeln("Project loaded" + o_pj);
	plw.writeln("Prj dataset class "+ o_pj.DATASET_CLASS);
}
var s_ptf_name = "Synchronization project group";
Context._ff_aa_s_list_name = s_ptf_name;
var symb_type =new symbol("NIL","DOD");
var d_currentDate = new date();
var s_breakdown_slot = "BREAKDOWN_0";
var s_queryName = "BMX_QY_PRJ_SYNC_TO_PRJ_GRP";
var s_queryName_budget = "BMX_QY_PRJ_SYNC_TO_PRJ_GRP_BUDGET";
bmx_synchronize_cost_from_project_to_project_group(s_queryName,s_breakdown_slot,symb_type,"EXPENDITURES","EUR_CT__EAC_IN_EUR",s_ptf_name);
plw.writeln("end of bmx_synchronize_cost_from_project_to_project_group for EXPENDITURES");
bmx_synchronize_cost_from_project_to_project_group(s_queryName_budget,s_breakdown_slot,symb_type,"BUDGET","EUR_CT__BAC_IN_EUR",s_ptf_name); 
plw.writeln("end of bmx_synchronize_cost_from_project_to_project_group for BUDGET");
} 
//* -*- Mode: pjs -*- *****************************************************
//  COPYRIGHT (C) PLANISWARE $Date: 2021/02/10 08:04:39 $                                            
//                                                                          
//  All Rights Reserved                                                     
// 
//  This program and the information contained herein are confidential to
//  and the property of PLANISWARE and are made available only to PLANISWARE
//  employees for the sole purpose of conducting PLANISWARE business.
// 
//  This program and copy therof and the information contained herein shall
//  be maintained in strictest confidence ; shall not be copied in whole or
//  in part except as authorized by the employee's manager ; and shall not
//  be disclosed or distributed (a) to persons who are not PLANISWARE employees,
//  or (b) to PLANISWARE employees for whom such information is not necessary in
//  connection with their assigned responsabilities.
// 
//  There shall be no exceptions to the terms and conditions set forth
//  herein except as authorized in writing by the responsible PLANISWARE General
//  Manager.
//
// 
//  FILE    : $RCSfile: BMX_BA_SYNCHRO_PRJ_GRP_COST_DATA.pjs,v $
// 
//  AUTHOR  : $Author: vfraize $
// 
//  VERSION : $Id: BMX_BA_SYNCHRO_PRJ_GRP_COST_DATA.pjs,v 3.1 2021/02/10 08:04:39 vfraize Exp $
// 
//  PURPOSE :
// 
//  HISTORY :
//  Log : https://cvs.planisware.com/viewvc/customers/Biomerieux_Explor/BMX_BA_SYNCHRO_PRJ_GRP_COST_DATA.pjs?view=log
//**************************************************************************
namespace _project_group;

function bmx_synchronize_budget_values_from_act(o_act,v_plist,...args){
	plw.writeln("treating : o_act" + o_act);
	var symb_type =  args.getf(#symb_type#);
	var o_class =  args.getf(#o_class#);
	
	with(o_act.fromobject()){
		// for(var o_exp in plc.Expenditure where o_exp.getinternalvalue("TYPE") == symb_type){o_exp.delete();}
		for(var o_exp in plc.Budgetline){
			if(o_exp.get("SD") == v_plist.get("SD") && o_exp.getinternalvalue("TYPE") == symb_type){
				o_exp.modifywithplist(v_plist);
				if(o_exp.get("BMX_UA_B_OLD_PROJECT_GROUP_COST") != true) plw.writetolog("Modification without mark");
				o_exp.BMX_UA_B_OLD_PROJECT_GROUP_COST = false;
				plw.writetolog("Modification budget-line : " + o_exp.onb + " Activity " + o_exp.project.printattribute() + " " + o_exp.activity.printattribute() + " Year " + o_exp.SD.getyear());
				return true;
			}
		}
	}
	
	v_plist.setplist("UNIT",s_default_unit);
	v_plist.setplist("TYPE",symb_type);
	v_plist.setplist("_INF_RA_CBS2",s_default_cbs2);
	v_plist.setplist("ED",v_plist.get("SD").next(s_default_time_unit));
	with(plw.no_locking){
		var exp_new  = plc.Budgetline.makeopx2objectwithplist(v_plist);
		plw.writetolog("Creation budget-line : Activity " + exp_new.project.printattribute() + " " + exp_new.activity.printattribute() + " Year " + exp_new.SD.getyear());
	}
}

//Function called to create the synchronized activity in the project group from the selected project
function bmx_ojs_build_object_properties(o_prj,...args) {
	var o_top_level_act = plw.top_level_ws(o_prj);
	var o_prj_grp = args.getf(#o_prj_grp#);
	var o_proj = plc.ordo_project.get(o_prj_grp.NAME);
	var o_act = undefined;
	if(o_proj instanceof plc.ordo_project){
		o_act = plw.top_level_ws(o_proj);
	}
  //For activities, we just copy the objects
  //Setting positioning to earliest as it does not make sense to have dropped activities with latest positioning
  //Tested also in French, even when setting EARLIEST, it works and you have AU PLUS TOT
  var vector listofAtt=new vector("NAME" , o_top_level_act.NAME
                           ,"DESC",o_top_level_act.DESC
                           ,"WBS_ELEMENT",o_act
                           ,"PLA","EARLIEST"
						   ,"DATES_CONS",false
						   ,"FILE",o_proj);
  // if (CurrentClass=="OpxActivity".findclass()) {
    var Date StartDate="PERIOD_START".callmacro(o_top_level_act.PS,"YEAR",0);
    var Date EndDate="PERIOD_START".callmacro(o_top_level_act.PF,"YEAR",2);

    //If for any reason, the kernel messes the dates computation and PF < PS => Use PS as EndDate (Issue IS-00018150)
    if (EndDate instanceof Date && StartDate instanceof Date && EndDate<StartDate) {
      EndDate=StartDate;
    }
	var cur_year = "PERIOD_START".callmacro(StartDate,"YEAR",0);
    listofAtt.push("SYNCHRONIZE_WITH");   listofAtt.push(o_top_level_act);
    listofAtt.push("LAST_SYNC_DATE");     listofAtt.push(new date());
    listofAtt.push("SYNC_VERSION");       listofAtt.push(o_top_level_act.OVN);
    listofAtt.push("PS");                 listofAtt.push(StartDate);
    listofAtt.push("SNE");                listofAtt.push(StartDate);
	listofAtt.push("AS");                 listofAtt.push(StartDate);
    listofAtt.push("EXPECTED_FINISH");    listofAtt.push(EndDate);
  return listofAtt;
}

function bmx_create_new_synchronized_activity(o_prj,...args){
	with([plw.no_locking, plw.no_alerts]){
		var listofAtt = bmx_ojs_build_object_properties(o_prj,#o_prj_grp#:args.getf(#o_prj_grp#));
		var newAct = plc.network.makeopx2objectwithPlist(listofAtt);
		return newAct;
	}
}

function bmx_synchronize_cost_from_project_to_project_group(s_queryName,s_breakdown_slot,symb_type,target_type,qty_attribute,s_portfolioName,...args) {

	var o_target_dataset_class = plc.project_type.get(s_dataset_class);
	var v_d_sd = context.get("BMX_UA_D_PERIOD_SYNC_SD");
	var v_d_ed = context.get("BMX_UA_D_PERIOD_SYNC_ED");
	var o_MasterTable=undefined;
	var v_plist = undefined;
	
	// Populate Integration details with total hours per resource
	o_MasterTable = bmx_js_initialize_query_and_master_table(v_d_sd,v_d_ed,s_queryName,s_portfolioName);
	
	if (o_MasterTable==undefined) {
		return false;
	}
	// o_MasterTable.inspect();
	
	for (var line in o_MasterTable) {
		v_plist= new vector();
		v_plist.setplist("SD",line.get("START_DATE"));
		
		var o_prj = line.PROJECT;
		var target_act = o_prj.bmx_get_sync_act_from_project(o_prj.dataset_class,o_target_dataset_class,s_breakdown_slot);
		plw.writeln("target_act is : " + target_act.printattribute() + " From " + o_prj.BREAKDOWN_0.printattribute());
		v_plist.setplist("QUANTITY",line.get(qty_attribute));// fixme ! should be parameter ??
		
		if(target_act ==undefined){
			// creation !!
			var o_prj_grp = o_prj.get(s_breakdown_slot);
			if(o_prj_grp.internal == false){
				target_act = bmx_create_new_synchronized_activity(o_prj,#o_prj_grp#:o_prj_grp);
			}
			if(Context.CallBooleanFormula("$OPX2BATCH_MODE")== true){
			    plw.writetolog("Escaping " + o_prj.printattribute());
				continue; // escaping in batch mode
			}
		}
		
		if(target_act instanceof plc.workstructure){
			v_plist.setplist("ACTIVITY",target_act);
			if(target_type == "EXPENDITURES"){
				v_plist.setplist("DURATION_COMPUTATION", new symbol("FIXED-DATES","KEYWORD"));
				bmx_synchronize_cost_values_from_act(target_act,v_plist,#symb_type#:symb_type);
			}

			if(target_type == "BUDGET"){
				bmx_synchronize_budget_values_from_act(target_act,v_plist,#symb_type#:symb_type);
			}
		}

	}

	return true;
}

plw.writeln("loading script");
for(var o_pj in plc.ORDO_PROJECT){
	plw.writeln("Project loaded" + o_pj);
	plw.writeln("Prj dataset class "+ o_pj.DATASET_CLASS);
}
plw.writeln("loading script finished");

//Marking old project group cost
var symb_type =new symbol("NIL","DOD");
var type = plc.PROJECT_TYPE.get("Product");
var vide = plc.0BS.get(0);
var v_d_sd = context.get("BMX_UA_D_PERIOD_SYNC_SD");
var v_d_ed = context.get("BMX_UA_D_PERIOD_SYNC_ED");

for(var o_prjgp in plc.ordo_project where o_prjgp.dataset_class == type && o_prjgp.breakdown_0 != vide){
	with(o_prjgp.fromobject()){
		plw.writetolog("Marking old project group cost for Project " + o_prjgp.name);
		for(var o_exp in plc.expenditure where o_exp.getinternalvalue("TYPE") == symb_type && o_exp.SD >= v_d_sd && o_exp.SD < v_d_ed){
			o_exp.set("BMX_UA_B_OLD_PROJECT_GROUP_COST", true);
			plw.writetolog("Expenditure " + o_prjgp.name + " " + o_exp.activity.printattribute() + " " + o_exp.SD.getyear());
		}
		for(var o_bdgl in plc.Budgetline where o_bdgl.getinternalvalue("TYPE") == symb_type && o_bdgl.SD >= v_d_sd && o_bdgl.SD < v_d_ed){
			o_bdgl.set("BMX_UA_B_OLD_PROJECT_GROUP_COST", true);
			plw.writetolog("Budget line " + o_prjgp.name + " " + o_bdgl.activity.printattribute() + " " + o_bdgl.SD.getyear());
		}
	}
}

//Synchronisation
var s_ptf_name = "Synchronization project group";
Context._ff_aa_s_list_name = s_ptf_name;
var symb_type =new symbol("NIL","DOD");
var d_currentDate = new date();
var s_breakdown_slot = "BREAKDOWN_0";
var s_queryName = "BMX_QY_PRJ_SYNC_TO_PRJ_GRP";
var s_queryName_budget = "BMX_QY_PRJ_SYNC_TO_PRJ_GRP_BUDGET";
plw.writeln("start of bmx_synchronize_cost_from_project_to_project_group for EXPENDITURES");
bmx_synchronize_cost_from_project_to_project_group(s_queryName,s_breakdown_slot,symb_type,"EXPENDITURES","EUR_CT__EAC_IN_EUR",s_ptf_name);
plw.writeln("end of bmx_synchronize_cost_from_project_to_project_group for EXPENDITURES");
plw.writeln("start of bmx_synchronize_cost_from_project_to_project_group for BUDGET");
bmx_synchronize_cost_from_project_to_project_group(s_queryName_budget,s_breakdown_slot,symb_type,"BUDGET","EUR_CT__BAC_IN_EUR",s_ptf_name); 
plw.writeln("end of bmx_synchronize_cost_from_project_to_project_group for BUDGET");

//Delete old costs
for(var o_exp in plc.expenditure where o_exp.BMX_UA_B_OLD_PROJECT_GROUP_COST){
	plw.writetolog("Delete old expenditure : " + o_exp.onb + " Activity " + o_exp.project.printattribute() + " " + o_exp.activity.printattribute() + " Year " + o_exp.SD.getyear());
	o_exp.delete();
}
for(var o_bdgl in plc.Budgetline where o_bdgl.BMX_UA_B_OLD_PROJECT_GROUP_COST){
	plw.writetolog("Delete old budget-line : " + o_bdgl.onb + " Activity " + o_bdgl.project.printattribute() + " " + o_bdgl.activity.printattribute() + " Year " + o_bdgl.SD.getyear());
	o_bdgl.delete();
}
 
namespace _bmx_dyn_attribute;
/*function bmx_field_slot_reader_1() {
	var v_exp=this.get("r.BMX_RA_SAP_CODE.EXPENDITURE");
	var v_std_exp = new vector();
	for(var each in v_exp where each instanceof plc.expenditure && each.getinternalvalue("TYPE")==false) v_std_exp.push(each);
	var n_exp = v_std_exp.length;
	if(n_exp==0) return "";
	else if(n_exp>1) return "Error plusieurs";
	else{
		var o_exp=v_std_exp[0];
		return o_exp.BMX_AA_NP_PL_EXP_NP;
	}
}

function bmx_field_slot_modifier_1(value) {
	var v_exp=this.get("r.BMX_RA_SAP_CODE.EXPENDITURE");
	var v_std_exp = new vector();
	for(var each in v_exp where each instanceof plc.expenditure && each.getinternalvalue("TYPE")==false) v_std_exp.push(each);
	var n_exp = v_std_exp.length;
	if(n_exp==1){
		var o_exp=v_std_exp[0];
		o_exp.set("BMX_AA_NP_PL_EXP_NP", value);
	}
}

function bmx_field_slot_locker_1() {
	return false;
	var v_exp=this.get("r.BMX_RA_SAP_CODE.EXPENDITURE");
	var v_std_exp = new vector();
	for(var each in v_exp where each instanceof plc.expenditure && each.getinternalvalue("TYPE")==false) v_std_exp.push(each);
	var n_exp = v_std_exp.length;
	if(n_exp==1) return false;
	else true;
}

function bmx_field_create_dynamic_attribute_1(){
	try{
		var slot = new objectAttribute(plc.BMX_PT_SAP_CODE, "BMX_DA_SAP_EXP_NOTEPAD", "multi-line-string");
		slot.Comment = "Expenditure Notepad";
		slot.Reader = bmx_field_slot_reader_1;
		slot.Modifier = bmx_field_slot_modifier_1;
		slot.Locker = false;//bmx_field_slot_locker_1;
		slot.hiddenInIntranetServer = true;
		//slot.connecting = false;
		plw.writetolog("BMX_DA_SAP_EXP_NOTEPAD created");
	}
	catch(error e){
		plw.writetolog("Could not create slot due to error: " + e);
	}
}*/

function bmx_field_slot_reader_2() {
    //plw.alert(plw.getReporting().name);
    var Reporting_name = plw.getReporting().name;
    if(Reporting_name in ["_BM_REPORT_BUCKET_DETAILLED_SHEET","_BM_REPORT_PROGRAM_INPUT_TABLE"]){
        var s_user = context.callstringformula("$CURRENT_USER");
        if(context._BM_AA_S_BREAKDOWN_TO_SYNCHRONIZE == "Strategic axis" ||
            context._BM_AA_S_BREAKDOWN_TO_SYNCHRONIZE ==  plw.multilingual_writeTextKeyInLanguage("strategyMod.strategicAxis","ENGLISH")||
            context._BM_AA_S_BREAKDOWN_TO_SYNCHRONIZE == "_STRAT_PT_STRAT_AXIS"){
            context._BM_AA_S_BREAKDOWN_TO_SYNCHRONIZE = "_BM_BS";
            //plw.alert(s_user+" To _BM_BS");
        }
        var UserClass = Context._BM_AA_S_BREAKDOWN_TO_SYNCHRONIZE;
        //plw.alert(s_user+" input : "+UserClass);
        var Class = "Opx"+UserClass;
        var OpxClass = Class.FindClass();
        if(!(OpxClass instanceof ObjectClass)){
            context._BM_AA_S_BREAKDOWN_TO_SYNCHRONIZE = "1BS";
            //plw.alert(s_user+" output : "+context._BM_AA_S_BREAKDOWN_TO_SYNCHRONIZE);
        }
    }
	return Reporting_name;
}

function bmx_field_create_dynamic_attribute_2(){
	try{
		var slot = new objectAttribute(plc.context_opx2, "BMX_DA_CURRENT_REPORT", "String");
		slot.Comment = "Current reporting";
		slot.Reader = bmx_field_slot_reader_2;
		slot.hiddenInIntranetServer = true;
		plw.writetolog("BMX_DA_CURRENT_REPORT created");
	}
	catch(error e){
		plw.writetolog("Could not create slot due to error: " + e);
	}
}

try{
	with(plw.no_locking){
		//bmx_field_create_dynamic_attribute_1();
		bmx_field_create_dynamic_attribute_2();
	}
}
catch (error e){
	plw.writetolog("Failed to create dynamic attribute");
	plw.writetolog(e);
} 
Namespace _Explor_BI_csv;
//========================

var date_format = plc.date_format.get("MM/DD/YYYY");
context.date=date_format;
var number_format = plc.number_format.get("####.0000");
context.number=number_format;
context._FF_AA_S_LIST_NAME="BI Export Portfolio";

plw.writetolog("Date format : "+context.date.name);
var vNewDir = context.BMX_GS_EXPORT_BI_FOLDER;
var date_start = context.calldateformula("$TIME_WINDOW_START");
var date_end = context.calldateformula("$TIME_WINDOW_END");

if (vNewDir.probefile()==false){
	plw.writetolog("****** creating directory "+vNewDir+" ****");
	vNewDir.mkdir();
}
plw.writetolog("Begin Clean_Old_Files");
Clean_Old_Files(context.BMX_GS_EXPORT_BI_FOLDER);
plw.writetolog("End Clean_Old_Files");


bmx_export_standard("BMX_TARGET_EXP_BI_ACTIVITY_TYPE:CSV file format", "Activity type:BMX_IMPEX_EXP_BI_ACTIVITY_TYPE");
bmx_export_standard("BMX_TARGET_EXP_BI_ACTIVITY:CSV file format", "Activity:BMX_IMPEX_EXP_BI_ACTIVITY");
bmx_export_standard("BMX_TARGET_EXP_BI_CHARGEBACK_COEFFICIENT:CSV file format", "Chargeback coefficient:BMX_IMPEX_EXP_BI_CHARGEBACK_COEFFICIENT");
bmx_export_standard("BMX_TARGET_EXP_BI_COST_ACCOUNT:CSV file format", "Cost account:BMX_IMPEX_EXP_BI_COST_ACCOUNT");
bmx_export_standard("BMX_TARGET_EXP_BI_COST_AREA:CSV file format", "Cost Area:BMX_IMPEX_EXP_BI_COST_AREA");
bmx_export_standard("BMX_TARGET_EXP_BI_FUNDING_SOURCES:CSV file format", "Funding source:BMX_IMPEX_EXP_BI_FUNDING_SOURCES");
bmx_export_standard("BMX_TARGET_EXP_BI_LOCATION:CSV file format", "Location:BMX_IMPEX_EXP_BI_LOCATION");
bmx_export_standard("BMX_TARGET_EXP_BI_ENTITY:CSV file format", "OBS element:BMX_IMPEX_EXP_BI_ENTITY");
bmx_export_standard("BMX_TARGET_EXP_BI_BUCKET_PE:CSV file format", "Planned expenditure:BMX_IMPEX_EXP_BI_BUCKETS_PE");
bmx_export_standard("BMX_TARGET_EXP_BI_BUCKET_PH:CSV file format", "Planned hours:BMX_IMPEX_EXP_BI_BUCKETS_PH");
bmx_export_standard("BMX_TARGET_EXP_BI_PROGRAM:CSV file format", "Program:BMX_IMPEX_EXP_BI_PROGRAM");
bmx_export_standard("BMX_TARGET_EXP_BI_PROJECT:CSV file format", "Project:BMX_IMPEX_EXP_BI_PROJECT");
bmx_export_standard("BMX_TARGET_EXP_BI_PROJECT_GROUP:CSV file format", "Project:BMX_IMPEX_EXP_BI_PROJECT_GROUP");
bmx_export_standard("BMX_TARGET_EXP_BI_RESOURCE:CSV file format", "Resource:BMX_IMPEX_EXP_BI_RESOURCE");
bmx_export_standard("BMX_TARGET_EXP_BI_TIMECARD:CSV file format", "Time card:BMX_IMPEX_EXP_BI_TIMECARD");
bmx_export_standard("BMX_TARGET_EXP_BI_TYPE_PROJECT:CSV file format", "Type of project:BMX_IMPEX_EXP_BI_TYPE_PROJECT");
bmx_export_standard("BMX_TARGET_EXP_BI_USER:CSV file format", "User:BMX_IMPEX_EXP_BI_USER");
bmx_export_standard("BMX_TARGET_EXP_BI_VALUE_CATEGORY:CSV file format", "Value category:BMX_IMPEX_EXP_BI_VALUE_CATEGORY");
bmx_export_from_pex_query("BMX_TARGET_EXP_BI_SUPPLY:CSV file format", "EXPLOR_BI_SUPPLY:BMX_IMPEX_EXP_BI_SUPPLY", "BI Export Portfolio", "BMX_QY_EXPLOR_BI_SUPPLY", Context.CallDateFormula("period_start($DATE_OF_THE_DAY,\"YEAR\",0)"), Context.CallDateFormula("period_start($DATE_OF_THE_DAY,\"YEAR\",2)"));
bmx_export_from_pex_query("BMX_TARGET_EXP_BI_DEMAND:CSV file format", "EXPLOR_BI_DEMAND:BMX_IMPEX_EXP_BI_DEMAND", "BI Export Portfolio", "BMX_QY_EXPLOR_BI_DEMAND", Context.CallDateFormula("period_start($DATE_OF_THE_DAY,\"YEAR\",0)"), Context.CallDateFormula("period_start($DATE_OF_THE_DAY,\"YEAR\",2)"));
bmx_export_from_pex_query("BMX_TARGET_EXP_BI_AVAIBILITY:CSV file format", "EXPLOR_BI_AVAIBILITY:BMX_IMPEX_EXP_BI_AVAIBILITY", "BI Export Portfolio", "BMX_QY_EXPLOR_BI_AVAIBILY", Context.CallDateFormula("period_start($DATE_OF_THE_DAY,\"YEAR\",-1)"), Context.CallDateFormula("period_start($DATE_OF_THE_DAY,\"YEAR\",2)"));


/////////////////////////////////////////////////////////////////////////////////////////////////////////
    plw.writetolog("Start computing dates for time synthesis");
    var o_ptf = plc._FF_PT_FAVOR_FILTERS.get("BI Export Portfolio");
    var all_hes_dates = bmx_bi_build_date_vector(o_ptf);
    plw.writetolog("End computing dates for time synthesis");
    
    
    var date = new date();
    var file_name = context.BMX_GS_EXPORT_BI_FOLDER + "cost_curves_" +"PRINT_DATE".call(date,"YYYYMMDDTHHMMSS") +".csv";
    var path = new pathname(file_name);
    var file = new plw.fileoutputstream(file_name,"OVERWRITE");
    // The scope of the data exported can be changed thanks to this o_ptf var where you can put any portfolio the INTRANET user has access to
    //var o_ptf = plc._FF_PT_FAVOR_FILTERS.get("EXPORT_TABLEAU");
    
    // First line of the file 
    file.writeln("FundingSource,Project,Resource,ValueCateg,OpexCapex,CostAccount,Year,Month,Curve,Value,Days");
    	
    
    var start_horizon_date;
    var end_horizon_date;
    
    //LBE_Q1
    plw.writetolog("Export LBE_Q1 --> Start");
    start_horizon_date = Context.CallDateFormula("period_start($DATE_OF_THE_DAY,\"YEAR\",0)"); 
    end_horizon_date = Context.CallDateFormula("period_start($DATE_OF_THE_DAY,\"YEAR\",1)");
    bmx_export_project_curve(o_ptf,"EAC","LBE_Q1",false,false,"LBE_Q1",true,true,start_horizon_date,end_horizon_date,file,all_hes_dates,"LBE_Q1");
    plw.writetolog("Export LBE_Q1 --> End");
    
    //LBE_Q2
    plw.writetolog("Export LBE_Q2 --> Start");
    start_horizon_date = Context.CallDateFormula("period_start($DATE_OF_THE_DAY,\"YEAR\",0)"); 
    end_horizon_date = Context.CallDateFormula("period_start($DATE_OF_THE_DAY,\"YEAR\",1)");
    bmx_export_project_curve(o_ptf,"EAC","LBE_Q2",false,false,"LBE_Q2",true,true,start_horizon_date,end_horizon_date,file,all_hes_dates,"LBE_Q2");
    plw.writetolog("Export LBE_Q2 --> End");
    
    //LBE_Q3
    plw.writetolog("Export LBE_Q3 --> Start");
    start_horizon_date = Context.CallDateFormula("period_start($DATE_OF_THE_DAY,\"YEAR\",0)"); 
    end_horizon_date = Context.CallDateFormula("period_start($DATE_OF_THE_DAY,\"YEAR\",1)");
    bmx_export_project_curve(o_ptf,"EAC","LBE_Q3",false,false,"LBE_Q3",true,true,start_horizon_date,end_horizon_date,file,all_hes_dates,"LBE_Q3");
    plw.writetolog("Export LBE_Q3 --> End");
    
    //BUDGET_V1
    plw.writetolog("Export BUDGET_V1 --> Start");
    start_horizon_date = Context.CallDateFormula("period_start($DATE_OF_THE_DAY,\"YEAR\",1)"); 
    end_horizon_date = Context.CallDateFormula("period_start($DATE_OF_THE_DAY,\"YEAR\",2)");
    bmx_export_project_curve(o_ptf,"EAC","BUDGET_V1",false,"BMX_RT_BUDGET","BUDGET_V1",true,true,start_horizon_date,end_horizon_date,file,all_hes_dates,"BUDGET_V1");
    plw.writetolog("Export BUDGET_V1 --> End");
    
    //BUDGET_V2
    plw.writetolog("Export BUDGET_V2 --> Start");
    start_horizon_date = Context.CallDateFormula("period_start($DATE_OF_THE_DAY,\"YEAR\",1)"); 
    end_horizon_date = Context.CallDateFormula("period_start($DATE_OF_THE_DAY,\"YEAR\",2)");
    bmx_export_project_curve(o_ptf,"EAC","BUDGET_V2",false,"BMX_RT_BUDGET","BUDGET_V2",true,true,start_horizon_date,end_horizon_date,file,all_hes_dates,"BUDGET_V2");
    plw.writetolog("Export BUDGET_V2 --> End");
    
    //BUDGET_V3
    plw.writetolog("Export BUDGET_V3 --> Start");
    start_horizon_date = Context.CallDateFormula("period_start($DATE_OF_THE_DAY,\"YEAR\",1)"); 
    end_horizon_date = Context.CallDateFormula("period_start($DATE_OF_THE_DAY,\"YEAR\",2)");
    bmx_export_project_curve(o_ptf,"EAC","BUDGET_V3",false,"BMX_RT_BUDGET","BUDGET_V3",true,true,start_horizon_date,end_horizon_date,file,all_hes_dates,"BUDGET_V3");
    plw.writetolog("Export BUDGET_V3 --> End");
    
    // BUDGET N 
    start_horizon_date = Context.CallDateFormula("period_start($DATE_OF_THE_DAY,\"YEAR\",0)"); 
    end_horizon_date = Context.CallDateFormula("period_start($DATE_OF_THE_DAY,\"YEAR\",1)");
    var n_year = "YEAR_NUMBER".call(start_horizon_date);
    var ref_name = "BUDGET_"+n_year.tostring("####");
    plw.writetolog("Export "+ref_name+" --> Start");
    bmx_export_project_curve(o_ptf,"EAC",ref_name,false,"BMX_RT_BUDGET",ref_name,true,true,start_horizon_date,end_horizon_date,file,all_hes_dates,ref_name);
    plw.writetolog("Export "+ref_name+" --> End");
    
    // BUDGET N+1
    start_horizon_date = Context.CallDateFormula("period_start($DATE_OF_THE_DAY,\"YEAR\",1)"); 
    end_horizon_date = Context.CallDateFormula("period_start($DATE_OF_THE_DAY,\"YEAR\",2)");
    var n_year = "YEAR_NUMBER".call(start_horizon_date);
    var ref_name = "BUDGET_"+n_year.tostring("####");
    plw.writetolog("Export "+ref_name+" --> Start");
    bmx_export_project_curve(o_ptf,"EAC",ref_name,false,"BMX_RT_BUDGET",ref_name,true,true,start_horizon_date,end_horizon_date,file,all_hes_dates,ref_name);
    plw.writetolog("Export "+ref_name+" --> End");
    
    // ACWP
    plw.writetolog("Export ACWP --> Start");
    start_horizon_date = Context.CallDateFormula("period_start($DATE_OF_THE_DAY,\"YEAR\",-1)"); 
    end_horizon_date = Context.CallDateFormula("period_start($DATE_OF_THE_DAY,\"YEAR\",1)");
    bmx_export_project_curve(o_ptf,"actual_cost",false,false,false,"ACWP",true,true,start_horizon_date,end_horizon_date,file,all_hes_dates,"CURRENT");
    plw.writetolog("Export ACWP --> End");
    
    // ETC
    plw.writetolog("Export ETC --> Start");
    start_horizon_date = Context.CallDateFormula("period_start($DATE_OF_THE_DAY,\"YEAR\",-1)"); 
    bmx_export_project_curve(o_ptf,"ETC",false,false,false,"ETC",true,true,start_horizon_date,"",file,all_hes_dates,"CURRENT");
    plw.writetolog("Export ETC --> End");
    
    // GATE_1
    plw.writetolog("Export Gate_1 --> Start");
    bmx_export_project_curve(o_ptf,"EAC","GATE_1",false,false,"GATE_1",true,true,"","",file,all_hes_dates,"GATE_1");
    plw.writetolog("Export Gate_1 --> End");
    
    // GATE_2
    plw.writetolog("Export Gate_4 --> Start");
    bmx_export_project_curve(o_ptf,"EAC","GATE_4",false,false,"GATE_4",true,true,"","",file,all_hes_dates,"GATE_4");
    plw.writetolog("Export Gate_4 --> End");
    
    // BAC
    plw.writetolog("Export BAC --> Start");
    bmx_export_project_curve(o_ptf,"BAC",false,false,"BMX_RT_BUDGET","BAC",true,true,"","",file,all_hes_dates,"BUDGET");
    plw.writetolog("Export BAC --> End");
    
    //Expected
    plw.writetolog("Export Expected --> Start");
    start_horizon_date = Context.CallDateFormula("period_start($DATE_OF_THE_DAY,\"YEAR\",0)"); 
    end_horizon_date = Context.CallDateFormula("period_start($DATE_OF_THE_DAY,\"YEAR\",1)");
    bmx_export_project_curve(o_ptf,"EAC",false,"BMX_ET_COMMIT",false,"Expected",true,false,start_horizon_date,end_horizon_date,file,all_hes_dates,"CURRENT");
    plw.writetolog("Export Expected --> End");
    
    //Commitment
    plw.writetolog("Export Commitment --> Start");
    start_horizon_date = Context.CallDateFormula("period_start($DATE_OF_THE_DAY,\"YEAR\",0)"); 
    end_horizon_date = Context.CallDateFormula("period_start($DATE_OF_THE_DAY,\"YEAR\",2)");
    bmx_export_project_curve(o_ptf,"BMX_CC_COMMITMENT",false,false,false,"Commitment",true,true,start_horizon_date,end_horizon_date,file,all_hes_dates,"CURRENT");
    plw.writetolog("Export Commitment --> End");
    
    file.close();

//users_projects
plw.writetolog("Export users_projects --> Start");
// Generate file
var file_name = context.BMX_GS_EXPORT_BI_FOLDER + "users_projects_" +"PRINT_DATE".call(date,"YYYYMMDDTHHMMSS") +".csv";
var path = new pathname(file_name);
var file = new plw.fileoutputstream(file_name,"OVERWRITE");

// First line of the file
file.writeln("user,project");

for (var vProj in plc.project where vProj.PM_PRJ_FILTER)
{
	var vec_result = new vector();
	var o_gr="";
	var o_user="";
	
	// Owner
	o_user == plc.opx2_user.get(vProj.owner);
	if (o_user instanceof plc.opx2_user && o_user != undefined && o_user.INACTIVE==false && o_user.OPX2_INTRANET_ACCESS && o_user.BMX_UA_B_TECHNICAL_EXPLOR_USER==false && o_user._PRF_DA_PROFILE_NAME!="PRF_TIMETRK")
		vec_result.push(o_user.login);

	// Write access
	var v_write_groups = vProj.READ_WRITE_GROUPS.split(",");
	for (var item in v_write_groups)
	{
		o_gr = plc.user_group.get(item);
		if (o_gr instanceof plc.user_group)
		{
			for (var user_in_group in o_gr.get("USERS"))
			{
				
				var o_user=user_in_group.user;
				if (o_user instanceof plc.opx2_user && o_user != undefined && o_user.INACTIVE==false && o_user.OPX2_INTRANET_ACCESS && o_user.BMX_UA_B_TECHNICAL_EXPLOR_USER==false && o_user._PRF_DA_PROFILE_NAME!="PRF_TIMETRK")
					vec_result.push(user_in_group.user.login);
			}
		}
		else
		{
			var o_user=plc.opx2_user.get(item);
			if (o_user instanceof plc.opx2_user && o_user != undefined && o_user.INACTIVE==false && o_user.OPX2_INTRANET_ACCESS && o_user.BMX_UA_B_TECHNICAL_EXPLOR_USER==false && o_user._PRF_DA_PROFILE_NAME!="PRF_TIMETRK")
				vec_result.push(o_user.login);
		}
	}

	// Read access
	var v_write_groups = vProj.READ_ONLY_GROUPS.split(",");
	for (var item in v_write_groups)
	{
		o_gr = plc.user_group.get(item);
		if (o_gr instanceof plc.user_group)
		{
			for (var user_in_group in o_gr.get("USERS"))
			{
				var o_user=user_in_group.user;
				if (o_user instanceof plc.opx2_user && o_user != undefined && o_user.INACTIVE==false && o_user.OPX2_INTRANET_ACCESS && o_user.BMX_UA_B_TECHNICAL_EXPLOR_USER==false && o_user._PRF_DA_PROFILE_NAME!="PRF_TIMETRK")
					vec_result.push(user_in_group.user.login);
			}
		}
		else
		{
			var o_user=plc.opx2_user.get(item);
			if (o_user instanceof plc.opx2_user && o_user != undefined && o_user.INACTIVE==false && o_user.OPX2_INTRANET_ACCESS && o_user.BMX_UA_B_TECHNICAL_EXPLOR_USER==false && o_user._PRF_DA_PROFILE_NAME!="PRF_TIMETRK")
				vec_result.push(o_user.login);
		}
	}

	vec_result=vec_result.removeduplicates();

	for (var user in vec_result)
	{
		file.writeln(user+","+vProj.onb);
	}
}

file.close();
plw.writetolog("Export users_projects --> End"); 
Namespace _Explor_BI_csv;

///////////////////////////////////////////////////////////////////////////
//Function used to export the data in csv with IMPEX Target and IMPEX Format
///////////////////////////////////////////////////////////////////////////
function bmx_export_standard(string argTarget, string argFormat){
	var plc.impextarget Target = plc.impextarget.get(argTarget);
	
	if(Target instanceOf plc.ImpexTarget){
		
		var plc.impexformat Format = plc.impexformat.get(argFormat);
		
		if(Format instanceOf plc.impexformat){
		    Format.DoExportWithFormatAndTarget(Target);
			var filename = Target.CallStringFormula("EVALUATE_STRING(Filename)");
			plw.writetolog("Exporting file name : "+filename);
			plw.writetolog("Exporting: "+argFormat+"_"+argTarget);
		}
		else{
			plw.writetolog("Impex Format : "+Format+" does not exist");
		}
	}
	else{
		plw.writetolog("Impex Target : "+argTarget+" does not exist");
	}
	
	
}

///////////////////////////////////////////////////////////////////////////
//Function used to export the data of curve PNL actual and curve PNL at LAST_GOV_BASELINE in csv with PEX, IMPEX Target and IMPEX Format
///////////////////////////////////////////////////////////////////////////
function bmx_export_from_pex_query(string argTarget, string argFormat, string argPortfolio, string argQuery, date startDate, date endDate){
	var plc.impextarget Target = plc.impextarget.get(argTarget);
	var plc._FF_PT_FAVOR_FILTERS Portfolio = plc._FF_PT_FAVOR_FILTERS.get(argPortfolio);
	var plc._PEX_PT_QUERY Query = plc._PEX_PT_QUERY.get(argQuery);
	if(Target instanceOf plc.ImpexTarget && Portfolio instanceOf plc._FF_PT_FAVOR_FILTERS && Query instanceOf plc._PEX_PT_QUERY) {
		var plc.impexformat Format = plc.impexformat.get(argFormat);
		plw._impex_exportPEXQueryCostTable(Portfolio, Query, Format, Target, startDate, endDate);
		var filename = Target.CallStringFormula("EVALUATE_STRING(Filename)");
		plw.writetolog(filename);
		plw.writetolog("Exporting: "+argFormat+"_"+argTarget);
	}
}

///////////////////////////////////////////////////////////////////////////
//Function used to delete the old export of csv files
///////////////////////////////////////////////////////////////////////////
function Clean_Old_Files(string Exportdirectory){
	//Verify the path
	if(!Exportdirectory.probefile()){
		plw.writetolog("Folder export : \""+Exportdirectory+"\" does not existe.");
		return false;
	}
	else if(Exportdirectory.substring(Exportdirectory.length-1,Exportdirectory.length)!="/"){
		plw.writetolog("Folder export : \""+Exportdirectory+"\" should end with a \"/\"");
		return false;
	}
	
	//
	var current_date = new date();
	var s_filtre_current_date = "_"+current_date.tostring("YYYYMMDD")+"_\d\d_\d\d";
	//var s_filtre_premier_jour = "_\d{6}01_\d\d_\d\d";
	//Delete old csv files
	var Path = new plw.pathname(ExportDirectory);
	
	//map the directory and add the bibox files
	// || !file.name.matchregexp(s_filtre_premier_jour)
	for(var file in path ){//where file.name.matchregexp(s_filtre_current_date)){
		plw.writetolog("Delete the old file : " + file);
		file.deletefile();
	}
	return true;
}

///////////////////////////////////////////////////////////////////////////
// Fonction pour exporter les courbes de coût
///////////////////////////////////////////////////////////////////////////
function bmx_export_project_curve(o_ptf,curve_id,reference,expenditure_type,rate_table,curve_export_name,euros,days,start_horizon_date,end_horizon_date,file,hes_hashtable,date_type)
{
	var start_horizon_date_input = start_horizon_date;
	var end_horizon_date_input = end_horizon_date;
	
	var vdate=new date();

	// Global variable
	var curvename = cost.findCurveName(curve_id,reference,expenditure_type,rate_table);
    
    plw.writetolog(curve_export_name + " : " + curvename);
    
	if (curvename!="Unknown curve type NIL")
	{
		// CSV Export Variables (file separator)
		var fs = ",";
		
		// Build a vector of Project
		var v_proj_vect = new vector();
		
		for(var o_project in o_ptf.get("PROJECTS")) v_proj_vect.push(o_project);

		// Loop on each project to export
		var hashtable = new hashtable("STRING");
		
		var monitorTitle = curve_export_name + " progress.. "; //
		with (plw.monitoring(title: monitorTitle, steps : 2500)){
			var t=0;
		
			for (var o_project in v_proj_vect){
				//plw.writetolog(" ---- Export Processing Project: "+o_project.name);
				var OD = hes_hashtable.get(o_project.printattribute()).get("GLOBAL_SD");
				var ED = hes_hashtable.get(o_project.printattribute()).get("GLOBAL_ED");
				if(!(OD instanceof date)) OD = o_project.OD;
				if(!(ED instanceof date)) ED = o_project.BMX_UA_D_LAST_HES_ED;
				
				// Initiate start_horizon_date & end_horizon_date with the date of the project if empty
				if (!(start_horizon_date_input instanceof Date)){
					start_horizon_date = "PERIOD_START".callmacro(OD,"MONTH",0);
				}
				else{
				}
				if (!(end_horizon_date_input instanceof Date)){
					end_horizon_date = "PERIOD_START".callmacro(ED,"MONTH",1);
				}
				else{
				}
				
				// The time window of the export can be modified thanks to the numbers in the start_horizon_date and end_horizon_date var below
				// var start_date_compute = start_horizon_date;
				// var end_date_compute = end_horizon_date;
				
				// Reset hashtable
				hashtable = new hashtable("STRING");
				
				with(o_project.fromobject())
				{
					// Funding sources coefficients
					var start_date_coefficient;
					var end_date_coefficient;
					var year;
					var month;
					var key_date;

					var hash_coeff_by_month = new hashtable("STRING");
					
					// Repartition by funding source
					for (var chargeback_coeff in plc.CHARGEBACK_COEFFICIENT)
					{
						// Start date of chargeback coefficient
						if (chargeback_coeff.START_DATE==undefined || start_horizon_date>chargeback_coeff.START_DATE)
							start_date_coefficient=start_horizon_date;
						else
							start_date_coefficient=chargeback_coeff.START_DATE;
							
						// End date of chargeback coefficient
						if (chargeback_coeff.END_DATE==undefined || end_horizon_date<chargeback_coeff.END_DATE)
							end_date_coefficient=end_horizon_date;
						else
							end_date_coefficient=chargeback_coeff.END_DATE;
						
						// Build a Date Vector to parse 
						if(end_date_coefficient<=start_date_coefficient) continue;
												
						var v_DateVect = new plw.datevector("MONTH",start_date_coefficient,end_date_coefficient);
						// Remove last value as it will return 0 (Next month)
						v_DateVect.pop();
						
						for(var s_date in v_DateVect)
						{	
							year = "YEAR_NUMBER".call(s_date);
							month = "MONTH_NUMBER".call(s_date);
							key_date = year + "_" + month;
			
							var hash_coeff_by_funding_source=hash_coeff_by_month.get(key_date);
							if (hash_coeff_by_funding_source==undefined)
							{
								hash_coeff_by_funding_source = new hashtable("OBJECT");
								hash_coeff_by_funding_source.set(chargeback_coeff.CONTRACT_WORK_PACKAGE,chargeback_coeff.COEFFICIENT);
								hash_coeff_by_month.set(key_date,hash_coeff_by_funding_source);
							}
							else
							{
								var res_COEFFICIENT = hash_coeff_by_funding_source.get(chargeback_coeff.CONTRACT_WORK_PACKAGE);
								if(res_COEFFICIENT == undefined)
									hash_coeff_by_funding_source.set(chargeback_coeff.CONTRACT_WORK_PACKAGE,chargeback_coeff.COEFFICIENT);
								else{
									res_COEFFICIENT = res_COEFFICIENT + chargeback_coeff.COEFFICIENT;
									hash_coeff_by_funding_source.set(chargeback_coeff.CONTRACT_WORK_PACKAGE,res_COEFFICIENT);
								}
								hash_coeff_by_month.set(key_date,hash_coeff_by_funding_source);
							}
						}
					}
					
					// Start loop on time synthesis
					with (plw.map_shadowed_objects)
			        {
    					for(var o_hes in plc.TIME_SYNTHESIS)
    					//where o_hes._INF_RA_CBS2.onb != 0 && o_hes.project == o_hes.activity.project && o_hes.BMX_UA_B_HES_PROJECT && ((curve_id != "BAC" &&(o_hes.BMX_UA_D_HES_ED instanceof DATE) && (o_hes.SD instanceof DATE)) || (curve_id == "BAC" && (o_hes.SD_BUDGET instanceof DATE) && (o_hes.BMX_UA_D_HES_ED instanceof DATE))))
    					{
    						// Check if there are dates of the time synthesis
    						var dates = bmx_bi_return_dates(o_hes,date_type,hes_hashtable);
    						
    						if (dates!=false)
    						{
    							var key_hes = o_hes.ACTIVITY.PROJECT.ONB +fs+ o_hes.res.ONB  +fs+ o_hes._INF_RA_CBS2.ONB +fs+"\""+ o_hes.BMX_RA_OPEX_CAPEX.NAME +"\""+ fs+ o_hes.COST_ACCOUNT.ONB;
    							
    							// define dates for computation
    							// Take start of the month (SD) and end of the month (FD) to manage HES with a 0 duration
    							var start_hes;
    							var end_hes;
    							var start_date_compute;
    							var end_date_compute;
    							
    							start_hes = dates.get("SD");
    							end_hes = dates.get("ED");
								
    							/*if(curve_id == "BAC"){
    								//if(o_hes.SD_BUDGET==undefined||o_hes.BMX_UA_D_HES_ED==undefined) continue;
    								start_hes = o_hes.SD_BUDGET;
    								end_hes = o_hes.BMX_UA_D_HES_ED;
    							}
    							else if(reference){
    								start_hes = o_hes.SD;
    								end_hes = o_hes.BMX_UA_D_HES_ED;
    							}
    							else{
    								start_hes = o_hes.SD;
    								end_hes = o_hes.BMX_UA_D_HES_ED;
    							}*/
    							
    							if(start_hes>=end_hes){
    								var end_hes_copy = end_hes;
    								end_hes = "PERIOD_START".callmacro(start_hes,"DAY",1);
    								start_hes = "PERIOD_START".callmacro(end_hes_copy,"DAY",-1);
    							}
    							start_hes = "PERIOD_START".callmacro(start_hes,"MONTH",-1);
    							end_hes = "PERIOD_START".callmacro(end_hes,"MONTH",2);
    							
    							start_date_compute = start_hes;
    							end_date_compute = end_hes;
    							if ((start_horizon_date_input instanceof Date && end_hes <= start_horizon_date_input) || (end_horizon_date_input instanceof Date && end_horizon_date_input <= start_hes)) continue;
    							if (start_horizon_date_input instanceof Date && start_hes < start_horizon_date_input) start_date_compute = start_horizon_date;
    							if (end_horizon_date_input instanceof Date && end_horizon_date_input < end_hes) end_date_compute = end_horizon_date;
    							
    							
    							// Build a Date Vector to parse 
    							var v_DateVect = new plw.datevector("MONTH",start_date_compute,end_date_compute);
								
    							// Remove last value as it will return 0 (Next month)
    							v_DateVect.pop();
    
    							// Compute curve
    							var curve_euros;
    							var curve_days;
    							if (euros)
    								curve_euros = cost.computecurves(curvename,"EUR","MONTH",false,start_date_compute,end_date_compute,o_hes);
    							if (days)
    								curve_days = cost.computecurves(curvename,"day","MONTH",false,start_date_compute,end_date_compute,o_hes);
    
    							// Loop on all dates
    							for(var s_date in v_DateVect)
    							{
    								// Calculate curves
    								var value_euros = 0;
    								var value_days = 0;
    								
    								
    								if (euros) {
										value_euros = curve_euros.get(s_date);
									}
    								if (days) {
										value_days = curve_days.get(s_date);
									}
    													
    								var year = "YEAR_NUMBER".call(s_date);
    								var month = "MONTH_NUMBER".call(s_date);
    								var key_coefficient = year+"_"+month;
    								
    								if ((value_euros!=undefined && value_euros!=0) || (value_days!=undefined && value_days!=0))
    								{
    									var hash_coeff_by_funding_source=hash_coeff_by_month.get(key_coefficient);
    									// No chargeback coefficient on the period --> Value is not split
    									if (hash_coeff_by_funding_source!=undefined)
    									// {					
    										// var key_hes_detailled = ""+fs+key_hes+fs+year+fs+month+fs+"\""+curve_export_name+"\"";
    										
    										// if (hashtable.get(key_hes_detailled)!=undefined)
    										// {
    											// var hashtable_value = hashtable.get(key_hes_detailled);
    											
    											// value_euros = value_euros + hashtable_value.get("Euros");
    											// value_days = value_days + hashtable_value.get("Days");
    											
    											// hashtable_value.set("Euros",value_euros);
    											// hashtable_value.set("Days",value_days);
    											// hashtable.set(key_hes_detailled,hashtable_value);
    										// }
    										// else
    										// {
    											// var hashtable_value=new hashtable("STRING");
    											// hashtable_value.set("Euros",value_euros);
    											// hashtable_value.set("Days",value_days);
    											// hashtable.set(key_hes_detailled,hashtable_value);
    										// }
    									// }
    									// There are chargeback coefficient --> The value is split by funding sources
    									// else
    									{
    										for (var funding_source in hash_coeff_by_funding_source)
    										{
    											var key_hes_detailled = funding_source.ONB+fs+key_hes+fs+year+fs+month+fs+"\""+curve_export_name+"\"";
    											var split_value_euros = value_euros*hash_coeff_by_funding_source.get(funding_source);
    											var split_value_days = value_days*hash_coeff_by_funding_source.get(funding_source);
    											
    											if (hashtable.get(key_hes_detailled)!=undefined)
    											{
    												var hashtable_value = hashtable.get(key_hes_detailled);
    												
    												split_value_euros = split_value_euros + hashtable_value.get("Euros");
    												split_value_days = split_value_days + hashtable_value.get("Days");
    												
    												hashtable_value.set("Euros",split_value_euros);
    												hashtable_value.set("Days",split_value_days);
    												hashtable.set(key_hes_detailled,hashtable_value);
    											}
    											else
    											{
    												var hashtable_value=new hashtable("STRING");
    												hashtable_value.set("Euros",split_value_euros);
    												hashtable_value.set("Days",split_value_days);
    												hashtable.set(key_hes_detailled,hashtable_value);
    											}
    										}
    									}
    								}
    							}	
    						}
    					}
			        }
					// End loop on time synthesis
					
					// Write value in the file
					for (var line in hashtable)
					{
						var value = hashtable.get(line);
						var value_euros = value.get("Euros");
						var value_days = value.get("Days");
						
						if ((value_euros!=undefined && value_euros!=0) || (value_days!=undefined && value_days!=0))
							file.writeln(line+fs+value_euros.toString("####.0000")+fs+value_days.toString("####.0000"));
					}
					
					// Clear all hashtables used for the project
					for (var o in hashtable)
					{
						var vHash = hashtable.get(o);
						vHash.clear();
					} 
					hashtable.clear();
					for (var o in hash_coeff_by_month)
					{
						var vHash = hash_coeff_by_month.get(o);
						vHash.clear();
					}
					hash_coeff_by_month.clear();
				}
				monitorTitle.monitor(t);
				t++;
			}
		}
	}
	else
	{
		plw.writetolog("The curve " + curve_export_name + " does not exist.");
	}
}


function bmx_bi_get_date_on_relation(ts,relation,date_hahstable,budget_n,budget_n1,prj_bdg_ref,globaldate_hahstable)
{
	var start_date;
	var end_date;
	var hes_project = ts.project;
	var ref_name;
	var GLOBAL_SD = globaldate_hahstable.get("GLOBAL_SD");
	var GLOBAL_ED = globaldate_hahstable.get("GLOBAL_ED");
	
	for (var ref_exp in ts.get(relation) where ref_exp.PROJECT==hes_project)
	{	
		var ref_start_date = ref_exp.start_date;
		var ref_end_date = ref_exp.end_date;
			
		if (ref_start_date instanceof date && ref_end_date instanceof date)
		{
			ref_name = ref_exp.reference.name;
			
			if (ref_start_date>ref_end_date)
				ref_end_date=ref_start_date;
			
			
			if (GLOBAL_SD==-1 || ref_start_date < GLOBAL_SD){
				GLOBAL_SD = ref_start_date;
			}
			if (GLOBAL_ED==-1 || ref_end_date > GLOBAL_ED){
				GLOBAL_ED = ref_end_date;
			}
			
			// Manage BAC Dates
			if (prj_bdg_ref == ref_name)
    		{
				start_date = date_hahstable.get("BUDGET_SD");
				end_date = date_hahstable.get("BUDGET_ED");
				if (start_date==-1 || ref_start_date < start_date)
					date_hahstable.set("BUDGET_SD",ref_start_date);
				if (end_date==-1 || ref_end_date > end_date)
					date_hahstable.set("BUDGET_ED",ref_end_date);
			}
			
			switch(ref_name)
			{
				Case budget_n : 
					start_date = date_hahstable.get(budget_n+"_SD");
					end_date = date_hahstable.get(budget_n+"_ED");
					if (start_date==-1 || ref_start_date < start_date)
						date_hahstable.set(budget_n+"_SD",ref_start_date);
					if (end_date==-1 || ref_end_date > end_date)
						date_hahstable.set(budget_n+"_ED",ref_end_date);	
				break;
				
				Case budget_n1 : 
					start_date = date_hahstable.get(budget_n1+"_SD");
					end_date = date_hahstable.get(budget_n1+"_ED");
					if (start_date==-1 || ref_start_date < start_date)
						date_hahstable.set(budget_n1+"_SD",ref_start_date);
					if (end_date==-1 || ref_end_date > end_date)
						date_hahstable.set(budget_n1+"_ED",ref_end_date);	
				break;
							
				Case "LBE_Q1" : 
					start_date = date_hahstable.get("LBE_Q1_SD");
					end_date = date_hahstable.get("LBE_Q1_ED");
					if (start_date==-1 || ref_start_date < start_date)
						date_hahstable.set("LBE_Q1_SD",ref_start_date);
					if (end_date==-1 || ref_end_date > end_date)
						date_hahstable.set("LBE_Q1_ED",ref_end_date);	
				break;
				
				Case "LBE_Q2" : 
					start_date = date_hahstable.get("LBE_Q2_SD");
					end_date = date_hahstable.get("LBE_Q2_ED");
					if (start_date==-1 || ref_start_date < start_date)
						date_hahstable.set("LBE_Q2_SD",ref_start_date);
					if (end_date==-1 || ref_end_date > end_date)
						date_hahstable.set("LBE_Q2_ED",ref_end_date);
				break;
					
				Case "LBE_Q3" : 
					start_date = date_hahstable.get("LBE_Q3_SD");
					end_date = date_hahstable.get("LBE_Q3_ED");
					if (start_date==-1 || ref_start_date < start_date)
						date_hahstable.set("LBE_Q3_SD",ref_start_date);
					if (end_date==-1 || ref_end_date > end_date)
						date_hahstable.set("LBE_Q3_ED",ref_end_date);
				break;
					
				Case "BUDGET_V1" : 
					start_date = date_hahstable.get("BUDGET_V1_SD");
					end_date = date_hahstable.get("BUDGET_V1_ED");
					if (start_date==-1 || ref_start_date < start_date)
						date_hahstable.set("BUDGET_V1_SD",ref_start_date);
					if (end_date==-1 || ref_end_date > end_date)
						date_hahstable.set("BUDGET_V1_ED",ref_end_date);
				break;
					
				Case "BUDGET_V2" : 
					start_date = date_hahstable.get("BUDGET_V2_SD");
					end_date = date_hahstable.get("BUDGET_V2_ED");
					if (start_date==-1 || ref_start_date < start_date)
						date_hahstable.set("BUDGET_V2_SD",ref_start_date);
					if (end_date==-1 || ref_end_date > end_date)
						date_hahstable.set("BUDGET_V2_ED",ref_end_date);
				break;
					
				Case "BUDGET_V3" : 
					start_date = date_hahstable.get("BUDGET_V3_SD");
					end_date = date_hahstable.get("BUDGET_V3_ED");
					if (start_date==-1 || ref_start_date < start_date)
						date_hahstable.set("BUDGET_V3_SD",ref_start_date);
					if (end_date==-1 || ref_end_date > end_date)
						date_hahstable.set("BUDGET_V3_ED",ref_end_date);
				break;
					
				Case "GATE_1" : 
					start_date = date_hahstable.get("GATE_1_SD");
					end_date = date_hahstable.get("GATE_1_ED");
					if (start_date==-1 || ref_start_date < start_date)
						date_hahstable.set("GATE_1_SD",ref_start_date);
					if (end_date==-1 || ref_end_date > end_date)
						date_hahstable.set("GATE_1_ED",ref_end_date);
				break;
					
				Case "GATE_4" : 
					start_date = date_hahstable.get("GATE_4_SD");
					end_date = date_hahstable.get("GATE_4_ED");
					if (start_date==-1 || ref_start_date < start_date)
						date_hahstable.set("GATE_4_SD",ref_start_date);
					if (end_date==-1 || ref_end_date > end_date)
						date_hahstable.set("GATE_4_ED",ref_end_date);
				break;
			}
		}
	}
			
	globaldate_hahstable.set("GLOBAL_SD",GLOBAL_SD);
	globaldate_hahstable.set("GLOBAL_ED",GLOBAL_ED);
}


function bmx_bi_build_date_vector(o_ptf)
{
	// Build a vector of Project
	var v_proj_vect = new vector();
	for(var o_project in o_ptf.get("PROJECTS")) v_proj_vect.push(o_project);
	
	// Budget N and N+1, reference name
	var budget_n_sd = Context.CallDateFormula("period_start($DATE_OF_THE_DAY,\"YEAR\",0)"); 
	var buget_n_year = "YEAR_NUMBER".call(budget_n_sd);
	var budget_n_ref_name = "BUDGET_"+buget_n_year.tostring("####");
	var budget_n_ref_SD = budget_n_ref_name + "_SD";
	var budget_n_ref_ED = budget_n_ref_name + "_ED";
	
	var budget_n1_sd = Context.CallDateFormula("period_start($DATE_OF_THE_DAY,\"YEAR\",1)"); 
	var buget_n1_year = "YEAR_NUMBER".call(budget_n1_sd);
	var budget_n1_ref_name = "BUDGET_"+buget_n1_year.tostring("####");
	var budget_n1_ref_SD = budget_n1_ref_name + "_SD";
	var budget_n1_ref_ED = budget_n1_ref_name + "_ED";

	var hes_hashtable =new hashtable("STRING");
    var monitorTitle = "Build data vector progress.. "; //
	with (plw.monitoring(title: monitorTitle, steps : 2500)){
		var t=0;
    	for (var o_project in v_proj_vect){
    		var globaldate_hahstable = new hashtable("STRING");
			globaldate_hahstable.set("GLOBAL_SD",-1);
			globaldate_hahstable.set("GLOBAL_ED",-1);
			
    		with(o_project.fromobject())
    		{
				plw.writetolog("Project " + o_project.printattribute());
				with (plw.map_shadowed_objects)
    			{
    				for (var ts in plc.TIME_SYNTHESIS where ts._INF_RA_CBS2.onb != 0 && ts.res.onb != 0 && ts.project == ts.activity.project)
    				{
						var b_hes_project = ts.BMX_UA_B_HES_PROJECT;
						var prj_bdg_ref = ts.project.BUDGET_REFERENCE;
						
						var GLOBAL_SD = globaldate_hahstable.get("GLOBAL_SD");
						var GLOBAL_ED = globaldate_hahstable.get("GLOBAL_ED");
						
						var date_hahstable = new hashtable("STRING");
    					date_hahstable.set("BUDGET_SD",-1);
    					date_hahstable.set("BUDGET_ED",-1);
    					date_hahstable.set("LBE_Q1_SD",-1);
    					date_hahstable.set("LBE_Q1_ED",-1);
    					date_hahstable.set("LBE_Q2_SD",-1);
    					date_hahstable.set("LBE_Q2_ED",-1);
    					date_hahstable.set("LBE_Q3_SD",-1);
    					date_hahstable.set("LBE_Q3_ED",-1);
    					date_hahstable.set("BUDGET_V1_SD",-1);
    					date_hahstable.set("BUDGET_V1_ED",-1);
    					date_hahstable.set("BUDGET_V2_SD",-1);
    					date_hahstable.set("BUDGET_V2_ED",-1);
    					date_hahstable.set("BUDGET_V3_SD",-1);
    					date_hahstable.set("BUDGET_V3_ED",-1);
    					date_hahstable.set("GATE_1_SD",-1);
    					date_hahstable.set("GATE_1_ED",-1);
    					date_hahstable.set("GATE_4_SD",-1);
    					date_hahstable.set("GATE_4_ED",-1);
    					date_hahstable.set(budget_n_ref_SD,-1);
    					date_hahstable.set(budget_n_ref_ED,-1);
    					date_hahstable.set(budget_n1_ref_SD,-1);
    					date_hahstable.set(budget_n1_ref_ED,-1);
    					
    					if (b_hes_project)
    					{
							date_hahstable.set("CURRENT_SD",ts.SD);
    						date_hahstable.set("CURRENT_ED",ts.BMX_UA_D_HES_ED);
							
							if (GLOBAL_SD==-1 || (ts.SD instanceof date && ts.SD < GLOBAL_SD))
								GLOBAL_SD = ts.SD;
							if (GLOBAL_ED==-1 || (ts.BMX_UA_D_HES_ED instanceof date && ts.BMX_UA_D_HES_ED > GLOBAL_ED))
								GLOBAL_ED = ts.BMX_UA_D_HES_ED;
    					}
						
						globaldate_hahstable.set("GLOBAL_SD",GLOBAL_SD);
						globaldate_hahstable.set("GLOBAL_ED",GLOBAL_ED);
						
						bmx_bi_get_date_on_relation(ts,"RELATION-REFERENCED-EXPENDITURE",date_hahstable,budget_n_ref_name,budget_n1_ref_name,prj_bdg_ref,globaldate_hahstable);
    					bmx_bi_get_date_on_relation(ts,"RELATION-REFERENCED-INCURRED-EXPENDITURE",date_hahstable,budget_n_ref_name,budget_n1_ref_name,prj_bdg_ref,globaldate_hahstable);
    					bmx_bi_get_date_on_relation(ts,"RELATION-REFERENCED-TASK-ALLOC",date_hahstable,budget_n_ref_name,budget_n1_ref_name,prj_bdg_ref,globaldate_hahstable);			
    					bmx_bi_get_date_on_relation(ts,"RELATION-REFERENCED-WORK-PERFORMED",date_hahstable,budget_n_ref_name,budget_n1_ref_name,prj_bdg_ref,globaldate_hahstable);		
    								
    					hes_hashtable.set(ts.printattribute(),date_hahstable);
    				}
    			}
    		}
			hes_hashtable.set(o_project.printattribute(),globaldate_hahstable);
			plw.writetolog("GLOBAL_SD " + globaldate_hahstable.get("GLOBAL_SD").toString("YYYYMMDD"));
			plw.writetolog("GLOBAL_ED " + globaldate_hahstable.get("GLOBAL_ED").toString("YYYYMMDD"));
    		t++;
    		monitorTitle.monitor(t);
    	}
	}
	return hes_hashtable;
}

function bmx_bi_return_dates(hes,date_type,hes_hashtable)
{
	var result = false;
	var start_date;
	var end_date;
	
	var date_hahstable = hes_hashtable.get(hes.printattribute());
	if (date_hahstable!=undefined)
	{
		start_date = date_hahstable.get(date_type+"_SD");
		end_date = date_hahstable.get(date_type+"_ED");
		
		if (start_date !=undefined && start_date != -1 && end_date !=undefined &&  end_date != -1)
		{
			result = new hashtable("STRING");
			result.set("SD",start_date);
			result.set("ED",end_date);
		}
	}
	
	return result;
} 
//* -*- Mode: C++ -*- *****************************************************
//  COPYRIGHT (C) PLANISWARE $Date: 2020/10/21 13:17:10 $                                            
//                                                                          
//  All Rights Reserved                                                     
// 
//  This program and the information contained herein are confidential to
//  and the property of PLANISWARE and are made available only to PLANISWARE
//  employees for the sole purpose of conducting PLANISWARE business.
// 
//  This program and copy therof and the information contained herein shall
//  be maintained in strictest confidence ; shall not be copied in whole or
//  in part except as authorized by the employee's manager ; and shall not
//  be disclosed or distributed (a) to persons who are not PLANISWARE employees,
//  or (b) to PLANISWARE employees for whom such information is not necessary in
//  connection with their assigned responsabilities.
// 
//  There shall be no exceptions to the terms and conditions set forth
//  herein except as authorized in writing by the responsible PLANISWARE General
//  Manager.
//
// 
//  FILE    : $RCSfile: bmx_ojs_risk_hyperlink.ojs,v $
// 
//  AUTHOR  : $Author: vfraize $
// 
//  VERSION : $Id: bmx_ojs_risk_hyperlink.ojs,v 3.6 2020/10/21 13:17:10 vfraize Exp $
// 
//  PURPOSE :
// 
//  HISTORY :
//  $Log: bmx_ojs_risk_hyperlink.ojs,v $
//  Revision 3.6  2020/10/21 13:17:10  vfraize
//  removing unknown-0 at creation
//
//  Revision 3.5  2020/10/20 15:05:25  vfraize
//  js2 review // changing default value
//
//  Revision 3.4  2020/10/16 14:24:01  vfraize
//  risks debug and feedbacks v1.0.6
//
//  Revision 3.3  2020/10/06 13:04:07  vfraize
//  init proba dyn field
//
//  Revision 3.2  2020/09/15 18:18:40  vfraize
//  debug mc
//
//  Revision 3.1  2020/08/31 15:07:49  vfraize
//  init risk scripts
//   (header added automatically)
//
//**************************************************************************
namespace BMX_RISKS;
function generate_risk_category_hyperlink(){
  var default_dataset = "";
  var default_activity = plw._ihm_tb_current_object_in_toolbar_in_popup();
  if( default_activity instanceof plc.workstructure && default_activity.project instanceof plc.ordo_project  ){
    default_dataset = default_activity.project;
  } else {
    var current_object = plw.currentpageobject();
    if( current_object instanceof plc.ordo_project  ){
      default_dataset = current_object.printattribute();
      default_activity = plw._UtilsGetTopLevel(current_object);
      default_activity = default_activity[0];
    }
  }
  var link = new Hyperlink("CreationForm",
                           "Class","_WF_PT_RISKS",
                           "EditorType","_WF_POPUP_CREATE_RISK",
                           "DefaultA1","_WF_AA_D_CREATION_DATE",
                           "DefaultV1",new date(),
                           "DefaultA2","DATASET",
                           "DefaultV2",default_dataset, 
                           "DefaultA3","Sender",
                           "DefaultV3",plw.currentopx2user().printattribute(),
                           "DefaultA4","_WF_RA_RISK_ACT",
                           "DefaultV4",default_activity,    
						   "DefaultA5","_RISK_RA_RISK_CAT",
                           "DefaultV5","Risk",
						   "DefaultA6","BMX_UA_O_RANGE_PROBA_INPUT",
                           "DefaultV6",plc._risk_pt_risk_range_proba.get("Low")
                           );
  link.go(context);
}

function generate_opportunity_category_hyperlink(){
  var default_dataset = "";
  var default_activity = plw._ihm_tb_current_object_in_toolbar_in_popup();
  if( default_activity instanceof plc.workstructure && default_activity.project instanceof plc.ordo_project ){
    default_dataset = default_activity.project;
  } else {
    var current_object = plw.currentpageobject();
    if( current_object instanceof plc.ordo_project ){
      default_dataset = current_object.printattribute();
      default_activity = plw._UtilsGetTopLevel(current_object);
      default_activity = default_activity[0];
    }
  }
  var link = new Hyperlink("CreationForm",
                           "Class","_WF_PT_RISKS",
                           "EditorType","_WF_POPUP_CREATE_RISK",
                           "DefaultA1","_WF_AA_D_CREATION_DATE",
                           "DefaultV1",new date(),
                           "DefaultA2","DATASET",
                           "DefaultV2",default_dataset, 
                           "DefaultA3","Sender",
                           "DefaultV3",plw.currentopx2user().printattribute(),
                           "DefaultA4","_WF_RA_RISK_ACT",
                           "DefaultV4",default_activity,    
						   "DefaultA5","_RISK_RA_RISK_CAT",
                           "DefaultV5","Opportunity",	
						   "DefaultA6","BMX_UA_O_RANGE_PROBA_INPUT",
                           "DefaultV6",plc._risk_pt_risk_range_proba.get("LOW")
                           );
  link.go(context);
}

plw.writeln("$CVSHeader: customers/Biomerieux_Explor/bmx_ojs_risk_hyperlink.ojs,v 3.6 2020/10/21 13:17:10 vfraize Exp $"); 
//* -*- Mode: pjs -*- *****************************************************
//  COPYRIGHT (C) PLANISWARE $Date: 2021/06/07 16:32:31 $                                            
//                                                                          
//  All Rights Reserved                                                     
// 
//  This program and the information contained herein are confidential to
//  and the property of PLANISWARE and are made available only to PLANISWARE
//  employees for the sole purpose of conducting PLANISWARE business.
// 
//  This program and copy therof and the information contained herein shall
//  be maintained in strictest confidence ; shall not be copied in whole or
//  in part except as authorized by the employee's manager ; and shall not
//  be disclosed or distributed (a) to persons who are not PLANISWARE employees,
//  or (b) to PLANISWARE employees for whom such information is not necessary in
//  connection with their assigned responsabilities.
// 
//  There shall be no exceptions to the terms and conditions set forth
//  herein except as authorized in writing by the responsible PLANISWARE General
//  Manager.
//
// 
//  FILE    : $RCSfile: bmx_pjs_apply_equation_v2.pjs,v $
// 
//  AUTHOR  : $Author: vfraize $
// 
//  VERSION : $Id: bmx_pjs_apply_equation_v2.pjs,v 3.4 2021/06/07 16:32:31 vfraize Exp $
// 
//  PURPOSE :
// 
//  HISTORY :
//  Log : https://cvs.planisware.com/viewvc/customers/Biomerieux_Explor/bmx_pjs_apply_equation_v2.pjs?view=log
//**************************************************************************
namespace _bmx_applyEquations;
function bmx_apply_equation_to_ptf(vector v_prj){
	for(var o_prj in v_prj){
		bmx_apply_equations_to_dataset(o_prj);
	}
}

function bmx_apply_equations_to_dataset(plc.Dataset dataset){

	var allTopLevelWS = bmx_get_all_activities(dataset);
	with (plw.monitoring(title: "Applying equations", steps: allTopLevelWS.length)){
		for (var topLevelWS in allTopLevelWS){
			var project = topLevelWS.project;

					[topLevelWS].ApplyEquations(undefined);
			}
		"Applying equations".monitor(allTopLevelWS.length);
	}
	
}

// dedicated 
function bmx_get_all_activities(plc.Dataset dataset){
var v_result= new vector();
	with(dataset.fromobject()){
		for (var plc.work_structure o_act in dataset.get("WORK_STRUCTURES")){
			if (o_act.get("WBS_TYPE") instanceof plc.WBS_TYPE){
				v_result.push(o_act);
			}
		
		}
	}
	return v_result;
}

// to be called in dedicated toolbar in the 
function bmx_ptf_apply_equation_link(){	

	var v_prj  = new vector();
	for(var o_sel in plw.selection_get()){
		if (o_sel.PROJECT instanceof plc.ordo_project){
			v_prj.push(o_sel.PROJECT);
		}
	}
	
	bmx_apply_equation_to_ptf(v_prj);
	
	bmx_apply_role_to_ptf(v_prj);
	
}

function bmx_apply_role_to_prj(plc.ordo_project o_prj){
	if (o_prj instanceof plc.ordo_project){
		with(o_prj.fromobject()){
			for(var o_ph in plc.task_alloc){
				if(o_ph.printattribute("BMX_UA_S_EQUATION_ROLE") !=""){
					// plw.alert(o_ph);

					var o_role= bmx_get_role_from_id_and_prj(o_ph.printattribute("BMX_UA_S_EQUATION_ROLE"),o_prj);
					// plw.alert(o_role);
					if (o_role instanceof plc._RM_REVIEW_PT_ROLE){o_ph.set("_RM_REVIEW_RA_ROLE",o_role);
					if(o_role._RM_REVIEW_RA_RES  instanceof plc.Resource && o_role.printattribute("_RM_REVIEW_RA_RES") !=""){o_ph.set("RES",o_role._RM_REVIEW_RA_RES);	//lets do what role supposed to do automatically		
					}
				}
			}
			
		}
	}
	
	}
}

function bmx_get_role_from_id_and_prj(s_id,o_prj){
	if (o_prj instanceof plc.ordo_project){
		with(o_prj.fromobject()){	
		for(var o_role in plc._RM_REVIEW_PT_ROLE){
			if(o_role.printattribute("NAME") == s_id){
				return o_role;
			}
		}}
	}
	return undefined;
}

function bmx_apply_role_to_ptf(v_prj){
	for(var o_prj in v_prj){
		bmx_apply_role_to_prj(o_prj);
		
	}
}


plw.writeln("$CVSHeader: customers/Biomerieux_Explor/bmx_pjs_apply_equation_v2.pjs,v 3.4 2021/06/07 16:32:31 vfraize Exp $"); 
//* -*- Mode: pjs -*- *****************************************************
//  COPYRIGHT (C) PLANISWARE $Date: 2020/10/09 07:29:32 $                                            
//                                                                          
//  All Rights Reserved                                                     
// 
//  This program and the information contained herein are confidential to
//  and the property of PLANISWARE and are made available only to PLANISWARE
//  employees for the sole purpose of conducting PLANISWARE business.
// 
//  This program and copy therof and the information contained herein shall
//  be maintained in strictest confidence ; shall not be copied in whole or
//  in part except as authorized by the employee's manager ; and shall not
//  be disclosed or distributed (a) to persons who are not PLANISWARE employees,
//  or (b) to PLANISWARE employees for whom such information is not necessary in
//  connection with their assigned responsabilities.
// 
//  There shall be no exceptions to the terms and conditions set forth
//  herein except as authorized in writing by the responsible PLANISWARE General
//  Manager.
//
// 
//  FILE    : $RCSfile: bmx_pjs_expenditure_type_modification.pjs,v $
// 
//  AUTHOR  : $Author: vfraize $
// 
//  VERSION : $Id: bmx_pjs_expenditure_type_modification.pjs,v 3.2 2020/10/09 07:29:32 vfraize Exp $
// 
//  PURPOSE :
// 
//  HISTORY :
//  Log : https://cvs.planisware.com/viewvc/customers/Biomerieux_Explor/bmx_pjs_expenditure_type_modification.pjs?view=log
//**************************************************************************
namespace expenditure_type_modification;

//URS 1270
method bmx_pjs_planned_hours_expenditure_type_modification on plc.ordo_project(){

	var currentProject = this;
	var std_type =new symbol("NIL","DOD");
	var cancel_type =new symbol("BMX_ET_CANCEL","KEYWORD");

	var source_type = undefined;
	var target_type= undefined;

	if(currentProject.printattribute("_STA_RA_PRJ_STATUS").touppercase() =="ACTIVE"){
		source_type = cancel_type;
		target_type = std_type;
	}else{
		source_type = std_type;
		target_type = cancel_type;
		
	}
    with(currentProject.fromobject()){
        with(plw.no_locking){
            with(plw.no_alerts){
                for(var each in currentProject.get("ALLOCATIONS")){
					if(each.getinternalvalue("TYPE")==source_type){each.setinternalvalue("TYPE",target_type);}
				}
                for(var each in currentProject.get("EXPENDITURES")){
					if(each.getinternalvalue("TYPE")==source_type){each.setinternalvalue("TYPE",target_type);}
				}
            }
        }
    }
    return true;
} 
//* -*- Mode: pjs -*- *****************************************************
//  COPYRIGHT (C) PLANISWARE $Date: 2021/01/22 08:32:14 $                                            
//                                                                          
//  All Rights Reserved                                                     
// 
//  This program and the information contained herein are confidential to
//  and the property of PLANISWARE and are made available only to PLANISWARE
//  employees for the sole purpose of conducting PLANISWARE business.
// 
//  This program and copy therof and the information contained herein shall
//  be maintained in strictest confidence ; shall not be copied in whole or
//  in part except as authorized by the employee's manager ; and shall not
//  be disclosed or distributed (a) to persons who are not PLANISWARE employees,
//  or (b) to PLANISWARE employees for whom such information is not necessary in
//  connection with their assigned responsabilities.
// 
//  There shall be no exceptions to the terms and conditions set forth
//  herein except as authorized in writing by the responsible PLANISWARE General
//  Manager.
//
// 
//  FILE    : $RCSfile: bmx_sap_to_explor_po_interface.pjs,v $
// 
//  AUTHOR  : $Author: ctrepied $
// 
//  VERSION : $Id: bmx_sap_to_explor_po_interface.pjs,v 3.16 2023/02/01 09:00:00 xli Exp $
//  Add champs USER_ATTRIBUTE_BMX_UA_S_PO_STATUS with #Postatus#
//
//  VERSION : $Id: bmx_sap_to_explor_po_interface.pjs,v 3.15 2021/01/22 08:32:14 ctrepied Exp $
// 
//  PURPOSE :
// 
//  HISTORY :
//  Log : https://cvs.planisware.com/viewvc/customers/Biomerieux_Explor/bmx_sap_to_explor_po_interface.pjs?view=log
//**************************************************************************
/*namespace _bmx_sap_po_interface;

method bmx_sap_call_to_po_detail on plc.PlannedExpenditure(o_server,originBoardId,n_project_Id,s_project_key){
  //TODO : 
  var date d_startDate  = this.jira_getStartDate();
  var date d_endDate    = this.jira_getEndDate();
  if(!((d_startDate instanceof Date) && (d_endDate instanceof Date))){
    plw.alert("JIRA export cancelled for ~a : Impossible to compute dates".format(this));
    return -1;
  }
  //Don't use standard dates since JIRA doesn't accept endate < startdate
  if(d_endDate <= d_endDate)d_endDate = d_startDate + 1;
  var String s_name = this.name;
  var String s_startDate = d_startDate.formatUTCDate();
  var String s_endDate   = d_endDate.formatUTCDate();
  var (l_response,n_errorCode,l_header) = createJIRASprint(o_server,s_name,s_startDate,s_endDate,originBoardId);
  switch(n_errorCode){
  case getSuccessCode(#POST#) :
    with (plw.no_locking){
      //Create and Set _JIRA_AA_N_SPRINT_ID and _JIRA_AA_N_BOARD_ID on server information object
      var v_plist =["DATASET",this.jira_getFile(),
		    "_JIRA_RA_SERVER",o_server,
		    "_JIRA_RA_REL_OBJECT",this,
		    "_JIRA_AA_D_LAST_UP",new date(),
		    "_JIRA_AA_N_SPRINT_ID",l_response.getf(#id#),
		    "_JIRA_AA_N_BOARD_ID",l_response.getf(#originBoardId#)];
      if(n_project_Id instanceof number)v_plist.setPlist("_JIRA_AA_N_PROJECT_ID",n_project_Id);
      if(s_project_key instanceof string)v_plist.setPlist("_JIRA_AA_S_KEY_PROJECT",s_project_key);
      createinformationWithPlist(v_plist);
    }
    updateSprintStatus(this,o_server);
    break;
  }
  return values(l_response,n_errorCode,l_header);
}

function getProjectList(o_endpoint,...args){
  var String s_URL = restklib.formatUri(o_endpoint.url,
					#instance#:context.INT_GS_S_AZURE_DEVOPS_INSTANCE,
					#organization#:context.INT_GS_S_AZURE_DEVOPS_ORGANIZATION,
					#api_version#:"5.0");
  var (o_ProjectListResponse,status) = restklib.doRequest(o_endpoint.verb,s_URL,false,content_type:'application/json');
  return o_ProjectListResponse;//What is the most relevant return
}
*/
//----------------------------------------------------------------------------------------------------------------------
/*
PLW Client - SAP Server (SOAP UI for testing purposes) - 1 object at a time

Authentication : not applicable for now
Content-Type : application/json
Accept : application/json
Error Management : log table in Planisware to be discussed

Outbound message
{
	"WbsCode":"BM-E0029-001-E-001",
	"Year":2020
}

Inbound message from metadata

{
	"Wbs":"",
	"FiscalYear":"",
	"ObjectType":"",
	"ObjectId":"",
	"CompanyCode":"",
	"PoNumber":"",
	"PoItem":"",
	"AccDocType":"",
	"Description":"",
	"Material":"",
	"PoCreator":"",
	"PoDate":"/Date(1602854011000)/",
	"PostingDate":"/Date(1602854011000)/",
	"SupplierCode":"",
	"Supplier":"",
	"Currency":"",
	"CommitOrdered":1234,
	"Actual":2324,
	"StillToDeliver":111,
	"ValueCategory":"",
	"ValueCategoryText":""
}

//Test message formatting
//var o_pe = plc.expenditure.get(118134102414);return o_pe.formatJSONPost();

Currency (UNIT) deducted from the planned expenditure
Value Category (_INF_RA_CBS2)

*/

namespace _bmx_sap_po_interface;

//------------------Global variables------------------------

//Http status code - Useful to deal with response
var BMX_GV_N_HTTP_STATUS_CODE_OK = 200;
var BMX_GV_N_HTTP_STATUS_CODE_CREATED = 201;
var BMX_GV_N_HTTP_STATUS_CODE_ACCTEPTED = 202;
var BMX_GV_N_HTTP_STATUS_CODE_PARTIAL_INFO = 203;
var BMX_GV_N_HTTP_STATUS_CODE_NO_RESPONSE = 204;
var BMX_GV_N_HTTP_STATUS_CODE_BAD_REQUEST = 400;
var BMX_GV_N_HTTP_STATUS_CODE_UNAUTHORIZED = 401;
var BMX_GV_N_HTTP_STATUS_CODE_FORBIDDEN = 403;
var BMX_GV_N_HTTP_STATUS_CODE_NOT_FOUND = 404;
var BMX_GV_N_HTTP_STATUS_CODE_NOT_IMPLEMENTED = 500;

method formatJSONPost on plc.BMX_PT_SAP_CODE(){
	var o_sap_code = this;
	var list msg = new list(#Wbs#,o_sap_code.printattribute(),#FiscalYear#,2020,#ObjectType#,33,#ObjectId#,00);
	return restklib.formatJSON(msg);
}

function bmx_identify_pe(o_sap_code){
	var o_pe = undefined;
	if(o_sap_code instanceof plc.BMX_PT_SAP_CODE){
		for(var each in o_sap_code.get("r.BMX_RA_SAP_CODE.EXPENDITURE")){
			if(each instanceof plc.expenditure && each.CLASS == "FORECAST_EXPENDITURE"){o_pe = each;}
		}
	}
	return o_pe;
}

function bmx_pjs_identify_company_code(s_company_code){
	for(var o_cost_account in plc.cbs_node){
		if(o_cost_account.BMX_AA_S_SAP_CPY_CODE == s_company_code){return o_cost_account;}
	}
	return undefined;
}

function bmx_pjs_po_creation(o_wbs,...args){
	var o_pe = args.getf(#o_pe#);
	var o_sap_code = args.getf(#o_sap_code#);
	var n_fiscal_year = args.getf(#n_fiscal_year#);
	var String s_company_code = o_wbs.getf(#CompanyCode#);
	var String s_CommitOrdered = o_wbs.getf(#CommitOrdered#);
	var String s_PoNumber = o_wbs.getf(#PoNumber#);
	var String s_PoItem = o_wbs.getf(#PoItem#);
	var String s_AccDocNumber = o_wbs.getf(#AccDocNumber#);
	var String s_SupplierCode = o_wbs.getf(#SupplierCode#);
	var String s_Actual = o_wbs.getf(#Actual#);
	var String s_StillToDeliver = o_wbs.getf(#StillToDeliver#);
	var String s_ObjectId = o_wbs.getf(#ObjectId#);
	var Date d_posting_date = undefined;
	var Date d_doc_date = undefined;
	
	if(s_CommitOrdered == undefined || s_CommitOrdered == "" || s_CommitOrdered == false){s_CommitOrdered="0.00";}
	// if(s_PoNumber == undefined || s_PoNumber == "" || s_PoNumber == false){s_PoNumber="0";}
	// if(s_PoItem == undefined || s_PoItem == "" || s_PoItem == false){s_PoItem="0";}
	// if(s_AccDocNumber == undefined || s_AccDocNumber == "" || s_AccDocNumber == false){s_AccDocNumber="0";}
	// if(s_SupplierCode == undefined || s_SupplierCode == "" || s_SupplierCode == false){s_SupplierCode="0";}
	if(s_Actual == undefined || s_Actual == "" || s_Actual == false){s_Actual="0.00";}
	if(s_StillToDeliver == undefined || s_StillToDeliver == "" || s_StillToDeliver == false){s_StillToDeliver="0.00";}
	// if(s_ObjectId == undefined || s_ObjectId == "" || s_ObjectId == false){s_ObjectId="0";}
	if(!(o_wbs.getf(#PostingDate#) == false)){d_posting_date = o_wbs.getf(#PostingDate#).readodatadate();}
	if(!(o_wbs.getf(#PoDate#) == false)){d_doc_date = o_wbs.getf(#PoDate#).readodatadate();}
	
	with (plw.no_locking){
		var po_plist = new vector("ACTIVITY",o_pe.ACTIVITY,//ok
									"BMX_AA_S_SAP_OBJECT_ID",s_ObjectId,//ok
									"UNIT",o_pe.UNIT,//ok
									"_CRT_AA_N_INITIAL_QTY",s_CommitOrdered.parsenumber("####.00"),//ok
									"_INF_RA_CBS2",o_pe._INF_RA_CBS2,//ok
									"FILE",o_pe.ACTIVITY.PROJECT,//ok
									"BMX_RA_SAP_CODE",o_sap_code,//ok
									"BMX_AA_N_FISCAL_YEAR",n_fiscal_year,//ok
									"BMX_AA_S_SAP_OBJECT_TYPE",o_wbs.getf(#ObjectType#),//ok
									"USER_ATTRIBUTE_BMX_UA_COMPANY_SAP_PUB",bmx_pjs_identify_company_code(s_company_code),//ok
									"BMX_AA_S_PO_NUMBER",s_PoNumber,
									"BMX_AA_S_PO_ITEM",s_PoItem,
									"BMX_AA_S_ACC_DOC_NUMBER",s_AccDocNumber,//ok
									"BMX_AA_S_ACC_DOC_TYPE",o_wbs.getf(#AccDocType#),//ok
									"LABEL",o_wbs.getf(#Description#),//ok
									"BMX_AA_D_POSTING_DATE",d_posting_date,//ok
									"BMX_AA_S_MATERIAL",o_wbs.getf(#Material#),//ok
									"BMX_AA_S_SUPPLIER_CODE",s_SupplierCode,//ok
									"BMX_AA_S_SUPPLIER",o_wbs.getf(#Supplier#),//ok
									"BMX_AA_S_VALUE_CATEGORY_TXT",o_wbs.getf(#ValueCategoryText#),//ok
									"USER_ATTRIBUTE_BMX_UA_S_PO_STATUS",o_wbs.getf(#Postatus#),//ok
									"BMX_AA_D_DOCUMENT_DATE",d_doc_date,//ok
									"BMX_AA_N_DELIVERED_AMOUNT",s_Actual.parsenumber("####.00"),//ok
									"BMX_AA_N_STILL_TO_DEL_AMOUNT",s_StillToDeliver.parsenumber("####.00"),//ok
									"BMX_AA_S_PO_CREATOR",o_wbs.getf(#PoCreator#));//ok
		plc._CRT_PT_PO_EXP.makeopx2objectwithplist(po_plist);
		plw.positiveonb();
	}
	return true;
}

function bmx_pjs_handle_response(response,...args){
	var o_response = response.getf(#d#);
	var results = o_response.getf(#results#);
	var o_sap_code = args.getf(#o_sap_code#);
	var Number n_fiscal_year = context.gen_chart_dd.getYear();
	var Number n_counter = 0;
	for(var o_wbs in results){bmx_pjs_po_creation(o_wbs,#o_pe#:args.getf(#o_pe#),#o_sap_code#:args.getf(#o_sap_code#),#n_fiscal_year#:n_fiscal_year);n_counter++;}
	if(n_counter == 0){plw.alert(plw.multilingual_writetextkey("WbsDetailsFilteringCriteria").format(o_sap_code.printattribute(),n_fiscal_year.tostring("####")));return false;}
	return true;
}

function bmx_pjs_clean_existing_lines_for_selected_sap_code(o_sap_code){
	for(var each in o_sap_code.get("r.BMX_RA_SAP_CODE.EXPENDITURE")){
		if(each.CLASS == "_CRT_PT_PO_EXP"){
			each.delete();
		}
	}
}

function bmx_pjs_build_url(o_sap_code,...args){
	var String s_root_url = args.getf(#o_endpoint#).URL;
	var String s_wbs_filter = "Wbs eq '" + o_sap_code.printattribute() + "'";
	var Date d_fiscal_year = context.gen_chart_dd;
	var String s_fiscal_year_filter = "FiscalYear eq '" + d_fiscal_year.getYear() + "'";
	var String s_full_url = s_root_url + "?$filter=" + s_wbs_filter + " and " + s_fiscal_year_filter + "&$format=json";
	var String s_full_url_encoded = s_full_url.replaceregexp(" ","%20");
	return s_full_url_encoded;
}

function bmx_get_po_details(o_sap_code,...args){
	var b_po_created = args.getf(#b_po_created#);
	var o_endpoint = args.getf(#o_endpoint#);
	var o_pe = bmx_identify_pe(o_sap_code);
	var String s_full_url_encoded = bmx_pjs_build_url(o_sap_code,#o_endpoint#:o_endpoint);
	var list l_headers = new list(new cons("APIKey",o_endpoint.get("BMX_UA_S_API_KEY")));
	
	plw.writeln("Calling endpoint " + s_full_url_encoded + " with method " + o_endpoint.VERB + " on the SAP Code " + o_sap_code.printattribute());
	
	var (response,status,raw) = restklib.doRequest(o_endpoint.VERB,s_full_url_encoded,false,accept:'application/json',headers:l_headers);
	
	plw.writeln("response"+response);
	plw.writeln("status"+status);
	plw.writeln("raw"+raw);
	
	if(status == BMX_GV_N_HTTP_STATUS_CODE_OK && o_pe instanceof plc.expenditure){
		b_po_created = bmx_pjs_handle_response(response,#o_pe#:o_pe,#o_sap_code#:o_sap_code);
		if(b_po_created == true){o_sap_code.BMX_AA_D_SAP_SYNCHRO_DATE = new date();}
	}
	else{
		plw.alert(plw.multilingual_writetextkey("SapWbsDetailsInterface"));
		plw.alert("For Help please, provide below technical details :");
		plw.alert("Status code : " + status);
		plw.alert("Raw content : " + raw);
		plw.alert("Response content : " + response);
	}
	return b_po_created;
}

method bmx_sap_call_to_po_detail on plc.BMX_PT_SAP_CODE(o_endpoint){
	var o_sap_code = this;
	var Boolean b_po_created = false;
	
	if(o_sap_code.BMX_AA_D_SAP_SYNCHRO_DATE != undefined){
		// var String s_message = "You are going to update the existing PO lines for SAP Code " + o_sap_code.printattribute() + " synchronized on " + o_sap_code.BMX_AA_D_SAP_SYNCHRO_DATE.tostring("MM/JJ/AA:HHhIImSSs") + context.callstringformula("GET_CHAR(10)") + "Do you want to continue ?";
		if (plw.question(plw.multilingual_writetextkey("WbsDetailsInterfaceValidation").format(o_sap_code.printattribute(),o_sap_code.BMX_AA_D_SAP_SYNCHRO_DATE.tostring("MM/JJ/AA:HHhIImSSs")))){
			bmx_pjs_clean_existing_lines_for_selected_sap_code(o_sap_code);
			b_po_created = bmx_get_po_details(o_sap_code,#o_endpoint#:o_endpoint,#b_po_created#:b_po_created);
			return b_po_created;
		}
		return b_po_created;
	}
	else{
		b_po_created = bmx_get_po_details(o_sap_code,#o_endpoint#:o_endpoint,#b_po_created#:b_po_created);
		return b_po_created;
	}
}

/*Form code
namespace _bmx_sap_po_interface;
call_endpoint_on_object("opxREST_ENDPOINT".get("SAP_INTERFACE:YFOS_EXPLOR_WBS_DETAILS_SRV"),#object#:currentObject);*/

/*Basic test
var o_response = rest.get("http://localhost:8456/tesctr",false);
alert("o_response"+o_response);*/

function bmx_wbs_details_handler(o_endpoint,...args){
	var o_sap_code = args.getf(#object#);
	with (plw.no_locking){
		o_sap_code.bmx_sap_call_to_po_detail(o_endpoint);
	}
}

function generic_call_endpoint(o_endpoint,...args){
	if(o_endpoint instanceof plc.REST_ENDPOINT){
      return restklib.callendpoint(o_endpoint,
				   #context#:context,
				   #user#:plw.currentopx2user(),
				   #object#:args.getf(#object#));
	}
}

function call_endpoint_on_object(o_endpoint,...args){
  return generic_call_endpoint(o_endpoint,#object#:args.getf(#object#));
}

function bmx_pjs_date_formats()
{
	var Slot1 = plc.BMX_PT_SAP_CODE.GetSlotById("BMX_AA_D_SAP_SYNCHRO_DATE");
	slot1.slot_setDefaultFormat("MM/JJ/AA:HHhIImSSs");
	var Slot2 = plc._CRT_PT_PO_EXP.GetSlotById("BMX_AA_N_FISCAL_YEAR");
	slot2.slot_setDefaultFormat("####");
	var Slot3 = plc._CRT_PT_PO_EXP.GetSlotById("BMX_AA_N_ACC_DOC_NUMBER");
	slot3.slot_setDefaultFormat("####");
	var Slot4 = plc._CRT_PT_PO_EXP.GetSlotById("BMX_AA_N_PO_ITEM");
	slot4.slot_setDefaultFormat("####");
	var Slot5 = plc._CRT_PT_PO_EXP.GetSlotById("BMX_AA_N_PO_NUMBER");
	slot5.slot_setDefaultFormat("####");
	var Slot6 = plc._CRT_PT_PO_EXP.GetSlotById("BMX_AA_N_SUPPLIER_CODE");
	slot6.slot_setDefaultFormat("####");
	var Slot7 = plc._CRT_PT_PO_EXP.GetSlotById("BMX_AA_N_SAP_OBJECT_ID");
	slot7.slot_setDefaultFormat("####");
	var Slot8 = plc._CRT_PT_PO_EXP.GetSlotById("_CRT_AA_N_INITIAL_QTY");
	slot8.slot_setDefaultFormat("####.00");
	var Slot9 = plc._CRT_PT_PO_EXP.GetSlotById("BMX_AA_N_DELIVERED_AMOUNT");
	slot9.slot_setDefaultFormat("####.00");
	var Slot10 = plc._CRT_PT_PO_EXP.GetSlotById("BMX_AA_N_STILL_TO_DEL_AMOUNT");
	slot10.slot_setDefaultFormat("####.00");
	plc._CRT_PT_PO_EXP.getslotbyid("_CRT_AA_N_INITIAL_QTY").comment ="Commitment";
}
plw.AddwrapperFunction(plw.InitializeIntranetAfterWrapper, bmx_pjs_date_formats); 
//* -*- Mode: pjs -*- *****************************************************
//  COPYRIGHT (C) PLANISWARE $Date: 2021/02/23 15:43:41 $                                            
//                                                                          
//  All Rights Reserved                                                     
// 
//  This program and the information contained herein are confidential to
//  and the property of PLANISWARE and are made available only to PLANISWARE
//  employees for the sole purpose of conducting PLANISWARE business.
// 
//  This program and copy therof and the information contained herein shall
//  be maintained in strictest confidence ; shall not be copied in whole or
//  in part except as authorized by the employee's manager ; and shall not
//  be disclosed or distributed (a) to persons who are not PLANISWARE employees,
//  or (b) to PLANISWARE employees for whom such information is not necessary in
//  connection with their assigned responsabilities.
// 
//  There shall be no exceptions to the terms and conditions set forth
//  herein except as authorized in writing by the responsible PLANISWARE General
//  Manager.
//
// 
//  FILE    : $RCSfile: bmw_sap_to_explore_settlement_rules.pjs,v $
// 
//  AUTHOR  : $Author: ctrepied $
// 
//  VERSION : $Id: bmw_sap_to_explore_settlement_rules.pjs,v 3.19 2021/02/23 15:43:41 ctrepied Exp $
// 
//  PURPOSE :
// 
//  HISTORY :
//  Log : https://cvs.planisware.com/viewvc/customers/Biomerieux_Explor/bmw_sap_to_explore_settlement_rules.pjs?view=log
//**************************************************************************
/*Chargeback coefficients
- Initialization of the PT settlement rules table => script
- Mapping FS/COMPANY/PRG/COST (Text field)=> provided by BMX
- Identify modification
	Alert mecanism
- Technical part send PT table to SAP using SOAP webservice
*/

namespace _bmx_sap_settlement_rules;

//------------------------------------------
/*Function called in batch on dataset to fill in the setttlement rule table
and push settlement rule to SAP through webservice
var o_prj = "opxproject".get("E0029");
return o_prj.getinternalvalue("STATE").tostring();
*/
function bmx_pjs_generate_and_send_settlement_rule_to_sap(){
	plw.writeln("--------bmx_pjs_generate_and_send_settlement_rule_to_sap--------------");
	for (var o_prj in plc.ordo_project){
		//not a template, not a version, correct value for sap pe increment (user attribute), enable for user interface
		if(o_prj.printattribute("DATASET_CLASS")== "Project" && o_prj.getinternalvalue("STATE").tostring()!= "TEMPLATE" && o_prj.ORIGIN_PROJECT =="" && o_prj.get("BMX_UA_B_SAP_SETTLEMENT_RULES_ENABLED") == true && o_prj.BMX_AA_SAP_PE_INCREM_NB >0 && o_prj.BMX_AA_SAP_PE_INCREM_NB != o_prj.get("BMX_UA_N_SAP_PE_INCREMEN_TEMP")){
			bmx_pjs_identify_project_with_chargeback_coeff(o_prj);
			plw.bmx_ojs_global_function_settlement_to_sap(o_prj);
		}
	}
	return true;
}
bmx_pjs_generate_and_send_settlement_rule_to_sap.exportfunction([],"BOOLEAN","Batch for settlement rules creation in SAP");

function bmx_pjs_generate_settlement_rule(){
	plw.writeln("--------bmx_pjs_generate_settlement_rule--------------");
	for (var o_prj in plc.ordo_project){
		//not a template, not a version, correct value for sap pe increment (user attribute), enable for user interface
		if(o_prj.printattribute("DATASET_CLASS")== "Project" && o_prj.getinternalvalue("STATE").tostring()!= "TEMPLATE" && o_prj.ORIGIN_PROJECT =="" && o_prj.get("BMX_UA_B_SAP_SETTLEMENT_RULES_ENABLED") == true && o_prj.BMX_AA_SAP_PE_INCREM_NB >0 && o_prj.BMX_AA_SAP_PE_INCREM_NB != o_prj.get("BMX_UA_N_SAP_PE_INCREMEN_TEMP")){
			bmx_pjs_identify_project_with_chargeback_coeff(o_prj);
		}
	}
	return true;
}
bmx_pjs_generate_settlement_rule.exportfunction([],"BOOLEAN","Batch for settlement rules creation in PLW PT Table");

function bmx_pjs_send_settlement_rule_to_sap(){
	plw.writeln("--------bmx_pjs_send_settlement_rule_to_sap--------------");
	for (var o_prj in plc.ordo_project){
		//not a template, not a version, correct value for sap pe increment (user attribute), enable for user interface
		if(o_prj.printattribute("DATASET_CLASS")== "Project" && o_prj.getinternalvalue("STATE").tostring()!= "TEMPLATE" && o_prj.ORIGIN_PROJECT =="" && o_prj.get("BMX_UA_B_SAP_SETTLEMENT_RULES_ENABLED") == true && o_prj.BMX_AA_SAP_PE_INCREM_NB >0 && o_prj.BMX_AA_SAP_PE_INCREM_NB != o_prj.get("BMX_UA_N_SAP_PE_INCREMEN_TEMP")){
			plw.bmx_ojs_global_function_settlement_to_sap(o_prj);
		}
	}
	return true;
}
bmx_pjs_send_settlement_rule_to_sap.exportfunction([],"BOOLEAN","Batch to send settlement rules to SAP");

function bmx_pjs_identify_cost_center_from_mapping_table(o_prg,...args){
	var v_cost_center_with_fs = new vector();
	var v_cost_center_no_fs = new vector();
	var v_company = args.getf(#v_company#);
	var v_funding_sources = args.getf(#v_funding_sources#);
	for(var o_company in v_company){
		for(var o_funding_sources in v_funding_sources){
			var o_ka = new KeyAttribute(plc.BMX_PT_SAP_CODE, ["BMX_RA_CA_SAP_CC", "BMX_RA_PRG_SAP_CC"], [o_company, o_prg]);
			with (o_ka.fromObject()) {
				for(var o_mapping in plc.BMX_PT_SAP_CODE){
					if(o_mapping.BMX_RA_FUNDING_SOURCE == o_funding_sources && o_mapping.BMX_RA_CA_SAP_CC == o_company && o_mapping.BMX_RA_PRG_SAP_CC == o_prg){
						v_cost_center_with_fs.push(o_mapping.BMX_RA_COST_CENTER);
					}
					if(o_mapping.BMX_RA_CA_SAP_CC == o_company && o_mapping.BMX_RA_PRG_SAP_CC == o_prg && o_mapping.printattribute("BMX_RA_FUNDING_SOURCE") == ""){
						v_cost_center_no_fs.push(o_mapping.BMX_RA_COST_CENTER);
					}
				}
			}
		}
	}
	if(v_cost_center_with_fs.length == 0){return v_cost_center_no_fs;}
	return v_cost_center_with_fs;
}

// Cost center
function bmx_find_existing_settlement_rule(o_chargeback,...args){
	var o_sap_code = args.getf(#o_sap_code#);
	// var o_cc = args.getf(#o_cc#);
	var Number n_chargeback_onb = o_chargeback.ONB;
	// var Date d_chargeback_sd = o_chargeback.START_DATE;
	
	for(var each in o_sap_code.get("r.BMX_RA_WBS_CODE.BMX_PT_SAP_SETT_RULES")){
		// if(each.BMX_RA_COST_CENTER == o_cc && each.BMX_AA_N_COEFF_ONB == n_chargeback_onb && each.BMX_AA_D_START_DATE == d_chargeback_sd){
		if(each.BMX_AA_N_COEFF_ONB == n_chargeback_onb){
			return each;
		}
	}
	return undefined;
}

function bmx_pjs_sap_code(o_prj){
	var ht_sap_code_company = new hashtable("object");
	for(var each in o_prj.get("EXPENDITURES")){
		if(each.BMX_RA_SAP_CODE.printattribute() !="" && each.BMX_RA_SAP_CODE.printattribute() != undefined && each.getinternalvalue("TYPE") == false && each.COST_ACCOUNT.get("BMX_UA_S_COMPANY_RESOURCE") != ""){
			if(each.get("BMX_UA_B_WBS_TO_SAP")){
				ht_sap_code_company.set(each.BMX_RA_SAP_CODE,plc.cbs_node.get(each.COST_ACCOUNT.get("BMX_UA_S_COMPANY_RESOURCE")));
			}
			}
	}
	return ht_sap_code_company;
}

// check if chargeback are valid or not with something like :BMX_DA_B_CHECKER on chargeback
function bmx_pjs_identify_chargeback_coefficients(o_prj){
	var v_chargeback = new vector();
	var Date d_migration_date = new date(context.BMX_GS_S_MIGRATION_DATE,"DD/MM/YYYY");
	with (o_prj.fromObject()) {
		for(var o_act in plc.work_structure where o_act.get("BMX_UA_B_HAS_A_CHARG_COEFF") == true){
			for(var o_chargeback in o_act.get("CHARGEBACK_COEFFICIENTS") where o_chargeback.get("BMX_UA_B_CHARGEBACK_COEFF_GLOBAL_CHECK") == true)
			{if(o_chargeback.START_DATE >= d_migration_date){v_chargeback.push(o_chargeback);}}
		}
		return v_chargeback;
	}
}

// get all funding source from a chargeback vector
function bmx_pjs_get_funding_source_object(v_chargeback){
	var v_funding_source_object = new vector();
	for(var o_chargeback in v_chargeback){
		v_funding_source_object.push(o_chargeback.get("CONTRACT_WORK_PACKAGE"));
	}
	return v_funding_source_object;
}

/*
@Cyril : la finance voudrait garder la main sur les tous settlements rules liés aux projets appartenant aux programmes PRG0094 (Recast) et PRG0099 (Reach). Il faudrait les exclure de l’interface.
=> Creation d'un user attribute de type boolean BMX_UA_B_SAP_SETTLEMENT_RULES_ENABLED
*/

/*
var o_prj = plc.ordo_project.get("E0029");
bmx_pjs_identify_project_with_chargeback_coeff(o_prj);
*/
function bmx_pjs_identify_project_with_chargeback_coeff(o_prj){
	plw.writeln("-----------bmx_pjs_identify_project_with_chargeback_coeff---------------");
	if(o_prj.get("BMX_UA_B_SAP_SETTLEMENT_RULES_ENABLED") == true){
		var o_program = o_prj.BREAKDOWN_1;
		var v_chargeback = bmx_pjs_identify_chargeback_coefficients(o_prj);
		// var v_funding_sources = bmx_pjs_get_funding_source_object(v_chargeback);
		var ht_sap_code_company = bmx_pjs_sap_code(o_prj);

		for(var o_chargeback in v_chargeback){
			for(var o_sap_code in ht_sap_code_company){
				var v_company = new vector(ht_sap_code_company.get(o_sap_code)); 
				var v_funding_sources = bmx_pjs_get_funding_source_object(new vector(o_chargeback));
				var v_cost_center = bmx_pjs_identify_cost_center_from_mapping_table(o_program,#v_company#:v_company,#v_funding_sources#:v_funding_sources);
				// plw.writeln("o_program "+o_program);
				// plw.writeln("v_company "+v_company);
				// plw.writeln("v_funding_sources "+v_funding_sources);
				// plw.writeln("v_cost_center "+v_cost_center);
				with(plw.no_locking){
					bmx_pjs_create_settlement_rule(o_chargeback,#o_sap_code#:o_sap_code,#v_cost_center#:v_cost_center,#o_program#:o_program,#v_company#:v_company,#v_funding_sources#:v_funding_sources);
				}
				
			}
		}
		
	}
}


function bmx_pjs_create_settlement_rule(o_chargeback,...args){
	
	var o_sap_code = args.getf(#o_sap_code#);
	var v_cost_center = args.getf(#v_cost_center#);
	var o_program = args.getf(#o_program#);
	var v_company = args.getf(#v_company#);
	var v_funding_sources = args.getf(#v_funding_sources#);
	
	for(var o_cc in v_cost_center){
		
		var o_settlement_rule = bmx_find_existing_settlement_rule(o_chargeback,#o_sap_code#:o_sap_code);
		
		if(o_settlement_rule instanceof plc.BMX_PT_SAP_SETT_RULES){
			var v_modifier = new vector();
			v_modifier.setplist("BMX_AA_D_END_DATE",o_chargeback.END_DATE);
			v_modifier.setplist("BMX_AA_D_START_DATE",o_chargeback.START_DATE);
			v_modifier.setplist("BMX_AA_N_COEFF",o_chargeback.COEFFICIENT);
			var v_updated_cost_center = bmx_pjs_identify_cost_center_from_mapping_table(o_program,#v_company#:v_company,#v_funding_sources#:v_funding_sources);
			if(v_updated_cost_center.length == 1){v_modifier.setplist("BMX_RA_COST_CENTER",v_updated_cost_center[0]);}
			o_settlement_rule.modifywithplist(v_modifier);
		}
		else{
			var v_creator = new vector();
			v_creator.setplist("FILE","BMX_CF_MASTER_DATA");
			v_creator.setplist("NAME","#");
			v_creator.setplist("BMX_AA_D_END_DATE",o_chargeback.END_DATE);
			v_creator.setplist("BMX_AA_D_START_DATE",o_chargeback.START_DATE);
			v_creator.setplist("BMX_AA_N_COEFF",o_chargeback.COEFFICIENT);
			v_creator.setplist("BMX_AA_N_COEFF_ONB",o_chargeback.ONB);
			v_creator.setplist("BMX_RA_COST_CENTER",o_cc);
			v_creator.setplist("BMX_RA_WBS_CODE",o_sap_code);
			
			plc.BMX_PT_SAP_SETT_RULES.makeopx2objectwithplist(v_creator);
			plw.positiveonb();
		}
	}
	return true;
}

function bmx_pjs_formats()
{
	var Slot11 = plc.BMX_PT_SAP_SETT_RULES.GetSlotById("BMX_AA_N_COEFF");
	slot11.slot_setDefaultFormat("# ### %");
	var Slot12 = plc.BMX_PT_SAP_SETT_RULES.GetSlotById("BMX_AA_N_COEFF_ONB");
	Slot12.slot_setDefaultFormat("####");
	var Slot13 = plc.BMX_PT_SAP_SETT_RULES.GetSlotById("BMX_AA_N_COEFF_OVN");
	Slot13.slot_setDefaultFormat("####");
	var Slot14 = plc.BMX_PT_SAP_SETT_RULES.GetSlotById("USER_ATTRIBUTE_BMX_UA_D_LAST_SYNCHRO_WITH_SAP");
	Slot14.slot_setDefaultFormat("MM/JJ/AA:HHhIImSSs");
}
plw.AddwrapperFunction(plw.InitializeIntranetAfterWrapper, bmx_pjs_formats);

function bmx_pjs_retrieve_chargeback_ovn(f) {
	var o_settlement_rule = this;
	var n_onb_chargeback = o_settlement_rule.BMX_AA_N_COEFF_ONB;
	if(n_onb_chargeback instanceof Number){
		var o_chargeback = plc.CHARGEBACK_COEFFICIENT.get(n_onb_chargeback);
		if(o_chargeback instanceof plc.CHARGEBACK_COEFFICIENT){
			f.call(o_chargeback);
		}
	}
}
plw._Utils_makeDynRelation("BMX_DR_CHARGEBACK_COEFF_OVN", "Chargeback Coefficient OVN", "opxBMX_PT_SAP_SETT_RULES", "OpxCHARGEBACK-COEFFICIENT", bmx_pjs_retrieve_chargeback_ovn); 
//* -*- Mode: pjs -*- *****************************************************
//  COPYRIGHT (C) PLANISWARE $Date: 2020/09/18 09:52:06 $                                            
//                                                                          
//  All Rights Reserved                                                     
// 
//  This program and the information contained herein are confidential to
//  and the property of PLANISWARE and are made available only to PLANISWARE
//  employees for the sole purpose of conducting PLANISWARE business.
// 
//  This program and copy therof and the information contained herein shall
//  be maintained in strictest confidence ; shall not be copied in whole or
//  in part except as authorized by the employee's manager ; and shall not
//  be disclosed or distributed (a) to persons who are not PLANISWARE employees,
//  or (b) to PLANISWARE employees for whom such information is not necessary in
//  connection with their assigned responsabilities.
// 
//  There shall be no exceptions to the terms and conditions set forth
//  herein except as authorized in writing by the responsible PLANISWARE General
//  Manager.
//
// 
//  FILE    : $RCSfile: bmx_pjs_mc_simulations.pjs,v $
// 
//  AUTHOR  : $Author: vfraize $
// 
//  VERSION : $Id: bmx_pjs_mc_simulations.pjs,v 3.2 2020/09/18 09:52:06 vfraize Exp $
// 
//  PURPOSE :
// 
//  HISTORY :
//  Log : https://cvs.planisware.com/viewvc/customers/Biomerieux_Explor/bmx_pjs_mc_simulations.pjs?view=log
//**************************************************************************
// version issues 
namespace _toolbar_mc;
function bmx_list_possible_values_version_risk(){
 var project = plw.currentpageobject();
 var elements = new vector();
 if(project instanceof plc.ordo_project){
    for(var projectVersion in project.versions where projectVersion.GET("?DELETED")==false){
      elements.push(projectVersion);
    }
 }
 return elements;
}

// to be called by toolbar version update

function bmx_open_if_needed_select_version(){
	var o_version = plc.ordo_project.get(context.get("BMX_MC_S_OC_SEL_VERSION"));
	if(o_version instanceof plc.ordo_project && o_version.get("ORIGIN_PROJECT")!="" && o_version.GET("?DELETED")==false){
		if(o_version.get("OPEN") == false){
			o_version.callmacro("OPEN");
		}
	}
	plw.refreshallwindows();
}

namespace _toolbar_mc;
function bmx_find_best_version_to_simulation(){
	
	var o_simu = plc.Simulation.get(context.BMX_DA_MC_OC_SIMU_PERFORMED);
	var project = plw.currentpageobject();
	var prev_version = undefined;
	if(o_simu instanceof plc.Simulation && project instanceof plc.ordo_project){
		var d_simu_date = o_simu.Get("SIMULATION_START_DATE");
		var s_day_simu = context.callstringformula("PRINT_DATE('"+d_simu_date+"',\"YYYYMMDD\")");
		
		for(var projectVersion in project.versions where projectVersion.GET("?DELETED")==false order by [['INVERSE','CREATION_DATE']]){
			var d_version_date = projectVersion.get("CREATION_DATE");
			var s_day_version = context.callstringformula("PRINT_DATE('"+d_version_date+"',\"YYYYMMDD\")");
			
		// in case it is done the same day : Win
			if(s_day_version== s_day_simu){
				context.set("BMX_MC_S_OC_SEL_VERSION",projectVersion.printattribute());
				return true;
			}
		// if we get trougth the simu date, we fill with previous version. 	
			if(d_simu_date<d_version_date && prev_version!=undefined){
				context.set("BMX_MC_S_OC_SEL_VERSION",projectVersion.printattribute());
				return true;
			}
			
			prev_version = projectVersion;
		}
		
	}else{
		plw.alert("Choose a simulation first");
		
	}
}

// direct tool to version
function bmx_create_new_version_for_simulation(){
	context._PV_AA_S_VERS_CREATE = plw._IhmGetCurrentTabObject().printattribute();
	var o_simu = plc.Simulation.get(context.BMX_DA_MC_OC_SIMU_PERFORMED);
	if(o_simu instanceof plc.Simulation){
		context.set("_PV_AA_S_COMMENT", "Created for MC simulation " + o_simu.get("NOTE"));
	}
		var Editor = "_PV_POP_OC_NEW_PROJECT_VERSION";   
		var link = new hyperlink("fvalue","attribute", "OPX2_Context","EditorType", Editor,"Popup", true);   
		if (link instanceof Hyperlink) link.go();	
	
}
plw.writeln("$CVSHeader: customers/Biomerieux_Explor/bmx_pjs_mc_simulations.pjs,v 3.2 2020/09/18 09:52:06 vfraize Exp $");
 
//  This program and the information contained herein are confidential to
//  and the property of PLANISWARE and are made available only to PLANISWARE
//  employees for the sole purpose of conducting PLANISWARE business.
// 
//  This program and copy therof and the information contained herein shall
//  be maintained in strictest confidence ; shall not be copied in whole or
//  in part except as authorized by the employee's manager ; and shall not
//  be disclosed or distributed (a) to persons who are not PLANISWARE employees,
//  or (b) to PLANISWARE employees for whom such information is not necessary in
//  connection with their assigned responsabilities.
// 
//  There shall be no exceptions to the terms and conditions set forth
//  herein except as authorized in writing by the responsible PLANISWARE General
//  Manager.
//
// 
//  FILE    : $RCSfile: bmx_pjs_migration_tools.pjs,v $
// 
//  AUTHOR  : $Author: vfraize $
//  PURPOSE :
// 
//  HISTORY :
//  Log : https://cvs.planisware.com/viewvc/customers/Biomerieux_Explor/bmx_pjs_migration_tools.pjs?view=log
//**************************************************************************


namespace bmx_migration;

function retrieve_write_read_only_access(){ 
	for (var o_prj in plc.ordo_project) 
	{
		o_prj.BMX_UA_S_READ_ACCESS_LIST=o_prj.READ_ONLY_GROUPS;
		o_prj.BMX_UA_S_READ_WRITE_ACCESS_LIST=o_prj.READ_WRITE_GROUPS;
	}
}

function bmx_copy_resource(file_dest,filter){
	var v_modifier = new vector("FILE",file_dest);
	var v_modifier = new vector("COST_UNIT","");
	var v_modifier = new vector("COST_ACCOUNT","");
	
	// rajouter la colonne sur les cost center
	var ht_remap = new hashtable("OBJECT");
	
	for(var o_res in plc.resource where o_res.callbooleanformula(filter) == true order by ["LEVEL"]){
		var parent_res = o_res.ELEMENT_OF;
		v_modifier.setplist("BMX_AA_N_LAST_ONB_V5",o_res.ONB);
		if(ht_remap.get(parent_res)!=undefined){
			v_modifier.setplist("ELEMENT_OF",ht_remap.get(parent_res));
		}
		
		var new_res = o_res.copywithplist(v_modifier);
		ht_remap.set(o_res,new_res);
		
		// new_res.positiveonb();
		
	}
}
function bmx_copy_cubs(file_dest,filter){
	var v_modifier = new vector("FILE",file_dest);
	var c = 0;
	var n = 0;
	var v_final_unit_list= new vector();
	// rajouter la colonne sur les cost center
	var ht_remap = new hashtable("OBJECT");
	var ht_cost_unit_remap = new hashtable("STRING");
	var v_list_used_unit = new vector();
	// take all resource migrated and take their cost unit
	for(var o_res_v6 in plc.Resource where o_res_v6.BMX_AA_N_LAST_ONB_V5>0){
		v_list_used_unit.push(o_res_v6.COST_UNIT);
	}
		
	for(var o_cubs_v6 in plc.cost_unit where o_cubs_v6.BMX_AA_N_LAST_ONB_V5>0 ){
		var o_cubs_p5 = plc.cost_unit.get(o_cubs_v6.BMX_AA_N_LAST_ONB_V5);
		ht_cost_unit_remap.set(o_cubs_p5,o_cubs_v6.printattribute());
		c ++;
	}	
		
	for(var o_obj in plc.COST_UNIT where o_obj.callbooleanformula(filter) == true && v_list_used_unit.position(o_obj)!=undefined){
		v_final_unit_list.push(o_obj);
	}
		
	with (plw.monitoring(title: 'Long action', steps: n)){
		for(var o_obj in plc.COST_UNIT where o_obj.callbooleanformula(filter)== true && ht_cost_unit_remap.get(o_obj)== undefined && o_obj.printattribute("FILE") != file_dest order by ["LEVEL"]){
			var parent_res = o_obj.UNIT;
			v_modifier.setplist("BMX_AA_N_LAST_ONB_V5",o_obj.ONB);
			v_modifier.setplist("DEFAULT_UNIT",false);
			if(ht_remap.get(parent_res)!=undefined){
				v_modifier.setplist("UNIT",ht_remap.get(parent_res));
			}
			n++;
			var new_o_obj = o_obj.copywithplist(v_modifier);
			ht_remap.set(o_obj,new_o_obj);
			// with(plw.no_locking){o_obj.name="TREATED_"+o_obj.name;}
		}
	}
	
	plw.alert(n + "created");
}

/*cost account duplication*/
function bmx_copy_cbs(file_dest,filter){
	
	var v_modifier = new vector("FILE",file_dest);
	var c = 0;
	var n = 0;
	var v_final_account_list= new vector();
	var ht_remap = new hashtable("OBJECT");
	var ht_cost_account_remap = new hashtable("STRING");
	var v_list_used_account = new vector();
	// take all resource migrated and take their cost account
	for(var o_res_v6 in plc.Resource where o_res_v6.BMX_AA_N_LAST_ONB_V5>0){
		v_list_used_account.push(o_res_v6.COST_ACCOUNT);
	}
		
	for(var o_cbs_v6 in plc.CBS_NODE where o_cbs_v6.BMX_AA_N_LAST_ONB_V5>0 ){
		var o_cbs_p5 = plc.CBS_NODE.get(o_cbs_v6.BMX_AA_N_LAST_ONB_V5);
		ht_cost_account_remap.set(o_cbs_p5,o_cbs_v6.printattribute());
		c ++;
	}	
		
	for(var o_obj in plc.CBS_NODE where o_obj.callbooleanformula(filter) == true && v_list_used_account.position(o_obj)!=undefined){
		v_final_account_list.push(o_obj);
	}
		
	with (plw.monitoring(title: 'Long action', steps: n)){
		for(var o_obj in plc.CBS_NODE where o_obj.callbooleanformula(filter)== true && ht_cost_account_remap.get(o_obj)== undefined && o_obj.printattribute("FILE") != file_dest order by ["LEVEL"]){
			var parent_res = o_obj.COST_ACCOUNT;
			v_modifier.setplist("BMX_AA_N_LAST_ONB_V5",o_obj.ONB);
			if(ht_remap.get(parent_res)!=undefined){
				v_modifier.setplist("COST_ACCOUNT",ht_remap.get(parent_res));
			}
			n++;
			var new_o_obj = o_obj.copywithplist(v_modifier);
			ht_remap.set(o_obj,new_o_obj);
			with(plw.no_locking){o_obj.name="TREATED_"+o_obj.name;}

		}
	}
	
	plw.alert(n + "created");

}

function bmx_copy_contract_workpackage(file_dest,filter){
	var v_modifier = new vector("FILE",file_dest);
	
	// rajouter la colonne sur les cost center
	var ht_remap = new hashtable("OBJECT");
	
	for(var o_cwp in plc.contract_workpackage  where o_cwp.callbooleanformula(filter) == true && o_cwp.NAME.substring(0,8)!="TREATED_" order by ["LEVEL"]){
		var parent_res = o_cwp.PARENT_WORKPACKAGE;
		v_modifier.setplist("BMX_AA_N_LAST_ONB_V5",o_cwp.ONB);
		if(ht_remap.get(parent_res)!=undefined){
			v_modifier.setplist("PARENT_WORKPACKAGE",ht_remap.get(parent_res));
		}
		
		var new_o_cwp = o_cwp.copywithplist(v_modifier);
		ht_remap.set(o_cwp,new_o_cwp);
		with(plw.no_locking){o_cwp.name="TREATED_"+o_cwp.name;}
	}
}

function bmx_copy_calendar(file_dest,filter){
	var v_modifier = new vector("FILE",file_dest);
	var ht_copy = new hashtable("OBJECT");
	
	for(var o_obj in plc.Calendar  where o_obj.printattribute("FILE") == "_CAL"){
		v_modifier.setplist("BMX_AA_N_LAST_ONB_V5",o_obj.ONB);
		v_modifier.setplist("PARENT",undefined);
		var new_o_obj = o_obj.copywithplist(v_modifier);
		ht_copy.set(o_obj,new_o_obj);
	}
	
	for (var each in ht_copy){
		var each_parent = each.PARENT;
		var new_parent = ht_copy.get(each_parent);
		if (new_parent != undefined ) ht_copy.get(each).PARENT = new_parent; 
	}
	
}


function bmx_open_selected_file(){
	for(var o in plw.selection_get()){
		o.callmacro("OPEN");
		with(plw.no_locking){o.OWNER = "DEV";}
		
	}
	
}
// bmx_open_selected_file();
function bmx_migrate_master_data(file){
	bmx_copy_calendar(file,"BMX_AA_N_LAST_ONB_V5=0 AND FILE.BMX_NF_FILE_MASTER_DATA");
	bmx_copy_contract_workpackage(file,"FILE.BMX_NF_FILE_MASTER_DATA");
	bmx_copy_cubs(file,"BMX_AA_N_LAST_ONB_V5=0 AND FILE.BMX_NF_FILE_MASTER_DATA");
	//bmx_copy_cbs(file,"BMX_AA_N_LAST_ONB_V5=0 AND FILE.BMX_NF_FILE_MASTER_DATA"); // pris de DEV
	bmx_copy_resource(file,"BMX_AA_B_MIG_RES and BMX_AA_N_LAST_ONB_V5=0 AND FILE.BMX_NF_FILE_MASTER_DATA"); // FIXME change filter
	bmx_copy_availability("BMX_CF_MASTER_DATA","","RES.BMX_AA_N_LAST_ONB_V5=0");
	bmx_copy_escalation("BMX_CF_MASTER_DATA","","BMX_AA_N_LAST_ONB_V5=0");
}

// bmx_migration.bmx_migrate_master_data("BMX_CF_MIG_MASTER_DATA");

function bmx_copy_resource(file_dest,filter){
	var v_modifier = new vector("FILE",file_dest);
	v_modifier.setplist("COST_UNIT","");
	v_modifier.setplist("COST_ACCOUNT","");
	var c=0;
	for(var o_res in plc.resource where o_res.callbooleanformula(filter) == true){
		c++;
	}
	// rajouter la colonne sur les cost center
	var ht_remap = new hashtable("OBJECT");
	var v_res_copied = new vector();
	with (plw.monitoring(title: 'Long action', steps: c)){
		for(var o_res in plc.resource where o_res.callbooleanformula(filter) == true && o_res.NAME.substring(0,8)!="TREATED_" order by ["LEVEL"]){
			var parent_res = o_res.CHILD_OF;
			v_modifier.setplist("BMX_AA_N_LAST_ONB_V5",o_res.ONB);
			if(ht_remap.get(parent_res)!=undefined){
				v_modifier.setplist("CHILD_OF",ht_remap.get(parent_res));
			}
			
			if (v_res_copied.position(o_res)==undefined){
				var new_res = o_res.copywithplist(v_modifier);
				ht_remap.set(o_res,new_res);
				plw.writeln("ONB de la ressource dupliquée : "+o_res.ONB);
				v_res_copied.push(o_res);
				plw.writeln("vecteur après creation : "+v_res_copied.length);
				with(plw.no_locking){o_res.NAME="TREATED_"+o_res.NAME;}
				new_res.file = file_dest;
				new_res.CHILD_OF=new_res.callStringFormula("SUBSTITUTE(\"BMX_CF_MASTER_DATA\",\"_RBS\",CHILD_OF)");
			}		
		}
	}
}
// bmx_copy_resource(file,"BMX_AA_B_MIG_RES and BMX_AA_N_LAST_ONB_V5=0 AND FILE.BMX_NF_FILE_MASTER_DATA"); 


// bmx_copy_calendar("BMX_CF_MIG_MASTER_DATA","TRUE");
function bmx_map_origin_resource(f){
		
	var Ka = new keyattribute(plc.resource,"BMX_AA_N_LAST_ONB_V5",this.BMX_AA_N_LAST_ONB_V5);
	with(Ka.fromobject()){
	for(var o_res in plc.resource where o_res.ONB == this.BMX_AA_N_LAST_ONB_V5 && o_res!=this && o_res.printattribute("FILE") == "_RBS"){
		
		f.call(o_res);
	}}
}


function bmx_get_origin_res_string_value(attr_slot){
	var origin_res = undefined;
	for(var o_res in this.get("BMX_MIG_ORIGIN_RES")){
		origin_res = o_res;
		break;
	}
	
	return origin_res.printattribute(attr_slot);
}
bmx_get_origin_res_string_value.exportfunction(["STRING"],"STRING", "return the value from origin resource for the resource");

var rel=new ObjectRelation(plc.resource,"BMX_MIG_ORIGIN_RES");
rel.comment="Origin resource";
rel.connectedtoclass=plc.resource;
rel.mapmethod=bmx_map_origin_resource;

// save des projets
function save_as_projet(){
	
	for (var o_prj in plc.ORDO_PROJECT where o_prj.NAME.substring(0,3)=="P5_" && o_prj.BMX_AA_B_NEW_PRJ == false){
		plw.writeln("Project "+o_prj+" will be copied.");
		var ObjectArgList = new vector();
		ObjectArgList.push("Name");
		ObjectArgList.push(o_prj.NAME.replaceregexp("P5_","")); // substring pour retirer P5_   
		ObjectArgList.push("COMMON_DATASETS");
		ObjectArgList.push("BMX_CF_PLW_CONFIG_L1,BMX_CF_V6_MASTER_DATA,BMX_CF_MASTER_DATA,PROCESSES_COMMON_FILE,_RBS,_CAL,_CWP_BA,_PROG"); 
		ObjectArgList.push("DESC");
		ObjectArgList.push(o_prj.DESC);
		ObjectArgList.push("BMX_AA_B_NEW_PRJ");	
		ObjectArgList.push(true);
		if( o_prj.getinternalvalue("STATE").tostring()!= "TEMPLATE"){	
			ObjectArgList.push("_STA_RA_PRJ_STATUS");	
			ObjectArgList.push("Active");	
		}
		ObjectArgList.push("DATASET_CLASS");	
		ObjectArgList.push("Project");
		ObjectArgList.push("Template");
		ObjectArgList.push(o_prj.printattribute());
		var o_new_prj =  plc.ORDO_PROJECT.MakeOpx2ObjectWithplist(ObjectArglist);
		with(plw.no_locking){o_prj.NAME = o_prj.NAME.replaceregexp("P5_","TREATED_");}
	}
}
save_as_projet.exportfunction();

// batch function to duplicate values
function bmx_batch_migrate_master_data(){
	bmx_migration.bmx_migrate_master_data("BMX_CF_MASTER_DATA");
}
bmx_batch_migrate_master_data.exportfunction();

function bmx_create_all_program_as_project(){
	for(var o_bs1 in plc.1bs where o_bs1.get("IS_A_LEAF")){
		var v_creator = new vector();
		v_creator.setplist("NAME",o_bs1.NAME);
		v_creator.setplist("DESC",o_bs1.DESC);
		v_creator.setplist("DATASET_CLASS","Program");
		v_creator.setplist("BREAKDOWN_1",o_bs1.printattribute());
		v_creator.setplist("COMMON_DATASETS",plw._GlobalSettingsComputeFilesToLInkToProjects().join(","));
		plc.ordo_project.makeopx2objectwithplist(v_creator);
		plw.alert(v_creator);
	}
}

function bmx_migrate_program_project_attribute(){
	for(var o_prj in plc.ordo_project where o_prj.get("BMX_AA_S_PROGRAM")!=""){
		if(plc.1bs.get(o_prj.get("BMX_AA_S_PROGRAM")) instanceof plc.1bs){
			
			with(plw.no_locking){o_prj.BREAKDOWN_1= o_prj.get("BMX_AA_S_PROGRAM");}
			
		}
		else{
			var v_creator = new vector();
			v_creator.setplist("NAME",o_prj.get("BMX_AA_S_PROGRAM"));
			v_creator.setplist("DESC","Empty");
			v_creator.setplist("FILE","BMX_CF_MASTER_DATA");	
			plc.1bs.makeopx2objectwithplist(v_creator);
			plw.alert("issue with program" + o_prj.get("BMX_AA_S_PROGRAM"));
		}

	}
}

// bmx_create_all_program_as_project();
// example of calling 
// with(plw.no_db_recording){
// bmx_copy_resource("BMX_CF_MASTER_DATA","TRUE");
// }

function bmx_copy_escalation(file_dest,res_filter,esc_filter){
	var v_modifier = new vector("FILE",file_dest);
	var c=0;
	var r=0;
	for(var o_esc in plc.exception_value where o_esc.callbooleanformula(esc_filter) == true ){
		c++;
	}
	
	// create mapping table
	var ht_cost_unit_remap = new hashtable("STRING");
	for(var o_cubs_v6 in plc.cost_unit where o_cubs_v6.BMX_AA_N_LAST_ONB_V5>0){
		 var o_cubs_p5 = plc.cost_unit.get(o_cubs_v6.BMX_AA_N_LAST_ONB_V5);
		 // plw.alert("cubs V6 = " + o_cubs_v6);
		 // plw.alert("cubs P5 = " + o_cubs_p5);
		ht_cost_unit_remap.set(o_cubs_p5,o_cubs_v6.printattribute());
	}
	// for(var o in ht_cost_unit_remap){
		// plw.alert(o);
		// plw.alert(ht_cost_unit_remap.get(o));
	// }
	var v_res_copied = new vector();
	// with (plw.monitoring(title: 'Long action', steps: c)){
		for(var o_esc in plc.exception_value where o_esc.callbooleanformula(esc_filter) == true ){
			var other_unit_p5 = o_esc.OTHER_UNIT;
			var unit_p5 = o_esc.UNIT;
			var new_v6_unit =plc.cost_unit.get(ht_cost_unit_remap.get(unit_p5));
			if(new_v6_unit instanceof plc.cost_unit){
				v_modifier.setplist("UNIT",ht_cost_unit_remap.get(unit_p5));	
				var new_other_unit_v6 = plc.cost_unit.get(ht_cost_unit_remap.get(other_unit_p5));
				if(new_other_unit_v6 instanceof plc.cost_unit){
					v_modifier.setplist("OTHER_UNIT",ht_cost_unit_remap.get(other_unit_p5));
					v_modifier.setplist("BMX_AA_N_LAST_ONB_V5",o_esc.ONB);
					//with(plw.no_db_recording){ => Testing purpose only
						var new_o_esc = o_esc.copywithplist(v_modifier);
					//	}
					r ++;
				}else{
					plw.alert("issue with other_unit_p5" +  other_unit_p5);
				}
			}else{
				plw.alert("issue with unit" +  unit_p5);
				plw.alert("No corresponding " +  ht_cost_unit_remap.get(unit_p5));
			}		

		}
	// }
	
	plw.alert(r + "created out of " + c);
}

function bmx_test_migration_cubs(value){
	var ht_cost_unit_remap = new hashtable("OBJECT");
	for(var o_cubs_v6 in plc.cost_unit where o_cubs_v6.BMX_AA_N_LAST_ONB_V5>0){
		 var o_cubs_p5 = plc.COST_UNIT.get(o_cubs_v6.BMX_AA_N_LAST_ONB_V5);
		ht_cost_unit_remap.set(o_cubs_p5,o_cubs_v6);
	}
	
	return ht_cost_unit_remap.get(value);
}	

function bmx_copy_availability(file_dest,res_filter,obj_filter){
	var v_modifier = new vector("FILE",file_dest);
	var c=0;
	var r=0;
	for(var o_mig_obj in plc.avaibility where o_mig_obj.callbooleanformula(obj_filter) == true){
		c++;
	}
	
	// create mapping table
	var ht_res_map = new hashtable("OBJECT");
	for(var o_obj_v6 in plc.Resource where o_obj_v6.BMX_AA_N_LAST_ONB_V5>0){
		 var o_obj_p5 = plc.Resource.get(o_obj_v6.BMX_AA_N_LAST_ONB_V5);
		ht_res_map.set(o_obj_p5,o_obj_v6);
	}

	var v_res_copied = new vector();
	// with (plw.monitoring(title: 'Long action', steps: c)){
		for(var o_mig_obj in plc.avaibility where o_mig_obj.callbooleanformula(obj_filter) == true ){
			var o_res_p5 = o_mig_obj.RESOURCE;
			if(ht_res_map.get(o_res_p5) instanceof plc.Resource){
				v_modifier.setplist("RESOURCE",ht_res_map.get(o_res_p5).printattribute());	
					// with(plw.no_db_recording){ => testing purpose only
						var new_o_esc = o_mig_obj.copywithplist(v_modifier);
					// }
					r ++;
			}else{
				plw.alert("issue with resource" +  o_res_p5);
			}		

		}
	// }
	
	plw.alert(r + "created out of " + c);
}

function bmx_res_update_type(filter){
	
	for(var o_res in OpxResource where o_res.callbooleanformula(filter) == true){
	if (o_res.get("IS_A_LEAF") == true){
	o_res.BMX_RA_RES_TYPE = "Individual";
	}

	if (o_res.get("BMX_UA_B_GENERIC_RES") == true){
	o_res.BMX_RA_RES_TYPE = "Department";
	}
}

	
}

function bmx_migration_post_v6_restore(){
var o_file = plc.common_dataset.get("BMX_CF_MASTER_DATA");
o_file.set("COMMON_FILES","_RBS,_CAL,_PROG,_CWP_BA");
for(var o_prj in plc.ORDO_PROJECT){with ( plw.no_locking ) { o_prj.set("COMMON_FILES","_CAL,_PROG,_CWP_BA,BMX_CF_V6_MASTER_DATA");}}
}
// bmx_migration_post_v6_restore();

function project_status_state_Funding_source(){
	var c=0;
	with(plw.no_alerts){
	for (var o_prj in plc.ORDO_PROJECT where o_prj.DATASET_CLASS.name!="Program" && o_prj.NAME.substring(0,3)!="TP_"){
		plw.writeln("modifiying " + o_prj);
		
		if (o_prj.printattribute("BMX_AA_S_PRJ_STATUS")=="ACTIVE"){
			o_prj._STA_RA_PRJ_STATUS = "Active";
			o_prj.state = "Active";
		}
		if (o_prj.printattribute("BMX_AA_S_PRJ_STATUS")=="CLOSED"){
			o_prj._STA_RA_PRJ_STATUS = "Closed";
			o_prj.state = "Can be consolidated";
		}
		if (o_prj.BMX_UA_B_APPROVED!=true){
			o_prj.BMX_UA_B_APPROVED = true;
		}
		/*Funding sources*/ /*mettre le projet P0918 à la main (virgule au début)*/
		o_prj.BMX_UA_RING_FUNDING_SOURCES = o_prj.BMX_UA_S_LIST_FUNDING_UNIT;
		c++;
	}
	}
	
	plw.alert(c + "project modified");
}

function UPDATE_PROJECT_TEMP_FIELD_P5(){
	
	var c=0;
	for (var prj in plc.ordo_project where prj.BMX_AA_B_NEW_PRJ == true)
	{
		if(prj.printattribute("NAME")!="P5_*"){
		plw.writeln("modifiying " + prj);
		
		/*Principal User*/
		for (var user in plc.opx2_user where user.name == prj.BMX_AA_S_PRINC_CONTACT)
		{
			prj.BMX_UA_USER_PRINCIPAL_CONTACT = user;		
			break;
		}
		/*CODE SAP*/
		prj.BMX_UA_S_ARTICLE_CODE_SAP = prj.BMX_AA_S_SAP_ARTICLE;
		/*UNIT RANKING N+1*/
		prj.BMX_UA_S_UNIT_RANKING_N1 = prj.BMX_AA_N_UNIT_RANK_N1;
		/*UNIT RANKING*/
		if(prj.BMX_AA_N_UNIT_SCORE_RANK.parsenumber() instanceof Number){

			prj._PAC_AA_N_PRIO  = prj.BMX_AA_N_UNIT_SCORE_RANK.parsenumber(); // prio field not filled !!
		}
		prj.BMX_UA_S_UNIT_RANKING = prj.BMX_AA_N_UNIT_SCORE_RANK;
		/*KSS URL Link*/
		prj.BMX_UA_S_KSS_URL_LINK = prj.BMX_AA_S_KSS_LINK;
		/*Project Owner*/
		for (var user2 in plc.opx2_user where user2.LOGIN == prj.BMX_AA_S_OWNER)
		{
			prj.OWNER = user2.NAME;		
			break;
		}
		/*Process*/
		prj.BMX_UA_S_PROCESS = prj.BMX_AA_S_PROCESS;
		c++;
	}
	
	plw.alert(c + "project modified");
	}
}
// UPDATE_PROJECT_TEMP_FIELD_P5();

function UPDATE_RESOURCE_TEMP_FIELD_P5(){
	var c=0;
	with(plw.no_locking){
	for (var res in OpxResource)
	{
		/*Principal User*/
		for (var user in plc.opx2_user where user.name == res.BMX_AA_S_RES_PRINC_CONTACT)
		{
			if(user.internal == false){
			res.BMX_UA_USER_PRINCIPAL_CONTACT = user;		
			break;
			}
		}
		/*Site*/
		res.BMX_UA_S_SITE=res.BMX_AA_S_SITE_P5;
		for (var site in plc._RM_REVIEW_PT_LOCATIONS where site.name == res.BMX_AA_S_SITE_P5)
		{
			res._RM_REVIEW_RA_LOCATION = site;	
			break;
		}
		/*Is Active ?*/
		if(res.BMX_AA_S_RES_IS_ACTIVE!="1"){res.INACTIVE=true;}
		c++;
	}
	}
	plw.alert(c + "Resource modified");
}


function UPDATE_ACTIVE_RESOURCE(){
	for(var o_res in plc.resource where o_res.INACTIVE==true){
		for(var o_child in o_res.get("ELEMENTS")){
			if(o_child.INACTIVE==false){
				o_res.INACTIVE=false;
			}
			
		}
	}
	
}


function UPDATE_PROGRAM_USER_GROUPS_PERMISSION_AND_OWNER(){
	
	var c =0;
	with(plw.no_locking){
	for (var prj in plc.ordo_project where prj.DATASET_CLASS.name=="Program")
	{
		for (var prj2 in plc.ordo_project where prj2.BMX_AA_S_PROGRAM==prj.name){
			/*Accessibility to Program in write mode*/
			if (prj.BMX_AA_S_PROGRAM_RW_ACCESS==""){prj.BMX_AA_S_PROGRAM_RW_ACCESS=prj2.BMX_AA_S_PROGRAM_RW_ACCESS;}
			var list_write_access = prj.BMX_AA_S_PROGRAM_RW_ACCESS.parsevector(",");
			var new_list_write_access = new vector();
			new_list_write_access.push("PRF_ADM");
			for (var log in list_write_access)
			{
				for (var user in plc.opx2_user where log == user.LOGIN)
				{
					new_list_write_access.push(user.NAME);
				}
			}
			new_list_write_access=new_list_write_access.join(",");	
			prj.READ_WRITE_GROUPS=new_list_write_access;
			prj.BMX_UA_S_READ_WRITE_ACCESS_LIST=new_list_write_access;
			c++;
			/*Accessibility to program in read mode*/
			if (prj.BMX_AA_S_PROGRAM_RO_ACCESS==""){prj.BMX_AA_S_PROGRAM_RO_ACCESS=prj2.BMX_AA_S_PROGRAM_RO_ACCESS;}
			if (prj.BMX_AA_S_PROGRAM_CORE_TEAM==""){prj.BMX_AA_S_PROGRAM_CORE_TEAM=prj2.BMX_AA_S_PROGRAM_CORE_TEAM;}
			var list_read_access = prj.BMX_AA_S_PROGRAM_RO_ACCESS.parsevector(",");
			var list_core_team = prj.BMX_AA_S_PROGRAM_CORE_TEAM.parsevector(",");
			list_read_access=list_read_access+list_core_team;
			list_read_access=list_read_access.removeduplicates();
			var new_list_read_access = new vector();
			for (var log2 in list_read_access)
			{
				for (var user2 in plc.opx2_user where log2 == user2.LOGIN)
				{
					new_list_read_access.push(user2.NAME);
				}
			}
			new_list_read_access=new_list_read_access.join(",");	
			prj.BMX_UA_S_READ_ACCESS_LIST=new_list_read_access;
			prj.READ_ONLY_GROUPS=new_list_read_access;
			
			/*Program owner*/
			for (var user in plc.opx2_user where user.CallStringFormula("PRINT_NUMBER(BMX_AA_N_LAST_ONB_V5,\"####\")")== prj2.BMX_AA_S_PROGRAM_DIRECTOR)
			{
				if (user.BMX_AA_N_LAST_ONB_V5>0){prj.OWNER = user.NAME;}
				break;
			}
			/*Principal contact*/
			for (var user2 in plc.opx2_user where user2.name == prj2.BMX_AA_S_PROGRAM_PRINC_CONTACT)
			{
				prj.BMX_UA_USER_PRINCIPAL_CONTACT = user2;		
				break;
			}
			
			break;	
		}
		/*resp*/
		for (var o_bs1 in plc.1bs where o_bs1.name==prj.name)
		{
			with(plw.no_locking){prj.RESP = o_bs1.BMX_UA_S_ENTITY_MIG;}		
			break;
			//plw.alert(o_bs1.BMX_UA_S_ENTITY_MIG);
		}
	}
	
	
	for (var prj in plc.ordo_project where prj.DATASET_CLASS.name=="Program"){
		var owner =  plc.opx2_user.get(prj.printattribute("OWNER").tostring());
		if(owner == undefined){
			prj.OWNER = "INTRANET";
			
		}
	}
	
	plw.alert(c + "project modified");
	}
	
}

function UPDATE_PROJECT_USER_GROUPS_PERMISSION(){
	for (var prj in plc.ordo_project where prj.DATASET_CLASS.name!="Program" && prj.BMX_AA_B_NEW_PRJ == TRUE)
	{
		/*Accessibility to project in write mode*/
		var list_write_access = prj.BMX_AA_S_RW_ACCESS.parsevector(",");
		var new_list_write_access = new vector();
		new_list_write_access.push("PRF_ADM");
		for (var log in list_write_access)
		{
			for (var user in plc.opx2_user where log == user.LOGIN)
			{
				new_list_write_access.push(user.NAME);
			}
		}
		new_list_write_access=new_list_write_access.join(",");	
		prj.READ_WRITE_GROUPS=new_list_write_access;
		prj.BMX_UA_S_READ_WRITE_ACCESS_LIST=new_list_write_access;
		
		/*Accessibility to project in read mode*/
		var list_read_access = prj.BMX_AA_S_RO_ACCESS.parsevector(",");
		var list_project_team = prj.BMX_AA_S_PROJECT_TEAM.parsevector(",");
		list_read_access=list_read_access+list_project_team;
		list_read_access=list_read_access.removeduplicates();
		var new_list_read_access = new vector();
		for (var log2 in list_read_access)
		{
			for (var user2 in plc.opx2_user where log2 == user2.LOGIN)
			{
				new_list_read_access.push(user2.NAME);
			}
		}
		if (prj.NAME.substring(0,3)!="TP_") {new_list_read_access.push(prj.parent.OWNER.toUpperCase());}
		new_list_read_access=new_list_read_access.removeduplicates();
		new_list_read_access=new_list_read_access.join(",");	
		prj.BMX_UA_S_READ_ACCESS_LIST=new_list_read_access;
		prj.READ_ONLY_GROUPS=new_list_read_access;
	}
}

function UPDATE_RESOURCE_MANAGER(){
	
	var upper_level=0;
	for (var res in plc.Resource){
		if (res.LEVEL>upper_level){upper_level=res.LEVEL;}
	}
	
	var res_level=1;
	while(res_level<upper_level+1){
		
		for (var res in plc.Resource where res.LEVEL==res_level){
			var list_write_access = res.BMX_AA_S_RES_WRITE_ACCESS.parsevector(",");
			var list_depart_head = res.BMX_AA_S_RES_DEP_HEAD.parsevector(",");
			list_write_access=list_write_access+list_depart_head;
			list_write_access=list_write_access.removeduplicates();
			var new_list_res_manager = new vector();
			var new_list_depart_head = new vector();
			for (var log in list_write_access)
			{
				for (var user in plc.opx2_user where log == user.LOGIN)
				{
					new_list_res_manager.push(user.NAME);
				}
			}
			for (var log2 in list_depart_head)
			{
				for (var user2 in plc.opx2_user where log2 == user2.LOGIN)
				{
					res.BMX_UA_USER_DEPT_HEAD= user2.printattribute();
					break;
				}
			}
			new_list_res_manager=new_list_res_manager.join(",");
			new_list_depart_head=new_list_depart_head.join(",");
			res.RES_MANAGER =new_list_res_manager;

		}
		
		res_level++;
	}
}

// ne pas oublier d'ajuster les BMX_AA_S_PRJ_GROUP à la main "*-*" !!!!!
function UPDATE_V6_0BS_PRJ_GROUP(){
	var c =0;
	var m = 0;
	for (var prj in plc.ordo_project where prj.BMX_AA_S_PRJ_GROUP!="")
	{
		var prg_group_name = prj.BMX_UA_S_NAME_PRJ_GROUP;
		var prg_group_desc = prj.BMX_UA_S_DESC_PRJ_GROUP;
		var new_prj_group=new vector("NAME",prg_group_name,
									 "DESC",prg_group_desc,
									 "FILE","BMX_CF_MASTER_DATA");	
		
		var o_0bs =  plc.0bs.Get(prg_group_name);
		if (o_0bs instanceof  plc.0bs && o_0bs.internal==false){
			with(plw.no_locking){prj.BREAKDOWN_0=o_0bs;}
			m++;
		}
		else{
			plc.0bs.Makeopx2objectwithplist(new_prj_group);
			c++;
			with(plw.no_locking){prj.BREAKDOWN_0=o_0bs;}
		}
	}
}
// dismiss project group warning
 // namespace _project_group;
// function bmx_pjs_synchronize_project_with_project_group(){return true;}

function UPDATE_PRJ_TEAM(){
	for (var prj in plc.ordo_project where prj.BMX_AA_S_PROJECT_TEAM!="")
	{
		prj.PROJECT_TEAM="";
		var list_project_team = prj.BMX_AA_S_PROJECT_TEAM.parsevector(",");
		var new_list_prj_team = new vector();
		for (var ct in list_project_team)
		{
			for (var user in plc.opx2_user where ct == user.login ){
				new_list_prj_team.push(user.NAME);	
			}	
		}
		new_list_prj_team=new_list_prj_team.join(",");	
		prj.PROJECT_TEAM=new_list_prj_team;	
	}
}

function GENERIC_RES_and_LIST_INDIVIDUALS()
{		
	var modif_res=0;
	for(var o_res in OpxResource where o_res.get("BMX_UA_B_IS_GENERIC_RES") == true){
		o_res.set("BMX_UA_T_ALL_NOM_RES",o_res.get("BMX_UA_S_LIST_INDIVIDUALS"));
		o_res.set("_inf_aa_b_generic_res",true);
		modif_res++;
	}
	
	for(var o_res in OpxResource where o_res.get("IS_A_LEAF") == true){
		if( o_res.printattribute("COST_UNIT").tostring().position("EXT")!=undefined){
			o_res.set("BMX_RA_RES_TYPE","external");
		}else{
			o_res.set("BMX_RA_RES_TYPE","internal");
		}
	}
	
	/*
for(var o_res in OpxResource where o_res.get("IS_A_LEAF") == false){
	if( o_res.LEVEL ==4){
		o_res.set("BMX_RA_RES_TYPE","Sub department");
	}
	if( o_res.LEVEL ==2){
		o_res.set("BMX_RA_RES_TYPE","Global Department");
	}
	if( o_res.LEVEL ==3){
		o_res.set("BMX_RA_RES_TYPE","Department");
	}
}
	*/
	
	return modif_res;
}

// function to clean 6BS remained
// for(var o in selection_get()){withoutlocking{o.delete();}}


function UPDATE_SAP_CODE(){
	for (var o_prj in plc.ordo_project where o_prj.BMX_AA_B_NEW_PRJ == true)
	{
		for (var o_exp in plc.expenditure where o_exp.BMX_AA_SC_SAP_ID.substring(0,3)=="BM-")
		{
			var new_SAP_code=new vector("NAME",o_exp.BMX_AA_SC_SAP_ID,
										"DESC",o_exp.BMX_AA_SC_SAP_DESC,
										"FILE","BMX_CF_MASTER_DATA");
			var o_code = plc.BMX_PT_SAP_CODE.Get(o_exp.BMX_AA_SC_SAP_ID);
			if (o_code instanceof  plc.BMX_PT_SAP_CODE && o_code.internal==false){
				o_exp.BMX_RA_SAP_CODE=o_code;
			}
			else{
				plc.BMX_PT_SAP_CODE.Makeopx2objectwithplist(new_SAP_code);
				o_exp.BMX_RA_SAP_CODE=o_code;
			}
		}
	}
}
// UPDATE_SAP_CODE();



//Flag des projets permanants
/*function FLAG_PERMANANT_PROJECT(){ 
	for (var o_prj in plc.ordo_project where o_prj.breakdown_1.printattribute("breakdown_1") == "Overhead" ) 
	{
		o_prj._WZD_AA_B_PERMANENT = true;
		plw.writeln(o_prj + " flag to permanant");
	}
}*/

//Flag des projets permanants
/*function retrieve_write_read_only_access(){ 
	for (var o_prj in plc.ordo_project) 
	{
		o_prj.BMX_UA_S_READ_ACCESS_LIST=o_prj.READ_ONLY_GROUPS;
		o_prj.BMX_UA_S_READ_WRITE_ACCESS_LIST=o_prj.READ_WRITE_GROUPS;
	}
}*/

function UPDATE_CONTRACT_WORKPACKAGE_READ_ONLY_ACCESS(){
	
	for(var o_cwp in plc.contract_workpackage  where o_cwp.BMX_AA_S_READ_ACCESS!=""){
		for (var user in plc.opx2_user where user.BMX_AA_N_LAST_ONB_V5.tostring("####") == o_cwp.BMX_AA_S_READ_ACCESS && user.BMX_AA_N_LAST_ONB_V5>0)
		{
			o_cwp.BMX_FUNDING_READ_ONLY = user.NAME;		
			break;
		}
	}
}

// UPDATE_CONTRACT_WORKPACKAGE_READ_ONLY_ACCESS();

function UPDATE_ALL_V6_TEMP_FIELD_P5()
{
	
	bmx_migrate_program_project_attribute();
	UPDATE_PROJECT_TEMP_FIELD_P5();
	UPDATE_RESOURCE_TEMP_FIELD_P5();
	UPDATE_PROGRAM_USER_GROUPS_PERMISSION_AND_OWNER();
	UPDATE_PROJECT_USER_GROUPS_PERMISSION();
	UPDATE_RESOURCE_MANAGER();
	UPDATE_V6_0BS_PRJ_GROUP();
	UPDATE_PRJ_TEAM();
	GENERIC_RES_and_LIST_INDIVIDUALS();
	UPDATE_SAP_CODE();
	//FLAG_PERMANANT_PROJECT();
	UPDATE_CONTRACT_WORKPACKAGE_READ_ONLY_ACCESS();
	
	project_status_state_Funding_source();
	
	// launch it several time for all levels quick&dirty
	UPDATE_ACTIVE_RESOURCE();
	UPDATE_ACTIVE_RESOURCE();
	UPDATE_ACTIVE_RESOURCE();
	UPDATE_ACTIVE_RESOURCE();
	UPDATE_ACTIVE_RESOURCE();
}
//UPDATE_ALL_V6_TEMP_FIELD_P5();

function UPDATE_SNE_INTER_PROJECT_LINKS(){
	for (var o_link in plc.constraint where o_link.PA.file!=o_link.SUCC_ACTIVITY.file){
		//plw.alert(o_link.SUCC_ACTIVITY.onb);
		for (var o_activity in plc.work_structure where o_activity.onb==o_link.SUCC_ACTIVITY.onb){
			//plw.alert(o_link.PA.ID);
			//plw.alert(o_activity.BMX_UA_S_PREDECESSOR_ID_INTERLINK);
			o_activity.BMX_UA_S_PREDECESSOR_ID_INTERLINK=o_link.PA.printattribute("ID");
			o_activity.SNE=o_activity.PS;
			//plw.alert("11" + o_activity.id);
			//plw.alert(o_activity.BMX_UA_S_PREDECESSOR_ID_INTERLINK);
			break;
		}
	}
}
//UPDATE_SNE_INTER_PROJECT_LINKS();

function update_single_project_user_groups(prj){
	
	if(prj instanceof plc.ordo_project){
			/*Accessibility to project in write mode*/
		var list_write_access = prj.BMX_AA_S_RW_ACCESS.parsevector(",");
		var new_list_write_access = new vector();
		
		for (var log in list_write_access)
		{
			var user_name = bmx_get_user_by_login(log);
			if (user_name!=false){
				new_list_write_access.push(user_name);
			}

		}
		
		if(new_list_write_access.length!=list_write_access.length){
			plw.alert("Issue with write access on "+ prj);
		}
		
		new_list_write_access.push("PRF_ADM");
		new_list_write_access=new_list_write_access.join(",");	
		// prj.READ_WRITE_GROUPS=new_list_write_access;
		
		/*Accessibility to project in read mode*/
		var list_read_access = prj.BMX_AA_S_RO_ACCESS.parsevector(",");
		var list_project_team = prj.BMX_AA_S_PROJECT_TEAM.parsevector(",");
		list_read_access=list_read_access+list_project_team;
		list_read_access=list_read_access.removeduplicates();
		var new_list_read_access = new vector();
		for (var log2 in list_read_access)
		{
			for (var user2 in plc.opx2_user where log2 == user2.LOGIN)
			{
				new_list_read_access.push(user2.NAME);
			}
		}
		if (prj.NAME.substring(0,3)!="TP_") {new_list_read_access.push(prj.parent.OWNER.toUpperCase());}
		new_list_read_access=new_list_read_access.removeduplicates();
		new_list_read_access=new_list_read_access.join(",");	
		// prj.READ_ONLY_GROUPS=new_list_read_access;
	
	}
}

function bmx_get_user_by_login(login){

	for (var user in plc.opx2_user){
		if(login.tostring() == user.printattribute("LOGIN")){
			return user.NAME;
		}
	}

	plw.writeln("user not found" + login);
	return false;
}

// function to extract all user that doesn't exit in explor but are listed in convergence data on project
function bmx_check_all_project_rights_attributes(){
	var v_result = new vector();
	for(var prj in plc.ordo_project where prj.get("PM_PRJ_FILTER") == true){
		var list_read_access = prj.BMX_AA_S_RO_ACCESS.parsevector(",");
		var list_project_team = prj.BMX_AA_S_RW_ACCESS.parsevector(",");
		var list_write_access = prj.BMX_AA_S_PROJECT_TEAM.parsevector(",");
		
		for (var login in list_write_access){
			if(bmx_get_user_by_login(login) == false && v_result.position(login)==undefined){
				v_result.push(login);
			}
		}
		
		for (var login in list_read_access){
			if(bmx_get_user_by_login(login) == false && v_result.position(login)==undefined){
				v_result.push(login);
			}
		}
		for (var login in list_project_team){
			if(bmx_get_user_by_login(login) == false && v_result.position(login)==undefined){
				v_result.push(login);
			}
		}
	}
	
	plw.alert(v_result.join(","));
}



function bmx_update_all_pe_from_convergence(){
	var c=0;
	for(var o_exp in plc.Expenditure){
		if(o_exp.getinternalvalue("TYPE") == false && o_exp.get("ORIGIN_NUMBER")!="" && o_exp.printattribute("BMX_RA_SAP_CODE")==""){
			with(plw.no_locking){
			var o_initial_pe = plc.Expenditure.get(o_exp.get("ORIGIN_NUMBER"));
			var mig_date =  context.BMX_GS_S_MIGRATION_DATE.parsedate();
			
				if(mig_date instanceof Date && o_initial_pe instanceof plc.Expenditure){
					o_exp.set("DURATION_COMPUTATION", new symbol("FIXED-DATES","KEYWORD"));
					o_exp.ACTIVITY.setinternalvalue("PROGRESS_METHOD",new Symbol("/", "KEYWORD"));
					o_exp.ACTIVITY.EXTND = "Not extendible";
					o_exp.ACTIVITY.setInternalValue("ETC_UPDATE_MODE", new Symbol("MANU", "KEYWORD"));
			
					var ts = o_exp.get("TIME_SYNTHESIS");
					ts.COST_TIMENOW =mig_date;
					ts.PD = mig_date.previous("DAY");
					o_exp.SD = o_initial_pe.SD;
					o_exp.ED = o_initial_pe.ED;
					c++;
					plw.writeln(" updating planned expenditure" + o_exp);
					var v_info= new vector(o_initial_pe.SD,o_initial_pe.ED,o_initial_pe.ACTIVITY.PS,o_initial_pe.ACTIVITY.PF,o_exp.SD,o_exp.ED,ts.PD,o_exp.ACTIVITY.PD);
					o_exp.set("BMX_UA_MIG_INFO_DATES",v_info.join(","));
					
				}
			}
		}
	}
	plw.alert(c +"changed expenditures");
}
// bmx_update_all_pe_from_convergence();


function bmx_get_is_there_actual_from_act(o_exp,o_act){
	if (o_act instanceof plc.work_structure){
		for(var o_inc in  o_act.get("INCURRED-EXPENDITURES")){
			if(o_inc.printattribute("BMX_RA_SAP_CODE") == o_exp.printattribute("BMX_RA_SAP_CODE")){
				return true;
			}
		}
	}
	
	return false;
}

// change for all past expenditures 
function bmx_update_all_pe_without_sap_from_convergence(){
	var a=0;
	var c=0;
	var mig_date =  context.BMX_GS_S_MIGRATION_DATE.parsedate();
	for(var o_exp in plw.selection_get()){
		// var o_exp = plc.Expenditure.get(118677297341);
		if(o_exp instanceof plc.expenditure && o_exp.getinternalvalue("TYPE") == false ){
			with(plw.no_locking){
			// with(plw.no_db_recording){
			var b_is_there_an_actual = bmx_get_is_there_actual_from_act(o_exp,o_exp.ACTIVITY);
			
				if(mig_date instanceof Date){
					o_exp.ACTIVITY.setinternalvalue("PROGRESS_METHOD",new Symbol("/", "KEYWORD"));
					var ts = o_exp.get("TIME_SYNTHESIS");
					if (o_exp.ACTIVITY instanceof plc.Network){bmx_change_progress_all_children(o_exp.ACTIVITY,mig_date);}
					if((b_is_there_an_actual==false && o_exp.printattribute("BMX_RA_SAP_CODE")!="") || o_exp.printattribute("BMX_RA_SAP_CODE")==""){
							if(o_exp.ED< mig_date){
								
							// changing activity set up
								// o_exp.ACTIVITY.EXTND = "Not extendible";
								// o_exp.ACTIVITY.setinternalvalue("PROGRESS_METHOD",new Symbol("/", "KEYWORD"));
								// o_exp.ACTIVITY.setInternalValue("ETC_UPDATE_MODE", new Symbol("MANU", "KEYWORD"));
								
								if (o_exp.ACTIVITY.PF<mig_date){
									if(o_exp.ACTIVITY.AS ==-1 || o_exp.ACTIVITY.AS == undefined){
										o_exp.ACTIVITY.AS= o_exp.ACTIVITY.PS;
										plw.writeln("Changing activity AS : " + o_exp.ACTIVITY);
										a ++;
									}
									o_exp.ACTIVITY.PD =o_exp.ACTIVITY.PF;
								}
									ts.COST_TIMENOW =mig_date;
									ts.PD = mig_date;	

								
								c++;
								plw.writeln(" updating planned expenditure" + o_exp);
							}
					}
					
					
					
				}
			}
			// }
		}
	}
	plw.alert(c +"changed expenditures");
	plw.alert(a +"changed activity");
}
// bmx_update_all_pe_without_sap_from_convergence();


function bmx_get_is_there_expenditure_from_act(o_act){
	if (o_act instanceof plc.work_structure){
		for(var o_inc in  o_act.get("INCURRED-EXPENDITURES")){
			return true;
		}
		
		for(var o_inc in  o_act.get("EXPENDITURES")){
			return true;
		}
	}
	return false;
}

// namespace bmx_migration;
function bmx_update_all_ph_without_actual_from_convergence(){
	var a=0;
	var c=0;
	var mig_date =  context.BMX_GS_S_MIGRATION_DATE.parsedate();

	for(var o_ph in plc.task_alloc){
		// var o_ph = plc.task_alloc.get(118677297341);
		if(o_ph.getinternalvalue("TYPE") == false && o_ph.PROJECT.PM_PRJ_FILTER == true ){
			with(plw.no_locking){
			// with(plw.no_db_recording){

			
			// var b_is_there_pe = bmx_get_is_there_expenditure_from_act(o_ph.ACTIVITY);
			
				if(mig_date instanceof Date){
					
					if(o_ph.ACTIVITY instanceof plc.Task){
						o_ph.ACTIVITY.setinternalvalue("PROGRESS_METHOD",new Symbol("/", "KEYWORD"));
					}else{
						o_ph.ACTIVITY.setinternalvalue("PROGRESS_METHOD",new Symbol("C", "KEYWORD"));
					}
					var ts = o_ph.get("TIME_SYNTHESIS");
					
					if(o_ph.FD< mig_date){
							
					// changing activity set up
						o_ph.ACTIVITY.EXTND = "Not extendible";
						o_ph.ACTIVITY.setinternalvalue("ETC_UPDATE_MODE", new Symbol("MANU", "KEYWORD"));
						
						if (o_ph.ACTIVITY.PF<mig_date){
							if(o_ph.ACTIVITY.AS ==-1 || o_ph.ACTIVITY.AS == undefined){
								o_ph.ACTIVITY.AS= o_ph.ACTIVITY.PS;
								plw.writeln("Changing activity AS : " + o_ph.ACTIVITY);
								a ++;
							}
							
						}
							ts.COST_TIMENOW =mig_date;
							ts.PD = mig_date;	

						
						c++;
						plw.writeln(" updating planned hours" + o_ph);
						
					}

				}
			// }
			}

		}
	}
	plw.alert(c +"changed hours");
	plw.alert(a +"changed activity");
}

// bmx_update_all_ph_without_actual_from_convergence();


function bmx_check_cost_account_parent(){
	for(var o_cbs in plc.CBS_NODE ){
		if(o_cbs.BMX_AA_N_LAST_ONB_V5>0 && o_cbs.printattribute("FILE")=="BMX_CF_MASTER_DATA"){
			var p5_cbs = plc.CBS_NODE.get(o_cbs.BMX_AA_N_LAST_ONB_V5);
			
			if(p5_cbs instanceof plc.CBS_NODE){
				if(o_cbs.COST_ACCOUNT.printattribute("NAME")!=p5_cbs.COST_ACCOUNT.printattribute("NAME")){
					plw.alert("P5 object "+ p5_cbs);
					plw.alert("V6 object "+ o_cbs);
					
					plw.alert("issue with " + o_cbs + "parent  :"  + o_cbs.printattribute("COST_ACCOUNT") +"P 5 parent :"+ p5_cbs.printattribute("COST_ACCOUNT"));
				}
			}
		}
	}
}


function bmx_check_cost_unit_resource(){
	for(var o_res in plc.Resource ){
		if(o_res.BMX_AA_N_LAST_ONB_V5>0 && o_res.printattribute("FILE")=="BMX_CF_MASTER_DATA"){
			var p5_res = plc.Resource.get(o_res.BMX_AA_N_LAST_ONB_V5);
			
			if(o_res instanceof plc.Resource){
				if(o_res.COST_UNIT.printattribute("NAME")!=p5_res.COST_UNIT.printattribute("NAME")){
					plw.alert("P5 object "+ p5_res);
					plw.alert("V6 object "+ o_res);
					
					plw.alert("issue with " + o_res + "unit  :"  + o_res.printattribute("COST_UNIT") +"P5 unit :"+ p5_res.printattribute("COST_UNIT"));
				}
			}
		}
	}
}
// bmx_check_cost_account_parent();




// UPDATE_V6_0BS_PRJ_GROUP();
function UPDATE_V6_0BS_PRJ_GROUP(){
	for (var prj in plc.ordo_project where prj.BMX_AA_S_PRJ_GROUP!="")
	{
		var prg_group_name = prj.BMX_UA_S_NAME_PRJ_GROUP;
		var prg_group_desc = prj.BMX_UA_S_DESC_PRJ_GROUP;
		var new_prj_group=new vector("NAME",prg_group_name,
									 "DESC",prg_group_desc,
									 "FILE","BMX_CF_MASTER_DATA");	
		
		var o_0bs =  plc.0bs.Get(prg_group_name);
		if (o_0bs instanceof  plc.0bs && o_0bs.internal==false){
			with(plw.no_locking){prj.BREAKDOWN_0=o_0bs;}
		}
		else{
			plc.0bs.Makeopx2objectwithplist(new_prj_group);
			with(plw.no_locking){prj.BREAKDOWN_0=o_0bs;}
		}
	}
}

// to be called at the very end...

function bmx_create_all_project_groups_as_project(){
	var c=0;
	for(var o_bs0 in plc.0bs where o_bs0.get("IS_A_LEAF")){
		if (c<400){
		var v_creator = new vector();
		v_creator.setplist("NAME",o_bs0.NAME.replaceregexp(" ","_").replaceregexp(":","_"));
		v_creator.setplist("DESC",o_bs0.DESC);
		v_creator.setplist("DATASET_CLASS","Product");
		v_creator.setplist("BREAKDOWN_0",o_bs0.printattribute());
		v_creator.setplist("READ_WRITE_GROUPS",context.BMX_GS_DEF_RW_PRODUCT);
		v_creator.setplist("COMMON_DATASETS",plw._GlobalSettingsComputeFilesToLInkToProjects().join(","));
			if(plc.ordo_project.get(o_bs0.NAME) == undefined){
				plc.ordo_project.makeopx2objectwithplist(v_creator);
				// plw.alert(v_creator);
				c++;
			}
		}
	}
}
// bmx_create_all_project_groups_as_project();
// to be used also with
// namespace _project_group;
// bmx_synchronize_all_project_groups_from_project();
 namespace bmx_migration;
function bmx_move_all_master_data_to_file(file){
/*
	for(var o in plc.__USER_TABLE_BMX_UT_PLATFORM_LCM){
		o.set("FILE",file);
	}

	for(var o in plc.BMX_PT_SAP_COST_CENTER){
		o.set("FILE",file);
	}
	for(var o in plc.OBS_Node){
		o.set("FILE",file);
	}
	
	for(var o in plc.__USER_TABLE_BMX_UT_PROCESS_TYPE){
		o.set("FILE",file);
	}
	
	for(var o in plc.__USER_TABLE_BMX_UT_INNOVATION_TYPE){
		o.set("FILE",file);
	}
		
	for(var o in plc.WBS_TYPE){
		o.set("FILE",file);
	}	
	*/
	for(var o in plc.7bs){
		o.set("FILE",file);
	}

	return true;
}
// bmx_move_all_master_data_to_file("BMX_CF_MASTER_DATA");
// bmx_move_all_master_data_to_file("BMX_CF_MASTER_DATA");
// bmx_move_all_master_data_to_file("BMX_CF_MASTER_DATA");
// 3 times and then you rince, you rince ....
// then play : BMX_DMR_PRODUCT_PORT_CATEG

function bmx_change_progress_all_children(o_act,date){
	with(o_act.fromobject()){
	for(var o_child in plc.task){
		// plw.alert(o_child);
		o_child.PD = date;	
	}
	
	for(var o_child in plc.Network){
		// plw.alert(o_child);
		o_child.PD = date;	
	}
	}
}


function bmx_update_all_ph_without_actual_from_convergence_on_selection(){
	var a=0;
	var b=0;
	var c=0;
	var d=0;
	var mig_date =  context.BMX_GS_S_MIGRATION_DATE.parsedate();

	for(var o_ph in plw.selection_get()){
	// for(var o_ph in plc.task_alloc){
		if( o_ph instanceof plc.task_alloc){
			if(o_ph.getinternalvalue("TYPE") == false){
				with(plw.no_locking){
				// with(plw.no_db_recording){
				
				if (o_ph.SD !=o_ph.BMX_AA_MIG_SD){
					o_ph.set("DURATION_COMPUTATION", new symbol("FIXED-DATES","KEYWORD"));
					o_ph.SD = o_ph.BMX_AA_MIG_SD;
					d++;
				}
				// date correction
				if (o_ph.FD !=o_ph.BMX_AA_MIG_FD){
					o_ph.set("DURATION_COMPUTATION", new symbol("FIXED-DATES","KEYWORD"));
					o_ph.FD = o_ph.BMX_AA_MIG_FD;
					d++;
				}	

				if(mig_date instanceof Date){
					var ts = o_ph.get("TIME_SYNTHESIS");
					// case where activity is finished
						if(o_ph.FD< mig_date.next("DAY") && o_ph.get("ETC_EUR")!=0){

							// ts.ACTIVITY.PD = o_ph.ACTIVITY.PF;
							o_ph.REMAINING_LOAD =0;
							// plw.alert(o_ph);
							c++;
							if(ts.ACTIVITY.AS==-1){	
								o_ph.ACTIVITY.AS = o_ph.ACTIVITY.PS;
								}
							if(o_ph.FD<  mig_date.next("DAY")  && o_ph.ACTIVITY.PD< o_ph.FD){
								o_ph.ACTIVITY.PD = o_ph.FD;
								// plw.alert(o_ph.FD);
								// plw.alert(o_ph.ACTIVITY.PD);
							}
							o_ph.ACTIVITY.setinternalvalue("PROGRESS_METHOD",new Symbol("/", "KEYWORD"));	// could also be a network
							if(o_ph.ACTIVITY instanceof plc.Network){
								// plw.alert("network issue");
								bmx_change_progress_all_children(o_ph.ACTIVITY,o_ph.FD);
							}
														
							ts.COST_TIMENOW =o_ph.ACTIVITY.PF;
							ts.PD = o_ph.ACTIVITY.PF;
						}
						
					// case where activity is in progress
						if(o_ph.SD<mig_date && o_ph.FD>mig_date  ){
							o_ph.ACTIVITY.setinternalvalue("PROGRESS_METHOD",new Symbol("/", "KEYWORD"));	// could also be a network
							ts.COST_TIMENOW =mig_date;
							ts.PD = mig_date;
							o_ph.ACTIVITY.PD = mig_date;
							if(o_ph.REMAINING_LOAD != o_ph.BMX_AA_N_MIG_REM_LOAD){
								o_ph.REMAINING_LOAD = o_ph.BMX_AA_N_MIG_REM_LOAD;
								plw.alert(o_ph.REMAINING_LOAD);
							}
							// plw.alert(ts.PD);
							
							a++;
						}
						
					// case of future activity with a remaining load issue
						if(o_ph.SD>mig_date && o_ph.REMAINING_LOAD != o_ph.BMX_AA_N_MIG_REM_LOAD){
							o_ph.ACTIVITY.setinternalvalue("PROGRESS_METHOD",new Symbol("/", "KEYWORD"));	// could also be a network
							// ts.COST_TIMENOW =mig_date;
							ts.PD = mig_date;
							o_ph.REMAINING_LOAD = o_ph.BMX_AA_N_MIG_REM_LOAD;
							b++;
						}

				}
				// } // without db recording
				} 

			}
		}
	}
	
	
	plw.alert(c +" past changed hours");
	plw.alert(a+" on going ph changed");
	plw.alert(b+" future ph changed");
	plw.alert(d+" dates ph changed");
}
// bmx_update_all_ph_without_actual_from_convergence_on_selection();



// bmx_move_all_master_data_to_file("BMX_CF_MASTER_DATA");

/*
function migration_for_planned_start(){

    var counter = 0;    
for (var prj in OpxProject where prj.PM_PRJ_FILTER == true)counter ++;

for (var prj in OpxProject where prj.PM_PRJ_FILTER == true && prj.printattribute("DATASET_CLASS") == "Project")
{

    withmonitoring(counter)
    {
		var parent_project = prj.PARENT_PROJECT;
		prj.PARENT_PROJECT = "";
		prj.cost_version=prj.cost_version+1;
		"recomputing dates".monitor(counter,1,2); 
		lispcall "ORDO-MANAGER::project-recompute-dates" (new vector(prj)); 
		prj.PARENT_PROJECT = prj.BREAKDOWN_1.printattribute();
		prj.cost_version=prj.cost_version+1;
		lispcall "ORDO-MANAGER::project-recompute-dates" (new vector(prj)); 
	}
}
}
migration_for_planned_start();

*/


plw.writeln("$CVSHeader: customers/Biomerieux_Explor/bmx_pjs_migration_tools.pjs,v 3.60 2020/12/07 16:07:36 vfraize Exp $");
 
//* -*- Mode: pjs -*- *****************************************************
//  COPYRIGHT (C) PLANISWARE $Date: 2020/03/16 15:02:38 $                                            
//                                                                          
//  All Rights Reserved                                                     
// 
//  This program and the information contained herein are confidential to
//  and the property of PLANISWARE and are made available only to PLANISWARE
//  employees for the sole purpose of conducting PLANISWARE business.
// 
//  This program and copy therof and the information contained herein shall
//  be maintained in strictest confidence ; shall not be copied in whole or
//  in part except as authorized by the employee's manager ; and shall not
//  be disclosed or distributed (a) to persons who are not PLANISWARE employees,
//  or (b) to PLANISWARE employees for whom such information is not necessary in
//  connection with their assigned responsabilities.
// 
//  There shall be no exceptions to the terms and conditions set forth
//  herein except as authorized in writing by the responsible PLANISWARE General
//  Manager.
//
// 
//  FILE    : $RCSfile: bmx_pjs_pac_log_stagegate_activity.pjs,v $
// 
//  AUTHOR  : $Author: vfraize $
// 
//  VERSION : $Id: bmx_pjs_pac_log_stagegate_activity.pjs,v 3.8 2020/03/16 15:02:38 vfraize Exp $
// 
//  PURPOSE :
// 
//  HISTORY :
//  Log : https://cvs.planisware.com/viewvc/customers/Biomerieux_Explor/bmx_pjs_pac_log_stagegate_activity.pjs?view=log
//**************************************************************************
namespace bmx_stage_gate;

method bmx_pac_trace_log_on_gate_status on plc.work_structure(){
var previous_value_dyn = this.get("_SOC_DYN_GATE_STATUS");

this.set("_SOC_DYN_GATE_STATUS",this._PAC_AA_S_APPROVAL_STATUS);

var currentProject = this.PROJECT;
var default_value = "N/A"; // debug session 13/09
if (previous_value_dyn!="" && previous_value_dyn!=undefined){
	default_value = previous_value_dyn.tostring();
}

this.set("_SOC_DYN_GATE_STATUS_NOTEPAD", this.printattribute()  +  " status has been changed from  : " + default_value  + "  to : " + this._PAC_AA_S_APPROVAL_STATUS + " by " + context.applet.USER.DESC  + "  the " + new date() + context.CallStringFormula("GET_CHAR(10)")  + this.NOTE_PAD);
// next phase is : 
bmx_pac_update_shares_with_mee_category(currentProject);

plw.writeln("applying the bmx pac trace log");
}

//call by alert triggered when a gate is passed or unpassed (= act._PM_DA_B_GATE_IS_CROSSED modified)
method bmx_pac_trace_log_and_baseline_gate_passed on plc.work_structure()
{
	var currentProject = this.PROJECT;
	var text_passed =  " Gate has been set to unpassed by ";
	var actual_start_text =  "Actual start has been removed" ;
	
	var gate_ref_text = "";
	if (this._PM_DA_B_GATE_IS_CROSSED == false)
	{
		text_passed =  " Gate has been passed  by ";
		actual_start_text =   + "Actual start has been set to : " + this.PS;
		
		if (this.wbs_type._PAC_AA_B_GATE_BASELINE == true)
		{
			plw.Pac_Reference("GATE_REFERENCE",this);
			gate_ref_text = "Creation of a baseline : " + this.wbs_type.get("BMX_UA_BASELINE_NAME") + context.CallStringFormula("GET_CHAR(10)");
			// withoutalerts this._PM_DA_B_GATE_IS_CROSSED = true ;
	
		}
	}

// handling next phase field
	var Next_Phase = plw.Get_Next_Phase(currentProject,this);	
	if(Next_Phase != undefined){
	  currentProject.set("_PAC_AA_S_CURRENT_OK_PHA",Next_Phase.get("DESC"));
	}	
	
	this.set("_SOC_DYN_GATE_PASSED_NOTEPAD",this.printattribute()  + text_passed + context.applet.USER.DESC + "  the " + new date() + context.CallStringFormula("GET_CHAR(10)") + actual_start_text + context.CallStringFormula("GET_CHAR(10)") + gate_ref_text + this.NOTE_PAD);
	bmx_pac_update_shares_with_mee_category(currentProject);
	plw.writeln("applying the bmx pac trace log");
}




method bmx_pac_trace_log_on_gate_passed on plc.work_structure(){
var currentProject = this.PROJECT;
var text_passed =  " Gate has been passed  by ";
var actual_start_text =   + "Actual start has been set to : " + this.AS;
if (this._PM_DA_B_GATE_IS_CROSSED == false){
	text_passed =  " Gate has been set to unpassed by ";
	actual_start_text =  "Actual start has been removed" ;
}
this.set("_SOC_DYN_GATE_PASSED_NOTEPAD",this.printattribute()  + text_passed + context.applet.USER.DESC + "  the " + new date() + context.CallStringFormula("GET_CHAR(10)") + actual_start_text + context.CallStringFormula("GET_CHAR(10)") + this.NOTE_PAD);

bmx_pac_update_shares_with_mee_category(currentProject);

plw.writeln("applying the bmx pac trace log");
}

// update all the shares of a project to have a meeting category
function bmx_pac_update_shares_with_mee_category(currentProject){
	if(currentProject instanceof plc.ORDO_PROJECT){
		for(var act in currentProject._PAC_DR_PROJECT_PHASES_AND_GATES){
			for(var share in act.get(new symbol("OBJECT-SHARES","KEYWORD"))){
			// following is based on the fact that there is STATUS_REPORT and and MEETING_CATEGORY with the same ID !! GATE_STATUS
			var status_rep = share.printattribute("_SOC_RA_STATUS_REPORT");
			var mee_cat = plc._MEE_PT_CATEGORY.get(status_rep);
				if(mee_cat instanceof plc._MEE_PT_CATEGORY){
					share._MEE_RA_CATEGORY =share.printattribute("_SOC_RA_STATUS_REPORT");
				}
			}	

		}
	}

}


plw.writeln("$CVSHeader: customers/Biomerieux_Explor/bmx_pjs_pac_log_stagegate_activity.pjs,v 3.8 2020/03/16 15:02:38 vfraize Exp $"); 
//* -*- Mode: pjs -*- *****************************************************
//  COPYRIGHT (C) PLANISWARE $Date: 2019/10/30 08:45:59 $                                            
//                                                                          
//  All Rights Reserved                                                     
// 
//  This program and the information contained herein are confidential to
//  and the property of PLANISWARE and are made available only to PLANISWARE
//  employees for the sole purpose of conducting PLANISWARE business.
// 
//  This program and copy therof and the information contained herein shall
//  be maintained in strictest confidence ; shall not be copied in whole or
//  in part except as authorized by the employee's manager ; and shall not
//  be disclosed or distributed (a) to persons who are not PLANISWARE employees,
//  or (b) to PLANISWARE employees for whom such information is not necessary in
//  connection with their assigned responsabilities.
// 
//  There shall be no exceptions to the terms and conditions set forth
//  herein except as authorized in writing by the responsible PLANISWARE General
//  Manager.
//
// 
//  FILE    : $RCSfile: bmx_ojs_pm_color_feature.pjs,v $
// 
//  AUTHOR  : $Author: vfraize $
// 
//  VERSION : $Id: bmx_ojs_pm_color_feature.pjs,v 3.1 2019/10/30 08:45:59 vfraize Exp $
// 
//  PURPOSE :
// 
//  HISTORY :
//  Log : https://cvs.planisware.com/viewvc/customers/Biomerieux_Explor/bmx_ojs_pm_color_feature.pjs?view=log
//**************************************************************************
namespace bmx_color_handlder;
function bmx_color_feature_on_desc(Field){
	if(Field instanceof ObjectAttribute){
	var FieldName = Field.Descriptor.NAME;
	if(this instanceOf plc.Workstructure && FieldName == new symbol("COMMENT", "KEYWORD") ){ 
		if(this.get("BMX_UA_B_FORCE_ACTIVITY_COLOR") == true){
			return plw.color(this.get("INF_DA_FINAL_COLOR"));
		}else{
			return false;
		}	
	}
	}
	return false;
}
	

function bmx_color_gantt(Gantt){
	
	Gantt.addcolorhandler(bmx_color_handlder.bmx_color_feature_on_desc);
}


plw._Utils_Gantt_Display_Method.addWrapperAfter(bmx_color_handlder.bmx_color_gantt); 
//* -*- Mode: pjs -*- *****************************************************
//  COPYRIGHT (C) PLANISWARE $Date: 2020/10/06 12:57:28 $                                            
//                                                                          
//  All Rights Reserved                                                     
// 
//  This program and the information contained herein are confidential to
//  and the property of PLANISWARE and are made available only to PLANISWARE
//  employees for the sole purpose of conducting PLANISWARE business.
// 
//  This program and copy therof and the information contained herein shall
//  be maintained in strictest confidence ; shall not be copied in whole or
//  in part except as authorized by the employee's manager ; and shall not
//  be disclosed or distributed (a) to persons who are not PLANISWARE employees,
//  or (b) to PLANISWARE employees for whom such information is not necessary in
//  connection with their assigned responsabilities.
// 
//  There shall be no exceptions to the terms and conditions set forth
//  herein except as authorized in writing by the responsible PLANISWARE General
//  Manager.
//
// 
//  FILE    : $RCSfile: bmx_pjs_prism_clickhandler.pjs,v $
// 
//  AUTHOR  : $Author: vfraize $
// 
//  VERSION : $Id: bmx_pjs_prism_clickhandler.pjs,v 3.1 2020/10/06 12:57:28 vfraize Exp $
// 
//  PURPOSE :
// 
//  HISTORY :
//  Log : https://cvs.planisware.com/viewvc/customers/Biomerieux_Explor/bmx_pjs_prism_clickhandler.pjs?view=log
//**************************************************************************
namespace _bmx_impex;

function bmx_js_download_doc(doc){
    if (doc instanceOf plc.IMPEX_EVENT) {
		doc = doc._IMPEX_DF_UPLOADED_FILE;
	}

	if (doc!="" && doc!=false){
	//Open document
	doc.CallMacro("OPEN-DOCUMENT");
	return true;
	}
}

function bmx_js_direct_download_document(slot){
	var doc = this;
    return bmx_js_download_doc(doc);
}

function bmx_js_generate_download_clickhandler(){
	var docPrefix = plc.IMPEX_EVENT.comment.messagestring();
	var docPrefix2 = plc.IMPEX_EVENT.representation.messagestring();
	var plc.symbolicField doc_download_symbField = plc.symbolicField.get(docPrefix+"._INF_SF_OPEN_ALL_CLASS");
	if(! (doc_download_symbField InstanceOf plc.symbolicfield) ) {
		doc_download_symbField = plc.symbolicField.get(docPrefix2+"._INF_SF_OPEN_ALL_CLASS");
	}
	if (doc_download_symbField instanceof plc.symbolicField) {
		with(plw.no_locking) {
			doc_download_symbField.addClickHandler(bmx_js_direct_download_document);
		}
	}
}
plw.addWrapperFunction(plw.InitializeIntranetAfterWrapper, bmx_js_generate_download_clickhandler);

plw.writeln("$CVSHeader: customers/Biomerieux_Explor/bmx_pjs_prism_clickhandler.pjs,v 3.1 2020/10/06 12:57:28 vfraize Exp $"); 
//* -*- Mode: pjs -*- *****************************************************
//  COPYRIGHT (C) PLANISWARE $Date: 2020/10/20 14:54:28 $                                            
//                                                                          
//  All Rights Reserved                                                     
// 
//  This program and the information contained herein are confidential to
//  and the property of PLANISWARE and are made available only to PLANISWARE
//  employees for the sole purpose of conducting PLANISWARE business.
// 
//  This program and copy therof and the information contained herein shall
//  be maintained in strictest confidence ; shall not be copied in whole or
//  in part except as authorized by the employee's manager ; and shall not
//  be disclosed or distributed (a) to persons who are not PLANISWARE employees,
//  or (b) to PLANISWARE employees for whom such information is not necessary in
//  connection with their assigned responsabilities.
// 
//  There shall be no exceptions to the terms and conditions set forth
//  herein except as authorized in writing by the responsible PLANISWARE General
//  Manager.
//
// 
//  FILE    : $RCSfile: bmx_pjs_risk_adjustement.pjs,v $
// 
//  AUTHOR  : $Author: vfraize $
// 
//  VERSION : $Id: bmx_pjs_risk_adjustement.pjs,v 3.9 2020/10/20 14:54:28 vfraize Exp $
// 
//  PURPOSE :
// 
//  HISTORY :
//  Log : https://cvs.planisware.com/viewvc/customers/Biomerieux_Explor/bmx_pjs_risk_adjustement.pjs?view=log
//**************************************************************************
namespace bmx_risks;

function bmx_get_proba_lvl_from_riks(o_risk,type){
	if(o_risk instanceof plc._wf_pt_risks){
		var number proba = math.round( o_risk._WF_AA_N_RISK_OCC_PROBA*100 );
		var plc._risk_pt_risk_range_proba range_proba = riskMod.risk_get_current_range_proba( type, proba );

		if(range_proba instanceof plc._risk_pt_risk_range_proba){
			return range_proba;
		}
	}
	return false;
}

function risk_range_proba_reader(){
	
	var type = new symbol( "RISK", "KEYWORD");
	type = ( type in [ #RISK#, #OPP# ] )? type : #RISK#;
	
	if(this instanceof plc._wf_pt_risks){
		var proba = bmx_get_proba_lvl_from_riks(this,type);
		return proba.printattribute();
	}
	
	return "";	
	
}

function risk_range_proba_modifier(value){
	
return false;	
}

function risk_proba_level_reader(){

	if(this.printattribute("BMX_UA_O_RANGE_PROBA_INPUT")== "" ){
		var type = new symbol( "RISK", "KEYWORD");
		type = ( type in [ #RISK#, #OPP# ] )? type : #RISK#;
		return bmx_get_proba_lvl_from_riks(this,type);
		
	}else {
		if(this.get("BMX_UA_B_USE_RESIDUAL_RISK") == false){	
			return this.get("BMX_UA_O_RANGE_PROBA_INPUT");
		}else{
			var type = new symbol( "RISK", "KEYWORD");
			type = ( type in [ #RISK#, #OPP# ] )? type : #RISK#;
			return bmx_get_proba_lvl_from_riks(this,type);
		}
		
	}
}

function risk_proba_level_modifier(value){	
	this.set("BMX_UA_O_RANGE_PROBA_INPUT",value);
}

function risk_res_delay_impact_reader(){
	
	if(this.get("BMX_UA_B_USE_RESIDUAL_RISK") == false){
		
		return this.get("MC_AA_D_DELAY_IMPACT");
	}else{
		return this.get("BMX_AA_U_RES_IMPACT");
	}
	
	
}
function risk_res_delay_impact_modifier(value){

	if (value instanceof Integer){
		
		this.set("MC_AA_D_DELAY_IMPACT",value);
		this.set("BMX_AA_U_RES_IMPACT",value);
	}
}

function risk_ini_delay_impact_reader(){
	
	if(this.get("BMX_UA_B_USE_RESIDUAL_RISK") == false){
		
		return this.get("MC_AA_D_DELAY_IMPACT");
	}else{
		return this.get("BMX_AA_U_INI_IMPACT");
	}
	
	
}

function risk_ini_delay_impact_modifier(value){

	if (value instanceof Integer){
		
		this.set("BMX_AA_U_INI_IMPACT",value);
	}
}

function risk_res_delay_impact_locker(){
	if(this.get("BMX_UA_B_USE_RESIDUAL_RISK")){
		return false;
		
	}else{
		return true;
	}
}

function risk_proba_level_locker(){

	if(this.get("BMX_UA_B_USE_RESIDUAL_RISK") == true){
		return true;
		
	}else{
		return false;
	}
	
}

function risk_top_5_monthly_reader(){
	var o_risk = this;
	var o_prj = o_risk.FILE;
	var total_risk_displayed = 5;
	var c=1;
	var v_result= new vector();
	if (o_prj instanceof plc.ordo_project){
		
		if(plw.gettemporaryobject("top_risk",o_prj)==undefined){
		
			with(o_prj.fromobject()){
				for(var o_prj_risk in plc._wf_pt_risks where o_prj_risk.get("BMX_UA_B_DISPLAY_MONTHLY_REPORT") == true order by [['INVERSE','BMX_UA_N_RISK_INDEX']]){
					if(c>total_risk_displayed){ break;}
					c++;
					v_result.push(o_prj_risk);
				}
				
			}
			
			v_result.storetemporaryobject("top_risk",o_prj);
		}
		v_result = plw.gettemporaryobject("top_risk",o_prj);
		if(v_result.position(o_risk)!=undefined){
			return true;
		}

	}
	return false;
}

function risk_top_5_monthly_modifier(value){
	
	return false;
}


function risk_current_range_proba_dyn_att(){
	
  var objectattribute slot = plw.dynamicField_generate(  plc._wf_pt_risks, #STRING#,
						   #BMX_DA_S_RISK_RANGE_PROBA#,"Probability level (based on proba)",
						   function(){ return risk_range_proba_reader(); },
						   function( val ){risk_range_proba_modifier( val );});
  slot.initializer =  function( val ){risk_range_proba_modifier( val );};
  
  var objectattribute slot2 = plw.dynamicField_generate( plc._wf_pt_risks, plc._risk_pt_risk_range_proba,
						   #BMX_DA_S_RISK_PROBA_INPUT#,"Probability Level",
						   function(){ return risk_proba_level_reader(); },
						   function( val ){risk_proba_level_modifier( val );});
  slot2.initializer =  function( val ){risk_proba_level_modifier( val );};
  slot2.locker =  function(){return risk_proba_level_locker();};
  slot2.hiddeninintranetserver = false;
  
 
  var objectattribute slot3 = plw.dynamicField_generate( plc._wf_pt_risks, #DURATION#,
						   #BMX_DA_U_RES_DELAY_IMPACT#,"Residual Delay impact",
						   function(){ return risk_res_delay_impact_reader(); },
						   function( val ){risk_res_delay_impact_modifier( val );});
  slot3.initializer =  function( val ){risk_res_delay_impact_modifier( val );};
  slot3.hiddeninintranetserver = false; 
  slot3.locker   = function () {return  risk_res_delay_impact_locker();};
 
  var objectattribute slot4 = plw.dynamicField_generate( plc._wf_pt_risks, #DURATION#,
						   #BMX_DA_U_INI_DELAY_IMPACT#,"Initial Delay impact",
						   function(){ return risk_ini_delay_impact_reader(); },
						   function( val ){risk_ini_delay_impact_modifier( val );});
  slot4.initializer =  function( val ){risk_ini_delay_impact_modifier( val );};
  slot4.hiddeninintranetserver = false;  
  slot4.locker   = function () {return  risk_res_delay_impact_locker();};
  
  var objectattribute slot5 = plw.dynamicField_generate( plc._wf_pt_risks, #BOOLEAN#,
						   #BMX_DA_B_TOP_MONTHLY#,"Top 5 Risks",
						   function(){ return risk_top_5_monthly_reader(); },
						   function( val ){risk_top_5_monthly_modifier( val );});
  slot5.initializer =  function( val ){risk_top_5_monthly_modifier( val );};
  slot5.hiddeninintranetserver = true;  

 
  
}
risk_current_range_proba_dyn_att();




/* used to be in the pop up for risk*/
// updatePossibleValues();
// StoreTeamMemberProject();
// SetLevelOneActivityOnIssueCreation(true);

plw.writeln("$CVSHeader: customers/Biomerieux_Explor/bmx_pjs_risk_adjustement.pjs,v 3.9 2020/10/20 14:54:28 vfraize Exp $"); 
//* -*- Mode: pjs -*- *****************************************************
//  COPYRIGHT (C) PLANISWARE $Date: 2021/04/07 10:16:25 $                                            
//                                                                          
//  All Rights Reserved                                                     
// 
//  This program and the information contained herein are confidential to
//  and the property of PLANISWARE and are made available only to PLANISWARE
//  employees for the sole purpose of conducting PLANISWARE business.
// 
//  This program and copy therof and the information contained herein shall
//  be maintained in strictest confidence ; shall not be copied in whole or
//  in part except as authorized by the employee's manager ; and shall not
//  be disclosed or distributed (a) to persons who are not PLANISWARE employees,
//  or (b) to PLANISWARE employees for whom such information is not necessary in
//  connection with their assigned responsabilities.
// 
//  There shall be no exceptions to the terms and conditions set forth
//  herein except as authorized in writing by the responsible PLANISWARE General
//  Manager.
//
// 
//  FILE    : $RCSfile: bmx_pjs_rm_review_home_relations.pjs,v $
// 
//  AUTHOR  : $Author: ctrepied $
// 
//  VERSION : $Id: bmx_pjs_rm_review_home_relations.pjs,v 3.2 2021/04/07 10:16:25 ctrepied Exp $
// 
//  PURPOSE :
// 
//  HISTORY :
//  Log : https://cvs.planisware.com/viewvc/customers/Biomerieux_Explor/bmx_pjs_rm_review_home_relations.pjs?view=log
//**************************************************************************
namespace _bmx_rm_review;

// correction for 102895
//Map the compact view managed by a RM in a given project
function bmx_rm_review_js_rm_map_prjt_home(prjt,f,CurrentUser,resManagedCheck,duplicateCheck) {
  if(prjt instanceof plc.ordo_project && resManagedCheck instanceof hashtable && duplicateCheck instanceof hashtable) {
		 with (prjt.fromobject()){
      for(var compView in plc._RM_REVIEW_PT_COMPACT) {
        //First we need to check if we manage the resource and store that call
        var compViewRes = compView._RM_REVIEW_RA_RES;
        //We check if we already know if we manage the resource or if the resource is the internal node
        var resManaged = compViewRes.internal == true ? 1 : resManagedCheck.get(compViewRes,-1);
        if(resManaged == -1) {
          //We test if we manage the resource and update the hashtable
          resManaged = (compViewRes._RM_NF_B_RES_IS_MANAGED && compViewRes._RM_NF_B_DEM_IS_MANAGED) ? 1 : 0;
          resManagedCheck.set(compViewRes,resManaged);
        }
            
        //If we manage the resource resManaged is equal to 1, else 0
        if(resManaged == 1) {
          if(compView._RM_REVIEW_AA_B_REJECTED == false &&
             compView._rm_review_js_res_demand_to_be_treated_by_rm() == true &&
             compView._rm_review_js_res_demand_forwarded_to_others(CurrentUser) == false) {
            f.call(compView);
            duplicateCheck.set(compView,true);
          }
        }
      }
    }
  }
}


//Mapper for compacted views forwarded to a RM
function bmx_rm_review_js_rm_manager_map_enhanced_home(f) {
with(plw.no_dataset_rights_check) {	
  //We start from the current portfolio so that when the portfolio is limited enough it's fast
  var curPortfolio = plc._FF_PT_FAVOR_FILTERS.get(context._FF_AA_S_LIST_NAME);
  var CurrentUser = plw.currentopx2user();
  var duplicateCheck = new hashtable("OBJECT");
  var resManagedCheck = new hashtable("OBJECT");
  var prjtFilterHT = new hashtable("OBJECT");
  if(curPortfolio instanceof plc._FF_PT_FAVOR_FILTERS) {
    for(var proj in curPortfolio) {
      bmx_rm_review_js_rm_map_prjt_home(proj,f,CurrentUser,resManagedCheck,duplicateCheck);
    }
  }else{
    //If there is no portfolio, we use all the projects that are active or consolidable
    for(var proj in plc.ordo_project) {
      if(proj._RM_REVIEW_NF_B_CONSACT == false) {
        bmx_rm_review_js_rm_map_prjt_home(proj,f,CurrentUser,resManagedCheck,duplicateCheck);
      }
    }
  }

  //We add the resource demands forwarded
  if(CurrentUser instanceof plc.opx2_user) {
    //Iterating on compacted views forwarded directly to the user
    for(var NNViewUser in CurrentUser.get(new symbol("r._RM_REVIEW_RA_USER._RM_REVIEW_PT_COMP_USERNN", "KEYWORD"))
          where NNViewUser._RM_REVIEW_AA_S_TYPE == "RECIPIENT") {
      var compView = NNViewUser._RM_REVIEW_RA_COMP;
      if(compView.internal == false && duplicateCheck.get(compView,false) == false) {
        var prjt = compView.PROJECT;
        //We apply the project portfolio filter last because it is slow
        if(compView._RM_REVIEW_AA_B_REJECTED == false &&
           compView._rm_review_js_res_demand_to_be_treated_by_rm() == true &&
           plw._rm_review_js_rm_map_demand_prjt(prjt,prjtFilterHT) == true) {
          f.call(compView);
          duplicateCheck.set(compView,true);
        }
      }
    }

    //Iterating on compacted views forwarded to the user groups
    for(var UserGroup in CurrentUser.get("GROUPS") where UserGroup instanceof plc.USER_GROUP &&
          UserGroup.GROUP instanceof plc.USER_GROUP) {
      for(var NNViewUser in UserGroup.GROUP.get(new symbol("r._RM_REVIEW_RA_USER._RM_REVIEW_PT_COMP_USERNN", "KEYWORD"))
            where NNViewUser._RM_REVIEW_AA_S_TYPE == "RECIPIENT") {
        var compView = NNViewUser._RM_REVIEW_RA_COMP;
        if(compView.internal == false && duplicateCheck.get(compView,false) == false) {
          var prjt = compView.PROJECT;
          if(compView._RM_REVIEW_AA_B_REJECTED == false &&
             compView._rm_review_js_res_demand_to_be_treated_by_rm() == true &&
             plw._rm_review_js_rm_map_demand_prjt(prjt,prjtFilterHT) == true) {
            f.call(compView);
            duplicateCheck.set(compView,true);
          }
        }
      }
    }
  }
  resManagedCheck.delete();
  duplicateCheck.delete();
  prjtFilterHT.delete();
}
}


var demToManagedHome = plc.contextopx2.getSlotByID("BMX_RM_REVIEW_DR_HOME_COMP_VIEW");
if(! (demToManagedHome instanceof ObjectRelation)) {
  demToManagedHome = new ObjectRelation(plc.contextopx2,"BMX_RM_REVIEW_DR_HOME_COMP_VIEW");
 }
demToManagedHome.comment = "BMX Managed Compacted views [Home]";
demToManagedHome.connectedToClass = plc._RM_REVIEW_PT_COMPACT;
demToManagedHome.mapMethod = bmx_rm_review_js_rm_manager_map_enhanced_home;



///////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////
/*
//Mapper for compacted views forwarded to a RM
function bmx_rm_review_js_rm_manager_map_forwarded_home(f) {
	with(plw.no_dataset_rights_check) {	
  var duplicateCheck = new hashtable("OBJECT");
  var prjtFilterHT = new hashtable("OBJECT");
  
  //We get the list of managed resources & the current user
  var CurrentUser = currentopx2user();
  if(CurrentUser instanceof OpxUser) {
    //Iterating on compacted views forwarded directly to the user
    for(var NNViewUser in CurrentUser.get(new symbol("r._RM_REVIEW_RA_USER._RM_REVIEW_PT_COMP_USERNN", "KEYWORD"))
          where NNViewUser._RM_REVIEW_AA_S_TYPE == "RECIPIENT") {
      var compView = NNViewUser._RM_REVIEW_RA_COMP;
      if(compView.internal == false && duplicateCheck.get(compView,false) == false) {
        var prjt = compView.PROJECT;
        //We apply the project portfolio filter last because it is slow
        if(compView._RM_REVIEW_AA_B_REJECTED == false &&
           compView._rm_review_js_res_demand_to_be_treated_by_rm() == true &&
           _rm_review_js_rm_map_demand_prjt(prjt,prjtFilterHT) == true) {
          f.call(compView);
          duplicateCheck.set(compView,true);
        }
      }
    }

    //Iterating on compacted views forwarded to the user groups
    for(var UserGroup in CurrentUser.get("GROUPS") where UserGroup instanceof OpxUseringroup &&
          UserGroup.GROUP instanceof OpxUsergroup) {
      for(var NNViewUser in UserGroup.GROUP.get(new symbol("r._RM_REVIEW_RA_USER._RM_REVIEW_PT_COMP_USERNN", "KEYWORD"))
            where NNViewUser._RM_REVIEW_AA_S_TYPE == "RECIPIENT") {
        var compView = NNViewUser._RM_REVIEW_RA_COMP;
        if(compView.internal == false && duplicateCheck.get(compView,false) == false) {
          var prjt = compView.PROJECT;
          if(compView._RM_REVIEW_AA_B_REJECTED == false &&
             compView._rm_review_js_res_demand_to_be_treated_by_rm() == true &&
             _rm_review_js_rm_map_demand_prjt(prjt,prjtFilterHT) == true) {
            f.call(compView);
            duplicateCheck.set(compView,true);
          }
        }
      }
    }
  }
  duplicateCheck.delete();
  prjtFilterHT.delete();
	}
}
*/



plw.writeln("$CVSHeader: customers/Biomerieux_Explor/bmx_pjs_rm_review_home_relations.pjs,v 3.2 2021/04/07 10:16:25 ctrepied Exp $"); 
//* -*- Mode: pjs -*- *****************************************************
//  COPYRIGHT (C) PLANISWARE $Date: 2021/03/28 17:04:42 $                                            
//                                                                          
//  All Rights Reserved                                                     
// 
//  This program and the information contained herein are confidential to
//  and the property of PLANISWARE and are made available only to PLANISWARE
//  employees for the sole purpose of conducting PLANISWARE business.
// 
//  This program and copy therof and the information contained herein shall
//  be maintained in strictest confidence ; shall not be copied in whole or
//  in part except as authorized by the employee's manager ; and shall not
//  be disclosed or distributed (a) to persons who are not PLANISWARE employees,
//  or (b) to PLANISWARE employees for whom such information is not necessary in
//  connection with their assigned responsabilities.
// 
//  There shall be no exceptions to the terms and conditions set forth
//  herein except as authorized in writing by the responsible PLANISWARE General
//  Manager.
//
// 
//  FILE    : $RCSfile: bmx_pjs_sbs_to_prg_relation.pjs,v $
// 
//  AUTHOR  : $Author: vfraize $
// 
//  VERSION : $Id: bmx_pjs_sbs_to_prg_relation.pjs,v 3.2 2021/03/28 17:04:42 vfraize Exp $
// 
//  PURPOSE :
// 
//  HISTORY :
//  Log : https://cvs.planisware.com/viewvc/customers/Biomerieux_Explor/bmx_pjs_sbs_to_prg_relation.pjs?view=log
//**************************************************************************

namespace _bmx_prg_sbs;

function bmx_pjs_get_project_prog_from_program_bs(o_bs1){
	var String s_prj_grp = o_bs1.printattribute();
	var String s_dataset_class = "Program";  // fixme should be parameter or global var
	var o_ka = new KeyAttribute(plc.ordo_project, ["DATASET_CLASS", "BREAKDOWN_1"], [s_dataset_class, s_prj_grp]);
	with (o_ka.fromObject()) {
		for(var each in plc.ordo_project){
	
			if(each.printattribute("DATASET_CLASS") == s_dataset_class && each.BREAKDOWN_1== o_bs1){// &&  each.BREAKDOWN_1== o_bs1){
				return each;
			}
		}
	}
	return false;
}

function bmx_da_sbs_prg_reader(){
	var prj = 	bmx_pjs_get_project_prog_from_program_bs(this);
	if(prj instanceof plc.ordo_project){
		return prj.BMX_RA_PRJ_SBS;
	}
	return undefined;
}

function bmx_da_sbs_prg_modifier(value){
	var prj = 	bmx_pjs_get_project_prog_from_program_bs(this);
	if(prj instanceof plc.ordo_project){
		with(plw.no_locking){prj.BMX_RA_PRJ_SBS = value;}
		return true;
	}
	else{
		plw.alert("No existing project " + prj.printattribute() +"corresponding to " + this.printattribute());
	}
	return false;
	
}

function bmx_da_sbs_to_prg_locker(){

	return false;

}

function bmx_prg_sbs_dyn_att(){
  var objectattribute slot2 = plw.dynamicField_generate( plc.1bs, plc.BMX_PT_SBS,
						   #BMX_DA_PRG_TO_SBS#,"SBS",
						   function(){ return bmx_da_sbs_prg_reader(); },
						   function( val ){bmx_da_sbs_prg_modifier( val );});
  slot2.initializer =  function( val ){bmx_da_sbs_prg_modifier( val );};
  slot2.locker =  function(){return bmx_da_sbs_to_prg_locker();};
  slot2.hiddeninintranetserver = false;
}
bmx_prg_sbs_dyn_att();

plw.writeln("$CVSHeader: customers/Biomerieux_Explor/bmx_pjs_sbs_to_prg_relation.pjs,v 3.2 2021/03/28 17:04:42 vfraize Exp $");
 
//* -*- Mode: pjs -*- *****************************************************
//  COPYRIGHT (C) PLANISWARE $Date: 2020/12/16 14:03:58 $                                            
//                                                                          
//  All Rights Reserved                                                     
// 
//  This program and the information contained herein are confidential to
//  and the property of PLANISWARE and are made available only to PLANISWARE
//  employees for the sole purpose of conducting PLANISWARE business.
// 
//  This program and copy therof and the information contained herein shall
//  be maintained in strictest confidence ; shall not be copied in whole or
//  in part except as authorized by the employee's manager ; and shall not
//  be disclosed or distributed (a) to persons who are not PLANISWARE employees,
//  or (b) to PLANISWARE employees for whom such information is not necessary in
//  connection with their assigned responsabilities.
// 
//  There shall be no exceptions to the terms and conditions set forth
//  herein except as authorized in writing by the responsible PLANISWARE General
//  Manager.
//
// 
//  FILE    : $RCSfile: bmx_synchronize_prj_with_prj_group.pjs,v $
// 
//  AUTHOR  : $Author: vfraize $
// 
//  VERSION : $Id: bmx_synchronize_prj_with_prj_group.pjs,v 3.9 2020/12/16 14:03:58 vfraize Exp $
// 
//  PURPOSE :
// 
//  HISTORY :
//  Log : https://cvs.planisware.com/viewvc/customers/Biomerieux_Explor/bmx_synchronize_prj_with_prj_group.pjs?view=log
//**************************************************************************
/*No need to use a hashtable
Value before is stored in the project group (dataset class product)
Value after in the form
Use case 1 creation link one project with the project group
Use case 2 update the project is now related to another project group
remove the value from field Synchronize_With on the activity to avoid unknown
create the new activity with the appropariate attribute function roadmap
move the PH/PE
Use case 3 deletion remove one project from the project group
remove the value from field Synchronize_With on the activity to avoid unknown
deletion of the PH/PH
Use case 4 come back to the initial project group ?
*/

namespace _project_group;

//Global variables
var s_dataset_class = "Product";
var s_slot = "BREAKDOWN_0";

//Post treatment - Funtion used to move PH/PE from one synchronized activity (old) to another one (new) when changing the project group
function bmx_ojs_post_treatment(){
	return true;
}

//Function called to create the synchronized activity in the project group from the selected project
function bmx_ojs_build_object_properties(o_prj,...args) {
	var o_top_level_act = plw.top_level_ws(o_prj);
	var o_prj_grp = args.getf(#o_prj_grp#);
  //For activities, we just copy the objects
  //Setting positioning to earliest as it does not make sense to have dropped activities with latest positioning
  //Tested also in French, even when setting EARLIEST, it works and you have AU PLUS TOT
  var vector listofAtt=new vector("NAME" , o_top_level_act.NAME
                           ,"DESC",o_top_level_act.DESC
                           ,"WBS_ELEMENT",plw.top_level_ws(o_prj_grp)
                           ,"PLA","EARLIEST"
						   ,"DATES_CONS",false
						   ,"FILE",o_prj_grp);
  // if (CurrentClass=="OpxActivity".findclass()) {
    var Date StartDate=o_top_level_act.PS;
    var Date EndDate=o_top_level_act.PF;
    //If for any reason, the kernel messes the dates computation and PF < PS => Use PS as EndDate (Issue IS-00018150)
    if (EndDate instanceof Date && StartDate instanceof Date && EndDate<StartDate) {
      EndDate=StartDate;
    }
    listofAtt.push("SYNCHRONIZE_WITH");   listofAtt.push(o_top_level_act);
    listofAtt.push("LAST_SYNC_DATE");     listofAtt.push(new date());
    listofAtt.push("SYNC_VERSION");       listofAtt.push(o_top_level_act.OVN);
    listofAtt.push("PS");                 listofAtt.push(StartDate);
    listofAtt.push("SNE");                listofAtt.push(StartDate);
    listofAtt.push("EXPECTED_FINISH");    listofAtt.push(EndDate);
  return listofAtt;
}

function bmx_update_synchronized_activity(o_prj,...args){
	var o_prj_grp = args.getf(#o_prj_grp#);
	var o_act = args.getf(#o_act#);
	var o_top_level_act = plw.top_level_ws(o_prj);
	var listofAtt = new vector();
	listofAtt.push("DESC");   listofAtt.push(o_top_level_act.DESC);
	listofAtt.push("SYNCHRONIZE_WITH");   listofAtt.push(o_top_level_act);
	var Date StartDate=o_top_level_act.PS;
    var Date EndDate=o_top_level_act.PF;
    //If for any reason, the kernel messes the dates computation and PF < PS => Use PS as EndDate (Issue IS-00018150)
    if (EndDate instanceof Date && StartDate instanceof Date && EndDate<StartDate) {
      EndDate=StartDate;
    }
	listofAtt.push("LAST_SYNC_DATE");     listofAtt.push(new date());
	listofAtt.push("SYNC_VERSION");       listofAtt.push(o_top_level_act.OVN);
	listofAtt.push("PS");                 listofAtt.push(StartDate);
    listofAtt.push("SNE");                listofAtt.push(StartDate);
	listofAtt.push("EXPECTED_FINISH");    listofAtt.push(EndDate);
	with(plw.no_locking) {o_act.modifywithplist(listofAtt);}
}

function bmx_check_synchronized_activity_existence_in_project(o_prj,...args){
	var String s_prj_grp = o_prj.BREAKDOWN_0.printattribute();
	var o_top_level_act = plw.top_level_ws(o_prj);
	var o_ka = new KeyAttribute(plc.ordo_project, ["DATASET_CLASS", "BREAKDOWN_0"], [s_dataset_class, s_prj_grp]);
	with (o_ka.fromObject()) {
		for(var o_act in plc.work_structure){
			if(o_act.PROJECT.get("DATASET_CLASS").printattribute() == s_dataset_class && o_act.NAME == o_top_level_act.NAME){
				return o_act;
			}
		}
	}
	return undefined;
}

//
function bmx_create_new_synchronized_activity(o_prj,...args){
	with(plw.no_locking){
		var listofAtt = bmx_ojs_build_object_properties(o_prj,#o_prj_grp#:args.getf(#o_prj_grp#));
		var newAct = "OpxNetwork".makeopx2objectwithPlist(listofAtt);
		return newAct;
	}
}

//Reset synchronize with field
function bmx_pjs_reset_synchronize_with_field(o_sync_act){
	with(plw.no_locking){
		o_sync_act.SYNCHRONIZE_WITH ="";
		plw.writeln("The activity"+o_sync_act.NAME+"has been desynchronized.");
		
		// cleaning values from synchronization in 
		for(var o_ph_pe in o_sync_act.get("CONSOLIDATED-EXPENDITURE-AND-ALLOCATION")){
			plw.writeln("o_bud_line" + o_ph_pe);
			o_ph_pe.delete();
		}
		
		for(var o_bud_line in o_sync_act.get("BUDGET-LINES")){
			plw.writeln("o_bud_line" + o_bud_line);
			o_bud_line.delete();
		}
	}
}

//Identify project group from the project

function bmx_pjs_get_project_group_from_project(o_prj){
	var String s_prj_grp = o_prj.BREAKDOWN_0.printattribute();
	var String s_dataset_class = "Product";  // fixme should be parameter or global var
	var o_ka = new KeyAttribute(plc.ordo_project, ["DATASET_CLASS", "BREAKDOWN_0"], [s_dataset_class, s_prj_grp]);
	with (o_ka.fromObject()) {
		for(var each in plc.ordo_project){
			if(each.printattribute("DATASET_CLASS") == s_dataset_class && each.printattribute("BREAKDOWN_0") == s_prj_grp){
				return each;
			}
		}
	}
	return false;
}


//Function called on L2 alert to synchronize the project with project group
function bmx_pjs_synchronize_project_with_project_group(){
	plw.writeln("bmx_pjs_synchronize_project_with_project_group");
	var o_prj = this;
	if(o_prj instanceof plc.ordo_project){
		var o_top_level_act = plw.top_level_ws(o_prj);
		var o_prj_grp = bmx_pjs_get_project_group_from_project(o_prj);
		plw.writeln("o_prj_grp" + o_prj_grp);
		for(var o_sync_act in o_top_level_act.get("SYNCHRONIZED_ACTIVITIES")){
			if((o_prj_grp == undefined)  || (o_prj_grp == false)  || (o_prj_grp instanceof plc.ordo_project && o_top_level_act.get(s_slot) == o_prj_grp.get(s_slot))){
				if(o_sync_act.PROJECT.printattribute("DATASET_CLASS") == s_dataset_class && o_sync_act.PROJECT.printattribute("ORIGIN_PROJECT") == ""){
					bmx_pjs_reset_synchronize_with_field(o_sync_act);
				}
			}
		}
		
		var o_act = bmx_check_synchronized_activity_existence_in_project(o_prj,#o_prj_grp#:o_prj_grp);
		plw.writeln("o_act" + o_act);
		if(o_prj_grp instanceof plc.ordo_project && o_act == undefined){
			bmx_create_new_synchronized_activity(o_prj,#o_prj_grp#:o_prj_grp);
		}
		if(o_prj_grp instanceof plc.ordo_project && o_act instanceof plc.work_structure){
			bmx_update_synchronized_activity(o_prj,#o_prj_grp#:o_prj_grp,#o_act#:o_act);
		}
	}
}



// migration purposes  I don't why the f... syntax with namespace doesn't work : create a func with arg (I m busy man)
function bmx_pjs_synchronize_project_with_project_group_with_args(o_prj){
	plw.writeln("bmx_pjs_synchronize_project_with_project_group on " + o_prj);
	if(o_prj instanceof plc.ordo_project){
		var o_top_level_act = plw.top_level_ws(o_prj);
		var o_prj_grp = bmx_pjs_get_project_group_from_project(o_prj);
		plw.writeln("o_prj_grp" + o_prj_grp);
		for(var o_sync_act in o_top_level_act.get("SYNCHRONIZED_ACTIVITIES")){
			if((o_prj_grp == false) || (o_prj_grp == undefined) || (o_prj_grp instanceof plc.ordo_project && o_top_level_act.get(s_slot) == o_prj_grp.get(s_slot))){
				if(o_sync_act.PROJECT.printattribute("DATASET_CLASS") == s_dataset_class && o_sync_act.PROJECT.printattribute("ORIGIN_PROJECT") == ""){
					bmx_pjs_reset_synchronize_with_field(o_sync_act);
				}
			}
		}
		
		var o_act = bmx_check_synchronized_activity_existence_in_project(o_prj,#o_prj_grp#:o_prj_grp);
		plw.writeln("o_act" + o_act);
		if(o_prj_grp instanceof plc.ordo_project && o_act == undefined){
			bmx_create_new_synchronized_activity(o_prj,#o_prj_grp#:o_prj_grp);
		}
		if(o_prj_grp instanceof plc.ordo_project && o_act instanceof plc.work_structure){
			bmx_update_synchronized_activity(o_prj,#o_prj_grp#:o_prj_grp,#o_act#:o_act);
		}
	}
}



function bmx_synchronize_all_project_groups_from_project(){
	var c=0;
	for(var o_prj in plc.ordo_project){
		if (o_prj.printattribute("DATASET_CLASS")== "Project" && o_prj.printattribute("ORIGIN_PROJECT")=="" && c<2000 && o_prj.printattribute("STATE").toUpperCase()!= "PROJECT TEMPLATE"){
			bmx_pjs_synchronize_project_with_project_group_with_args(o_prj);
			c++;
		}
		
	}
	plw.alert(c + " Project migrated");
}

plw.writeln("$CVSHeader: customers/Biomerieux_Explor/bmx_synchronize_prj_with_prj_group.pjs,v 3.9 2020/12/16 14:03:58 vfraize Exp $");
 
//* -*- Mode: pjs -*- *****************************************************
//  COPYRIGHT (C) PLANISWARE $Date: 2020/12/01 14:27:20 $                                            
//                                                                          
//  All Rights Reserved                                                     
// 
//  This program and the information contained herein are confidential to
//  and the property of PLANISWARE and are made available only to PLANISWARE
//  employees for the sole purpose of conducting PLANISWARE business.
// 
//  This program and copy therof and the information contained herein shall
//  be maintained in strictest confidence ; shall not be copied in whole or
//  in part except as authorized by the employee's manager ; and shall not
//  be disclosed or distributed (a) to persons who are not PLANISWARE employees,
//  or (b) to PLANISWARE employees for whom such information is not necessary in
//  connection with their assigned responsabilities.
// 
//  There shall be no exceptions to the terms and conditions set forth
//  herein except as authorized in writing by the responsible PLANISWARE General
//  Manager.
//
// 
//  FILE    : $RCSfile: bmx_roa_roadmap_redefinitions.pjs,v $
// 
//  AUTHOR  : $Author: vfraize $
// 
//  VERSION : $Id: bmx_roa_roadmap_redefinitions.pjs,v 3.2 2020/12/01 14:27:20 vfraize Exp $
// 
//  PURPOSE :
// 
//  HISTORY :
//  Log : https://cvs.planisware.com/viewvc/customers/Biomerieux_Explor/bmx_roa_roadmap_redefinitions.pjs?view=log
//**************************************************************************

// OTD 100402 correction
namespace roaPlvMod;
cached function plg_getRelevantForProjectAndLayout(dataset, plc.OrdoProject layout, Formula selector: undefined) {
  "Retrieves all relevant PLG objects for a given project and layout.
  Return: Vector, a vector of PLG objects, or undefined in case of error.
  - Secondary value: HashTable, a hash mapping the activities to their respective PLG objects.
  - Tertiary value: Integer, a return code.
  @param dataset plc.OrdoProject-or-plc.VirtualDataset-or-Vector: Either a project or a virtual dataset or a vector.
  @param layout plc.OrdoProject: A layout.
  @param selector Optional Formula: A Boolean formula used to filter the activities in the dataset(s)."
  if ((! (dataset instanceof plc.OrdoProject))
      && (! (dataset instanceof plc.VirtualDataset))
      && (! (dataset instanceof Vector))) {
    return values (undefined, undefined, -1);
  }
  selector = (selector instanceof Formula) ? selector : undefined;
  if (! (layout instanceof plc.OrdoProject)) return values (undefined, undefined, -2);
  var HashTable hsh = new HashTable();
  var HashTable actHsh = new HashTable();
  var ObjectAttribute slot = roa_getGroupByAttributeSlot(layout);
  var Boolean groupByActive = (slot instanceof ObjectAttribute);
  var Symbol slotKeyword = groupByActive ? slot.descriptor.name : undefined;
  
  // Iterate over all available datasets in a virtual dataset environment.
  var Vector datasets = bmx_get_relevant_datasets(dataset,"Project");
  
  for (var prj in datasets) {
    if (! (prj instanceof plc.OrdoProject)) continue;
    for (var plc.WorkStructure act in prj.work_structures
        where ((! selector) || selector.call(act))
        order by ["LEVEL"]) {
      var plc.WorkStructure layoutAct = po_getMatchingLayoutActivity(act, layout);
      if (! (layoutAct instanceof plc.WorkStructure)) continue;
      var groupObject = groupByActive ? act.get(slotKeyword) : undefined;
      // var groupObject = groupByActive ? ((slotKeyword == #NETWORK#) && (act instanceof plc.Network)) ? act : act.get(slotKeyword) : undefined;
      var String label = act.printAttribute(slotKeyword);
      var plc._ROA_TT_PLG plg = plg_getOrCreate(prj, layout, groupByActive ? slot.descriptor.name : undefined, groupObject, label);
      hsh.set(plg, true);
      actHsh.set(act, plg);

      // In the case of grouping by network, set the parent in the same grouping as well.
      if ((slotKeyword == #NETWORK#) && (act.network in actHsh)) {
        actHsh.set(act.network, plg);
      }
    }
  }
  return values (hsh.hash_keys(), actHsh, 0);
}

function bmx_get_relevant_datasets(dataset,s_dataset_class){
	var v_result = new vector();
	if(dataset instanceof plc.OrdoProject){
		for(var o in dataset.get("ATTACHED_PROJECTS")){
			v_result.push(o);
		}
		v_result.push(dataset);
	}
	
	if(dataset instanceof plc.VirtualDataset){
		for(var o_prj in dataset.getInternalValue(#SELECTED-DATASETS#)){
			for(var o in o_prj.get("ATTACHED_PROJECTS")){
					v_result.push(o);
			}
			v_result.push(o_prj);
		}
	}

var final_result  = new vector();
	for(var o_final in v_result){ if(o_final.printAttribute("DATASET_CLASS") == s_dataset_class){ final_result.push(o_final);}}
	final_result.removeduplicates();
	return final_result;
}
// EMM : Fix regression 7.0.4, OTD : 132220, to be removed in 705
method getDsClass on widget() {
  var plc.editor editor = this.editor;
  if(editor instanceof plc.editor) {
    return editor.geteditorplist(#PROJECT-TYPE#);
  }
  return undefined;
}
function setReportAccordingToDatasetClass(cell) {
  var gr = this;
  var boolean isComputingReportSize = !(gr == false); 
  //We get the folder report that is currently displayed
  var plc.report folderreport = undefined;
  if(cell instanceof plc.subformcell) {
    folderreport = cell.getreport();
  } else if (gr instanceof graphics) {
    folderReport = getReportFromGraphic(gr);
  }
  
  if(folderReport instanceof plc.report) {
    var plc.Tabreport o_tr = folderReport.tab_report;
    if(o_tr instanceof plc.tabreport
       && o_tr.isPopup_fromscratch()
       && isDispatchTabreport(o_tr)) {
      return getDispatchReport_popupFromScratch(o_tr);
    }
    
    //Get the origin report
      var plc.report originRep = folderReport.REPLACE;
      
    if(originRep instanceof plc.report) {
      //Gr might not be a graphics here
      var plc.projecttype currDsClass = gr.getDsClass();
      var plc.report reportToBeShown = getDispatchReport_replace(currDsClass
								 , folderreport
								 , originrep);
      
      if(reportToBeShown instanceof plc.report) {
	if(!isComputingReportSize) {
	  //folderReport.setDisplayworkflow(reportToBeShown.getDisplayWorkflow());
	  //setreportDefaultValuesToTargetReport(reportToBeShown, folderreport);
	  
	  //OTD-105091: display conditions does not work for dataset classes
	  setDisplayConditionsFordatasetclass(reportToBeShown, currDsClass);
	  setButtonActionOnTargetReport(folderreport, reportToBeShown);
	}

	//Fix OTD 94712 : bad popup title when dataset
	//is done in the display script
	//setCustomTitleOnPopup(widget, reportToBeShown);
        return reportToBeShown;
      }
    }
  }
  return undefined;
}

plw.writeln("$CVSHeader: customers/Biomerieux_Explor/bmx_roa_roadmap_redefinitions.pjs,v 3.2 2020/12/01 14:27:20 vfraize Exp $"); 
//* -*- Mode: pjs -*- *****************************************************
//  COPYRIGHT (C) PLANISWARE $Date: 2020/12/07 15:59:35 $                                            
//                                                                          
//  All Rights Reserved                                                     
// 
//  This program and the information contained herein are confidential to
//  and the property of PLANISWARE and are made available only to PLANISWARE
//  employees for the sole purpose of conducting PLANISWARE business.
// 
//  This program and copy therof and the information contained herein shall
//  be maintained in strictest confidence ; shall not be copied in whole or
//  in part except as authorized by the employee's manager ; and shall not
//  be disclosed or distributed (a) to persons who are not PLANISWARE employees,
//  or (b) to PLANISWARE employees for whom such information is not necessary in
//  connection with their assigned responsabilities.
// 
//  There shall be no exceptions to the terms and conditions set forth
//  herein except as authorized in writing by the responsible PLANISWARE General
//  Manager.
//
// 
//  FILE    : $RCSfile: bmx_synchronize_prj_costs.pjs,v $
// 
//  AUTHOR  : $Author: vfraize $
// 
//  VERSION : $Id: bmx_synchronize_prj_costs.pjs,v 3.6  2023/12/22 12:00:00 xli Exp $
// 
//  PURPOSE :
// 
//  HISTORY :
//  Log : https://cvs.planisware.com/viewvc/customers/Biomerieux_Explor/bmx_synchronize_prj_costs.pjs?view=log
//  Revision 3.6  2023/12/22 12:00:00  xli
//  Add marker BMX_UA_B_OLD_PROJECT_GROUP_COST for planned expenditure and budget line to delete the old costs
//
//**************************************************************************
namespace _project_group;
//Global variables
// var s_dataset_class = "Product";
var s_breakdown_slot = "BREAKDOWN_0";
var s_default_unit = "EUR";
var s_default_cbs2 = "All";
var s_default_time_unit = "YEAR";

function bmx_js_initialize_query_and_master_table (v_d_sd,v_d_ed,v_s_queryName,s_portfolioName){
	var o_query = "Opx_PEX_PT_QUERY".findclass().get(v_s_queryName);
	var v_s_MasterTableName= "Opx" + v_s_queryName;
	var o_MasterTable=undefined;
	
	// Check query exists
	if (o_query == undefined) {
		plw.alert("ERROR-Query not defined");
		return undefined;
	}

	// special refresh
	with(plw.no_locking){o_query._pex_aa_b_need_refresh= true;}
	// o_query.csv_pex_js_refresh(); // defined in csv impex script	
	
	// Build and Refresh cost tables
	o_query._pex_js_BuildCostTables_extended(false);
	
	// Check MasterTable exists
	o_MasterTable=v_s_MasterTableName.findclass();
	if (o_MasterTable== undefined) {
		plw.alert("ERROR-Master table not defined");
		return undefined;
	}
	
	//Set up portfolio to use
	Context._ff_aa_s_list_name = s_portfolioName;
	
	for( var o_pexCostTable in o_MasterTable.children){
		"OpxCOST_TABLE".get(o_pexCostTable.comment).start_date = "DATE(\"" + v_d_sd.tostring("JJ-MM-AA:HHhIImSSs") + "\", \"JJ-MM-AA:HHhIImSSs\")";
		"OpxCOST_TABLE".get(o_pexCostTable.comment).end_Date = "DATE(\"" + v_d_ed.tostring("JJ-MM-AA:HHhIImSSs") + "\", \"JJ-MM-AA:HHhIImSSs\")";  
	}
	
	return o_MasterTable;
}

// synchronize 
function bmx_synchronize_cost_from_project_to_project_group(s_queryName,s_breakdown_slot,symb_type,target_type,qty_attribute,s_portfolioName,...args) {

	var o_target_dataset_class = plc.project_type.get(s_dataset_class);
	var v_d_sd = context.get("BMX_UA_D_PERIOD_SYNC_SD");
	var v_d_ed = context.get("BMX_UA_D_PERIOD_SYNC_ED");
	var o_MasterTable=undefined;
	var v_plist = undefined;
	
	// Populate Integration details with total hours per resource
	o_MasterTable = bmx_js_initialize_query_and_master_table(v_d_sd,v_d_ed,s_queryName,s_portfolioName);
	
	if (o_MasterTable==undefined) {
		return false;
	}
	// o_MasterTable.inspect();
	
	for (var line in o_MasterTable) {
		v_plist= new vector();
		v_plist.setplist("SD",line.get("START_DATE"));
		
		var o_prj = line.PROJECT;
		var target_act = o_prj.bmx_get_sync_act_from_project(o_prj.dataset_class,o_target_dataset_class,s_breakdown_slot);
		plw.writeln("target_act is : " + target_act);
		v_plist.setplist("QUANTITY",line.get(qty_attribute));// fixme ! should be parameter ??
		
		if(target_act ==undefined){
			// creation !!
			var o_prj_grp = o_prj.get(s_breakdown_slot);
			if(o_prj_grp.internal == false){
				target_act = bmx_create_new_synchronized_activity(o_prj,#o_prj_grp#:o_prj_grp);
			}
			if(Context.CallBooleanFormula("$OPX2BATCH_MODE")== true){
				continue; // escaping in batch mode
			}
		}
		
		if(target_act instanceof plc.workstructure){
			v_plist.setplist("ACTIVITY",target_act.printattribute());
			if(target_type == "EXPENDITURES"){
				v_plist.setplist("DURATION_COMPUTATION", new symbol("FIXED-DATES","KEYWORD"));
				bmx_synchronize_cost_values_from_act(target_act,v_plist,#symb_type#:symb_type);
			}

			if(target_type == "BUDGET"){
				bmx_synchronize_budget_values_from_act(target_act,v_plist,#symb_type#:symb_type);
			}
		}

	}

	return true;
}

// function to create 
function bmx_synchronize_cost_values_from_act(o_act,v_plist,...args){
	plw.writeln("treating : o_act" + o_act);
	var symb_type =  args.getf(#symb_type#);
	var o_class =  args.getf(#o_class#);
	
	with(o_act.fromobject()){
		// for(var o_exp in plc.Expenditure where o_exp.getinternalvalue("TYPE") == symb_type){o_exp.delete();}
		for(var o_exp in plc.Expenditure){
			if(o_exp.get("SD") == v_plist.get("SD") && o_exp.getinternalvalue("TYPE") == symb_type){
				o_exp.modifywithplist(v_plist);
				if(o_exp.get("BMX_UA_B_OLD_PROJECT_GROUP_COST") != true) plw.writetolog("Modification without mark");
				o_exp.BMX_UA_B_OLD_PROJECT_GROUP_COST = false;
				plw.writetolog("Modification expenditure : " + o_exp.onb + " Activity " + o_exp.project.printattribute() + " " + o_exp.activity.printattribute() + " Year " + o_exp.SD.getyear());
				plw.writetolog("Modification expenditure : BMX_UA_B_OLD_PROJECT_GROUP_COST " + o_exp.get("BMX_UA_B_OLD_PROJECT_GROUP_COST"));
			    return true;
			}
		}
	}
	
	v_plist.setplist("UNIT",s_default_unit);
	v_plist.setplist("_INF_RA_CBS2",s_default_cbs2);
	v_plist.setplist("ED",v_plist.get("SD").next(s_default_time_unit));
	with(plw.no_locking){
		var exp_new  = plc.Expenditure.makeopx2objectwithplist(v_plist);
		plw.writetolog("Creation expenditure : Activity " + exp_new.project.printattribute() + " " + exp_new.activity.printattribute() + " Year " + exp_new.SD.getyear());
	}
}

function bmx_synchronize_budget_values_from_act(o_act,v_plist,...args){
	plw.writeln("treating : o_act" + o_act);
	var symb_type =  args.getf(#symb_type#);
	var o_class =  args.getf(#o_class#);
	
	with(o_act.fromobject()){
		// for(var o_exp in plc.Expenditure where o_exp.getinternalvalue("TYPE") == symb_type){o_exp.delete();}
		for(var o_exp in plc.Budgetline){
			if(o_exp.get("SD") == v_plist.get("SD") && o_exp.getinternalvalue("TYPE") == symb_type){
				o_exp.modifywithplist(v_plist);
				if(o_exp.get("BMX_UA_B_OLD_PROJECT_GROUP_COST") != true) plw.writetolog("Modification without mark");
				o_exp.BMX_UA_B_OLD_PROJECT_GROUP_COST = false;
				plw.writetolog("Modification budget-line : " + o_exp.onb + " Activity " + o_exp.project.printattribute() + " " + o_exp.activity.printattribute() + " Year " + o_exp.SD.getyear());
				plw.writetolog("Modification budget-line : BMX_UA_B_OLD_PROJECT_GROUP_COST " + o_exp.get("BMX_UA_B_OLD_PROJECT_GROUP_COST"));
				return true;
			}
		}
	}
	
	v_plist.setplist("UNIT",s_default_unit);
	v_plist.setplist("TYPE",symb_type);
	v_plist.setplist("_INF_RA_CBS2",s_default_cbs2);
	v_plist.setplist("ED",v_plist.get("SD").next(s_default_time_unit));
	with(plw.no_locking){
		var exp_new  = plc.Budgetline.makeopx2objectwithplist(v_plist);
		plw.writetolog("Creation budget-line : Activity " + exp_new.project.printattribute() + " " + exp_new.activity.printattribute() + " Year " + exp_new.SD.getyear());
	}
}



// retrieve an activity synchronized with the project given in attribute
method bmx_get_sync_act_from_project on plc.ordo_project(o_source_dataset_class,o_target_dataset_class,s_slot){
	// FIXME NEED TRANSACTIONAL CACHE FOR PROJECT !!
	plw.writeln("bmx_get_sync_act_from_project" + this);
	if(this.DATASET_CLASS == o_source_dataset_class ){
		var o_top_level_act = plw.top_level_ws(this);
		var o_prj_grp = bmx_pjs_get_project_group_from_project(this);
		plw.writeln("o_prj_grp" + o_prj_grp + "  //  o_top_level_act" + o_top_level_act + " // o_target_dataset_class" + o_target_dataset_class);
		for(var o_sync_act in o_top_level_act.get("SYNCHRONIZED_ACTIVITIES")){
			plw.writeln("o_sync_act" + o_sync_act + "o_top_level_act.get(s_slot) " + o_top_level_act.get(s_slot));
			if((o_prj_grp == false) || (o_prj_grp instanceof plc.ordo_project && o_top_level_act.get(s_slot) == o_prj_grp.get(s_slot))){
				if(o_sync_act.PROJECT instanceof plc.ORDO_PROJECT){ // you would be suprised but yes it is useful....
					if(o_sync_act.PROJECT.DATASET_CLASS == o_target_dataset_class && o_sync_act.PROJECT.printattribute("ORIGIN_PROJECT") == ""){
						return o_sync_act;
					}
				}
			}
		}
	
		// second loop for batch mode where misterious loading mode prevent to use inverse relationship
		for(var o_tgt_prj in plc.ORDO_PROJECT){
			plw.writeln("Not found by first loop. Looking in " + o_tgt_prj);
			if(o_tgt_prj.DATASET_CLASS == o_target_dataset_class){
				var o_top_lvl_act = plw.top_level_ws(o_tgt_prj);
				if(o_top_level_act.SYNCHRONIZE_WITH == o_top_lvl_act){
					plw.writeln("Second loop was there" + o_top_lvl_act);
					return o_top_level_act;
				}
			}
		}
		
	}
return undefined;
}


/////////EXAMPLE OF USAGE ////////////////
// select a portfolio of project -not a portfolio of project group !!
// by example : All active R&D
// var symb_type =new symbol("NIL","DOD");
// var d_currentDate = new date();
// var s_breakdown_slot = "BREAKDOWN_0";
// var s_queryName = "BMX_QY_PRJ_SYNC_TO_PRJ_GRP";
// var s_queryName_budget = "BMX_QY_PRJ_SYNC_TO_PRJ_GRP_BUDGET";
// bmx_synchronize_cost_from_project_to_project_group(s_queryName,s_breakdown_slot,symb_type,"EXPENDITURES","EUR_CT__EAC_IN_EUR",Context._ff_aa_s_list_name);
// bmx_synchronize_cost_from_project_to_project_group(s_queryName_budget,s_breakdown_slot,symb_type,"BUDGET","EUR_CT__BAC_IN_EUR",Context._ff_aa_s_list_name); 



// var o_prj= plc.ordo_project.get("E0020");
// bmx_pjs_get_project_group_from_project(o_prj);

/////////EXAMPLE OF USAGE ////////////////


 plw.writeln("$CVSHeader: customers/Biomerieux_Explor/bmx_synchronize_prj_costs.pjs,v 3.5 2020/12/07 15:59:35 vfraize Exp $"); 
//OTD 129185
//BMX_AL_UPDATE_PROJECT_FUNDING_SOURCES modified
//batch to ensure consistency on BMX_UA_RING_FUNDING_SOURCES
namespace _bmx_funding_sources;

var Number counter = 0;
with(plw.no_alerts){
	for (var o_prj in plc.ORDO_PROJECT where o_prj.DATASET_CLASS.name!="Program" && o_prj.NAME.substring(0,3)!="TP_" && o_prj.get("BMX_UA_B_HAS_A_CHARG_COEFF") == true){ // && o_prj.get("BMX_UA_RING_FUNDING_SOURCES")==""){
		o_prj.BMX_UA_RING_FUNDING_SOURCES = o_prj.BMX_UA_S_LIST_FUNDING_UNIT;
		counter++;
	}
}
plw.writeln("counter" + counter); 
//script to use in the reference batch BASELINE1_20241231T100747_BATCH
Namespace _baselineBatch;
plw.take_Reference_with_parameter_in_batch_ext(plw._admin_us_refGenerateRefName(),plw._admin_us_refGenerateProjectFilter(),plw._admin_us_refGeneratePortfolioFilter(),plw._admin_us_refBatchIsInBulkMode());
 
//script to use in the reference batch BUDGET_2021_20210114T091923_BATCH
Namespace _baselineBatch;
plw.take_Reference_with_parameter_in_batch_ext(plw._admin_us_refGenerateRefName(),plw._admin_us_refGenerateProjectFilter(),plw._admin_us_refGeneratePortfolioFilter(),plw._admin_us_refBatchIsInBulkMode());
 
//script to use in the reference batch BUDGET_2021_20210114T093308_BATCH
Namespace _baselineBatch;
plw.take_Reference_with_parameter_in_batch_ext(plw._admin_us_refGenerateRefName(),plw._admin_us_refGenerateProjectFilter(),plw._admin_us_refGeneratePortfolioFilter(),plw._admin_us_refBatchIsInBulkMode());
 
//script to use in the reference batch BMX_BUDGET_ACTIVE_PROJECTS
Namespace _baselineBatch;
plw.take_Reference_with_parameter_in_batch_ext(plw._admin_us_refGenerateRefName(),plw._admin_us_refGenerateProjectFilter(),plw._admin_us_refGeneratePortfolioFilter(),plw._admin_us_refBatchIsInBulkMode());
 
//script to use in the reference batch BMX_REFREEZE_BUDGET_LIMITED
Namespace _baselineBatch;
plw.take_Reference_with_parameter_in_batch_ext(plw._admin_us_refGenerateRefName(),plw._admin_us_refGenerateProjectFilter(),plw._admin_us_refGeneratePortfolioFilter(),plw._admin_us_refBatchIsInBulkMode());
 
//script to use in the reference batch BMX_BUDGET_REFREEZE_LIMITED
Namespace _baselineBatch;
plw.take_Reference_with_parameter_in_batch_ext(plw._admin_us_refGenerateRefName(),plw._admin_us_refGenerateProjectFilter(),plw._admin_us_refGeneratePortfolioFilter(),plw._admin_us_refBatchIsInBulkMode());
 
//script to use in the reference batch BMX_BUDGET_ACTIVE_PROJECTS
Namespace _baselineBatch;
plw.take_Reference_with_parameter_in_batch_ext(plw._admin_us_refGenerateRefName(),plw._admin_us_refGenerateProjectFilter(),plw._admin_us_refGeneratePortfolioFilter(),plw._admin_us_refBatchIsInBulkMode());
 
//script to use in the reference batch BMX_BUDGET_REFREEZE_LIMITED
Namespace _baselineBatch;
plw.take_Reference_with_parameter_in_batch_ext(plw._admin_us_refGenerateRefName(),plw._admin_us_refGenerateProjectFilter(),plw._admin_us_refGeneratePortfolioFilter(),plw._admin_us_refBatchIsInBulkMode());
 
//script to use in the reference batch BUDGET_2023_20231124T101320_BATCH
Namespace _baselineBatch;
plw.take_Reference_with_parameter_in_batch_ext(plw._admin_us_refGenerateRefName(),plw._admin_us_refGenerateProjectFilter(),plw._admin_us_refGeneratePortfolioFilter(),plw._admin_us_refBatchIsInBulkMode());
 
//script to use in the reference batch BUDGET_2023_20231124T101320_BATCH
Namespace _baselineBatch;
plw.take_Reference_with_parameter_in_batch_ext(plw._admin_us_refGenerateRefName(),plw._admin_us_refGenerateProjectFilter(),plw._admin_us_refGeneratePortfolioFilter(),plw._admin_us_refBatchIsInBulkMode());
 
//script to use in the reference batch BMX_BUDGET_REFREEZE_LIMITED
Namespace _baselineBatch;
plw.take_Reference_with_parameter_in_batch_ext(plw._admin_us_refGenerateRefName(),plw._admin_us_refGenerateProjectFilter(),plw._admin_us_refGeneratePortfolioFilter(),plw._admin_us_refBatchIsInBulkMode());
 
//script to use in the reference batch BMX_BUDGET_ACTIVE_PROJECTS
Namespace _baselineBatch;
plw.take_Reference_with_parameter_in_batch_ext(plw._admin_us_refGenerateRefName(),plw._admin_us_refGenerateProjectFilter(),plw._admin_us_refGeneratePortfolioFilter(),plw._admin_us_refBatchIsInBulkMode());
 
//script to use in the reference batch BUDGET_2023_20231124T101320_BATCH
Namespace _baselineBatch;
plw.take_Reference_with_parameter_in_batch_ext(plw._admin_us_refGenerateRefName(),plw._admin_us_refGenerateProjectFilter(),plw._admin_us_refGeneratePortfolioFilter(),plw._admin_us_refBatchIsInBulkMode());
 
//script to use in the reference batch BMX_BUDGET_ACTIVE_PROJECTS
Namespace _baselineBatch;
plw.take_Reference_with_parameter_in_batch_ext(plw._admin_us_refGenerateRefName(),plw._admin_us_refGenerateProjectFilter(),plw._admin_us_refGeneratePortfolioFilter(),plw._admin_us_refBatchIsInBulkMode());
 
//script to use in the reference batch BMX_BUDGET_ACTIVE_PROJECTS
Namespace _baselineBatch;
plw.take_Reference_with_parameter_in_batch_ext(plw._admin_us_refGenerateRefName(),plw._admin_us_refGenerateProjectFilter(),plw._admin_us_refGeneratePortfolioFilter(),plw._admin_us_refBatchIsInBulkMode());
 
//script to use in the reference batch BMX_BUDGET_REFREEZE_LIMITED
Namespace _baselineBatch;
plw.take_Reference_with_parameter_in_batch_ext(plw._admin_us_refGenerateRefName(),plw._admin_us_refGenerateProjectFilter(),plw._admin_us_refGeneratePortfolioFilter(),plw._admin_us_refBatchIsInBulkMode());
 
//script to use in the reference batch BMX_BUDGET_ACTIVE_PROJECTS
Namespace _baselineBatch;
plw.take_Reference_with_parameter_in_batch_ext(plw._admin_us_refGenerateRefName(),plw._admin_us_refGenerateProjectFilter(),plw._admin_us_refGeneratePortfolioFilter(),plw._admin_us_refBatchIsInBulkMode());
 
//script to use in the reference batch BMX_BUDGET_ACTIVE_PROJECTS
Namespace _baselineBatch;
plw.take_Reference_with_parameter_in_batch_ext(plw._admin_us_refGenerateRefName(),plw._admin_us_refGenerateProjectFilter(),plw._admin_us_refGeneratePortfolioFilter(),plw._admin_us_refBatchIsInBulkMode());
 
//script to use in the reference batch BMX_BUDGET_REFREEZE_LIMITED
Namespace _baselineBatch;
plw.take_Reference_with_parameter_in_batch_ext(plw._admin_us_refGenerateRefName(),plw._admin_us_refGenerateProjectFilter(),plw._admin_us_refGeneratePortfolioFilter(),plw._admin_us_refBatchIsInBulkMode());
 
//script to use in the reference batch BUDGET_2023_20231124T101320_BATCH
Namespace _baselineBatch;
plw.take_Reference_with_parameter_in_batch_ext(plw._admin_us_refGenerateRefName(),plw._admin_us_refGenerateProjectFilter(),plw._admin_us_refGeneratePortfolioFilter(),plw._admin_us_refBatchIsInBulkMode());
 
//script to use in the reference batch BMX_LBE_ACTIVE_PROJECTS
Namespace _baselineBatch;
plw.take_Reference_with_parameter_in_batch_ext(plw._admin_us_refGenerateRefName(),plw._admin_us_refGenerateProjectFilter(),plw._admin_us_refGeneratePortfolioFilter(),plw._admin_us_refBatchIsInBulkMode());
 
//script to use in the reference batch BMX_LBE_CLOSED_WITH_ACTUALS
Namespace _baselineBatch;
plw.take_Reference_with_parameter_in_batch_ext(plw._admin_us_refGenerateRefName(),plw._admin_us_refGenerateProjectFilter(),plw._admin_us_refGeneratePortfolioFilter(),plw._admin_us_refBatchIsInBulkMode());
 
//script to use in the reference batch BMX_LBE_REFREEZE_LIMITED
Namespace _baselineBatch;
plw.take_Reference_with_parameter_in_batch_ext(plw._admin_us_refGenerateRefName(),plw._admin_us_refGenerateProjectFilter(),plw._admin_us_refGeneratePortfolioFilter(),plw._admin_us_refBatchIsInBulkMode());
 
//script to use in the reference batch BMX_LBE_REFREEZE_LIMITED
Namespace _baselineBatch;
plw.take_Reference_with_parameter_in_batch_ext(plw._admin_us_refGenerateRefName(),plw._admin_us_refGenerateProjectFilter(),plw._admin_us_refGeneratePortfolioFilter(),plw._admin_us_refBatchIsInBulkMode());
 
//script to use in the reference batch BMX_LBE_ACTIVE_PROJECTS
Namespace _baselineBatch;
plw.take_Reference_with_parameter_in_batch_ext(plw._admin_us_refGenerateRefName(),plw._admin_us_refGenerateProjectFilter(),plw._admin_us_refGeneratePortfolioFilter(),plw._admin_us_refBatchIsInBulkMode());
 
//script to use in the reference batch BMX_LBE_CLOSED_WITH_ACTUALS
Namespace _baselineBatch;
plw.take_Reference_with_parameter_in_batch_ext(plw._admin_us_refGenerateRefName(),plw._admin_us_refGenerateProjectFilter(),plw._admin_us_refGeneratePortfolioFilter(),plw._admin_us_refBatchIsInBulkMode());
 
//script to use in the reference batch BMX_LBE_REFREEZE_LIMITED
Namespace _baselineBatch;
plw.take_Reference_with_parameter_in_batch_ext(plw._admin_us_refGenerateRefName(),plw._admin_us_refGenerateProjectFilter(),plw._admin_us_refGeneratePortfolioFilter(),plw._admin_us_refBatchIsInBulkMode());
 
//script to use in the reference batch BMX_LBE_CLOSED_WITH_ACTUALS
Namespace _baselineBatch;
plw.take_Reference_with_parameter_in_batch_ext(plw._admin_us_refGenerateRefName(),plw._admin_us_refGenerateProjectFilter(),plw._admin_us_refGeneratePortfolioFilter(),plw._admin_us_refBatchIsInBulkMode());
 
//script to use in the reference batch BMX_LBE_ACTIVE_PROJECTS
Namespace _baselineBatch;
plw.take_Reference_with_parameter_in_batch_ext(plw._admin_us_refGenerateRefName(),plw._admin_us_refGenerateProjectFilter(),plw._admin_us_refGeneratePortfolioFilter(),plw._admin_us_refBatchIsInBulkMode());
 
//script to use in the reference batch BMX_LBE_ACTIVE_PROJECTS
Namespace _baselineBatch;
plw.take_Reference_with_parameter_in_batch_ext(plw._admin_us_refGenerateRefName(),plw._admin_us_refGenerateProjectFilter(),plw._admin_us_refGeneratePortfolioFilter(),plw._admin_us_refBatchIsInBulkMode());
 
//script to use in the reference batch BMX_LBE_CLOSED_WITH_ACTUALS
Namespace _baselineBatch;
plw.take_Reference_with_parameter_in_batch_ext(plw._admin_us_refGenerateRefName(),plw._admin_us_refGenerateProjectFilter(),plw._admin_us_refGeneratePortfolioFilter(),plw._admin_us_refBatchIsInBulkMode());
 
//script to use in the reference batch BMX_LBE_REFREEZE_LIMITED
Namespace _baselineBatch;
plw.take_Reference_with_parameter_in_batch_ext(plw._admin_us_refGenerateRefName(),plw._admin_us_refGenerateProjectFilter(),plw._admin_us_refGeneratePortfolioFilter(),plw._admin_us_refBatchIsInBulkMode());
 
//script to use in the reference batch BMX_LBE_ACTIVE_PROJECTS
Namespace _baselineBatch;
plw.take_Reference_with_parameter_in_batch_ext(plw._admin_us_refGenerateRefName(),plw._admin_us_refGenerateProjectFilter(),plw._admin_us_refGeneratePortfolioFilter(),plw._admin_us_refBatchIsInBulkMode());
 
//script to use in the reference batch BMX_LBE_CLOSED_WITH_ACTUALS
Namespace _baselineBatch;
plw.take_Reference_with_parameter_in_batch_ext(plw._admin_us_refGenerateRefName(),plw._admin_us_refGenerateProjectFilter(),plw._admin_us_refGeneratePortfolioFilter(),plw._admin_us_refBatchIsInBulkMode());
 
//script to use in the reference batch BMX_LBE_REFREEZE_LIMITED
Namespace _baselineBatch;
plw.take_Reference_with_parameter_in_batch_ext(plw._admin_us_refGenerateRefName(),plw._admin_us_refGenerateProjectFilter(),plw._admin_us_refGeneratePortfolioFilter(),plw._admin_us_refBatchIsInBulkMode());
 
//script to use in the reference batch BMX_LBE_ACTIVE_PROJECTS
Namespace _baselineBatch;
plw.take_Reference_with_parameter_in_batch_ext(plw._admin_us_refGenerateRefName(),plw._admin_us_refGenerateProjectFilter(),plw._admin_us_refGeneratePortfolioFilter(),plw._admin_us_refBatchIsInBulkMode());
 
//script to use in the reference batch BMX_LBE_CLOSED_WITH_ACTUALS
Namespace _baselineBatch;
plw.take_Reference_with_parameter_in_batch_ext(plw._admin_us_refGenerateRefName(),plw._admin_us_refGenerateProjectFilter(),plw._admin_us_refGeneratePortfolioFilter(),plw._admin_us_refBatchIsInBulkMode());
 
//script to use in the reference batch BMX_LBE_REFREEZE_LIMITED
Namespace _baselineBatch;
plw.take_Reference_with_parameter_in_batch_ext(plw._admin_us_refGenerateRefName(),plw._admin_us_refGenerateProjectFilter(),plw._admin_us_refGeneratePortfolioFilter(),plw._admin_us_refBatchIsInBulkMode());
 
//script to use in the reference batch BMX_LBE_ACTIVE_PROJECTS
Namespace _baselineBatch;
plw.take_Reference_with_parameter_in_batch_ext(plw._admin_us_refGenerateRefName(),plw._admin_us_refGenerateProjectFilter(),plw._admin_us_refGeneratePortfolioFilter(),plw._admin_us_refBatchIsInBulkMode());
 
//script to use in the reference batch BMX_LBE_CLOSED_WITH_ACTUALS
Namespace _baselineBatch;
plw.take_Reference_with_parameter_in_batch_ext(plw._admin_us_refGenerateRefName(),plw._admin_us_refGenerateProjectFilter(),plw._admin_us_refGeneratePortfolioFilter(),plw._admin_us_refBatchIsInBulkMode());
 
//script to use in the reference batch BMX_LBE_REFREEZE_LIMITED
Namespace _baselineBatch;
plw.take_Reference_with_parameter_in_batch_ext(plw._admin_us_refGenerateRefName(),plw._admin_us_refGenerateProjectFilter(),plw._admin_us_refGeneratePortfolioFilter(),plw._admin_us_refBatchIsInBulkMode());
 
//script to use in the reference batch BMX_LBE_REFREEZE_LIMITED
Namespace _baselineBatch;
plw.take_Reference_with_parameter_in_batch_ext(plw._admin_us_refGenerateRefName(),plw._admin_us_refGenerateProjectFilter(),plw._admin_us_refGeneratePortfolioFilter(),plw._admin_us_refBatchIsInBulkMode());
 
//script to use in the reference batch BMX_LBE_ACTIVE_PROJECTS
Namespace _baselineBatch;
plw.take_Reference_with_parameter_in_batch_ext(plw._admin_us_refGenerateRefName(),plw._admin_us_refGenerateProjectFilter(),plw._admin_us_refGeneratePortfolioFilter(),plw._admin_us_refBatchIsInBulkMode());
 
//script to use in the reference batch BMX_LBE_CLOSED_WITH_ACTUALS
Namespace _baselineBatch;
plw.take_Reference_with_parameter_in_batch_ext(plw._admin_us_refGenerateRefName(),plw._admin_us_refGenerateProjectFilter(),plw._admin_us_refGeneratePortfolioFilter(),plw._admin_us_refBatchIsInBulkMode());
 
//script to use in the reference batch BMX_LBE_REFREEZE_LIMITED
Namespace _baselineBatch;
plw.take_Reference_with_parameter_in_batch_ext(plw._admin_us_refGenerateRefName(),plw._admin_us_refGenerateProjectFilter(),plw._admin_us_refGeneratePortfolioFilter(),plw._admin_us_refBatchIsInBulkMode());
 
//script to use in the reference batch BMX_LBE_ACTIVE_PROJECTS
Namespace _baselineBatch;
plw.take_Reference_with_parameter_in_batch_ext(plw._admin_us_refGenerateRefName(),plw._admin_us_refGenerateProjectFilter(),plw._admin_us_refGeneratePortfolioFilter(),plw._admin_us_refBatchIsInBulkMode());
 
//script to use in the reference batch BMX_LBE_CLOSED_WITH_ACTUALS
Namespace _baselineBatch;
plw.take_Reference_with_parameter_in_batch_ext(plw._admin_us_refGenerateRefName(),plw._admin_us_refGenerateProjectFilter(),plw._admin_us_refGeneratePortfolioFilter(),plw._admin_us_refBatchIsInBulkMode());
 
//script to use in the reference batch BMX_LBE_REFREEZE_LIMITED
Namespace _baselineBatch;
plw.take_Reference_with_parameter_in_batch_ext(plw._admin_us_refGenerateRefName(),plw._admin_us_refGenerateProjectFilter(),plw._admin_us_refGeneratePortfolioFilter(),plw._admin_us_refBatchIsInBulkMode());
 
//
// export en OJS des scripts présents dans les fichiers communs de paramétrage SANOFI et ceux de processes dans des répertoires séparés
//
var userDir = "./ojs/";  // stocké dans /software/plw/v6.1.2a/INTE/modules/ojs
var procDir = "./ojs/processes/";  // stocké dans /software/plw/v6.1.2a/INTE/modules/ojs/processes
var ofs;

for (var x in "OpxJavascript".findClass()) {
	var scriptName = x.name;
	var scriptFile = x.file.index;

	// ne stocke pas les scripts présents dans les fichiers d'environnement utilisateur, groupe ou site
	if (scriptName == "" || scriptFile.indexOf("@") != undefined) continue;

	// pour séparer les scripts processes des autres, on tient compte de leur appartenance à une liste de fichiers communs SANOFI
	var exportDir = (x.file.processes  ? procDir:userDir);

	// export
	ofs = new fileOutputStream (exportDir + scriptName.ToLowerCase() + ".ojs", "OVERWRITE");
	ofs.write(x.data.toString());
	ofs.close();
}

//
// export en OJS des scripts présents dans les fichiers communs de paramétrage SANOFI et ceux de processes dans des répertoires séparés
//
var userDir = "./ojs/";  // stocké dans /software/plw/v6.1.2a/INTE/modules/ojs
var procDir = "./ojs/processes/";  // stocké dans /software/plw/v6.1.2a/INTE/modules/ojs/processes
var ofs;

for (var x in "OpxJavascript".findClass()) {
	var scriptName = x.name;
	var scriptFile = x.file.index;

	// ne stocke pas les scripts présents dans les fichiers d'environnement utilisateur, groupe ou site
	if (scriptName == "" || scriptFile.indexOf("@") != undefined) continue;

	// pour séparer les scripts processes des autres, on tient compte de leur appartenance à une liste de fichiers communs SANOFI
	var exportDir = (x.file.processes  ? procDir:userDir);

	// export
	ofs = new fileOutputStream (exportDir + scriptName.ToLowerCase() + ".ojs", "OVERWRITE");
	ofs.write(x.data.toString());
	ofs.close();
}

 
//script to use in the batch
Namespace _impexTarget;
var plc.impextarget target = plc.impextarget.get("BMX_TARGET_ACTUAL:CSV file format");
if(Target instanceOf plc.ImpexTarget){
var plc.impexformat format = plc.impexformat.get("Actual expenditure:BMX_FOR_IMPORT_SAP_ACTUAL");
plw.DoImportWithFormatAndTarget(this : Format,Target,true);
} 
//sc3344 v3.6
//this script is an example of how to create an ranking attribute.
//
//The patch declares and defines the OPXscript function 'createRankingAttribute'
//This function takes the following argument :
//****** class            ; string   ; mandatory
//****** attributeName    ; string   ; mandatory
//****** filter           ; string   ; mandatory
//****** newAttributeName ; string   ; mandatory
//****** newAttributeDesc ; string   ; optional
//****** sorting          ; boolean  ; optional  ; if TRUE, the ranking is sorted in decreasing order.
//****** insideProject    ; boolean  ; optional  ; if TRUE, the computation of the ranking attribute is limited to the same project
//
//
//In this example, the ranking att
//

//*********************************************************
//attribute used as a reference for the ranking computation
var attributeName = "HIERARCHICAL_CODE";

//name of the new attribute on the selected class
var newActivityID = "MSP_ID";

//filter on the selected class.
//Any activity that doesnt verify this filter is not included in the ranking computation.
//In this case, the ranking attribute returns undefined
var filter = "";

//Label of the new attribute
var newActivityIdDesc = "Task ID";

//**********************************************************
//creation of this new attribute
var newActivityIdSlot = "OpxActivity".findClass().getSlot(newActivityID);

if newActivityIdSlot==undefined
createRankingAttribute("OpxActivity",attributeName,filter,newActivityID,newActivityIdDesc,newActivityIdDesc,false,true);


//sc3344 v3.6
//this script is an example of how to create an ranking attribute.
//
//The patch declares and defines the OPXscript function 'createRankingAttribute'
//This function takes the following argument :
//****** class            ; string   ; mandatory
//****** attributeName    ; string   ; mandatory
//****** filter           ; string   ; mandatory
//****** newAttributeName ; string   ; mandatory
//****** newAttributeDesc ; string   ; optional
//****** sorting          ; boolean  ; optional  ; if TRUE, the ranking is sorted in decreasing order.
//****** insideProject    ; boolean  ; optional  ; if TRUE, the computation of the ranking attribute is limited to the same project
//
//
//In this example, the ranking att
//

//*********************************************************
//attribute used as a reference for the ranking computation
var attributeName = "HIERARCHICAL_CODE";

//name of the new attribute on the selected class
var newActivityID = "MSP_ID";

//filter on the selected class.
//Any activity that doesnt verify this filter is not included in the ranking computation.
//In this case, the ranking attribute returns undefined
var filter = "";

//Label of the new attribute
var newActivityIdDesc = "Task ID";

//**********************************************************
//creation of this new attribute
var newActivityIdSlot = "OpxActivity".findClass().getSlot(newActivityID);

if newActivityIdSlot==undefined
createRankingAttribute("OpxActivity",attributeName,filter,newActivityID,newActivityIdDesc,newActivityIdDesc,false,true);


 
/*
* Script V2
* Autor : Ludovic FAVRE
* JIRA : PC-2468  (Baselines)
* Date Creation 04/01/2021
*
* JIRA : PC-1417 & PC-4001 ('Vaccine Project Category' and "Vaccine Project Sub-category" manual values are set back to the calculated value after the Monthly Baseline has runned). 
* JIRA : PC-4543 - Change file & dataset class for _L1_PT_REF_ADMIN (SAN_CF_RDPM_COMMON_DATA_VACCINES/Continuum.RDPM.Pasteur for Vaccines & SAN_CF_RDPM_COMMON_DATA_PHARMA/Continuum.RDPM.Pharma for Pharma)
* JIRA : PC-4692 - Limit Study baselines to Pharma Projects
* Date Modification : 19/09/2021 by Ludovic FAVRE
*
* JIRA : PC-470 - Modification YEARLY to YEARLY_VACCINES
* Date Modification : 28/10/2021 by Amine Bekkal
*
* JIRA : PC-1820 - Create/update a simulation (Limit the study baseline to be applied only to active projects)
* Date Modification : 20/12/2021 by Amine Bekkal
*
* JIRA : PC-5556 - Store the study baseline date on study at study baseline creation
* Date Modification : 31/01/2022 by Ludovic FAVRE
*
* JIRA : PC-746 - Modification Vaccine Monthly Baseline
* Date Modification : 14/03/2022 by Amine Bekkal
*
* JIRA : PC-5888 - Yearly baseline Vaccines : Update the Approved baseline with the new ref, not the rolling one 
* Date Modification : 23/03/2022 by David
*/

namespace _rdpm_baseline;

function san_rdpm_js2_create_monthly_baseline()
{
	var ref_name=context.SAN_RDPM_UA_OC_S_MONTHLY_BASELINE_NAME;
	var ref_obj = plc._L1_PT_REF_ADMIN.get(ref_name);
	var date_of_day = new date();
	
	if (ref_obj instanceof plc._L1_PT_REF_ADMIN)
	{
		plw.writeln("Reference already exist! : "+ref_obj);
	}
	else
	{
	    //PC-746: Add SAN_RDPM_UA_D_CREATION_DATE=date of the day for the creation of the new baseline
		ref_obj = new plc._L1_PT_REF_ADMIN (NAME : ref_name,DESC : ref_name,_L1_AA_S_REF_TEMPLATE : "SAN_RDPM_MONTHLY_BASELINE",_L1_AA_B_REF_IS_LOADED : true,_L1_AA_S_REF_PRJTYP : "Continuum.RDPM.Pasteur",FILE : "SAN_CF_RDPM_COMMON_DATA_VACCINES", SAN_RDPM_UA_D_CREATION_DATE : date_of_day);	
		plw.writeln("Creation a new Reference : "+ref_obj);
	} 
	
	return ref_name;
}

function san_rdpm_js2_create_yearly_baseline_name()
{
	var ref_name = context.SAN_RDPM_UA_OC_S_YEARLY_BASELINE_NAME;
	var ref_obj = plc._L1_PT_REF_ADMIN.get(ref_name);


	if (ref_obj instanceof plc._L1_PT_REF_ADMIN)
	{
		plw.writeln("Reference already exist! : "+ref_obj);
	}
	else
	{
	    //PC-746: Do not load backup yearly baseline [_L1_AA_B_REF_IS_LOADED =fasle]
		ref_obj = new plc._L1_PT_REF_ADMIN (NAME : ref_name,DESC : ref_name,_L1_AA_S_REF_TEMPLATE : "SAN_RDPM_YEARLY_BASELINE",_L1_AA_B_REF_IS_LOADED : false,_L1_AA_S_REF_PRJTYP : "Continuum.RDPM.Pasteur",FILE : "SAN_CF_RDPM_COMMON_DATA_VACCINES");	
		plw.writeln("Creation a new Reference : "+ref_obj);

	}
    // PC-470 :  Modification YEARLY to YEARLY_VACCINES
	var ybase = plc._L1_PT_REF_ADMIN.get("YEARLY_VACCINES"); 
	if (ybase instanceof plc._L1_PT_REF_ADMIN)
	{
		ybase._L1_AA_S_REF_BKUP_NAME=ref_name;
	}	
	else
	{
		plw.writeln("YEARLY_VACCINES Baseline does not exist!");
	}
	
	return "YEARLY_VACCINES";
}

var date = new date();

/*
*** PHARMA *****
*/

// Monthly Baseline
if (context.SAN_RDPM_UA_OC_D_PHARMA_BASELINE_DATE!=undefined && "PRINT_DATE".call(date,"DD-MM-YYYY")=="PRINT_DATE".call(context.SAN_RDPM_UA_OC_D_PHARMA_BASELINE_DATE,"DD-MM-YYYY"))
{
	//var month_number = 12;
	var month_number = "MONTH_NUMBER".call(date);
	var month_number_string = month_number.tostring();
	//var year_number =2020;
	var year_number = "YEAR_NUMBER".call(date);
	var year_number_string = year_number.tostring();

	// Baseline name
	var baseline_name_template = new hashtable("STRING");
	baseline_name_template.set("1","MONTHLY_"+year_number_string+"_01_PHARMA");
	baseline_name_template.set("2","MONTHLY_"+year_number_string+"_02_PHARMA");
	baseline_name_template.set("3","QUARTERLY_"+year_number_string+"_03_PHARMA");
	baseline_name_template.set("4","MONTHLY_"+year_number_string+"_04_PHARMA");
	baseline_name_template.set("5","MONTHLY_"+year_number_string+"_05_PHARMA");
	baseline_name_template.set("6","QUARTERLY_"+year_number_string+"_06_PHARMA");
	baseline_name_template.set("7","MONTHLY_"+year_number_string+"_07_PHARMA");
	baseline_name_template.set("8","MONTHLY_"+year_number_string+"_08_PHARMA");
	baseline_name_template.set("9","QUARTERLY_"+year_number_string+"_09_PHARMA");
	baseline_name_template.set("10","MONTHLY_"+year_number_string+"_10_PHARMA");
	baseline_name_template.set("11","MONTHLY_"+year_number_string+"_11_PHARMA");
	baseline_name_template.set("12","YEARLY_"+year_number_string+"_12_PHARMA");
	var Ref_Name =baseline_name_template.get(month_number_string);
	// Baseline desc
	var baseline_desc_template = new hashtable("STRING");
	baseline_desc_template.set("1","Monthly "+year_number_string+" January Pharma Baseline");
	baseline_desc_template.set("2","Monthly "+year_number_string+" February Pharma Baseline");
	baseline_desc_template.set("3","Quarterly "+year_number_string+" March Pharma Baseline (F1 preparation)");
	baseline_desc_template.set("4","Monthly "+year_number_string+" April Pharma Baseline");
	baseline_desc_template.set("5","Monthly "+year_number_string+" May Pharma Baseline");
	baseline_desc_template.set("6","Quarterly "+year_number_string+" June Pharma Baseline");
	baseline_desc_template.set("7","Monthly "+year_number_string+" July Pharma Baseline");
	baseline_desc_template.set("8","Monthly "+year_number_string+" August Pharma Baseline");
	baseline_desc_template.set("9","Quarterly "+year_number_string+" September Pharma Baseline (F2 / Budget preparation)");
	baseline_desc_template.set("10","Monthly "+year_number_string+" October Pharma Baseline");
	baseline_desc_template.set("11","Monthly "+year_number_string+" November Pharma Baseline");
	baseline_desc_template.set("12","Yearly "+year_number_string+" Pharma Baseline");
	var Ref_Desc = baseline_desc_template.get(month_number_string);
	//Baseline type
	var baseline_type="Monthly";
	if (month_number==12) baseline_type="Yearly";
	if (month_number==3 || month_number==6 || month_number==9) baseline_type="Quaterly";

	// Creation of the baseline
	var ref_obj = plc._L1_PT_REF_ADMIN.get(Ref_Name);
	if (ref_obj instanceof plc._L1_PT_REF_ADMIN)
	{
		plw.writeln("Reference already exist! : "+ref_obj);
	}
	else
	{
		ref_obj = new plc._L1_PT_REF_ADMIN (NAME : ref_name,
											DESC : Ref_Desc,
											_L1_AA_S_REF_TEMPLATE : "SAN_RDPM_MONTHLY_BASELINE",
											SAN_RDPM_UA_D_CREATION_DATE : date, 
											SAN_RDPM_UA_S_BASELINE_TYPE : baseline_type,
											_L1_AA_B_REF_IS_LOADED : true,
											_L1_AA_B_REF_IN_FORM : true,
											SAN_RDPM_UA_B_EXPIRABLE : true,
											_L1_AA_S_REF_PRJTYP : "Continuum.RDPM.Pharma",
											FILE : "SAN_CF_RDPM_COMMON_DATA_PHARMA");	
											
		plw.writeln("Creation a new Reference : "+ref_obj);
	} 
		
	// Creation of the reference on project
	var Project_Filter=context.SAN_RDPM_CS_S_PHARMA_BASELINE_PROJECT_FILTER;
	plw.writeln("Generate pharma monthly baseline : " + Ref_Name);
	context._write_transactions_in_log_=false;
	plw.take_Reference_with_parameter_in_batch_ext(Ref_Name,Project_Filter,"",true);
	context._write_transactions_in_log_=true;
	
	// Update description of baseline
	for (var ref in plc.Reference where ref.name==Ref_Name)
	{
		ref.desc=Ref_Desc;
	}
	
	// Update customer setting & deactivate loading of old baselines
	// Deactivate loading of previous monthly and update last monthly baseline
	var previous_monthly_baseline_name = context.SAN_RDPM_CS_LAST_MONTHLY_PHARMA;
	var previous_monthly_baseline_obj = plc._L1_PT_REF_ADMIN.get(previous_monthly_baseline_name);
	if (previous_monthly_baseline_obj instanceof plc._L1_PT_REF_ADMIN && previous_monthly_baseline_obj.SAN_RDPM_UA_S_BASELINE_TYPE=="Monthly")previous_monthly_baseline_obj._L1_AA_B_REF_IS_LOADED=false;
	context.SAN_RDPM_CS_LAST_MONTHLY_PHARMA = Ref_Name;
	// Deactivate loading of previous yearly and update last yearly baseline
	if (month_number==12)
	{
		var previous_yearly_baseline_name = context.SAN_RDPM_CS_LAST_YEARLY_PHARMA;
		var previous_yearly_baseline_obj = plc._L1_PT_REF_ADMIN.get(previous_yearly_baseline_name);
		if (previous_yearly_baseline_obj instanceof plc._L1_PT_REF_ADMIN) previous_yearly_baseline_obj._L1_AA_B_REF_IS_LOADED=false;
		context.SAN_RDPM_CS_LAST_YEARLY_PHARMA = Ref_Name;
	}
	// Deactivate loading of previous quaterly and update last quaterly baseline
	if (month_number==3 || month_number==6 || month_number==9 || month_number==12)
	{
		var previous_quaterly_baseline_name = context.SAN_RDPM_CS_LAST_QUATERLY_PHARMA;
		var previous_quaterly_baseline_obj = plc._L1_PT_REF_ADMIN.get(previous_quaterly_baseline_name);
		if (previous_quaterly_baseline_obj instanceof plc._L1_PT_REF_ADMIN && previous_quaterly_baseline_obj.SAN_RDPM_UA_S_BASELINE_TYPE=="Quaterly") previous_quaterly_baseline_obj._L1_AA_B_REF_IS_LOADED=false;
		context.SAN_RDPM_CS_LAST_QUATERLY_PHARMA = Ref_Name;
	}
	
}

// Vaccines


/*
VACCINES
*/

// Monthly Baseline
if (context.SAN_RDPM_UA_OC_D_VACCINES_MONTHLY_BASELINE_DATE!=undefined && "PRINT_DATE".call(date,"DD-MM-YYYY")=="PRINT_DATE".call(context.SAN_RDPM_UA_OC_D_VACCINES_MONTHLY_BASELINE_DATE,"DD-MM-YYYY"))
{
	var Ref_Name=san_rdpm_js2_create_monthly_baseline();
	var Ref_Obj =  plc._L1_PT_REF_ADMIN.get(Ref_Name);
	var Project_Filter=context.SAN_RDPM_CS_S_VACCINES_BASELINE_PROJECT_FILTER;
	plw.writeln("Generate vaccines monthly baseline : " + Ref_Name);
	context._write_transactions_in_log_=false;
	plw.take_Reference_with_parameter_in_batch_ext(Ref_Name,Project_Filter,"",true);
	context._write_transactions_in_log_=true;
	
	// Deactivate loading for previous baselines
		for (var reference in plc._L1_PT_REF_ADMIN)
	{
		reference.SAN_RDPM_UA_B_VACCINES_LOADED_BASELINE=false;	
		
	}
	Ref_Obj.SAN_RDPM_UA_B_VACCINES_LOADED_BASELINE=true;
	
	//PC-746 : At the end of the creation of new monthly baseline, untick _L1_AA_B_REF_IS_LOADED on all previous vaccines baselines
	for (var ref_vacc_monthly in plc._L1_PT_REF_ADMIN where ref_vacc_monthly.SAN_RDPM_UA_B_BASELINE_ADMIN_VACC_MONTHLY)
	{
		ref_vacc_monthly._L1_AA_B_REF_IS_LOADED =false;	
		
	}
	Ref_Obj._L1_AA_B_REF_IS_LOADED=true;
	
	
	
	// PC-1417 & PC-4001 : 'Vaccine Project Category' and "Vaccine Project Sub-category" manual values are set back to the calculated value after the Monthly Baseline has runned. 
	for(var o_project in plc.project where o_project.callbooleanformula(Project_Filter) )
    {
		if (o_project.SAN_RDPM_UA_PROJECT_PHASE != "" ) {
		    o_project.SAN_RDPM_UA_VACC_PROJ_CAT = o_project.SAN_RDPM_UA_PROJECT_PHASE.SAN_RDPM_UA_VACC_PROJ_CAT;
		    o_project.SAN_RDPM_UA_VACC_PROJ_SUB_CAT = o_project.SAN_RDPM_UA_PROJECT_PHASE.SAN_RDPM_UA_VACC_PROJ_SUB_CAT;
		}
		else { 
			o_project.SAN_RDPM_UA_VACC_PROJ_CAT="";
		    o_project.SAN_RDPM_UA_VACC_PROJ_SUB_CAT = "";
	    }
    }
}

// Yearly Baseline
if (context.SAN_RDPM_UA_OC_D_VACCINES_YEARLY_BASELINE_DATE!=undefined && "PRINT_DATE".call(date,"DD-MM-YYYY")=="PRINT_DATE".call(context.SAN_RDPM_UA_OC_D_VACCINES_YEARLY_BASELINE_DATE,"DD-MM-YYYY"))
{
	var Ref_Name=san_rdpm_js2_create_yearly_baseline_name();
	var Project_Filter=context.SAN_RDPM_CS_S_VACCINES_BASELINE_PROJECT_FILTER;
	plw.writetolog("Generate vaccines yearly baseline.");
	context._write_transactions_in_log_=false;
	plw.take_Reference_with_parameter_in_batch_ext(Ref_Name,Project_Filter,"",true);
	context._write_transactions_in_log_=true;
	plw.writetolog("Update approved baseline for Vaccines");
	// update the Approved baseline with the new ref, not the rolling one (PC-5888) 
	for(var vProj in plc.ordo_project where vProj.SAN_RDPM_B_RND_VACCINES_PROJECT==true && vProj.callbooleanformula(Project_Filter)==true)
	{
	    with(plw.no_locking) vProj.BUDGET_REFERENCE=Ref_Name;
	}
}


/*
STUDY BASELINES
*/
function san_rdpm_take_automatic_study_baseline(refName,refDesc,relation_name)
{
	
	var vHash = new hashtable();
	var parent_project="";
	var vHash_Obj="";
	var exception_formula="";
	var exception_formula = "";
	var baseline = plc._L1_PT_REF_ADMIN.get(refName);
	var study = "";
	var date = new date();
	
	// Get the list of project with the exception formula
	for (var vact in baseline.get(relation_name) where vact.PROJECT.STATE=="Active")
	{
	    if (vAct.SAN_RDPM_UA_B_STUDY_BASELINE_TAKEN)
	    {
	        vAct.SAN_RDPM_UA_S_AUTO_STUDY_BASELINE="";
	    }
	    else
	    {
    	    if (refName!="STUDY_BASELINE_2" || vact.SAN_UA_RDPM_B_STUDY_HAS_COUNTRY)
    	    {
    	        plw.writetolog("Processing baseline " + refName + " for activity "+vact);
        		parent_project=plc.project.get(vAct.project.SAN_RDPM_UA_PRJ_S_ROOT_PROJECT);
        		vHash_Obj=vHash.get(parent_project);
        		if (vHash_Obj!=undefined)
        		{
        			exception_formula="LIST_MERGE".call(vHash_Obj,vact.SAN_UA_RDPM_ACT_S_STUDY_ID);
        		}
        		else
        		{
        			exception_formula=vact.SAN_UA_RDPM_ACT_S_STUDY_ID;
        		}
        		vHash.set(parent_project,exception_formula);
        		with(plw.no_locking){
        		    vAct.SAN_RDPM_UA_B_STUDY_BASELINE_TAKEN=true;
            		if (refName=="MANUAL_STUDY_BASELINE")
            		    vAct.SAN_RDPM_UA_B_TAKE_STUDY_BASELINE=false;
            		    
        		}
    			
    			// PC-5556 - Set baseline creation date on study
    			study = plc.workstructure.get(vact.SAN_UA_RDPM_ACT_S_STUDY_ID);
    			if (study instanceof plc.workstructure)
    			{
    				with(plw.no_locking){
    					switch(refName)
    					{
    						case "STUDY_BASELINE_1" :
    						study.SAN_UA_RDPM_D_STUDY_BASELINE1_DATE=date;
    						break;
    						
    						case "STUDY_BASELINE_2" :
    						study.SAN_UA_RDPM_D_STUDY_BASELINE2_DATE=date;
    						break;
    						
    						case "STUDY_BASELINE_3" :
    						study.SAN_UA_RDPM_D_STUDY_BASELINE3_DATE=date;
    						break;
    						
    						case "MANUAL_STUDY_BASELINE" :
    						study.SAN_UA_RDPM_D_STUDY_BASELINE4_DATE=date;
    						break;						
    						
    					}					
    				}
    			}
    			
    	    }
    	}
	}
	
	// Take baseline with the exception formula for identified projects
	for (var prjObj in vHash)
	{
		exception_formula=plw.compile_reference_activity_filter(refName,prjObj,vHash.get(prjObj));
		// Check baseleine exist
		var plc.reference baseline_to_update = plw._PM_Getreference(prjObj,refName);
		var boolean update = ( baseline_to_update instanceof plc.reference ) ? true : false;
		if (update)
			 plw._pm_updateReference(prjObj,baseline_to_update,exception_formula);
		// Create baseline if it does not exist
		else
		   plw.create_reference_with_parameter(refName,refDesc,prjObj,false,exception_formula);
	}
}

// Automatic beselines
san_rdpm_take_automatic_study_baseline("STUDY_BASELINE_1","Study Baseline 1","USER_ATTRIBUTE_INVERSE_SAN_RDPM_UA_S_AUTO_STUDY_BASELINE.WORK-STRUCTURE");
san_rdpm_take_automatic_study_baseline("STUDY_BASELINE_2","Study Baseline 2","USER_ATTRIBUTE_INVERSE_SAN_RDPM_UA_S_AUTO_STUDY_BASELINE.WORK-STRUCTURE");
san_rdpm_take_automatic_study_baseline("STUDY_BASELINE_3","Study Baseline 3","USER_ATTRIBUTE_INVERSE_SAN_RDPM_UA_S_AUTO_STUDY_BASELINE.WORK-STRUCTURE");
// Manual Baseline
san_rdpm_take_automatic_study_baseline("MANUAL_STUDY_BASELINE","Manual Study Baseline","USER_ATTRIBUTE_INVERSE_SAN_RDPM_UA_S_MANUAL_STUDY_BASELINE.WORK-STRUCTURE");

// Delete old Pharma baselines
 with ( plw.no_alerts){
    for (var vRef in plc.Reference where vRef.SAN_RDPM_UA_B_PHARMA_BASELINE && vRef.SAN_RDPM_UA_B_EXPIRABLE && vRef.SAN_RDPM_UA_D_EXPIRATION_DATE<=date)
    {
    	vRef.delete();
    }
    for (var vBaseline in plc._L1_PT_REF_ADMIN where vBaseline.SAN_RDPM_UA_B_EXPIRABLE && vBaseline.SAN_RDPM_UA_D_EXPIRATION_DATE<=date)
    {
    	vBaseline.delete();
    }
}
 
// 
//  PLWSCRIPT : SAN_CONTINUUM_JS2_COMMON_FUNCTIONS
//  Common functions for Continuum
//
//  v1.0 - 2021/03/16 - David
//  Add to define if a batch must be run or not (PC3436)
//
//***************************************************************************/
namespace _san_continuum;

// PC3436 : for PLW monitoring all batches are set to daily and the periodicity is defined when calling this function
// the function return true if the batch have to run today or false if not. Les 1st arg is mandatory, not the others
// vPeriod : periodicity of the batch 
// - vPeriod=daily or ""
// other arguments are useless
// - vPeriod=weekly
// arg2 : number of period between 2 batches (every X weeks)
// arg3 : list of days of the week the batch must run (0=SUN,1=MON,2=TUE,...,6=SAT)
// ex: san_js_check_run_batch("weekly",2,[1]) -> every 2 weeks on Monday
// - vPeriod=monthly
// arg2 : number of period between 2 batches (every X months)
// arg3 : List of 1 element defining the day of the month the batch must run (between 1 to 31, the first element only is taken into account)
// ex : san_js_check_run_batch("monthly",1,[15]) -> the 15th of every month
function san_js_check_run_batch(string vPeriod, arg2 : 1, arg3 : [1])
{
	var boolean vResult=false;
	var date vToday=new date();
	var string vLog=" -- BATCH TO RUN -- ";
	plw.writetolog(vLog+"arguments : "+vPeriod+" / "+arg2+" / "+arg3);
	if (vPeriod=="" || vPeriod=="daily")
	{
		vResult=true;
		plw.writetolog(vLog+"Freq : daily "); 
	}
	else if (vPeriod=="weekly")
	{
		if (arg2 instanceof number && arg2>0 && arg3.length>0)
		{
			plw.writetolog(vLog+"Freq : every "+arg2.tostring("####")+" week(s), day numbers : "+arg3.join(",") );
			var vWeekNumber="WEEK_NUMBER".CallMacro(vToday);
			plw.writetolog(vLog+"Today's week number : "+vWeekNumber.tostring("####"));
			// check if the rest of division by arg2 is 0
			if (vWeekNumber instanceof number && vWeekNumber%arg2==0)
			{
				//check the day number
				for (var vDayNum in arg3)
				{
					var vDayOK="DAY_OF_WEEK".callmacro(vToday,vDayNum);
					if (vDayOK.tostring("DD-MM-YYYY")==vToday.tostring("DD-MM-YYYY"))
					{
						vResult=true;
						break;
					}
				}
			}
		}
	}
	else if (vPeriod=="monthly")
	{
		if (arg2 instanceof number && arg2>0 && arg3.length>0 && arg3[0] instanceof number)
		{
			plw.writetolog(vLog+"Freq : every "+arg2+" month(s), day number : "+arg3[0].tostring("####") );
			var vMonthNumber=vToday.getmonth();
			plw.writetolog(vLog+"Today's month number : "+vMonthNumber.tostring("####"));
			// check if the rest of division by arg2 is 0
			if (vMonthNumber instanceof number && vMonthNumber%arg2==0)
			{
				//check the day
				var vDay=vToday.getdate();
				if (vDay==arg3[0])
					vResult=true;	
			}
		}
	}
	var vToRun=(vResult==true) ? "YES" : "NO";
	plw.writetolog(vLog+"TO RUN : "+vToRun);
	return vResult;
}

 
// PLWSCRIPT : updateuser
namespace _updateuser;

function LastConnectionDate(){
	
	// Compute where condition to retrieve all user connected yesterday
	var string s_date = context.callstringformula("PRINT_DATE(DATE_ADDTIMEUNIT($DATE_OF_THE_DAY,-1,\"DAY\"),\"DD-MM-YYYY\")");
	var date d_date = new date(s_date,"DD-MM-YYYY");
	var string s_whereclause = "whatnoun = 'starting new session' and opx2_when like '"+s_date+"T%'";
	plw.writeln("Date of the SAN_BA_USR_LAST_CON batch executing - "+d_date);
	plw.writeln("w7_log whereclause - "+s_whereclause);

	// Fetch the w7_log table to retrieve all user connected yesterday
	var v_vector = new vector();
	v_vector = plw.SqlSelect("w7_log",["distinct(whorealname)"],["string"],s_whereclause);

	// Update user table with last connection date
	for (var v_user in v_vector){
		var o_user = "OpxUser".get(v_user[0]);
		if( o_user instanceof plc.Opx2_User){
			
			plw.writeln("Last Connection Date of " +o_user.NAME+" : "+d_date); //example
			//create a user attribute on user class to store the last connection date
			with(plw.no_locking){o_user.SAN_UA_D_USR_LAST_CON = d_date;}
		}
	}
	return true;
}

_updateuser.LastConnectionDate(); 
//
//  PLWSCRIPT : SAN_GENERIC_DA_FCT
//
//  AUTHOR  : Manuel DOUILLET
//
//
//  Creation : 2020/09/21 MDO
//  Script used for dynamic attributes
//
//***************************************************************************/

//*************************
namespace _san_rdpm_dyn_attribute;
//**************************

var string BOOLEAN_TYPE = 'BOOLEAN';
var string DATE_TYPE = 'DATE';
var string STRING_TYPE = 'STRING';
var string NUMBER_TYPE = 'NUMBER';
 
var vector DA_DEFAULT_VALUE = [false,-1,0,""];

//Default value by type
function MyDefaultValueByType (type)
{
	switch(type)
	{
		case BOOLEAN_TYPE :
		return DA_DEFAULT_VALUE[0];
		break;

		case DATE_TYPE :
		return DA_DEFAULT_VALUE[1];
		break;

		case NUMBER_TYPE :
		return DA_DEFAULT_VALUE[2];
		break;

		case STRING_TYPE :
		return DA_DEFAULT_VALUE[3];
		break;
		
		default:
		return undefined;
		break;
	}
}

//Generic reader
function san_wbs_cascading_slot_reader(string field, string storage_field,type)
{
    if(this instanceof plc.work_structure && this!=undefined)
    {
        // Depending on field type, set the default value
        var default_value;
		
		default_value = MyDefaultValueByType(type);
		
        // Look on 'storage_field'
		if (default_value != undefined)
		{
			if(this.get(storage_field)==default_value)
			{
				if(this.wbs_element instanceof plc.work_structure && this.wbs_element!=undefined)
				{
					return this.wbs_element.get(field);
				}
				else
				{
					return default_value;
				}
			}
			else
			{
				return this.get(storage_field);
			}
		}
    } 
	return undefined;
}

//Generic modifier
function san_wbs_cascading_slot_modifier(string storage_field, value)
{
    if(this instanceof plc.work_structure && this!=undefined)
    {
        this.set(storage_field,value);
    }
}

//Generic locker
function san_field_slot_locker()
{
    return false;
}

//Generic DA creation
function san_create_dynamic_attribute(plwclass, string newDA, string type, string newComment, reader, modifier, locker)
{
    try
	{
        var slot = new objectAttribute(plwclass, newDA, type);
        slot.Comment = newComment;
        slot.Reader = reader;
        slot.Modifier = modifier;
        slot.Locker = locker;
        slot.hiddenInIntranetServer = false;
        slot.connecting = false;
    }
    catch(error e)
	{
        plw.writeln("Could not create slot due to error: " + e);
    }
} 
// 
//  PLWSCRIPT : SAN_J2S_BATCH_RDPM_AUTOPROGRESS
// 
//  AUTHOR  : L. FAVRE
//
//  Updated 08-DEC-2021 EP
//  PC-5207 - reschedule batch once a week due to performance issues
//
//  Updated 04-OCT-2021 LFA
//  PC-4673 - Limit to Pharma Projects until Vaccines Projects are fully migrated
//
//  Updated 01-FEB-2021 FLC
//  Add fromobject on Active & Simulation projects
//
//  Updated 22-FEB-2021 MDO 
//  Replaced vAct.PD=date; with vAct.PD=vAct.SAN_RDPM_UA_D_AUTOPROGRESS_DATE;
//
//  Updated 07-JUN-2021 IGU 
//  Add a try catch to manage errors (unknown activities)
//
// Updated 02-MAR-2022 ABE
// PC-5046 : Apply auto-progress for Pharma & Vaccine projects => Replace Continuum.RDPM.Pharma by Continuum.RDPM
//***************************************************************************/

namespace _batch_san_ba_rdpm_pha;

var date = new date();
var today="DAY".call(date);
var sunday_date = "DAY_OF_WEEK".call(date,0);
var boolean is_sunday=false;
if (today==sunday_date) is_sunday=true;
var string result="Is today a sunday? --> "+is_sunday;
plw.writetolog("");
plw.writetolog("Is today a sunday? --> "+result);

if (is_sunday) {
	plw.writetolog("");
	plw.writetolog("###################################################");
	plw.writetolog("");
	plw.writetolog("SUNDAY: Start treatment in SAN_J2S_BATCH_RDPM_AUTOPROGRESS...");
	var list = [];
	
	// Loop on Projects: restrict loop to Active & Simulation projects only
	// PC-4673 - Limit to Pharma Projects until Vaccines Projects are fully migrated
	// PC-5046 : Apply auto-progress for Pharma & Vaccine projects => Replace Continuum.RDPM.Pharma by Continuum.RDPM
	var o_project_type_filter = plw.objectset(plc.project_type.get("Continuum.RDPM"));
	with(o_project_type_filter.fromobject())
	{
		for(var o_project in plc.project where o_project.DELETED==false  && (o_project.STATE=="Active" || o_project.STATE=="Simulation"))
		{
			list.push(o_project);
		}
	}
	
	var filter = plw.objectset(list);
	with(filter.fromobject()) {
		for (var vAct in plc.workstructure where vAct.SAN_UA_RDPM_B_AUTOPROGRESS) {
			try {	
				if (vAct.SAN_UA_RDPM_B_PF_BEFORE_TIME_NOW) {
					vAct.callmacro("CONFIRMPROGRESS");
				}
				else {
					if (vAct.PD<vAct.SAN_RDPM_UA_D_AUTOPROGRESS_DATE) {
						vAct.PD=vAct.SAN_RDPM_UA_D_AUTOPROGRESS_DATE;
					}
				}
			}
			catch(error e){
				if(e != undefined){plw.writetolog(e); e.printStacktrace();}
			}
		}
	}
	
	plw.writetolog("End of treatment in SAN_J2S_BATCH_RDPM_AUTOPROGRESS.");
	plw.writetolog("");
	plw.writetolog("###################################################");
	plw.writetolog("");
	
	// Recompute dates on projects
	// !!! USELESS !!!
	//for (var vProj in list)
	//{
		//	vProj.callmacro("RECOMPUTE-DATES");
	//}
}
else {
	plw.writetolog("");
	plw.writetolog("###################################################");
	plw.writetolog("");
	plw.writetolog("Not sunday, do not run batch SAN_BA_RDPM_AUTOPROGRESS");
	plw.writetolog("");
	plw.writetolog("###################################################");
} 
namespace _san_chc_decomissioning;

var v_deleted_projects = new vector();
var v_deleted_datasets = new vector();


//Delete identified CHC Global Settings stored in GLOBALSETTINGS
plw.writetolog('***** Deleting identified CHC Global Settings stored in GLOBALSETTINGS - BEGIN *****');
plc.globalsettings.get(117935319789).delete();
plc.globalsettings.get(117935319776).delete();
plc.globalsettings.get(143426081962).delete();
plw.writetolog('***** Deleting identified CHC Global Settings stored in GLOBALSETTINGS - END *****');

//Delete identified CHC attribute values stored in GLOBALSETTINGS
plw.writetolog('***** Deleting identified CHC attribute values stored in GLOBALSETTINGS - BEGIN *****');
plc._ATV_PT_ATT_VAL.get(119267005060).delete();
plc._ATV_PT_ATT_VAL.get(119267029960).delete();
plc._ATV_PT_ATT_VAL.get(119267031060).delete();
plw.writetolog('***** Deleting identified CHC attribute values stored in GLOBALSETTINGS - END *****');

//Delete CHC objects that are not stored in CHC files
plw.writetolog('***** Deleting CHC objects that are not stored in CHC files - BEGIN *****');
plc._L1_PT_DCR.get(310242037941).delete();				//SAN_CHC_DMR_COUNTRY_FILTER
plc.USER_NEW_ATTRIBUTE.get(283130858941).delete();		//SAN_UA_B_CHC_DISABLE_NOTIFICATION
plc.USER_NEW_ATTRIBUTE.get(283130860941).delete();		//SAN_UA_B_CHC_PROD_DB
plc.USER_NEW_ATTRIBUTE.get(283130859441).delete();		//SAN_UA_B_CHC_SEND_BUS_EMAIL
plc.USER_NEW_ATTRIBUTE.get(283130859941).delete();		//SAN_UA_S_CHC_NON_PROD_NOTIFICATION_RECP
plc.USER_NEW_ATTRIBUTE.get(283130861441).delete();		//SAN_UA_B_SEND_MAIL_TO_BUS
plw.writetolog('***** Deleting CHC objects that are not stored in CHC files - END *****');

/** Managed through an SQL query: update ordo_project set name=concat(onb,'-',name), deleted=true, owner='intranet', group_read_only=null, group_read_write='R_ITS_ADMIN' where project_type=118060510356 or onb in (118064610156,118062341456,118061557056,142611837958);
//Tick CHC roadmaps/layouts as CHC projects
with([plw.no_locking,plw.no_alerts]){
	plc.ordo_project.get(118064610156).set('SAN_UA_CHC_B_CHC_PROJECT',true); //Gate plan
	plc.ordo_project.get(118062341456).set('SAN_UA_CHC_B_CHC_PROJECT',true); //CHC Timeline
	plc.ordo_project.get(118061557056).set('SAN_UA_CHC_B_CHC_PROJECT',true); //Macro Plan
	plc.ordo_project.get(142611837958).set('SAN_UA_CHC_B_CHC_PROJECT',true); //Dashboard
}

//Delete CHC projects
for(var o_prj in plc.ordo_project where o_prj.get('SAN_UA_CHC_B_CHC_PROJECT')==true){
	with([plw.no_locking,plw.no_alerts]){
		v_deleted_projects.push(o_prj.ONB);
		o_prj.set('READ_ONLY_GROUPS','');
		o_prj.set('READ_WRITE_GROUPS','R_ITS_ADMIN');
		o_prj.delete();
	}	
}*/

//Delete batch details that are related to CHC batches
plw.writetolog('***** Deleting batch details that are related to CHC batches - BEGIN *****');
var vector v_chc_datasets = ['SAN_CF_CHC_BATCH','SAN_CF_CHC_COMMON_DATA','SAN_CF_CHC_CONFIG_L1','SAN_CF_CHC_CONFIG_L2','SAN_CF_CHC_FORM_L1','SAN_CF_CHC_GLOBALSETTINGS','SAN_CF_CHC_HYPERDOCS','SAN_CF_CHC_MIG_DATA','SAN_CF_CHC_MIG_PARAM','SAN_CF_CHC_PEX','SAN_CF_CHC_PEX_BUSINESS','SAN_CF_CHC_PEX_WATERFALL','SAN_CF_CHC_PNL'];
for(var o_batch_detail in plc._BA_PT_BATCH_DETAILS where o_batch_detail._INF_RA_BATCH.FILE.printattribute() in v_chc_datasets){
	with([plw.no_locking,plw.no_alerts]){
		o_batch_detail.delete();
	}
}
plw.writetolog('***** Deleting batch details that are related to CHC batches - END *****');

//Delete CHC common datasets
plw.writetolog('***** Deleting CHC common datasets - BEGIN *****');
for(var o_dataset in plc.common_dataset where o_dataset.printattribute() in v_chc_datasets){
	with([plw.no_locking,plw.no_alerts]){
		v_deleted_datasets.push(o_dataset.ONB);
		o_dataset.set('READ_ONLY_GROUPS','');
		o_dataset.set('READ_WRITE_GROUPS','R_ITS_ADMIN');
		o_dataset.delete();
	}
}
plw.writetolog('***** Deleting CHC common datasets - END *****');

//Deactivate CHC users
plw.writetolog('***** Deactivating CHC users - BEGIN *****');
for(var o_user in plc.opx2_user where o_user.GROUPS_LIST.matchregexp('(M_CHC_IRIS|P_PM_CHC)') && !o_user.GROUPS_LIST.matchregexp('R_ITS_ADMIN|P_ADM')){
	with([plw.no_locking,plw.no_alerts]){
		o_user.set('OPX2_INTRANET_ACCESS',false);
		o_user.set('INACTIVE',true);
	}
}
plw.writetolog('***** Deactivating CHC users - END *****');

//Delete CHC groups
plw.writetolog('***** Deleting CHC groups - BEGIN *****');
var vector v_chc_groups = ['GISC','GISC_BUY','M_CHC_IRIS','OR_FUNCT_ADM_CHC','P_PM_CHC','OR_AMEA_IC','OR_CN_IC','OR_EU_IC','OR_EV_GENERATION','OR_HEADS_REVIEWERS','OR_IC','OR_LA_IC','OR_NA_IC','O_CHC_BD_PARTNERING'];
for(var s_chc_group in v_chc_groups){
	with([plw.no_locking,plw.no_alerts]){
		plc.user_group.get(s_chc_group).delete();
	}
}
plw.writetolog('***** Deleting CHC groups - END *****');

//Delete CHC modules
plw.writetolog('***** Deleting CHC modules - BEGIN *****');
plc._GUI_PT_MODULES.get(118060452156).delete();
plc._GUI_PT_MODULES.get(118061504756).delete();
plc._GUI_PT_MODULES.get(142640283156).delete();
plw.writetolog('***** Deleting CHC modules - END *****');

//Clean user groups common files
plw.writetolog('***** Cleaning user groups common files - BEGIN *****');
for(var o_group in plc.USER_GROUP where o_group.COMMON_FILES!=''){
	var v_common_files_old = o_group.COMMON_FILES.split(',');
	var v_common_files_new = new vector();
	
	for(var s_file in v_common_files_old){
		var o_file = plc.common_dataset.get(s_file);
		if(!o_file.get('?DELETED')){
			v_common_files_new.push(o_file.printattribute());
		}
	}
	with([plw.no_locking,plw.no_alerts]){
		o_group.set('COMMON_FILES',v_common_files_new.join(','));
	}
}
plw.writetolog('***** Cleaning user groups common files - END *****');


//Clean datasets common files and read/write groups
var s_monitor_message = "Cleaning common files...";
var nb_files = 0;
for(var o_dataset in plc.common_dataset){nb_files++;}

plw.writetolog('***** Cleaning datasets common files and read/write groups - BEGIN *****');
with([plw.monitoring(title: s_monitor_message, steps:nb_files),plw.no_locking,plw.no_alerts]){
	for(var o_dataset in plc.common_dataset){
		if(o_dataset.COMMON_FILES!=''){
			var v_common_files_old = o_dataset.COMMON_FILES.split(',');
			var v_common_files_new = new vector();
			
			for(var s_file in v_common_files_old){
				var o_file = plc.common_dataset.get(s_file);
				if(!o_file.get('?DELETED')){
					v_common_files_new.push(o_file.printattribute());
				}
			}
			o_dataset.set('COMMON_FILES',v_common_files_new.join(','));
		}
		if(o_dataset.READ_ONLY_GROUPS!=''){
			var v_groups_old = o_dataset.READ_ONLY_GROUPS.split(',');
			var v_groups_new = new vector();
			
			for(var s_group in v_groups_old){
				if(plc.user_group.get(s_group) instanceof plc.user_group){
					v_groups_new.push(s_group);
				}
			}
			o_dataset.set('READ_ONLY_GROUPS',v_groups_new.join(','));
		}
		if(o_dataset.READ_WRITE_GROUPS!=''){
			var v_groups_old = o_dataset.READ_WRITE_GROUPS.split(',');
			var v_groups_new = new vector();
			
			for(var s_group in v_groups_old){
				if(plc.user_group.get(s_group) instanceof plc.user_group){
					v_groups_new.push(s_group);
				}
			}
			o_dataset.set('READ_WRITE_GROUPS',v_groups_new.join(','));
		}
		s_monitor_message.monitor(nb_files);
	}
}
plw.writetolog('***** Cleaning datasets common files and read/write groups - END *****');

//Delete non used tempalte users
plw.writetolog('***** Deleting non used tempalte users - BEGIN *****');
plc.opx2_user.get('P_PM_CHC_TEMPLATE_USER').delete();
plc.opx2_user.get('P_MSP_TEMPLATE_USER').delete();
plw.writetolog('***** Deleting non CHC tempalte users - END *****'); 
//
//  PLWSCRIPT : SAN_JS2_DATAHUB_IMPORT
//
//  AUTHOR  : Islam GUEROUI
//
//  Modification : 2022/03/17 LFA
//  Add traces in log when an error occurs
//
//  Modification : 2022/01/18 ABO
//  Addition of two impex format 'SAN_RDPM_IMPEX_IMP_FORMAT_COUNTRY_GROUP' & 'SAN_RDPM_IMPEX_IMP_FORMAT_COUNTRY_COUNTRYGROUP_REL'
//
//  Modification : 2021/10/21 IGU
//  Fix email sending in case of import fail (PC-4786)
//
//  Modification : 2021/08/30 IGU
//  Add Vaccines Project codes import (PC-3867)
//
//  Modification : 2021/05/20 IGU
//  Add a try catch to send an email in case of import failure
//
//  Modification : 2021/04/09 Islam
//  JSON files are archived before importing it
//
//  Modification : 2021/03/16 Islam
//  Use the customer setting SAN_CS_PRIME_FOLDER to specify from which folder the import is done (PC-3442)
//
//  Modification : 2021/02/19 David
//  Use the attribute to compute the path according to the env (PC-2849)
//
//  Modification : 2021/01/18 David
//  Add san_create_date_folder and modify san_import_datahub_data to manage file archiving (PC-2849)
//
//  Modification : 2021/01/12 IGU
//  Modification of the files names to lower case and the name of impex format to import partners
//
//  Modification : 2020/12/15 IGU
//  Modification of the order of data import
//
//  Creation : 2020/12/09 IGU
//  Script used in SAN_BA_DATAHUB_IMPORT
//

//***************************************************************************/

namespace _san_datahub_import;
var string vNewFold="";

// create a folder vDate (format YYYYMMDD_hhmmss) under path vFolder
function san_create_date_folder(date vDate,string vFolder)
{
    var string vResult="";
    if (vFolder.probefile()!=false)
    {
        if (vDate!=undefined && vDate instanceof date)
        {
            var string vDateStr=vDate.tostring("YYYYMMDDTHHMMSS");
            vDateStr=vDateStr.replaceregexp("T","_");
            var string vNEwDir=vFolder+vDateStr+"/";
            // if directory does not exist, we create it
            if (vNEwDir.probefile()==false)
            {
                plw.writetolog("****** creating directory "+vNEwDir+" ****");
                vNEwDir.mkdir();  
            }
            vResult=vNEwDir;
        }
        else plw.writetolog("****** Error on san_create_date_folder, wrong date argument ****");
    }
    else plw.writetolog("****** Error on san_create_date_folder, the folder "+vFolder+" does not exist ****");
    return vResult;
}

function san_import_datahub_data (String s_format, String s_fileName){
	var plc.impexformat o_format = plc.impexformat.get(s_format);
	var plc.impextarget o_target = plc.impextarget.get('SAN_IMPEX_TARGET_DATAHUB_IMPORT:Json file format');
    var String s_pathFile = context.SAN_UF_S_MAIN_PATH+context.SAN_CS_DATAHUB_IMPORT_PATH+context.SAN_CS_PRIME_FOLDER+s_fileName;
	
	plw.writetolog('**** Importing '+s_format+' from: "'+s_pathFile+'"****');
	
    if(o_format instanceof plc.impexformat && o_target instanceof plc.impextarget && s_pathFile.probefile()){
		if (vNewFold!="")
		{
    		plw.writetolog('**** Archiving file into "'+vNewFold+'" ****');
    		s_pathFile.copyfile(vNewFold+s_fileName);
		}
		else plw.writetolog('**** Impossible to archive file, archive folder is undefined ****');
		o_target.set('FILENAME','"'+s_pathFile+'"');
		try{
		    plw.DoImportWithFormatAndTarget(this : o_format, o_target, true);
		}
		catch(error e){
            var plist = new vector();
            plist.setplist("from",context._ADM_ST_S_NOTIF_CHGLOG_EMAIL_FROM);
            plist.setplist("to",context.SAN_RDPM_CS_EMAIL_NOTIF_ERROR_DATAHUB);
            plist.setplist("subject","[Planisware] Error during importing " + s_fileName);
            plist.setplist("body",'An error occured during SAN_BA_DATAHUB_IMPORT execution on '+context.callstringformula('$DATABASE_NAME')+': '+e.toString());
            plist.setplist("Content-Type","text/html");
            plw.mail_send(plist);
            
            plw.writetolog("****** Error during importing " + s_fileName +" --> " +e.toString() + " ****");
	        plw.writetolog("****** Sending mail to : " + context.SAN_RDPM_CS_EMAIL_NOTIF_ERROR_DATAHUB+ " ****");
		}
    }
	else{
		if (!(o_format instanceof plc.impexformat)) {plw.writetolog('Impex Format: "'+s_format+'" does not exist! Import cancelled!');}
		if (!(o_target instanceof plc.impextarget)) {plw.writetolog('Impex Target: "SAN_RDPM_IMPEX_TARGET_DATAHUB_IMPORT:Json file format" does not exist! Import cancelled!');}
		if (!(s_pathFile.probefile())) {plw.writetolog('File: "'+s_pathFile+'" does not exist! Import cancelled!');}
	}
	
	plw.writetolog('**** Import of '+s_format +' done!****');
	
}

var date vNow=new date();
vNewFold=san_create_date_folder(vNow,context.SAN_UF_S_MAIN_PATH+context.SAN_CS_DATAHUB_ARCH_IMPORT_PATH);
san_import_datahub_data('Clinical indications:SAN_IMPEX_IMP_CLIN_IND','clinical_indication.json');
san_import_datahub_data('Countries:SAN_IMPEX_IMP_PRIME_COUNTRIES','country.json');
san_import_datahub_data('Root Product:SAN_IMPEX_IMP_PRODUCT','root_product.json');
san_import_datahub_data('Provider:SAN_IMPEX_IMP_PARTNER','partner.json');
san_import_datahub_data('Therapeutic Area:SAN_IMPEX_IMP_PRIME_TA','therapeutic_area.json');
san_import_datahub_data('Project codes:SAN_IMPEX_RESEARCH_PROJECT','research_project.json');
san_import_datahub_data('Project codes:SAN_IMPEX_OTHER_PROJECT','other_project.json');
san_import_datahub_data('Project codes:SAN_IMPEX_DEV_PROJECT','dev_project.json');
san_import_datahub_data('Project codes:SAN_IMPEX_VACCINE_PROJECT','vaccine_project.json');
san_import_datahub_data('Study Codes:SAN_IMPEX_IMP_STUDY_CODES','study_codes.json');
san_import_datahub_data('Clinical Milestones:SAN_IMPEX_IMP_CLINICAL_MILESTONES','clinical_milestone.json');
san_import_datahub_data('Country Groups:SAN_RDPM_IMPEX_IMP_FORMAT_COUNTRY_GROUP','country_group.json');
san_import_datahub_data('Relations Country - Country Group:SAN_RDPM_IMPEX_IMP_FORMAT_COUNTRY_COUNTRYGROUP_REL','country_country_group_rel.json'); 
// 
//  PLWSCRIPT : SAN_JS2_PMUTILS
// 
//  AUTHOR  : Thibault
//
//  v1.1 - 2022/01/13 - Thibault
//  Adding wrapper san_rdpm_Utils_Gantt_Display_Method_Vaccines_Projects 
//  to _Utils_Gantt_Display_Method for R&D Vaccines projects (PC-5011)
//
//***************************************************************************/

namespace _pmmod;

function _pm_js_newPlannedHours(){
   var editor = plc.Report.report_getreplace("_RM_REVIEW_POPUP_PLH");
   var file = undefined;
   if(! plw._utilisvirtualdataset("")){
     file = plw.CurrentPageObject();  //$CURRENT_PAGE_OBJECT_ID
   }
     
   var link = new hyperlink("CreationForm",
                            "Class","ALLOCATION",
                            "Editortype",editor.name,
                            "DefaultA1","File",
                            "DefaultV1",file,
                            "DefaultA2", "WORK-STRUCTURE",
                            "DefaultV2", plw.get_selected_element("ACTIVITY"));

   if(link != undefined) {
     link.go(context);
   }
 }
 
 function _pm_js_changeTimenow(){
     
  var hl = new hyperlink("Fvalue",
                        "Attribute", "ID",
                        "EditorType", "_INF_POPUP_CHANGE_TIME_NOW",
                        "Popup", true);
    hl.go(context);
  }
  
  // --START-- Workaround for PC-4273 & PC-4225 + OTD 121288
function san_rdpm_init_curves_at_startup() {
	plw.writeln("################################");
	plw.writeln("Curves list initialization starting...");
	var number count=0;
	for (var eachCurve in cost.listAllCurvesName("*")) {
		count++;
	}
	plw.writeln("Initialized "+count+" curves!");
	plw.writeln("Curves list initialization DONE!");
	plw.writeln("################################");
}

wrap.intranetStarted.addWrapperAfter(san_rdpm_init_curves_at_startup);
// --END-- Workaround for PC-4273 & PC-4225 + OTD 121288

// --START-- Workaround for PC-5011 + OTD 129385
// Change default ProgressPresentationMode for RND VACCINES projects
// Can be removed if OTD 129385 change request is approved
function san_rdpm_Utils_Gantt_Display_Method_Vaccines_Projects(Gantt){
	
	var AdminProgressValue = undefined;
	var o_prj = undefined;
	
	for(var oCurPageObject in plw.currentpageobject()){
		// Get the project
		if(oCurPageObject instanceof plc.work_structure){
			// Case of oCurPageObject being a work_structure (ex. in workpackage module)
			// we retrieve the project of the work_structure
			o_prj = oCurPageObject.FILE;
		}else{
			// Case of a project module
			o_prj = oCurPageObject;
		}
		// If this is an R&D VACCINES project change behavior
		if (o_prj instanceof plc.project){
			if (o_prj.SAN_RDPM_B_RND_VACCINES_PROJECT){
				AdminProgressValue = "NO";
				Gantt.setinternalvalue("ProgressPresentationMode",new symbol(AdminProgressValue,"KEYWORD"));
				break;
			}
		}
	}
}
plw._Utils_Gantt_Display_Method.addwrapperafter(san_rdpm_Utils_Gantt_Display_Method_Vaccines_Projects);
plw.writetolog("Adding wrapper san_rdpm_Utils_Gantt_Display_Method_Vaccines_Projects to _Utils_Gantt_Display_Method for R&D Vaccines projects");
// --END-- Workaround for PC-5011 + OTD 129385 
//
//  PLWSCRIPT : MAIL_MACRO_WORKBOX_SAN_RDPM_WA_NEW_VACCINES_PROJECT_CODE
//
//  v2.1 - 2021/03/17 - LFA
//  Deactivate notification for sourcing request  (PC-5876)
//
//  v2.0 - 2021/02/16 - ABO
//  Manage e-mail notifications on creation of new projects and indications  (PC-1983)
//
//***************************************************************************/
//  PLWSCRIPT : MAIL_MACRO_WORKBOX_SAN_RDPM_BA_NOTIFICATION_MAIL_SCRIPT
//
//  v2.0 - 2021/09/27 - ABO
//  Merge content of script SAN_RDPM_JS2_MAIL_WORKBOX_IND_STATUS with script SAN_RDPM_BA_NOTIFICATION_MAIL_SCRIPT (PC-4577)
//
//***************************************************************************/

//
//  PLWSCRIPT : MAIL_MACRO_WORKBOX_SAN_RDPM_BA_NOTIFICATION_MAIL_SCRIPT
//
//  v1.0 - 2021/06/09 - AKAAYOUS
//  Creation and add the frequency check (PC-2068)
//
//***************************************************************************/

//
//  PLWSCRIPT : SAN_RDPM_BA_NOTIFICATION_MAIL
//
//  v1.0 - 2021/07/07 - BNO
//  Group notification batches + Manage e-mail notifications on non-production environments (PC-3894)
//
//***************************************************************************/
namespace _san_workbox;

if(context.SAN_UA_B_SEND_EMAIL==true)
{
    // Frequency : monday  every 2 weeks
    var boolean vCheqF=_san_continuum.san_js_check_run_batch("weekly",arg2:2,arg3:[1]);
    if (vCheqF==true)
    {
    	var string vMacro="MAIL_MACRO_WORKBOX_SAN_RDPM_WA_IND_STATUS";
    	plw.writetolog(" -- Start "+vMacro);
    	context.callmacro(vMacro);
    	plw.writetolog(" -- End "+vMacro);
    }

	var string vMacro="MAIL_MACRO_WORKBOX_SAN_WA_RDPM_EMAILING_TC_VALIDATION";
	plw.writetolog(" -- Start "+vMacro);
	context.callmacro(vMacro);
	plw.writetolog(" -- End "+vMacro);

	// Frequency : the 15 day of every month
	var boolean vCheqF=_san_continuum.san_js_check_run_batch("monthly",arg2:1,arg3:[15]);
	if (vCheqF==true)
	{
		var string vMacro="MAIL_MACRO_WORKBOX_SAN_RDPM_WA_CRITIC_PATH_REF";
		plw.writetolog(" -- Start "+vMacro);
		context.callmacro(vMacro);
		plw.writetolog(" -- End "+vMacro);
	}

	// Frequency : monday and friday every 2 weeks
	var boolean vCheqF=_san_continuum.san_js_check_run_batch("weekly",arg2:2,arg3:[1,5]);
	if (vCheqF==true)
	{
		var string vMacro="MAIL_MACRO_WORKBOX_SAN_RDPM_WA_NEW_PROJ_CREAT_ASSIG_TO_ME";
		plw.writetolog(" -- Start "+vMacro);
		context.callmacro(vMacro);
		plw.writetolog(" -- End "+vMacro);
	}

	// Frequency : 15 day of every moth
	var boolean vCheqF=_san_continuum.san_js_check_run_batch("monthly",arg2:1,arg3:[15]);
	if (vCheqF==true)
	{
		var string vMacro="MAIL_MACRO_WORKBOX_SAN_RDPM_WA_PROJ_OBJECTIVES_NOTIF";
		plw.writetolog(" -- Start "+vMacro);
		context.callmacro(vMacro);
		plw.writetolog(" -- End "+vMacro);
	}


	// Frequency : 1 day (Monday) of every week
	var boolean vCheqF=_san_continuum.san_js_check_run_batch("weekly",arg2:1,arg3:[1]);
	if (vCheqF==true)
	{
		var string vMacro="MAIL_MACRO_WORKBOX_SAN_WA_RDPM_RES_NETWORK_EMPTY";
		plw.writetolog(" -- Start "+vMacro);
		context.callmacro(vMacro);
		plw.writetolog(" -- End "+vMacro);
	}
	
	// Frequency : Daily monday to friday
	/*var boolean vCheqF=_san_continuum.san_js_check_run_batch("weekly",arg2:1,arg3:[1,2,3,4,5]);
	if (vCheqF==true)
	{
		var string vMacro="MAIL_MACRO_WORKBOX_SAN_RDPM_WA_SOURCING_REQUEST";
		plw.writetolog(" -- Start "+vMacro);
		context.callmacro(vMacro);
		plw.writetolog(" -- End "+vMacro);
	}*/
	
	// Frequency : Daily (every day)
	var boolean vCheqF=_san_continuum.san_js_check_run_batch("weekly",arg2:1,arg3:[1,2,3,4,5,6,7]);
	if (vCheqF==true)
	{
	    plw.alert("OK!!");
		var string vMacro="MAIL_MACRO_WORKBOX_SAN_RDPM_WA_NEW_VACCINES_PROJECT_CODE";
		plw.writetolog(" -- Start "+vMacro);
		context.callmacro(vMacro);
		plw.writetolog(" -- End "+vMacro);
	}
	
	// Send e-mail for vaccines project and indication
	_RDPM_PM.san_rdpm_js2_send_vaccines_project_notifications();
	
}
else{
	plw.writetolog("Unauthorized e-mails for non-production environment have been set on users, notifications are disabled.");
}

 
//
//  PLWSCRIPT : SAN_RDPM_EXPORT_SCRIPT
//
//  AUTHOR  : Manuel DOUILLET
//	Script to use in the batch SAN_RDPM_IMPEX_TARGET_DATAHUB-EXPORT-Batch
//
//  Creation : 2020/13/10 MDO
//  PC-5853 - Remove field COMMENT from BO planned workload - 2022-03-11 - LFA
//  PC-5533 - Keep only one portfolio for the BO export
//  PC-5527 - Add fields in BO Planned workload for vaccines - 2022-01-26 - LFA
//  PC-5460 - Use the portfolio "ALL R&D - DO NOT DELETE - USED FOR BO EXPORTS [TEMP]" for BO Plan
//  PC-5122 - Add the BO Clinical Milestones Dates - 2021/11/30 - LFA
//  PC-4985 - Cleaning duplicaded lines in table WBS Form Data - 2021/11/09 LFA
//  PC-4983 - Use the portfolio "ALL R&D - DO NOT DELETE - USED FOR BO EXPORTS [TEMP]" for BO Project, Indication, Phase, Study, Task, Team Member - 2021/11/09 LFA
//  PC-4623 - Use of portfolio "ALL - DO NOT DELETE - USED FOR BO EXPORTS" in function san_rdpm_bo_planned_wkl_cost_export - 2021/09/28 LFA
//  PC-4297 - Change end date for Planned IPSO Export 
//  PC-4136 - Take only MANUAL and AUTO Types : 2021/07/02 LFA
//  PC-4152 - Take start of the month (SD) and end of the month (FD) to manage HES with a 0 duration  : 2021/07/01 LFA
//  PC-3796 - Use Portfolio ALL - DO NOT DELETE - USED FOR BO EXPORTS for BO Exports : 2021/05/24 LFA
//  Use Portfolio ALL - DO NOT DELETE - USED FOR BO EXPORTS for Query export to include indications : 2021/04/12 LFA
//  Modification of SanExportFromPexQuery : 2021/01/12 HRA
//  Modification of script: add Planned IPSO : 2021/02/01 HRA
//  Modification of script: added check on day of the month for Actual Workload 2021/02/09 MDO
//  Modification of script: addition of planned workload & costs csv export 15-MAR-2021 MDO
//  Modification of script: addition of study baseline dates 19-MAY-2021 LFA
//  Modification san_rdpm_bo_planned_wkl_cost_export to excluede animal resources
//  Modification - Add WBS FORM Export - PC-4268  17/08/2021
//  Modification - Add Portfolios export (PC-1744) 18/01/2022 IGU
//  Add traces in logs : look for "-- Export" to get all traces (PC-5557) 02/02/2022 David
//***************************************************************************/

Namespace _impexTarget;

function SanExport (string argTarget, string argFormat)
{
    plw.writetolog(" -- Export start : "+argFormat+"  /  "+argTarget);
    var plc.impextarget Target = plc.impextarget.get(argTarget);
    
    if(Target instanceOf plc.ImpexTarget){
        
        var plc.impexformat Format = plc.impexformat.get(argFormat);
        
        if(Target._IMPEX_AA_B_TRUNCATE){
            plw._Impex_TruncateTable(Target,Format);
        }
        
        Format.DoExportWithFormatAndTarget(Target);
        var filename = Target.CallStringFormula("EVALUATE_STRING(Filename)");
        plw.writetolog(" ----- Export file name : "+filename);
		plw.writetolog(" --- Export end : "+argFormat+"  /  "+argTarget);
    }
    
}

// Function to export impex from PEX
function SanExportFromPexQuery (string argTarget, string argFormat, string argPortfolio, string argQuery, date startDate, date endDate){
	plw.writetolog(" -- Export start : "+argFormat+"  /  "+argTarget);
    var plc.impextarget Target = plc.impextarget.get(argTarget);
    var plc._FF_PT_FAVOR_FILTERS Portfolio = plc._FF_PT_FAVOR_FILTERS.get(argPortfolio);
    var plc._PEX_PT_QUERY Query = plc._PEX_PT_QUERY.get(argQuery);
    if(Target instanceOf plc.ImpexTarget && Portfolio instanceOf plc._FF_PT_FAVOR_FILTERS && Query instanceOf plc._PEX_PT_QUERY) {
        var plc.impexformat Format = plc.impexformat.get(argFormat);
        if(Target._IMPEX_AA_B_TRUNCATE)
			{
			plw._Impex_TruncateTable(Target,Format);
		}
		plw._impex_exportPEXQueryCostTable(Portfolio, Query, Format, Target, startDate, endDate);
        var filename = Target.CallStringFormula("EVALUATE_STRING(Filename)");
        plw.writetolog(" ----- Export file name : "+filename);
		plw.writetolog(" --- Export end : "+argFormat+"  /  "+argTarget);
	}
}

function rdpm_fn_date_end_month(o_date)
{
	if(o_date instanceof DATE)
	{
		return plw.date_addTimeUnit(plw.periodstart(o_date,"MONTH",1),-1,"DAY");
	}
}

function san_rdpm_bo_planned_wkl_cost_export()
{
	// The scope of the data exported can be changed thanks to this o_ptf var where you can put any portfolio the INTRANET user has access to
	var o_ptf = plc._FF_PT_FAVOR_FILTERS.get("ALL - DO NOT DELETE - USED FOR BO EXPORTS");
	
	// The time window of the export can be modified thanks to the numbers in the start_horizon_date and end_horizon_date var below
	var t_start = new Date().getElapsedTime();
	var start_horizon_date = Context.CallDateFormula("period_start($DATE_OF_THE_DAY,\"YEAR\",-2)"); 
	var start_date_compute = start_horizon_date;
	var end_horizon_date = Context.CallDateFormula("period_start($DATE_OF_THE_DAY,\"YEAR\",15)"); 
	var end_date_compute = end_horizon_date;
	var vdate=new date();

	// Global variable
	var curvename = cost.findCurveName("AEAC");

	// CSV Export Variables
	var filepath = "/tmp/";
	var Costsfilename = "-PLANNED_COSTS.csv";
	var Costsfilepath = new PathName(filepath+"TEMP"+Costsfilename);
	var wklfilename = "-PLANNED_WORKLOAD.csv";
	var Wklfilepath = new PathName(filepath+"TEMP"+wklfilename);
	var file_separator = ",";

	if(Costsfilepath.probefile())
		{
			Costsfilepath.deletefile();
			plw.alert("san_rdpm_bo_planned_wkl_cost_export - Deleted already existing working file: "+Costsfilepath);
		}
	if(Wklfilepath.probefile())
		{
			Wklfilepath.deletefile();
			plw.alert("san_rdpm_bo_planned_wkl_cost_export - Deleted already existing working file: "+Wklfilepath);
		}

	var WklFile = new plw.fileOutputStream(Wklfilepath,"overwrite");
	var CostsFile = new plw.fileOutputStream(Costsfilepath,"overwrite");
	//PC-5527 - Add new fields for Vaccines in planned workload
	WklFile.writeln("\"ACTIVITY_TYPE\",\"RESOURCE\",\"RESOURCE_OBS\",\"SITE\",\"SAN_RDPM_UA_PH_SOURCING\",\"SAN_RDPM_UA_PH_PROVIDER\",\"PLANNED_HOURS_TYPE\",ACTIVITY_ONB,\"SKILL\",START-DATE,END-DATE,DAY_PLANNED_HOURS,LOAD-CALENDAR_PLANNED_HOURS,TASK_WEIGHTING,\"_RM_REVIEW_RA_ROLE\",\"SAN_UA_RDPM_RES_BU_DESC\",\"SAN_UA_RDPM_RES_DEP_DESC\",\"SAN_UA_RDPM_RES_PLATFORM_DESC\",SAN_RDPM_UA_N_NB_DAY_FTE_VAC");
	CostsFile.writeln("\"ACTIVITY_TYPE\",\"RESOURCE\",\"RESOURCE_OBS\",\"SITE\",\"SOURCING\",\"PROVIDER\",\"EXPENDITURE_TYPE\",ACTIVITY_ONB,\"COST_ACCOUNT\",\"SAN_RDPM_UA_B_COMMITTED_COSTS\",START-DATE,END-DATE,QUANTITY_KEUROS,TASK_WEIGHTING");


	// Build a vector of Project
	var v_proj_vect = new vector();
	
	for(var o_project in o_ptf.get("PROJECTS") where o_project.LEVEL==1) v_proj_vect.push(o_project);

	// Loop on each project to export

		for (var o_project in v_proj_vect)
			{
			plw.writetolog(" ---- Export Processing Project: "+o_project.name);
				with(o_project.fromobject())
				{
					for(var o_hes in plc.TIME_SYNTHESIS where o_hes.RES.SAN_RDPM_UA_B_RES_SPECIES==false &&  ((o_hes.FD instanceof DATE) && !(o_hes.FD<start_horizon_date) && (o_hes.SD instanceof DATE) && !(o_hes.SD>end_horizon_date)) && !(o_hes.ACTIVITY.SAN_RDPM_UA_B_OLD_BRANCH_FILTER_F))
						{
							var v_hes_string = "";
							
							//Each print check if instanceof else ""
							if (o_hes.ACTIVITY instanceof plc.work_structure && o_hes.ACTIVITY.WBS_TYPE instanceof plc.WBS_TYPE) {v_hes_string += "\""+o_hes.ACTIVITY.WBS_TYPE.printattribute()+"\""+file_separator;} else {v_hes_string += "\"\""+file_separator;} // Activity type
							if (o_hes.RES instanceof plc.RESOURCE) {v_hes_string += "\""+o_hes.RES.printattribute()+"\""+file_separator;} else {v_hes_string += "\"\""+file_separator;} // Resource
							if (o_hes.RES instanceof plc.RESOURCE && o_hes.RES.OBS_ELEMENT instanceof plw.RESPONSIBILITY) {v_hes_string += "\""+o_hes.RES.OBS_ELEMENT.printattribute()+"\""+file_separator;} else {v_hes_string += "\"\""+file_separator;} // Resource obs
							if (o_hes._RM_REVIEW_RA_LOCATION instanceof plc._RM_REVIEW_PT_LOCATIONS) {v_hes_string += "\""+o_hes._RM_REVIEW_RA_LOCATION.printattribute()+"\""+file_separator;} else {v_hes_string += "\"\""+file_separator;} // Site
							if (o_hes._INF_RA_CBS2 instanceof plc._INF_PT_CBS2) {v_hes_string += "\""+o_hes._INF_RA_CBS2.printattribute()+"\""+file_separator;} else {v_hes_string += "\"\""+file_separator;} // Sourcing
							if (o_hes._INF_RA_CBS3 instanceof plc._INF_PT_CBS3) {v_hes_string += "\""+o_hes._INF_RA_CBS3.printattribute()+"\""+file_separator;} else {v_hes_string += "\"\""+file_separator;} // Provider
							v_hes_string += "\""+o_hes.TYPE+"\""+file_separator; // Type cannot be empty
							if (o_hes.ACTIVITY instanceof plc.work_structure) {v_hes_string += o_hes.ACTIVITY.ONB.toString("####")+file_separator;} else {v_hes_string += "\"\""+file_separator;} // Activity Internal number

							// To avoid additional 'Weighted estimate at completion' curves calculation, recover the weight of the activity to build Weighted information
							var v_weight = o_hes.ACTIVITY.WEIGHT;
							
						    //PC-5527 - Add new fields for Vaccines in planned workload
						    var v_hes_string_wkl = "";
						    if (o_hes._RM_REVIEW_RA_ROLE instanceof plc._RM_REVIEW_PT_ROLE) {v_hes_string_wkl += "\""+o_hes._RM_REVIEW_RA_ROLE.printattribute()+"\""+file_separator;} else {v_hes_string_wkl += "\"\""+file_separator;} // Role
						    if (o_hes.RES instanceof plc.RESOURCE) {v_hes_string_wkl += "\""+o_hes.RES.SAN_UA_RDPM_RES_BU_DESC+"\""+file_separator;} else {v_hes_string_wkl += "\"\""+file_separator;} // Resource BU
						    if (o_hes.RES instanceof plc.RESOURCE) {v_hes_string_wkl += "\""+o_hes.RES.SAN_UA_RDPM_RES_DEP_DESC+"\""+file_separator;} else {v_hes_string_wkl += "\"\""+file_separator;} // Resource Department
						    if (o_hes.RES instanceof plc.RESOURCE) {v_hes_string_wkl += "\""+o_hes.RES.SAN_UA_RDPM_RES_PLATFORM_DESC+"\""+file_separator;} else {v_hes_string_wkl += "\"\""+file_separator;} // Resource Plateform
						    v_hes_string_wkl += o_hes.SAN_RDPM_UA_N_NB_DAY_FTE_VAC.toString("####");

                            // define dates for computation
                            // PC-4152 - Take start of the month (SD) and end of the month (FD) to manage HES with a 0 duration
                            var start_hes = "PERIOD_START".callmacro(o_hes.SD,"MONTH",0);
                            var end_hes = "PERIOD_START".callmacro(o_hes.FD,"MONTH",1);
                            if (start_horizon_date>start_hes) {start_date_compute = start_horizon_date;} else {start_date_compute=start_hes;}
                            if (end_horizon_date<end_hes) {end_date_compute = end_horizon_date;} else {end_date_compute=end_hes;}
							
							// Build a Date Vector to parse 
							var v_DateVect = new plw.datevector("MONTH",start_date_compute,end_date_compute);
							// Remove last value as it will return 0 (Next month)
							v_DateVect.pop();

							//Get type of the HES
							var hes_type = o_hes.TYPE;
							
							//check type
                            // PC-4262 - Take only MANUAL and AUTO Types
							if(o_hes._PM_NF_B_BASIC_TYPE_HOURS && (hes_type == "AUTO" || hes_type == "MANUAL")){
								
								// Build EAC curves on 'Hours and expenditures' object
								var curve_eac_day = cost.computecurves(curvename, "Day", "MONTH", false, start_date_compute, end_date_compute, o_hes);
								var curve_eac_fte = cost.computecurves(curvename, "FTE (Full Time Equivalent)", "MONTH", false, start_date_compute, end_date_compute, o_hes);

								// Loop on all dates
								for(var s_date in v_DateVect)
									{
										// Calculate curves
										var eac_day = curve_eac_day.get(s_date);
										var eac_fte = curve_eac_fte.get(s_date);
										
										var v_line_string = v_hes_string;
										
										//Add specific attributes
										v_line_string += "\""+o_hes.PRIMARY_SKILL.printattribute()+"\""+file_separator; // Primary skill
										//Add dates
										v_line_string += s_date.toString("YYYY-MM-DD")+file_separator; //start date
										v_line_string += rdpm_fn_date_end_month(s_date).toString("YYYY-MM-DD")+file_separator; //end date
										
										//Add curve values
										v_line_string += eac_day.toString("####.0000")+file_separator;
										v_line_string += eac_fte.toString("####.0000")+file_separator;
										//Add weight
										if (o_hes.ACTIVITY instanceof plc.work_structure) {if (v_weight == -1){v_line_string += "1.00";}else{v_line_string += v_weight.toString("####.00");}} else {v_line_string += "";} //wieghting
										
										// PC-5527 - Add vaccines information
										v_line_string +=file_separator+v_hes_string_wkl;
										
										
										// Export line
										WklFile.writeln(v_line_string);
										
									}
								// Warning: carefully destroy the curves object after their usage to insure that memory used to compute this curves is reallocated correctly.
								curve_eac_day.delete();
								curve_eac_fte.delete();
							}
							
							    // PC-4136 - Take only MANUAL and AUTO Types
                                if(hes_type == "AUTO" || hes_type == "MANUAL"){
								
								// Build EAC curves on 'Hours and expenditures' object
								var curve_eac_keuros = cost.computecurves(curvename, "k€", "MONTH", false, start_date_compute, end_date_compute, o_hes);
								
								// Loop on all dates
								for(var s_date in v_DateVect)
									{
										// Get curve data
										var eac_Keuros = curve_eac_keuros.get(s_date);
										
										var v_line_string = v_hes_string;
										
										// Add specific attributes
										if(o_hes.COST_ACCOUNT instanceof plw.COST_ACCOUNT) {v_line_string += "\""+o_hes.COST_ACCOUNT.printattribute()+"\""+file_separator;} else {v_line_string += "\"\""+file_separator;} // Cost Account
										if(o_hes.SAN_RDPM_UA_B_COMMITTED_COSTS instanceof BOOLEAN) {v_line_string += "\""+o_hes.SAN_RDPM_UA_B_COMMITTED_COSTS.toString()+"\""+file_separator;} else {v_line_string += "\"\""+file_separator;} // Committed costs
										
										//Add dates
										v_line_string += s_date.toString("YYYY-MM-DD")+file_separator; //start date
										v_line_string += rdpm_fn_date_end_month(s_date).toString("YYYY-MM-DD")+file_separator; //end date
										
										//Add curve values
										v_line_string += eac_Keuros.toString("####.0000")+file_separator;
										
										//Add weight
										if (o_hes.ACTIVITY instanceof plc.work_structure) {if (v_weight == -1){v_line_string += "1.00";}else{v_line_string += v_weight.toString("####.00");}} else {v_line_string += "";} //wieghting
										
										// Export line
										CostsFile.writeln(v_line_string);
									}
								// Warning: carefully destroy the curves object after their usage to insure that memory used to compute this curves is reallocated correctly.
								curve_eac_keuros.delete();
							}
						}
				}
			}


	// Close file
	WklFile.close();
	CostsFile.close();
	// Rename files to add start timestamp
	var filepath = context.SAN_RDPM_UA_OC_S_EXPORT_DATAHUB_PATH;
	
	Costsfilename = vdate.tostring("YYYYMMDDTHHMMSSZ")+"-PLANNED_COSTS.csv";
	Costsfilepath.renamefile(filepath+Costsfilename);
	
	wklfilename = vdate.tostring("YYYYMMDDTHHMMSSZ")+"-PLANNED_WORKLOAD.csv";
	wklfilepath.renamefile(filepath+wklfilename);
	
	Wklfilepath = new PathName(filepath+wklfilename);
	Costsfilepath = new PathName(filepath+Costsfilename);
	
	
	plw.writetolog(" ----- Export : Wklfilepath: "+Wklfilepath);
	plw.writetolog(" ----- Export : Costsfilepath: "+Costsfilepath);
	//log info on batch
	var t_end = new Date().getElapsedTime();
	var t_duration = t_end-t_start;
	plw.writetolog(" ----- Export : On portfolio: "+o_ptf);
	plw.writetolog(" ----- Export : #Projects = "+v_proj_vect.length);
	plw.writetolog(" ----- Export : Duration = "+t_duration+" ms ("+"PRINT_NUMBER".callmacro(t_duration/60000,"#####.00")+" min)");
	var vDurProj=(v_proj_vect.length!=0) ? t_duration/v_proj_vect.length : 0;
	plw.writetolog(" ----- Export : Duration (/project) = "+vDurProj+" ms ("+"PRINT_NUMBER".callmacro(vDurProj/60000,"#####.00")+" min)");
}
plw.writetolog(" -- Export : ***** START EXPORT ****");

// PC-4985 - Cleaning duplicaded lines in table WBS Form Data
plw.writetolog(" -- Export : Cleaning table WBS Form Data.");
var count=0;
for (var wbs_form_data in plc.__USER_TABLE_SAN_RDPM_UT_WBS_FORM_DATA where wbs_form_data.SAN_RDPM_DA_B_WBS_FORM_DATA_DUPLICATED)
{
    wbs_form_data.delete();
	count++;
}
plw.writetolog(" --- Export : "+count+" duplicated lines removed in table WBS Form Data.");

//Portfolio filter to be set prior to the call of the export to restrict the data exported
context._FF_AA_S_LIST_NAME = "ALL - DO NOT DELETE - USED FOR BO EXPORTS";
SanExport("SAN_RDPM_IMPEX_TARGET_DATAHUB_PROJECT:Json file format", "Project:DATAHUB");
SanExport("SAN_RDPM_IMPEX_TARGET_DATAHUB_INDICATION:Json file format", "Activity:DATAHUBINDICATION");
SanExport("SAN_RDPM_IMPEX_TARGET_DATAHUB_PHASE:Json file format", "Activity:DATAHUBPHASE");
SanExport("SAN_RDPM_IMPEX_TARGET_DATAHUB_STUDY:Json file format", "Activity:DATAHUBSTUDY");
SanExport("SAN_RDPM_IMPEX_TARGET_DATAHUB_TASK:Json file format", "Activity:DATAHUBTASK");
SanExport("SAN_RDPM_IMPEX_TARGET_DATAHUB_TEAM_MEMBER:Json file format", "Project Team Member:DATAHUBTEAMMEMBER");
SanExport("SAN_RDPM_IMPEX_TARGET_DATAHUB_PLAN_BUSINESS_OBJECT:Json file format", "Activity:DATAHUBPLAN");

// PC-5122 - BO Clinical Milestones
plw.writetolog(" -- Export start : BO Clinical Milestones");
_rdpm_clinical_milestones.san_rdpm_bo_clinical_milestones_export();
plw.writetolog(" --- Export end : BO Clinical Milestones");

SanExport("SAN_RDPM_IMPEX_TARGET_DATAHUB_RESOURCE:Json file format", "Resource:DATAHUBRESOURCE");
SanExport("SAN_RDPM_IMPEX_TARGET_DATAHUB_STUDY_BASELINE:Json file format", "Activity:DATAHUBBASELINE");
SanExport("SAN_RDPM_IMPEX_TARGET_DATAHUB_COST_ACCOUNT:Json file format", "Cost account:DATAHUBCOSTACCOUNT");
SanExport("SAN_RDPM_IMPEX_TARGET_DATAHUB_WBS_FORM:Json file format", "WBS Form Data:DATAHUB_WBS_FORM");
//Portfolio (PC-1744)
SanExport("SAN_RDPM_IMPEX_TARGET_DATAHUB_PORTFOLIO:Json file format", "User-defined portfolios:DATAHUBPORTFOLIO");


// SanExportFromPexQuery
//Actual workload
if(Context.CallBooleanFormula("NTH(PRINT_DATE($DATE_OF_THE_DAY,\"DD-MM-YY\"),0,\"-\") = SAN_RDPM_CS_ACTUAL_WKL_EXPT_DAY")){
var start_date = Context.CallDateFormula("period_start($DATE_OF_THE_DAY,\"MONTH\",-3)");
var end_date = Context.CallDateFormula("period_start($DATE_OF_THE_DAY,\"MONTH\",-2)");
SanExportFromPexQuery ("SAN_RDPM_IMPEX_TARGET_DATAHUB_ACTUAL_WKL:Json file format", "IMPEX_ACTUAL_WKL:DATAHUBACTUALWORKLOAD","ALL - DO NOT DELETE - USED FOR BO EXPORTS", "SAN_RDPM_QY_BO_ACTUAL_WKL", start_date, end_date);
} else {
plw.writetolog(" -- Export IMPEX_ACTUAL_WKL:DATAHUBACTUALWORKLOAD  /  SAN_RDPM_IMPEX_TARGET_DATAHUB_ACTUAL_WKL:Json file format: not exported as it is not the day of the month configured in SAN_RDPM_CS_ACTUAL_WKL_EXPT_DAY.");
}

//Availability
var start_date = Context.CallDateFormula("period_start($DATE_OF_THE_DAY,\"YEAR\",-1)");
var end_date = Context.CallDateFormula("period_start($DATE_OF_THE_DAY,\"YEAR\",3)");
SanExportFromPexQuery ("SAN_RDPM_IMPEX_TARGET_DATAHUB_HEADCOUNT_AVAILABILITIES:Json file format", "IMPEX_AVAILABILITIES:DATAHUBHEADCOUNTAVAILABILITIES","ALL - DO NOT DELETE - USED FOR BO EXPORTS", "SAN_RDPM_QY_BO_AVAILABILITY", start_date, end_date);

//Planned IPSO
var start_date = Context.CallDateFormula("period_start($DATE_OF_THE_DAY,\"YEAR\",-2)");
var end_date = Context.CallDateFormula("period_start($DATE_OF_THE_DAY,\"YEAR\",5)");
SanExportFromPexQuery ("SAN_RDPM_IMPEX_TARGET_DATAHUB_PLANNED_IPSO:Json file format", "IMPEX_PLANNED_IPSO:SAN_RDPM_IMPEX_FORMAT_PLANEXP_IPSO","ALL - DO NOT DELETE - USED FOR BO EXPORTS", "SAN_RDPM_QY_BO_PLANEDXP_IPSO", start_date, end_date);

plw.writetolog(" -- Export start : Planned Workload & Planned Costs");
san_rdpm_bo_planned_wkl_cost_export();
plw.writetolog(" --- Export end : Planned Workload & Planned Costs");


SanExport("SAN_RDPM_IMPEX_TARGET_DATAHUB_SUCCESS_FILE:Json file format", "Project:DATAHUBSUCCESS");
plw.writetolog(" -- Exports: Success, on portfolio: "+context._FF_AA_S_LIST_NAME.toString());

plw.writetolog(" -- Export : ***** END EXPORT ****"); 
// 
//  PLWSCRIPT : SAN_RDPM_J2S_COUNTRY_FORM
// 
//  v1.2 - 2021/11/03 - Ludovic PC-4900 - Use of formula SAN_RDPM_UA_B_IS_A_COUNTRY 
//  v1.1 - 2021/09/03 - David 
//  Add san_js_country_form_links_modifier the manage dyn attributes that update delay on links, new dyn attr Local set up Expected and Actual Start (PC-4183) and add some try catch
//
//***************************************************************************/
namespace _rdpm_country_form;

function country_form_reader(act_type,field)
{
	var act = this;
	var result = "";
	var count=0;
	if (act.SAN_RDPM_UA_B_IS_A_COUNTRY)
	{
		with(act.fromObject())
		{
			for (var vAct in plc.work_structure where vAct.WBS_TYPE.printattribute()==act_type)
			{
				result=vAct.get(field);
				count++;
			}
		}
	}
	if (count>1)
		result="";
	
	return result;
}

function country_form_modifier(act_type,field,fvalue)
{
	var result = "";
	var count=0;
	var act_target;
	var act=this;
	if (act.SAN_RDPM_UA_B_IS_A_COUNTRY)
	{
		with(act.fromObject())
		{
			for (var vAct in plc.work_structure where vAct.WBS_TYPE.printattribute()==act_type)
			{
				act_target=vAct;
				count++;
			}
		}
		if (count==1)
			result=act_target.set(field,fvalue);
		else
			plw.alert("There should be only one activity with activity type :"+act_type+ ". Impossible to update the value!");
	}
}

function san_js_country_form_links_modifier(act_type,fvalue)
{
	var act=this;
	var vAct_Type=plc.WBS_TYPE.get(act_type);
	
	if (vAct_Type!=undefined)
	{
		if (act.SAN_RDPM_UA_B_IS_A_COUNTRY)
		{
			var vList = [];
			vList.push(act);
			vList.push(vAct_Type);
			var vFilter = plw.objectset(vList);
			with(vFilter.fromobject())
			{   
				for (var vAct in plc.work_structure where vAct.WBS_TYPE==vAct_Type)
				{
					if (fvalue!=undefined && fvalue instanceof date && vAct.PS instanceof date)
					{
						// compute the delay to add
						var vCal=(vAct.CAL!=undefined && vAct.CAL!="" && vAct.CAL.printattribute()!=undefined && vAct.CAL.printattribute()!="") ? vAct.CAL.printattribute() : "";
						var vDelay="DIFF_DATE".callmacro(vAct.PS,fvalue,vCal);
						if (vDelay!=undefined && vDelay!=0)
						{
							// Manage predecessors links
							for (var vLink in vAct.get("PLINKS"))
							{
								vLink.LAG=vLink.LAG+vDelay;
							}
						}
					}
				}
			}
		}
	}
}

function country_form_locker()
{
	var result = true;
	var act=this;
	if (act.SAN_RDPM_UA_B_IS_A_COUNTRY)
			result=false;
	return result;
}

//"Local set-up"
function san_country_form_loc_setup_pf_reader(){return country_form_reader("Local set-up","EXPECTED_FINISH");}
function san_country_form_loc_setup_pf_modifier(fvalue){country_form_modifier("Local set-up","EXPECTED_FINISH",fvalue);}
function san_country_form_loc_setup_pf_locker(){return country_form_locker();}

function san_country_form_loc_setup_af_reader(){return country_form_reader("Local set-up","AF");}
function san_country_form_loc_setup_af_modifier(fvalue){country_form_modifier("Local set-up","AF",fvalue);}
function san_country_form_loc_setup_af_locker(){return country_form_locker();}

try{
	var slot = new objectAttribute(plc.work_structure,"SAN_RDPM_DA_D_LOC_SETUP_EF","END-DATE");
	slot.Comment = "Local set-up Expected Finish";
	slot.Reader = san_country_form_loc_setup_pf_reader;
	slot.Modifier=san_country_form_loc_setup_pf_modifier;
	slot.Locker = san_country_form_loc_setup_pf_locker;
	slot.hiddenInIntranetServer = false;
	slot.connecting = false;

	var slot = new objectAttribute(plc.work_structure,"SAN_RDPM_DA_D_LOC_SETUP_AF","END-DATE");
	slot.Comment = "Local set-up Actual Finish";
	slot.Reader = san_country_form_loc_setup_af_reader;
	slot.Modifier=san_country_form_loc_setup_af_modifier;
	slot.Locker = san_country_form_loc_setup_af_locker;
	slot.hiddenInIntranetServer = false;
	slot.connecting = false;

	var slot = new objectAttribute(plc.work_structure,"SAN_RDPM_DA_D_LOC_SETUP_EXP_START","DATE");
	slot.Comment = "Local set-up Expected Start";
	slot.Reader = function(){ return country_form_reader("Local set-up","PS"); };
	slot.Modifier=function(fvalue){ return san_js_country_form_links_modifier("Local set-up",fvalue); };
	slot.Locker = country_form_locker;
	slot.hiddenInIntranetServer = false;
	slot.connecting = false;
	
	var slot = new objectAttribute(plc.work_structure,"SAN_RDPM_DA_D_LOC_SETUP_AS","DATE");
	slot.Comment = "Local set-up Actual Start";
	slot.Reader = function(){ return country_form_reader("Local set-up","AS"); };
	slot.Modifier=function(fvalue){ return country_form_modifier("Local set-up","AS",fvalue); };
	slot.Locker = country_form_locker;
	slot.hiddenInIntranetServer = false;
	slot.connecting = false;
}catch(error){
plw.writetolog(error);
}

//"Recruitment"
function san_country_form_recruitment_pf_reader(){return country_form_reader("Recruitment","EXPECTED_FINISH");}
function san_country_form_recruitment_pf_modifier(fvalue){country_form_modifier("Recruitment","EXPECTED_FINISH",fvalue);}
function san_country_form_recruitment_pf_locker(){return country_form_locker();}

function san_country_form_recruitment_af_reader(){return country_form_reader("Recruitment","AF");}
function san_country_form_recruitment_af_modifier(fvalue){country_form_modifier("Recruitment","AF",fvalue);}
function san_country_form_recruitment_af_locker(){return country_form_locker();}

try{
	var slot = new objectAttribute(plc.work_structure,"SAN_RDPM_DA_D_RECRUITMENT_EF","END-DATE");
	slot.Comment = "Recruitment Expected Finish";
	slot.Reader = san_country_form_recruitment_pf_reader;
	slot.Modifier=san_country_form_recruitment_pf_modifier;
	slot.Locker = san_country_form_recruitment_pf_locker;
	slot.hiddenInIntranetServer = false;
	slot.connecting = false;

	var slot = new objectAttribute(plc.work_structure,"SAN_RDPM_DA_D_RECRUITMENT_AF","END-DATE");
	slot.Comment = "Recruitment Actual Finish";
	slot.Reader = san_country_form_recruitment_af_reader;
	slot.Modifier=san_country_form_recruitment_af_modifier;
	slot.Locker = san_country_form_recruitment_af_locker;
	slot.hiddenInIntranetServer = false;
	slot.connecting = false;
}catch(error){
plw.writetolog(error);
}

//"Treatment"
function san_country_form_treatment_pf_reader(){return country_form_reader("Treatment","EXPECTED_FINISH");}
function san_country_form_treatment_pf_modifier(fvalue){country_form_modifier("Treatment","EXPECTED_FINISH",fvalue);}
function san_country_form_treatment_pf_locker(){return country_form_locker();}

function san_country_form_treatment_af_reader(){return country_form_reader("Treatment","AF");}
function san_country_form_treatment_af_modifier(fvalue){country_form_modifier("Treatment","AF",fvalue);}
function san_country_form_treatment_af_locker(){return country_form_locker();}

try{
	var slot = new objectAttribute(plc.work_structure,"SAN_RDPM_DA_D_TREATMENT_EF","END-DATE");
	slot.Comment = "Treatment Expected Finish";
	slot.Reader = san_country_form_treatment_pf_reader;
	slot.Modifier=san_country_form_treatment_pf_modifier;
	slot.Locker = san_country_form_treatment_pf_locker;
	slot.hiddenInIntranetServer = false;
	slot.connecting = false;

	var slot = new objectAttribute(plc.work_structure,"SAN_RDPM_DA_D_TREATMENT_AF","END-DATE");
	slot.Comment = "Treatment Actual Finish";
	slot.Reader = san_country_form_treatment_af_reader;
	slot.Modifier=san_country_form_treatment_af_modifier;
	slot.Locker = san_country_form_treatment_af_locker;
	slot.hiddenInIntranetServer = false;
	slot.connecting = false;
}catch(error){
plw.writetolog(error);
}

//FUP/Extension"
function san_country_form_fup_pf_reader(){return country_form_reader("FUP/Extension","EXPECTED_FINISH");}
function san_country_form_fup_pf_modifier(fvalue){country_form_modifier("FUP/Extension","EXPECTED_FINISH",fvalue);}
function san_country_form_fup_pf_locker(){return country_form_locker();}

function san_country_form_fup_af_reader(){return country_form_reader("FUP/Extension","AF");}
function san_country_form_fup_af_modifier(fvalue){country_form_modifier("FUP/Extension","AF",fvalue);}
function san_country_form_fup_af_locker(){return country_form_locker();}

try{
	var slot = new objectAttribute(plc.work_structure,"SAN_RDPM_DA_D_FUP_EF","END-DATE");
	slot.Comment = "FUP Expected Finish";
	slot.Reader = san_country_form_fup_pf_reader;
	slot.Modifier=san_country_form_fup_pf_modifier;
	slot.Locker = san_country_form_fup_pf_locker;
	slot.hiddenInIntranetServer = false;
	slot.connecting = false;

	var slot = new objectAttribute(plc.work_structure,"SAN_RDPM_DA_D_FUP_AF","END-DATE");
	slot.Comment = "FUP Actual Finish";
	slot.Reader = san_country_form_fup_af_reader;
	slot.Modifier=san_country_form_fup_af_modifier;
	slot.Locker = san_country_form_fup_af_locker;
	slot.hiddenInIntranetServer = false;
	slot.connecting = false;
}catch(error){
plw.writetolog(error);
}


//"Local closure"
function san_country_form_loc_closure_pf_reader(){return country_form_reader("Local closure","EXPECTED_FINISH");}
function san_country_form_loc_closure_pf_modifier(fvalue){country_form_modifier("Local closure","EXPECTED_FINISH",fvalue);}
function san_country_form_loc_closure_pf_locker(){return country_form_locker();}

function san_country_form_loc_closure_af_reader(){return country_form_reader("Local closure","AF");}
function san_country_form_loc_closure_af_modifier(fvalue){country_form_modifier("Local closure","AF",fvalue);}
function san_country_form_loc_closure_af_locker(){return country_form_locker();}

try{
	var slot = new objectAttribute(plc.work_structure,"SAN_RDPM_DA_D_LOC_CLOSURE_EF","END-DATE");
	slot.Comment = "Local closure Expected Finish";
	slot.Reader = san_country_form_loc_closure_pf_reader;
	slot.Modifier=san_country_form_loc_closure_pf_modifier;
	slot.Locker = san_country_form_loc_closure_pf_locker;
	slot.hiddenInIntranetServer = false;
	slot.connecting = false;

	var slot = new objectAttribute(plc.work_structure,"SAN_RDPM_DA_D_LOC_CLOSURE_AF","END-DATE");
	slot.Comment = "Local closure Actual Finish";
	slot.Reader = san_country_form_loc_closure_af_reader;
	slot.Modifier=san_country_form_loc_closure_af_modifier;
	slot.Locker = san_country_form_loc_closure_af_locker;
	slot.hiddenInIntranetServer = false;
	slot.connecting = false;
}catch(error){
plw.writetolog(error);
} 
// 
//  PLWSCRIPT : SAN_CONTINUUM_JS2_COMMON_FUNCTIONS
//  Common functions for Continuum
//
//  V2.1 - Add e-mail notification in case of fail - PC-5832
//  V2.0 - Change activity type from "Study" to "STUDY" to identify the countries
//  v1.9 - 2022-02-03 - PC-5350 - Update archive folder path
//  v1.8 - 2022-01-18 - PC-4336 - Add import of actual subjects on countries
//  v1.7 - 2021/12/16 - PC-5349 - No automatic update of actual dates
//  v1.6 - 2021/11/15 - PC-4988 - Fix bugs + Improvements 
//  v1.5 - 2021/11/09 - PC-4979 - Use the table "Clinical Milestone Rules" for the interface
//  v1.4 - 2021/10/28 - Ludovic
//                    - Manage case where country code is empty
//                    - Restrict to Pharma Active projects
//                    - Add PS/PF before modification in the log    
//  v1.3 - 2021/10/15 - Add control if no clinical milestone is define
//  v1.2 - 2021/10/14 - PC-4609 - Improve Interface for actual dates import from ISTORE - Badereddine
//  v1.1 - 2021/09/22 - PV-4311 - use json - Ludovic
//  v1.0 - 2021/04/07 - Ludovic
//
//
//***************************************************************************/
namespace _san_impact_import;
function san_create_date_folder(date vDate,string vFolder)
{
    var string vResult="";
    if (vFolder.probefile()!=false)
    {
        if (vDate!=undefined && vDate instanceof date)
        {
            var string vDateStr=vDate.tostring("YYYYMMDDTHHMMSS");
            vDateStr=vDateStr.replaceregexp("T","_");
            var string vNEwDir=vFolder+vDateStr+"/";
            // if directory does not exist, we create it
            if (vNEwDir.probefile()==false)
            {
                plw.writetolog("****** creating directory "+vNEwDir+" ****");
                vNEwDir.mkdir();  
            }
            vResult=vNEwDir;
        }
        else plw.writetolog("****** Error on san_create_date_folder, wrong date argument ****");
    }
    else plw.writetolog("****** Error on san_create_date_folder, the folder "+vFolder+" does not exist ****");
    return vResult;
}

// Creation of hashtable of activities linked to the clinical milestones
// Clinical milestone start
var clin_ms_start_act = new hashtable("STRING");
var clin_ms_end_act = new hashtable("STRING");
var countries = new hashtable("STRING");
var act_iStore_code;
var clin_ms_start;
var clin_ms_end;
var count_clin_ms_start=0;
var count_clin_ms_end=0;
var list_ms_start = new vector();
var list_ms_end = new vector();
var list_country = new vector();
var project_vec = new vector();

// Loop on Projects: restrict loop to Active
for(var o_project in plc.project where o_project.SAN_RDPM_B_RND_PHARMA_PROJECT && o_project.DELETED==false  && o_project.STATE=="Active" && o_project._PM_NF_B_IS_A_VERSION==false)
{
	list_ms_start.push(o_project);
	list_ms_end.push(o_project);
	list_country.push(o_project);
	project_vec.push(o_project);
}

// Clinical milestones
plw.writetolog("Search for activity types linked to the clinical milestones.");
for (var act_type in plc.wbs_type)
{
    // Clinical milestone start
    if (act_type.SAN_RDPM_UA_S_CLIN_MS_START_PHARMA!="")
    {
        list_ms_start.push(act_type);
		count_clin_ms_start++;
    }
    // Clinical milestone end
    if (act_type.SAN_RDPM_UA_S_CLIN_MS_END_PHARMA!="")
    {
        list_ms_end.push(act_type);
		count_clin_ms_end++;
    }
}
plw.writetolog(count_clin_ms_start + " activity types found for clinical milestone start.");
plw.writetolog(count_clin_ms_end + " activity types found for clinical milestone end.");

// Countries
var country_act_type = plc.WBS_TYPE.get("STUDY");
list_country.push(country_act_type);
country_act_type = plc.WBS_TYPE.get("Study");
list_country.push(country_act_type);

// Create hashtable for Clinical Milestone start
if (count_clin_ms_start>0)
{
    plw.writetolog("Creation of activities hashtable for clinical milestones start.");
    var filter = plw.objectset(list_ms_start);
    with(filter.fromobject()){		
    	for(var vAct in plc.work_structure)
    	{
    		act_iStore_code=vAct.SAN_RDPM_UA_S_PHARMA_ISTORE_CODE_START_MS;
    		clin_ms_start=clin_ms_start_act.get(act_iStore_code);
    		if (clin_ms_start==undefined)
    			clin_ms_start_act.set(act_iStore_code,vAct.ONB.tostring());
    		else
    			clin_ms_start_act.set(act_iStore_code,clin_ms_start+","+vAct.ONB.tostring());
    	}
    }
}

// Create hashtable for Clinical Milestone end
if (count_clin_ms_end>0)
{
    plw.writetolog("Creation of activities hashtable for clinical milestones end.");
    var filter = plw.objectset(list_ms_end);
    with(filter.fromobject()){		
    	for(var vAct in plc.work_structure)
    	{
    		
    		
    		act_iStore_code=vAct.SAN_RDPM_UA_S_PHARMA_ISTORE_CODE_END_MS;
    		clin_ms_end=clin_ms_end_act.get(act_iStore_code);
    		if (clin_ms_end==undefined)
    			clin_ms_end_act.set(act_iStore_code,vAct.ONB.tostring());
    		else
    			clin_ms_end_act.set(act_iStore_code,clin_ms_end+","+vAct.ONB.tostring("####"));
    	}
    }
}

// Create hashtable for countries
plw.writetolog("Creation of countries hashtable.");
var filter = plw.objectset(list_country);
with(filter.fromobject()){		
	for(var vAct in plc.work_structure)
	{
		countries.set(vAct.SAN_RDPM_UA_S_ISTORE_COUNTRY_CODE,vAct);
	}
}


// Process data from impact
//*************************************************************************************************//
//********************* Processing clincal milestone dates ***************************************//
//************************************************************************************************//
var iStore_cl_ms="";
var iStore_study_code="";
var iStore_country_code="";
var iStore_ms_period="";
var iStore_id="";
var iStore_date="";
var iStore_date_end="";
var cal_act="";
var list_act;
var vect_act = new vector();
var act_onb="";
var act_obj="";
var PS_Before=-1;
var PF_Before=-1;
var date_of_day = new date();

// Archive directory
// Archive the file
var date vNow=new date();
var vNewFold=san_create_date_folder(vNow,context.SAN_UF_S_MAIN_PATH+context.SAN_CS_ISTORE_ARCH_IMPORT_PATH);
    
    
try{
    // Read data to import
    var s_fileName="istore_clinical_milestones.json";
    var s_pathFile = context.SAN_UF_S_MAIN_PATH+context.SAN_CS_IMPACT_IMPORT_PATH+s_fileName;
    
    if (s_pathFile.probefile())
    {
        plw.writetolog("Processing clinical milestones file...");
        with(plw.no_locking)
        {
        	var fis = new plw.fileinputstream(s_pathFile);
        	// Create a vector of object from the json file
        	var vec_obj = rest.parse(fis.lispstream);
        	fis.close();
        	
        	// Loop on object
        	for (var o in vec_obj)
        	{
        		// Access to the attributes of the objects as defined in the json
        		iStore_cl_ms=o.MILESTONE_CODE;
        		iStore_study_code=o.STUDY_CODE;
        		iStore_country_code=o.COUNTRY_CODE;
        		iStore_ms_period=o.PERIOD_NUM;
        		if (iStore_ms_period==undefined) iStore_ms_period=0;
        		if (iStore_country_code==undefined) iStore_country_code="";
        		iStore_date = o.ACTUAL_DATE.parsedate("YYYY-MM-DD");
        		iStore_id = iStore_cl_ms + "_" + iStore_study_code + "_" + iStore_country_code + "_"+iStore_ms_period;
        		
        		plw.writetolog("Processing  : "+iStore_id);
        		
        		// Update clinical milestone start
        		if (count_clin_ms_start>0)
                {
            		list_act=clin_ms_start_act.get(iStore_id);
            		if (list_act!=undefined) 
            		{
            			vect_act=list_act.parselist();
            			
            			for (var Act in vect_act)
            			{
            				act_onb=Act.parsenumber("####");
            				act_obj=plc.workstructure.get(act_onb);
            				// If there is no modification of the date sent from iStore --> No update
            				if (act_obj instanceof plc.workstructure && act_obj.SAN_RDPM_UA_D_ISTORE_AS!=iStore_date)
            				{
            				    PS_Before=act_obj.PS;
            				    act_obj.SAN_RDPM_UA_D_ISTORE_AS=iStore_date;
            				    act_obj.SAN_RDPM_UA_D_ISTORE_LAST_UPDATE_DATE=date_of_day;
            				    plw.writetolog("Update iStore actual start for activity : " + act_obj.printattribute() + "["+act_obj.SAN_RDPM_UA_S_PHARMA_ISTORE_CODE_START_MS+"]");
            					/*act_obj.AS = iStore_date;
            					plw.writetolog("Update actual start for activity : " + act_obj.printattribute() + "["+act_obj.SAN_RDPM_UA_S_PHARMA_ISTORE_CODE_START_MS+"] - PS before update :  "+PS_Before+" - New date : "+ iStore_date);*/
            				}
            			}
            		}
                }
        		
        		// Update clinical milestone end
        		if (count_clin_ms_end>0)
                {
            		list_act=clin_ms_end_act.get(iStore_id);
            		if (list_act!=undefined) 
            		{
            			vect_act=list_act.parselist();
            		   
            			for (var Act in vect_act)
            			{
            				act_onb=Act.parsenumber("####");
            				act_obj=plc.workstructure.get(act_onb);
            				if (act_obj instanceof plc.workstructure)
            				{
                				// Add 1 day for Actual Finish because of end date format in Planisware
                				iStore_date_end = "PERIOD_START".call(iStore_date,"DAY",1);
            				    // If there is no modification of the date sent from iStore --> No update
            				    if (act_obj.SAN_RDPM_UA_D_ISTORE_AF!=iStore_date_end)
            				    {
            				        act_obj.SAN_RDPM_UA_D_ISTORE_AF=iStore_date_end;
            				        act_obj.SAN_RDPM_UA_D_ISTORE_LAST_UPDATE_DATE=date_of_day;
            				        plw.writetolog("Update iStore actual finish for activity : " + act_obj.printattribute() + "["+act_obj.SAN_RDPM_UA_S_PHARMA_ISTORE_CODE_START_MS+"]");
            				        /*if (iStore_date_end<act_obj.PS)
            				        {
            				            // The actual finish is before the planned
            				            plw.writetolog("Update actual finish for activity : " + act_obj.printattribute()+ "["+act_obj.SAN_RDPM_UA_S_PHARMA_ISTORE_CODE_END_MS+"] is not possible because the actual finish is before the start of the activity.");
            				            
            				        }
            				        else
            				        {
                    				    PF_Before=act_obj.PF;
                    					act_obj.AF = iStore_date_end;
                    					plw.writetolog("Update actual finish for activity : " + act_obj.printattribute()+ "["+act_obj.SAN_RDPM_UA_S_PHARMA_ISTORE_CODE_END_MS+"] - PF before update : "+PF_Before+" - New date : "+ iStore_date);
            				        }*/
            				    }
            				}
            			}
            		}
                }
        	}
        	
        	plw.writetolog("End of processing file Clinical Milestones ...");
        	// Archive the file
        	if (vNewFold!="")
        	{
        		plw.writetolog('**** Archiving file into "'+vNewFold+'" ****');
        		s_pathFile.copyfile(vNewFold+s_fileName);
        	}
        }
    }
    else
    {
    	plw.writetolog("The file "+ s_pathFile+" was not found.");
    }
}
catch(error e){
	var plist = new vector();
	plist.setplist("from",context._ADM_ST_S_NOTIF_CHGLOG_EMAIL_FROM);
	plist.setplist("to",context.SAN_RDPM_CS_EMAIL_NOTIF_ERROR_DATAHUB);
	plist.setplist("subject","[Planisware] Error during importing clinical milestone dates from iStore");
	plist.setplist("body",'An error occured during SAN_RDPM_BA_IMPACT_UPDATE execution on '+context.callstringformula('$DATABASE_NAME')+': '+e.toString());
	plist.setplist("Content-Type","text/html");
	plw.mail_send(plist);
	
	plw.writetolog("Error during importing clinical milestone dates from iStore --> " +e.toString());
	plw.writetolog("Sending mail to : " + context.SAN_RDPM_CS_EMAIL_NOTIF_ERROR_DATAHUB);
}

//*************************************************************************************************//
//************************** Processing Actual subjects ******************************************//
//************************************************************************************************//

try{
    var iStore_study_code="";
    var iStore_country_code="";
    var iStore_id="";
    var iStore_actual_subject = 0;
    var country_act="";
    
    // Read data to import
    var s_fileName="istore_sites_subjects.json";
    var s_pathFile = context.SAN_UF_S_MAIN_PATH+context.SAN_CS_IMPACT_IMPORT_PATH+s_fileName;
    
    
    if (s_pathFile.probefile())
    {
        plw.writetolog("Processing actual subjects file...");
        with(plw.no_locking)
        {
        	var fis = new plw.fileinputstream(s_pathFile);
        	// Create a vector of object from the json file
        	var vec_obj = rest.parse(fis.lispstream);
        	fis.close();
        	
        	// Loop on object
        	for (var o in vec_obj)
        	{
        		// Access to the attributes of the objects as defined in the json
        		iStore_study_code=o.STUDY_CODE;
        		iStore_country_code=o.COUNTRY_CODE;
        		iStore_actual_subject=o.ENTERED_TREATMENT;
        		iStore_id = iStore_study_code + "_" + iStore_country_code;
        		
        		plw.writetolog("Processing  : "+iStore_id);
        		
        		country_act = countries.get(iStore_id);
        		if (country_act instanceof plc.workstructure && country_act.SAN_RDPM_CF_ACTUAL_SUBJECTS!=iStore_actual_subject)
        		{
        		    
        		    country_act.SAN_RDPM_CF_ACTUAL_SUBJECTS=iStore_actual_subject;
        		    country_act.SAN_RDPM_UA_D_ISTORE_LAST_UPDATE_DATE=date_of_day;
        		    plw.writetolog("Update actual subjects for activity : " + country_act.printattribute() + "["+country_act.SAN_RDPM_UA_S_ISTORE_COUNTRY_CODE+"]");
        		}
        	}
        }
        
        plw.writetolog("End of processing file Actual Subjects ...");
    	if (vNewFold!="")
    	{
    		plw.writetolog('**** Archiving file into "'+vNewFold+'" ****');
    		s_pathFile.copyfile(vNewFold+s_fileName);
    	}
    }
    else
    {
    	plw.writetolog("The file "+ s_pathFile+" was not found.");
    }
}
catch(error e){
	var plist = new vector();
	plist.setplist("from",context._ADM_ST_S_NOTIF_CHGLOG_EMAIL_FROM);
	plist.setplist("to",context.SAN_RDPM_CS_EMAIL_NOTIF_ERROR_DATAHUB);
	plist.setplist("subject","[Planisware] Error during importing actual subjects from iStore");
	plist.setplist("body",'An error occured during SAN_RDPM_BA_IMPACT_UPDATE execution on '+context.callstringformula('$DATABASE_NAME')+': '+e.toString());
	plist.setplist("Content-Type","text/html");
	plw.mail_send(plist);
	
	plw.writetolog("Error during importing actual subjects from iStore --> " +e.toString());
	plw.writetolog("Sending mail to : " + context.SAN_RDPM_CS_EMAIL_NOTIF_ERROR_DATAHUB);
}
 
namespace _rdpm;
var res = plc.resource.get("CSC");
var skill = plc.resourceskill.get("PACK");
var vact = "";
var ph_exist=false;
var old_pack_load = 0;
for (var data in plc.__USER_TABLE_SAN_RDPM_UT_PACK_LOAD_IMPORT where data.SAN_RDPM_UA_S_PACK_LOAD_IMPORT_ERROR=="")
{
	vact = plc.workstructure.get(data.name.parsenumber("####"));
	
	if (vAct instanceof plc.workstructure)
	{
		ph_exist=false;
		for(var pack_load in vAct.get("ALLOCATED_RESOURCES") where pack_load.RES==res && pack_load.PRIMARY_SKILL==skill)
		{
		    old_pack_load = pack_load.TOTAL_LOAD;
			pack_load.TOTAL_LOAD=data.SAN_RDPM_UA_N_PACK_LOAD;
			ph_exist=true;
			plw.writetolog("Update of packload for the activity "+ vAct.printattribute() +" - Old value : "+old_pack_load+" New value : " +pack_load.TOTAL_LOAD+ ".");
			data.delete();
		}
		
		if (ph_exist==false)
		{
			data.SAN_RDPM_UA_S_PACK_LOAD_IMPORT_ERROR="There is no pack load planned hour for this activity.";
			plw.writetolog("There is no pack load planned hour for the activity "+ vAct.printattribute() +".");
		}
	}
	else
	{
		data.SAN_RDPM_UA_S_PACK_LOAD_IMPORT_ERROR="There is no activity for this ONB.";
		plw.writetolog("There is no matching activity for ONB "+ data.name +".");
	}	
} 
namespace _RDPM_PM;

// LFA - PC-1983 - Fix on e-mail notifications
// ABO - PC-1983 - Creation of function san_rdpm_js2_send_vaccines_project_notifications
// LFA - PC-3557 - Creation of function san_rdpm_vac_copy_baselines_to_version
// AHI - 09/12/2021 - PC-410 - Add a control on o_prj (o_prj.FILE) to make the field study code in toolbar work in workpackages module
// LFA PC-4595 - Modification of filter on study code in PM Toolbar to avoid global map on study code table
// Used in Toolbar SAN_RDPM_TB_GANTT_ACT

function san_rdpm_list_study_code()
{
    var v_current_prj_codes = new vector();
    var v_study_codes = new vector();
	var o_prj = undefined;

    for(var oCurPageObject in plw.currentpageobject()){
		
    	if(oCurPageObject instanceof plc.work_structure){
			// Case of oCurPageObject being a work_structure (ex. in workpackage module)
			// we retrieve the project of the work_structure
			o_prj = oCurPageObject.FILE;
		}else{
			o_prj = oCurPageObject;
		}

		if(o_prj instanceof plc.ordo_project){
			if(o_prj.SAN_UA_RWE_PROJECT_CODE_PRIME!=''){
				v_current_prj_codes.push(o_prj.SAN_UA_RWE_PROJECT_CODE_PRIME);
			}
		}
    }
    v_current_prj_codes = v_current_prj_codes.removeduplicates();
    
    
    for (var prj_code in v_current_prj_codes)
    {
    	for(var o_study_code in prj_code.get("USER_ATTRIBUTE_INVERSE_SAN_UA_RWE_PROJ_CODE.__USER_TABLE_SAN_RWE_PRIME_CODES"))
    	{	
    		v_study_codes.push(o_study_code);
    	}
    }
    this.possiblevalues=v_study_codes;
}


// PC-3557 - Function do copy baselines in version
function san_rdpm_vac_copy_baselines_to_version(version)
{
	var origin_project;
	var hash_ref_to_copy = new hashtable("STRING");
	var hash_ref_version = new hashtable("STRING");
	var nb_monthly=0;
	var nb_yearly=0;
	var reference;
	if (version instanceof plc.project && version._PM_NF_B_IS_A_VERSION && version.SAN_RDPM_B_RND_VACCINES_PROJECT)
	{
		// List references of the version
		for (var ref in version.get("REFERENCES") where ref.TEMPLATE.printattribute()=="SAN_RDPM_YEARLY_BASELINE" || ref.TEMPLATE.printattribute()=="SAN_RDPM_MONTHLY_BASELINE")
		{
			hash_ref_version.set(ref.NAME,ref);
		}
		
		origin_project=version.ORIGIN_PROJECT;
		
		if (origin_project instanceof plc.project)
		{
			for (var ref in origin_project.get("REFERENCES") order by [['INVERSE','AD']])
			{
				if (ref.TEMPLATE.printattribute()=="SAN_RDPM_YEARLY_BASELINE" && nb_yearly<1)
				{
					hash_ref_to_copy.set(ref.NAME,ref);;
					nb_yearly++;
				}
				else
				{
					if (ref.TEMPLATE.printattribute()=="SAN_RDPM_MONTHLY_BASELINE" && nb_monthly<2)
					{
						hash_ref_to_copy.set(ref.NAME,ref);;
						nb_monthly++;
					}
				}
			}
			// Clean previous reference 
			for (var ref_name in hash_ref_version)
			{
				// The reference is not part of references to copy
				if (hash_ref_to_copy.get(ref_name) == undefined)
				{
					reference=hash_ref_version.get(ref_name);
					plw.writetolog("Delete reference "+ref_name+" for project version "+version.printattribute());
					reference.delete();
				}
			}
			// Copy baselines to version
			for (var Ref_Name in hash_ref_to_copy)
			{
				// Check the baseline is not already in the version
				if (hash_ref_version.get(ref_name) == undefined)
				{
					reference=hash_ref_to_copy.get(ref_name);
					plw.writetolog("Copy "+ref_name+" in project version "+version.printattribute());
					reference.COPY_TO_DATASET=version;
				}
			}
		}		
	}
}


// PC-1983 - Function to send emails to specific users

function san_rdpm_js2_send_vaccines_project_notifications()
{	
	var o_project_type_filter = plw.objectset(plc.project_type.get("Continuum.RDPM.Pasteur"));
	with(o_project_type_filter.fromobject())
	{
		for(var o_project in plc.project where o_project.DELETED==false  && (o_project.STATE=="Active" || o_project.STATE=="Simulation") && o_project._PM_NF_B_IS_A_VERSION==false && o_project.SAN_RDPM_UA_B_NEW_PROJECT && o_project.SAN_RDPM_UA_PM_PRJ_PORT!=undefined && o_project.SAN_RDPM_UA_PM_PRJ_PORT instanceof plc.__USER_TABLE_SAN_RDPM_UT_PM_PRJ_PORT)
		{
			var body = "";
			var email_recipient="";
			var subject = "";
			//e-mail recipient
			email_recipient = o_project.SAN_RDPM_UA_PM_PRJ_PORT.SAN_RDPM_UA_S_PORTFOLIO_NOTIFICATION_EMAILS;

			if (email_recipient!="")
			{
				//e-mail body & subject
				if (o_project.SAN_RDPM_UA_PRJ_RND_PRJ_VAC)
				{
					subject = "A new project has been created in RDPM";

					body=body+"<html><p>Dear user,</p><p>Please be informed that a new "+ o_project.SAN_RDPM_UA_PM_PRJ_PORT.name +" project has been created with the following information:</p>";
					body=body+"<p>Portfolio : " +o_project.SAN_RDPM_UA_PM_PRJ_PORT.printattribute()+ "<br>";
					body=body+"Project code : " +o_project.SAN_UA_RWE_PROJECT_CODE_PRIME.printattribute()+ "<br>";
					body=body+"Name : " +o_project.NAME + "<br>";
					body=body+"Description : " +o_project.DESC+ "<br>";
					body=body+"Project site : " +o_project.SAN_RDPM_UA_PROJECT_SITE.printattribute()+ "<br>";
					body=body+"Franchise : " +o_project.SAN_RDPM_UA_FRANCHISE.printattribute()+ "<br>";
					body=body+"Vaccines project category : " +o_project.SAN_RDPM_UA_VACC_PROJ_CAT+ "<br>";
					body=body+"Project stage : " +o_project.SAN_RDPM_UA_VACC_PROJ_SUB_CAT + "<br>";
					body=body+"Objective : " +o_project.SAN_RDPM_UA_OBJECTIVE + "<br>";
					body=body+"Global Project Head : " +o_project._PO_DA_S_PROJECT_ROLE_296636646740  + "<br>";
					body=body+"Global Project Manager : " +o_project._PO_DA_S_PROJECT_ROLE_296636645540 + "</p>";
					body=body+"<p>Thank you!"+ "<br>";
					body=body+"This email is generated automatically, please do not reply!</p></html>";
				}
				else
				{
					if (o_project.SAN_RDPM_UA_PRJ_RND_IND_VAC)
					{
						subject = "A new indication has been created in RDPM for the project "+ o_project.SAN_UA_RWE_PROJECT_CODE_PRIME.printattribute() +" - "+o_project.PARENT.NAME;

						body=body+"<html><p>Dear user,</p><p>Please be informed that for the project "+ o_project.SAN_UA_RWE_PROJECT_CODE_PRIME.printattribute() +" - "+o_project.PARENT.NAME+ " a new indication has been created with the following information: </p>";
						body=body+"<p>Portfolio : " +o_project.SAN_RDPM_UA_PM_PRJ_PORT.printattribute()+ "<br>";
						body=body+"Project code : " +o_project.SAN_UA_RWE_PROJECT_CODE_PRIME.printattribute()+ "<br>";
						body=body+"Name : " +o_project.parent.NAME + "<br>";
						body=body+"Description : " +o_project.parent.DESC+ "<br>";
						body=body+"Indication code : " +o_project.NAME + "<br>";
						body=body+"Indication description : " +o_project.DESC+ "</p>";
						body=body+"<p>Thank you!"+ "<br>";
						body=body+"This email is generated automatically, please do not reply!</p></html>";
					}
				}
				
				if (body!="")
				{
					var plist = new vector();
					plist.setplist("from",context._ADM_ST_S_NOTIF_CHGLOG_EMAIL_FROM);
					plist.setplist("to",email_recipient);
					plist.setplist("subject",subject);
					plist.setplist("body",body);
					plist.setplist("Content-Type","text/html");
					plw.mail_send(plist);
				}
			}
			
			o_project.SAN_RDPM_UA_B_NEW_PROJECT = false;
		}
	}	
} 
namespace _split_abs;

// ABO - PC-1965 - Creation of function san_redpm_res_split_abs(res) to split absence depending on the net availability of the user



function san_redpm_res_split_abs(res)
{
	var abs_sd;
	var abs_fd;
	var split_abs;
	var split_sd;
	var split_fd;
	
	// Get absences
	for (var abs in res.get("Availabilities") where abs.TYPE=="Absence")
	{
		split_abs = false;
		abs_sd=abs.SD;
		abs_fd=abs.FD;
		
		// Get all standard avaibilities in the period of the absence
		for (var disp in res.get("Availabilities") where disp.TYPE=="" && (disp.SD==undefined || disp.SD<abs_fd) && (disp.FD==undefined || disp.FD>abs_sd))
		{
			// There is an avaibility that cover the whole absence
			if ((disp.SD==undefined || disp.SD<=abs_sd) && (disp.FD==undefined || disp.FD>=abs_fd))
			{
				// We check if we have the same percentage
				if (abs.PCT!=disp.PCT)
				{
					abs.PCT=disp.PCT;
					plw.writetolog("Update percentage for absence " + abs.ONB + " for resource "+ res.printattribute()+" [Start date : " +abs.SD + " - End date : " +abs.FD+" - Percentage :"+abs.PCT+"].");
				}
				break;
			}
			// There is a partial avaibility
			else
			{
				// Start date of the new absence
				if (disp.SD==undefined || disp.SD<abs.SD)
					split_sd=abs.SD;
				else
					split_sd=disp.SD;
				
				// End date of the new absence
				if (disp.FD==undefined || disp.FD>abs.FD)
					split_fd=abs.FD;
				else
					split_fd=disp.FD;

				
				var plist = new vector();
				plist.push("SD");
				plist.push(split_sd);
				plist.push("FD");
				plist.push(split_fd);
				plist.push("TYPE");
				plist.push("Absence");
				plist.push("PCT");
				plist.push(disp.PCT);
				plist.push("QTY");
				plist.push(-disp.QTY);
				
				var new_abs=disp.CopywithPlist(plist);
				new_abs.positiveonb();
				plw.writetolog("Creation of new absence " + new_abs.ONB + " for resource "+ res.printattribute()+" [Start date : " +new_abs.SD + " - End date : " +new_abs.FD+" - Percentage :"+new_abs.PCT+"].");
				
				
				split_abs=true;
			}
		}
		
		if (split_abs)
		{
			plw.writetolog("Deletion of absence " + abs.ONB + " for resource "+ res.printattribute()+" [Start date : " +abs.SD + " - End date : " +abs.FD+" - Percentage :"+abs.PCT+"].");
			abs.delete();			
		}
	}	
} 
/*
* Script V2 Name : SAN_RDPM_JS2_ACTIVITY_STATE_UPDATE

* 09/DEC/21 ABO V2.00 Extend the script on vaccine projects (change the Project_type "Continuum.RDPM")
* 05-OCT-2021 LFA V2.02 PC-4695 : Limit batch to Pharma Projects
* 12-APR-2021 LFA V2.01 PC-2469 : Replace vAct.id by vAct.printattribute() in plw.writetolog
* 09-MARS-21 ABE V2.00  PC-3030 : Replace vAct.name by vAct.id in plw.writetolog
* 02-JAN-21 ABE V2.00  PC-3030 : Batch to open activity to TT and "is a study?" from Act type table now
* 28-DEC-20 ABE V2.00  PC-2469 : Update filter to exclude non relevant projects from the treatment (permanent projects, templates, Simulation)
* 02-OCT-20 MDO V1.02 Update filter testing pharma project type
* 15-SEP-20 MDO V1.01 Update for filter with new datasets
* 03-MAR-20 HRA V1.00 Creation of script(RDPM Update Activity STATE for time tracking)
*/

namespace _san_rdpm_activity_state_update;


var list = new vector();

var o_project_type_filter = plw.objectset(plc.project_type.get("Continuum.RDPM"));

with(o_project_type_filter.fromobject())
{
	// Loop on Projects: restrict loop to Active Pharma projects only and exclude non relevant projects from the treatment (permanent projects, templates, Simulation)
    for(var o_project in plc.project where o_project.DELETED==false && o_project.STATE=="Active"  && o_project._WZD_AA_B_PERMANENT != true && o_project._INF_NF_B_IS_TEMPLATE != true && o_project.PARENT.printattribute()=="")
    {
        list.push(o_project);
    }
}

var filter = plw.objectset(list);

with(filter.fromobject())
{
    for (var vAct in plc.workstructure )
    {
        if (vAct.SAN_UA_RDPM_B_UPDATE_ACTIVITY_STATE_TO_OPEN ) {
			vAct.state = "Open";
			plw.writetolog(vAct.printattribute()+" updated to Open");
		}
		if (vAct.SAN_UA_RDPM_B_UPDATE_ACTIVITY_STATE_TO_CLOSED) {
			vAct.state = "Closed";
			plw.writetolog(vAct.printattribute()+" updated to Closed");
		}		
    }
}
 
// 
//  PLWSCRIPT : SAN_RDPM_JS2_APPLY_EQUATIONS
//  call on batch SAN_RDPM_BA_APPLY_EQUATION_PROJECT
//
//  Revision 1.4 2022/03/30 David 
//  Display the scope in the log file and manage if no projects (PC-5896) 
//
//  Revision 1.3 2022/03/17 David 
//  Add condition on obs for Vaccines projects (PC-5677) 
//
//  Revision 1.2 2021/10/06 David 
//  Modify filter on projects (PC-4661 / PC-4662) and modify timeout for sub-batchs to 2h
//
//  Revision 1.1 2021/09/22 David
//  Use portfolios and batch macro on dataset to reduce the size of the transactions (PC-4563)
//
//  Revision 1.0 2021/06/16 David
//  Use multiple batchs in // to improve performance, comment old version (PC-3947)
//
//  Revision 0.4 2021/05/31 David
//  Add filter to apply equations (PC-3957)
//
//  Revision 0.3 2021/03/16 Islam
//  SAN_RDPM_UA_OC_B_EQUATIONS_RUNNING added to manage trigger on alerts on modification (PC-2908)
//
//  Revision 0.2 2021/01/28 David
//  Modification to clear the vector on each project and apply only on PARENT project (PC-2851)
//
//  Revision 0.1 2021/01/18 David 
//  Creation : replace v1 script san_rdpm_script_apply_equa_vaccine_pharma, fix PC-2851 to always apply on studies
//
//***************************************************************************/
namespace _san_rdpm_equation;

// get the number of batch from the user formula (depending on database)
var vSettingVal=context.SAN_RDPM_UF_N_EQUA_BATCH_NB;
var number vNbofBatch=(vSettingVal!=undefined && vSettingVal instanceof number && vSettingVal>0) ? vSettingVal : 4;
//end of line character
var string vNewLine="GET_CHAR".callmacro(10);

var vScript=plc.USER_SCRIPT.get("SAN_RDPM_JS2_APPLY_EQUATIONS_SUBBATCH");
if (vScript!=undefined)
{
	var vUser=context.callstringformula("$CURRENT_USER");
	var vVectList=new vector();
	var number i=1;
	var number j=0;
	plw.writetolog(" -- Scope for equation batch (SAN_RDPM_CS_EQUA_BATCH_SCOPE) : "+context.SAN_RDPM_CS_EQUA_BATCH_SCOPE);
	plw.writetolog(" ---- NB : Valid scopes are 'PHARMA' for Pharma only, 'PASTEUR' for Vaccines only and 'PHARMA,PASTEUR' for both");
	// splitting projects by number of objects and to generate as much lists as the number of batchs to run in //
	for (var o_proj in plc.ordo_project where ( ((o_proj.SAN_RDPM_B_RND_VACCINES_PROJECT && o_proj.SAN_RDPM_UA_B_EQUATION_FILTER_PASTEUR) || (o_proj.SAN_RDPM_B_RND_PHARMA_PROJECT && o_proj.SAN_RDPM_UA_B_EQUATION_FILTER_PHARMA)) && o_proj.PARENT.printattribute()=="" && o_proj._INF_NF_S_PRJ_STATE_INTERNAL  == "ACTIVE" && o_proj._INF_NF_B_IS_TEMPLATE != true && o_proj._WZD_AA_B_PERMANENT != true ) order by [['INVERSE','NUMBER_OF_OBJECTS']])
	{
	    var vToAdd=true;
	    // for Vaccines, add the criteria on OBS (PC-5677) : at least on activity with an OBS checked SAN_RDPM_UA_B_EQUA_BATCH_FILT
	    if (o_proj.SAN_RDPM_B_RND_VACCINES_PROJECT==true)
	    {
			vToAdd=false;
			for (var vAct in o_proj.ACTIVITIES where vAct.OBS_ELEMENT.SAN_RDPM_UA_B_EQUA_BATCH_FILT)
			{
				vToAdd=true;
				break;
			}
		}
	    if (vToAdd==true)
	    {
    		// change to avoid having the biggest projects always on the 1st list
    		// if pair, projects are set first in list 1 then 2,3,4... else they are set first in list n,...,3,2,1
    		var number k=(j%2==0) ? i : math.round(vNbofBatch-i+1);
    		if (vVectList[k]!=undefined) vVectList[k]+=","+o_proj.printattribute();
    		else vVectList[k]=o_proj.printattribute();
    		// reaching the latest list (number of batchs), restart
    		if (i>=vNbofBatch)
    		{
    			i=1;
    			j++;
    		}
    		else i++;
	    }
	}
	plw.writetolog(" -- For database "+context.callstringformula("$DATABASE_NAME")+", this batch will generate "+vNbofBatch.tostring("####")+" batchs (macro on dataset) and associated user portfolios");
    if (vVectList.length>0)
    {
	  for (var i=1;i<=vNbofBatch;i++)
	  {
		var string iStr=(i<10) ? "0"+i.tostring("####") : i.tostring("####");
		var string vListofProj=vVectList[i];
		if (vListofProj!=undefined && vListofProj!="")
		{
    		// create the portfolio
    		var vPort=plc._FF_PT_FAVOR_FILTERS.get("SAN_RDPM_EQ_BATCH_PORT_"+iStr);
    		if (vPort!=undefined)
    		{
    			plw.writetolog(" The portfolio "+vPort.printattribute()+" exists");
    			vPort._FF_AA_T_FORMULA="FROM(\""+vListofProj+"\")";
    		}
    		else
    		{
    			plw.writetolog(" The portfolio does not exist, creation...");
    			// creation of the portfolio shared in RO with R_ITS_ADMIN (to see it when editing the sub-batches) but only UBATCH can modify it
    			var vArg=new vector("NAME","SAN_RDPM_EQ_BATCH_PORT_"+iStr,"DESC","Portfolio for equation batch "+iStr,"_FF_AA_T_FORMULA","FROM(\""+vListofProj+"\")","_FF_RA_USER_FF",vUser,"FILE",context._ADM_SET_PREFERENCE_FILE,"_FF_AA_B_EXPORTED",true,"_FF_AA_S_GROUP_READ","R_ITS_ADMIN");
    			vPort=plc._FF_PT_FAVOR_FILTERS.makeopx2objectwithplist(vArg);
    			plw.writetolog("Portfolio "+vPort.printattribute()+" created!");
    		}
    
    		// code for the user script of the batch i 
    		/*
    		var vCode="// ******* Do not modify, automatically generated and updated by the main script batch for equations SAN_RDPM_JS2_APPLY_EQUATIONS *****"+vNewLine;
    		vCode=vCode+"namespace _san_rdpm_equation;"+vNewLine+"var vVect=new vector();"+vNewLine+"for (var vProj in plc.ordo_project where vProj.PARENT.printattribute()==\"\") { vVect.push(vProj); }"+vNewLine+"if (vVect.length>0){"+vNewLine+"plw.writetolog(\" -- List of projects : \"+vVect.join(\",\"));"+vNewLine+"_san_equa.san_rdpm_js_apply_equation_on_list(vVect);"+vNewLine+"}else{ plw.writetolog(\" -- No project!\"); }";
    		
    		// if the user script already exists, just update the code, else create it
    		var vScript=plc.USER_SCRIPT.get("SAN_RDPM_JS2_APPLY_EQUATIONS_"+iStr);
    		if (vScript!=undefined)
    		{
    			vScript.SCRIPT_CODE=vCode;
    		}
    		else
    		{
    			// store it in a "real" file else it is not load in the batch (because not present in the master)
    			var vArg=new vector("NAME","SAN_RDPM_JS2_APPLY_EQUATIONS_"+iStr,"DESC","SAN_RDPM_JS2_APPLY_EQUATIONS_"+iStr,"ACTIVE",true,"_US_AA_B_BATCH_SCRIPT",true,"EVAL_ON_LOAD",false,"SCRIPT_CODE",vCode,"FILE","SAN_CF_RDPM_CONFIG_L1");
    			vScript=plc.USER_SCRIPT.makeopx2objectwithplist(vArg);
    		}
    		*/
    		// if the batch already exists, just update the user script, else create it
    		var vBatch=plc._BA_PT_BATCH.get("SAN_RDPM_BA_APPLY_EQUATION_PROJECT_"+iStr);
    		if (vBatch!=undefined)
    		{
    			var vModif = new vector("_INF_RA_USER_SCRIPT",vScript,"_BA_AA_B_BATCH_ON_DATASET",true,"_BA_DA_S_BATCH_PORTFOLIO",vPort.printattribute(),"_BA_AA_S_BATCH_BAG_KEY","SAN_RDPM_UA_PRJ_S_ROOT_PROJECT","_BA_AA_B_ONLY_MATCH_KEY",true,"_BA_AA_N_TIMEOUT",7200);
    			vBatch.ModifyWithPlist(vModif);
    		}
    		else
    		{
    			var vArg=new vector("NAME","SAN_RDPM_BA_APPLY_EQUATION_PROJECT_"+iStr,"DESC","SAN_RDPM_BA_APPLY_EQUATION_PROJECT_"+iStr,"_BA_AA_N_BATCH_TYPE","User script","_INF_RA_USER_SCRIPT",vScript,"_INF_AA_AT_FREQ","Never","_INF_AA_N_END_AFTNB_DAILY",1000000,"FILE","SAN_CF_RDPM_BATCH","_BA_AA_B_BATCH_ON_DATASET",true,"_BA_DA_S_BATCH_PORTFOLIO",vPort.printattribute(),"_BA_AA_S_BATCH_BAG_KEY","SAN_RDPM_UA_PRJ_S_ROOT_PROJECT","_BA_AA_B_ONLY_MATCH_KEY",true,"_BA_AA_N_TIMEOUT",7200);
    			vBatch=plc._BA_PT_BATCH.makeopx2objectwithplist(vArg);
    		}
    		var vBatchReq=plc._INF_PT_REQ.get("SAN_RDPM_BA_APPLY_EQUATION_PROJECT_"+iStr);
    
    		// simulate click on Execute for the batch
    		if (vBatchReq!=undefined) 
    		{
    			plw.writetolog("Run batch "+iStr+" on portfolio "+vPort.printattribute());
    			plw.writetolog(" -> filter used in the portfolio : "+vPort._FF_AA_T_FORMULA);
    			vBatchReq.callmacro("_BA_TO_EXEC_BATCH");
    		}
    		else plw.writetolog(" -- Error : batch SAN_RDPM_BA_APPLY_EQUATION_PROJECT_"+iStr+" does not exist!");
		}
		else plw.writetolog(" -- No project for batch "+iStr);
	  }
    }
	else plw.writetolog(" -- No projects with current conditions to run the equations batch.");
	  
}
else
{
	plw.writetolog(" -- Error : user script SAN_RDPM_JS2_APPLY_EQUATIONS_SUBBATCH does not exist!");
}


// ********************** Old version with only one batch ***************************
/*
//Set context.SAN_RDPM_UA_OC_B_EQUATIONS_RUNNING to true to not trigger alerts on modification
context.SAN_RDPM_UA_OC_B_EQUATIONS_RUNNING=true;

//Create a vector to store activities 
var vector SelectionVector = new vector();
plw.writetolog("Starting ApplyEquations_For_RND_Project");
for (var o_proj in plc.ordo_project where ( (o_proj.SAN_RDPM_B_RND_VACCINES_PROJECT || o_proj.SAN_RDPM_B_RND_PHARMA_PROJECT ) && o_proj.PARENT.printattribute()=="" && o_proj._INF_NF_S_PRJ_STATE_INTERNAL  == "ACTIVE" && o_proj._INF_NF_B_IS_TEMPLATE != true && o_proj._WZD_AA_B_PERMANENT != true )) 
{
	SelectionVector.clear();
	SelectionVector=new vector();
	plw.writetolog("Starting : "+ o_proj.NAME);
	// browse all project's activities and select only not leaf activities
	// PC-2851 : force study also
	for(var plc.workstructure vAct in o_proj.ACTIVITIES where (vAct.IS_A_LEAF==true || vAct.SAN_UA_RDPM_B_IS_A_STUDY==true) && vAct.SAN_RDPM_UF_B_EQUA_FILTER==true)
	{
		selectionvector.push(vAct);
	}
	// apply equation function on activities vector
	SelectionVector.Applyequations(undefined);
}

//Clear context.SAN_RDPM_UA_OC_B_EQUATIONS_RUNNING after equations application
context.SAN_RDPM_UA_OC_B_EQUATIONS_RUNNING=false;
*/ 
// 
//  PLWSCRIPT : SAN_RDPM_JS2_APPLY_EQUATIONS_SUBBATCH
//  call on sub-batches SAN_RDPM_BA_APPLY_EQUATION_PROJECT_X
//
//  Revision 0.3 2022/01 ep 
//  Add counting functions to investigate duplicates issue (PC-4757) [detect_duplicates_expenditures] [detect_duplicates_expenditures]
//
//  Revision 0.2 2021/10/06 David 
//  Modify filter on projects (PC-4661 / PC-4662)
//
//  Revision 0.1 2021/09/22 David 
//  Creation to manage equation batch with macro on dataset (PC-4563)
//
//***************************************************************************/
namespace _san_rdpm_equation;

// PC-4757
/*function detect_duplicates_expenditures(vProj) {
	plw.writetolog(" ######################################################################");
	plw.writetolog(" ############  DUPLICATE EXPENDITURES CHECKINGS FOR PROJECT: "+vProj);
	var vListOfEquationToExclude=new vector("SAN_RDPM_EQ_EXONA_CSO","SAN_RDPM_EQ_EXONA_CQL","SAN_RDPM_EQ_EXONA_CTAM","SAN_EQ_PH_IPSO_DIST","SAN_EQ_PH_IPSO_DIST_EXT","EQ_CSO_CR_PH_CS_TSOM_FIRST_IP_TO_LPI_PERIOD_PER_COUNTRY","EQ_CSO_CR_PH_CS_TSOM_LPI_TO_LPLV_PERIOD_PER_COUNTRY","EQ_CSO_CR_PH_CS_TSOM_LPLV_CLOSURE_PERIOD_PER_COUNTRY","EQT_CSO_CR_PH_CS_TSOM_LPLV_CLOSURE_PERIOD_PER_COUNTRY","EQT_CSO_CR_PH_CS_TSOM_CS_SETUP_COUNTRY","EQT_CSO_CR_PH_CS_TSOM_CS_FEASIBILITY_COUNTRY");
	
	var vTot=0;
	var vGlobal=0;
	var vToday=new date();
	var vRefDate="PERIOD_START".callmacro(vToday,"Month",-1);
	
	var vHash=new hashtable("STRING");
	var VprojObj=plc.ordo_project.get(VProj);
	if (VprojObj!=undefined && VprojObj InstanceOf plc.ordo_project) {
		with(VprojObj.fromobject())
		{
			for (var vExpend in plc.expenditure where vExpend.equation_object!=undefined && vExpend.equation_object!="" && vExpend.equation_object.printattribute()!="" && vExpend.CREATOR_OBJECT!=undefined && vExpend.CREATOR_OBJECT!="" && vListOfEquationToExclude.position(vExpend.equation_object.printattribute())==undefined && vExpend.ED instanceof date && vExpend.ED>=vRefDate && vExpend.EQUATION_OVERRIDE!=true)
			{
				var vCreaClass="";
				var vCreaObj="";
				if (vExpend.CREATOR_OBJECT!=undefined && vExpend.CREATOR_OBJECT!="")
				{
					vCreaClass=vExpend.CREATOR_OBJECT.class;
					vCreaObj=vExpend.CREATOR_OBJECT.printattribute();
				}
				var vDateD=(vExpend.SD instanceof date) ? "PRINT_DATE".callmacro(vExpend.SD,"DD/MM/YYYY") : "";
				var vDateF=(vExpend.ED instanceof date) ? "PRINT_END_DATE".callmacro(vExpend.ED,"DD/MM/YYYY") : "";
				vGlobal++;
				var vId=vCreaClass+";"+vCreaObj+";"+vExpend.project.printattribute()+";"+vExpend.activity.printattribute()+";"+vExpend.RES.printattribute()+";"+vExpend._RM_REVIEW_RA_LOCATION.printattribute()+";"+vExpend._INF_RA_CBS2.printattribute()+";"+vExpend._INF_RA_CBS3.printattribute()+";"+vExpend.equation_object.printattribute()+";"+"PRINT_NUMBER".callmacro(vExpend.QUANTITY,"####,00")+";"+vExpend.UNIT.printattribute()+";"+vExpend.COST_ACCOUNT.printattribute()+";"+vDateD+";"+vDateF;
				var vDupli=vHash.get(vId);
				if (vDupli!=undefined)
				{
					var vExpendIni=plc.expenditure.get(vDupli);
					if (vExpendIni!=undefined)
					{
						var vONB="PRINT_NUMBER".callmacro(vExpend.ONB,"####");
						var vPrevONB="PRINT_NUMBER".callmacro(vDupli,"####");
						var vStudyCode=vExpend.activity.SAN_RDPM_UA_ACT_S_CALCULATED_STUDY_CODE;
						plw.writetolog(vId+";"+vStudyCode+";"+vPrevONB+";"+vExpendIni.EQUATION_OVERRIDE+";"+vExpendIni.LAST_MODIFICATION_USER+";"+"PRINT_DATE".callmacro(vExpendIni.LAST_MODIFICATION_DATE,"DD/MM/YYYY")+";"+vONB+";"+vExpend.EQUATION_OVERRIDE+";"+vExpend.LAST_MODIFICATION_USER+";"+"PRINT_DATE".callmacro(vExpend.LAST_MODIFICATION_DATE,"DD/MM/YYYY"));
						vTot++;
					}
					else plw.writetolog(" Check duplicate expenditure : error when getting the expenditure with ONB "+vDupli);
				}
				else 
				{
					vHash.set(vId,vExpend.ONB);
				}
			}
		}
	}
	vHash.clear();
	
	var vPerc=(vGlobal>0) ? math.round((vTot*100)/vGlobal) : 0;
	plw.writetolog(".");
	plw.writetolog("DUPLICATE RESULTS Expenditures on projects "+vTot+" / "+vGlobal+" : "+vPerc+"%");
	if (vTot>0) {
		plw.writetolog(" !!! DUPLICATES EXP detected !!! "+vTot+" on project "+VProj);
	}
	plw.writetolog(" ######################################################################");
}

function detect_duplicates_alloc(vProj) {
	plw.writetolog(" ######################################################################");
	plw.writetolog(" ############  DUPLICATE ALLOCS CHECKINGS FOR PROJECT: "+vProj);
	
	var vListOfEquationToExclude=new vector("SAN_EQ_PH_IPSO_DIST","SAN_EQ_PH_IPSO_DIST_EXT","EQ_CSO_CR_PH_CS_TSOM_FIRST_IP_TO_LPI_PERIOD_PER_COUNTRY","EQ_CSO_CR_PH_CS_TSOM_LPI_TO_LPLV_PERIOD_PER_COUNTRY","EQ_CSO_CR_PH_CS_TSOM_LPLV_CLOSURE_PERIOD_PER_COUNTRY","EQT_CSO_CR_PH_CS_TSOM_LPLV_CLOSURE_PERIOD_PER_COUNTRY","EQT_CSO_CR_PH_CS_TSOM_CS_SETUP_COUNTRY","EQT_CSO_CR_PH_CS_TSOM_CS_FEASIBILITY_COUNTRY");
	var s_monitor_message="Exporting duplicate allocations";
	var vTot=0;
	var vGlobal=0;
	var vToday=new date();
	var vRefDate="PERIOD_START".callmacro(vToday,"Month",-1);
	var VprojObj=plc.ordo_project.get(VProj);
	if (VprojObj!=undefined && VprojObj InstanceOf plc.ordo_project) {
		var vHash=new hashtable("STRING");
		with(VprojObj.fromobject())
		{
			for (var vAlloc in plc.task_alloc where vAlloc.equation_object!=undefined && vAlloc.equation_object!="" && vAlloc.equation_object.printattribute()!="" && vAlloc.CREATOR_OBJECT!=undefined && vAlloc.CREATOR_OBJECT!="" && vListOfEquationToExclude.position(vAlloc.equation_object.printattribute())==undefined && vAlloc.FD instanceof date && vAlloc.FD>=vRefDate && vAlloc.EQUATION_OVERRIDE!=true)
			{
				var vCreaClass="";
				var vCreaObj="";
				if (vAlloc.CREATOR_OBJECT!=undefined && vAlloc.CREATOR_OBJECT!="")
				{
					vCreaClass=vAlloc.CREATOR_OBJECT.class;
					vCreaObj=vAlloc.CREATOR_OBJECT.printattribute();
				}
				var vDateD=(vAlloc.SD instanceof date) ? "PRINT_DATE".callmacro(vAlloc.SD,"DD/MM/YYYY") : "";
				var vDateF=(vAlloc.FD instanceof date) ? "PRINT_END_DATE".callmacro(vAlloc.FD,"DD/MM/YYYY") : "";
				vGlobal++;
				var vId=vCreaClass+";"+vCreaObj+";"+vAlloc.project.printattribute()+";"+vAlloc.activity.printattribute()+";"+vAlloc.RES.printattribute()+";"+vAlloc._RM_REVIEW_RA_LOCATION.printattribute()+";"+vAlloc._INF_RA_CBS2.printattribute()+";"+vAlloc._INF_RA_CBS3.printattribute()+";"+vAlloc.PRIMARY_SKILL.printattribute()+";"+vAlloc._RM_REVIEW_RA_ROLE.printattribute()+";"+vAlloc.equation_object.printattribute()+";"+"PRINT_NUMBER".callmacro(vAlloc.TOTAL_LOAD,"####,00")+";"+vDateD+";"+vDateF;
				var vDupli=vHash.get(vId);
				if (vDupli!=undefined)
				{
					var vAllocIni=plc.task_alloc.get(vDupli);
					if (vAllocIni!=undefined)
					{
						var vONB="PRINT_NUMBER".callmacro(vAlloc.ONB,"####");
						var vPrevONB="PRINT_NUMBER".callmacro(vDupli,"####");
						var vStudyCode=vAlloc.activity.SAN_RDPM_UA_ACT_S_CALCULATED_STUDY_CODE;
						//vFile.writeln(vId+";"+vStudyCode+";"+vPrevONB+";"+vAllocIni.EQUATION_OVERRIDE+";"+vAllocIni.LAST_MODIFICATION_USER+";"+"PRINT_DATE".callmacro(vAllocIni.LAST_MODIFICATION_DATE,"DD/MM/YYYY")+";"+vONB+";"+vAlloc.EQUATION_OVERRIDE+";"+vAlloc.LAST_MODIFICATION_USER+";"+"PRINT_DATE".callmacro(vAlloc.LAST_MODIFICATION_DATE,"DD/MM/YYYY"));
						plw.writetolog(vId+";"+vStudyCode+";"+vPrevONB+";"+vAllocIni.EQUATION_OVERRIDE+";"+vAllocIni.LAST_MODIFICATION_USER+";"+"PRINT_DATE".callmacro(vAllocIni.LAST_MODIFICATION_DATE,"DD/MM/YYYY")+";"+vONB+";"+vAlloc.EQUATION_OVERRIDE+";"+vAlloc.LAST_MODIFICATION_USER+";"+"PRINT_DATE".callmacro(vAlloc.LAST_MODIFICATION_DATE,"DD/MM/YYYY"));
						vTot++;
					}
					//else plw.alert(" Check duplicate allocation : error when getting the allocation with ONB "+vDupli);
					else plw.writetolog(" Check duplicate allocation : error when getting the allocation with ONB "+vDupli);
				}
				else 
				{
					vHash.set(vId,vAlloc.ONB);
				}
			}
		}
		vHash.clear();
		//s_monitor_message.monitor(vGlobal,false,1);
	//}
//}
}
var vPerc=(vGlobal>0) ? math.round((vTot*100)/vGlobal) : 0;
plw.writetolog(".");
plw.writetolog("DUPLICATE RESULTS Allocations on projects "+VProj+"  : "+vTot+" / "+vGlobal+" : "+vPerc+"%");
if (vTot>0) {
	plw.writetolog(" !!! DUPLICATES ALLOC detected !!! "+vTot+" on project "+VProj);
}
plw.writetolog(" ######################################################################");
}
// PC-4757
*/

plw.writetolog(" --------------- Start macro on dataset ---------");
// in a macro on dataset the available project are only the one set on the batch properties
var vVect=new vector();
// we get only the parent project for running the equation (but indication are also load)
for (var vProj in plc.ordo_project where (((vProj.SAN_RDPM_B_RND_VACCINES_PROJECT && vProj.SAN_RDPM_UA_B_EQUATION_FILTER_PASTEUR) || (vProj.SAN_RDPM_B_RND_PHARMA_PROJECT && vProj.SAN_RDPM_UA_B_EQUATION_FILTER_PHARMA)) && vProj.PARENT.printattribute()=="" && vProj._INF_NF_S_PRJ_STATE_INTERNAL  == "ACTIVE" && vProj._INF_NF_B_IS_TEMPLATE != true && vProj._WZD_AA_B_PERMANENT != true )) 
    vVect.push(vProj.printattribute());
    
if (vVect.length>0)
{
    plw.writetolog(" -- List of projects : "+vVect.join(","));
    
    // PC-4757
    //_san_rdpm_equation.detect_duplicates_expenditures(vVect[0]);
    //_san_rdpm_equation.detect_duplicates_alloc(vVect[0]);
    // PC-4757
    
    _san_equa.san_rdpm_js_apply_equation_on_list(vVect);
    
    // PC-4757
    //_san_rdpm_equation.detect_duplicates_expenditures(vVect[0]);
    //_san_rdpm_equation.detect_duplicates_alloc(vVect[0]);
    // PC-4757
}
else plw.writetolog(" -- No project!");

plw.writetolog(" --------------- End macro on dataset ---------"); 
//  AUTHOR  : ABO
//  Date : 05/01/22
//	Script to use in the batch SAN_RDPM_BA_AUTO_EXPORT_ACTU_WKL to export automatically the actual workload

namespace _autowklexport;

function SanExportFromPexQuery (string argTarget, string argFormat, string argPortfolio, string argQuery, date startDate, date endDate){
    var plc.impextarget Target = plc.impextarget.get(argTarget);
    var plc._FF_PT_FAVOR_FILTERS Portfolio = plc._FF_PT_FAVOR_FILTERS.get(argPortfolio);
    var plc._PEX_PT_QUERY Query = plc._PEX_PT_QUERY.get(argQuery);
	
    if(Target instanceOf plc.ImpexTarget && Portfolio instanceOf plc._FF_PT_FAVOR_FILTERS && Query instanceOf plc._PEX_PT_QUERY) {
        var plc.impexformat Format = plc.impexformat.get(argFormat);
        if(Target._IMPEX_AA_B_TRUNCATE)
			{
			plw._Impex_TruncateTable(Target,Format);
		}
		plw._impex_exportPEXQueryCostTable(Portfolio, Query, Format, Target, startDate, endDate);
        var filename = Target.CallStringFormula("EVALUATE_STRING(Filename)");
        plw.writeln(filename);
		plw.writeln("Exporting: "+argFormat+"_"+argTarget);
	}
}
if(Context.CallBooleanFormula("NTH(PRINT_DATE($DATE_OF_THE_DAY,\"DD-MM-YY\"),0,\"-\") = SAN_RDPM_CS_NOMINATIVE_ACTUAL_WKL_EXPT_DAY")){
var start_date = Context.CallDateFormula("period_start($DATE_OF_THE_DAY,\"MONTH\",-1)");
var end_date = Context.CallDateFormula("period_start($DATE_OF_THE_DAY,\"MONTH\",0)");
SanExportFromPexQuery ("SAN_RDPM_IMPEX_TARGET_DATAHUB_NOMINATIVE_ACTUAL_WKL:CSV file format", "IMPEX_NOMINATIVE_RES_ACTUAL_WKL:DATAHUBNOMINATIVEACTUALWORKLOAD","ALL - DO NOT DELETE - USED FOR BO EXPORTS", "SAN_RDPM_QY_BO_NOMI_RES_ACTUAL_WKL", start_date, end_date);
} else {
plw.writeln("IMPEX_NOMINATIVE_RES_ACTUAL_WKL:DATAHUBNOMINATIVEACTUALWORKLOAD_SAN_RDPM_IMPEX_TARGET_DATAHUB_NOMINATIVE_ACTUAL_WKL:CSV file format: not exported as it is not the day of the month configured in SAN_RDPM_CS_NOMINATIVE_ACTUAL_WKL_EXPT_DAY.");
} 
//
//  PLWSCRIPT : SAN_RDPM_JS2_AUTO_LINK_CREA
//
//  AUTHOR  : Islam GUEROUI
//
//  Modification : 2021/11/05 IGU
//  Use WBS Filter instead of activity selection and modification of the error popup message (PC-4304)
//
//  Creation : 2021/06/23 IGU
//  Script contaitning the functions to create links between cohorts and countries (PC-3918)
//
//***************************************************************************/

namespace _rdpm_recreate_links;

function _rdpm_recreate_links(o_study, o_link_template)
{
	var P_Act_Type = o_link_template.SAN_RDPM_UA_S_PA_WBS_TYPE;
	var S_Act_Type = o_link_template.SAN_RDPM_UA_S_SA_WBS_TYPE;
	var link_type = o_link_template.SAN_RDPM_UA_S_LINK_TYPE;
	var lag = o_link_template.SAN_RDPM_UA_DU_LAG_TIME;
	var smooth = o_link_template.SAN_RDPM_UA_B_SMOOTH_LINK;
	var modification_type = o_link_template.SAN_RDPM_UA_S_MODIFICATION_TYPE;
	var v_PAct = new vector();
	var v_SAct = new vector();
	
	with(o_study.fromObject()){
		for (var o_act in plc.work_structure){
			if (o_act.WBS_TYPE==P_Act_Type){
				// Remove existing links
				for (var o_link in o_act.get("SLINKS") where o_link.getinternalvalue(#TYPE#).tostring()==link_type && o_link.SUCC_ACTIVITY.WBS_TYPE==S_Act_Type){
					o_link.delete();
				}
				for (var o_link in o_act.get("PLINKS") where o_link.getinternalvalue(#TYPE#).tostring()==link_type && o_link.PA.WBS_TYPE==S_Act_Type){
					o_link.delete();
				}					
				v_PAct.push(o_act);					
			}
			else{
				if (o_act.WBS_TYPE==S_Act_Type){v_SAct.push(o_act);}
			}
			if(o_act.WBS_TYPE.printattribute() in ['Recruitment','Treatment','FUP/Extension']){o_act.set('EXTND','Hammock');}
		}
	}
	
	// Create links
	if (modification_type=="Create / Update"){
		for (var PAct in v_PAct){
			for (var SAct in v_SAct){
				var new_link = new plc.constraint(
				TYPE : link_type,
				PA : PAct,
				SUCC_ACTIVITY : SAct,
				CAL : "",
				PLA : "",
				LAG :lag,
				_SYN_AA_B_SMOOTHLINK : smooth,
				FILE : PAct.FILE);
			}
		}
	}
}

function _rdpm_auto_link_cohort_country(){
	var v_selection = context.GEN_ACT_FILTER.split(',');
	var o_study = plc.work_structure.get(v_selection[0]);

	if (context.GEN_ACT_FILTER==''){
		plw.alert('A WBS filter needs to be selected first');
	}
	else if (v_selection.length==1 && o_study instanceof plc.work_structure && o_study.SAN_UA_RDPM_B_IS_A_STUDY==true){
		var b_contains_cohort = false;
		var b_contains_country = false;
		with(o_study.fromObject()){
			for (var o_act in plc.work_structure){
				if(o_act.WBS_TYPE.printattribute()=='COHORT'){b_contains_cohort = true;}
				if(o_act.WBS_TYPE.printattribute()=='STUDY'){b_contains_country = true;}
				if(b_contains_cohort && b_contains_country) {break;}
			}
		}
		if(o_study.SAN_RDPM_UA_ACT_B_PRJL==false && b_contains_cohort && b_contains_country){
			for (var o_link_template in plc.__USER_TABLE_SAN_RDPM_UT_AUTO_LINKS){
				_rdpm_recreate_links(o_study, o_link_template);
			}
			plw.alert('Links successfully created');
		}
		else{
			plw.alert('Link between countries and cohorts cannot be performed');
		}
	}
	else{
		plw.alert('The WBS filter have to be filled with one study only');
	}
} 
/*
* Script V2
* Autor : 
* Date Creation 26/10/2020
* JIRA : PC-4306/PC-4165 (Problem with WBS Form Data in Version) 
* Date modification 29-JUL-2021
* Add a treatement to link WBS Form data to version activities
* JIRA : PC-2473 (SAN_RDPM_BA_AUTO_SYNC_RULE batch is crashing) 
* Date modification 01-FEB-2021
* Replace (o_act.synchronize_with != undefined) by (o_act.SYNCHRONIZE_WITH instanceof plc.work_structure) in the loop to controlling if synchronize_with activity is existing and loaded
* Replace the use of inverse relation 'r.WBS_TYPE.WORK-STRUCTURE' with objectset & 'filter.fromobject()' to comply with JS2 best practices
* PC-4698 - LFA - 05-OCT-2021 - Limit to R&D Projects
* 
*/

namespace _san_rdpm_batch_sync;

plw.writeln("Start of batch SAN_RDPM_BA_AUTO_SYNC_RULE (synchronization rule)");

// Loop on Activity types to synchronize
var list = [];
for(var o_wbstype in plc.wbs_type where o_wbstype.SAN_UA_RDPM_B_BATCH_SYNCHRO)
{
	list.push(o_wbstype);
}
// Loop on Projects: restrict loop to Active & Simulation projects only
for(var o_project in plc.project where o_project.DELETED==false && o_project.SAN_RD_IS_RND_PROJECT && (o_project.STATE=="Active" || o_project.STATE=="Simulation"))
{
	list.push(o_project);
}

var filter = plw.objectset(list);
with(filter.fromobject()){
	
	// Replace (o_act.synchronize_with != undefined) by (o_act.SYNCHRONIZE_WITH instanceof plc.work_structure) in the loop to controlling if synchronize_with activity is existing and loaded
	for(var o_act in plc.work_structure where o_act.SYNCHRONIZE_WITH instanceof plc.work_structure)
	{
		plw.writeln("Synchronization of the activity : "+o_act.id + " with activity : "+ o_act.SYNCHRONIZE_WITH.id);
		o_act.callmacro("synchronize");
	}
}

// Fix problem on WBS Form activities for project versions
_wbs_form.san_rdpm_restore_wbs_form_data_in_version("");

plw.writeln("End of batch SAN_RDPM_BA_AUTO_SYNC_RULE (synchronization rule)"); 
namespace _rdpm_clinical_milestones;

// V1.8 Add functionnal description of planned date in export - PC-5707 - LFA - 28-FEB-2021
// V1.7 Fix problem on actual date - LFA - PC-5671 - LFA
// V1.6 Review script to add controls - LFA - 14-DEC-2021
// V1.5 Date not returned when it is not the first activity type - PC-5305 - LFA - 10-DEC-2021
// V1.4 Change technical name for Dynamic Attributes - PC-5274
// V1.3 Add function for the export of Clinical Milestone Dates BO - PC-5122 - LFA - 30-NOV-2021
// V1.2 Modification to add "Order date" to order activities
// V1.1 Modification to take into account option "Ignore activity type order"

//********************************************************************************************************************************************//
//******************************** Generic function to retrieve clinical milestone dates *****************************************************//
//********************************************************************************************************************************************//

function san_rdpm_get_clinical_milestone_date(act,clin_ms_rule)
{
	var date = -1;
	
	if (clin_ms_rule instanceof plc.__USER_TABLE_SAN_RDPM_UT_CLIN_MS_RULES && act instanceof plc.workstructure)
	{		
		var clin_ms = clin_ms_rule.SAN_RDPM_UA_S_CLIN_MS;
		var operation = clin_ms_rule.SAN_RDPM_UA_S_OPERATION;
		var sort_date_rule =  clin_ms_rule.SAN_RDPM_UA_S_ORDER_DATE;
		
		// Case 1 - We take into acount the order of activity type
		if (clin_ms_rule.SAN_RDPM_UA_B_IGNORE_AT_ORDER==false)
		{
			var v_break = false;
						
			for (var map_act_type in clin_ms_rule.get("USER_ATTRIBUTE_INVERSE_SAN_RDPM_UA_S_CLIN_MS_RULE.__USER_TABLE_SAN_RDPM_UT_MAP_CLIN_MS_ACT_TYPE") where map_act_type.SAN_RDPM_UA_S_ACT_TYPE!="" && map_act_type.SAN_RDPM_UA_S_ACT_TYPE instanceof plc.wbs_type && map_act_type.SAN_RDPM_UA_S_DATE_SLOT!="" order by ['SAN_RDPM_UA_N_ORDER'])
			{
				var date_slot = map_act_type.SAN_RDPM_UA_S_DATE_SLOT;
				var list = [];
				list.push(act);
				list.push(map_act_type.SAN_RDPM_UA_S_ACT_TYPE);
				
				var filter = plw.objectset(list);
				with(filter.fromobject())
				{
					if (operation=="Increase")
					{
						for (var vAct in plc.workstructure /*where vAct.get(date_slot)!=undefined*/ order by [sort_date_rule])
						{
							date = vAct.get(date_slot);
							v_break = true;
							break;
						}
					}
					else
					{
						for (var vAct in plc.workstructure /*where vAct.get(date_slot)!=undefined*/  order by [['INVERSE',sort_date_rule]])
						{
							date = vAct.get(date_slot);
							v_break = true;
							break;
						}
					}
				}
				
				if (v_break)
				{
					break;
				}
			}		
		}
		// Case 2 - We ignore the order of activity type 
		else
		{
			var list = [];
			list.push(act);
			// In this case the date slot is the one defined at rule level
			var date_slot = clin_ms_rule.SAN_RDPM_UA_S_DATE_SLOT;
			// Generate the vector of activity types
			for (var map_act_type in clin_ms_rule.get("USER_ATTRIBUTE_INVERSE_SAN_RDPM_UA_S_CLIN_MS_RULE.__USER_TABLE_SAN_RDPM_UT_MAP_CLIN_MS_ACT_TYPE") where map_act_type.SAN_RDPM_UA_S_ACT_TYPE!="" && map_act_type.SAN_RDPM_UA_S_ACT_TYPE instanceof plc.wbs_type)
			{
				list.push(map_act_type.SAN_RDPM_UA_S_ACT_TYPE);
			}
			
			var filter = plw.objectset(list);
			with(filter.fromobject())
			{
				if (operation=="Increase")
				{
					for (var vAct in plc.workstructure /*where vAct.get(date_slot)!=undefined*/ order by [sort_date_rule])
					{
						date = vAct.get(date_slot);
						break;
					}
				}
				else
				{
					for (var vAct in plc.workstructure /*where vAct.get(date_slot)!=undefined*/  order by [['INVERSE',sort_date_rule]])
					{
						date = vAct.get(date_slot);
						break;
					}
				}
			}
		}		
	}
	
	if (date==undefined)
	    date=-1;
	
	return date;
}

//**********************************************************************************************************************************//
//*******************************************Dynamic attributes*********************************************************************//
//**********************************************************************************************************************************//

function san_clinical_milestone_slot_reader(clin_ms_rule)
{

	var result = -1;
	var act = this;
	if (act instanceof plc.workstructure)
	{
		var level = clin_ms_rule.SAN_RDPM_UA_S_LEVEL;
		
		if ((level=="STUDY" && act.SAN_UA_RDPM_B_IS_A_STUDY) || (level=="STEP" && act.WBS_TYPE!="" && act.WBS_TYPE.SAN_RDPM_UA_AT_B_IS_STEP))
		{
			result=san_rdpm_get_clinical_milestone_date(act,clin_ms_rule);
		}
	}
	
	return result;
}

function san_create_clinical_milestone_dynamic_attributes(clin_ms_rule)
{
	if (clin_ms_rule instanceof plc.__USER_TABLE_SAN_RDPM_UT_CLIN_MS_RULES)
	{
		var att_name = "SAN_RDPM_DA_CLIN_MS_"+clin_ms_rule.NAME;
		var att_comment = clin_ms_rule.DESC;
		if (clin_ms_rule.SAN_RDPM_UA_S_FUNC_DESC!="")
			att_comment = clin_ms_rule.SAN_RDPM_UA_S_FUNC_DESC;
		
		var date_slot = plc.workstructure.getslot(clin_ms_rule.SAN_RDPM_UA_S_DATE_SLOT);
		var date_slot_type = date_slot.descriptor.type.name;
		
		try{
			var slot = new objectAttribute(plc.workstructure,att_name,date_slot_type);
			
			slot.Comment = att_comment;
			slot.Reader = san_clinical_milestone_slot_reader.closure(clin_ms_rule);
			slot.Locker = function () {return true;};
			slot.hiddenInIntranetServer = false;
			slot.connecting = false;
			
			plw.writeln("Creation of dynamic attribute " +att_name + " by san_create_clinical_milestone_dynamic_attributes.");
		}
		catch(error e){
			plw.writeln("Could not create slot ["+att_name+"] due to error: " + e);
		}
	}
}

for (var rule in plc.__USER_TABLE_SAN_RDPM_UT_CLIN_MS_RULES where rule.SAN_RDPM_UA_B_GENERATE_FIELD)
{
	san_create_clinical_milestone_dynamic_attributes(rule);
}

//********************************************************************************************************************************************//
//******************************** Function to generate the Clinical Milestones Dates BO *****************************************************//
//********************************************************************************************************************************************//

// Generate file for BO Clinical Milestone
namespace _rdpm_clinical_milestones;

// Function to process a clinical milestone for BO Export
function san_rdpm_export_activity_clinical_milestone(clin_milestone,level,activity_vector,rule_planned,rule_actual,file)
{ 
	var activity_id="";
	var activity_onb="";
	var planned_date = -1;
	var planned_date_string="";
	var actual_date = -1;
	var actual_date_string="";
	var file_separator = ",";
	var new_line="";
	var planned_desc ="";
	var actual_desc ="";
	
	// Define common 	
	for (var act in activity_vector where act instanceof plc.workstructure)
	{
		// Retrieve the planned date
		if (rule_planned!="" && rule_planned instanceof plc.__USER_TABLE_SAN_RDPM_UT_CLIN_MS_RULES)
		{
			planned_date = san_rdpm_get_clinical_milestone_date(act,rule_planned);
			if (planned_date!=-1)
			{
				if (rule_planned.SAN_RDPM_UA_S_DATE_SLOT=="PS" || rule_planned.SAN_RDPM_UA_S_DATE_SLOT=="AS")
				{
					planned_date_string="PRINT_DATE".call(planned_date,"YYYY-MM-DD");
				}
				else
				{
					planned_date_string="PRINT_END_DATE".call(planned_date,"YYYY-MM-DD");
				}
			}
			else
			{
				planned_date_string="";
			}
			
			planned_desc = rule_planned.SAN_RDPM_UA_S_FUNC_DESC;
		}
		
		// Retrieve the actual date
		if (rule_actual!="" && rule_actual instanceof plc.__USER_TABLE_SAN_RDPM_UT_CLIN_MS_RULES)
		{
			actual_date = san_rdpm_get_clinical_milestone_date(act,rule_actual);
			if (actual_date!=-1)
			{
				if (rule_actual.SAN_RDPM_UA_S_DATE_SLOT=="PS" || rule_actual.SAN_RDPM_UA_S_DATE_SLOT=="AS")
				{
					actual_date_string="PRINT_DATE".call(actual_date,"YYYY-MM-DD");
				}
				else
				{
					actual_date_string="PRINT_END_DATE".call(actual_date,"YYYY-MM-DD");
				}
			}
			else
			{
				actual_date_string="";
			}
			
			actual_desc = rule_actual.SAN_RDPM_UA_S_FUNC_DESC;
		}
		
		if (planned_date_string!="" || actual_date_string!="")
		{
			activity_id=act.printattribute();
			activity_onb="PRINT_NUMBER".call(act.ONB,"####");
			// Add clinical milestone line to file
			new_line="\""+clin_milestone+"\""+file_separator+"\""+level+"\""+file_separator+"\""+activity_id+"\""+file_separator+activity_onb+file_separator+planned_date_string+file_separator+actual_date_string+file_separator+"\""+planned_desc+"\"";
			file.writeln(new_line);
		}
	}
		
}

function san_rdpm_bo_clinical_milestones_export()
{
	// CSV Export Variables
	var filepath = "/tmp/";
	var ClinMSfilename = "-CLINICAL_MILESTONES_DATES.csv";
	var ClinMSfilepath = new PathName(filepath+"TEMP"+ClinMSfilename);
	
	if(ClinMSfilepath.probefile())
	{
		ClinMSfilepath.deletefile();
		plw.alert("san_rdpm_bo_clinical_milestones_export - Deleted already existing working file: "+ClinMSfilepath);
	}
	
	var ClinMSFile = new plw.fileOutputStream(ClinMSfilepath,"overwrite");


	ClinMSFile.writeln("\"CLINICAL_MILESTONE\",\"LEVEL\",\"ACTIVITY_ID\",\"ACTIVITY_ONB\",\"PLANNED_DATE\",\"ACTUAL_DATE\",\"SAN_RDPM_UA_S_FUNC_DESC\"");
	
	
	// Generate the list of studies and step to work on
	var study_list = new vector();
	var step_list = new vector();

	// Loop on Project
	var list = [];
	// Loop on Projects: restrict loop to Pasteur Active Projects
	for(var o_project in plc.project where o_project.DELETED==false && o_project.SAN_RDPM_B_RND_VACCINES_PROJECT && o_project.STATE=="Active" && o_project._WZD_AA_B_PERMANENT == false)
	{
		list.push(o_project);
	}

	var filter = plw.objectset(list);
	with(filter.fromobject()){
		for(var o_act in plc.work_structure)
		{
			if (o_act.SAN_UA_RDPM_B_IS_A_STUDY && o_act.SAN_RDPM_UA_B_STUDY_EXPORT_FILTER)
			{
				study_list.push(o_act);
			}
			else
			{
				if (o_act.WBS_TYPE!="" && o_act.WBS_TYPE.SAN_RDPM_UA_AT_B_IS_STEP && o_act.SAN_RDPM_UA_B_TASK_EXPORT_FILTER)
				{
					step_list.push(o_act);
				}
			}
		}
	}


	for (var clin_ms in plc.__USER_TABLE_SAN_RDPM_UT_CLINICAL_MILESTONES where clin_ms.INACTIVE==false)
	{
		var clin_ms_rule_study_planned = "";
		var clin_ms_rule_study_actual = "";
		var clin_ms_rule_step_planned = "";
		var clin_ms_rule_step_actual = "";
		
		// For the considered milestone, search for different rules [Study/Step - Planned/Actual]
		for (var clin_ms_rule in clin_ms.get("USER_ATTRIBUTE_INVERSE_SAN_RDPM_UA_S_CLIN_MS.__USER_TABLE_SAN_RDPM_UT_CLIN_MS_RULES") where clin_ms_rule.SAN_RDPM_UA_B_EXPORT)
		{
			// Vaccines rules only
			if (clin_ms_rule.SAN_RDPM_UA_S_APPLY_TO=="VACCINES" || clin_ms_rule.SAN_RDPM_UA_S_APPLY_TO=="COMMON")
			{
				if (clin_ms_rule.SAN_RDPM_UA_S_LEVEL=="STUDY")
				{
					if (clin_ms_rule.SAN_RDPM_UA_S_MILESTONE_TYPE=="PLANNED")
					{
						clin_ms_rule_study_planned = clin_ms_rule;
					}
					else
					{
						if (clin_ms_rule.SAN_RDPM_UA_S_MILESTONE_TYPE=="ACTUAL")
						{
							clin_ms_rule_study_actual = clin_ms_rule;
						}
					}
				}
				else
				{
					if (clin_ms_rule.SAN_RDPM_UA_S_LEVEL=="STEP")
					{
						if (clin_ms_rule.SAN_RDPM_UA_S_MILESTONE_TYPE=="PLANNED")
						{
							clin_ms_rule_step_planned = clin_ms_rule;
						}
						else
						{
							if (clin_ms_rule.SAN_RDPM_UA_S_MILESTONE_TYPE=="ACTUAL")
							{
								clin_ms_rule_step_actual = clin_ms_rule;
							}
						}
					}
				}
			}
		}
		
		// Process Study
		if (clin_ms_rule_study_planned!="" || clin_ms_rule_study_actual!="")
		{
			san_rdpm_export_activity_clinical_milestone(clin_ms.NAME,"STUDY",study_list,clin_ms_rule_study_planned,clin_ms_rule_study_actual,ClinMSFile);
		}
		
		// Process Step
		if (clin_ms_rule_step_planned!="" || clin_ms_rule_step_actual!="")
		{
			san_rdpm_export_activity_clinical_milestone(clin_ms.NAME,"STEP",step_list,clin_ms_rule_step_planned,clin_ms_rule_step_actual,ClinMSFile);
		}
	}
	
	// Close file
	ClinMSFile.close();
	
	// Rename files to add start timestamp
	var filepath = context.SAN_RDPM_UA_OC_S_EXPORT_DATAHUB_PATH;
	var vdate = new date();
	ClinMSfilename = vdate.tostring("YYYYMMDDTHHMMSSZ")+"-CLINICAL_MILESTONES_DATES.csv";
	ClinMSfilepath.renamefile(filepath+ClinMSfilename);	
	ClinMSfilepath = new PathName(filepath+ClinMSfilename);
	
	plw.writetolog("ClinMSfilepath: "+ClinMSfilepath);
}

//*******************************************************************************************************************************************************// 
//
//  PLWSCRIPT : SAN_RDPM_JS2_CSO_FTE_IMP_EXP
//
//  AUTHOR  : Islam GUEROUI
//
//  Modification 0.3 : 2021/09/06 IGU
//  Add role import (PC-4461)
//
//  Modification 0.2 : 2021/08/23 IGU
//  Fix dates export (PC-4385), upload cancellation (PC-4411) and add filters to export active pharma projects only (PC-4384)
//
//  Modification 0.1 : 2021/07/01 IGU
//  Various bug fixes and evolutions (PC-4067)
//
//  Creation : 2021/05/03 IGU
//  Script contaitning the functions to export and import CSO FTEs (PC-807)
//
//***************************************************************************/

namespace _rdpm_cso_fte;

function san_rdpm_cso_fte_export()
{
	// The time window is the current year + next year
	var d_current_date = new date();
	var n_start_year = d_current_date.getYear();
	var n_end_year = d_current_date.getYear()+1;
	var d_start_horizon_date = Context.CallDateFormula("period_start($DATE_OF_THE_DAY,\"YEAR\",0)");
	var d_end_horizon_date = Context.CallDateFormula("period_start($DATE_OF_THE_DAY,\"YEAR\",2)");
	
	// Used curve
	var curvename = cost.findCurveName('AEAC');

	// CSV Export Variables
	var s_filepath = context.SAN_CS_CSO_FTE_COSTS_PATH;
	var s_cso_fte_costs_filename = 'CSO_FTEs_EXPORT.csv';
	var o_cso_fte_costs_filepath = new plw.pathname(s_filepath+s_cso_fte_costs_filename);

	var o_cso_fte_costs_file = new plw.fileOutputStream(o_cso_fte_costs_filepath,'overwrite');
	o_cso_fte_costs_file.writeln('Service;Resource;Team;Primary Skill;Role;Planned hours Type;Site;Project Code;Study Code;Planned Start Activity;Planned Finish Activity;Sourcing;Provider;Activity type;WBS Element Activity;Q1-'+n_start_year+';Q2-'+n_start_year+';Q3-'+n_start_year+';Q4-'+n_start_year+';Q1-'+n_end_year+';Q2-'+n_end_year+';Q3-'+n_end_year+';Q4-'+n_end_year+';');

	// Init monitoring
	var s_monitor_message = "Exporting CSO FTEs ...";
	
	// Build a vector of project from which the CSO FTEs will be exported (only root projects)
	var v_projects = new vector();
	for(var o_project in plc.ordo_project where o_project.SAN_RDPM_B_RND_PHARMA_PROJECT == true && o_project.SAN_UA_RWE_PROJECT_CODE_PRIME!='' && o_project.PARENT.printattribute()=='' && o_project.getinternalvalue("STATE").toString()=='ACTIVE' && o_project._PM_NF_B_IS_A_VERSION==false) {v_projects.push(o_project);}

	with(plw.monitoring (title: s_monitor_message, steps: v_projects.length)){
		// Loop on each project to export
		for (var o_project in v_projects){
			plw.writetolog("Processing CSO FTEs export from project: "+o_project.name);
			with(o_project.fromobject()){
				for(var o_hes in plc.TIME_SYNTHESIS where o_hes._PM_NF_B_BASIC_TYPE_HOURS==true && o_hes.FD instanceof Date && o_hes.FD>d_start_horizon_date && o_hes.SD instanceof Date && o_hes.SD<d_end_horizon_date && o_hes.RES instanceof plc.resource && o_hes.RES.OBS_ELEMENT instanceof plc.obs_node && o_hes.RES.OBS_ELEMENT.SAN_RDPM_UA_B_OBS_CSO==true && o_hes.TYPE in ['AUTO','MANUAL'] && o_hes.remaining!=0){
					var v_hes_string = '';
					// Build EAC curves on 'Hours and expenditures' object
					var o_curve_eac_fte = cost.computecurves(curvename, "FTE (Full Time Equivalent)", "QUARTER", false, d_start_horizon_date, d_end_horizon_date, o_hes);
					
					try{
						//Check that each printed column is of the expected instance else print ''
						v_hes_string += o_hes.RES.SAN_UA_RDPM_RES_SERV+';'+o_hes.RES.printattribute()+';'; //Service and Resource
						if (o_hes.RES.SAN_RDPM_UA_B_IS_A_TEAM){v_hes_string += o_hes.RES.printattribute()+';';} else {v_hes_string += ';';} //Team
						if (o_hes.PRIMARY_SKILL instanceof plc.resource_skill) {v_hes_string += o_hes.PRIMARY_SKILL.printattribute()+';';} else {v_hes_string += ';';} //Primary Skill
						if (o_hes._RM_REVIEW_RA_ROLE instanceof plc._RM_REVIEW_PT_ROLE) {v_hes_string += o_hes._RM_REVIEW_RA_ROLE.printattribute()+';';} else {v_hes_string += ';';} //Role
						v_hes_string += o_hes.TYPE+';'; //Planned hours Type
						if (o_hes._RM_REVIEW_RA_LOCATION instanceof plc._RM_REVIEW_PT_LOCATIONS) {v_hes_string += o_hes._RM_REVIEW_RA_LOCATION.printattribute()+';';} else {v_hes_string += ';';} //Site
						v_hes_string += o_project.SAN_UA_RWE_PROJECT_CODE_PRIME.printattribute()+';'; //Project code
						if (o_hes.ACTIVITY instanceof plc.work_structure) {v_hes_string += o_hes.ACTIVITY.SAN_RDPM_UA_ACT_S_CALCULATED_STUDY_CODE+';';} else {v_hes_string += ';';} //Study code
						if (o_hes.ACTIVITY instanceof plc.work_structure) {v_hes_string += o_hes.ACTIVITY.callstringformula("PRINT_DATE(PS,\"DD-MM-YYYY HH:MM\")")+';';} else {v_hes_string += ';';} //Planned Start (Activity)
						if (o_hes.ACTIVITY instanceof plc.work_structure) {v_hes_string += o_hes.ACTIVITY.callstringformula("PRINT_END_DATE(PF,\"DD-MM-YYYY HH:MM\")")+';';} else {v_hes_string += ';';} //Planned Finish (Activity)
						if (o_hes._INF_RA_CBS2 instanceof plc._INF_PT_CBS2) {v_hes_string += o_hes._INF_RA_CBS2.printattribute()+';';} else {v_hes_string += ';';} //Sourcing
						if (o_hes._INF_RA_CBS3 instanceof plc._INF_PT_CBS3) {v_hes_string += o_hes._INF_RA_CBS3.printattribute()+';';} else {v_hes_string += ';';} //Provider
						if (o_hes.ACTIVITY instanceof plc.work_structure && o_hes.ACTIVITY.WBS_TYPE instanceof plc.wbs_type) {v_hes_string += o_hes.ACTIVITY.WBS_TYPE.printattribute()+';';} else {v_hes_string += ';';} //Activity Type
						if (o_hes.ACTIVITY instanceof plc.work_structure) {v_hes_string += o_hes.ACTIVITY.printattribute()+';';} else {v_hes_string += ';';} //Activity
						
						// Build a Date Vector to parse 
						var v_DateVect = new plw.datevector("QUARTER",d_start_horizon_date,d_end_horizon_date);
						// Remove last value as it will return 0 (Last date of last year)
						v_DateVect.pop();

						// Loop on all dates
						for(var d_date in v_DateVect){
							// Calculate curves
							var n_eac_fte = o_curve_eac_fte.get(d_date);
							//Add curve values
							v_hes_string += n_eac_fte.toString("####.0000")+';';	
						}
					}
					catch(error e){
						plw.alert('An error occured during the export of the hours and expendutures summary: '+o_hes);
						plw.alert(e);
					}
					finally{
						o_cso_fte_costs_file.writeln(v_hes_string);
						
						// Warning: carefully destroy the curves object after their usage to insure that memory used to compute this curves is reallocated correctly.
						o_curve_eac_fte.delete();
					}
				}
			}
			s_monitor_message.monitor(v_projects.length);
		}
	}
	// Close file
	o_cso_fte_costs_file.close();
}

function san_rdpm_cso_fte_import()
{
	// The time window is the current quarter + next year
	var d_start_horizon_date = Context.CallDateFormula("period_start($DATE_OF_THE_DAY,\"QUARTER\",0)");
	var d_end_horizon_date = Context.CallDateFormula("period_start($DATE_OF_THE_DAY,\"YEAR\",2)");
	var v_DateVect = new plw.datevector("QUARTER",d_start_horizon_date,d_end_horizon_date);
	
	//Starting column from which loads are read
	var n_starting_column = 24-v_DateVect.length;
	
	// CSV Import Variables
	var s_filepath = context.SAN_CS_CSO_FTE_COSTS_PATH;
	var s_cso_fte_costs_filename = 'CSO_FTEs_IMPORT.csv';
	var o_cso_fte_costs_filepath = new plw.pathname(s_filepath+s_cso_fte_costs_filename);
	var o_cso_fte_costs_file = undefined;
	var v_deleted_cso_cost_projects = new vector();
	
	
	if(o_cso_fte_costs_filepath.probefile()){
		o_cso_fte_costs_file = new plw.fileinputstream(o_cso_fte_costs_filepath);
	}
	else{plw.alert('File not found!');}

	if (o_cso_fte_costs_file instanceof plw.fileinputstream){
		var s_line = o_cso_fte_costs_file.readline();
		var b_first_line = true;

        while(s_line != undefined){
			s_line = s_line.rtrim(" 
");
			s_line = s_line.rtrim("\r");
			var v_columns = s_line.split(';');
			if(b_first_line==false){
				//Planned hours creation
				var o_res = plc.resource.get(v_columns[1]);
				var o_skill = plc.resource_skill.get(v_columns[3]);
				var o_role = plc._RM_REVIEW_PT_ROLE.get(v_columns[4]);
				var o_site = plc._RM_REVIEW_PT_LOCATIONS.get(v_columns[6]);
				var o_sourcing = plc._INF_PT_CBS2.get(v_columns[11]);
				var o_provider = plc._INF_PT_CBS3.get(v_columns[12]);
				var o_activity = plc.work_structure.get(v_columns[14]);
				
				for(var i=0 ; i<v_DateVect.length-1 ; i++){
					var s_fte_load = v_columns[n_starting_column+i];
					var d_start = v_DateVect[i];
					var d_end = v_DateVect[i+1];
					
					var n_load = plw.fte_SwitchLoadFte(o_res, s_fte_load.parseNumber("####.0000"), d_start, d_end, o_res.CAL, 'LOAD');
					//Check mandatory attributes
					if (n_load!=0 && o_activity instanceof plc.work_structure && o_res instanceof plc.resource && o_skill instanceof plc.resource_skill && (o_role instanceof plc._RM_REVIEW_PT_ROLE || v_columns[4]=='')){
						if(d_start<o_activity.PS && d_end<=o_activity.PS){d_start=-1;} else if(d_start<o_activity.PS){d_start=o_activity.PS;}
						if(d_end>o_activity.PF && d_start>=o_activity.PF){d_end=-1;} else if(d_end>o_activity.PF){d_end=o_activity.PF;}

						if(d_start!=-1 && d_end!=-1){
							//Create a planned hour in Lag-during so it will shift with its activity
							var o_ph = new plc.task_alloc (ACTIVITY : o_activity,
														   RES : o_res,
														   _RM_REVIEW_RA_ROLE : o_role,
														   PRIMARY_SKILL : o_skill,
														   _RM_REVIEW_RA_LOCATION : o_site,
														   _INF_RA_CBS2 : o_sourcing,
														   _INF_RA_CBS3 : o_provider,
														   DURATION_COMPUTATION : 'Lag-during',
														   SD : d_start,
														   FD : d_end,
														   TOTAL_LOAD : n_load);
							//In some cases the ph is not directly created with the correct start and end dates
							o_ph.SD = d_start;
							o_ph.FD = d_end;
						}
					}				
				}
			}
			s_line = o_cso_fte_costs_file.readline();
			b_first_line = false;
		}
		// Close file
	    o_cso_fte_costs_file.close();
		plw.alert('CSO FTEs import complete!');
	}
}

function san_rdpm_cso_fte_download_last_exported_file()
{
	var s_filepath = context.SAN_CS_CSO_FTE_COSTS_PATH+'CSO_FTEs_EXPORT.csv';
	var o_cso_fte_costs_filepath = new plw.pathname(s_filepath);
	if(o_cso_fte_costs_filepath.probefile()){
		plw.downloadFileFromServer(s_filepath,'CSO_FTEs_EXPORT.csv');
	}
	else{plw.alert('File not found!');}
}


function san_rdpm_cso_fte_upload()
{
	var fileToImport = plw.selectfile("Select a file to upload...");

	if (fileToImport instanceof string && fileToImport != "") {
		var files = new vector(fileToImport);
		files = fileToImport.parselist().getserverfiles();
		fileToImport = files[0][0];
	}

	if (fileToImport!=undefined && fileToImport!="") {
		//Retrieve the full path of the file
		var vTempPath = new plw.pathname(fileToImport);
		var vPath = new plw.pathname(context.SAN_CS_CSO_FTE_COSTS_PATH+'CSO_FTEs_IMPORT.csv');
		if(vPath.probefile()){
			vPath.DeleteFile();
		}
		vTempPath.copyfile(vPath);
		vTempPath.DeleteFile();
		
		return true;
	}
	else {
		return false;
	}
} 
/*
* Jira : PC-746
* Autor : Bekkal Amine
* Date : 22-03-2022
* Description : - Delete Vaccine Monthly baseline for the previous years N-2 and before keep only December ‘YYYY-12’ monthly baselines
                - Delete Vaccine Monthly baseline reference for the previous years N-2 and before keep only December ‘YYYY-12’ monthly baselines
*/

namespace _san_batch_del_vaccine_monthly_baseline;

var ligne_file="";
var nb_bl_deleted=0;


// Delete for Vaccine Monthly baseline for the previous years N-2 and before keep only December ‘YYYY-12’ monthly baselines

plw.writeln("Start _san_delete_vaccine_monthly_baseline .... ");
try {
	
	for (var o_ref in plc.reference where o_ref.project.SAN_RDPM_B_RND_VACCINES_PROJECT && o_ref.callBooleanFormula(" AD <> - 1 AND AD < PERIOD_START($DATE_OF_THE_DAY,\"YEAR\",-2) and NAME<>\"*_12\" AND TEMPLATE=\"SAN_RDPM_MONTHLY_BASELINE\""))
	{
		ligne_file=o_ref.onb+";"+ o_ref.name+";"+o_ref.desc+";"+o_ref.AD;		
						
		with(plw.no_locking){	
			o_ref.delete();
			nb_bl_deleted++;
			plw.writeln("Deletion of vaccine monthly baseline => "+ligne_file);		
		}
	}
	plw.writeln(nb_bl_deleted + " vaccine monthly baseline deleted.");	
	plw.writeln("End _san_delete_vaccine_monthly_baseline .... ");
}
catch(error e) { 
	
	plw.writeln("Exception catched.... ==> ~s"+e);
}


// Delete for Vaccine Monthly baseline reference for the previous years N-2 and before keep only December ‘YYYY-12’ monthly baselines
ligne_file="";
nb_bl_deleted=0;
plw.writeln("Start _san_delete_vaccine_monthly_baseline_reference .... ");
try {
	
	for (var ref_vacc in plc._L1_PT_REF_ADMIN where ref_vacc.SAN_RDPM_UA_B_BASELINE_ADMIN_VACC_MONTHLY && ref_vacc.callBooleanFormula("SAN_RDPM_UA_D_CREATION_DATE <> -1 AND SAN_RDPM_UA_D_CREATION_DATE < PERIOD_START($DATE_OF_THE_DAY,\"YEAR\",-2) and NAME<>\"*_12\""))
	{
		ligne_file=ref_vacc.onb+";"+ ref_vacc.name+";"+ref_vacc.desc+";"+ref_vacc.SAN_RDPM_UA_D_CREATION_DATE+";" +ref_vacc._L1_AA_S_REF_TEMPLATE  	
					+ ";"+ref_vacc.SAN_RDPM_UA_B_BASELINE_ADMIN_VACC_MONTHLY +";" +ref_vacc._L1_AA_B_REF_IS_LOADED+";"+ ref_vacc._L1_AA_S_REF_PRJTYP;
						
		with(plw.no_locking){	
			ref_vacc.delete();
			nb_bl_deleted++;
			plw.writeln("Deletion of vaccine monthly baseline reference => "+ligne_file);
		}
	}
	plw.writeln(nb_bl_deleted + " vaccine monthly baseline reference deleted.");	
	plw.writeln("End _san_delete_vaccine_monthly_baseline_reference.... ");
}
catch(error e) { 
	
	plw.writeln("Exception catched.... ==> ~s"+e);
		
}



 
// dev
//  PLWSCRIPT : SAN_RDPM_JS2_DYN_ATTRIBUTES
//
//
//  Modification : 13-JAN-2022 LFA
//  Add control on start date and finish date of availibility on function san_get_long_absence_on_timecard_slot_reader
//  Modification : 2020/01/12 IGU
//  Dynamic attributes to manage PRIME - RDPM fields governance added
//  Modification : 29-JAN-2021 FLC
//  Merge with 'SAN_RDPM_JS2_DYN_REL_PROJ_OBJ_AND_TECH_MIL' to include Project objectives relations & attributes
//  Modification - SAK - 24/03/2021 : PC-3573 - PPM should receives an alert when delay at OL
//  Modification - ABE - 17/06/2021 : PC-452 - Creation of new dynamic attributes Study Sponsorship Type & Study Sponsorship Name
//  Modification - ABE - 28/07/2021 : PC-2960 & PC-3429 - Creation of new dynamic attributes Project role related to team member on Project, Activity, Planned Expenditure, Planned Hour and Actual Hour class. 
//  Modification - ABO - 14/09/2021 : PC-4515 - Creation of new dynamic attributes Root product code related to Activity class.       
//  Modification - LFA - 21/09/2021 : PC-4571 - Modification of function san_rdpm_team_member_from_project_parent and san_rdpm_team_member_from_project to avoid Global Map when calculating fields on indications
//  Modification - LFA - 09/12/2021 : PC-4236 - Creation of dynamic attribute "All Root Products Codes"
//  Modification - TGO - 15/12/2021 : PC-3008 - Creation of dynamic attribute "MCQ score reached?"
//  Modification - LFA - 14/02/2022 : PC-5675 - Creation of dynamic attributes for RPP Report
//  Modification - ABE - 14/02/2022 : PC-5547 - Modification of san_rdpm_team_member_from_project_parent && san_rdpm_team_member_from_project to take account a new management rule to propagate the project team if the project is pharma or vaccine.
//  Modification - TGO - 24/02/2022 : PC-5656 - Change behavior of dynamic attribute "MCQ score reached?"
//***************************************************************************/

namespace _san_rdpm_dyn_attribute;

// *********************  Timecard  *********************

// PC-2783 Dynamic attribute "Long absence?" on Timecard class
// Used to filter absent people from List timecard screen in the Timecard module
function san_get_long_absence_on_timecard_slot_reader() {
	var result=false;
	var timecard=this;
	var res=timecard.RESOURCE;
	var tc_start=timecard.START_DATE;
	var tc_end=timecard.END_DATE;
	
	if (res!=undefined) {
		with(res.fromobject()) {
			for (var avail in plc.avaibility where avail.TYPE=="Absence") {
				if ((avail.sd==undefined || avail.sd<=tc_start) && (avail.fd==undefined || avail.fd>=tc_end)) {
					return true;
				}
			}
		}
	}
	return result;
}

function san_create_exists_long_absence_on_timecard_dynamic_attribute(){
	try{
		var slot = new objectAttribute(plc.timecard,"SAN_RDPM_DYN_ATT_B_TC_ABS","BOOLEAN");
		slot.Comment = "[DynAtt TimeCard] Long absence?";
		slot.Reader = san_get_long_absence_on_timecard_slot_reader;
		slot.Locker = true;
		slot.hiddenInIntranetServer = true;
		slot.connecting = false;
	}
	catch(error e){
		plw.writeln("Could not create slot SAN_RDPM_DYN_ATT_B_TC_ABS due to error: " + e);
	}
}

try{
	with(plw.no_locking){
		san_create_exists_long_absence_on_timecard_dynamic_attribute();
	}
}
catch (error e){
	plw.writeToLog("Failed to create SAN_RDPM_DYN_ATT_B_TC_ABS");
	plw.writeln(e);
}

// *********************  Project Objectives  *********************

// Function used to list the planned Project Objectives for a given project. Used by the dynamic relation on Project Objectives (Workbox aggregator) and the dynamic attribute "Next Milestone" on Project class
function san_rdpm_js2_get_planned_project_objectives(o_project)
{   
	var v_vect_planned_po = new vector();
	
	// Get the list of Project Objectives Activity types
	var list = [];
	for (var o_wbstype in plc.wbs_type where o_wbstype.SAN_RDPM_UA_B_IS_PROJECT_OBJECTIVES) 
		{
			list.push(o_wbstype);
		}
	
	// Loop on Project related Project Objectives
	if(o_project instanceof plc.project)
	{
		list.push(o_project);
		var filter = plw.objectset(list);
		with(filter.fromobject()){
			for (var o_po in plc.task where o_po.AF==undefined order by ["PS"])
			{
				v_vect_planned_po.push(o_po);
			}
		}
	}  
	return v_vect_planned_po;
}

// Function used to list "My active projects". Used by the dynamic relation on Project Objectives (Workbox aggregator).
function san_rdpm_js2_get_my_active_projects()
{
	var v_vect_my_projects = new vector();
	var o_project_type = plc.project_type.get("Continuum.RDPM.Pharma");
	with(o_project_type.fromobject()){
		for(var o_project in plc.project where o_project.is_active && (o_project.callbooleanformula("OWNER = $CURRENT_USER") || o_project.SAN_RDPM_UA_B_PRJ_PO_NOTIF)){
			v_vect_my_projects.push(o_project);
		}
	}
	return v_vect_my_projects;
}

// Dynamic relation "My Project Objectives"
// Function to get all task that is project objetives and linked to the user: only for the project team users
function san_rdpm_my_project_objectives(f)
{
	var v_my_active_projects = san_rdpm_js2_get_my_active_projects();
	var v_my_planned_project_objectives = new vector();
	if(v_my_active_projects.length>0)
	{
		for(var o_project in v_my_active_projects)
		{
			var v_planned_project_objectives = san_rdpm_js2_get_planned_project_objectives(o_project);
			if(v_planned_project_objectives.length>0)
			{
				for(var o_po in v_planned_project_objectives)
				{
					v_my_planned_project_objectives.push(o_po);
				}
			}
		}
	}
	v_my_planned_project_objectives=v_my_planned_project_objectives.removeduplicates();
	if(v_my_planned_project_objectives.length>0){
		for(var o_po in v_my_planned_project_objectives)
		{
		   f.call(o_po);
		}
	}
}

function san_rdpm_dyn_rel_my_prj_objectives(){
  var SAN_RDPM_REL_MY_PRJ_OBJECTIVES = new ObjectRelation(plc.contextopx2,"SAN_RDPM_REL_MY_PRJ_OBJECTIVES");
  SAN_RDPM_REL_MY_PRJ_OBJECTIVES.Mapmethod = san_rdpm_my_project_objectives;
  SAN_RDPM_REL_MY_PRJ_OBJECTIVES.ConnectedToClass = plc.task;
  SAN_RDPM_REL_MY_PRJ_OBJECTIVES.Comment = "[DynRel] My Project Objectives";
}

try{
	with(plw.no_locking){
		san_rdpm_dyn_rel_my_prj_objectives();
	}
}
catch (error e){
	plw.writeToLog("Failed to create SAN_RDPM_REL_MY_PRJ_OBJECTIVES");
	plw.writeln(e);
}

// Dynamic attribute "Next Milestone" on Project class
// Used to identify Next Project Objectives in PFM Reports
function san_next_milestone_prj_slot_reader()
{
	var v_result_onb = 0;
	var o_project = undefined;
	// If 'this' is a Pharma Project, get Lead indication, else it is an indication
	if(this.SAN_RDPM_UA_PRJ_RND_PRJ)
	{
		with(this.fromobject())
		{
			for(var o_lead_indication in plc.project where o_lead_indication.SAN_UA_B_PRJ_IS_LEAD_INDICATION)
			{
				o_project = o_lead_indication;
				break;
			}
		}
	} else if (this.SAN_RDPM_UA_PRJ_RND_IND) {
		o_project = this;
	}
	// Get the first Project Objective
	if(o_project!=undefined)
	{
		var v_planned_project_objectives = san_rdpm_js2_get_planned_project_objectives(o_project);
		if(v_planned_project_objectives.length>0)
		{
			v_result_onb = v_planned_project_objectives[0].onb;
		}
	}
	return v_result_onb;
}

function san_next_milestone_create_prj_dynamic_attribute(){
	try{
		var slot = new objectAttribute(plc.project,"SAN_RDPM_DA_PRJ_NEXT_MILESTONE_ONB","NUMBER");
		slot.Comment = "[DynAtt Project] Next milestone ONB";
		slot.Reader = san_next_milestone_prj_slot_reader;
		slot.Locker = true;
		slot.hiddenInIntranetServer = true;
		slot.connecting = false;
	}
	catch(error e){
		plw.writeln("Could not create slot due to error: " + e);
	}
}

try{
	with(plw.no_locking){
		san_next_milestone_create_prj_dynamic_attribute();
	}
}
catch (error e){
	plw.writeToLog("Failed to create SAN_RDPM_DA_PRJ_NEXT_MILESTONE_ONB");
	plw.writeln(e);
}

// *********************  PRIME Project Code & Study code  *********************

// PC-2572 Project dynamic attributes, link with PRIME Project Code
// If Project code is set, use information from 'PRIME Project Code', otherwise use information from Project
function san_prj_prime_gov_slot_reader(s_prj_slot,s_prj_code_slot) {
	var plc.ordo_project o_prj = this;
	if(o_prj instanceof plc.ordo_project){
    	if(o_prj.SAN_UA_RWE_PROJECT_CODE_PRIME instanceof plc.__USER_TABLE_SAN_RWE_UT_PROJECT_CODES && (o_prj.getinternalvalue('STATE').toString()=='ACTIVE' || o_prj._PM_NF_B_IS_A_VERSION==true)){
    		return o_prj.SAN_UA_RWE_PROJECT_CODE_PRIME.get(s_prj_code_slot);
    	}
    	else if (o_prj.get('SAN_RDPM_UA_PRJ_RND_PRJ')==true) {
    	    return o_prj.get(s_prj_slot);
    	}
    	else{
    		var plc.ordo_project o_parent_prj = plc.ordo_project.get(o_prj.SAN_RDPM_UA_PRJ_S_ROOT_PROJECT);
    	    return o_parent_prj.get(s_prj_slot);
    	}
	}
}

function san_prj_prime_gov_slot_modifier(newValue,s_prj_slot) {
	var plc.ordo_project o_prj = this;
	if(o_prj instanceof plc.ordo_project){
	    o_prj.set(s_prj_slot,newValue);
	}
}
//ABO - 14/09/2021 : PC-5165 - extend the operation (when vaccine projects are not coded the dynamic attributes are not locked) for vaccine  
function san_prj_prime_gov_slot_locker(o_locker) {
	var plc.ordo_project o_prj = o_locker.object;
	if(o_prj instanceof plc.ordo_project){
    	if((o_prj.get('SAN_RDPM_UA_PRJ_RND_PRJ')==false && o_prj.get('SAN_RDPM_UA_PRJ_RND_PRJ_VAC')==false) || (o_prj.SAN_UA_RWE_PROJECT_CODE_PRIME instanceof plc.__USER_TABLE_SAN_RWE_UT_PROJECT_CODES && (o_prj.getinternalvalue('STATE').toString()=='ACTIVE' || o_prj._PM_NF_B_IS_A_VERSION==true))){	
    		return true;
    	}
    	else{
    		return false;
    	}
	}
}

function san_create_prj_prime_gov_dynamic_attributes(s_prj_slot,s_prj_code_slot,s_da_name){
	var o_prj_slot = plc.ordo_project.getslot(s_prj_slot);
	var o_prj_slot_type = o_prj_slot.descriptor.type.name;
	
	try{
		var slot = new objectAttribute(plc.ordo_project,s_da_name,o_prj_slot_type);
		
		if (o_prj_slot_type.name.matchregexp('^\.\.\.')){
			slot.setPlist(new symbol("LIST-CLASS","KEYWORD"), new symbol(o_prj_slot_type.name.replaceregexp('\.\.\.',''),o_prj_slot_type.package));
		}

		slot.Comment = o_prj_slot.descriptor.comment;
		slot.Reader = san_prj_prime_gov_slot_reader.closure(s_prj_slot,s_prj_code_slot);
		slot.Modifier = san_prj_prime_gov_slot_modifier.closure(s_prj_slot);
		slot.Locker = function () {return san_prj_prime_gov_slot_locker(this);};
		slot.hiddenInIntranetServer = false;
		slot.connecting = false;
	}
	catch(error e){
		plw.writeln("Could not create slot ["+s_da_name+"] due to error: " + e);
	}
}

// PC-2573 Study dynamic attributes, link with PRIME Study Code
// If Study code is set, use information from 'PRIME Study Code', otherwise use information from Study
function san_act_prime_gov_slot_reader(s_act_slot,s_study_code_slot,s_da_name) {
	var plc.work_structure o_act = this;
	var o_prj = o_act.get('PROJECT');
	if(o_act instanceof plc.work_structure && o_prj instanceof plc.ordo_project){
    	if(o_act.SAN_UA_RDPM_B_IS_A_STUDY && o_act.SAN_UA_ACT_STUDY_CODE instanceof plc.__USER_TABLE_SAN_RWE_PRIME_CODES && (o_prj.getinternalvalue('STATE').toString()=='ACTIVE' || o_prj._PM_NF_B_IS_A_VERSION==true)){
    		return o_act.SAN_UA_ACT_STUDY_CODE.get(s_study_code_slot);
    	}
    	else if (o_act.SAN_UA_RDPM_B_IS_A_STUDY){
    		return o_act.get(s_act_slot);
    	}
    	else{
    		var o_study_act = plc.work_structure.get(o_act.SAN_UA_RDPM_ACT_S_STUDY_ID);
    		if (o_study_act instanceof plc.work_structure) {return o_study_act.get(s_da_name);}
    	}
	}
}

function san_act_prime_gov_slot_modifier(newValue,s_act_slot) {
	var plc.work_structure o_act = this;
	if(o_act instanceof plc.work_structure){
	    o_act.set(s_act_slot,newValue);
	}
}

function san_act_prime_gov_slot_locker(o_locker) {
	var plc.work_structure o_act = o_locker.object;
	var o_prj = o_act.get('PROJECT');
	if(o_act instanceof plc.work_structure && o_prj instanceof plc.ordo_project){
    	if(o_act.SAN_UA_RDPM_B_IS_A_STUDY==false){
    		return true;
    	}
    	else if(o_act.SAN_UA_RDPM_B_IS_A_STUDY && o_act.SAN_UA_ACT_STUDY_CODE instanceof plc.__USER_TABLE_SAN_RWE_PRIME_CODES && (o_prj.getinternalvalue('STATE').toString()=='ACTIVE' || o_prj._PM_NF_B_IS_A_VERSION==true)){
    		return true;
    	}
    	else{
    		return false;
    	}
	}
}

function san_create_act_prime_gov_dynamic_attributes(s_act_slot,s_study_code_slot,s_da_name){
	var o_act_slot = plc.work_structure.getslot(s_act_slot);
	var o_act_slot_type = o_act_slot.descriptor.type.name;
	
	try{
		var slot = new objectAttribute(plc.work_structure,s_da_name,o_act_slot_type);
		
		if (o_act_slot_type.name.matchregexp('^\.\.\.')){
			slot.setPlist(new symbol("LIST-CLASS","KEYWORD"), new symbol(o_act_slot_type.name.replaceregexp('\.\.\.',''),o_act_slot_type.package));
		}

		slot.Comment = o_act_slot.descriptor.comment;
		slot.Reader = san_act_prime_gov_slot_reader.closure(s_act_slot,s_study_code_slot,s_da_name);
		slot.Modifier = san_act_prime_gov_slot_modifier.closure(s_act_slot);
		slot.Locker = function () {return san_act_prime_gov_slot_locker(this);};
		slot.hiddenInIntranetServer = false;
		slot.connecting = false;
	}
	catch(error e){
		plw.writeln("Could not create slot ["+s_da_name+"] due to error: " + e);
	}
}

//Project dynamic attributes creation
san_create_prj_prime_gov_dynamic_attributes('SAN_RDPM_UA_PRJ_UA_CODEV_PARTNER','SAN_UA_PC_PARTNER','SAN_RDPM_DA_PRJ_UA_CODEV_PARTNER');
san_create_prj_prime_gov_dynamic_attributes('SAN_RDPM_UA_S_MOA','SAN_UA_PC_S_MECANISM_OF_ACTION','SAN_RDPM_DA_S_MOA');
san_create_prj_prime_gov_dynamic_attributes('SAN_RDPM_UA_MOLECULE_SUB_TYPE','SAN_UA_PC_MOLECULE_SUB_TYPE','SAN_RDPM_DA_MOLECULE_SUB_TYPE');
san_create_prj_prime_gov_dynamic_attributes('SAN_RDPM_UA_PROJECT_CATEGORY','SAN_UA_PC_PROJECT_CATEGORY','SAN_RDPM_DA_PROJECT_CATEGORY');
san_create_prj_prime_gov_dynamic_attributes('SAN_RDPM_UA_PRJ_UA_NAME_EXT_SOURCE','SAN_UA_PC_NAME_EXT_SOURCE','SAN_RDPM_DA_PRJ_UA_NAME_EXT_SOURCE');
//ABO - 01/12/2021 : PC-4680 & PC-5165 creation of two new dynamic attributes "Origin of NME" & "External Product Code"
san_create_prj_prime_gov_dynamic_attributes('SAN_RDPM_UA_ORIGIN_OF_NME','SAN_UA_PC_ORIGIN_OF_NME','SAN_RDPM_DA_ORIGIN_OF_NME');
san_create_prj_prime_gov_dynamic_attributes('SAN_RDPM_UA_PARTNER_PROD_CODE','SAN_UA_PC_EXT_PRODUCT_CODE','SAN_RDPM_DA_EXT_PRODUCT_CODE');

//Study dynamic attributes creation
san_create_act_prime_gov_dynamic_attributes('SAN_UA_ACT_STUDY_PHASE','SAN_UA_RWE_STUDY_PHASE','SAN_DA_ACT_STUDY_PHASE');
//san_create_act_prime_gov_dynamic_attributes('SAN_RDPM_UA_CLIN_INDICATION','SAN_UA_RWE_INDICATION','SAN_RDPM_DA_CLIN_INDICATION');
//san_create_act_prime_gov_dynamic_attributes('SAN_RDPM_UA_ACT_THERAPEUTIC_AREA','SAN_UA_RWE_STUDY_TA','SAN_RDPM_DA_ACT_THERAPEUTIC_AREA');
san_create_act_prime_gov_dynamic_attributes('SAN_UA_ACT_STUDY_GROUP','SAN_UA_RWE_S_STUDY_GROUP','SAN_DA_ACT_STUDY_GROUP');
san_create_act_prime_gov_dynamic_attributes('SAN_RDPM_UA_S_PHARMA_EXT_CODE','SAN_UA_SC_S_EXTERNAL_STUDY_CODE','SAN_RDPM_DA_S_PHARMA_EXT_CODE');
san_create_act_prime_gov_dynamic_attributes('SAN_UA_ACT_B_IN_HUMAN','SAN_UA_SC_B_IN_HUMAN','SAN_DA_ACT_B_IN_HUMAN');
san_create_act_prime_gov_dynamic_attributes('SAN_UA_ACT_STUDY_PURPOSE','SAN_UA_SC_STUDY_PURPOSE','SAN_DA_ACT_STUDY_PURPOSE');
//ABE - 17/06/2021 : PC-452 - Creation of new dynamic attributes Study Sponsorship Type & Study Sponsorship Name
san_create_act_prime_gov_dynamic_attributes('SAN_RDPM_UA_ACT_STUDY_SPONSORSHIP_TYPE','SAN_RDPM_UA_SC_STUDY_SPONSORSHIP_TYPE','SAN_RDPM_DA_ACT_STUDY_SPONSORSHIP_TYPE');
//ABO - 12/10/2021 : PC-4492 - deletion of the dynamic attribute Study Sponsorship Name and replacement by the User attribute
//san_create_act_prime_gov_dynamic_attributes('SAN_RDPM_UA_ACT_STUDY_SPONSOR_NAME','SAN_RDPM_UA_SC_STUDY_SPONSOR_NAME','SAN_RDPM_DA_ACT_STUDY_SPONSOR_NAME');
//ABO - 14/09/2021 : PC-4515 - Creation of new dynamic attribute Root Product Code
san_create_act_prime_gov_dynamic_attributes('SAN_RDPM_UA_ACT_ROOT_PRODUCT_CODE','SAN_UA_RWE_STUDY_PRODUCT','SAN_RDPM_DA_ACT_ROOT_PRODUCT_CODE');


//ABE : PC-2960 & PC-3429
//Function to get all teams members releated to roles from project + all indications

// PC-4571 - Add o_project as argument in the function
// PC-5547 - Modification t take account a new management rule to propagate the project team if the project is pharma or vaccine.

function san_rdpm_team_member_from_project_parent(project_role,o_project)
{
    //var o_project=this;
    var Result_List = new vector(); 
    var filter;
    if (o_project instanceOf plc.ordo_project && project_role != undefined )
    {
        with(o_project.fromObject()){
                      
            if(o_project.SAN_RDPM_B_RND_PHARMA_PROJECT){
                
               for ( var pjr_team in plc.__USER_TABLE_SAN_RDPM_UT_PROJECT_TEAM_MEMBER where pjr_team.SAN_RDPM_UA_PROJECT_ROLE==project_role && pjr_team.san_rdpm_ua_user_desc !="")
                    {
                        Result_List.Push(pjr_team.san_rdpm_ua_user_desc);
                    }
            }else if(o_project.SAN_RDPM_B_RND_VACCINES_PROJECT){
                
                    for ( var pjr_team in plc.__USER_TABLE_SAN_RDPM_UT_PROJECT_TEAM_MEMBER where pjr_team.SAN_RDPM_UA_PROJECT_ROLE==project_role && pjr_team.san_rdpm_ua_user_desc !="" && pjr_team.FILE==o_project)
                    {
                        Result_List.Push(pjr_team.san_rdpm_ua_user_desc);
                    }
            }
        }
    }
    return Result_List.removeduplicates().join(",");
}

//Function to get all teams members releated to roles from project parent and indication
// PC-4571 - Avoid global map when the project is an indication (level>1)
// PC-5547 - Modification t take account a new management rule to propagate the project team if the project is pharma or vaccine.
function san_rdpm_team_member_from_project(project_role)
{
    var obj_project_role =  plc.__USER_TABLE_SAN_RDPM_UT_PROJECT_ROLE.get(project_role);
    var o_project = this;
    var global_team ;
    var team_indication ;
    var team_project ;
    
    if (o_project instanceof plc.ordo_project && obj_project_role != undefined )
    {
        // PC-5547 - Modification t take account a new management rule to propagate the project team if the project is pharma or vaccine.
         if (o_project.SAN_RDPM_B_RND_VACCINES_PROJECT ) {
            
                return san_rdpm_team_member_from_project_parent(obj_project_role,o_project);
                
        }
        // PC-5547 - Modification t take account a new management rule to propagate the project team if the project is pharma or vaccine.
        else if( o_project.SAN_RDPM_B_RND_PHARMA_PROJECT  ) {
        
			team_indication =  san_rdpm_team_member_from_project_parent(obj_project_role,o_project);
			team_project = san_rdpm_team_member_from_project_parent(obj_project_role,o_project.PARENT);
			global_team = "LIST_MERGE".call(team_indication,team_project);
            return global_team;
        
        }
    }
}
//Function to create dynamic attribute definition on Project class
function san_rdpm_create_project_role_slot_dynamic_attribute(onb,desc,attribute){
    
  try{         
      var SlotName =  "_PO_DA_S_PROJECT_ROLE_" + onb;
	   var classobject = plc.ordo_project;
      if(classobject.getslotbyid(SlotName) == undefined){
        var slot = new objectattribute(classobject,
                                       SlotName,
                                       "STRING");
        Slot.comment= desc;
        Slot.reader = san_rdpm_team_member_from_project.Closure(attribute);
        Slot.locker = false;
        Slot.hiddeninintranetserver = false;
      }
      return SlotName;  
  }catch(error e){
        plw.writeln("Could not create slot due to error: " + e);
    }
}

//Generic function to get Team member releated Project role on Project class
function san_rdpm_create_object_project_role(field) {
	var object = this;
	if (object!=undefined) return object.project.get(field);
}

//Generic function to create dynamic attribute class object (Activity, Planned Expenditure, Planned Hour, Actual Hour)
function san_rdpm_create_object_project_role_dynamic_attribute(onb,attribute_desc, classobject)
{
  var o_class="";
  if( classobject == plc.expenditure) o_class="_PEXP_" ;
  if( classobject == plc.work_structure) o_class="_ACT_" ;
  if( classobject == plc.task_alloc) o_class="_PH_" ;
  if( classobject == plc.work_performed) o_class="_ACH_" ;
	  
  var SlotName =  "_PO_DA_S_PROJECT_ROLE_"+ onb;
  var field =  "_PO_DA_S_PROJECT_ROLE"+o_class+onb;
  var slot = classobject.getslotbyid(SlotName);
  if (slot == undefined)
    {
      slot = new ObjectAttribute(classobject,field,"STRING");
    }
  if ( slot != undefined)
	{
		slot.comment = attribute_desc;
		slot.reader = san_rdpm_create_object_project_role.Closure(SlotName);
		slot.locker = false;
		slot.hiddeninintranetserver = false;
    }
}
//Dynamic attribute creation on Project 
try{
    with(plw.no_locking){
        for ( var o_role in  plc.__USER_TABLE_SAN_RDPM_UT_PROJECT_ROLE where o_role.SAN_RDPM_UA_PROJECT_ROLE_B_VISIBLE_PRJ_LEVEL ){
            san_rdpm_create_project_role_slot_dynamic_attribute(o_role.ONB,o_role.NAME,o_role.NAME);
		}
    }
   
}
catch (error e){ 
    plw.writeToLog("Failed to create san_rdpm_create_project_role_slot_dynamic_attribute on Project.");
    plw.writeln(e);
}
//Dynamic attribute creation on Activity 
try{
    with(plw.no_locking){
        for ( var o_role in  plc.__USER_TABLE_SAN_RDPM_UT_PROJECT_ROLE where o_role.SAN_RDPM_UA_PROJECT_ROLE_B_VISIBLE_PRJ_LEVEL )
		    san_rdpm_create_object_project_role_dynamic_attribute(o_role.ONB,o_role.NAME,plc.work_structure);
    }
   
}
catch (error e){
    plw.writeToLog("Failed to create san_rdpm_create_act_project_role_dynamic_attribute on Activity");
    plw.writeln(e);
}
//Dynamic attribute creation on Planned Expenditure 
try{
    with(plw.no_locking){
        for ( var o_role in  plc.__USER_TABLE_SAN_RDPM_UT_PROJECT_ROLE where o_role.SAN_RDPM_UA_PROJECT_ROLE_B_VISIBLE_PRJ_LEVEL )
		    san_rdpm_create_object_project_role_dynamic_attribute(o_role.ONB,o_role.NAME,plc.expenditure);
    }
   
}
catch (error e){
    plw.writeToLog("Failed to create san_rdpm_create_act_project_role_dynamic_attribute on Expenditure.");
    plw.writeln(e);
}
//Dynamic attribute creation on task_alloc 
try{
    with(plw.no_locking){
        for ( var o_role in  plc.__USER_TABLE_SAN_RDPM_UT_PROJECT_ROLE where o_role.SAN_RDPM_UA_PROJECT_ROLE_B_VISIBLE_PRJ_LEVEL )
		    san_rdpm_create_object_project_role_dynamic_attribute(o_role.ONB,o_role.NAME,plc.task_alloc);
    }
   
}
catch (error e){
    plw.writeToLog("Failed to create san_rdpm_create_act_project_role_dynamic_attribute on task_alloc.");
    plw.writeln(e);
}
//Dynamic attribute creation on work_performed 
try{
    with(plw.no_locking){
        for ( var o_role in  plc.__USER_TABLE_SAN_RDPM_UT_PROJECT_ROLE where o_role.SAN_RDPM_UA_PROJECT_ROLE_B_VISIBLE_PRJ_LEVEL )
		    san_rdpm_create_object_project_role_dynamic_attribute(o_role.ONB,o_role.NAME,plc.work_performed);
    }
   
}
catch (error e){
    plw.writeToLog("Failed to create san_rdpm_create_act_project_role_dynamic_attribute on work_performed.");
    plw.writeln(e);
}

//End : PC-2960 & PC-3429

// PC-4236 - Creation of dynamic attribute "All Root Products Codes"
// Reader (Generic)
function san_all_root_product_code_reader() {
	return this.SAN_RDPM_UA_ACT_OTHER_ROOT_PRODUCT_CODE_F;
}

// Modifier
function san_all_root_product_code_modifier(New_value) {
   if (this instanceof plc.workstructure)
   {
	   with(plw.no_locking){
	    this.SAN_RDPM_UA_ACT_OTHER_ROOT_PRODUCT_CODE=New_value;
	   }
   }
}

//Dynamic attribute creation on Project 
try{
    with(plw.no_locking){        
		var o_act_slot = plc.work_structure.getslot("SAN_RDPM_UA_ACT_OTHER_ROOT_PRODUCT_CODE");
		var o_act_slot_type = o_act_slot.descriptor.type.name;
		var slot = new objectAttribute(plc.work_structure,"SAN_RDPM_DA_ALL_ROOT_PRODUCT_CODES",o_act_slot_type);
		if (o_act_slot_type.name.matchregexp('^\.\.\.')){
			slot.setPlist(new symbol("LIST-CLASS","KEYWORD"), new symbol(o_act_slot_type.name.replaceregexp('\.\.\.',''),o_act_slot_type.package));
		}
		slot.Comment = "All Root Products Codes";
		slot.Reader = san_all_root_product_code_reader;
		slot.Modifier = san_all_root_product_code_modifier;
		slot.hiddenInIntranetServer = false;
		slot.connecting = false;
    }   
}
catch (error e){ 
    plw.writeToLog("Failed to create SAN_RDPM_DA_ALL_ROOT_PRODUCT_CODES on activities.");
    plw.writeln(e);
}

// *********************  E-Learning  *********************

// PC-3008 Dynamic attribute "MCQ score reached?" on Module class
// Used to check if at least on Elearning MCQ is complete
// with a score equal or higher than module score target

function san_mcq_score_reached_slot_reader(){
	
	var oModule = this;
	var bElearnMcqValidated = false;
	
	if(oModule InstanceOf plc._Gui_Pt_Modules){
		with(oModule.fromobject()) {
			//We go through the relation between subject and Module
			for(var SubjectRelation in oModule.get("r._ELEARN_RA_MODULE._ELEAR_PT_SUBJ_MOD_NN")){
				//We check only Elearning subjects visible by the current user
				var Subject = SubjectRelation._Elear_RA_SUBJECT;
				if(Subject InstanceOf plc._GUI_PT_ELEARNING){
					var oMcq = Subject._ELEARN_RA_MCQ;
					//We check if the elearning has an MCQ linked to it
					if(oMcq instanceof plc._ELEARN_PT_MCQ && oMcq.NAME !=""){
						if(oMcq._ELEARN_DA_N_SCORE_FIELD >= math.round(oModule._GUI_AA_N_MCQ_PERCENTAGE * 100)){
							bElearnMcqValidated = true;
							//We stop as soon as we get one MCQ with the right score
							break;
						}
					}
				}
			}
		}
	}
	return bElearnMcqValidated;
}

function san_create_mcq_score_reached_dynamic_attribute(){
	try{
		var slot = new objectAttribute(plc._Gui_Pt_Modules,"SAN_RDPM_DA_B_MCQ_SCORE_REACHED","BOOLEAN");
		slot.Comment = "MCQ score reached?";
		slot.Reader = san_mcq_score_reached_slot_reader;
		slot.Locker = true;
		slot.hiddenInIntranetServer = false;
		slot.connecting = false;
	}
	catch(error e){
		plw.writeln("Could not create slot SAN_RDPM_DA_B_MCQ_SCORE_REACHED due to error: " + e);
	}
}

try{
	with(plw.no_locking){
		san_create_mcq_score_reached_dynamic_attribute();
	}
}
catch (error e){
	plw.writeToLog("Failed to create SAN_RDPM_DA_B_MCQ_SCORE_REACHED");
	plw.writeln(e);
}

///////////////////////////////////////////////////////////////////////////////////////
//********************************RPP Dynamic attributes******************************//
///////////////////////////////////////////////////////////////////////////////////////

function san_rpp_slot_reader(slot_act_type,date_slot) {
	var vAct = this;
	var wbs_type;
	var wbs_type_filter;
	var result = undefined;
	var vec_wbs_type;
	var filter_vec = new vector();
	if (vAct instanceof plc.workstructure)
	{
		wbs_type= vAct.WBS_TYPE;
		if (wbs_type instanceof plc.WBS_TYPE && wbs_type.SAN_RDPM_UA_B_RPP_ACT  && wbs_type.get(slot_act_type)!="")
		{
			wbs_type_filter=wbs_type.get(slot_act_type);
			if (wbs_type_filter==wbs_type)
			{
				result=vAct.get(date_slot);
			}
			else
			{
				//Create a vector of activity types
				vec_wbs_type=wbs_type_filter.parselist();
				// Create filter
				for (var at in vec_wbs_type)
				{
					filter_vec.push(plc.wbs_type.get(at));
				}
				filter_vec.push(vAct);
				var filter = plw.objectset(filter_vec);
				with(filter.fromobject()){		
					for(var Act in plc.work_structure order by [['INVERSE','PF']])
					{
						result = Act.get(date_slot);
					}					
				}
			}
		}
	}
	return result;
}

function san_create_rpp_dynamic_attributes(s_da_name,s_da_desc,slot_act_type,date_slot){
	var slot = new objectAttribute(plc.workstructure,s_da_name,"END-DATE");
	slot.Comment = s_da_desc;
	slot.Reader = san_rpp_slot_reader.closure(slot_act_type,date_slot);
	slot.Locker = true;
	slot.hiddenInIntranetServer = false;
	slot.connecting = false;
}

san_create_rpp_dynamic_attributes("SAN_RDPM_DA_ACT_PLANNED_SUBMISSION","Planned Submission","SAN_RDPM_UA_S_SUBMISSION_WBS_TYPE","PF");
san_create_rpp_dynamic_attributes("SAN_RDPM_DA_ACT_ACTUAL_SUBMISSION","Actual Submission","SAN_RDPM_UA_S_SUBMISSION_WBS_TYPE","AF");
san_create_rpp_dynamic_attributes("SAN_RDPM_DA_ACT_YEARLY_BASELINE_SUBMISSION","Yearly Baseline Submission","SAN_RDPM_UA_S_SUBMISSION_WBS_TYPE","FD_YEARLY_VACCINES");
san_create_rpp_dynamic_attributes("SAN_RDPM_DA_ACT_PLANNED_DISPATCH","Planned Dispatch","SAN_RDPM_UA_S_DISPATCH_WBS_TYPE","PF");
san_create_rpp_dynamic_attributes("SAN_RDPM_DA_ACT_ACTUAL_DISPATCH","Actual Dispatch","SAN_RDPM_UA_S_DISPATCH_WBS_TYPE","AF");
san_create_rpp_dynamic_attributes("SAN_RDPM_DA_ACT_YEARLY_BASELINE_DISPATCH","Yearly Baseline Dispatch","SAN_RDPM_UA_S_DISPATCH_WBS_TYPE","FD_YEARLY_VACCINES");
san_create_rpp_dynamic_attributes("SAN_RDPM_DA_ACT_PLANNED_APPROVAL","Planned Approval","SAN_RDPM_UA_S_APPROVAL_WBS_TYPE","PF");
san_create_rpp_dynamic_attributes("SAN_RDPM_DA_ACT_ACTUAL_APPROVAL","Actual Approval","SAN_RDPM_UA_S_APPROVAL_WBS_TYPE","AF");
san_create_rpp_dynamic_attributes("SAN_RDPM_DA_ACT_YEARLY_BASELINE_APPROVAL","Yearly Baseline Approval","SAN_RDPM_UA_S_APPROVAL_WBS_TYPE","FD_YEARLY_VACCINES");
san_create_rpp_dynamic_attributes("SAN_RDPM_DA_ACT_MEETING_DATE","Meeting Date","SAN_RDPM_UA_S_MEETING_WBS_TYPE","PF"); 
// 
//  PLWSCRIPT : SAN_RDPM_JS2_DYN_RELATION
// 
//  AUTHOR  : S. AKAAYOUS
//
//  v1.8 - 2022/03/07 - Antoine
//  Fix PC-1978 san_rdpm_tc_manager_time_synthesis() to display resources managed using "timecard managers" instead of "timecard manager" 
//
//  v1.7 - 2022/02/22 - Antoine
//  Add timesynthesis for managed resources dyn attributes for the Actual report in timecard
//
//  v1.6 - 2021/12/15 - Islam
//  Modify relations for workboxe Team members enable project access (PC-5251)
//
//  v1.5 - 2021/11/23 - Islam
//  Modify relations for workboxes Newly positioned on critical path (PC-4857)
//
//  v1.4 - 2021/11/17 - Islam
//  Add relations for workboxes Team members enable/disable project access (PC-4272)
//
//  v1.3 - 2021/04/01 - Florian
//  Create generic relation 'san_context_dr_project_phases_map' to list Project phases based on Portfolio filter (Portfolio Module). Used for PC-2930 Success Rates entry by PFM
// 
//  v1.2 - 2021/03/01 - David
//  Modify san_rdpm_js2_pharma_ol_act_cp_ref_map to limit on user projects and san_rdpm_js2_pharma_ol_act_cp_ref_project_map to manage multi-projects and use of table key for perf (PC-3286)
//
//  v1.1 - 2021/02/02 - David 
//  Add relations for workboxes Newly positioned on critical path (PC-1649)
//
//  v1.0 - 2020/10/12 - SAK
//  Script used for PC 140 : Traces set up: Record modifications on Resources & availabilities 
//
//***************************************************************************/
namespace _san_rdpm_res;

// ------------------------- PC 1978 : Dyn attribute used to display integrated hours on Actual detailed view - Pasteur (TC) -----------------------

function san_rdpm_tc_manager_time_synthesis(f)
{
    var Current_user = Context.Applet.User;
    if (Current_user instanceof plc.Opx2_user)
   {
      for (var Res in plc.resource where Res.SAN_RDPM_B_RES_MANAGED_IN_TC)
     {
       for (var TS in Res.get("TIME-SYNTS"))
       {
            f.call(TS);
        }
     }
   }
}

//dynamic relation between context and hours and expenditures summaries of resources managed by current user (Timecard)
function san_rdpm_dyn_rel_tc_manager_hes(){
  var SAN_RDPM_REL_TC_MANAGER_HES = new ObjectRelation(plc.contextopx2,"SAN_RDPM_DYN_REL_TC_MANAGER_HES");
  SAN_RDPM_REL_TC_MANAGER_HES.Mapmethod = san_rdpm_tc_manager_time_synthesis;
  SAN_RDPM_REL_TC_MANAGER_HES.ConnectedToClass = plc.timesynthesis;
  SAN_RDPM_REL_TC_MANAGER_HES.Comment = "RDPM TIME_CARD MANAGER TIME SYNTHESIS";
}


// Declaration of the dynamic relation 
try{
	with(plw.no_locking){
		san_rdpm_dyn_rel_tc_manager_hes();
	}
}
catch (error e){
	plw.writeToLog("Failed to create SAN_RDPM_DYN_REL_TC_MANAGER_HES");
	plw.writeln(e);
}

// ------------------------- PC 140 : Traces set up: Record modifications on Resources & availabilities -----------------------

function san_rdpm_func_res_trace(f){
	var res = this;
	var result = new vector();
	if ( res instanceof plc.resource){
		for (var trace in res.get("TRACE-LOGS"))
		{
			result.push(trace);
		}
		for (var dispo in res.get("Availabilities"))
		{
			for (var trace in dispo.get("TRACE-LOGS"))
			{
				result.push(trace);
			}
		}  
		for (var trace in result)
		{
			f.call(trace);
		}
	}
}


//dynamic relation between resources and traces resources & availability
function san_rdpm_dyn_rel_res_traces(){
  var SAN_RDPM_REL_RES_TRACES = new ObjectRelation(plc.Resource,"SAN_RDPM_RES_AVAIL_TRACES");
  SAN_RDPM_REL_RES_TRACES.Mapmethod = san_rdpm_func_res_trace;
  SAN_RDPM_REL_RES_TRACES.ConnectedToClass = plc.trace_log;
  SAN_RDPM_REL_RES_TRACES.Comment = "RDPM RESOURCE AND AVAILABILITIES TRACES";
}
// ## Declaration of the dynamic relation ##
try{
with(plw.no_locking){
san_rdpm_dyn_rel_res_traces();
}
}
catch (error e){
 plw.writeToLog("Failed to create SAN_RDPM_RES_AVAIL_TRACES");
 plw.writeln(e);
}

// ------------------------- PC 1649 : Relations for workboxes Newly positioned on critical path -----------------------

// Function to get all OL activities that are newly on critical path (comp with last monthly baseline)
function san_rdpm_js2_pharma_ol_act_cp_ref_map(f)
{
    // get the list of user projects (porject team) as for project objectives
    var vListProj=_san_rdpm_dyn_attribute.san_rdpm_js2_get_my_active_projects();
	// filter on projects where the field ciritical path exists on last monthly baseline
	for (var plc.ordo_project vProj in vListProj where vProj.SAN_RDPM_B_RND_PHARMA_PROJECT==true && "REFERENCE_EXISTS".callmacro("ACTIVITY",vProj.printattribute(),"MCN_NF_B_ON_CRIT_PATH",context.SAN_RDPM_CS_LAST_MONTHLY_PHARMA)==true){
		with(vProj.fromObject()){
			for(var vAct in plc.workstructure where vAct.SAN_RDPM_UF_B_CRITIC_PATH_REF==true){
				f.call(vAct);
			}
		}
	}
}

// Function to get OL activities from a project that are newly on critical path (comp with last monthly baseline)
function san_rdpm_js2_pharma_ol_act_cp_ref_project_map(f)
{
	var list l_prjt = undefined;
	if(this instanceof plc.virtualdataset){
		l_prjt = this.getinternalvalue("SELECTED-DATASETS");
	}
	else if(this instanceof plc.ordoproject){
		l_prjt = new list(this);
	}
	if(l_prjt instanceof list && l_prjt.LENGTH > 0){
		for(var plc.ordoproject vProj in l_prjt){
			if (vProj instanceof plc.ordo_project && vProj.SAN_RDPM_B_RND_PHARMA_PROJECT==true && "REFERENCE_EXISTS".callmacro("ACTIVITY",vProj.printattribute(),"MCN_NF_B_ON_CRIT_PATH",context.SAN_RDPM_CS_LAST_MONTHLY_PHARMA)==true){
				with(vProj.fromObject()){
					for(var vAct in plc.workstructure where vAct.SAN_RDPM_UF_B_CRITIC_PATH_REF==true){
						f.call(vAct);
					}
				}
			}
		}
	}
}

//dynamic relation between context user and activities
function san_rdpm_dr_my_pharma_ol_act_cp_ref(){
	var SAN_RDPM_REL_PHARMA_OL_ACT_CP_REF = new ObjectRelation(plc.contextopx2,"SAN_RDPM_REL_MY_PHARMA_OL_ACT_CP_REF");
	SAN_RDPM_REL_PHARMA_OL_ACT_CP_REF.Mapmethod = san_rdpm_js2_pharma_ol_act_cp_ref_map;
	SAN_RDPM_REL_PHARMA_OL_ACT_CP_REF.ConnectedToClass = plc.workstructure;
	SAN_RDPM_REL_PHARMA_OL_ACT_CP_REF.Comment = "RDPM My OL activities newly on critical path";
	var SAN_RDPM_REL_PHARMA_OL_ACT_CP_REF_PM = new ObjectRelation(plc.dataset,"SAN_RDPM_REL_PRJ_OL_ACT_CP_REF");
	SAN_RDPM_REL_PHARMA_OL_ACT_CP_REF_PM.Mapmethod = san_rdpm_js2_pharma_ol_act_cp_ref_project_map;
	SAN_RDPM_REL_PHARMA_OL_ACT_CP_REF_PM.ConnectedToClass = plc.workstructure;
	SAN_RDPM_REL_PHARMA_OL_ACT_CP_REF_PM.Comment = "RDPM OL activities newly on critical path";
}

// Declaration of the dynamic relation 
try{
	with(plw.no_locking){
		san_rdpm_dr_my_pharma_ol_act_cp_ref();
	}
}
catch (error e){
	plw.writeToLog("Failed to create SAN_RDPM_REL_MY_PHARMA_OL_ACT_CP_REF / SAN_RDPM_REL_PRJ_OL_ACT_CP_REF");
	plw.writeln(e);
}

// ----------------------- PC-2930 : Relation for Project phases based on Portfolio filter used for Success Rates entry (PFM) -----------------------

function san_context_dr_project_phases_map(f)
{
	// Use hashtable to avoid the return of duplicates
	var san_portfolio_project_phases = new hashtable();
	for(var o_project in plc.project where o_project.PM_PRJ_FILTER)
	{
		for(var o_act in o_project.get("_PAC_DR_PROJECT_PHASES"))
		{
			san_portfolio_project_phases.set(o_act,0);
		}
	}
	for(var o_act in san_portfolio_project_phases)
	{
		f.call(o_act);
	}
}

// Dynamic relation
function san_context_dr_project_phases_definition(){
	var san_context_dr_project_phases = new ObjectRelation(plc.contextopx2,"SAN_CONTEXT_DR_PROJECT_PHASES");
	san_context_dr_project_phases.Mapmethod = san_context_dr_project_phases_map;
	san_context_dr_project_phases.ConnectedToClass = plc.workstructure;
	san_context_dr_project_phases.Comment = "Project phases based on Portfolio filter";
}

// Declaration of the dynamic relation 
try{
	with(plw.no_locking){
		san_context_dr_project_phases_definition();
	}
} catch (error e) {
	plw.writeToLog("Failed to create SAN_CONTEXT_DR_PROJECT_PHASES");
	plw.writeln(e);
}

// ------------------------- PC-4272 : Relation for workbox Team members to manage -----------------------

// Function to get team members (users) that needs to be enabled
function san_rdpm_js2_tm_to_enable(f){
	var v_user_groups = ['P_STD','M_VACCINES','O_GBU_VACCINES'];
	if(context.callbooleanformula('USER_IN_GROUP($CURRENT_USER,"OR_FUNCT_ADM_VACCINES")')){
		var o_project_type = plc.project_type.get('Continuum.RDPM.Pasteur');
		with(o_project_type.fromobject()){
			for(var o_project in plc.project where o_project.is_active && o_project.SAN_RDPM_B_RND_VACCINES_PROJECT && o_project.parent.printattribute()==''){
				with(o_project.fromobject()){		
					for(var o_tm in plc.__USER_TABLE_SAN_RDPM_UT_PROJECT_TEAM_MEMBER where o_tm.get('SAN_RDPM_UA_PROJECT_ROLE')!=''){	
						if(o_tm.get('SAN_RDPM_UA_PROJECT_ROLE').get('SAN_RDPM_UA_PR_B_PRJ_READ_PERMISSION')){
							var o_tm_user = o_tm.SAN_RDPM_UA_USER;
							if(o_tm_user instanceof plc.opx2_user){
								var b_tm_to_manage = false;
								//Check user groups of the project team member
								for(var s_user_group in v_user_groups){
									if(o_tm_user.callbooleanformula('NOT USER_IN_GROUP(ID,"'+s_user_group+'")')){b_tm_to_manage=true;break;}
								}
								//Check the other properties
								if(!(o_tm_user.get('OPX2_INTRANET_ACCESS') && o_tm_user.get('READ_ONLY_ACCESS'))){b_tm_to_manage=true;}
								if(b_tm_to_manage){f.call(o_tm_user);}
							}
						}
					}
				}
			}
		}
	}
}

// Function to get team members (users) that needs to disabled
function san_rdpm_js2_tm_to_disable(f){
	var v_user_groups = ['P_STD','M_VACCINES','O_GBU_VACCINES'];
	if(context.callbooleanformula('USER_IN_GROUP($CURRENT_USER,"OR_FUNCT_ADM_VACCINES")')){
		for(var o_user in plc.opx2_user where o_user.callbooleanformula('USER_IN_GROUP(ID,"O_GBU_VACCINES")') && o_user.get('OPX2_INTRANET_ACCESS')){
			if(o_user.GROUPS_LIST.split(',').length==3 && o_user.GROUPS_LIST.split(',').difference(v_user_groups)==false){
				plw.alert(o_user);
			}
		}
	}
}

//dynamic relations between context user and users
function san_rdpm_dr_tm_to_manage(){
	var SAN_RDPM_REL_TM_TO_ENABLE = new ObjectRelation(plc.contextopx2,"SAN_RDPM_REL_TM_TO_ENABLE");
	SAN_RDPM_REL_TM_TO_ENABLE.Mapmethod = san_rdpm_js2_tm_to_enable;
	SAN_RDPM_REL_TM_TO_ENABLE.ConnectedToClass = plc.opx2_user;
	SAN_RDPM_REL_TM_TO_ENABLE.Comment = "Team Member Users to Enable";
	
	var SAN_RDPM_REL_TM_TO_DISABLE = new ObjectRelation(plc.contextopx2,"SAN_RDPM_REL_TM_TO_DISABLE");
	SAN_RDPM_REL_TM_TO_DISABLE.Mapmethod = san_rdpm_js2_tm_to_disable;
	SAN_RDPM_REL_TM_TO_DISABLE.ConnectedToClass = plc.opx2_user;
	SAN_RDPM_REL_TM_TO_DISABLE.Comment = "Team Member Users to Disable";
}

// Declaration of the dynamic relation 
try{
	with(plw.no_locking){
		san_rdpm_dr_tm_to_manage();
	}
}
catch (error e){
	plw.writeToLog("Failed to create SAN_RDPM_REL_TM_TO_ENABLE and SAN_RDPM_REL_TM_TO_DISABLE");
	plw.writeln(e);
}


// ------------------------- PC-4272 : Relation for workbox Newly -----------------------

// Function to get team members (users) that needs to be enabled
function san_rdpm_js2_tm_to_enable(f){
	var v_user_groups = ['P_STD','M_VACCINES','O_GBU_VACCINES'];
	var v_tm_users_enable = new vector();
	if(context.callbooleanformula('USER_IN_GROUP($CURRENT_USER,"OR_FUNCT_ADM_VACCINES")')){
		for(var o_project in plc.project where o_project.is_active && o_project.SAN_RDPM_B_RND_VACCINES_PROJECT && o_project.parent.printattribute()==''){
			with(o_project.fromobject()){		
				for(var o_tm in plc.__USER_TABLE_SAN_RDPM_UT_PROJECT_TEAM_MEMBER where o_tm.get('SAN_RDPM_UA_PROJECT_ROLE')!=''){	
					if(o_tm.get('SAN_RDPM_UA_PROJECT_ROLE').get('SAN_RDPM_UA_PR_B_PRJ_READ_PERMISSION')){
						var o_tm_user = o_tm.SAN_RDPM_UA_USER;
						if(o_tm_user instanceof plc.opx2_user){
							if(o_tm_user.GROUPS_LIST.split(',').length<=3){
								var b_tm_to_manage = false;
								//Check user groups of the project team member
								for(var s_user_group in v_user_groups){
									if(o_tm_user.callbooleanformula('NOT USER_IN_GROUP(ID,"'+s_user_group+'")')){b_tm_to_manage=true;break;}
								}
								//Check the other properties
								if(!(o_tm_user.get('OPX2_INTRANET_ACCESS') && o_tm_user.get('READ_ONLY_ACCESS'))){b_tm_to_manage=true;}
								if(b_tm_to_manage){v_tm_users_enable.push(o_tm_user);}
							}
						}
					}
				}
			}
		}
		v_tm_users_enable = v_tm_users_enable.removeduplicates();
		for(var o_tm_user_enable in v_tm_users_enable){
			f.call(o_tm_user_enable);
		}
	}
}

// Function to get team members (users) that needs to disabled
function san_rdpm_js2_tm_to_disable(f){
	var v_user_groups = ['P_STD','M_VACCINES','O_GBU_VACCINES'];
	var v_active_basic_users = new vector();
	var v_team_members = new vector();
	var v_basic_users_to_disable = new vector();
	if(context.callbooleanformula('USER_IN_GROUP($CURRENT_USER,"OR_FUNCT_ADM_VACCINES")')){
		for(var o_user in plc.opx2_user where o_user.callbooleanformula('USER_IN_GROUP(ID,"O_GBU_VACCINES")') && o_user.get('OPX2_INTRANET_ACCESS')){
			if(o_user.GROUPS_LIST.split(',').length==3 && o_user.GROUPS_LIST.split(',').difference(v_user_groups)==false){
				v_active_basic_users.push(o_user);
			}
		}
		for(var o_project in plc.project where o_project.is_active && o_project.SAN_RDPM_B_RND_VACCINES_PROJECT && o_project.parent.printattribute()==''){
			with(o_project.fromobject()){		
				for(var o_tm in plc.__USER_TABLE_SAN_RDPM_UT_PROJECT_TEAM_MEMBER where o_tm.get('SAN_RDPM_UA_PROJECT_ROLE')!=''){	
					if(o_tm.get('SAN_RDPM_UA_PROJECT_ROLE').get('SAN_RDPM_UA_PR_B_PRJ_READ_PERMISSION')){
						var o_tm_user = o_tm.SAN_RDPM_UA_USER;
						if(o_tm_user instanceof plc.opx2_user){
							v_team_members.push(o_tm_user);
						}
					}
				}
			}
		}
		v_basic_users_to_disable = v_active_basic_users.difference(v_team_members);
		if(v_basic_users_to_disable.length>0){
			for(var o_user in v_basic_users_to_disable){
				f.call(o_user);
			}
		}
	}
}

//dynamic relations between context user and users
function san_rdpm_dr_tm_to_manage(){
	var SAN_RDPM_REL_TM_TO_ENABLE = new ObjectRelation(plc.contextopx2,"SAN_RDPM_REL_TM_TO_ENABLE");
	SAN_RDPM_REL_TM_TO_ENABLE.Mapmethod = san_rdpm_js2_tm_to_enable;
	SAN_RDPM_REL_TM_TO_ENABLE.ConnectedToClass = plc.opx2_user;
	SAN_RDPM_REL_TM_TO_ENABLE.Comment = "Team Member Users to Enable";
	
	var SAN_RDPM_REL_TM_TO_DISABLE = new ObjectRelation(plc.contextopx2,"SAN_RDPM_REL_TM_TO_DISABLE");
	SAN_RDPM_REL_TM_TO_DISABLE.Mapmethod = san_rdpm_js2_tm_to_disable;
	SAN_RDPM_REL_TM_TO_DISABLE.ConnectedToClass = plc.opx2_user;
	SAN_RDPM_REL_TM_TO_DISABLE.Comment = "Team Member Users to Disable";
}

// Declaration of the dynamic relation 
try{
	with(plw.no_locking){
		san_rdpm_dr_tm_to_manage();
	}
}
catch (error e){
	plw.writeToLog("Failed to create SAN_RDPM_REL_TM_TO_ENABLE and SAN_RDPM_REL_TM_TO_DISABLE");
	plw.writeln(e);
} 
//
//  PLWSCRIPT : SAN_RDPM_JS2_EQUATIONS_DYN_ATT
//  2022/03/07 - LFA - Update san_rdpm_is_first_reader / san_rdpm_is_last_reader - PC-5084
//  2021/09/24 - ABO
//  Creation of the Translator cost dynamic attribute for Cost metrics (PC-4462)


namespace _RDPM_EQ_DYN_ATT;
function san_rdpm_act_translator_costs_reader()
{
	var country_list = this.SAN_RDPM_UA_S_LIST_COUNTRIES;
	var act_type = this.WBS_TYPE;
	var tm_costs = 0;
	if (act_type.SAN_RDPM_UA_B_TRANSLATOR)
	{
		//Get the list of countries of the activity
		var country_vec = country_list.parsevector();
		var country_obj = "";
		var key="";
		var hashtable = new hashtable("STRING");
		for (var country in  country_vec)
		{
			country_obj = plc.__USER_TABLE_SAN_RWE_UT_COUNTRY.get(country);
			// Get all Translator Metrics linked to the country
			for (var tr_metric in country_obj.get("USER_ATTRIBUTE_INVERSE_SAN_RDPM_UA_TM_COUNTRY.__USER_TABLE_SAN_RDPM_UT_TRANSLATOR_METRICS") where (act_type.printattribute()=="V_S_COST" || tr_metric.SAN_RDPM_UA_TM_WBS_TYPE==act_type))
			{
				key = tr_metric.SAN_RDPM_UA_TM_WBS_TYPE.printattribute() + "_" + tr_metric.SAN_RDPM_UA_TM_LANGUAGE.printattribute();
				if (hashtable.get(key)!=undefined)
				{
					// If there is already the language for this activity type, check if the new cost value is higher
					if (hashtable.get(key)<tr_metric.SAN_RDPM_UA_TM_TRA_COST)
						hashtable.set(key,tr_metric.SAN_RDPM_UA_TM_TRA_COST);
				}
				else
				{
					// If the value is not in the hashtable --> Add it
					hashtable.set(key,tr_metric.SAN_RDPM_UA_TM_TRA_COST);
				}
			}
			
		}
		// Make the sum of all costs
		for (var key in hashtable)
		{
			tm_costs=tm_costs+hashtable.get(key);
		}
		
		hashtable.delete();
	}
	return tm_costs;
}

var slot = new objectAttribute(plc.work_structure,"SAN_RDPM_DA_N_TRANSLATOR_COST","NUMBER");
		slot.Comment = "Translator cost";
		slot.Reader = san_rdpm_act_translator_costs_reader;
		slot.Locker = function () {return true;};
		slot.hiddenInIntranetServer = false;
		slot.connecting = false;

// Modification - 2021/10/07 - ABO
// Added two dynamic fields "Is First" and "Is Last 

// Modification - 2021/11/24 - ABO
// Taking into account the line identifier, to check Is First & Is Last

function san_rdpm_is_first_reader()
{
    var result = false;
    var activity= this;
    
    if (activity instanceof plc.workstructure)
    {
    	var study_id = activity.SAN_UA_RDPM_ACT_S_STUDY_ID;
    	var study = plc.workstructure.get(study_id);
    	var wbs_type = activity.wbs_type;
    	
    	// We are inside a study
    	if (study instanceof plc.workstructure && wbs_type instanceof plc.wbs_type)
    	{
    		var list = [];
    		list.push(study);
    		list.push(wbs_type);
    		var filter = plw.objectset(list);
    		with(filter.fromobject()){
    			for (var act in plc.workstructure order by ["PS","_PM_DA_S_LINE_ID"])
    			{
    				if (activity._PM_DA_S_LINE_ID==act._PM_DA_S_LINE_ID && activity.PS==act.PS)
    					result=true;
    				break;
    			}			
    		}
    	}
    	// We are out of study --> Manage clinical activities only [PC-5084]
    	else
    	{
    	    
    	    if (activity.SAN_RDPM_UA_B_CLINICAL_ACT)
    	    {
    	        var root_activity = plc.workstructure.get(activity.SAN_RDPM_UA_PRJ_S_ROOT_ACTIVITY);
    	        var list = [];
        		list.push(root_activity);
        		list.push(wbs_type);
        		var filter = plw.objectset(list);
        		with(filter.fromobject()){
        			for (var act in plc.workstructure where act.SAN_UA_RDPM_ACT_S_STUDY_ID=="" order by ["PS","_PM_DA_S_LINE_ID"])
        			{
        				if (activity._PM_DA_S_LINE_ID==act._PM_DA_S_LINE_ID && activity.PS==act.PS)
        					result=true;
        				break;
    			    }			
    		    }
    	    }
    	}
    }
	return result;
}



function san_rdpm_is_last_reader()
{
    var result = false;
    var activity= this;
    
    if (activity instanceof plc.workstructure)
    {
    	var study_id = activity.SAN_UA_RDPM_ACT_S_STUDY_ID;
    	var study = plc.workstructure.get(study_id);
    	var wbs_type = activity.wbs_type;
    	
    	// We are inside a study
    	if (study instanceof plc.workstructure && wbs_type instanceof plc.wbs_type)
    	{
    		var list = [];
    		list.push(study);
    		list.push(wbs_type);
    		var filter = plw.objectset(list);
    		with(filter.fromobject()){
    			for (var act in plc.workstructure order by [["INVERSE","PS"],["INVERSE","_PM_DA_S_LINE_ID"]])
    			{
    				if (activity._PM_DA_S_LINE_ID==act._PM_DA_S_LINE_ID && activity.PS==act.PS)
    					result=true;
    				break;
    			}			
    		}
    	}
    	// We are out of study --> Manage clinical activities only [PC-5084]
    	else
    	{
    	    if (activity.SAN_RDPM_UA_B_CLINICAL_ACT)
    	    {
    	        var root_activity = plc.workstructure.get(activity.SAN_RDPM_UA_PRJ_S_ROOT_ACTIVITY);
    	        var list = [];
        		list.push(root_activity);
        		list.push(wbs_type);
        		var filter = plw.objectset(list);
        		with(filter.fromobject()){
        			for (var act in plc.workstructure where act.SAN_UA_RDPM_ACT_S_STUDY_ID=="" order by [["INVERSE","PS"],["INVERSE","_PM_DA_S_LINE_ID"]])
        			{
        				if (activity._PM_DA_S_LINE_ID==act._PM_DA_S_LINE_ID && activity.PS==act.PS)
        					result=true;
        				break;
    			    }			
    		    }
    	    }
    	}
    }
	return result;
}

var slot = new objectAttribute(plc.workstructure,"SAN_RDPM_DA_B_IS_FIRST","BOOLEAN");
slot.Comment = "Is First? (Dynamic attribute)";
slot.Reader = san_rdpm_is_first_reader;
slot.Locker = true;
slot.hiddenInIntranetServer = true;
slot.connecting = false;

var slot = new objectAttribute(plc.workstructure,"SAN_RDPM_DA_B_IS_LAST","BOOLEAN");
slot.Comment = "Is Last? (Dynamic attribute)";
slot.Reader = san_rdpm_is_last_reader;
slot.Locker = true;
slot.hiddenInIntranetServer = true;
slot.connecting = false;


// Modification - WBR - 07/10/2021 : PC-1245 - Add new dynamic attribute calculating the "Main Vaccin Region"

// *********************  Study Main Vaccine Region  *********************
// function used in CSM and LCSM metrics
// Main vaccin region is the one with the most countries.If several regions have the same # of counties, then the main region is the one with the most sites
function san_main_vacc_region_slot_reader() {
    var n_max_nbe_countries = 0;
    var n_max_nbe_sites     = 0;
    var s_main_region       = "";
    
    try {
        if(this.SAN_UA_RDPM_ACT_S_STUDY_ID != "") {
            var s_study_id = this.SAN_UA_RDPM_ACT_S_STUDY_ID;
            var o_study_act = plc.workstructure.get(s_study_id);
            
            if(o_study_act instanceof plc.workstructure) {
                for(var s_vacc_region in o_study_act.SAN_RDPM_UA_S_LIST_REGIONS_VACC.parsevector()){
                    var n_nbe_countries = 0;
                    var n_nbe_sites     = 0;
                    for(var s_wbst_id in context.SAN_RDPM_CS_AT_STUDY.parsevector()){
                        var o_wbs_type = plc.wbs_type.get(s_wbst_id);
                        if(o_wbs_type instanceof plw.wbs_type) {
                            for(var o_act_country in o_wbs_type.get("r.WBS_TYPE.WORK-STRUCTURE") where 
                                    o_act_country.SAN_UA_RDPM_PV_REG_VACC instanceof plc.__USER_TABLE_SAN_RDPM_UT_VACC_REG &&
                                    o_act_country.SAN_UA_RDPM_PV_REG_VACC.internal == false &&
                                    o_act_country.SAN_UA_RDPM_PV_REG_VACC.name == s_vacc_region &&
                                    o_act_country.SAN_UA_RDPM_ACT_S_STUDY_ID == o_study_act.printattribute()) {
                                n_nbe_countries++;
                                n_nbe_sites +=  o_act_country.callNumberFormula("SAN_RDPM_CF_SITES_~a".format(s_vacc_region));
                            }
                        }
                    }
                    
                    if((n_nbe_countries > n_max_nbe_countries) || (n_nbe_countries == n_max_nbe_countries && n_nbe_sites > n_max_nbe_sites)) {
                        s_main_region = s_vacc_region;
                        n_max_nbe_countries = n_nbe_countries;
                        n_max_nbe_sites   = n_nbe_sites;
                    }
                }
            }
        }
    }
    catch(error e) {
        plw.writetolog("Unexpected error in dynamic reader: " + e);
    }
    
    return s_main_region;
}


function san_pjs_create_dynamic_attribute_study_main_vaccine_region(){
    try{
        var slot = new objectAttribute(plc.workstructure,"SAN_RDPM_DA_ACT_STUDY_MAIN_VACC_REG","String");
        slot.Comment = "Study Main Vaccine Region";
        slot.Reader = san_main_vacc_region_slot_reader;
        slot.Modifier = undefined;
        slot.hiddenInIntranetServer = true;
slot.connecting = false;
        slot.project_types = "Continuum.RDPM.Pasteur";
    }
    catch(error e){
        plw.writetolog("Could not create slot due to error: " + e);
    }
}

try{
    with(plw.no_locking){
        san_pjs_create_dynamic_attribute_study_main_vaccine_region();
    }
}
catch (error e){
    plw.writetolog("Failed to create SAN_RDPM_DA_ACT_STUDY_MAIN_VACC_REG");
    plw.writetolog(e);
}

// end of SAN_RDPM_DA_ACT_STUDY_MAIN_VACC_REG definition 
// 
//  PLWSCRIPT : SAN_RDPM_JS2_EQUATION_UTILS
// 
//  AUTHOR  : David
//
//  v1.5 - 2022/03/15 - David
//  Modify san_common_PeApplyEquation to display a message if the selection is not valid for equation and san_rdpm_js_apply_equation_on_list to remove old UA SAN_RDPM_UA_B_FILT_EQU_BATCH (PC-5341)
//
//  v1.4 - 2021/12/02 - David
//  Modify san_common_PeApplyEquation to force cost field computation (PC-5096)
//
//  v1.3 - 2021/07/08 - David 
//  Add san_rdpm_js_init_cost_field to force computation of cost field during batch and modify san_rdpm_js_apply_equation_on_list to use it (PC-4234)
//
//  v1.2 - 2021/06/10 - David
//  Add san_rdpm_js_apply_equation_on_list to apply equation on a list of project (PC-3947), san_rdpm_js_get_ph_pe_to_vector to get the ph and pe of an activity (PC-4032)
// 
//  v1.1 - 2021/05/31 - David
//  Add functions san_common_PeApplyEquation and san_PeApplyEquation to add a filter on activities when running the equations on projects. Modify san_PeApplyEquation_LoadArray to use the same filter (PC-3957)
//
//  v1.0 - 2021/05/27 - David
//  Add function san_PeApplyEquation_LoadArray to run the equation on activity when selecting a line on Cost and load reports (PC-3026)
//
//***************************************************************************/
namespace _san_equa;

// get the ph and pe of an activity
method san_rdpm_js_get_ph_pe_to_vector on plc.workstructure()
{
	var vVect=new vector();
	var plc.workstructure vAct=this;
	for (var plc.taskalloc vAff in vAct.get(#ALLOCATIONS#))
	{
		vVect.push(vAff);
	}
	for (var plc.expenditure vExp in vAct.get(#EXPENDITURES#))
	{
		vVect.push(vExp);
	}
	return vVect;
}

// common part on apply equations
function san_common_PeApplyEquation(vType){
  var CurrentProject = plw.CurrentPageObject();
  var SelectionVector = new vector();
  var selection = new symbol("SELECTION-ATOM","TOOL-BAR");
  var i=0;
  var vNbSelect=0;
  for(var item in selection){
      vNbSelect++;
    // filter added
    if (vType!=undefined && vType=="costandload")
    {
	    // go to activity
	    var vAct=item.activity;
	    if (vAct!=undefined && vAct instanceof plc.workstructure && vAct.SAN_RDPM_UF_B_EQUA_FILTER==true)
		{
		    // recompute CF
			if (i==0) vAct.san_rdpm_js_init_cost_field();
			i++;
			selectionvector.push(vAct);
			// apply equations on planned hours and expenditures
			var vector vAllocExp=vAct.san_rdpm_js_get_ph_pe_to_vector();
			if (vAllocExp.length>0) selectionvector=selectionvector+vAllocExp;
		}
    }
    else
    {
		if (item instanceof plc.workstructure && item.SAN_RDPM_UF_B_EQUA_FILTER==true)
		{
		    if (i==0) item.san_rdpm_js_init_cost_field();
			i++;
			selectionvector.push(item);
			// apply equations on planned hours and expenditures
			var vector vAllocExp=item.san_rdpm_js_get_ph_pe_to_vector();
			if (vAllocExp.length>0) selectionvector=selectionvector+vAllocExp;
		}
    }
  }
  // selected activities contains data on which equations run 
  if(selectionvector.length>0){
    selectionvector.Applyequations(undefined);
  }
  // selected activities does not contain any data on which equations should run -> display message PC-5341
  else if(vNbSelect>0){
      plw.alert("Equations cannot be applied as the selected activity is either finished or not associated to any equation. Please select other activities.");
  }
  // nothing selected, ask to run on whole project
  else
  {
    if(plw.Question(plw.write_text_key("PE.apply_equation_on_everything"))){
      with(CurrentProject.fromobject()){
        // filter added
        i=0;
        for(var Activity in plc.workstructure where Activity.SAN_RDPM_UF_B_EQUA_FILTER==true)
		 {
		    // recompute CF
			if (i==0) Activity.san_rdpm_js_init_cost_field();
			i++;
			selectionvector.Push(Activity);
			// apply equations on planned hours and expenditures
			var vector vAllocExp=Activity.san_rdpm_js_get_ph_pe_to_vector();
			if (vAllocExp.length>0) selectionvector=selectionvector+vAllocExp;
        }
        selectionvector.Applyequations(undefined);
      }
    }
  }
  return true;
}

// used on button Apply equation
function san_PeApplyEquation()
{
    return san_common_PeApplyEquation("");
}

// used on button Apply equation in Cost and Load
function san_PeApplyEquation_LoadArray()
{
    return san_common_PeApplyEquation("costandload");
}

// method to compute cost fields
method san_rdpm_js_init_cost_field on plc.workstructure()
{
	var vAct=this;
	if (vAct instanceof plc.workstructure)
	{
		// list of cost fields to initialise
		var string vListCC=context.SAN_RDPM_CS_COST_FIELDS_BATCH;
		for (var vCCid in vListCC.parsevector())
		{
			// check if the cost field exists
			var vCC=plc._L1_PT_COST_FIELDS.get(vCCid);
			if (vCC!=undefined)
			{
			    plw.writetolog(" - CF : "+vCCid);
				// just initialise a variable to compute the cost field
				var init_value=vAct.get(vCCid)+1;
			}
		}
	}
}

// apply equation in a list of projects (call in the multiple intranet batch)
function san_rdpm_js_apply_equation_on_list(vVect)
{
	context.SAN_RDPM_UA_OC_B_EQUATIONS_RUNNING=true;
	plw.writetolog("Starting ApplyEquations on projects");
	var SelectionVector=new vector();
	for(var o_projname in vVect)
	{
		var o_proj=plc.ordo_project.get(o_projname);
		if (o_proj!=undefined)
		{
			SelectionVector.clear();
			SelectionVector=new vector();
			plw.writetolog("Starting : "+ o_proj.NAME);
			
			// PC-4234 : initialize cost fields : just need to compute on 1 activity so taking level 1 or 2 (indication)
			plw.writetolog(" -- Computing CF");
			for(var plc.workstructure vCompCC in o_proj.ACTIVITIES where vCompCC.level<=2)
			{
				vCompCC.san_rdpm_js_init_cost_field();
				plw.writetolog(" -- End of Computing CF");
				break;
			}

			// browse all project's activities and select only not leaf activities
			// PC-2851 : force study also
			for(var plc.workstructure vAct in o_proj.ACTIVITIES where vAct.SAN_RDPM_UF_B_EQUA_FILTER==true)
			{
				selectionvector.push(vAct);
				// apply equations on planned hours and expenditures
				var vector vAllocExp=vAct.san_rdpm_js_get_ph_pe_to_vector();
				if (vAllocExp.length>0) selectionvector=selectionvector+vAllocExp;
			}
			SelectionVector.Applyequations(undefined);
		}
		else plw.writetolog("Not possible to find project : "+ o_projname);
	}

	//Clear context.SAN_RDPM_UA_OC_B_EQUATIONS_RUNNING after equations application
	context.SAN_RDPM_UA_OC_B_EQUATIONS_RUNNING=false;
} 
// 
//  PLWSCRIPT : SAN_RDPM_JS2_HYPERLINK
// 
//  AUTHOR  : S. AKAAYOUS
//
//  
//  Creation  2020/10/13 SAK
//  Script used for PC-208, add the function resource link to timecard input
//  
//  2021/02/05 EP update to E7 compliancy
//***************************************************************************/

namespace _san_rdpm_hyperlink;
/**
	Function called in the Hyperlinks : 142732436341-142732436941
*/
//
function san_rdpm_link_to_timesheet(res) {
	if(res instanceof plc.Resource) {
		res.timecard_goToFirstNotHandled(false);
		var d_date=new date();
		d_date.timecard_setDisplayDate();
	}
} 
namespace _san_lib;
// Modification : 11/05/2021 : SAK - PC 3539
// retrieve standard code and define san function PC-2836
function san_js2_get_library_selection_obj() {
	if (context.selected_activity_list instanceOf Vector && context.selected_activity_list.length>0) {
		return context.selected_activity_list[0];
	}
	return false;
}

function san_js2_insert_library() {
	plw.writetolog("Start san_js2_insert_library..;");
	plw.writetolog("--- START OF LIBRARY INSERTION ---");
	var v_selection = plw.selection_vector();
	plw.writetolog("*** Selected lib (variable v_selection [vector]): "+v_selection);
	var lib_act_select=undefined;
	if (v_selection.length==1) {
		lib_act_select=v_selection[0];
	}
	
	var b_plSelected = false;
	var b_indication_selected=false;
	var b_no_selection_done=false;
	
	// E7 compliance replace get_library_selection_obj by san_js2_get_library_selection_obj
	//var o_actSelection = plw.get_library_selection_obj();
	var o_actSelection = san_js2_get_library_selection_obj();
	plw.writetolog("*** Target act (variable o_actSelection [activity object]): "+o_actSelection);
	
	if (v_selection.length==0) {
		plw.alert("Please make a selection of activities to insert.");
		b_no_selection_done=true;
	}
	
	// PC-5291
	if (o_actSelection InstanceOf plc.work_structure) {
		
		// PC-2802: allow indication insertion for versions, do not allow inside a project/vserion which is already an indication
		var TargetPrjVersionNb=o_actSelection.PROJECT.VERSION_NUMBER;
		var TargetPrjIsIndication=o_actSelection.PROJECT.SAN_RDPM_UA_PRJ_RND_IND;
		
		context.SAN_UA_RDPM_ACT_S_BB_ID = o_actSelection.SAN_UA_RDPM_ACT_S_BUILD_BLOCK_ID;
		
		// PC-2978 : Able to insert Indication in Project
		// Case of no selection in the lib, the v_selection is always on the target activity
		if (lib_act_select InstanceOf plc.work_structure && lib_act_select.PROJECT._INF_NF_B_IS_TEMPLATE==false) {
			plw.alert("Please make a selection of activities to insert.");
			b_no_selection_done=true;
		}
		
		// PC-2666/PC-2802: indication insertion is forbidden via library insertion
		// PC-2802: allow indication insertion for versions
		for (var act in v_selection) {
			if (act.SAN_RDPM_UA_B_IS_AN_INDICATION && (TargetPrjVersionNb==0 || TargetPrjIsIndication)) {
				if (TargetPrjVersionNb==0) plw.alert("You cannot insert indication with library insertion. Please modify your selection.");
				if (TargetPrjIsIndication) plw.alert("You cannot insert indication into an indication version. Please modify your selection.");
				b_indication_selected=true;
			}
		}
		
		if (b_indication_selected==false && b_no_selection_done==false) {
			//pc-2416 HRA old condition context.CallBooleanFormula("NOT USER_IN_GROUP($CURRENT_USER,\"P_ADM,R_PM\")")
			if (context.SAN_RDPM_UA_UG_PL_ACCESS==false && o_actSelection.project._INF_NF_B_IS_TEMPLATE==false){
				if (v_selection.length == 0){
					for (var o_act in plc.work_structure where o_act.CallBooleanFormula("LIBRARY_FILTER AND _WT_NF_B_GENERIC_LIBRARY_FILTER")) {
						if (o_act.get("SAN_RDPM_UA_ACT_B_PRJL")) {
							b_plSelected = true;
							break;
						}
					}
				}
				else {
					for (var o_actSelected in v_selection where o_actSelected.CallBooleanFormula("LIBRARY_FILTER AND _WT_NF_B_GENERIC_LIBRARY_FILTER") && b_plSelected == false) {
						with(o_actSelected.fromobject()){
							for (var o_act in plc.work_structure where o_act.get("SAN_RDPM_UA_ACT_B_PRJL")) {
								b_plSelected = true;
								break;
							}
						}
					}
				}
			}
			
			
			var answer = undefined;
			
			if (b_plSelected) {
				answer = plw.question("There is PL activities in your selection. Do you want to proceed without inserting the PL activities?");
				if (answer==true) {
					// E7 compliance replace insertandcopylinkfromlibrary by library_InsertSelectedActivitiesAndLinks
					context.library_InsertSelectedActivitiesAndLinks();
				}
			}
			else {
				// E7 compliance replace insertandcopylinkfromlibrary by library_InsertSelectedActivitiesAndLinks
				context.library_InsertSelectedActivitiesAndLinks();
			}
			
			plw.writetolog("... Library inserted. Start managing synchonrizations...");
			
			with(o_actSelection.fromobject()){
				for (var o_actSyncTarget in plc.work_structure where o_actSyncTarget._PM_AA_N_LIBRARY_ACT_ONB!=0){
					var o_actTemplate = plc.work_structure.get(o_actSyncTarget._PM_AA_N_LIBRARY_ACT_ONB);
					var v_actSyncSource=undefined;
					if (o_actTemplate!=undefined) {
						v_actSyncSource= (o_actTemplate.get("SYNCHRONIZED_ACTIVITIES") instanceof String) ? o_actTemplate.get("SYNCHRONIZED_ACTIVITIES").split(",") : o_actTemplate.get("SYNCHRONIZED_ACTIVITIES");
					}
					
					for (var s_actSyncSource in v_actSyncSource){
						var o_actSyncSource = (s_actSyncSource instanceof String) ? plc.work_structure.get(s_actSyncSource) : s_actSyncSource;
						
						if(o_actSyncSource.PROJECT.SAN_RDPM_UA_PRJ_S_ROOT_PROJECT==o_actSyncTarget.PROJECT.SAN_RDPM_UA_PRJ_S_ROOT_PROJECT){
							o_actSyncSource.SYNCHRONIZE_WITH = o_actSyncTarget.printattribute();
							for (var o_syncRule in plc.synchronization_rule order by [['INVERSE','PRIORITY']]){
								if (o_actSyncSource.callbooleanformula(o_syncRule.FILTER)) {
									o_actSyncSource.LAST_SYNC_RULE=o_syncRule.printattribute();
									break;
								}
							}
						}
					}
				}
				
				for (var o_actSyncSource in plc.work_structure where o_actSyncSource.SYNCHRONIZE_WITH instanceof plc.work_structure){
					if (o_actSyncSource.SYNCHRONIZE_WITH.PROJECT.SAN_RDPM_UA_PRJ_S_ROOT_PROJECT!=o_actSyncSource.PROJECT.SAN_RDPM_UA_PRJ_S_ROOT_PROJECT && o_actSyncSource.SYNCHRONIZE_WITH.PROJECT._INF_NF_B_IS_TEMPLATE){
						// PC-2558 - LFA - Recreate external links inside the building block
						if (o_actSyncSource.WBS_TYPE.SAN_UA_RDPM_B_AUTO_SYNC_LINK_BB)
						{
							var act_target="";
							var nb_act=0;
							var sync_act_type = o_actSyncSource.SYNCHRONIZE_WITH.WBS_TYPE;
							var building_block = plc.workstructure.get(o_actSyncSource.SAN_UA_RDPM_ACT_S_BUILD_BLOCK_ID);
							if (building_block instanceof plc.workstructure && sync_act_type instanceof plc.WBS_TYPE)
							{
								// Search of activities from Building Block and sync activity type
								var result="";
								
								var list = [];
								list.push(sync_act_type);
								list.push(building_block);
								var filter = plw.objectset(list);
								
								with(filter.fromobject()){
									for (var vAct_bb in plc.workstructure where vAct_bb!=o_actSyncSource){
										act_target=vAct_bb;
										nb_act++;
									}
								}
							}	
							// We did not find or find more than one activity with the matching activity type
							if (nb_act>1 || nb_act==0)
							{
								plw.alert("The \"Synchronize with\" activity for \""+o_actSyncSource.NAME+"\" was not found. Field emptied!");
								o_actSyncSource.SYNCHRONIZE_WITH = "";
							}
							else
							{
								o_actSyncSource.SYNCHRONIZE_WITH=act_target;
								for (var o_syncRule in plc.SYNCHRONIZATION_RULE order by [["INVERSE","PRIORITY"]]){
									if (o_actSyncSource.callbooleanformula(o_syncRule.FILTER)) {o_actSyncSource.LAST_SYNC_RULE=o_syncRule.printattribute();break;}
								}
							}
						}
						else
						{					
							plw.alert("The \"Synchronize with\" activity for \""+o_actSyncSource.NAME+"\" was not found. Field emptied!");
							o_actSyncSource.SYNCHRONIZE_WITH = "";
						}
					}
				}
			}
			
			plw.writetolog("... Synchonrizations managed!");
			plw.writetolog("");
			plw.writetolog("--- END OF LIBRARY INSERTION ---");
			return true;
			//this.editor.delete();
		}
		}
	else {
		plw.alert("Wrong selection, please try again.");
		plw.writetolog("o_actSelection or lib_act_select is not an activity!!!");
	}
}	 
//  AUTHOR  : ABO
//  Date : 05/01/22
//	Script to use in the batch SAN_RDPM_BA_MANU_EXPORT_ACTU_WKL to export manually the actual workload on a selected date

namespace _manuwklexport;

function SanExportFromPexQuery (string argTarget, string argFormat, string argPortfolio, string argQuery, date startDate, date endDate){
    var plc.impextarget Target = plc.impextarget.get(argTarget);
    var plc._FF_PT_FAVOR_FILTERS Portfolio = plc._FF_PT_FAVOR_FILTERS.get(argPortfolio);
    var plc._PEX_PT_QUERY Query = plc._PEX_PT_QUERY.get(argQuery);
	
    if(Target instanceOf plc.ImpexTarget && Portfolio instanceOf plc._FF_PT_FAVOR_FILTERS && Query instanceOf plc._PEX_PT_QUERY) {
        var plc.impexformat Format = plc.impexformat.get(argFormat);
        if(Target._IMPEX_AA_B_TRUNCATE)
			{
			plw._Impex_TruncateTable(Target,Format);
		}
		plw._impex_exportPEXQueryCostTable(Portfolio, Query, Format, Target, startDate, endDate);
        var filename = Target.CallStringFormula("EVALUATE_STRING(Filename)");
        plw.writeln(filename);
		plw.writeln("Exporting: "+argFormat+"_"+argTarget);
	}
}
var start_date = Context.CallDateFormula("period_start(OC.SAN_RDPM_CS_NOMINATIVE_ACTUAL_WKL_EXPT_DAY_MANU,\"MONTH\",0)");
var end_date = Context.CallDateFormula("period_start(OC.SAN_RDPM_CS_NOMINATIVE_ACTUAL_WKL_EXPT_DAY_MANU,\"MONTH\",1)");
SanExportFromPexQuery ("SAN_RDPM_IMPEX_TARGET_DATAHUB_NOMINATIVE_ACTUAL_WKL_MANUAL:CSV file format", "IMPEX_NOMINATIVE_RES_ACTUAL_WKL:DATAHUBNOMINATIVEACTUALWORKLOAD","ALL - DO NOT DELETE - USED FOR BO EXPORTS", "SAN_RDPM_QY_BO_NOMI_RES_ACTUAL_WKL", start_date, end_date); 
// 
// PLWSCRIPT : SAN_RDPM_JS2_PRINT_MONTHLY_REPORT
// call on batch SAN_RDPM_BA_PRINT_MONTHLY_REPORT
//
// v1.1 2022-03-11 David
// Manage zip file with doc field of impex event because not possible in R&D Portfolio server to get a file from batch server (PC-1993)
//
// v1.0 2022-02-08 David
// Creation (PC-1993)
//
//***************************************************************************/
namespace _san_print;

// get the latest vaccines monthly baseline from the baseline schedule table
function san_ojs_get_last_date_vaccines_monthly_baseline()
{
	var vDate=undefined;
	var vToday=new date();
	// latest before the date of the day
	for (var vMB in plc.__USER_TABLE_SAN_RDPM_UT_VACCINES_BASELINE_SCHEDULE where vMB.SAN_RDPM_UA_D_VAC_BASELINE_DATE instanceof date && vMB.SAN_RDPM_UA_D_VAC_BASELINE_DATE!="" && vMB.SAN_RDPM_UA_D_VAC_BASELINE_DATE!=-1 && vMB.SAN_RDPM_UA_D_VAC_BASELINE_DATE<vToday order by [['INVERSE','SAN_RDPM_UA_D_VAC_BASELINE_DATE']])
	{
		vDate=vMB.SAN_RDPM_UA_D_VAC_BASELINE_DATE;
	}
	return vDate;
}

// -------------------------
// Main
// -------------------------
plw.writetolog(" -- PRINT MR -- START --");
// id of the portfolio used for the export
var string vIdPort="NV_PORTFOLIO_SELECTION_PMR";
// id of the presentation used for the export
var string vIdPrez="Monthtly Report View";
//  id of the presentation used for franchise page
var string vRepFraName="Monthly Report - Franchise";
// destination directory for zip file
var string vExpDirectory=Context.SAN_UF_S_MAIN_PATH+Context.SAN_CS_MONTH_REP_EXPORT_PATH;
// destination directory for pdf
var string vExpDirPdf=vExpDirectory+"pdf_mr/";

var vPrez=plc.presentation.get(vIdPrez);
var vPrezFra=plc.presentation.get(vRepFraName);
var vPortfolio=plc._FF_PT_FAVOR_FILTERS.get(vIdPort);
var vToday=new date();
var vPathDirZip=new pathname(vExpDirectory);
var vPathDirPdf=new pathname(vExpDirPdf);
var string vZipileName="";
if (vPathDirZip.probefile()!=false)
{
	if (vPrez!=undefined)
	{
		if (vPortfolio!=undefined)
		{
			// Check if the pdf directory exists, if not create it 
			if (vPathDirPdf.probefile()==false) vExpDirPdf.mkdir();
			
			// Remove existing pdf files
			var number vNbPdfFile=0;
			for (var vFile in vPathDirPdf)
			{
				plw.writetolog(" -- PRINT MR ------ Delete previous pdf file : "+vFile.tostring());
				vFile.deletefile();
				vNbPdfFile++;
			}
			if (vNbPdfFile>0) plw.writetolog(" -- PRINT MR -- "+vNbPdfFile.tostring()+" PDF files deleted in temporary pdf_mr directory");
			
			// force A3 format
			var vA3Format=plc.paperformat.get("A3");
			if (vA3Format!=undefined) vPrez.paper_format=vA3Format;
			
			var vDateMB=san_ojs_get_last_date_vaccines_monthly_baseline();
			var string vDateMBstr=(vDateMB!=undefined) ? "PRINT_DATE".callmacro(vDateMB,"YYYY-MM") : "PRINT_DATE".callmacro(vToday,"YYYY-MM");
			vDateMBstr=vDateMBstr.replaceregexp("-","");
			
			var vListProj=new vector();
			for(var o_Proj in vPortfolio.get("PROJECTS") where o_Proj.LEVEL==1) vListProj.push(o_Proj);
			plw.writetolog(" -- PRINT MR -- # of projects to print : "+vListProj.length);
			
			var number i=0;
			var vHashFr=new hashtable();
			for (var vProj in vListProj)
			{
				i++;
				plw.writetolog(" -- PRINT MR -- Start printing project #"+i.tostring()+" - "+vProj.name);
				// name of the exported file
				var vFranch=vProj.SAN_RDPM_UA_FRANCHISE;
				var string vFranchName="";
				var string vFrOrStr="";
				if (vFranch!=undefined && vFranch!="" && vFranch.internal==false)
				{
					vFranchName=vFranch.name;
					if (vHashFr.get(vFranch)!=undefined)
						vFrOrStr=vHashFr.get(vFranch);
					else
					{
						plw.writetolog(" -- PRINT MR ---- Start printing franchise "+vFranchName);
						var string vFOStr="PRINT_NUMBER".callmacro(100+vFranch.SAN_RDPM_UA_N_ORDER,"####");
						vFrOrStr=vFOStr.substring(1,3);
						// store the order in a hashtable to get easily and have the list of franchises to print
						vHashFr.set(vFranch,vFrOrStr);
						// print once the franchise
						if (vPrezFra!=undefined)
						{
							if (vA3Format!=undefined) vPrezFra.paper_format=vA3Format;
							// file name
							var string vFileNameFra=vFrOrStr+"_"+vFranchName+".pdf";
							var vPDFpathFra=new pathname(vExpDirPdf+vFileNameFra);
							if (vPDFpathFra.probefile()!=false) vPDFpathFra.deletefile();
							var vPDFfileFra = vPrezFra.printpresentation(vProj,"PDF-PRINTER");
							vPDFfileFra.copyfile(vPDFpathFra);
							plw.writetolog(" -- PRINT MR ---- End printing franchise "+vFranchName+" : "+vPDFpathFra.tostring());
						}
						else plw.writetolog(" -- PRINT MR -- Error : The presentation '"+vRepFraName+"' does not exist!");
					}
				}
				var vPCode=vProj.SAN_UA_RWE_PROJECT_CODE_PRIME;
				var string vPCodeName=(vPCode!=undefined && vPCode!="" && vPCode.internal==false) ? vPCode.name : "";
				var string vFileName=vFrOrStr+"_"+vFranchName+"_"+vProj.name+"_"+vPCodeName+"_"+vDateMBstr+".pdf";
				var vPDFpath =new pathname(vExpDirPdf+vFileName);
				
				var vPDFfile = vPrez.printpresentation(vProj,"PDF-PRINTER");
				if (vPDFpath.probefile()!=false) vPDFpath.deletefile();
				vPDFfile.copyfile(vPDFpath);
				plw.writetolog(" -- PRINT MR ---- End printing project #"+i.tostring()+" - "+vProj.name +" : "+vPDFpath.tostring());
			}
			vHashFr.clear();
			
			// zip files
			plw.writetolog(" -- PRINT MR -- Start zip generation");
			vZipileName="MONTHLY_REPORT_"+vIdPort+"_"+vDateMBstr+".zip";
			var vZipFileResult=new pathname(vExpDirectory+vZipileName);
			if (vZipFileResult.probefile()!=false) vZipFileResult.deletefile();
			var vZip = new zipfile(vZipFileResult.tostring());
			vZip.appenddir(vExpDirPdf);
			// update the name of the latest zip file
			context.SAN_CS_MONTH_REP_LAST_EXPORT_NAME=vZipileName;
			// Delete and create event to store the zip file
			var vONBEvent=context.SAN_CS_MONTH_REP_LAST_EXPORT_ONB_EVENT;
			if (vONBEvent instanceof number && vONBEvent!=0)
			{
				var vEvent=plc.IMPEX_EVENT.get(vONBEvent);
				if (vEvent!=undefined)
				{
					plw.writetolog(" -- PRINT MR -- Delete existing event "+vEvent.printattribute());
					with(plw.no_locking){ vEvent.delete(); }
				}
			}
			plw.writetolog(" -- PRINT MR -- Create new event to store zip file");
			with(plw.no_applet_refresh) {
				var vCurDate=new date();
				var vObjEvent=new plc.IMPEX_EVENT(DIRECTION: "Export",USER: "INTRANET",DATE: vCurDate);
				vObjEvent._IMPEX_DF_UPLOADED_FILE="local://" + vZipFileResult.Namestring;
				vObjEvent.positiveonb();
				plw.writetolog(" -- PRINT MR ---- New event : "+vObjEvent.printattribute()+" ("+"PRINT_NUMBER".callmacro(vObjEvent.ONB,"####")+")");
				context.SAN_CS_MONTH_REP_LAST_EXPORT_ONB_EVENT=vObjEvent.ONB;
			}
			plw.writetolog(" -- PRINT MR ---- End zip generation");
		}
		else plw.writetolog(" -- PRINT MR -- Error : The portfolio '"+vIdPort+"' does not exist!");
	}
	else plw.writetolog(" -- PRINT MR -- Error : The presentation '"+vIdPrez+"' does not exist!");
}
else plw.writetolog(" -- PRINT MR -- Error : The directory '"+vExpDirectory+"' does not exist in the server!");
plw.writetolog(" -- PRINT MR -- END --");
 
// 
//  PLWSCRIPT : SAN_RDPM_JS2_REMOVE_OLD_BRANCH
//  call on intranet batch SAN_RDPM_BA_REMOVE_OLD_BRANCH
//
//  Revision 0.1 2021/10/28 wbenredjeb 
//  Creation to automate the deletion of the OLD_BRANCH (https://snfimce.atlassian.net/browse/PC-4836)
//
//***************************************************************************/
namespace _san_rdpm_remove_old_branch;

/**
 * methode permettant de recuperer l'unique toplevel-ws d'un projet. Elle se base sur la fonction processes _UtilsGetTopLevel
 * et retourne un élément uniquement si le vecteur retournée par cette denière contient un seul élément
 *
 * ATTENTION : Valeur récupérée par copie et non par référence
 */
method san_rdpm_js_get_unique_top_level on plc.ordo_project(){
    var v_root = plw._UtilsGetTopLevel(this);
    if(v_root instanceof vector && v_root.length == 1) return v_root[0];
    else return false;
}

/**
 * method implémantant la partie custom de la suppression d'une activité
 * pour ce faire, 
 *   - on supprime les éventuels "WBS Form Data" ainsi que les "GCI Information"
 *   - on vide le champ "SAN_RDPM_UA_LINKED_TO_KMS" en cas de besoin
 */
method san_rdpm_js_delete_custom_objects on plc.workstructure() {
    // construction de la nom de la fonction pour les log
    var string _sLogName = "san_rdpm_js_delete_custom_objects";

    // debug
    plw.writetolog("[DEBUG] - [~a] - Entrée dans la fonction ==> o_act = ~s".format(_sLogName, this.printattribute()));
    
    // init des variables 
    var plc.workstructure o_act = this;
    var n_return_code = 0;
    var n_deleted_wbsform  = 0;
    var n_deleted_gci_info = 0;
    var n_updated_link_kms = 0;
    
    try {
        for(var o_wbs_form_data in o_act.get("USER_ATTRIBUTE_INVERSE_SAN_UA_WBS_FORM_DATA_ACTIVITY.__USER_TABLE_SAN_RDPM_UT_WBS_FORM_DATA")){
            try {
                o_wbs_form_data.callmacro("REMOVE");
                n_deleted_wbsform++;
            }
            catch(error e){
                plw.writetolog("[ERROR] - [~a] - unexpected error catched when deleting WBS Form data ~a ... ==> ~a".format(_sLogName, o_wbs_form_data.printattribute(), e));
                e.printStacktrace();
                n_return_code++;
            }
        }
        for(var o_gci_assay_inf in o_act.get("USER_ATTRIBUTE_INVERSE_SAN_RDPM_UA_GCI_ASSAY_ACTIVITY.__USER_TABLE_SAN_RDPM_UT_CGI_ASSAY_ACTIVITY")){
            try {
                o_gci_assay_inf.callmacro("REMOVE");
                n_deleted_gci_info++;
            }
            catch(error e){
                plw.writetolog("[ERROR] - [~a] - unexpected error catched when deleting GCI Information ~a ... ==> ~a".format(_sLogName, o_wbs_form_data.OBJECT_NUMBER, e));
                e.printStacktrace();
                n_return_code++;
            }
        }
        
        for(var o_linked_to_kms in o_act.get("USER_ATTRIBUTE_INVERSE_SAN_RDPM_UA_LINKED_TO_KMS.WORK-STRUCTURE")){
            try {
                o_linked_to_kms.SAN_RDPM_UA_LINKED_TO_KMS = undefined;
                n_updated_link_kms++;
            }
            catch(error e){
                plw.writetolog("[ERROR] - [~a] - unexpected error catched when updating Linked KMS ~a ... ==> ~a".format(_sLogName, o_linked_to_kms.printattribute(), e));
                e.printStacktrace();
                n_return_code++;
            }
        }
    }
    catch(error e) {
        plw.writetolog("[ERROR] - [~a] - unexpected error catched ... ==> ~a".format(_sLogName, e));
        e.printStacktrace();
        n_return_code = -1;
    }
    
    plw.writetolog("[INFO] - [~a] - n_deleted_wbsform = ~a, n_deleted_gci_info = ~a, n_updated_link_kms = ~a".format(_sLogName, n_deleted_wbsform, n_deleted_gci_info, n_updated_link_kms));
    return n_return_code;
}


plw.writetolog(" --------------- Start macro on dataset ---------");
var n_nbe_updated_projects = 0;
var n_nbe_complete_errors  = 0;
var n_nbe_partial_errors   = 0;

// in a macro on dataset the available project are only the one set on the batch properties
// we get only the parent project for running the OLD_BRANCH (but indication are also load)
for (var o_prj in plc.ordo_project where o_prj.LOADED && o_prj.VERSION_NUMBER == 0 && o_prj.SAN_RDPM_B_RND_PHARMA_PROJECT && o_prj.PARENT.printattribute()=="" && o_prj._INF_NF_S_PRJ_STATE_INTERNAL  == "ACTIVE" && o_prj._INF_NF_B_IS_TEMPLATE != true && o_prj._WZD_AA_B_PERMANENT != true){ 

    n_nbe_updated_projects++;
    
    try {
        plw.writetolog("[DEBUG] - o_prj = ~a".format(o_prj.printattribute()));
        
        // récupération de l'activité racine du projet
        var o_root_act = o_prj.san_rdpm_js_get_unique_top_level();
        plw.writetolog("[DEBUG][~a] - o_root_act = ~a".format(o_prj.printattribute(), o_root_act));
        
        
        // on s'assure qu'on parvient bien à récupérer l'activité racine de notre projet
        if(o_root_act instanceof plc.workstructure){
            var o_old_branch = plc.workstructure.get("~a/OLD_BRANCH".format(o_root_act.printattribute()));
            plw.writetolog("[DEBUG][~a] - o_old_branch = ~a".format(o_prj.printattribute(), o_old_branch));
            
            if(o_old_branch instanceof plc.workstructure){
                with([o_old_branch.fromObject(), plw.no_locking, plw.no_alerts]){
                    if(o_old_branch instanceof plc.network){
                        // Suppression custom data
                        plw.writetolog("[INFO][~a] - Start of deletion of custom objects".format(o_prj.printattribute()));
                        var n_nbe_act = 0;
                        var n_nbe_err = 0;
                        for(var o_act in plc.workstructure) {
                            n_nbe_act++;
                            if(o_act.san_rdpm_js_delete_custom_objects() != 0) n_nbe_err++;
                        }
                        if(n_nbe_err == 0) plw.writetolog("[INFO][~a] - Summary of deleted custom objects ==> n_nbe_act = ~a (aucune erreur)".format(o_prj.printattribute(), n_nbe_act));
                        else {
                            plw.writetolog("[WARN][~a] - Summary of deleted custom objects ==> n_nbe_act = ~a, n_nbe_err = ~a".format(o_prj.printattribute(), n_nbe_act, n_nbe_err));
                            n_nbe_partial_errors++;
                        }
                        
                        // suppression OLD_BRANCH
                        plw.writetolog("[INFO][~a] - Deletion of the OLD_BRANCH = ~a".format(o_prj.printattribute(), o_old_branch.printattribute()));
                        o_old_branch.callmacro("REMOVE");
                        plw.writetolog("[INFO][~a] - OLD_BRANCH deleted".format(o_prj.printattribute()));
                    }
                    else if(o_old_branch instanceof plc.task){
                        plw.writetolog("[WARN][~a] - The OLD_BRANCH is a TASK !!".format(o_prj.printattribute()));
                        plw.writetolog("[INFO][~a] - Deletion of the OLD_BRANCH = ~a".format(o_prj.printattribute(), o_old_branch.printattribute()));
                        o_old_branch.callmacro("REMOVE");
                        plw.writetolog("[INFO][~a] - OLD_BRANCH deleted".format(o_prj.printattribute()));
                    }
                    else plw.writetolog("[ERROR][~a] - la OLD_BRANCH est un objet non identifie !!!".format(o_prj.printattribute()));
                }
            }
            else {
                plw.writetolog("[WARN][~a] - Impossible to retrieve the OLD_BRANCH of the project".format(o_prj.printattribute()));
            }
        }
        else {
            plw.writetolog("[WARN][~a] - Impossible to retrieve the root activity of the project".format(o_prj.printattribute()));
        }
    }
    catch(error e){
        plw.writetolog("[ERROR][~a] - unexpected error catched ... ==> ~a".format(o_prj.printattribute(), e));
        e.printStacktrace()
        n_nbe_complete_errors++;
    }
    
}


plw.writetolog(" ==================================================================================== ");
plw.writetolog("           n_nbe_updated_projects = ~a".format(n_nbe_updated_projects));
plw.writetolog("           n_nbe_complete_errors  = ~a".format(n_nbe_complete_errors));
plw.writetolog("           n_nbe_partial_errors   = ~a".format(n_nbe_partial_errors));
plw.writetolog(" ==================================================================================== ");
plw.writetolog(" --------------- End macro on dataset ---------");
 
namespace _sourcing_tool;

function san_rdpm_new_insourcing_request()
{
    var Selection = new Symbol("SELECTION-ATOM","TOOL-BAR");
    var parent = "";
    for (var object in Selection)
    {
    	parent=object;
    	break;
    }
    
    var form_type="Standard";
    var operationnality="";
    
    if (parent!="" && parent.SAN_RDPM_UA_B_PARENT_SOURCING_REQ)
    {	
    	if (parent.SAN_UA_RDPM_RES_TYP_PHAR)
    	{
    		form_type="R&D Pharma";
    	}
    	else
    	{
    		if (parent.SAN_UA_RDPM_RES_TYP_PAST)
    		{
    			form_type="R&D Pasteur";
    			operationnality="Direct";
    		}
    	}	
    	var name = parent.SAN_RDPM_UA_S_SOURCING_REQUEST_PREFIX+"XXXXX";
    	var link = new Hyperlink("CreationForm",
    	"Class","RESOURCE",
    	"EditorType","SAN_RDPM_POPUP_INSOURCING_FORM"
    	,"DefaultA1","ELEMENT-OF"
    	,"DefaultV1",parent
    	,"DefaultA2","NAME"
    	,"DefaultV2",name
    	,"DefaultA3","SAN_RDPM_UA_S_SOURCING_NAME_REQUEST"
    	,"DefaultV3",name
    	,"DefaultA4","SAN_UA_RDPM_RES_OPER"
    	,"DefaultV4",operationnality
    	,"DefaultA5","SAN_RDPM_UA_B_INSOURCING_REQUEST"
    	,"DefaultV5",true
    	,"DefaultA6","SAN_RDPM_UA_S_SOURCING_STATUS"
    	,"DefaultV6","New"
    	,"DefaultA7","SAN_RDPM_RO_SOURCING_REQUESTOR"
    	,"DefaultV7",context.callstringformula("$CURRENT_USER ")
    	,"DefaultA8","FILE"
    	,"DefaultV8","SAN_CF_DEFAULT_RES_DATA"
    	);
    	link.go();
    }
    else
    {
    	plw.alert("Please select a service or a team to create a new insourcing request!");
    }
}

// Initiate fees from rate card
function san_rdpm_sourcing_tool_initiate_fees(resource)
{
	var rate_card_code = resource.SAN_RDPM_UA_S_RATE_CARD_ID;
	var rate_card = plc.__USER_TABLE_SAN_RDPM_UT_SOURCING_RATE_CARD.get(rate_card_code);
	if (rate_card instanceof plc.__USER_TABLE_SAN_RDPM_UT_SOURCING_RATE_CARD)
	{
		var process = true;
		if (Resource.SAN_RDPM_UA_N_SOURCING_PROF_FEES!=0 || Resource.SAN_RDPM_UA_N_SOURCING_TRAVEL_FEES!=0 || Resource.SAN_RDPM_UA_N_SOURCING_IT_FEES!=0 || Resource.SAN_RDPM_UA_N_SOURCING_MANAGEMENT_FEES!=0)
		{
			process = plw.question("Fees have already been defined for this request. Do you want to replace them with fees from the rate card?");
		}
		
		if (process)
		{
			Resource.SAN_RDPM_UA_N_SOURCING_PROF_FEES=rate_card.SAN_RDPM_UA_N_RATE_CARD_PROF_FEE;
			Resource.SAN_RDPM_UA_N_SOURCING_TRAVEL_FEES=rate_card.SAN_RDPM_UA_N_RATE_CARD_TRAVEL_FEE;
			Resource.SAN_RDPM_UA_N_SOURCING_IT_FEES=rate_card.SAN_RDPM_UA_N_RATE_CARD_IT_FEES;
			Resource.SAN_RDPM_UA_N_SOURCING_MANAGEMENT_FEES=rate_card.SAN_RDPM_UA_N_RATE_CARD_MANAGEMENT_FEE;
			Resource.SAN_RDPM_UA_S_SOURCING_CURRENCY=rate_card.SAN_RDPM_UA_S_RATE_CARD_CURRENCY;
		}
	}
	else
	{
		plw.alert("There is no rate card defined for this request.");
	}
} 
// 
//  PLWSCRIPT : SAN_RDPM_JS2_SYNC_RULE_FUNCTIONS
// 
//  AUTHOR  : I. GUEROUI
//
//  Revision 0.4 2020/10/31 LFA
//  Rename functions to use more generic name
//  Replace plc.task by plc.workstructure in san_rdpm_js_sync_fnl_pf
//  Remove condition on SAN_RDPM_UA_ACT_B_OPL_DRIVING san_rdpm_js_sync_fnl_pf (Control done in SAN_RDPM_SR_FNL_PF)
//
//  Revision 0.3 2020/09/29 IGU
//  Modification du namespace
//
//  Revision 0.2 2020/05/12 IGU
//  Modification de san_rdpm_js_sync_tech_rule => La synchro rule s'applique quel que soit le driving mode
//
//  Revision 0.1 2020/04/30 IGU
//  Création du script regroupant toutes les fonctions utilisées dans les synchronization rules
//
//***************************************************************************/

namespace _san_rdpm_sync_func;

/**
	Function used in SAN_RDPM_SR_FNL_PF
*/
function san_rdpm_js_sync_fnl_pf(s_act){
	var o_act = (s_act instanceof plc.workstructure)? s_act : plc.work_structure.get(s_act);
	
	if (o_act instanceof plc.workstructure){
		var o_synchroAct = o_act.get('SYNCHRONIZE_WITH');
		
		if (o_synchroAct instanceof plc.workstructure){o_act.set('FNL',o_synchroAct.get('EXPECTED_FINISH'));}
		else {plw.writetolog('[ERROR] [san_rdpm_js_sync_fnl_pf] - the source (synchronized with) activity :'+o_synchroAct+' is not an activity');}
	} 
	else {plw.writetolog('[ERROR] [san_rdpm_js_sync_fnl_pf] - bad argument :'+o_act+' is not an activity');}
}

/**
	Function used in SAN_RDPM_SR_PF
*/
function san_rdpm_js_sync_pf(s_act){
	var o_act = (s_act instanceof plc.work_structure)? s_act : plc.work_structure.get(s_act);
	
	if (o_act instanceof plc.work_structure){
		var o_synchroAct = o_act.get('SYNCHRONIZE_WITH');
		
		if (o_synchroAct instanceof plc.work_structure){o_act.set('PF',o_synchroAct.get('PF'));}
		else {plw.writetolog('[ERROR] [san_rdpm_js_sync_pf] - the source (synchronized with) activity :'+o_synchroAct+' is not an activity');}
	} 
	else {plw.writetolog('[ERROR] [san_rdpm_js_sync_pf] - bad argument :'+o_act+' is not an activity');}
} 
// 
//  PLWSCRIPT : SAN_RDPM_JS2_TC_INT
// 
//  AUTHOR  : S. AKAAYOUS
//  v1.2 - 2021/06/29 ep
//  PC-4146 : improve execution time using a vector to store timesheets to be integrated, instead of integrate one by one
//
//  v1.1 - 2021/03/16 David
//  Add the frequency check (PC3436)
//
//  Creation : 2020/09/11 SAK
//  Script used for PC 216 :  Integrate only timesheets of the last month that have been validated
//  Modification : 2020/10/20 SAK : PC-2043
//***************************************************************************/

namespace _san_rdpm_tc;

var boolean vCheqF=_san_continuum.san_js_check_run_batch("monthly",arg2:1,arg3:[1]);
if (vCheqF==true)
{
    plw.writeln("RDPM - START BATCH : SAN_RDPM_BA_INTEGRATE_TC");
    var vDate=new date();
    var vStart_Month =  "PERIOD_START".callmacro(vDate,"MONTH",-1);  // "PERIOD_START".call(vDate,"MONTH",-1);
    var vEnd_Month =  "PERIOD_START".callmacro(vDate,"MONTH",0);     // "PERIOD_START".call(vDate,"MONTH",0); 
    plw.writeln("RDPM - Integration timesheets of the month : "+vStart_Month);
	var tc_vect=new vector();
    for (var TC in plc.Time_Card where TC.getinternalvalue("STATUS").tostring()=="V" && tc.START_DATE >= vStart_Month && tc.START_DATE < vEnd_Month)
    {   
    	tc_vect.push(TC);
		//TC.callmacro("INTEGRATE-TIME-CARD-USER-TOOL");
    	//plw.writeln("RDPM - Integration timesheet  : "+TC);
    }
	plw.writeln("##########   INTEGRATING TC ###############");
	plw.writeln("##########   "+tc_vect.length+" timesheets will be integrated ###############");
	
	tc_vect.callmacro("INTEGRATE-TIME-CARD-USER-TOOL");
	
	plw.writeln("##########  END INTEGRATING TC ###############");
    plw.writeln("RDPM - END OF THE BATCH : SAN_RDPM_BA_INTEGRATE_TC");
} 
// 
//  PLWSCRIPT : SAN_RDPM_JS2_TC_UTILS
// 
//  AUTHOR  : S. AKAAYOUS
//
//  
//  Creation V0 2020/10/02 SAK
//  Creation of the script to resolve the performance issue using Add activity button in timecard , PC-1658
//
//  Modification 0.1 2020/10/06 SAK  : Add PC-686 only obs of the resource and the parent obs of the resource
//
//  Modification 0.2 2021/05/21 IGU  : PC-3686 Financial task should be displayed if OBS element (Financial task) = OBS element (Resource) in My OBS
//
//  Modification 0.3 2021/11/15 IGU  : Bug fixes for Pasteur Add Activity popup
//
//  Modification 0.4 2021/12/17 IGU  : PC-5328 Fix diplayed activities in My OBS view for Vaccines
//
//  Modification 0.5 2022/02/18 EPA  : PC-5540 Fix diplayed activities in My role view for Vaccines
//
//***************************************************************************/
namespace _san_rdpm_tc_search;

// function to get the study of the activity 
function san_rdpm_get_study(act) {
	var result=undefined;
	var ActStudy=plc.work_structure.get(act.SAN_UA_RDPM_ACT_S_STUDY_ID);
	if (ActStudy!=undefined) result=ActStudy;
	return result;
}

// function to check if the activity can be inserted
/*function san_rdpm_check_act_can_be_inserted(act) {
	var result=false;
	if (Act.getinternalvalue("STATE").ToString()!="O") {
	return false;
	}
	else {
	if (
	Act.project.VERSION_NUMBER==0 &&
	Act.project.getinternalvalue("STATE").ToString()=="ACTIVE" &&
	Act.project._wzd_aa_b_permanent==false &&
	Act.CallBooleanFormula("MATCH_STRING(OC._TCM_AA_S_SA_ACTIVITYFILTER)")) {
	result=true;
	}
	}
	return result;
}*/

function san_rdpm_check_project_can_be_inserted(prj) {
	var result=false;
	if (prj.getinternalvalue("STATE").ToString()=="ACTIVE" && prj.VERSION_NUMBER==0 && prj._wzd_aa_b_permanent==false) result=true;
	return result;
}

function san_rdpm_check_act_can_be_inserted(act) {
	var result=false;
	if (Act.getinternalvalue("STATE").ToString()!="O") {
		return false;
	}
	else {
		if (Act.CallBooleanFormula("MATCH_STRING(OC._TCM_AA_S_SA_ACTIVITYFILTER)")) result=true;
	}
	return result;
}

// #################   My role   #################

// SAN_RDPM_UA_ACT_TC_PORT_MR
// (san_ua_rdpm_b_is_a_study and ITER_BOOLEAN_THERE_IS_ONE("CHILDREN","SAN_UA_HAS_ALLOC_WITH_SKILL_OF_CURRENT_TC_RES")) or wbs_type="Financial Task"

// SAN_RDPM_UA_ACT_TC_PORT_VACC_MR
// SAN_UA_HAS_ALLOC_WITH_SITE_OF_CURRENT_TC_RES and (SAN_UA_HAS_ALLOC_WITH_SKILL_OF_CURRENT_TC_RES or SAN_UA_HAS_ALLOC_WITH_RES_OF_CURRENT_TC_RES) 

function san_rdpm_tc_filter_my_role_activities(f) {
	var vRes = plc.resource.get(context._TC_AA_S_RESOURCE);
	
	var vActResult=new vector();
	var act_table=new hashtable("OBJECT");
	//var study_table=new hashtable("OBJECT");
	var insert_act_table=new hashtable("OBJECT");
	var TC_projects_table=new hashtable("OBJECT");
	
	var total_plh=0;
	var total_distinct_act=0;
	var total_distinct_std_ft=0;
	var total_std_insertable=0;
	var total_distinct_ft=0;
	var total_ft_insertable=0;	
	
	//plw.alert(vRes);
	if(vRes != undefined && vRes instanceOf plc.Resource) {
		var vResTcProfile=vRes.CURRENT_TIMECARD_PROFILE.printattribute();
		var ResSkill=vRes.PRIMARY_SKILL;
		var ResSite=vRes._RM_REVIEW_RA_LOCATION;
		
		var FinancialTaskType=plc.wbs_type.get(context.SAN_RDPM_CS_AT_FIN_TASK);
		//plw.alert(FinancialTaskType);
		
		if (ResSkill!= undefined) {
			// Pharma case (PC-649)
			// return the study of the activity on which the planned hour is created
			var SkillString=ResSkill.printattribute();
			if (vResTcProfile=="PHARMA") {
				// potential optim with sc9651 3.8 + table key on planned hour "PRIMARY_SKILL" 
				//le ka  ne renvoit pas tte les activtés apres modification de la skill.
				// to be reviewed anyway as using a table key on computed user attribute is a very bad idea
				
				var v_attributes = new vector("SAN_UA_RDPM_S_PRIMARY_SKILL_FOR_TABLE_KEY");
				var v_values = new vector(SkillString);
				var ka = new Keyattribute(plc.task_alloc,v_attributes,v_values);
				
				if (ka instanceof KeyAttribute){
					with(ka.fromObject()){
						for (var talloc in plc.taskalloc) {
							total_plh++;
							var MyRoleAct=talloc.ACTIVITY;
							var MyRolePrj=talloc.PROJECT;
							//plw.alert("MyRolePrj: "+MyRolePrj);
							//plw.writeln("TC_projects_table.get(MyRolePrj) :"+TC_projects_table.get(MyRolePrj));
							if (TC_projects_table.get(MyRolePrj)==undefined) {
								TC_projects_table.set(MyRolePrj,san_rdpm_check_project_can_be_inserted(MyRolePrj));
							}
							
							if (TC_projects_table.get(MyRolePrj)==true) {
								if (act_table.get(MyRoleAct)==undefined) {
									act_table.set(MyRoleAct,true);
									total_distinct_act++;
									//var MyRoleActStudy=san_rdpm_get_study(MyRoleAct);
									var MyRoleActInsert=undefined;
									
									//plw.alert(MyRoleAct.WBS_TYPE);
									if (MyRoleAct.WBS_TYPE==FinancialTaskType) {
										MyRoleActInsert=MyRoleAct;
										//plw.alert(MyRoleActInsert);
									}
									else {
										MyRoleActInsert=san_rdpm_get_study(MyRoleAct);
									}
									
									if (MyRoleActInsert!=undefined && insert_act_table.get(MyRoleActInsert)==undefined){
										total_distinct_std_ft++;
										insert_act_table.set(MyRoleActInsert,true);
										if (san_rdpm_check_act_can_be_inserted(MyRoleActInsert)) {
											vActResult.push(MyRoleActInsert);
											total_std_insertable++;
										}
									}
								}
							}
						}
					}
				}
				
				// Adding Financial tasks
				// Removed following PC-3573
				/*if (FinancialTaskType!=undefined) {
					with(FinancialTaskType.fromobject()) {   // fromobject OK
					for (var FinAct in plc.work_structure) {
					total_distinct_ft++;
					var FinActProject=FinAct.PROJECT;
					if (san_rdpm_check_project_can_be_inserted(FinActProject)) {
					if (san_rdpm_check_act_can_be_inserted(FinAct)) {
					vActResult.push(FinAct);
					total_ft_insertable++;
					}
					}
					}
					}
				}*/
				// Removed following PC-3573
				plw.writetolog("");
				plw.writetolog("############# Scanned insertable studies for skill "+SkillString+" #########");
				plw.writetolog("Nb of scanned planned hours: "+total_plh);
				plw.writetolog("Nb of distinct activities in TC projects: "+total_distinct_act);
				plw.writetolog("Nb of distinct studies / financial tasks: "+total_distinct_std_ft);
				plw.writetolog("Nb of insertable studies  / financial tasks: "+total_std_insertable);
				//plw.writeln("Nb of financial tasks: "+total_distinct_ft);
				//plw.writeln("Nb of insertable financial tasks: "+total_ft_insertable);
				plw.writetolog("TOTAL of activities to display in dialog: "+vActResult.length);
				plw.writetolog("######################");
			}
			
			// Vaccines case
			if (vResTcProfile=="PASTEUR") {
				if (ResSite!=undefined) {
					// we start from the site, then check the resource OR the skill of the planned hour
					var SiteString=ResSite.printattribute();
					with(ResSite.fromObject()){  // from object OK
						for (var talloc in plc.taskalloc where (talloc.PRIMARY_SKILL==ResSkill || talloc.RES==vRes)) {
							total_plh++;
							var MyRoleAct=talloc.ACTIVITY;
							var MyRolePrj=talloc.PROJECT;
							//var MyRoleActStudy=san_rdpm_get_study(MyRoleAct); not need activity study
							if (MyRoleAct!=undefined && san_rdpm_check_project_can_be_inserted(MyRolePrj)) {
							    //plw.writetolog("MyRoleAct: "+MyRoleAct);
								if (san_rdpm_check_act_can_be_inserted(MyRoleAct)) vActResult.push(MyRoleAct);
							}
							
						}
					}
					vActResult=vActResult.removeduplicates();
					total_distinct_act=vActResult.length;
					plw.writetolog("");
					plw.writetolog("############# Scanned insertable studies for skill "+SkillString+" and site "+SiteString+" #########");
					plw.writetolog("Nb of scanned planned hours: "+total_plh);
					plw.writetolog("Nb of distinct activities in TC projects: "+total_distinct_act);
					plw.writetolog("TOTAL of activities to display in dialog: "+vActResult.length);
					plw.writetolog("######################");
				}
			}
			
			if (vActResult.length>0) {
				for (var Act in vActResult) {
					f.call(Act);
				}
			}
		}
	}
	act_table.delete();
	insert_act_table.delete();
	TC_projects_table.delete();
}


// #################   My OBS   #################

// SAN_UA_HAS_OBS_OF_CURRENT_TC_RES_PHAR
// san_ua_rdpm_b_is_a_study   and obs_element <>"" and 	
//( obs_element= STRING_VALUE("RESOURCE",OC._TC_AA_S_RESOURCE,"OBS_ELEMENT") or ITER_BOOLEAN_THERE_IS_ONE("CHILDREN","obs_element= STRING_VALUE(\"RESOURCE\",OC._TC_AA_S_RESOURCE,\"OBS_ELEMENT\")") 	)

// PAST
// SAN_UA_HAS_OBS_OF_CURRENT_TC_RES   *** obs res belongs to act obs
// ( LEVEL = 1 and OBS_ELEMENT="")  or (OBS_ELEMENT<>"" and EVALUATE_BOOLEAN_ON_OBJECT("RESOURCE",OC._TC_AA_S_RESOURCE,"BELONGS(\"RESPONSIBILITY\",\""+OBS_ELEMENT+"\")") )

function san_rdpm_tc_filter_my_OBS_activities(f) {
	var vRes = plc.resource.get(context._TC_AA_S_RESOURCE);
	var vObs = vRes.OBS_ELEMENT;
	var vActObsParent=new vector();
	var vActResult=new vector();
	
	var act_table=new hashtable("OBJECT");
	var study_table=new hashtable("OBJECT");
	var TC_projects_table=new hashtable("OBJECT");
	
	var total_distinct_act=0;
	var total_distinct_std=0;
	var total_std_insertable=0;
	var total_act_insertable=0;
	
	//plw.alert(vRes);
	if(vRes != undefined && vRes instanceOf plc.Resource && vObs != undefined && !vObs.internal  && vObs instanceOf plc.obs_node)
	{
		var vResTcProfile=vRes.CURRENT_TIMECARD_PROFILE.printattribute();
		
		// Pharma case (PC-649)
		if (vResTcProfile=="PHARMA") {
			with(vObs.fromobject()) {
				//for (var ObsAct in vObs.get("OBS_CHILDREN") where ObsAct instanceof plc.work_structure) {
				for (var ObsAct in  plc.work_structure) {
					total_distinct_act++;
					var ObsActPrj=ObsAct.PROJECT;
					if (TC_projects_table.get(ObsActPrj)==undefined) {
						TC_projects_table.set(ObsActPrj,san_rdpm_check_project_can_be_inserted(ObsActPrj));
					}
					if (TC_projects_table.get(ObsActPrj)==true) {
						var ObsActStudy=san_rdpm_get_study(ObsAct);
						if (ObsActStudy!=undefined && study_table.get(ObsActStudy)==undefined) {
							total_distinct_std++;
							study_table.set(ObsActStudy,true);
							if (ObsActStudy!=undefined && ObsAct.OBS_ELEMENT==vObs && san_rdpm_check_act_can_be_inserted(ObsActStudy)) {
								total_std_insertable++;
								vActResult.push(ObsActStudy);
							}
						}
						//PC-3686 Financial task should be displayed if OBS element (Financial task) = OBS element (Resource)
						if (ObsAct.wbs_type.printattribute()==context.SAN_RDPM_CS_AT_FIN_TASK && ObsAct.OBS_ELEMENT==vObs && san_rdpm_check_act_can_be_inserted(ObsAct)) {
							total_act_insertable++;
							vActResult.push(ObsAct);
						}
					}
				}
			}
			plw.writetolog("");
			plw.writetolog("############# Scanned insertable studies and activities for OBS "+vObs+" #########");
			plw.writetolog("Nb of distinct activities in TC projects: "+total_distinct_act);
			plw.writetolog("Nb of distinct studies: "+total_distinct_std);
			plw.writetolog("Nb of insertable studies: "+total_std_insertable);
			plw.writetolog("Nb of insertable activities: "+total_act_insertable);
			plw.writetolog("TOTAL of activities to display in dialog: "+vActResult.length);
			plw.writetolog("######################");
		}
		
		// Pasteur case (PC-686)
		if (vResTcProfile=="PASTEUR"){	
			var o_lvl4_res = vRes;
			var o_lvl4_res_obs;
			
			while(o_lvl4_res.LEVEL>4){o_lvl4_res=o_lvl4_res.ELEMENT_OF;}
			
			with(vObs.fromobject()){
				for (var vObsAct in plc.work_structure )  {								
					if (san_rdpm_check_act_can_be_inserted(vObsAct)) vActResult.push(vObsAct);
				}
			}
			
			if(o_lvl4_res.LEVEL==4){
				o_lvl4_res_obs = o_lvl4_res.OBS_ELEMENT;
				if(o_lvl4_res_obs != undefined && !o_lvl4_res_obs.internal  && o_lvl4_res_obs instanceOf plc.obs_node){
					with(o_lvl4_res_obs.fromobject()){
						for (var vObsAct in plc.work_structure )  {								
							if (san_rdpm_check_act_can_be_inserted(vObsAct)) vActResult.push(vObsAct);
						}
					}
				}
			}
			
			for ( var prj in plc.ordo_project where prj.san_rdpm_b_rnd_vaccines_project  && prj.getinternalvalue("STATE").ToString()=="ACTIVE" && !(prj._wzd_aa_b_permanent) && prj.parent.printattribute()==""){
				var ActL1 = plc.network.get(prj.name);
				if (ActL1 instanceof plc.network && ActL1.obs_element.internal && san_rdpm_check_act_can_be_inserted(ActL1)){vActResult.push(ActL1);}
			}
		}
		
		vActResult = vActResult.removeduplicates();
		for (var o_act in vActResult){
			f.call(o_act);
		}
	}
}

// #################   All Activities   #################

function san_rdpm_tc_filter_all_activities(f) {	
	// on branche sur la relation standard
	// if there is not search filter, do nothing
	if (context._TCM_AA_S_SA_ACTIVITYFILTER==""){
		return false;
	}
	else{
		// E7 compliancy, replace _TC_filter_my_contextual_projects_activities by context.get("_TC_OC_REL_CONTEXTUAL_FILTERED_WORKSTRUCTURES")
		for (var act in context.get("_TC_OC_REL_CONTEXTUAL_FILTERED_WORKSTRUCTURES")){
			f.call(act);
		}
	}
}

// #################   Global filter   #################

function san_rdpm_tc_filter_global(f) {
    // E7 compliance replace write_text_key by multilingual_writeTextKey
	var cond1=plw.multilingual_writeTextKey("RDPM.SAN_RDPM_TK_TC_PORT_MR");
	var cond2=plw.multilingual_writeTextKey("RDPM.SAN_RDPM_TK_TC_PORT_MD");
	var cond3=plw.multilingual_writeTextKey("RDPM.SAN_RDPM_TK_TC_PORT_ALL");
	
	if (context.SAN_RDPM_UA_CP_TC_PORT_CHOICE==cond1) {
		san_rdpm_tc_filter_my_role_activities(f);
	}
	else {
		if (context.SAN_RDPM_UA_CP_TC_PORT_CHOICE==cond2) {
			san_rdpm_tc_filter_my_OBS_activities(f);
		}
		else {
			if (context.SAN_RDPM_UA_CP_TC_PORT_CHOICE==cond3) {
				san_rdpm_tc_filter_all_activities(f);
			}
			else {
				return false;
			}
		}
	}
}

// ## Declaration of the dynamic relation ##

var objectRelation SAN_RDPM_Global_TC_Context_Activity_Relation = plc.contextopx2.getSlotByID('RDPM_GLOBAL_TC_OC_REL_FILTERED_WORKSTRUCTURES');
if(!(SAN_RDPM_Global_TC_Context_Activity_Relation instanceof ObjectRelation)){
	SAN_RDPM_Global_TC_Context_Activity_Relation = new ObjectRelation(plc.contextopx2,'RDPM_GLOBAL_TC_OC_REL_FILTERED_WORKSTRUCTURES');
} 
SAN_RDPM_Global_TC_Context_Activity_Relation.comment = 'RDPM Time card global filtered Work-structures';
SAN_RDPM_Global_TC_Context_Activity_Relation.connectedtoclass = plc.work_structure;
SAN_RDPM_Global_TC_Context_Activity_Relation.mapmethod = san_rdpm_tc_filter_global;

// #################   Funtion to insert activity into the TimeSheet, without history   #################

function san_rdpm_pjs_tcm_addActivityInTimesheet(id) {
	// standard function, without history management (bad perf)
	//if (this.object instanceof opxactivity) {
	if (this.object instanceof plw.work_structure) {
		//generate hystory
		//_tcm_GenerateHistory();
		// E7 compliancy, replace create_time_input_line by timecard_addActivityToCurrentTimeSheet
		this.object.timecard_addActivityToCurrentTimeSheet();
		return true;
	}
	return false;
}

function san_rdpm_init_table_key_plh_skill() {
	for (var ResSkill in plc.resourceskill where ResSkill.SAN_RDPM_UA_B_IS_MAIN_SKILL) {
		var SkillString=ResSkill.printattribute();
		var total_plh=0;
		var v_attributes = new vector("SAN_UA_RDPM_S_PRIMARY_SKILL_FOR_TABLE_KEY");
		var v_values = new vector(SkillString);
		var ka = new Keyattribute(plc.task_alloc,v_attributes,v_values);
		
		if (ka instanceof KeyAttribute){
			with(ka.fromObject()){
				for (var talloc in plc.taskalloc) {
					total_plh++;
				}
			}
		}
		plw.writetolog("## Initialized table key for skill "+SkillString+" --> "+total_plh+" planned hours");
	}
}
// initilize tk
//san_rdpm_init_table_key_plh_skill();
// since 7.0.1, init with wrapper
// will be reviewed anyway as using a table key on computed user attribute is a very bad idea
wrap.intranetstarted.addwrapperafter(san_rdpm_init_table_key_plh_skill);

// ###################   PC-3695 ########################
function san_rdpm_tc_js_list_resources() {
	// PC-3695
	// reuse of standard function _tc_js_list_resources and add RDPM filter
	var user = context.applet.user;
	var current_user = new vector();
	current_user.push(user);
	var list_resources_managed = plw._tc_build_resource_list_from_user(current_user);
	//this.possiblevalues=list_resources_managed.vector_copy();
	var result1=list_resources_managed.vector_copy();
	var result2=new vector();
	for (var res in result1 where res.SAN_UA_RDPM_B_FILTER_RESOURCE_LIST_FOR_TC_INPUT) {
		result2.push(res);
	}
	this.possiblevalues=result2;
}
// ###################   PC-3695 ########################

// ###################   PC-4134 ########################
// function used to properly build URL in reminder emails sent to users via the workbox, esp. for TimeCard reminders
function san_rdpm_set_setting_value_HOME_ST_DEFAULT_APPLICATION_URL () {
	//--------- PC-4134 we must identify if we are on preprod or prod, built on specific architecture for TC
	var string current_db=context.CallStringFormula("$DATABASE_NAME");
	
	var test_prod=context.CallBooleanFormula("\""+current_db+"\"=\"*_PROD*\"");
	var test_preprod=context.CallBooleanFormula("\""+current_db+"\"=\"*_PREPROD*\"");
	
	var prod_base_url="https://sanofi-continuum.planisware.live/app/plw/127.0.0.1:8100/";
	var preprod_base_url="https://sanofi-continuum-preprod.planisware.live/app/plw/127.0.0.1:8100/";
	
	if (test_prod) {
		plw.writetolog("[san_rdpm_set_setting_value_HOME_ST_DEFAULT_APPLICATION_URL] Currently on a prod environmnent.");
		if (context._HOME_ST_DEFAULT_APPLICATION_URL!=prod_base_url) {
			context._HOME_ST_DEFAULT_APPLICATION_URL=prod_base_url;
		}
		plw.writetolog("Value for setting _HOME_ST_DEFAULT_APPLICATION_URL: "+context._HOME_ST_DEFAULT_APPLICATION_URL);
	}
	else {
		if (test_preprod) {
			plw.writetolog("[san_rdpm_set_setting_value_HOME_ST_DEFAULT_APPLICATION_URL] Currently on a preprod environmnent.");
			if (context._HOME_ST_DEFAULT_APPLICATION_URL!=preprod_base_url) {
				context._HOME_ST_DEFAULT_APPLICATION_URL=preprod_base_url;
			}
			plw.writetolog("Value for setting _HOME_ST_DEFAULT_APPLICATION_URL: "+context._HOME_ST_DEFAULT_APPLICATION_URL);
		}
		else {
			plw.writetolog("[san_rdpm_set_setting_value_HOME_ST_DEFAULT_APPLICATION_URL] Currently on an environmnent different from prod and preprod, setting should be empty.");
			context._HOME_ST_DEFAULT_APPLICATION_URL="";
			plw.writetolog("Value for setting _HOME_ST_DEFAULT_APPLICATION_URL: "+context._HOME_ST_DEFAULT_APPLICATION_URL);
		}
	}
	//--------- End PC-4134 -----------------------------------------------
}

wrap.intranetStarted.addWrapperAfter(san_rdpm_set_setting_value_HOME_ST_DEFAULT_APPLICATION_URL);
// ###################   PC-4134 ########################

 
// 
//  PLWSCRIPT : SAN_RDPM_JS2_UPDATE_TC_ACCESS
//
//  v1.1 - 2021/03/16 - David
//  Convert to JS2 and add the frequency check (PC3436)
//
//  v1.0 - 28-JUL-20 HRA 
//  Creation of script
//
//***************************************************************************/
namespace _san_tc;

// Frequency : the 1 day of every month
var boolean vCheqF=_san_continuum.san_js_check_run_batch("monthly",arg2:1,arg3:[1]);
if (vCheqF==true)
{
	// RDPM TimeCard access deactivation
	// Browse all users
	for (var usr in plc.opx2_user where usr.SAN_UA_RDPM_B_DEACTIVE_TC_ACCESS==true) {
		with(plw.no_locking) {
			usr.OPX2_INTRANET_ACCESS = false;
			plw.writeln("Timecard intranet access deactivated :"+usr.NAME);
		}		
	}
} 
//////
//// HRA 19 01 2021: update of san_wbs_form_provider_slot_modifier and san_wbs_form_sourcing_slot_modifier: remove provider or sourcing value control
//// AHI 05 08 2021: Creation of functions for DA "# Sample(s)", "# Lot(s)" and "# Test(s)"
//// LFA 21 10 2021 : Creation of SAN_RDPM_DA_B_WBS_FORM_DATA_DUPLICATED to identify the duplicates in WBS Form data table - PC-4818
//// AHI 28 10 2021: remove comment on lockers for sample, lots, tests
//// ABO 28 02 2022: Addition of the management of the user attributes on WBS Form data by using the existing functions (to manage overwrite fields and the automatic deletion for instance) - PC-832


namespace _wbs_form;

// Reader (Generic)
function san_wbs_form_slot_reader(role_onb,field,default_val,empty_val) {
	var result=default_val;
	if (this.SAN_UA_RDPM_B_DISPLAYED_WBS_FORM_PHARMA)
    {
        var act_onb=context.SAN_UA_TMP_CURRENT_ACT_WBS_FORM_ONB;
        var entered_value=san_pjs_get_upper_level_value(act_onb,role_onb,field);
        if (entered_value!=undefined && entered_value!=false) result=entered_value;
    }
    else
    {
        result=empty_val;
    }
    return result;
}

// Reader parent (Generic)
function san_wbs_form_parent_slot_reader(role_onb,field,default_val,empty_val) {
    var result=default_val;
    if (this.SAN_UA_RDPM_B_DISPLAYED_WBS_FORM_PHARMA)
    {
        var act_onb=context.SAN_UA_TMP_CURRENT_ACT_WBS_FORM_ONB;
    	var act_onb_number=act_onb.parsenumber();
    	var act=plc.work_structure.get(act_onb_number);
    	if (act!=undefined && act!=false && act.internal==false)
    	{
    		var act_parent=act.WBS_ELEMENT;
    		if (act_parent!=undefined && act_parent!=false && act_parent.internal==false)
    		{
    			var act_parent_onb=act_parent.ONB.tostring();
    			var entered_value=san_pjs_get_upper_level_value(act_parent_onb,role_onb,field);
    			if (entered_value!=undefined && entered_value!=false) result=entered_value;
    		}
    	}
    }
    else
    {
        result=empty_val;
    }
    return result;
}

// Modifier (Generic)
function san_wbs_form_slot_modifier(nvalue,role_onb,field,default_val) {
	if (this.SAN_UA_RDPM_B_DISPLAYED_WBS_FORM_PHARMA){
		if (nvalue=="" || nvalue==undefined) nvalue=default_val;
		var act_onb=context.SAN_UA_TMP_CURRENT_ACT_WBS_FORM_ONB;
		var result=san_pjs_set_wbs_form_data_value(act_onb,role_onb,field,nvalue);
		return result;
	}
}

// Modifier (Leader = Generic + Update Site + Update leader on activities)
function san_wbs_form_slot_modifier_leader(nvalue,role_onb,field,default_val) {
	if (this.SAN_UA_RDPM_B_DISPLAYED_WBS_FORM_PHARMA)
	{
		var act_onb=context.SAN_UA_TMP_CURRENT_ACT_WBS_FORM_ONB;
		var result=default_val;
		var result=san_pjs_set_wbs_form_data_value(act_onb,role_onb,field,nvalue);
		// Set leader site as ND --> Value will be resource value
		san_pjs_set_wbs_form_data_value(act_onb,role_onb,"USER_ATTRIBUTE_SAN_UA_S_LEADER_SITE","ND");
		// Update leader on tasks
    	san_pjs_rdpm_update_activity_leader(act_onb,role_onb,field,nvalue);
	
		return result;
	}
}



// Locker (Generic)
function san_wbs_form_slot_locker()
{
	var result = true;
	if (this.SAN_UA_RDPM_B_DISPLAYED_WBS_FORM_PHARMA)
    {
		var act_onb=context.SAN_UA_TMP_CURRENT_ACT_WBS_FORM_ONB;
    	var act_onb_number=act_onb.parsenumber();
    	var act=plc.work_structure.get(act_onb_number);
    	if (act!=undefined && act!=false && act.internal==false && act.project.WRITABLE)
    	{
			result = false;
		}
	}
	return result;
}

// ###############  Sourcing ####################

function san_wbs_form_sourcing_slot_reader() {
	return san_wbs_form_slot_reader(this.ONB,"USER_ATTRIBUTE_SAN_UA_S_SOURCING","INT","");
}

function san_wbs_form_sourcing_slot_modifier(nvalue) {
	if (this.SAN_UA_RDPM_B_DISPLAYED_WBS_FORM_PHARMA){
		var field="USER_ATTRIBUTE_SAN_UA_S_SOURCING";
		var role_onb=this.ONB;
		var act_onb=context.SAN_UA_TMP_CURRENT_ACT_WBS_FORM_ONB;
		var result="";
		if (nvalue!="")
		{
			var provider = san_pjs_get_wbs_form_data_value(act_onb,role_onb,"USER_ATTRIBUTE_SAN_UA_S_PROVIDER");

			result=san_pjs_set_wbs_form_data_value(act_onb,role_onb,field,nvalue);
		}
		return result;	
	}
}

function san_wbs_form_sourcing_slot_locker(){
    return san_wbs_form_slot_locker();
}

function san_pjs_create_dynamic_attribute_sourcing(){
    try{
        var slot = new objectAttribute(plc._RM_REVIEW_PT_ROLE,"SAN_DA_SOURCING",plc._INF_PT_CBS2);
        slot.Comment = "Sourcing";
        slot.Reader = san_wbs_form_sourcing_slot_reader;
        slot.Modifier = san_wbs_form_sourcing_slot_modifier;
        slot.Locker = san_wbs_form_sourcing_slot_locker;
        slot.hiddenInIntranetServer = false;
		slot.connecting = false;
    }
    catch(error e){
        plw.writeln("Could not create slot due to error: " + e);
    }
}

try{
    with(plw.no_locking){
        san_pjs_create_dynamic_attribute_sourcing();
    }
}
catch (error e){
    plw.writeToLog("Failed to create SAN_DA_SOURCING");
    plw.writeln(e);
}


// ###############  Sourcing (Parent) ####################
function san_wbs_form_sourcing_parent_slot_reader() {
    return san_wbs_form_parent_slot_reader(this.ONB,"USER_ATTRIBUTE_SAN_UA_S_SOURCING","INT","");
}

function san_wbs_form_sourcing_parent_slot_locker() {
    return true;
}

function san_pjs_create_dynamic_attribute_sourcing_parent(){
    try{
        var slot = new objectAttribute(plc._RM_REVIEW_PT_ROLE,"SAN_DA_SOURCING_PARENT",plc._INF_PT_CBS2);
        slot.Comment = "Sourcing (Parent)";
        slot.Reader = san_wbs_form_sourcing_parent_slot_reader;
        slot.Locker = san_wbs_form_sourcing_parent_slot_locker;
        slot.hiddenInIntranetServer = false;
		slot.connecting = false;
    }
    catch(error e){
        plw.writeln("Could not create slot due to error: " + e);
    }
}

try{
    with(plw.no_locking){
        san_pjs_create_dynamic_attribute_sourcing_parent();
    }
}
catch (error e){
    plw.writeToLog("Failed to create SAN_DA_SOURCING_PARENT");
    plw.writeln(e);
}

// ###############  Provider ####################

function san_wbs_form_provider_slot_reader() {
	return san_wbs_form_slot_reader(this.ONB,"USER_ATTRIBUTE_SAN_UA_S_PROVIDER","","");
}

function san_wbs_form_provider_slot_modifier(nvalue) {
	if (this.SAN_UA_RDPM_B_DISPLAYED_WBS_FORM_PHARMA)
	{
		var field="USER_ATTRIBUTE_SAN_UA_S_PROVIDER";
		var role_onb=this.ONB;
		var act_onb=context.SAN_UA_TMP_CURRENT_ACT_WBS_FORM_ONB;
		var result="";
		
		var Sourcing = san_pjs_get_wbs_form_data_value(act_onb,role_onb,"USER_ATTRIBUTE_SAN_UA_S_SOURCING");
		
		result=san_pjs_set_wbs_form_data_value(act_onb,role_onb,field,nvalue);
		
		return result;
	}
}

function san_wbs_form_provider_slot_locker(){
    return san_wbs_form_slot_locker();
}

function san_pjs_create_dynamic_attribute_provider(){
    try{
        var slot = new objectAttribute(plc._RM_REVIEW_PT_ROLE,"SAN_DA_PROVIDER",plc._INF_PT_CBS3);
        slot.Comment = "Provider";
        slot.Reader = san_wbs_form_provider_slot_reader;
        slot.Modifier = san_wbs_form_provider_slot_modifier;
        slot.Locker = san_wbs_form_provider_slot_locker;
        slot.hiddenInIntranetServer = false;
		slot.connecting = false;
    }
    catch(error e){
        plw.writeln("Could not create slot due to error: " + e);
    }
}

try{
    with(plw.no_locking){
        san_pjs_create_dynamic_attribute_provider();
    }
}
catch (error e){
    plw.writeToLog("Failed to create SAN_DA_PROVIDER");
    plw.writeln(e);
}


// ###############  Provider (Parent) ####################
function san_wbs_form_provider_parent_slot_reader() {
	 return san_wbs_form_parent_slot_reader(this.ONB,"USER_ATTRIBUTE_SAN_UA_S_PROVIDER","","");
}

function san_wbs_form_provider_parent_slot_locker() {
    return true;
}

function san_pjs_create_dynamic_attribute_provider_parent(){
    try{
        var slot = new objectAttribute(plc._RM_REVIEW_PT_ROLE,"SAN_DA_PROVIDER_PARENT",plc._INF_PT_CBS3);
        slot.Comment = "Provider (Parent)";
        slot.Reader = san_wbs_form_provider_parent_slot_reader;
        slot.Locker = san_wbs_form_provider_parent_slot_locker;
        slot.hiddenInIntranetServer = false;
		slot.connecting = false;
    }
    catch(error e){
        plw.writeln("Could not create slot due to error: " + e);
    }
}

try{
    with(plw.no_locking){
        san_pjs_create_dynamic_attribute_provider_parent();
    }
}
catch (error e){
    plw.writeToLog("Failed to create SAN_DA_PROVIDER_PARENT");
    plw.writeln(e);
}

// ###############  Team ####################

function san_wbs_form_team_slot_reader() {
	return san_wbs_form_slot_reader(this.ONB,"USER_ATTRIBUTE_SAN_UA_S_TEAM","","");
}

function san_wbs_form_team_slot_modifier(nvalue) {
    return san_wbs_form_slot_modifier(nvalue,this.ONB,"USER_ATTRIBUTE_SAN_UA_S_TEAM","");
}

function san_wbs_form_team_slot_locker(){
    return san_wbs_form_slot_locker();
}

function san_pjs_create_dynamic_attribute_team(){
    try{
        var slot = new objectAttribute(plc._RM_REVIEW_PT_ROLE,"SAN_DA_TEAM",plc.Resource);
        slot.Comment = "Team";
        slot.Reader = san_wbs_form_team_slot_reader;
        slot.Modifier = san_wbs_form_team_slot_modifier;
        slot.Locker = san_wbs_form_team_slot_locker;
        slot.hiddenInIntranetServer = false;
		slot.connecting = false;
    }
    catch(error e){
        plw.writeln("Could not create slot due to error: " + e);
    }
}

try{
    with(plw.no_locking){
        san_pjs_create_dynamic_attribute_team();
    }
}
catch (error e){
    plw.writeToLog("Failed to create SAN_DA_TEAM");
    plw.writeln(e);
}


// ###############  Team (Parent) ####################
function san_wbs_form_team_parent_slot_reader() {
    return san_wbs_form_parent_slot_reader(this.ONB,"USER_ATTRIBUTE_SAN_UA_S_TEAM","","");
}

function san_wbs_form_team_parent_slot_locker() {
    return true;
}

function san_pjs_create_dynamic_attribute_team_parent(){
    try{
        var slot = new objectAttribute(plc._RM_REVIEW_PT_ROLE,"SAN_DA_TEAM_PARENT",plc.Resource);
        slot.Comment = "Team (Parent)";
        slot.Reader = san_wbs_form_team_parent_slot_reader;
        slot.Locker = san_wbs_form_team_parent_slot_locker;
        slot.hiddenInIntranetServer = false;
		slot.connecting = false;
    }
    catch(error e){
        plw.writeln("Could not create slot due to error: " + e);
    }
}

try{
    with(plw.no_locking){
        san_pjs_create_dynamic_attribute_team_parent();
    }
}
catch (error e){
    plw.writeToLog("Failed to create SAN_DA_TEAM_PARENT");
    plw.writeln(e);
}

// ###############  Excluded Resources ####################

function san_wbs_form_excluded_res_slot_reader() {
	return san_wbs_form_slot_reader(this.ONB,"USER_ATTRIBUTE_SAN_UA_B_EXCLUDED_RES",false,false);
}

function san_wbs_form_excluded_res_slot_modifier(nvalue) {
    return san_wbs_form_slot_modifier(nvalue,this.ONB,"USER_ATTRIBUTE_SAN_UA_B_EXCLUDED_RES",false);
}

function san_wbs_form_excluded_res_slot_locker(){
    return san_wbs_form_slot_locker();
}

function san_pjs_create_dynamic_attribute_excluded_res(){
    try{
        var slot = new objectAttribute(plc._RM_REVIEW_PT_ROLE,"SAN_DA_EXCLUDED_RES","BOOLEAN");
        slot.Comment = "Excluded Resources";
        slot.Reader = san_wbs_form_excluded_res_slot_reader;
        slot.Modifier = san_wbs_form_excluded_res_slot_modifier;
        slot.Locker = san_wbs_form_excluded_res_slot_locker;
        slot.hiddenInIntranetServer = false;
		slot.connecting = false;
    }
    catch(error e){
        plw.writeln("Could not create slot due to error: " + e);
    }
}

try{
    with(plw.no_locking){
        san_pjs_create_dynamic_attribute_excluded_res();
    }
}
catch (error e){
    plw.writeToLog("Failed to create SAN_DA_EXCLUDED_RES");
    plw.writeln(e);
}


// ###############  Excluded Resources (Parent) ####################
function san_wbs_form_excluded_res_parent_slot_reader() {
    return san_wbs_form_parent_slot_reader(this.ONB,"USER_ATTRIBUTE_SAN_UA_B_EXCLUDED_RES",false,false);
}

function san_wbs_form_excluded_res_parent_slot_locker() {
    return true;
}

function san_pjs_create_dynamic_attribute_excluded_res_parent(){
    try{
        var slot = new objectAttribute(plc._RM_REVIEW_PT_ROLE,"SAN_DA_EXCLUDED_RES_PARENT","BOOLEAN");
        slot.Comment = "Excluded Resources (Parent)";
        slot.Reader = san_wbs_form_excluded_res_parent_slot_reader;
        slot.Locker = san_wbs_form_excluded_res_parent_slot_locker;
        slot.hiddenInIntranetServer = false;
		slot.connecting = false;
    }
    catch(error e){
        plw.writeln("Could not create slot due to error: " + e);
    }
}

try{
    with(plw.no_locking){
        san_pjs_create_dynamic_attribute_excluded_res_parent();
    }
}
catch (error e){
    plw.writeToLog("Failed to create SAN_DA_EXCLUDED_RES_PARENT");
    plw.writeln(e);
}

// ###############   Complexity factor input ####################

function san_wbs_form_complexity_factor_slot_reader() {
		return san_wbs_form_slot_reader(this.ONB,"USER_ATTRIBUTE_SAN_UA_N_COMPLEXITY_FACTOR",1,0);
}

function san_wbs_form_complexity_factor_slot_modifier(nvalue) {
	return san_wbs_form_slot_modifier(nvalue,this.ONB,"USER_ATTRIBUTE_SAN_UA_N_COMPLEXITY_FACTOR",1);
}

function san_wbs_form_complexity_factor_slot_locker() {
    return san_wbs_form_slot_locker();
}

function san_pjs_create_dynamic_attribute_complexity_factor(){
    try{
        var slot = new objectAttribute(plc._RM_REVIEW_PT_ROLE,"SAN_DA_COMPLEXITY_FACTOR","NUMBER");
        slot.Comment = "Complexity factor";
        slot.Reader = san_wbs_form_complexity_factor_slot_reader;
        slot.Modifier = san_wbs_form_complexity_factor_slot_modifier;
        slot.Locker = san_wbs_form_complexity_factor_slot_locker;
        slot.hiddenInIntranetServer = false;
		slot.connecting = false;
    }
    catch(error e){
        plw.writeln("Could not create slot due to error: " + e);
    }
}

try{
    with(plw.no_locking){
        san_pjs_create_dynamic_attribute_complexity_factor();
    }
}
catch (error e){
    plw.writeToLog("Failed to create SAN_DA_COMPLEXITY_FACTOR");
    plw.writeln(e);
}


// ###############   Complexity factor Parent ####################
function san_wbs_form_complexity_factor_parent_slot_reader() {
	return san_wbs_form_parent_slot_reader(this.ONB,"USER_ATTRIBUTE_SAN_UA_N_COMPLEXITY_FACTOR",1,0);
}

function san_wbs_form_complexity_factor_parent_slot_locker() {
    return true;
}

function san_pjs_create_dynamic_attribute_complexity_factor_parent(){
    try{
        var slot = new objectAttribute(plc._RM_REVIEW_PT_ROLE,"SAN_DA_COMPLEXITY_FACTOR_PARENT","NUMBER");
        slot.Comment = "Complexity factor (Parent)";
        slot.Reader = san_wbs_form_complexity_factor_parent_slot_reader;
        slot.Locker = san_wbs_form_complexity_factor_parent_slot_locker;
        slot.hiddenInIntranetServer = false;
		slot.connecting = false;
    }
    catch(error e){
        plw.writeln("Could not create slot due to error: " + e);
    }
}

try{
    with(plw.no_locking){
        san_pjs_create_dynamic_attribute_complexity_factor_parent();
    }
}
catch (error e){
    plw.writeToLog("Failed to create SAN_DA_COMPLEXITY_FACTOR_PARENT");
    plw.writeln(e);
}



// ###############  Leader ####################
function san_wbs_form_leader_slot_reader() {
		return san_wbs_form_slot_reader(this.ONB,"USER_ATTRIBUTE_SAN_UA_S_LEADER","","");
}

function san_wbs_form_leader_slot_modifier(nvalue) {
    return san_wbs_form_slot_modifier_leader(nvalue,this.ONB,"USER_ATTRIBUTE_SAN_UA_S_LEADER","");
}

function san_wbs_form_leader_slot_locker() {
    return san_wbs_form_slot_locker();
}

function san_pjs_create_dynamic_attribute_leader(){
    try{
        var slot = new objectAttribute(plc._RM_REVIEW_PT_ROLE,"SAN_DA_LEADER",plc.resource);
        slot.Comment = "Leader";
        slot.Reader = san_wbs_form_leader_slot_reader;
        slot.Modifier = san_wbs_form_leader_slot_modifier;
        slot.Locker = san_wbs_form_leader_slot_locker;
        slot.hiddenInIntranetServer = false;
		slot.connecting = false;
    }
    catch(error e){
        plw.writeln("Could not create slot due to error: " + e);
    }
}

try{
    with(plw.no_locking){
        san_pjs_create_dynamic_attribute_leader();
    }
}
catch (error e){
    plw.writeToLog("Failed to create SAN_DA_LEADER");
    plw.writeln(e);
}


// ###############  Leader Parent ####################
function san_wbs_form_leader_parent_slot_reader() {
    return san_wbs_form_parent_slot_reader(this.ONB,"USER_ATTRIBUTE_SAN_UA_S_LEADER","","");
}

function san_wbs_form_leader_parent_slot_locker() {
    return true;
}

function san_pjs_create_dynamic_attribute_leader_parent(){
    try{
        var slot = new objectAttribute(plc._RM_REVIEW_PT_ROLE,"SAN_DA_LEADER_PARENT",plc.resource);
        slot.Comment = "Leader (Parent)";
        slot.Reader = san_wbs_form_leader_parent_slot_reader;
        slot.Locker = san_wbs_form_leader_parent_slot_locker;
        slot.hiddenInIntranetServer = false;
		slot.connecting = false;
    }
    catch(error e){
        plw.writeln("Could not create slot due to error: " + e);
    }
}

try{
    with(plw.no_locking){
        san_pjs_create_dynamic_attribute_leader_parent();
    }
}
catch (error e){
    plw.writeToLog("Failed to create SAN_DA_LEADER_PARENT");
    plw.writeln(e);
}

// ###############  Leader Site ####################

function san_wbs_form_leader_site_slot_reader() {
	return san_wbs_form_slot_reader(this.ONB,"USER_ATTRIBUTE_SAN_UA_S_LEADER_SITE","ND","");
}

function san_wbs_form_leader_site_slot_modifier(nvalue) {
	if (this.SAN_UA_RDPM_B_DISPLAYED_WBS_FORM_PHARMA){
		var field="USER_ATTRIBUTE_SAN_UA_S_LEADER_SITE";
		var role_onb=this.ONB;
		var act_onb=context.SAN_UA_TMP_CURRENT_ACT_WBS_FORM_ONB;
		var result="";
		var result=san_pjs_set_wbs_form_data_value(act_onb,role_onb,field,nvalue);
		san_pjs_rdpm_update_activity_leader_site(role_onb,field,nvalue);
		return result;
	}
}

function san_wbs_form_leader_site_slot_locker() {
	var lock =san_wbs_form_slot_locker();
	
	if (lock==false)
	{
		var leader_site="";
		var role_onb=this.ONB;
		var act_onb=context.SAN_UA_TMP_CURRENT_ACT_WBS_FORM_ONB;
		
		var leader=san_pjs_get_upper_level_value(act_onb,role_onb,"USER_ATTRIBUTE_SAN_UA_S_LEADER");
		if (leader!="" && leader!=undefined && leader!=false && leader.internal==false)
		{
			lock=true;
		}
	}
    return lock;
}

function san_pjs_create_dynamic_attribute_leader_site(){
    try{
        var slot = new objectAttribute(plc._RM_REVIEW_PT_ROLE,"SAN_DA_LEADER_SITE",plc._RM_REVIEW_PT_LOCATIONS);
        slot.Comment = "Site of the leader";
        slot.Reader = san_wbs_form_leader_site_slot_reader;
        slot.Modifier = san_wbs_form_leader_site_slot_modifier;
        slot.Locker = san_wbs_form_leader_site_slot_locker;
        slot.hiddenInIntranetServer = false;
		slot.connecting = false;
    }
    catch(error e){
        plw.writeln("Could not create slot due to error: " + e);
    }
}

try{
    with(plw.no_locking){
        san_pjs_create_dynamic_attribute_leader_site();
    }
}
catch (error e){
    plw.writeToLog("Failed to create SAN_DA_LEADER_SITE");
    plw.writeln(e);
}


// ###############  Leader Site Parent ####################
function san_wbs_form_leader_site_parent_slot_reader() {
    if (this.SAN_UA_RDPM_B_DISPLAYED_WBS_FORM_PHARMA ){
        var result="ND";
    	var leader_site="";
        var role_onb=this.ONB;
        var act_onb=context.SAN_UA_TMP_CURRENT_ACT_WBS_FORM_ONB;
    	var act_onb_number=act_onb.parsenumber();
    	var act=plc.work_structure.get(act_onb_number);
    	if (act!=undefined && act!=false && act.internal==false)
    	{
    		var act_parent=act.WBS_ELEMENT;
    		if (act_parent!=undefined && act_parent!=false && act_parent.internal==false)
    		{
    			var act_parent_onb=act_parent.ONB.tostring();
    			
    			var leader=san_pjs_get_upper_level_value(act_parent_onb,role_onb,"USER_ATTRIBUTE_SAN_UA_S_LEADER");
    			if (leader instanceof plc.resource)
    			{
    				leader_site=leader._RM_REVIEW_RA_LOCATION;
    				if (leader_site!=undefined && leader_site!=false && leader_site.internal==false)
    				{
    					result=leader_site;
    				}
    			}
    			
    			if (result!="")
    			{
    				var entered_value=san_pjs_get_upper_level_value(act_parent_onb,role_onb,"USER_ATTRIBUTE_SAN_UA_S_LEADER_SITE");
    				if (entered_value!=undefined && entered_value!=false) result=entered_value;
    			}
    		}
    	}
    	else
    	{
    	    result="";
    	}
    
        return result;
    }
}

function san_wbs_form_leader_site_parent_slot_locker() {
    return true;
}

function san_pjs_create_dynamic_attribute_leader_site_parent(){
    try{
        var slot = new objectAttribute(plc._RM_REVIEW_PT_ROLE,"SAN_DA_LEADER_SITE_PARENT",plc._RM_REVIEW_PT_LOCATIONS);
        slot.Comment = "Site of the leader (Parent)";
        slot.Reader = san_wbs_form_leader_site_parent_slot_reader;
        slot.Locker = san_wbs_form_leader_site_parent_slot_locker;
        slot.hiddenInIntranetServer = false;
		slot.connecting = false;
    }
    catch(error e){
        plw.writeln("Could not create slot due to error: " + e);
    }
}

try{
    with(plw.no_locking){
        san_pjs_create_dynamic_attribute_leader_site_parent();
    }
}
catch (error e){
    plw.writeToLog("Failed to create SAN_DA_LEADER_SITE_PARENT");
    plw.writeln(e);
}


// ###############   # Lot(s) input ####################

function san_wbs_form_num_lot_slot_reader() {
		return san_wbs_form_slot_reader(this.ONB,"USER_ATTRIBUTE_SAN_UA_N_NUM_LOT",1,0);
}

function san_wbs_form_num_lot_slot_modifier(nvalue) {
	return san_wbs_form_slot_modifier(nvalue,this.ONB,"USER_ATTRIBUTE_SAN_UA_N_NUM_LOT",1);
}

function san_wbs_form_num_lot_slot_locker() {
    return san_wbs_form_slot_locker();
}

function san_pjs_create_dynamic_attribute_num_lot(){
    try{
        var slot = new objectAttribute(plc._RM_REVIEW_PT_ROLE,"SAN_DA_N_NUM_LOT","NUMBER");
        slot.Comment = "# Lot(s)";
        slot.Reader = san_wbs_form_num_lot_slot_reader;
        slot.Modifier = san_wbs_form_num_lot_slot_modifier;
        slot.Locker = san_wbs_form_num_lot_slot_locker;
        slot.hiddenInIntranetServer = false;
		slot.connecting = false;
    }
    catch(error e){
        plw.writeln("Could not create slot due to error: " + e);
    }
}

try{
    with(plw.no_locking){
        san_pjs_create_dynamic_attribute_num_lot();
    }
}
catch (error e){
    plw.writeToLog("Failed to create SAN_DA_N_NUM_LOT");
    plw.writeln(e);
}

// ###############   # Test(s) input ####################

function san_wbs_form_num_test_slot_reader() {
		return san_wbs_form_slot_reader(this.ONB,"USER_ATTRIBUTE_SAN_UA_N_NUM_TEST",1,0);
}

function san_wbs_form_num_test_slot_modifier(nvalue) {
	return san_wbs_form_slot_modifier(nvalue,this.ONB,"USER_ATTRIBUTE_SAN_UA_N_NUM_TEST",1);
}

function san_wbs_form_num_test_slot_locker() {
    return san_wbs_form_slot_locker();
}

function san_pjs_create_dynamic_attribute_num_test(){
    try{
        var slot = new objectAttribute(plc._RM_REVIEW_PT_ROLE,"SAN_DA_N_NUM_TEST","NUMBER");
        slot.Comment = "# Test(s)";
        slot.Reader = san_wbs_form_num_test_slot_reader;
        slot.Modifier = san_wbs_form_num_test_slot_modifier;
        slot.Locker = san_wbs_form_num_test_slot_locker;
        slot.hiddenInIntranetServer = false;
		slot.connecting = false;
    }
    catch(error e){
        plw.writeln("Could not create slot due to error: " + e);
    }
}

try{
    with(plw.no_locking){
        san_pjs_create_dynamic_attribute_num_test();
    }
}
catch (error e){
    plw.writeToLog("Failed to create SAN_DA_N_NUM_TEST");
    plw.writeln(e);
}

// ###############   # Sample(s) input ####################

function san_wbs_form_num_sample_slot_reader() {
		return san_wbs_form_slot_reader(this.ONB,"USER_ATTRIBUTE_SAN_UA_N_NUM_SAMPLE",1,0);
}

function san_wbs_form_num_sample_slot_modifier(nvalue) {
	return san_wbs_form_slot_modifier(nvalue,this.ONB,"USER_ATTRIBUTE_SAN_UA_N_NUM_SAMPLE",1);
}

function san_wbs_form_num_sample_slot_locker() {
    return san_wbs_form_slot_locker();
}

function san_pjs_create_dynamic_attribute_num_sample(){
    try{
        var slot = new objectAttribute(plc._RM_REVIEW_PT_ROLE,"SAN_DA_N_NUM_SAMPLE","NUMBER");
        slot.Comment = "# Sample(s)";
        slot.Reader = san_wbs_form_num_sample_slot_reader;
        slot.Modifier = san_wbs_form_num_sample_slot_modifier;
        slot.Locker = san_wbs_form_num_sample_slot_locker;
        slot.hiddenInIntranetServer = false;
		slot.connecting = false;
    }
    catch(error e){
        plw.writeln("Could not create slot due to error: " + e);
    }
}

try{
    with(plw.no_locking){
        san_pjs_create_dynamic_attribute_num_sample();
    }
}
catch (error e){
    plw.writeToLog("Failed to create SAN_DA_N_NUM_SAMPLE");
    plw.writeln(e);
}

// ###############  Dynamic attribute to identify duplicates in WBS Form Data table  ####################

function wbs_form_data_duplicate_reader()
{
	var activity = this.SAN_UA_WBS_FORM_DATA_ACTIVITY;
	var role = this.SAN_UA_WBS_FORM_DATA_ROLE;
	var file = this.FILE;
	var onb=this.ONB;
	var duplicate=false;
	
	if (activity!="" && role!="")
	{
		for (var wbs_form_data in activity.get("USER_ATTRIBUTE_INVERSE_SAN_UA_WBS_FORM_DATA_ACTIVITY.__USER_TABLE_SAN_RDPM_UT_WBS_FORM_DATA") where wbs_form_data.SAN_UA_WBS_FORM_DATA_ROLE==role order by ['ONB']) {
			if (onb>wbs_form_data.ONB) {
				duplicate=true;
				break;			
			}		
		}
	}
	return duplicate;
}

var slot = new objectAttribute(plc.__USER_TABLE_SAN_RDPM_UT_WBS_FORM_DATA,"SAN_RDPM_DA_B_WBS_FORM_DATA_DUPLICATED","BOOLEAN");
slot.Comment = "Duplicated WBS Form Data?";
slot.Reader = wbs_form_data_duplicate_reader;
slot.Locker = function () {return true;};
slot.hiddenInIntranetServer = false;
slot.connecting = false;




// Reader (Generic for WBS form data)
function san_wbs_form_slot_wbsf_data_reader(field,default_val,empty_val) {
	var result=default_val;
	var role_onb=this.SAN_UA_WBS_FORM_DATA_ROLE_ONB;
	var act_onb=this.SAN_UA_WBS_FORM_DATA_ACTIVITY_ONB.tostring("####");
	var entered_value=san_pjs_get_upper_level_value(act_onb,role_onb,field);
	if (entered_value!=undefined && entered_value!=false) result=entered_value;
	return result;
}

// Modifier (Generic for WBS form data)
function san_wbs_form_slot_wbsf_data_modifier(nvalue,field,default_val) {
	if (nvalue=="" || nvalue==undefined) nvalue=default_val;
	var role_onb=this.SAN_UA_WBS_FORM_DATA_ROLE_ONB;
	var act_onb=this.SAN_UA_WBS_FORM_DATA_ACTIVITY_ONB.tostring("####");
	var result=san_pjs_set_wbs_form_data_value(act_onb,role_onb,field,nvalue);
	if (field=="USER_ATTRIBUTE_SAN_UA_S_LEADER")
	{
		// Set leader site as ND --> Value will be resource value
		san_pjs_set_wbs_form_data_value(act_onb,role_onb,"USER_ATTRIBUTE_SAN_UA_S_LEADER_SITE","ND");
		// Update leader on tasks
    	san_pjs_rdpm_update_activity_leader(act_onb,role_onb,field,nvalue);
	}
	return result;
}

// Locker (Generic for WBS form data)
function san_wbs_form_slot_wbsf_data_locker(field)
{
	var result = true;
	var act_onb_number=this.SAN_UA_WBS_FORM_DATA_ACTIVITY_ONB;
	var role_onb=this.SAN_UA_WBS_FORM_DATA_ROLE_ONB;
	var act=plc.work_structure.get(math.round(act_onb_number));
	if (act!=undefined && act!=false && act.internal==false && act.project.WRITABLE)
	{
		result = false;
	}
	if (field=="USER_ATTRIBUTE_SAN_UA_S_LEADER_SITE" && result==false)
	{
		var leader=san_pjs_get_upper_level_value("PRINT_NUMBER".callmacro(act_onb_number,"####"),role_onb,"USER_ATTRIBUTE_SAN_UA_S_LEADER");
		if (leader!="" && leader!=undefined && leader!=false && leader.internal==false)
		{
			result=true;
		}
	}
	return result;
}

// ###############  Dynamic attribute in WBS Form Data table  ####################
function san_pjs_create_dynamic_attribute_wbs_form_data()
{
	var vHash=new hashtable("STRING");
	vHash.set("USER_ATTRIBUTE_SAN_UA_S_LEADER",['','','Leader',plc.resource.name]);
	vHash.set("USER_ATTRIBUTE_SAN_UA_S_LEADER_SITE",['ND','','Leader Site',plc._RM_REVIEW_PT_LOCATIONS.name]);
	vHash.set("USER_ATTRIBUTE_SAN_UA_S_SOURCING",['INT','','Sourcing',plc._INF_PT_CBS2.name]);
	vHash.set("USER_ATTRIBUTE_SAN_UA_S_PROVIDER",['','','Provider',plc._INF_PT_CBS3.name]);
	vHash.set("USER_ATTRIBUTE_SAN_UA_S_TEAM",['','','Team',plc.Resource.name]);
	vHash.set("USER_ATTRIBUTE_SAN_UA_B_EXCLUDED_RES",[false,false,'Excluded resource','BOOLEAN']);
	vHash.set("USER_ATTRIBUTE_SAN_UA_N_COMPLEXITY_FACTOR",[1,0,'Complexity factor','NUMBER']);
	vHash.set("USER_ATTRIBUTE_SAN_UA_N_NUM_SAMPLE",[1,0,'# Sample(s)','NUMBER']);
	vHash.set("USER_ATTRIBUTE_SAN_UA_N_NUM_LOT",[1,0,'# Lot(s)','NUMBER']);
	vHash.set("USER_ATTRIBUTE_SAN_UA_N_NUM_TEST",[1,0,'# Test(s)','NUMBER']);
	
	for (var vSlotField in vHash)
	{
		var vVect=vHash.get(vSlotField);
		var vDynName=vSlotField.replaceregexp("USER_ATTRIBUTE_","");
		vDynName=vDynName.replaceregexp("_UA_","_DA_");
		var slot = new objectAttribute(plc.__USER_TABLE_SAN_RDPM_UT_WBS_FORM_DATA,vDynName,vVect[3]);
		slot.Comment = vVect[2];
		slot.Reader = san_wbs_form_slot_wbsf_data_reader.closure(vSlotField,vVect[0],vVect[1]);
		slot.Modifier = san_wbs_form_slot_wbsf_data_modifier.closure(vSlotField,vVect[0]);
		slot.Locker = san_wbs_form_slot_wbsf_data_locker.closure(vSlotField);
		slot.hiddenInIntranetServer = false;
		slot.connecting = false;
	}
}
try{
    with(plw.no_locking){
        san_pjs_create_dynamic_attribute_wbs_form_data();
    }
}
catch (error e){
    plw.writeToLog("Failed to create dynamic attributes on WBS Form data");
    plw.writeln(e);
}
 
namespace _wbs_form;

// ###############   WBS Form toolbox ####################
// v1.8 - 20211125 - David - PC-5127 Modification of san_pjs_set_wbs_form_data_value to update the cache when updating
// v1.7 - 20211118 - David - PC-4772 Modification of san_pjs_get_upper_level_value to add cache for better performane 
// v1.6 - 20211021 - LFA - Modification of function san_rdpm_restore_wbs_form_data_in_version because in some case the activity can be the activity of another version
//                         Modification of function san_pjs_get_wbs_form_data_object to retrieve the first wbs form data created for activity/role (in case of multiple lines)
// v1.5 - 20210922 - David - PC-4564 Add control on san_pjs_get_wbs_form_value_on_object
// v1.4 - 20210730 - LFA - PC-4306/PC-4165 (Problem with WBS Form Data in Version)
// v1.3 - 20210727 - LFA - PC-4292 - Fix san_pjs_rdpm_update_activity_leader - When leader was empty, values were emptied on all children activities
// v1.2 - PC-4051 - update of san_pjs_get_wbs_form_data_value and san_pjs_set_wbs_form_data_value to add  "# Sample(s)", "# Lot(s)" and "# Test(s)" fields in the hashtable  - AHI
// v1.1 - PC-2397 - update of san_rdpm_update_ph to extend sourcing and Provider Init to Vaccines projects

function san_pjs_get_wbs_form_value_on_object(act_id,role_id,field,type) {
   
    var result;
    if (type=="STRING") result="";
    if (type=="NUMBER") result=1;
	if (type=="BOOLEAN") result=FALSE;
   
    var act_obj=plc.work_structure.get(act_id);
    var act_onb=undefined;
	// Add controls PC-4564
    if (act_obj!=undefined && act_obj instanceof plc.work_structure && act_obj.internal==false) act_onb=act_obj.ONB.tostring();
   
    var role_obj=plc._RM_REVIEW_PT_ROLE.get(role_id);
    var role_onb=undefined;
	// Add controls PC-4564
    if (role_obj!=undefined && role_obj instanceof plc._RM_REVIEW_PT_ROLE && role_obj.internal==false) { 
        role_onb=role_obj.ONB;
    }
	
      if (act_onb!=undefined && role_onb!=undefined) result=san_pjs_get_upper_level_value(act_onb,role_onb,field);
   
    if (result InstanceOf plc._INF_PT_CBS2 || result InstanceOf plc.resource || result InstanceOf plc._RM_REVIEW_PT_LOCATIONS ||  result InstanceOf plc._INF_PT_CBS3) result=result.printattribute();
   
    if (result==undefined) {
        if (type=="STRING") result="";
		if (field=="USER_ATTRIBUTE_SAN_UA_S_SOURCING") result="INT";
		if (field=="USER_ATTRIBUTE_SAN_UA_S_LEADER_SITE") result="ND";
        if (type=="NUMBER") result=1;
		if (type=="BOOLEAN") result=FALSE;
    }
   
    return result;
}

function san_pjs_get_upper_level_value(act_onb,role_onb,field) {
	var vCacheWbsForm=plw.gettemporaryobject("WBS_FORM_"+field,act_onb,role_onb);
	var ThisLevelValue=undefined;
    //if (field=="USER_ATTRIBUTE_SAN_UA_N_COMPLEXITY_FACTOR") ThisLevelValue=1;
	//if (field=="USER_ATTRIBUTE_SAN_UA_B_EXCLUDED_RES") ThisLevelValue=FALSE;
	if (vCacheWbsForm==undefined)
	{
		vCacheWbsForm=new vector();
		var onb_number=act_onb.parsenumber();
		var act_obj=plc.work_structure.get(onb_number);
		
		if (act_obj!="" && act_obj!=undefined && act_obj!=false && act_obj.internal==false)
		{
			// Level activity
			if(act_obj.level==1)
			{
				ThisLevelValue=san_pjs_get_wbs_form_data_value(act_onb,role_onb,field);
			}
			else
			{
				var act_parent_obj=act_obj.WBS_ELEMENT;

				var act_parent_obj_onb="";
				if (act_parent_obj!="" && act_parent_obj!=undefined && act_parent_obj!=false && act_parent_obj.internal==false) {
					act_parent_obj_onb=act_parent_obj.ONB.tostring();
										   
					ThisLevelValue=san_pjs_get_wbs_form_data_value(act_onb,role_onb,field);
					//plw.alert("Value : " +ThisLevelValue);
					//plw.alert("ThisLevelValue: "+ThisLevelValue);
					if (ThisLevelValue!=undefined) {
						if (ThisLevelValue!=undefined) vCacheWbsForm.push(ThisLevelValue);
						vCacheWbsForm.storetemporaryobject("WBS_FORM_"+field,act_onb,role_onb);
						return ThisLevelValue;
					}
					else {
						//plw.alert("On va chercher sur le parent: "+ThisLevelValue);
						if (act_parent_obj_onb!=undefined) {
							ThisLevelValue=san_pjs_get_upper_level_value(act_parent_obj_onb,role_onb,field);
							if (ThisLevelValue!=undefined) vCacheWbsForm.push(ThisLevelValue);
							vCacheWbsForm.storetemporaryobject("WBS_FORM_"+field,act_onb,role_onb);
							return ThisLevelValue;
						}
					}
				}
			}
		}
		if (ThisLevelValue!=undefined) vCacheWbsForm.push(ThisLevelValue);
		vCacheWbsForm.storetemporaryobject("WBS_FORM_"+field,act_onb,role_onb);
	}
	else if (vCacheWbsForm instanceof vector && vCacheWbsForm.length>0) 
		ThisLevelValue=vCacheWbsForm[0];
    //plw.alert("Cas où on n'a rien trouvé");
    return ThisLevelValue;
}

function san_pjs_get_wbs_form_data_object(act_onb,role_onb) {
    var result=undefined;
	act_onb=act_onb.parsenumber();
    var act_obj=plc.work_structure.get(act_onb);
    var role_obj=plc._RM_REVIEW_PT_ROLE.get(role_onb);
    var count=0;
   
   // PC-4166 : check file of activity and wbs form data 
   // PC-4818 : In case of duplicates, take the line with the minimum ONB
    for (var wbs_form_data in act_obj.get("USER_ATTRIBUTE_INVERSE_SAN_UA_WBS_FORM_DATA_ACTIVITY.__USER_TABLE_SAN_RDPM_UT_WBS_FORM_DATA") where (wbs_form_data.file._PM_NF_B_IS_A_VERSION==false || wbs_form_data.file==act_obj.file) order by ['ONB']) {
        if (wbs_form_data.SAN_UA_WBS_FORM_DATA_ROLE==role_obj) {
            result=wbs_form_data;
            break;
        }
    }
    return result;
}

function san_pjs_get_wbs_form_data_value(act_onb,role_onb,field) {
	
	var vHash = new hashtable("STRING");
	vHash.set("USER_ATTRIBUTE_SAN_UA_S_LEADER","__USER_ATTRIBUTE_SAN_UA_B_LEADER_OVERWRITE");
	vHash.set("USER_ATTRIBUTE_SAN_UA_S_LEADER_SITE","__USER_ATTRIBUTE_SAN_UA_B_LEADER_SITE_OVERWRITE");
	vHash.set("USER_ATTRIBUTE_SAN_UA_S_SOURCING","__USER_ATTRIBUTE_SAN_UA_B_SOURCING_OVERWRITE");
	vHash.set("USER_ATTRIBUTE_SAN_UA_S_PROVIDER","__USER_ATTRIBUTE_SAN_UA_B_PROVIDER_OVERWRITE");
	vHash.set("USER_ATTRIBUTE_SAN_UA_S_TEAM","__USER_ATTRIBUTE_SAN_UA_B_TEAM_OVERWRITE");
	vHash.set("USER_ATTRIBUTE_SAN_UA_B_EXCLUDED_RES","__USER_ATTRIBUTE_SAN_UA_B_EXCLUDED_RES_OVERWRITE");
	vHash.set("USER_ATTRIBUTE_SAN_UA_N_COMPLEXITY_FACTOR","__USER_ATTRIBUTE_SAN_UA_B_COMPLEXITY_FACTOR_OVERWRITE");
	vHash.set("USER_ATTRIBUTE_SAN_UA_N_NUM_SAMPLE","__USER_ATTRIBUTE_SAN_UA_B_NUM_SAMPLE_OVERWRITE");
	vHash.set("USER_ATTRIBUTE_SAN_UA_N_NUM_LOT","__USER_ATTRIBUTE_SAN_UA_B_NUM_LOT_OVERWRITE");
	vHash.set("USER_ATTRIBUTE_SAN_UA_N_NUM_TEST","__USER_ATTRIBUTE_SAN_UA_B_NUM_TEST_OVERWRITE");


	var field_overwrite =vHash.get(field);
	
	
    var ThisValue=undefined;
	var Value_Overwrite=false;
	var leader_value;
	var leader_overwrite=false;
    var result=undefined;
    var wbs_form_data_obj=san_pjs_get_wbs_form_data_object(act_onb,role_onb);
    //plw.alert("in san_pjs_get_wbs_form_data_value ; wbs_form_data_obj = "+wbs_form_data_obj);
    if (wbs_form_data_obj!=undefined && wbs_form_data_obj!=false) {
		
		// Case Site
		if (field=="USER_ATTRIBUTE_SAN_UA_S_LEADER_SITE")
		{
			leader_value=wbs_form_data_obj.get("USER_ATTRIBUTE_SAN_UA_S_LEADER");
			leader_overwrite=wbs_form_data_obj.get("__USER_ATTRIBUTE_SAN_UA_B_LEADER_OVERWRITE");
			if (leader_overwrite && leader_value instanceof plc.resource)
			{
				result=leader_value._RM_REVIEW_RA_LOCATION;
			}
			else
			{
				ThisValue=wbs_form_data_obj.get(field);
				Value_Overwrite=wbs_form_data_obj.get(field_overwrite);
				if (Value_Overwrite)
				{
					result=ThisValue;
				}
			}
		}
		else
		{
			ThisValue=wbs_form_data_obj.get(field);
			Value_Overwrite=wbs_form_data_obj.get(field_overwrite);
			if (Value_Overwrite)
			{
				result=ThisValue;
			}
		}
    }
    return result;
}

function san_pjs_get_parent_wbs_form_data_value(act_onb,role_onb,field) {
	var act_onb_number=act_onb.parsenumber();
	var act_parent=plc.work_structure.get(act_onb_number);
	var act_parent_onb=act_parent.ONB.tostring();
	var result=san_pjs_get_wbs_form_data_value(act_onb,role_onb,field);
	return result;	
}

function san_pjs_set_wbs_form_data_value(act_onb,role_onb,field,fvalue) {

	var vHash = new hashtable("STRING");
	vHash.set("USER_ATTRIBUTE_SAN_UA_S_LEADER","USER_ATTRIBUTE_SAN_UA_B_LEADER_OVERWRITE");
	vHash.set("USER_ATTRIBUTE_SAN_UA_S_LEADER_SITE","USER_ATTRIBUTE_SAN_UA_B_LEADER_SITE_OVERWRITE");
	vHash.set("USER_ATTRIBUTE_SAN_UA_S_SOURCING","USER_ATTRIBUTE_SAN_UA_B_SOURCING_OVERWRITE");
	vHash.set("USER_ATTRIBUTE_SAN_UA_S_PROVIDER","USER_ATTRIBUTE_SAN_UA_B_PROVIDER_OVERWRITE");
	vHash.set("USER_ATTRIBUTE_SAN_UA_S_TEAM","USER_ATTRIBUTE_SAN_UA_B_TEAM_OVERWRITE");
	vHash.set("USER_ATTRIBUTE_SAN_UA_B_EXCLUDED_RES","USER_ATTRIBUTE_SAN_UA_B_EXCLUDED_RES_OVERWRITE");
	vHash.set("USER_ATTRIBUTE_SAN_UA_N_COMPLEXITY_FACTOR","USER_ATTRIBUTE_SAN_UA_B_COMPLEXITY_FACTOR_OVERWRITE");
	vHash.set("USER_ATTRIBUTE_SAN_UA_N_NUM_SAMPLE","USER_ATTRIBUTE_SAN_UA_B_NUM_SAMPLE_OVERWRITE");
	vHash.set("USER_ATTRIBUTE_SAN_UA_N_NUM_LOT","USER_ATTRIBUTE_SAN_UA_B_NUM_LOT_OVERWRITE");
	vHash.set("USER_ATTRIBUTE_SAN_UA_N_NUM_TEST","USER_ATTRIBUTE_SAN_UA_B_NUM_TEST_OVERWRITE");
	
	var field_overwrite =vHash.get(field);
	
    var act_onb_string=act_onb;
    var act_onb_number=act_onb.parsenumber();
    var expected_id=act_onb_string+"_"+role_onb;
    var act_rel=plc.work_structure.get(act_onb_number);
	if (act_rel!=undefined && act_rel!=false && act_rel.internal==false)
	{
	    // update the cache
	    var vCacheWbsForm=new vector(fvalue);
        vCacheWbsForm.storetemporaryobject("WBS_FORM_"+field,act_onb,role_onb);
		var act_file=act_rel.get("FILE");
		var role_rel=plc._RM_REVIEW_PT_ROLE.get(role_onb);
	   
		//var wbs_form_data_obj=plc.__USER_TABLE_SAN_RDPM_UT_WBS_FORM_DATA.get(expected_id);
		var wbs_form_data_obj=san_pjs_get_wbs_form_data_object(act_onb,role_onb);
		//plw.alert("in san_pjs_set_wbs_form_data_value ; wbs_form_data_obj = "+wbs_form_data_obj);
				
		if (act_rel.level==1)
		{
			if (fvalue!=undefined) {
				if (wbs_form_data_obj==undefined || wbs_form_data_obj==false) {
					wbs_form_data_obj=new plc.__USER_TABLE_SAN_RDPM_UT_WBS_FORM_DATA
									(NAME: expected_id,
									FILE: act_file,
									SAN_UA_WBS_FORM_DATA_ACTIVITY: act_rel,
									SAN_UA_WBS_FORM_DATA_ROLE: role_rel);
				}
				wbs_form_data_obj.set(field,fvalue);
				wbs_form_data_obj.set(field_overwrite,true);
			}	
		}
		else
		{
			// Check the value at parent level
			var act_parent=act_rel.WBS_ELEMENT;
			if(act_parent!=undefined && act_parent!=false && act_parent.internal==false)
			{
				var act_parent_onb=act_parent.ONB.tostring();
				var parent_value = san_pjs_get_upper_level_value(act_parent_onb,role_onb,field);

				if (fvalue==parent_value)
				{
					if (wbs_form_data_obj!=undefined && wbs_form_data_obj!=false) {
						wbs_form_data_obj.set(field,fvalue);
						wbs_form_data_obj.set(field_overwrite,false);
					}
				}
				else
				{	
					if (fvalue!=undefined) {
						if (wbs_form_data_obj==undefined || wbs_form_data_obj==false) {
							wbs_form_data_obj=new plc.__USER_TABLE_SAN_RDPM_UT_WBS_FORM_DATA
											(NAME: expected_id,
											FILE: act_file,
											SAN_UA_WBS_FORM_DATA_ACTIVITY: act_rel,
											SAN_UA_WBS_FORM_DATA_ROLE: role_rel);
						}
						wbs_form_data_obj.set(field,fvalue);
						wbs_form_data_obj.set(field_overwrite,true);
					}	
				}
			   
				// cleaning       
				if (wbs_form_data_obj.SAN_UA_B_WBS_FORM_OVERWRITE==false) {
					plw.writetolog("Deleting empty entry WBS Form data "+wbs_form_data_obj);
					wbs_form_data_obj.delete();	   
				}
			}
		}
	}
}

// Function to update leader on activity
function san_pjs_rdpm_update_activity_leader(act_onb,role_onb,field,nvalue)
{
	var act_onb_number = act_onb.parsenumber();
	var act_obj=plc.work_structure.get(act_onb_number);	
	var key="";
	var act_type_onb="";
	var obs_onb="";
	var wbs_form_map_obj="";
	
	with(act_obj.fromObject())
	{
		for (var vAct in plc.work_structure where vAct.AF==undefined)
		{
			act_type_onb = vAct.WBS_TYPE.ONB.tostring();
			obs_onb = vAct.OBS_ELEMENT.ONB.tostring();
			key = role_onb + "_" + act_type_onb + "_" + obs_onb;
			wbs_form_map_obj=plc.__USER_TABLE_SAN_RDPM_UR_WBS_FORM_MAP_LEADER.get(key);
			
			if (wbs_form_map_obj!=undefined && wbs_form_map_obj!=false){
					
				if (san_pjs_leader_defined_by_act(act_obj,vAct,Role_ONB,"SAN_UA_B_LEADER_OVERWRITE"))
				{
					if (nvalue=="")
					{
						vAct.SAN_RDPM_UA_S_PHARMA_LEADER="";
						vAct._RM_REVIEW_RA_LOCATION="ND";
					}
					else
					{
						var site = nvalue._RM_REVIEW_RA_LOCATION;
						if (site.printattribute()=="") site="ND";
						vAct.SAN_RDPM_UA_S_PHARMA_LEADER=nvalue.name;
						vAct._RM_REVIEW_RA_LOCATION=site;
					}
				}				
			}
		}
	}
}

// Function to update leader site on activity
function san_pjs_rdpm_update_activity_leader_site(role_onb,field,nvalue)
{
	var act_onb=context.SAN_UA_TMP_CURRENT_ACT_WBS_FORM_ONB;
	var act_onb_number = act_onb.parsenumber();
	var act_obj=plc.work_structure.get(act_onb_number);
	var key="";
	var act_type_onb="";
	var obs_onb="";
	var wbs_form_map_obj="";
	
	with(act_obj.fromObject())
	{
		for (var vAct in plc.work_structure where vAct.AF==undefined)
		{
			act_type_onb = vAct.WBS_TYPE.ONB.tostring();
			obs_onb = vAct.OBS_ELEMENT.ONB.tostring();
			key = role_onb + "_" + act_type_onb + "_" + obs_onb;
			wbs_form_map_obj=plc.__USER_TABLE_SAN_RDPM_UR_WBS_FORM_MAP_LEADER.get(key);
			
			if (wbs_form_map_obj!=undefined && wbs_form_map_obj!=false){
					
				if (san_pjs_leader_defined_by_act(act_obj,vAct,Role_ONB,"SAN_UA_B_LEADER_SITE_OVERWRITE"))
				{
					vAct._RM_REVIEW_RA_LOCATION=nvalue;	
				}				
			}
		}
	}
}

// Check if the activity define leader / site on lower activities
function san_pjs_leader_defined_by_act(Defined_Act,Act,Role_ONB,field_overwrite)
{
	var result = false;
	var act_parent;
	var act_onb = Act.ONB.tostring();
	var expected_id=act_onb+"_"+Role_ONB;
    var wbs_form_data_obj=plc.__USER_TABLE_SAN_RDPM_UT_WBS_FORM_DATA.get(expected_id);
	
	if (Act==Defined_Act) 
	{
		return true;
	}
	else
	{
		if (wbs_form_data_obj!=undefined && wbs_form_data_obj!=false && wbs_form_data_obj.get(field_overwrite)==true)
		{
			return false;	
		}
		else
		{
			act_parent=Act.WBS_ELEMENT;
				if (act_parent!=undefined && act_parent!=false && act_parent.internal==false)  return san_pjs_leader_defined_by_act(Defined_Act,act_parent,Role_ONB,field_overwrite);
		}
	}
	return result;
}

// Update Leader and Sites on activities from toolbar
function san_rdpm_wbs_form_update_leader_and_site()
{
	var CurrentProject = plw.CurrentPageObject();
	// Launch on selection
	var selection= false;
	 for( var vAct_selection in #TOOL-BAR::SELECTION-ATOM# ){
		selection= true;
		with(vAct_selection.fromObject())
		{
			
			for (var vAct in plc.workstructure where vAct.AF==undefined && vAct.SAN_UA_RDPM_S_WBS_FORM_LEADER_ROLE!="")
			{
				vAct.SAN_RDPM_UA_S_PHARMA_LEADER=vAct.SAN_UA_RDPM_S_WBS_FORM_LEADER;
				vAct._RM_REVIEW_RA_LOCATION=vAct.SAN_UA_RDPM_S_WBS_FORM_LEADER_SITE;
			}
		}
	 }
	// Launch on full project
	if(selection==false && plw.Question("Do you want to launch recomputation of leader and site on all project?"))
	{
		with(CurrentProject.fromObject())
		{
			for (var vAct in plc.workstructure where vAct.AF==undefined && vAct.SAN_UA_RDPM_S_WBS_FORM_LEADER_ROLE!="")
			{
				vAct.SAN_RDPM_UA_S_PHARMA_LEADER=vAct.SAN_UA_RDPM_S_WBS_FORM_LEADER;
				vAct._RM_REVIEW_RA_LOCATION=vAct.SAN_UA_RDPM_S_WBS_FORM_LEADER_SITE;
			}
		}
	}
}

// Object = this.editor
function san_rdpm_update_ph(object)
{
	if (object.file.SAN_RD_IS_RND_PROJECT)
	{
		object.setsensitive("RESOURCE");
		object.setsensitive("_RM_REVIEW_RA_LOCATION");
		var role=object._RM_REVIEW_RA_ROLE;
		var activity=object.ACTIVITY;
		if (role instanceof plc._RM_REVIEW_PT_ROLE)
		{
			// Set default values
			object._INF_RA_CBS3="";
			object._RM_REVIEW_RA_LOCATION="ND";
			object._INF_RA_CBS2="INT";
			// Set activity values
			if (object.ACTIVITY._RM_REVIEW_RA_LOCATION instanceof plc._RM_REVIEW_PT_LOCATIONS && object.ACTIVITY._RM_REVIEW_RA_LOCATION.internal==false) object._RM_REVIEW_RA_LOCATION=object.ACTIVITY._RM_REVIEW_RA_LOCATION;
			if (object.ACTIVITY.SAN_RDPM_UA_ACT_SOURCING instanceof plc._INF_PT_CBS2 && object.ACTIVITY.SAN_RDPM_UA_ACT_SOURCING.internal==false) object._INF_RA_CBS2=object.ACTIVITY.SAN_RDPM_UA_ACT_SOURCING;
			if (object.ACTIVITY.SAN_RDPM_UA_ACT_PROVIDER instanceof plc._INF_PT_CBS3 && object.ACTIVITY.SAN_RDPM_UA_ACT_PROVIDER.internal==false) object._INF_RA_CBS3=object.ACTIVITY.SAN_RDPM_UA_ACT_PROVIDER;
			// Set role value
			if (activity instanceof plc.workstructure && role.SAN_UA_RDPM_B_DISPLAYED_WBS_FORM_PHARMA)
			{
				object._INF_RA_CBS3=plw.san_pjs_get_wbs_form_string_value_on_object(activity.printattribute(),role.printattribute(),"USER_ATTRIBUTE_SAN_UA_S_PROVIDER");
				object._INF_RA_CBS2=plw.san_pjs_get_wbs_form_string_value_on_object(activity.printattribute(),role.printattribute(),"USER_ATTRIBUTE_SAN_UA_S_SOURCING");
				if (object.file.SAN_RDPM_B_RND_PHARMA_PROJECT) {object._RM_REVIEW_RA_LOCATION=plw.san_pjs_get_wbs_form_string_value_on_object(activity.printattribute(),role.printattribute(),"USER_ATTRIBUTE_SAN_UA_S_LEADER_SITE");}
			}
			else
			{
				if (role._RM_REVIEW_RA_LOCATION instanceof plc._RM_REVIEW_PT_LOCATIONS && role._RM_REVIEW_RA_LOCATION.internal==false)
					object._RM_REVIEW_RA_LOCATION=role._RM_REVIEW_RA_LOCATION;
			}
		}
	}
}

// Function to fix problem with the copy of the WBS Form data in versions
function san_rdpm_restore_wbs_form_data_in_version(version)
{
	var hash_version = new hashtable("STRING");
	var hash_activity =  new hashtable("STRING");
	var key_act;
	var version_act;
	var file;
	// Loop on WBS Form data for which the activity is not is the same file as the WBS Form data object
	for (var wbs_form_data in plc.__USER_TABLE_SAN_RDPM_UT_WBS_FORM_DATA where wbs_form_data.FILE._PM_NF_B_IS_A_VERSION && (version=="" || wbs_form_data.file.printattribute()==version) && wbs_form_data.SAN_UA_WBS_FORM_DATA_ACTIVITY!="" && wbs_form_data.SAN_UA_WBS_FORM_DATA_ACTIVITY.FILE!=wbs_form_data.file)
	{
		file = wbs_form_data.file;
		// If the activity of the version have not been entered in the hashtable, we add it
		if (hash_version.get(file.NAME)==undefined)
		{
			with(file.fromObject())
			{
				for (var vAct in plc.workstructure)
				{
					hash_activity.set(file.NAME+"_"+vAct.ORIGIN_ACTIVITY.printattribute(),VAct);
				}
			}
			hash_version.set(file.NAME,"1");
		}
		// Calculate the key to retrieve the activity in the hashtable --> Return the activity of the version
		// LFA - 2021-10-22 : Modification because in some case the activity can be the activity of another version
		if (wbs_form_data.SAN_UA_WBS_FORM_DATA_ACTIVITY.FILE._PM_NF_B_IS_A_VERSION)
			key_act =  file.NAME+"_"+wbs_form_data.SAN_UA_WBS_FORM_DATA_ACTIVITY.ORIGIN_ACTIVITY.printattribute();
		else
			key_act =  file.NAME+"_"+wbs_form_data.SAN_UA_WBS_FORM_DATA_ACTIVITY.printattribute();
			
		version_act = hash_activity.get(key_act);
		// Update the activity to have the activity of the version
		if (version_act instanceof plc.workstructure)
		{
			with (plw.no_locking){
				wbs_form_data.SAN_UA_WBS_FORM_DATA_ACTIVITY=version_act;
			}
		}
	}
	
	if (version!="")
	{
	    plw.alert("WBS Form data has been restored for project version " + version +".");
	}

} 
//
// 
//  PLWSCRIPT : SAN_RDPM_JS2_WORKSPACE
// 
//  AUTHOR  : S. AKAAYOUS
//
//
//  Creation : 2020/07/08 SAK
//  Script used for PC 408 : Project activities accessible via the "By workspace" style 
//
//  Modif : 2020/09/30 IGU
//  Transformation of the script to V2 to be used as a user script
//
//  Modif : 2022/02/24 IGU
//  Syntax fixes & cleaning of useless comments
//
//***************************************************************************/

namespace _san_rdpm_pm;


function sun_rdpm_func_get_activity_from_selected_obs(vObs){
	var vActVect = new vector();
	var Alloc_Act;
	var result;
	var s_title = '% of progress ';
	var n_sum = 0;
	
	for (var vObj in vObs.get("OBS_CHILDREN")) {n_sum++;}
	
	
	with(plw.monitoring (title: s_title, steps: n_sum)){
		// Inverse relations --> Returns Activity, Resources and OBS linked to the OBS
		for (var vObj in vObs.get('OBS_CHILDREN')){
			if (vObj instanceof plc.work_structure){
				// Check if the project of the Activity is in the list of project
				if (vObj.PROJECT.CallBooleanFormula('OPEN AND LIST_FIND(STATE,\"Active\") AND IF OPX2_CONTEXT._FF_AA_S_LIST_NAME <> \"\" then evaluate_filter(OPX2_CONTEXT._FF_DA_S_PORTFOLIO_CONTEXT_FILTER) ELSE true FI')){
					// Add the activity to vector
					vActVect.push(vObj);	
				}
			}		
			else if (vObj instanceof plc.resource){
				// Get allocations of the resource
				for (var vALLOC in vObj.get('ALLOCATIONS')){
					// Get the activity of the allocation
					Alloc_Act=vALLOC.ACTIVITY;
					
					// Check if the project of the Activity is in the list of project
					if (Alloc_Act.PROJECT.CallBooleanFormula('OPEN AND STATE IN (\"Active\") AND IF OPX2_CONTEXT._FF_AA_S_LIST_NAME <> \"\" then evaluate_filter(OPX2_CONTEXT._FF_DA_S_PORTFOLIO_CONTEXT_FILTER) ELSE true FI')){
						// Add the activity to vector
							vActVect.push(Alloc_Act);
					}
				}
			}			
			s_title.monitor(n_sum);
		}
	}
	
	result = vActVect.removeduplicates();
	return result;
}

// Function to init and open the virtual dataset
function san_rdpm_func_goto_virtualdataset_on_selected_activities_workspace(vActVect){
	if(vActVect!= undefined && vActVect instanceOf vector){
		if(vActVect.length>0){
			var vDataSet = new plc.virtual_dataset();
			vDataSet.selected_activities = vActVect;
			// We set a comment on tha dataset to identify Workspace (allow to display specific features on "Workspaces")
			vDataSet.comment = 'WorkSpace';

			if(vDataSet instanceOf plc.virtual_dataset){
				plw._inf_open_project(THIS : vDataSet);
			}
		} else {
			plw.alert('No data to display, please change your selection criteria');
		}
	}
}

// san_rdpm_fun_goto_virtualdataset_on_selected_obs : fonction called in the link L1
function san_rdpm_fun_goto_virtualdataset_on_selected_obs(vOBS){
	context.SAN_RDPM_CT_NTP_WORK_OBS = '';
	var v_virtualdataset_objects = sun_rdpm_func_get_activity_from_selected_obs(vOBS);
	
	san_rdpm_func_goto_virtualdataset_on_selected_activities_workspace(v_virtualdataset_objects);
	context.SAN_RDPM_CT_NTP_WORK_OBS = vOBS.printattribute();
	
}

function san_rdpm_func_goto_virtualdataset_on_multiple_obs(){
	//reset of obs to display
	context.SAN_RDPM_CT_NTP_WORK_OBS = '';
	// E7 compliancy, replace _InfGetSelectedObjectOnClass by selection_filterWithClass
	var SelectedElements = plw.selection_filterWithClass('opxRESPONSIBILITY');
	if(SelectedElements != undefined && SelectedElements instanceOf vector){
		//list of OBS concerned
		var v_obsid = '';
		//List of object to include in the virtualdataset
		var v_virtualdataset_objects = new vector();

		for (var o_obs_element in SelectedElements){
			//adding activities to the vector of element for the virtualdataset
			v_virtualdataset_objects = v_virtualdataset_objects+sun_rdpm_func_get_activity_from_selected_obs(o_obs_element);
			
			v_obsid = (v_obsid!='') ? v_obsid+',' : '';	
			v_obsid = v_obsid+o_obs_element.printattribute();
		}
		
		san_rdpm_func_goto_virtualdataset_on_selected_activities_workspace(v_virtualdataset_objects);
		context.SAN_RDPM_CT_NTP_WORK_OBS=v_obsid;
	}
} 
//
//  PLWSCRIPT : SAN_RDPM_SCRIPT_EXPORT_SHINE
//
//  AUTHOR  : Harilanto RAKOTOVAO
//	Object: export Pharma Planned expenditures, planned hours, Links, Activities and project to SHINE
//
//  Creation : 2021/01/21
//  HRA 2021/03/17 : Add condition on export : vCheqF
//  HRA 2021/03/26 : remove set function on string delimiter => use CSV escape mode = "When necessary" instead
//
//  script to use in the batch SAN_RDPM_BA_EXPORT_TO_SHINE
//
//***************************************************************************/

namespace _shine_impexTarget;


function SanExport (string argTarget, string argFormat)
{	
   // plw.writeln("Starting export of "+argTarget);
    var plc.impextarget Target = plc.impextarget.get(argTarget);
   
    if(Target instanceOf plc.ImpexTarget){
        
        var plc.impexformat Format = plc.impexformat.get(argFormat);
        //empty String delimiter
        //Format.set("CSV_STRING_DELIMITER","");
        //export
        Format.DoExportWithFormatAndTarget(Target);
		plw.writeln("Exporting: "+argFormat+"_"+argTarget);
    }
}

var boolean vCheqF=_san_continuum.san_js_check_run_batch("weekly",arg2:1,arg3:[1,2,3,4,5]);
if (vCheqF==true) {
    //SanExport 
    // Planned expenditure
    SanExport("SAN_RDPM_IMPEX_TARGET_SHINE_PLANNED_EXPENDITURE:CSV file format", "Planned expenditure:SAN_RDPM_IMPEX_FORMAT_SHINE_PLANNED_EXPENDITURE");
    // Planned hours
    SanExport("SAN_RDPM_IMPEX_TARGET_SHINE_PLANNED_HOURS:CSV file format", "Planned hours:SAN_RDPM_IMPEX_FORMAT_SHINE_PLANNED_HOURS");
    // Activities
    SanExport("SAN_RDPM_IMPEX_TARGET_SHINE_ACTIVITY:CSV file format", "Activity:SAN_RDPM_IMPEX_FORMAT_SHINE_ACTIVITY");
    // Links
    SanExport("SAN_RDPM_IMPEX_TARGET_SHINE_LINK:CSV file format", "Link:SAN_RDPM_IMPEX_FORMAT_SHINE_LINK");
    //Projects
    SanExport("SAN_RDPM_IMPEX_TARGET_SHINE_PROJECT:CSV file format", "Project:SAN_RDPM_IMPEX_FORMAT_SHINE_PROJECT");
} 
/*
* Script V2
* Autor : Bekkal Amine
* PC-1531 : Update TimeCard Manager by Networ Id for the resource Pharma ( Functional + no open + simu )
* Condition : Networ Id is not empty and Networ Id existe in user tabel and TimeCard Manager is empty
* Date Creation : 09/10/2020 
* PC-2175 : Update Script name - 07/12/2020 
// 24/12/2020 : SAS - PC-2784  : Remove resource simulation objets.
* ABE: 09/08/2021: PC-4210 - Add additional conditions in the User & Resource association mechanism (TimeCard Manager field) Pharma + Vaccine
*                            Replace filter "where res.SAN_UA_RDPM_RES_TYP_PHAR == true &....)" in loop for by res.SAN_RDPM_UA_B_UPDATE_TC_MANAGER
* ABO: 30/03/2022: PC-1965 - Call the function san_redpm_res_split_abs(res) to be launched by the daily batch SAN_RDPM_BA_RES_NETWORK_ID_TC_MANAGER
*/
namespace _san_rdpm_resource_update;

function san_rdpm_res_update_TimeCard_Manager_By_NetworkID(){
    plw.writeln("Appel san_rdpm_res_update_TimeCard_Manager_By_NetworkID");
   
    //var o_simu_res_file = plc.common_dataset.get("SAN_CF_SIMU_RES_DATA");
    
   //* PC-4210
   /* for (var res in plc.resource where res.SAN_UA_RDPM_RES_TYP_PHAR == true &&
             res.SAN_UA_RDPM_RES_OPEN == false &&
             //res.file != o_simu_res_file &&
             res.SAN_UA_RDPM_RES_OPER != "Functional" &&
             res.SAN_UA_RDPM_NETWORK_ID.stringIsNotNull() &&
             res.MANAGER == "")
    */
    for (var res in plc.resource where res.SAN_RDPM_UA_B_UPDATE_TC_MANAGER)
    {
        var o_user = plc.opx2_user.get(res.SAN_UA_RDPM_NETWORK_ID);
        var resource_type = res.SAN_UA_RDPM_RES_TYP_PHAR ? "PHARMA" : "PASTEUR" ;
        if(o_user != undefined) {
            res.MANAGER=res.SAN_UA_RDPM_NETWORK_ID;
            plw.writeln("Update Resource Name : "+ res.NAME + "| Network ID : "+res.SAN_UA_RDPM_NETWORK_ID + "| TimeCard Manager : "+res.MANAGER.NAME);
            plw.writeln("Details Resource => Resource Type : "+ resource_type + "| Open? : "+res.SAN_UA_RDPM_RES_OPEN + "| Simulation? : "+res.callbooleanformula("SAN_RDPM_B_RES_SIMU") + "| Operationality : "+res.SAN_UA_RDPM_RES_OPER
                        +"| Availability : "+RES.SAN_UA_RDPM_RES_PERC_AVAIL +"| Contrat Type : "+RES.SAN_UA_RDPM_RES_CTR_TYP.NAME); 

        }else plw.writeln("Impossible to update Resource Name : " + res.NAME +" => The User corresponding to Network ID Don't exit : " + o_user);
    }
}
san_rdpm_res_update_TimeCard_Manager_By_NetworkID();

// Update absenses on vaccines resources
for (var res in plc.resource where res.SAN_UA_RDPM_RES_TYP_PAST && res.INACTIVE==false)
{
  _split_abs.san_redpm_res_split_abs(res);
} 
function Send_Offender_Mail_Tester()
{
	var vect=new vector("E0128162","E0128162","E0128162","E0128162","DEARAUJO","E0351898","E0023893","I0002718","E0315185","E0391613","E0296837","E0391613","E0391613","E0391613","E0391613","E0391613","E0391613","E0391613","E0391613","E0391613","E0178885","MAUREEN.HELD");
	for (var s_user in vect)
	{
	//This function will send mail to the specified user only
	var o_user="opxUser".get(s_user);
	var test_date=new date();
	SP_SendOffendersMailToUser(o_user,test_date);
	}
}
"Send_Offender_Mail_Tester".exportFunction()
function Send_Offender_Mail_Tester()
{
	var vect=new vector("E0128162","E0128162","E0128162","E0128162","DEARAUJO","E0351898","E0023893","I0002718","E0315185","E0391613","E0296837","E0391613","E0391613","E0391613","E0391613","E0391613","E0391613","E0391613","E0391613","E0391613","E0178885","MAUREEN.HELD");
	for (var s_user in vect)
	{
	//This function will send mail to the specified user only
	var o_user="opxUser".get(s_user);
	var test_date=new date();
	SP_SendOffendersMailToUser(o_user,test_date);
	}
}
"Send_Offender_Mail_Tester".exportFunction()
 
//* -*- Mode: C++ -*- *****************************************************
//  COPYRIGHT (C) PLANISWARE Date: 2017/09/08 09:47:05                                             
//                                                                          
//  All Rights Reserved                                                     
// 
//  This program and the information contained herein are confidential to
//  and the property of PLANISWARE and are made available only to PLANISWARE
//  employees for the sole purpose of conducting PLANISWARE business.
// 
//  This program and copy therof and the information contained herein shall
//  be maintained in strictest confidence ; shall not be copied in whole or
//  in part except as authorized by the employee's manager ; and shall not
//  be disclosed or distributed (a) to persons who are not PLANISWARE employees,
//  or (b) to PLANISWARE employees for whom such information is not necessary in
//  connection with their assigned responsabilities.
// 
//  There shall be no exceptions to the terms and conditions set forth
//  herein except as authorized in writing by the responsible PLANISWARE General
//  Manager.
//
// 
//  FILE    : RCSfile: SPV6_NV_PORTFOLIO.ojs,v 
// 
//  AUTHOR  : Author: mlakhal 
// 
//  VERSION : Id: SPV6_NV_PORTFOLIO.ojs,v3.45 2019/06/06 14:36 MBL 
// 
//  PURPOSE :
// 
//  HISTORY :
//  Log: SPV6_NV_PORTFOLIO.ojs,v
var revision_number="3.44";
//

//  Revision 3.44 2019/01/03 13:40 MBL Update sp_ojs_display_prj_report to recompute date and cost on the project before the dashboard display
//  Revision 3.43 2018/05/02 13:17 LFA Update sp_ojs_display_arrow_orange and sp_ojs_display_arrow_blue to display no image if there is no arrow to display
//  Revision 3.42 2018/04/12 10:40 LFA OTD 76552 - Redefinition of function sp_ojs_dashboard_viewer by Planisware
//  Revision 3.41 2018/03/02 14:22 JBE Update sp_ojs_display_arrow_blue to remove condition on orange arrow
//	Revision 3.40 2018/02/23 09:15 JBE Update sp_ojs_nv_year_filter_toolbar to display year-10 to year+40 because it impacts Entry & Exit Toolbar
//	Revision 3.39 2018/02/13 14:11 JBE Update sp_ojs_display_arrow_orange to display orange arrow only for current year and to include MTERM condition
//									   Update sp_ojs_display_arrow_blue to include MTERM condition, and to apply it only if there is no orange arrow to display
//									   Update sp_ojs_nv_dynamic_act_filter_final to include MTERM condition and remove condition about yearly baseline (4 weeks) 
//									   Update sp_ojs_check_MTERM_FORMULA to compare PS instead of PF
//									   Update sp_ojs_nv_year_filter_toolbar to display year-1 to year+40
//									   
//  Revision 3.38 2018/02/12 18:50 JBE Update  sp_ojs_next_phase to take in account approach to calculate next phase
//  Revision 3.37 2018/02/12 09:30 JBE Update function _kb_postit_drawPostIt + Ajout de la function _kb_kanban_updateScrollView pour l'OTD 75128
//	Revision 3.36 2017/02/02 16:11 YSA correcte functions for nv portfolio batch
//  Revision 3.35 2018/01/25 15:56 JBE sp_ojs_display_arrow, "else" added on line 702 because to avoid last condition displaying dark bue arrow will by-pass orange arrow for MTERM case
//  
//	Revision 3.34 2017/12/27 16:11 YSA correcte functions for nv portfolio batch
//	sp_del_useless_ref_all_versions, sp_create_nv_portfolio_versions, sp_update_nv_portfolio_list, sp_create_nv_port_versions,sp_delete_old_versions
//
//  Revision 3.33 2018/01/09 16:11 
//		- JBE Update sp_ojs_count_mouvement_dynamic_report to not count TBC activity type as a movment
//		- JBE Re-activation of sp_ojs_copy_ref_in_version using new script provided by PLW
//
//	Revision 3.32 2017/12/27 16:11 YSA correcte sp_ojs_copy_ref_in_version in spv6_create_nv_portfolio_version1 and adding sp_clean_useless_ref_version function
//
//  Revision 3.31 2017/12/22 16:11 NGU deactivate sp_ojs_copy_ref_in_version in spv6_create_nv_portfolio_version1
//
//  Revision 3.30  2017/12/21 10:49:25  lfavre
//  NV Pipeline Projection : Creation of functions sp_ojs_check_MSTAR_FORMULA, sp_ojs_check_MTERM_FORMULA, sp_ojs_display_arrow_orange, sp_ojs_display_arrow_blue and sp_ojs_drawArrow
//  Creation of function sp_ojs_has_is_movement and modification of function sp_ojs_count_mouvement_dynamic_report to count movements on phases
//
//  Revision 3.29  2017/12/15 10:49:25  AHasni
//  addin sp_ojs_all_tpp_toolbar function
//
//  Revision 3.28  2017/12/13 10:49:25  flecanut
//  - temporary workaround for OTD 74712 : set and unset opxVariable 'DO-NOT-STORE-REFERENCES-IN-PROJECT-VERSION' in 'spv6_create_nv_portfolio_version'
//
//  Revision 3.27  2017/09/08 01:31:22  flecanut
//  - correction of functions 'sp_ojs_copy_ref_in_version' and 'spv6_create_nv_portfolio_version1' to enable reference coy to project versions 
//  
//	Revision 3.26 mrochas 2017/11/16
//	supression de la fonction sp_ojs_initialiaze_toolbarfilter
//	jbeaulieu
//  - update method _kb_postit_drawPostIt
// 
//  Revision 3.25  2017/09/08 09:47:05  mlakhal
//  - add sp_js_list_prj_portfolio
//
//  Revision 3.24  2017/09/08 08:59:53  mlakhal
//  - add sp_ojs_initialiaze_toolbarfilter
//
//  Revision 3.23  2017/09/01 13:02:24  mlakhal
//  - typo
//
//  Revision 3.22  2017/09/01 13:00:25  mlakhal
//  - add sp_ojs_count_mouvement_dynamic_report
//
//  Revision 3.21  2017/08/21 15:31:30  mlakhal
//  - add function to count boxes in pipeline dynamic view
//
//  Revision 3.20  2017/08/18 13:51:28  mlakhal
//  - update function for counting
//
//  Revision 3.19  2017/08/18 12:54:32  mlakhal
//  - add function for TC evol (multi value of field Timecard Manager)
//
//  Revision 3.18  2017/08/17 15:35:30  mlakhal
//  - new function to display arrow in pipeline arrow
//
//  Revision 3.17  2017/08/17 12:49:06  mlakhal
//  - set NV version to Inaccessible to other
//
//  Revision 3.16  2017/08/11 11:22:35  mlakhal
//  - modification of _kb_postit_drawPostIt TO color text in Entry & exit
//
//  Revision 3.15  2017/08/07 15:11:45  mlakhal
//  - do not check is project is writable when creating version.
//
//  Revision 3.14  2017/08/04 14:11:01  mlakhal
//  - modification of spv6_create_nv_portfolio_version1 to unlock project is locked and modification of read only group
//
//  Revision 3.13  2017/07/10 13:17:28  mlakhal
//  - correction of sp_ojs_open_tpp_file
//
//  Revision 3.12  2017/07/06 15:31:06  mlakhal
//  - correction on version generation
//
//  Revision 3.11  2017/06/29 13:40:03  mlakhal
//  - spv6_create_nv_portfolio_version1 : we copy the last monthly and last yearly in the version
//
//  Revision 3.10  2017/06/29 10:06:51  mlakhal
//  - release 1.7
//
//  Revision 3.9  2017/06/19 16:12:27  mlakhal
//  - nv pipeline timeline
//
//  Revision 3.8  2017/06/14 14:48:40  mlakhal
//  - new functions for pipeline
//
//  Revision 3.7  2017/06/12 07:42:52  mlakhal
//  modify method _kb_postit_drawBackground
//
//  Revision 3.6  2017/06/12 07:16:58  mlakhal
//  - add sp_ojs_act_postit_color
//
//  Revision 3.5  2017/06/07 14:45:53  mlakhal
//  - add sp_ojs_open_tpp_file
//
//  Revision 3.4  2017/05/09 08:49:45  mlakhal
//  - nv portfolio version release 1.0
//
//  Revision 3.3  2017/05/05 14:51:30  mlakhal
//  *** empty log message ***
//
//  Revision 3.2  2017/05/05 14:49:36  mlakhal
//  *** empty log message ***
//
//  Revision 3.1  2017/05/05 14:03:49  mlakhal
//  - function called in batch SPV6_BATCH_NV_PORTFOLIO
//   (header added automatically)
//
//**************************************************************************
//script called in batch to create projects version in NV Portfolio

function spv6_create_nv_portfolio_version1 ()
{
withoutlocking
{
	var nv_portfolio_name = "NV_PORTFOLIO_SELECTION";
	var nv_portfolio_final_name = "NV_PORTFOLIO_REPORTING";
	var portfolio = "Opx_FF_PT_FAVOR_FILTERS".get(nv_portfolio_name);
	var count = 0;
	var list_ref;	//set semaphore for max number of creation alert
	context.SP_AA_SB_SEM_AL_VERSION = true;
	
	//empty final portfolio list
	var portfolio_final = "Opx_FF_PT_FAVOR_FILTERS".get(nv_portfolio_final_name);
	if (portfolio_final instanceof Opx_FF_PT_FAVOR_FILTERS && portfolio_final.printAttribute("ID") != "")
	{
		portfolio_final._FF_AA_S_PROJ_LIST = "";
	}
	
	if (portfolio instanceof Opx_FF_PT_FAVOR_FILTERS && portfolio.printAttribute("ID") != "")
	{
		
		//delete previous version created
		writeln("***** Deleting old version");
		withmonitoring(true)
		{
			
			for (var old_version in opxproject where old_version.VERSION_NUMBER != "" &&  old_version.SPV6_AA_B_NV_VERSION == true)
			{
				writeln(old_version.printAttribute("ID") + " deleted...");
				withoutlocking
				{
					if (old_version.LOCKED == "")
					{	
						writeln(old_version.printAttribute("ID") + " is locked, unlocking it...");
						old_version.callMacro("OPEN");
						old_version.callMacro("LOCK");
					}
					
					old_version.delete();
				}
			}
		}
		
		
		for(var project in portfolio)
		{
			count++;
		}
		
		withmonitoring(count)
		{
			for(var project in portfolio)
			{
				writeln("Treating project " + project.printAttribute("ID"));
				/*
				if(project.open == false)
				{
					writeln("Opening project " + project.printAttribute("ID"));
					project.callMacro("OPEN");
				}
				*/
				
				// if(project.writable == false)
				// {
				// writeln("Project " + project.printAttribute("ID") + " not writable");
				// }
				
				if(project.open)// && project.writable)
				{
					writeln("Project " + project.printAttribute("ID") + " is open and writable");
					
					var new_version = project.CallMacro("CreateANewVersion"); 
					
					writeln("Version created for  " + project.printAttribute("ID"));
					
					var projectVersion = undefined;
					for(var version in project.versions order by {{"INVERSE","VERSION_NUMBER"}})
					{
						//la version qui vient d'être créée est celle qui a le plus gros numéro
						projectVersion = version;
						break;
					}
					writeln("Treating version " + projectVersion);
					
					if ((projectVersion instanceof opxproject) && (projectVersion.state=="Simulation"))
					{							
						projectVersion._PV_AA_S_STATUS = "Scenario";
						projectVersion.VERSION_DOCUMENTATION = "NV PORTFOLIO version - automatically created";				
						// update access rights to make sure that the contract will not be modified
						projectVersion.RIGHTS = "Inaccessible to others";
						var user_group_obj1 = "opxUser_group".get("G_ADM");
						var user_group_obj2 = "opxUser_group".get("G_PORTADM");
						var user_group_obj3 = "opxUser_group".get("G_PORTLIM");
						var user_group_obj4 = "opxUser_group".get("G_PORTFULL");
						if (user_group_obj1 instanceof opxUser_group && user_group_obj2 instanceof opxUser_group)
						{
							projectVersion.READ_WRITE_GROUPS = "G_ADM,G_PORTADM";
						}
						if (user_group_obj3 instanceof opxUser_group && user_group_obj4 instanceof opxUser_group)
						{
							projectVersion.READ_ONLY_GROUPS = "G_PORTLIM,G_PORTFULL";
						}
						projectVersion.OWNER="intranet";
						
						
						projectVersion.SPV6_AA_B_NV_VERSION = true;
						writeln("End modification version for project " + project.printAttribute("ID"));
						
						//projectVersion.callMacro("SAVE");
						
						// ALM 1103 Copy last YEARLY and last MONTHLY reference to project version
						projectVersion.sp_ojs_copy_ref_in_version();
						// cclean useless references in version						
						//list_ref=projectVersion.sp_clean_useless_ref_version();
						//WriteToLog(projectVersion+" :list of refereneces >>"+list_ref);
						//add version to final portfolio
						writeln("Modifying final portfolio");
						if (portfolio_final instanceof Opx_FF_PT_FAVOR_FILTERS && portfolio_final.printAttribute("ID") != "")
						{
							writeln("Old value : " + portfolio_final._FF_AA_S_PROJ_LIST);
							if (portfolio_final._FF_AA_S_PROJ_LIST == "")
							{
								portfolio_final._FF_AA_S_PROJ_LIST = projectVersion.printAttribute("ID");
							}
							else
							{
								portfolio_final._FF_AA_S_PROJ_LIST += "," + projectVersion.printAttribute("ID");
							}
							writeln("New value : " + portfolio_final._FF_AA_S_PROJ_LIST);
						}	
					}				
				}
				
				"Versioning NV PORTFOLIO projects...".monitor(count,1,1);
				
			}
		}
	}
	else
	{
		WriteToLog("NV portfolio with name " + nv_portfolio_name + " does not exist");
		//alert("NV portfolio with name " + nv_portfolio_name + " does not exist");
	}
	
	//reset semaphore for max number of creation alert
	context.SP_AA_SB_SEM_AL_VERSION = false;
}
}
spv6_create_nv_portfolio_version1.exportfunction();

function spV6_remove_orga()
{
	for(var prj in "opxProject".findclass() where prj.VERSION_NUMBER != "" && prj.SPV6_AA_B_NV_VERSION == true &&  prj.ORGANIZATION != "")
	{
		withoutlocking
		{
			prj.ORGANIZATION = "";
		}
	}
}
spV6_remove_orga.exportfunction();

function spv6_create_nv_portfolio_version ()
{
	// FLC 13-12-2017 Temporary workaround for OTD 74712 (Fonction "COPY_TO_DATASET" KO on project versions)
	// Set and unset opxVariable 'DO-NOT-STORE-REFERENCES-IN-PROJECT-VERSION'
	//context.Set("*DO-NOT-STORE-REFERENCES-IN-PROJECT-VERSION*",false);
	
	spv6_create_nv_portfolio_version1();
	spV6_remove_orga();
	
	//context.Set("*DO-NOT-STORE-REFERENCES-IN-PROJECT-VERSION*",true);
}
spv6_create_nv_portfolio_version.exportfunction();



/**********************************************************
**************** TPP FUNCTION******************************
***********************************************************/
function sp_ojs_open_tpp_file()
{
	var Path = "";
	if (this instanceof opxProject)
	{
		Path = this.SP_NF_S_TPP_LINK;
	}
	else if (this.object instanceof opxProject)
	{
		Path = this.object.SP_NF_S_TPP_LINK;
	}
		
	if (Path != "")
		{
		var symb = new symbol("PDF","KEYWORD");
		var url = lispcall "wttp::get-download-url" (symb);
		var PathString = lispcall "wttp::generate-download-url-ref" (url,Path,context.applet.user);

		var link = new hyperlink("url","page",PathString,"PopUp",true);
		link.go("");
		return true;
	}
}

function sp_ojs_tpp_link_button()
{
	var id=context.SP_AA_S_OC_NV_PRJ_ID;
	var project="opxproject".get(id);
	this.addmousablearea(0, 0, this.cell.width, this.cell.height, 2, "TPP Link", project, sp_ojs_open_tpp_file, sp_ojs_open_tpp_file,false,color("LINE-HIGHLIGHT-COLOR"));
}

function sp_ojs_all_tpp_toolbar()
{
	var result=false;
	var Path = "/compassv6/PDF/PDF_FULL/target_product_profiles.pdf"
	if (Path != "")
	{
		var symb = new symbol("PDF","KEYWORD");
		var url = lispcall "wttp::get-download-url" (symb);
		var PathString = lispcall "wttp::generate-download-url-ref" (url,Path,context.applet.user);

		var link = new hyperlink("url","page",PathString,"PopUp",true);
		link.go("");
		result=true;
	}
return result;
}

/**********************************************************
**************** END TPP FUNCTION *************************
***********************************************************/

function sp_ojs_decision_tree()
{
	var id=context.SP_AA_S_OC_NV_PRJ_ID;
	var prj="opxproject".get(id);
	if (prj instanceof opxproject)
	{
		//if this is a version, we use the image from the project
		if(prj.ORIGIN_PROJECT != "")
		{
			prj = prj.ORIGIN_PROJECT;
		}
		if (prj instanceof opxproject && prj.PM_CREA_STARTING_DOC != undefined && prj.PM_CREA_STARTING_DOC != "" )
		{
			this.drawimage(prj.PM_CREA_STARTING_DOC, 0, 0, true, this.width, this.height, true, 0, 1);
		}
	}
}
/**********************************************************
**************** PIPELINE FUNCTION**************************
***********************************************************/
function sp_ojs_act_postit_color(useless)
{
	var act = this;
	if (act instanceof opxActivity)
	{
		var prj = act.PROJECT;
		
		if (prj instanceof opxproject)
		{
			if (prj.SP_RA_PRJ_PROFILE.printAttribute("NAME") == "Novel")
			{
				return "SP_COL_NV_PRJ_TYPE_1_COLOR";
			}
			else if (prj.SP_RA_PRJ_PROFILE.printAttribute("NAME") == "Life Cycle Management")
			{
				return "SP_COL_NV_PRJ_TYPE_2_COLOR";
			}
			else
			{
				return "GREY";
			}
		}
	}
	return "GREY";
}

"sp_ojs_act_postit_color".exportfunction({"STRING"},"STRING");

//modify method to draw background color (same as title)
method _kb_postit_drawBackground on _kb_postit_modernStyle(graphics,i_X, i_Y, i_width, i_height,o_color){
  // graphics.foreground = o_color;
  graphics.foreground = color(o_color.toString());
  graphics.fillrectangle(i_X, i_Y, i_width, i_height);
}

method _kb_generatecolumn on _kb_kanbanStyle(kanban, title, objects, attributes, values, previous, otherValues) {
  var style = this;
  var titlelink = style.titlelink;
  if ( titlelink instanceof string) {
    if ( "OpxReport".get(titlelink) instanceof OpxReport) {
      titlelink = object_linkOnObject.closure(values.last(), titlelink);
    }else {
      titlelink = false;
    }
  }
  var colSize = this.columnswidth._kb_getColumnWidth(values);
//PLW - set kanban defaut witdh, need to be removed in 6.2.3 when evolution on kanban width will be set
  kanban.boxDefaultWidth = 150;
 // END PLW comment
  var props = new vector("kanban", kanban
                         , "title", title
                         , "titleheight", style.titleheight
                         , "titlegroup", style.titlegroup
                         , "spaceBetweenBoxes", style.spaceBetweenBoxes
                         , "titlelink", titlelink
                         , "titlebackground", style.titlebackground
                         , "columnscolor", style.columnsColor
                         , "titleaddon", style.titleaddon
                         , "titleaddonwidth", style.titleaddonwidth
                         , "titlefont", style.titlefont
                         , "v_badgesAttributes", style.v_badgesAttributes
                         , "v_badgesValuesTocount", style.v_badgesValuesTocount
                         , "v_badgesQuantityToCount", style.v_badgesQuantityToCount
                         , "v_badgesColors", style.v_badgesColors
                         , "v_badgesOrders", style.v_badgesOrders
                         , "titlegaugestatusfield", style.titlegaugestatusfield
                         , "coloroverloadcapacityfield", style.coloroverloadcapacityfield
                         , "titlegaugeloadfield", style.titlegaugeloadfield
                         , "titlegaugecapacityfield", style.titlegaugecapacityfield
                         , "coloroverloadgaugefield", style.coloroverloadgaugefield
                         , "changepostitoverloadcolor", style.changepostitoverloadcolor
                         , "displayoverloadgauge", style.displayoverloadgauge
                         , "gaugecapacitycostunitfield", style.gaugecapacitycostunitfield
                         , "titleaddonheight", style.titleaddonheight
                         , "postitcolor", style.postItColor
                         , "width", colSize ? (colSize * (kanban.boxDefaultWidth + style.spaceBetweenBoxes) + kanban.XSpaceBetweenSteps) : style.columnwidth
                         , "autosize", colSize ? false : true
                         /* , "drawlines", style.drawlines */
                         /* , "drawcolumns", style.drawcolumns */
                         , "dropmethod", _kb_dragPostIt
                         , "columnsDropMethod", style.columnsDropMethod != undefined ? style.columnsDropMethod : false
                         , "drawlines", style.groupby ? false : style.drawlines
                         , "drawcolumns", style.drawcolumns
                         , "dropmask", 255
                         , "dragmask", 255
                         , "dragmethod", _kb_dragPostIt
                         , "selector", _kb_selectObjects.closure(objects, style)
                         , "userdata", new vector("colinfo", new vector(attributes, values))
                         );
  if ( style.fixedHeight) {
    props.setPlist("contentheight", style.fixedHeight);
  }
  for ( var o = 0; o < otherValues.length; o=o+2) {
    if ( otherValues[o] != "userdata") {
      props.setPlist(otherValues[o], otherValues[o+1]);
    }
  }
  var customUserdata = otherValues.getPlist("userdata");
  if ( customUserdata) {
    for ( var i = 0; i < customUserdata.length; i=i+2) {
      props.getPlist("userdata").setPlist(customUserdata[i], customUserdata[i+1]);
    }
  }

  var o_step = new _kb_kanbanStep(props);
  kanban.steps.push(o_step);

  if ( previous instanceof _kb_kanbanStep) {
    previous.next = o_step;
    o_step.previous = previous;
  }
  if ( otherValues.getPlist("toplinkto")) {
    otherValues.getPlist("toplinkto").userdata.setPlist("kanbanstepsincolumn", otherValues.getPlist("toplinkto").userdata.getPlist("kanbanstepsincolumn", new vector()).vector_pushnew(o_step));
  }

  return o_step;
}

//used in toolbar SP_TB_NV_PIPELINE
/*function sp_ojs_nv_year_filter()
{
	var v = new vector();
	for(var i =2000;i<=2200;i++)
	{
		v.push(i.toString());
	}
this.possiblevalues = v;
}
*/

function sp_ojs_nv_year_filter_toolbar(offset)
{
	var default_value = context.callNumberFormula("YEAR_NUMBER(PERIOD_START($DATE_OF_THE_DAY,\"Year\"," + offset + "))")
	var year_to_return = context.callNumberFormula("YEAR_NUMBER($DATE_OF_THE_DAY)")

	var v = new vector();
	for(var i =year_to_return-10;i<=year_to_return+40;i++)
	{
		v.push("print_number".call(i,"####"));
	}
	this.possiblevalues = v;
	
	//default_value
	if (this.value == "")
	{
		this.value = "print_number".call(default_value,"####");
		//refreshallwindows();
	}
}

//used to calculate dynamic date
function sp_ojs_nv_pipeline_dynamic_date(useless)
{
	if (context.SP_AA_S_NV_YEAR_FILTER != "" && context.SP_AA_S_NV_YEAR_FILTER != undefined)
	{
		var s_dyn_date= "31-DEC-"+context.SP_AA_S_NV_YEAR_FILTER;
		
		var dyn_date = new Date(s_dyn_date)
		if(dyn_date instanceof Date)
		{
			return dyn_date;
		}
		else
		{
			return new date();
		}
	}
	return new date();
}

"sp_ojs_nv_pipeline_dynamic_date".exportfunction({"STRING"},"DATE");

// select last movement in case of several at year end for dynamic
function sp_ojs_last_movement(useless)
{
	var act = this;
	if (act instanceof opxActivity)
	{
		var prj = act.PROJECT;
		if (prj instanceof opxproject)
		{
			fromobject(prj)
			{
				for(var act2 in "opxActivity" where act2.SP_NF_B_NV_PIP_DYN_ACT_FILTER order by {{"INVERSE","PF"}})
				{					
					if(act.printAttribute("ID") == act2.printAttribute("ID"))
					{
						return true; // return only the last movement
					}
					else
					{
						return false;
					}
				}
			}
		}
	}
	return false;
}
"sp_ojs_last_movement".exportfunction({"STRING"},"BOOLEAN");

function sp_ojs_retrieve_mstar(useless)
{
	var act = this;
	if (act instanceof opxActivity)
	{
		var prj = act.PROJECT;
		if (prj instanceof opxproject)
		{
			fromobject(prj)
			{
				for(var act2 in "opxActivity" where (act2.WBS_TYPE.printAttribute("ID") == "MSTAR" || act2.WBS_TYPE.printAttribute("ID") == "MSTAR-PREDEV") && act2.PS.getYear().toString() == context.SP_AA_S_NV_YEAR_FILTER && act2.SP_NF_D_YEARLY_REF_SD != undefined && act2.SP_NF_D_YEARLY_REF_SD != -1 && act2.SP_NF_D_YEARLY_REF_SD.getYear().toString() == context.SP_AA_S_NV_YEAR_FILTER )
				{
					//Mstar or mstar-PREDEV PS and yearly baseline planned start start in the selected year
					return true; // return only the last movement					
				}
			}
		}
	}
	return false;
}
"sp_ojs_retrieve_mstar".exportfunction({"STRING"},"BOOLEAN");

function sp_ojs_check_MTERM(useless)
{
	var act = this;
	if (act instanceof opxActivity)
	{
		var prj = act.PROJECT;
		if (prj instanceof opxproject)
		{
			fromobject(prj)
			{
				for(var act2 in "opxActivity" where act2.WBS_TYPE.printAttribute("ID") == "MTERM" && act2.PS.getYear().toString() == context.SP_AA_S_NV_YEAR_FILTER && act2.PF < act.PF )
				{
					//MTERM is found and finish before the last movement
					return true;					
				}
			}
		}
	}
	return false;
}
"sp_ojs_check_MTERM".exportfunction({"STRING"},"BOOLEAN");

function sp_ojs_display_arrow(useless)
{
	var act = this;
	if (act instanceof opxActivity)
	{
		var selected_year = context.SP_AA_S_NV_YEAR_FILTER;
		var current_year = new Date();
		var current_year_s = current_year.getYear().toString();
		
		//ongoing year
		if (selected_year == current_year_s)
		{
			var prj = act.PROJECT;
			if (prj instanceof opxproject)
			{
				fromobject(prj)
				{
					//checking MSTAR milestones
					for(var act2 in "opxActivity" where (act2.WBS_TYPE.printAttribute("ID") == "MSTAR" || act2.WBS_TYPE.printAttribute("ID") == "MSTAR-PREDEV"))
					{
						//Mstar or mstar-PREDEV is in the project
						if(act.PS.getYear().toString() == selected_year && act.SP_NF_D_YEARLY_REF_SD != undefined && act.SP_NF_D_YEARLY_REF_SD != -1 && act.SP_NF_D_YEARLY_REF_SD.getYear().toString() == selected_year)
						{
							//and PS and yearly baseline PS are in the selected year
							if (act.WBS_TYPE.printAttribute("ID") != "")
							{
								var wbs_type_name =act.WBS_TYPE.printAttribute("NAME");
								if (wbs_type_name.substring(wbs_type_name.length-3,3) == "TBC")
								{
									return "SP_IMG_BLUE_SKY_ARROW_TBC"
								}
							}
							return "SP_IMG_BLUE_SKY_ARROW";
						}
						else if (act.WBS_TYPE.printAttribute("ID") != "")
						{
							var wbs_type_name =act.WBS_TYPE.printAttribute("NAME");
							if (wbs_type_name.substring(wbs_type_name.length-3,3) == "TBC")
							{
								return "SP_IMG_GREY_ARROW";
							}
						}
						else if (act2.PS.getYear().toString() != selected_year && act.SP_NF_D_YEARLY_REF_SD != undefined && act.SP_NF_D_YEARLY_REF_SD != -1 && act.SP_NF_D_YEARLY_REF_SD.getYear().toString() == selected_year)
						{
							//and only yearly baseline PS is in the selected year
							return "SP_IMG_ORANGE_ARROW";
						}			
					}
				}
				
				//no MSTART found
				if (act.WBS_TYPE.printAttribute("ID") != "")
				{
					var wbs_type_name =act.WBS_TYPE.printAttribute("NAME");
					if (wbs_type_name.substring(wbs_type_name.length-3,3) == "TBC")
					{
						return "SP_IMG_GREY_ARROW"
					}
				}
				//check if the movement is not met, the case where the stage is not the expected one, in that case the current activity should not be displayed => orange arrow
				if(act.SP_NF_B_NV_PIP_DYN_ACT_FILTER == false || sp_ojs_check_MTERM(""))
				{						
					return "SP_IMG_ORANGE_ARROW";
				}
				else if(act.PS.getYear().toString() == selected_year && act.SP_NF_D_YEARLY_REF_SD != undefined && act.SP_NF_D_YEARLY_REF_SD != -1 && act.SP_NF_D_YEARLY_REF_SD.getYear().toString() == selected_year)
				{
					// PS and yearly baseline PS are in the selected year
					return "SP_IMG_DARK_BLUE_ARROW";
				}
			}
		}
		else if (selected_year > current_year_s) //year++
		{
			if(act.PS.getYear().toString() == selected_year)
			{
				// PS and yearly baseline PS are in the selected year
				return "SP_IMG_DARK_BLUE_ARROW";
			}
		}
		else
		{
			return "SP_IMG_TRANSPARENT_IMAGE"; // return empty image
		}
		
	}
	return "SP_IMG_TRANSPARENT_IMAGE"; // return empty image
}
"sp_ojs_display_arrow".exportfunction({"STRING"},"STRING");


function sp_ojs_drawarrowImage(arg)
{
	var imagename = undefined;
	if (this instanceof Graphics)
	{
		if (arg == "")
		{
			imagename = sp_ojs_display_arrow_new("");
		}
		else 
		{
			imagename = arg;
		}
		
		if (imagename != "")
		{
			var imageObject = "OPXIMAGE".get(imagename);
			
			if (imageObject instanceOf opxImage)
			{
				this.drawimage(imageObject, 0, 0, true, this.width, this.height, true, 0, 1);
			}
		}			
	}
}


function sp_ojs_display_arrow_new(useless)
{
	var act = this.object;
	if (act instanceof opxActivity)
	{
		var selected_year = context.SP_AA_S_NV_YEAR_FILTER;
		var current_year = new Date();
		var current_year_s = current_year.getYear().toString();
		
		//ongoing year
		if (selected_year == current_year_s)
		{
			var prj = act.PROJECT;
			if (prj instanceof opxproject)
			{
				fromobject(prj)
				{
					//checking MSTAR milestones
					for(var act2 in "opxActivity" where (act2.WBS_TYPE.printAttribute("ID") == "MSTAR" || act2.WBS_TYPE.printAttribute("ID") == "MSTAR-PREDEV"))
					{
						//Mstar or mstar-PREDEV is in the project
						if(act.PS.getYear().toString() == selected_year && act.SP_NF_D_YEARLY_REF_SD != undefined && act.SP_NF_D_YEARLY_REF_SD != -1 && act.SP_NF_D_YEARLY_REF_SD.getYear().toString() == selected_year)
						{
							//and PS and yearly baseline PS are in the selected year
							if (act.WBS_TYPE.printAttribute("ID") != "")
							{
								var wbs_type_name =act.WBS_TYPE.printAttribute("NAME");
								if (wbs_type_name.substring(wbs_type_name.length-3,3) == "TBC")
								{
									return "SP_IMG_BLUE_SKY_ARROW_TBC"
								}
							}
							return "SP_IMG_BLUE_SKY_ARROW";
						}
						else if (act.WBS_TYPE.printAttribute("ID") != "")
						{
							var wbs_type_name =act.WBS_TYPE.printAttribute("NAME");
							if (wbs_type_name.substring(wbs_type_name.length-3,3) == "TBC")
							{
								return "SP_IMG_GREY_ARROW";
							}
						}
						else if (act.PS.getYear().toString() != selected_year && act.SP_NF_D_YEARLY_REF_SD != undefined && act.SP_NF_D_YEARLY_REF_SD != -1 && act.SP_NF_D_YEARLY_REF_SD.getYear().toString() == selected_year)
						{
							//and only yearly baseline PS is in the selected year
							return "SP_IMG_ORANGE_ARROW";
						}			
					}
				}
				
				//no MSTART found
				if (act.WBS_TYPE.printAttribute("ID") != "")
				{
					var wbs_type_name =act.WBS_TYPE.printAttribute("NAME");
					if (wbs_type_name.substring(wbs_type_name.length-3,3) == "TBC")
					{
						return "SP_IMG_GREY_ARROW"
					}
				}
				//check if the movement is not met, the case where the stage is not the expected one, in that case the current activity should not be displayed => orange arrow
				if(act.SP_NF_B_NV_PIP_DYN_ACT_FILTER == false || sp_ojs_check_MTERM(""))
				{						
					return "SP_IMG_ORANGE_ARROW";
				}
				if(act.PS.getYear().toString() == selected_year && act.SP_NF_D_YEARLY_REF_SD != undefined && act.SP_NF_D_YEARLY_REF_SD != -1 && act.SP_NF_D_YEARLY_REF_SD.getYear().toString() == selected_year)
				{
					// PS and yearly baseline PS are in the selected year
					return "SP_IMG_DARK_BLUE_ARROW";
				}
			}
		}
		else if (selected_year > current_year_s) //year++
		{
			if(act.PS.getYear().toString() == selected_year)
			{
				// PS and yearly baseline PS are in the selected year
				return "SP_IMG_DARK_BLUE_ARROW";
			}
		}
		else
		{
			return "SP_IMG_TRANSPARENT_IMAGE"; // return empty image
		}
		
	}
	return "SP_IMG_TRANSPARENT_IMAGE"; // return empty image
}
"sp_ojs_display_arrow_new".exportfunction({"STRING"},"STRING");


/*function sp_ojs_next_phase(phase)
{
	if (phase instanceof opxActivity && phase.printAttribute("ID") != "" && phase.get("?WBS_ELEMENT") == true && phase.WBS_TYPE.SP_AA_B_DISP_PIPELINE == true)	
	{
		var prj = phase.PROJECT;
		if (prj instanceof opxProject)
		{
			fromobject(prj)
			{
				for (var wbs in "opxActivity" where wbs.LEVEL > 1 && wbs.WBS_TYPE.SP_AA_B_DISP_PIPELINE == true && wbs.ONB != phase.ONB && wbs.get("?WBS_ELEMENT") && wbs.PS >= phase.PF order by {"PS"})
				{
					
					return wbs;
				}
			}			
		}
	}
	return false; //no next phase
}*/

function sp_ojs_next_phase(phase)
{
	if (phase instanceof opxActivity && phase.printAttribute("ID") != "" && phase.get("?WBS_ELEMENT") == true && phase.WBS_TYPE.SP_AA_B_DISP_PIPELINE == true)	
	{
		var prj = phase.PROJECT;
		if (prj instanceof opxProject)
		{
			if (phase.BREAKDOWN_0 != "" &&  phase.BREAKDOWN_0 != "NV_TEMPLATE.COMMON")
			{
				fromobject(prj)
				{
					for (var wbs in "opxActivity" where wbs.LEVEL > 1 && wbs.WBS_TYPE.SP_AA_B_DISP_PIPELINE == true && wbs.ONB != phase.ONB && wbs.get("?WBS_ELEMENT") && phase.BREAKDOWN_0 == wbs.BREAKDOWN_0 && wbs.PS >= phase.PF order by {"PS"})
					{
						return wbs;
					}
				}			
			}
			else
			{
				fromobject(prj)
				{
					for (var wbs in "opxActivity" where wbs.LEVEL > 1 && wbs.WBS_TYPE.SP_AA_B_DISP_PIPELINE == true && wbs.ONB != phase.ONB && wbs.get("?WBS_ELEMENT") && wbs.PS >= phase.PF order by {"PS"})
					{
						return wbs;
					}
				}	
			}
		}
	}
	return false; //no next phase
}

function sp_ojs_nv_dynamic_act_filter_final(useless)
 {
	var act = this;
	var selected_year = context.SP_AA_S_NV_YEAR_FILTER;
	var begin_current_year = new Date("01-Jan-"+selected_year);
	var end_current_year = new Date("31-Dec-"+selected_year);
	var current_year = new Date();
	var current_year_s = current_year.getYear().toString();
	
	if (act instanceof opxActivity && act.printAttribute("ID") != "" && act.FILE.PM_PRJ_FILTER == true && act.LEVEL > 1 && act.get("?WBS_ELEMENT") == true && act.WBS_TYPE.SP_AA_B_DISP_PIPELINE == true )	
	{
		//if selected year is not the current year, we just return the last movement for the year
		if (selected_year > current_year_s) 
		{
			return act.SP_NF_B_NV_PIP_DYN_ACT_FILTER;
		}
		else
		{
			//ongoing year
			//we need to check if the movement of the next phase is not met and should be displayed, in that case we display the phase (this activity)
			var next_phase = sp_ojs_next_phase(act);
						
			if (next_phase instanceof Activity && next_phase.printAttribute("ID") != "" )
			{
				// check if the planned start is delayed by 4weeks for the yearly start date AND that the next_phase should be displayed
				//if(next_phase.SP_NF_D_YEARLY_REF_SD != -1 && next_phase.SP_NF_D_YEARLY_REF_SD != undefined && next_phase.PS > context.callDateFormula("ADD_DURATION(" + next_phase.SP_NF_D_YEARLY_REF_SD.sdate + ",'28d','')") 
				//&& next_phase.SP_NF_B_NV_PIP_DYN_ACT_FILTER)
				//{					
				//	return true;// in this case we return the current phase
				//}
				//else 
				if (next_phase.SP_NF_B_CHECK_MTERM == true && act.SP_NF_B_CHECK_MTERM == false )
				{
					return true;// in this case we return the current phase
				}
			}
			if (act.SP_NF_B_CHECK_MTERM == true)
			{
				return false;
			}
			//else check if the phase should be displayed
			else
			{
				//return act.SP_NF_B_DISP_ACT_DYNAMIC_YEARLY;
				return act.SP_NF_B_DISP_ACT_DYNAMIC;
			}
			
		}
	}
	return false;
	
 }
 
 "sp_ojs_nv_dynamic_act_filter_final".exportfunction({"STRING"},"BOOLEAN");
 
/*
function sp_ojs_update_dyn_pipeline_count_lead_id(useless)
{
	if (context.SP_AA_N_CPT_DISP_LEAD_ID == 99)
	{
		context.SP_AA_N_CPT_LEAD_ID = 0;		
		context.SP_AA_N_CPT_DISP_LEAD_ID=1;
	}
	// context.SP_AA_N_CPT_LEAD_ID++;
	return true;
}
"sp_ojs_update_dyn_pipeline_count_lead_id".exportfunction({"STRING"},"BOOLEAN");

 function sp_ojs_update_dyn_pipeline_count_lead_opt(useless)
{
	alert("appelé ici 1")
	if (context.SP_AA_N_CPT_DISP_LEAD_OPT == 99)
	{
		context.SP_AA_N_CPT_LEAD_OPT = 0;		
		context.SP_AA_N_CPT_DISP_LEAD_OPT=1;
	}
	// context.SP_AA_N_CPT_LEAD_OPT++;
	return true;
}
"sp_ojs_update_dyn_pipeline_count_lead_opt".exportfunction({"STRING"},"BOOLEAN");

function sp_ojs_update_dyn_pipeline_count_preclinical(useless)
{
	if (context.SP_AA_N_CPT_DISP_PRECLINICAL == 99)
	{
		context.SP_AA_N_CPT_PRECLINICAL = 0;		
		context.SP_AA_N_CPT_DISP_PRECLINICAL=1;
	}
	// context.SP_AA_N_CPT_PRECLINICAL++;
	return true;
}
"sp_ojs_update_dyn_pipeline_count_preclinical".exportfunction({"STRING"},"BOOLEAN");

function sp_ojs_update_dyn_pipeline_count_phaseI(useless)
{
	if (context.SP_AA_N_CPT_DISP_PHASE_I == 99)
	{
		context.SP_AA_N_CPT_PHASE_I = 0;		
		context.SP_AA_N_CPT_DISP_PHASE_I=1;
	}
	// context.SP_AA_N_CPT_PHASE_I++;
	return true;
}
"sp_ojs_update_dyn_pipeline_count_phaseI".exportfunction({"STRING"},"BOOLEAN");

function sp_ojs_update_dyn_pipeline_count_phaseII(useless)
{
	if (context.SP_AA_N_CPT_DISP_PHASE_II == 99)
	{
		context.SP_AA_N_CPT_PHASE_II = 0;		
		context.SP_AA_N_CPT_DISP_PHASE_II=1;
	}
	// context.SP_AA_N_CPT_PHASE_II++;
	return true;
}
"sp_ojs_update_dyn_pipeline_count_phaseII".exportfunction({"STRING"},"BOOLEAN");

function sp_ojs_update_dyn_pipeline_count_phaseIII(useless)
{
	if (context.SP_AA_N_CPT_DISP_PHASE_III == 99)
	{
		context.SP_AA_N_CPT_PHASE_III = 0;		
		context.SP_AA_N_CPT_DISP_PHASE_III=1;
	}
	// context.SP_AA_N_CPT_PHASE_III++;
	return true;
}
"sp_ojs_update_dyn_pipeline_count_phaseIII".exportfunction({"STRING"},"BOOLEAN");

function sp_ojs_update_dyn_pipeline_count_registration(useless)
{
	if (context.SP_AA_N_CPT_DISP_REGIS == 99)
	{
		context.SP_AA_N_CPT_REGIS = 0;		
		context.SP_AA_N_CPT_DISP_REGIS=1;
	}
	// context.SP_AA_N_CPT_REGIS++;
	return true;
}
"sp_ojs_update_dyn_pipeline_count_registration".exportfunction({"STRING"},"BOOLEAN");

function sp_ojs_update_dyn_pipeline_count_postlicensure(useless)
{
	if (context.SP_AA_N_CPT_DISP_PLICENSURE == 99)
	{
		context.SP_AA_N_CPT_PLICENSURE = 0;		
		context.SP_AA_N_CPT_DISP_PLICENSURE=1;
	}
	// context.SP_AA_N_CPT_PLICENSURE++;
	return true;
}
"sp_ojs_update_dyn_pipeline_count_postlicensure".exportfunction({"STRING"},"BOOLEAN");


function sp_ojs_reset_all_pipeline_count()
{
	alert("appelé ici 2")
	context.SP_AA_N_CPT_DISP = 99;
	context.SP_AA_N_CPT_DISP_LEAD_ID = 99;
	context.SP_AA_N_CPT_DISP_LEAD_OPT = 99;
	context.SP_AA_N_CPT_DISP_PHASEI = 99;
	context.SP_AA_N_CPT_DISP_PHASEII = 99;
	context.SP_AA_N_CPT_DISP_PHASEIII = 99;
	context.SP_AA_N_CPT_DISP_PLICENSURE = 99;
	context.SP_AA_N_CPT_DISP_PRECLINICAL = 99;
	context.SP_AA_N_CPT_DISP_REGIS = 99;
}
*/

// Check if the activity is a movement on the selected year
function sp_ojs_has_is_movement(act)
{
	if (act instanceof opxActivity)
	{
		var selected_year = context.SP_AA_S_NV_YEAR_FILTER;
		var current_year_s = context.SP_NF_S_OC_CURRENT_DATE_YEAR;
		
		//Common : Yearly baseline PS in selected year and PS in selected Year
		if (act.SP_NF_S_ACT_PS_YEAR == selected_year && act.SP_NF_S_YEARLY_SD_YEAR == selected_year)
		{
			return true;
		}
		else	
		{
			return false;
		}	
	}
}

function sp_ojs_count_mouvement_dynamic_report()
{
	var new_f = new formula("OpxProject","PM_PRJ_FILTER","BOOLEAN")
	var new_f_act = new formula("OpxActivity","(PROJECT.SP_NF_B_NV_IS_NOVEL_PRJ OR PROJECT.SP_NF_B_NV_IS_LCM_PRJ) AND (BELONGS(\"WBS_TYPE\",\"LEADID-REP\") OR BELONGS(\"WBS_TYPE\",\"LEADOP-REP\") OR BELONGS(\"WBS_TYPE\",\"PHA1-REP\") OR BELONGS(\"WBS_TYPE\",\"PHA2A-REP\") OR BELONGS(\"WBS_TYPE\",\"PHA2B-REP\") OR BELONGS(\"WBS_TYPE\",\"PHA3-REP\") OR BELONGS(\"WBS_TYPE\",\"PLIC-REP\") OR BELONGS(\"WBS_TYPE\",\"LAU-REP\") OR BELONGS(\"WBS_TYPE\",\"PREC-REP\") OR BELONGS(\"WBS_TYPE\",\"REGU-REP\"))","BOOLEAN")

	context.SP_AA_N_CPT_LEAD_ID=0;
	context.SP_AA_N_CPT_LEAD_OPT=0;
	context.SP_AA_N_CPT_PHASE_I=0;
	context.SP_AA_N_CPT_PHASE_II=0;
	context.SP_AA_N_CPT_PHASE_III=0;
	context.SP_AA_N_CPT_PLICENSURE=0;
	context.SP_AA_N_CPT_PRECLINICAL=0;
	context.SP_AA_N_CPT_REGIS=0;
	var image_name = "SP_IMG_DARK_BLUE_ARROW";

	fromobject(new_f)
	{
		for(var prj in "opxProject")
		{
			//alert("prj " + prj)
			fromobject(new_f_act)
			{
				for(var act in "opxActivity" where act.PROJECT==prj && act.SP_NF_B_NV_PIP_DYN_ACT_FILTER_FINAL)
				{
					//if(act.callBooleanFormula("BELONGS(\"WBS_TYPE\",\"LEADID-REP\")") && sp_ojs_has_is_movement(act))
					if (act.callBooleanFormula("wbs_type in (\"LEADID-REP-I\",\"LEADID-REP-R\")") && sp_ojs_has_is_movement(act))
					{
						context.SP_AA_N_CPT_LEAD_ID++;
					}
					//else if (act.callBooleanFormula("BELONGS(\"WBS_TYPE\",\"LEADOP-REP\")") && sp_ojs_has_is_movement(act))
					else if(act.callBooleanFormula("wbs_type in (\"LEADOP-REP-I\",\"LEADOP-REP-R\")") && sp_ojs_has_is_movement(act))
					{
						context.SP_AA_N_CPT_LEAD_OPT++;
					}
					//else if (act.callBooleanFormula("BELONGS(\"WBS_TYPE\",\"PHA1-REP\")") && sp_ojs_has_is_movement(act))
					else if(act.callBooleanFormula("wbs_type in (\"PHA1-REP-I\",\"PHA1-REP-R\")") && sp_ojs_has_is_movement(act))
					{
						context.SP_AA_N_CPT_PHASE_I++;
					}
					//else if ((act.callBooleanFormula("BELONGS(\"WBS_TYPE\",\"PHA2A-REP\") OR BELONGS(\"WBS_TYPE\",\"PHA2B-REP\")") ) && sp_ojs_has_is_movement(act))
					else if(act.callBooleanFormula("wbs_type in (\"PHA2A-REP-I\",\"PHA2B-REP-I\",\"PHA2A-REP-R\",\"PHA2B-REP-R\")") && sp_ojs_has_is_movement(act))
					{
						context.SP_AA_N_CPT_PHASE_II++;
					}
					//else if (act.callBooleanFormula("BELONGS(\"WBS_TYPE\",\"PHA3-REP\")") && sp_ojs_has_is_movement(act))
					else if(act.callBooleanFormula("wbs_type in (\"PHA3-REP-I\",\"PHA3-REP-R\")") && sp_ojs_has_is_movement(act))
					{
						context.SP_AA_N_CPT_PHASE_III++;
					}
					//else if ((act.callBooleanFormula("BELONGS(\"WBS_TYPE\",\"PLIC-REP\") OR BELONGS(\"WBS_TYPE\",\"LAU-REP\")") ) && sp_ojs_has_is_movement(act))
					else if(act.callBooleanFormula("wbs_type in (\"PLIC-REP-I\",\"LAU-REP-I\",\"PLIC-REP-R\",\"LAU-REP-R\")") && sp_ojs_has_is_movement(act))
					{
						context.SP_AA_N_CPT_PLICENSURE++;
					}
					//else if (act.callBooleanFormula("BELONGS(\"WBS_TYPE\",\"PREC-REP\")") && sp_ojs_has_is_movement(act))
					else if(act.callBooleanFormula("wbs_type in (\"PREC-REP-I\",\"PREC-REP-R\")") && sp_ojs_has_is_movement(act))
					{
						context.SP_AA_N_CPT_PRECLINICAL++;
					}
					//else if (act.callBooleanFormula("BELONGS(\"WBS_TYPE\",\"REGU-REP\")") && sp_ojs_has_is_movement(act))
					else if(act.callBooleanFormula("wbs_type in (\"REGU-REP-I\",\"REGU-REP-R\")") && sp_ojs_has_is_movement(act))
					{
						context.SP_AA_N_CPT_REGIS++;
					}
				}
			}
		}
	}
}

/**********************************************************
**************** END PIPELINE FUNCTION ********************
***********************************************************/

/**********************************************************
**************** PIPELINE  TIMELINE FUNCTION ********************
***********************************************************/
function sp_ojs_nv_dev_predev_filter()
{
	var v = new vector();
	v.push("Pre Dev projects");
	v.push("Dev projects");
	this.possiblevalues = v;
}

function sp_ojs_nv_region_filter()
{
	var v = new vector();
	for ( var pValue in "OpxNAT".get("SP_AT_PJT_LEADER_SIT").get("POSSIBLE-VALUES"))
	{
		v.push(pValue.comment);
	}
	this.possiblevalues = v;
}

function sp_ojs_modify_std_kanban_for_printing_issue()
{
	var rep1 = "OpxReport".get("_KB_REPORT_AGILE_KANBAN_MODEL_FOLDER");
	var rep2 = "OpxReport".get("_KB_REPORT_AGILE_KANBAN_MODEL_FOLDER_OC");

	if (rep1 instanceof OpxReport)
	{
      for ( var repElement in report_getElements(rep1) where repElement instanceof OpxSUBFORM_CELL) 
	  {
		alert("print in report modification for " + rep1)
		alert("Before :  " + repElement.get("print_in_report"))
		withoutalerts withoutlocking{
			repElement.set("print_in_report", true);
		}
		alert("After :  " + repElement.get("print_in_report"))
      }
	 }
	 if (rep2 instanceof OpxReport)
	{
	  for ( var repElement in report_getElements(rep2) where repElement instanceof OpxSUBFORM_CELL) 
	  {
       alert("print in report modification for " + rep2)
		alert("Before :  " + repElement.get("print_in_report"))
        withoutalerts withoutlocking{
			repElement.set("print_in_report", true);
		}
		alert("After :  " + repElement.get("print_in_report"))
      }
	 }
}
writeln("calling sp_ojs_modify_std_kanban_for_printing_issue");
sp_ojs_modify_std_kanban_for_printing_issue();
/**********************************************************
**************** END PIPELINE TIMELINE FUNCTION ********************
***********************************************************/

/**********************************************************
**************** NV PROJECT REPORT  FUNCTION ********************
***********************************************************/

// OTD 76552 - Redefinition of function sp_ojs_dashboard_viewer by Planisware
function sp_ojs_dashboard_viewer(){
  var CurrentDashboard = "OpxDashboard".get(context.SP_AA_S_OC_NV_DASHBOARD_ID);//"INTRANET.SP_DB_PRJ_ID_CARD_TEST");
  if ( CurrentDashboard instanceof OpxDashboard) {       
    var DashboardCopy = CurrentDashboard.CopyDashboardObjects();
    var CurrentObject = this.object;
	
    if ( dashboardCopy instanceof OpxDashboard) {
      dashboardCopy.CreateCurrentObjectFilterForQuery(CurrentObject);
    }
		 
    var edit_mode_default = false;
	DashboardCopy.computebefore();
    DashboardCopy.checkquickfiltersselections(); // need to remove obsolete quick filter selections
	  
    var DashboardTodisplay = DashboardCopy;
    var widget = this.Widget;
    var widgetClass = new symbol("DASHBOARD-VIEWER", "KEYWORD");
    var ImposedWidth = CurrentDashboard._DBB_AA_N_MINIMUM_WIDTH; if (! ImposedWidth instanceof number) {ImposedWidth = 0;}else {ImposedWidth = math.round(ImposedWidth);}
    var ImposedHeigth = CurrentDashboard._DBB_AA_N_MINIMUM_HEIGHT; if (! ImposedHeigth instanceof number) {ImposedHeigth = 0;}else {ImposedHeigth = math.round(ImposedHeigth);}
    //CurrentDashboard.delete();
    if ( DashboardTodisplay InstanceOf Opxdashboard) {
      if ( this.widget != undefined && (! (this.widget instanceof opxDashboardviewer))) {
        var widgetPlist = new vector("Dashboard",DashboardTodisplay,
                                     "object",CurrentObject,
                                     "ondoubleclick",DoubleClickItem,
                                     "edit-mode",edit_mode_default,
                                     "dropmask",2559,
                                     "Ondrop",CreateComponent,
                                     "OnDrag",DragItem,
                                     "Onselect",Selectitem,
                                     "OnDrawAfter", OnDrawAfterDashboard,
                                     "Show-grid",SetDisplayGridForViewer(),
                                     "use-grid", true,
                                     "grid-size", DashboardTodisplay.attribute_getWithDefault("_DBB_AA_N_GRID_HORIZ", 0),
                                     "grid-vertical-size", DashboardTodisplay.attribute_getWithDefault("_DBB_AA_N_GRID_VERTI", 0),
                                     "grid-horizontal-gutter", DashboardTodisplay.attribute_getWithDefault("_DBB_AA_N_GUTTER_HORIZ", 0),
                                     "grid-vertical-gutter", DashboardTodisplay.attribute_getWithDefault("_DBB_AA_N_GUTTER_VERTI", 0));
        var checkedPlist = new vector();
        for (var p = 0; p < widgetPlist.length; p=p+2) {
          if ( lispcall "javascript::get-resource-from-name"(widgetClass, widgetPlist[p]) != false) {
            checkedPlist.setPlist(widgetPlist[p],widgetPlist[p+1]);
          }
        }


        widget = this.addwidgetwithplist("DASHBOARD-VIEWER", checkedPlist);
        Context.CURRENT_VIEWER = this.widget;
        if ( ImposedWidth > 0) {
          this.Widget.width = ImposedWidth;
        }
        if ( ImposedHeigth > 0) {
          this.widget.height = ImposedHeigth;
        }
      }
      else if (! this.printing) {
        //le widget existe dj, il faut le mettre  jour, c'est beaucoup plus propre que de le supprimer
        //Mais surtout pas  l'impression: sinon, il va garder la mauvaise taille. La taille est gre directement
        //par le paginate/display noyau
        if ( this instanceof graphics && this.widget != undefined) {
          withoutlocking{
            this.widget.object = CurrentObject;
            this.widget.dashboard = DashboardTodisplay;
            this.widget.editmode = edit_mode_default;
            this.widget.x = this.x;
            this.widget.y = this.y;
            this.widget.width = (ImposedWidth > 0) ? ImposedWidth : this.width;
            this.widget.height = (ImposedHeigth > 0) ? ImposedHeigth : this.height;
            this.widget.showgrid = SetDisplayGridForViewer();
            this.widget.gridsize = DashboardTodisplay.attribute_getWithDefault("_DBB_AA_N_GRID_HORIZ", 0);
            if (lispcall "javascript::get-resource-from-name"(widgetClass, "grid-vertical-size")) {
              this.widget.gridverticalsize = DashboardTodisplay.attribute_getWithDefault("_DBB_AA_N_GRID_VERTI", 0);
              this.widget.gridhorizontalgutter = DashboardTodisplay.attribute_getWithDefault("_DBB_AA_N_GUTTER_HORIZ", 0);
              this.widget.gridverticalgutter = DashboardTodisplay.attribute_getWithDefault("_DBB_AA_N_GUTTER_VERTI", 0);
            }
            context.current_viewer = this.widget;
          }
        }
      }
    }
  }
}

function sp_ojs_display_prj_report(dashboard_ID){
	if (this.widget instanceof ReportForm && Context.Applet instanceof OpxApplet) {
			var object = "opxproject".get(context.SP_AA_S_OC_NV_PRJ_ID);
			if(object instanceof opxObject){		
				object.recomputeCostandDate();
				var report = "opxreport".get("SP_RP_NV_DASHBOARD_VIEWER");
				 if (report instanceof OpxReport) {
					if(object instanceof opxproject){
						context.SP_AA_S_OC_NV_DASHBOARD_ID = dashboard_ID;
						 this.widget.setreportandobject(report, object);
						 this.widget.fittopage = true;
					 }
				 }
			}
	}
}

/**********************************************************
**************** END NV PROJECT REPORT  FUNCTION ********************
***********************************************************/

/**********************************************************
**************** MONITORING FUNCTION ********************
***********************************************************/
function sp_ojs_nv_site_filter()
{
var v = new vector();
	for ( var pValue in "OpxNAT".get("SP_AT_PJT_LEADER_SIT").get("POSSIBLE-VALUES"))
	{
		v.push(pValue.comment);
	}
	this.possiblevalues = v;
}

function sp_ojs_nv_prg_status_filter()
{
var v = new vector();
v.push("Ahead of time");	
v.push("On time");	
v.push("Delayed");	
v.push("Cancelled");	
v.push("Not met");	
this.possiblevalues = v;
}

function sp_ojs_open_pkm_file()
{
	
	var sPdfName="pkm_reference_list.xls";
	var sPdfDirectory = context.SP_GS_PKM_REF_LIST_PATH;
	var Path = sPdfDirectory + "/" + sPdfName;
	
	if (Path != "")
		{
		var symb = new symbol("XLS","KEYWORD");
		var url = lispcall "wttp::get-download-url" (symb);
		var PathString = lispcall "wttp::generate-download-url-ref" (url,Path,context.applet.user);

		var link = new hyperlink("url","page",PathString,"PopUp",true);
		link.go("");
		return true;
	}
}

function sp_ojs_pkm_link_button()
{
	this.addmousablearea(0, 0, this.cell.width, this.cell.height, 2, "PKM Reference list Link", context, sp_ojs_open_pkm_file, sp_ojs_open_pkm_file,false,color("LINE-HIGHLIGHT-COLOR"));
}


/**********************************************************
**************** END MONITORING FUNCTION ********************
***********************************************************/
function _kb_kanban_updateScrollView(position) {
  //Link the widget of the kanban header(columns part has position 0) with the parent widget of the content part(post it part has position 1).
  //It allow to synchronize the horizontal scrollbar of the header and the content part.
  //return true;
  var existingInformation = gettemporaryObject(_kb_kanban_updateScrollView.code);
  if ( existingInformation == undefined) {
    if (this.widget.parent instanceof scrolledView) {
      var scrollViewInfo = new vector();
      scrollViewInfo.push(this.widget.parent);
      scrollViewInfo.push(this.widget);
      scrollViewInfo.push(this.cell);
      scrollViewInfo.push(position);
      scrollViewInfo.storetemporaryObject(_kb_kanban_updateScrollView.code);
    }else {
      true.storetemporaryObject(_kb_kanban_updateScrollView.code);
    }
  }else if (existingInformation instanceof vector) {
    var o_headerWidget = false;
    var o_contentWidgetParent = false;
    if(position == 0 && existingInformation[3] == 1){
      o_headerWidget = this.widget;
      o_contentWidgetParent = existingInformation[0];
      o_contentWidgetParent.set("V-LINKED-WIDGETS",new list(o_headerWidget));
    }
    else if(position == 1 && existingInformation[3] == 0){
      o_headerWidget = existingInformation[1];
      o_contentWidgetParent = this.widget.parent;
      o_contentWidgetParent.set("V-LINKED-WIDGETS",new list(o_headerWidget));
    }
  }
}

method _kb_postit_drawPostIt on _kb_postit_modernStyle(postit, graphics, x1, y1) {
  var style = this;
  var w = postit.width+8;
  var h = postit.height;
  var x = x1;
  var y = y1;
  var o_remainingSpace = new graphics_Rectangle(x,y,w,h);

  style._kb_postit_drawBackground(graphics,x,y,w,h,postit.color);
  style._kb_postit_drawEdge(graphics,x,y,w,h, postit._kb_getThickness(), postit._kb_getBorderscolor());
  var o_spaceDrawn = style._kb_postit_drawTitle(graphics,x,y,w,style._kb_postit_getheaderHeight(postit)
                                                ,postit.color
                                                ,this._kb_postit_getFontColorFromBackground(postit.color)
                                                ,postit.titlefont
                                                ,postit.title);
  o_remainingSpace.y += o_spaceDrawn.height;
  o_remainingSpace.height -= o_spaceDrawn.height;
  style._kb_postit_drawTopRighttools(graphics,x,y,w,h,postit.mousableArea,postit.toprighticons);

  var h_bottomlefticons = style._kb_postit_getFooterHeight(postit);

  if ( o_remainingSpace.height >= h_bottomlefticons) {
    //the place for the image is created in _kb_computeHeight
    var o_leftToolSpaceDrawn = style._kb_postit_drawBottomLefttools(postit
                                                                    ,graphics
                                                                    ,x
                                                                    ,y + h - h_bottomlefticons
                                                                    ,w
                                                                    ,h_bottomlefticons
                                                                    ,postit.bottomlefticons
                                                                    ,postit._kb_getBorderscolor()
                                                                    );
    style._kb_postit_drawBottomRighttools(postit
                                          ,graphics
                                          ,o_leftToolSpaceDrawn.x + o_leftToolSpaceDrawn.width
                                          ,y + h - style._kb_postit_getFooterHeight(postit)
                                          ,w-o_leftToolSpaceDrawn.width
                                          ,style._kb_postit_getFooterHeight(postit)
                                          ,postit.bottomrighticons,postit._kb_getBorderscolor());
    o_remainingSpace.height -= o_leftToolSpaceDrawn.height;
  }

  if ( postit.text instanceof string && postit.text != "") {
    var htmlbox = false; //postit.htmlBoxes.get("text", false, postit.width);
    var o_font = _kb_postit_getContentfont(postit);
    var o_FirstBottomRightImage = this._kb_postit_getFirstBottomRightImage(postIt);
    var n_contentWidth = (o_FirstBottomRightImage ? w - this._kb_postit_getFirstBottomRightImageWidth(o_FirstBottomRightImage,postIt) : w);

	// MODIFICAION TO color text in Entry & exit
	var text_color = color("BLACK");
	var act = postit.object;
	if (act instanceof opxactivity && act.printAttribute("ID") != "")
	{
		var prj = act.PROJECT;
		
		if(prj instanceof opxproject)
		{		
			if (act.callStringFormula("HIERARCHICAL_CODE")=="1.1.1" && prj.callBooleanFormula("SP_AA_S_REASON_PREDEV = \"Moved*\""))
			{
				text_color = color("SP_COL_ENTRY_MOVED");
			}
			if (act.callStringFormula("HIERARCHICAL_CODE")=="1.1" && prj.callBooleanFormula("SP_AA_S_REASON = \"Licensure*\""))
			{
				text_color = color("SP_COL_ENTRY_LICENSURE");
			}
						
		}
	}
    style._kb_postit_drawContent(graphics, x, y + style._kb_postit_getheaderHeight(postit), n_contentWidth, o_remainingSpace.height,
                                 htmlbox,postit.text,postit.Halign,postit.marginBetwenTextAndEdges,text_color,o_font);
  }
}

/*** SCRIPT for Timecard Evolution : multivalues timecard manager field  + sc9953 v3.9 at least ****/
function _tc_UserControllerButNotmanager(UserTested) {
  var ResManager=this.manager;
  var ResManagers= "";
  var ResController=this.controller;
  var IsManager=false;
  var UserID=UserTested.printAttribute();
  //Compatibility 
  var ManagersSlot  = "OpxResource".getslot("MANAGERS");
  if (ManagersSlot instanceof ObjectAttribute){
    ResManagers = this.MANAGERS.parselist();
  }
  // Resmanager can be a user or a group
  if (ResManagers != "" ) { 
    for (var element in Resmanagers){
      var UserElement= "OpxUser".get(element);
      if ((UserElement instanceof OpxUser && (UserTested.printattribute()==element)) || ("USER_IN_GROUP".callMacro(UserID, element))) {
        IsManager=true;
      }
    }
  }
  else {
    if (ResManager != ""){
      if ((ResManager instanceof OpxUser && (UserTested==ResManager)) || ("USER_IN_GROUP".callMacro(UserID, ResManager.printattribute()))) {
        IsManager=true;
      }
    }
  }
  
  var IsController=false;
  if (ResController != ""){
    if ((ResController instanceof OpxUser && (UserTested==ResController)) || ("USER_IN_GROUP".callMacro(UserID, ResController.printattribute()))) {
      IsController=true;
    }
  }
  if (IsManager==false && IsController) {
    return true;
  }
  return false;
}

/*** SCRIPT for Timecard Evolution : multivalues timecard manager field  + sc9953 v3.9 at least ****/



// function sp_ojs_initialiaze_toolbarfilter()
// {
	// context.SP_AA_S_OC_NV_PORT_SELECT = "Dev projects";
// }
// AddWrapperFunction(NewOpxAppletWrapper, "sp_ojs_initialiaze_toolbarfilter");


function sp_js_list_prj_portfolio(useless)
{
	var l = new vector();
	var current_portfolio = "opx_FF_PT_FAVOR_FILTERS".get(context._FF_AA_S_LIST_NAME);
	
	if (current_portfolio instanceof opx_FF_PT_FAVOR_FILTERS && current_portfolio.printAttribute("ID") != "")
	{
		for(var project in current_portfolio)
		{
			l.push(project.printAttribute("ID"));
		}
	}
	l=l.removeduplicates();
	return l.join(","); 
}
"sp_js_list_prj_portfolio".exportfunction({"STRING"},"STRING");

function sp_ojs_copy_ref_in_version()
{
	var projectVersion = this;
	var nb_monthly=2;
	var nb_yearly=1;
	
	if(projectVersion instanceof OpxProject)
	{
		var project = projectVersion.ORIGIN_PROJECT;
		if(project instanceof OpxProject)
		{
			fromobject(project)
			{
				//var yearly_found = false;
				//var monthly_found = false;
				for (var ref in "OpxREFERENCE".findclass() where (ref.file == project && (nb_monthly!=0 || nb_yearly!=0)) order by {{"INVERSE","AD"}})
				{
					//if (ref.NAME.position("YEARLY") != undefined && ref.NAME.position("YEARLY") != -1 && yearly_found == false)
					if ((ref.name instanceof STRING) && (ref.name=="YEARLY") && nb_yearly!=0)	
					{		
						ref.COPY_TO_DATASET = projectVersion;
						nb_yearly=nb_yearly-1;
						//yearly_found = true;
						writetolog("Copying reference " + ref.NAME + " from project " + project.printAttribute("ID") + " to project version" + projectVersion.printAttribute("ID"));
					}
					else if ( (ref.DESC.position("Monthly") instanceof NUMBER) && ref.DESC.position("Monthly")==0 && nb_monthly!=0)
					{
						ref.COPY_TO_DATASET = projectVersion;
						nb_monthly=nb_monthly-1;
						//monthly_found = true;
						writetolog("Copying reference " + ref.NAME + " from project " + project.printAttribute("ID") + " to project version" + projectVersion.printAttribute("ID"));
					}
				}
			}
		}
	}

}

// Functions for NV Pipeline Projection

// Function that search MSTAR/MSTAR-PREDEV Milestone in selected year	
// Used in name formula SP_NF_B_CHECK_MSTAR			
function sp_ojs_check_MSTAR_FORMULA(useless)
{
	var act = this;
	if (act instanceof opxActivity)
	{
		var prj = act.PROJECT;
		if (prj instanceof opxproject)
		{
			fromobject(prj)
			{
				for(var act2 in "opxActivity" where act2.SP_NF_B_MSTAR_ACT && act2.SP_NF_S_ACT_PS_YEAR== context.SP_AA_S_NV_YEAR_FILTER)
				{
					//MSTAR OR MSTAR-PREDEV is found
					return true;					
				}
			}
		}
	}
	return false;
}
"sp_ojs_check_MSTAR_FORMULA".exportfunction({"STRING"},"BOOLEAN");

// Used in name formula SP_NF_B_CHECK_MTERM
function sp_ojs_check_MTERM_FORMULA(useless)
{
	var act = this;
	if (act instanceof opxActivity)
	{
		var prj = act.PROJECT;
		if (prj instanceof opxproject)
		{
			fromobject(prj)
			{
				for(var act2 in "opxActivity" where act2.SP_NF_B_MTERM_ACT && act2.SP_NF_S_ACT_PS_YEAR==context.SP_AA_S_NV_YEAR_FILTER && act2.PS <= act.PS)
				{
					//MTERM is found and finish before the last movement
					return true;					
				}
			}
		}
	}
	return false;
}
"sp_ojs_check_MTERM_FORMULA".exportfunction({"STRING"},"BOOLEAN");


// Creation to display orange arrow
function sp_ojs_display_arrow_orange(useless)
{
	var selected_year = context.SP_AA_S_NV_YEAR_FILTER;
	var current_year = context.SP_NF_S_OC_CURRENT_DATE_YEAR;
	var current_act = this.object;
	var act;
	
	
	if (current_act instanceof opxActivity)
	{
		// Display orange arrow only if selected year = current year (of yearly baseline) 
		if (selected_year==current_year && current_act.SP_NF_B_NV_PIP_DYN_ACT_FILTER_FINAL)
		{
			// MTERM Milestone --> Check that current activity PF is not after MTERM PF
			if  (current_act.SP_NF_B_CHECK_MTERM)
			{
				return "SP_IMG_ORANGE_ARROW";
			}
			else
			{
				
				// We check next phase because displayed phase is the current phase (met phase)
				act = sp_ojs_next_phase(current_act);
												
				if (act instanceof Activity && act.printAttribute("ID") != "" )
				{
					if (act.SP_NF_S_ACT_PS_YEAR != selected_year && act.SP_NF_S_YEARLY_SD_YEAR==selected_year)
					{
						return "SP_IMG_ORANGE_ARROW";
					}	
						
					// check if the planned start is delayed by 4weeks for the yearly start date AND that the next_phase should be displayed
					//else if(act.SP_NF_D_YEARLY_REF_SD != -1 && act.SP_NF_D_YEARLY_REF_SD != undefined && act.PS > context.callDateFormula("ADD_DURATION(" + act.SP_NF_D_YEARLY_REF_SD.sdate + ",'28d','')") && //act.SP_NF_B_NV_PIP_DYN_ACT_FILTER)
					//{					
					//	return "SP_IMG_ORANGE_ARROW";
					//}
					else if (act.SP_NF_B_CHECK_MTERM == true && current_act.SP_NF_B_CHECK_MTERM == false && act.SP_NF_B_NV_PIP_DYN_ACT_FILTER )
					{
						return "SP_IMG_ORANGE_ARROW";
					}
					
									
					//else check if the phase should be displayed
					else if (current_act.SP_NF_B_DISP_ACT_DYNAMIC_YEARLY && current_act.SP_NF_B_CHECK_MTERM)
					{
						return "SP_IMG_ORANGE_ARROW";
					}
							
				}
			}			
		}
	}
	//return "SP_IMG_TRANSPARENT_IMAGE";
	return "";
}
sp_ojs_display_arrow_orange.exportfunction({"STRING"},"STRING");

// Creation to display blue arrows
function sp_ojs_display_arrow_blue(useless)
{
//	var imagename = sp_ojs_display_arrow_orange("");
//	if (imagename == "SP_IMG_TRANSPARENT_IMAGE")
//	{
		var act = this.object;
		if (act instanceof opxActivity)
		{
			var selected_year = context.SP_AA_S_NV_YEAR_FILTER;
			var current_year_s = context.SP_NF_S_OC_CURRENT_DATE_YEAR;
			
			//Common : Yearly baseline PS in selected year and PS in selected Year
			if (act.SP_NF_S_ACT_PS_YEAR == selected_year && act.SP_NF_S_YEARLY_SD_YEAR == selected_year && act.SP_NF_B_NV_PIP_DYN_ACT_FILTER_FINAL)
			{
				//Light blue : (Selected Year = Current Year) and (MSTAR or MSTAR-PREDEV activity type milestone in current Year))
				if not(act.SP_NF_B_CHECK_MTERM)
				{
					if (act.SP_NF_B_CHECK_MSTAR)
					{			
						if (act.SP_NF_B_TBC)
						{
							return "SP_IMG_BLUE_SKY_ARROW_TBC"
						}
						else
						{
							return "SP_IMG_BLUE_SKY_ARROW";
						}
					}
					else
					{		
						if (act.SP_NF_B_TBC )
						{
							return "SP_IMG_GREY_ARROW"
						}
						else
						{
							return "SP_IMG_DARK_BLUE_ARROW";
						}				
					}		
				}
			}	
		}
		//return "SP_IMG_TRANSPARENT_IMAGE";
		return "";
//	}	
}
sp_ojs_display_arrow_blue.exportfunction({"STRING"},"STRING");

// Function to draw blue and orange arrow 
function sp_ojs_drawArrow(Type)
{
	var imagename = undefined;
	if (this instanceof Graphics)
	{
		if (Type == "BLUE")
		{
			imagename = sp_ojs_display_arrow_blue("");
		}
		else 
		{
			imagename = sp_ojs_display_arrow_orange("");
		}		
		
		if (imagename != "")
		{
			var imageObject = "OPXIMAGE".get(imagename);
			
			if (imageObject instanceOf opxImage)
			{
				this.drawimage(imageObject, 0, 0, true, this.width, this.height, true, 0, 1);
			}
		}	
	}
}

function sp_clean_useless_ref_version()
{
var prj_ver=this;
var nb_monthly=2;
var nb_yearly=1;
var vec_ref=new vector();
var result="";

if (prj_ver instanceof opxproject && prj_ver.state=="Simulation")
{
withoutlocking
{
	fromobject(prj_ver)
	{
		for (var ref in "OpxREFERENCE".findclass() where (ref.file==prj_ver && (nb_monthly!=0 || nb_yearly!=0))  order by {{"INVERSE","NAME"}})
		{

			if (ref.name=="YEARLY" && nb_yearly!=0)
			{
			vec_ref.push(ref.name);
			nb_yearly=nb_yearly-1;
			}
			else
			{
				if ((ref.DESC.position("Monthly") instanceof NUMBER) && ref.DESC.position("Monthly")==0 && nb_monthly!=0)
				{
					vec_ref.push(ref.name);
					nb_monthly=nb_monthly-1;
				}
				else
				{
					ref.delete();
				}
			}
		}
	}	
}
	
}
if (vec_ref.length >0)
{
result=	vec_ref.JOIN(",");
}
return result;
}
sp_clean_useless_ref_version.exportfunction();


function sp_delete_old_versions()
{
WriteToLog("Start sp_delete_old_versions function");
	
withoutlocking
{
	for (var old_version in "OpxProject".findclass() where old_version.VERSION_NUMBER != "" &&  old_version.SPV6_AA_B_NV_VERSION == true && old_version.state=="Simulation")
	{
	WriteToLog("Delete the version ~a",old_version);	
	if (old_version.LOCKED == "")
	{	
		WriteToLog("Open and lock ~a",old_version);
		old_version.callMacro("OPEN");
		old_version.callMacro("LOCK");
	}	
	old_version.delete();
	}
}
WriteToLog("End sp_delete_old_versions function");		
}
sp_delete_old_versions.exportfunction();

function sp_create_nv_port_versions()
{
	var portfolio=this;
	var new_version;
	var projectVersion;
	var user_group_obj1;
	var user_group_obj2;
	var user_group_obj3;
	var user_group_obj4;
	
	WriteToLog("Start sp_create_nv_port_versions function");
	//set semaphore for max number of creation alert
	context.SP_AA_SB_SEM_AL_VERSION = true;
	for(var project in portfolio)
	{
		
		if(project.open == false)
		{
			WriteToLog("Opening project ~a",project);
			project.callMacro("OPEN");
		}
		
		if(project.open)
		{
			WriteToLog("Processing ~a",project);
			new_version = project.CallMacro("CreateANewVersion"); 
			WriteToLog("Versions is created for  ~a",project);
			
			for(var version in project.versions order by {{"INVERSE","VERSION_NUMBER"}})
			{
				//la version qui vient d'être créée est celle qui a le plus gros numéro
				projectVersion = version;
				break;
			}
			
			if ((projectVersion instanceof opxproject) && (projectVersion.state=="Simulation"))
			{
				
				WriteToLog("Treating version ~a",projectVersion);
				projectVersion._PV_AA_S_STATUS = "Scenario";
				projectVersion.VERSION_DOCUMENTATION = "NV PORTFOLIO version - automatically created";				
				// update access rights to make sure that the contract will not be modified
				projectVersion.RIGHTS = "Inaccessible to others";
				user_group_obj1 = "opxUser_group".get("G_ADM");
				user_group_obj2 = "opxUser_group".get("G_PORTADM");
				user_group_obj3 = "opxUser_group".get("G_PORTLIM");
				user_group_obj4 = "opxUser_group".get("G_PORTFULL");

				if (user_group_obj1 instanceof opxUser_group && user_group_obj2 instanceof opxUser_group)
				{
					projectVersion.READ_WRITE_GROUPS = "G_ADM,G_PORTADM";
				}
				if (user_group_obj3 instanceof opxUser_group && user_group_obj4 instanceof opxUser_group)
				{
					projectVersion.READ_ONLY_GROUPS = "G_PORTLIM,G_PORTFULL";
				}
				projectVersion.OWNER="intranet";
				projectVersion.SPV6_AA_B_NV_VERSION = true;
				WriteToLog("End modification in ~a",projectVersion);
				projectVersion.callMacro("SAVE");		
			}				
		}	
	}	
	context.SP_AA_SB_SEM_AL_VERSION = false;
	WriteToLog("End  sp_create_nv_port_versions function");
}
sp_create_nv_port_versions.exportfunction();

function sp_update_nv_portfolio_list()
{
var nv_portfolio_final_name = "NV_PORTFOLIO_REPORTING";
var portfolio_final = "Opx_FF_PT_FAVOR_FILTERS".get(nv_portfolio_final_name);
var projectVersion=this;
WriteToLog("Start  sp_update_nv_portfolio_list function");
if 	((projectVersion instanceof opxproject) && (projectVersion.state=="Simulation"))
{
	WriteToLog("Old value : ~a",portfolio_final._FF_AA_S_PROJ_LIST);
	if (portfolio_final._FF_AA_S_PROJ_LIST == "")
	{
		portfolio_final._FF_AA_S_PROJ_LIST = projectVersion.printAttribute("ID");
	}
	else
	{
		portfolio_final._FF_AA_S_PROJ_LIST += "," + projectVersion.printAttribute("ID");
	}
	WriteToLog("New value : ~a",portfolio_final._FF_AA_S_PROJ_LIST);
}
WriteToLog("End  sp_update_nv_portfolio_list function");
}
sp_update_nv_portfolio_list.exportfunction();


function sp_create_nv_portfolio_versions()
{
	var nv_portfolio_name = "NV_PORTFOLIO_SELECTION";
	var nv_portfolio_final_name = "NV_PORTFOLIO_REPORTING";
	var portfolio = "Opx_FF_PT_FAVOR_FILTERS".get(nv_portfolio_name);
	var portfolio_final = "Opx_FF_PT_FAVOR_FILTERS".get(nv_portfolio_final_name);
	var count = 0;
	var list_ref;
WriteToLog("Start sp_create_nv_portfolio_versions function");
	if ((portfolio instanceof Opx_FF_PT_FAVOR_FILTERS && portfolio.printAttribute("ID") != "")
			&& (portfolio_final instanceof Opx_FF_PT_FAVOR_FILTERS && portfolio_final.printAttribute("ID") != ""))
	{
		// Empty portfolio versions list
		portfolio_final._FF_AA_S_PROJ_LIST = "";

		// Delete old versions
		sp_delete_old_versions();
		context.callMacro("SAVE-DATASETS");

		// Create nv versions
		//context.Set("*DO-NOT-STORE-REFERENCES-IN-PROJECT-VERSION*",false);
		portfolio.sp_create_nv_port_versions();
		//context.Set("*DO-NOT-STORE-REFERENCES-IN-PROJECT-VERSION*",true);
	
		for (var nv_version in "OpxProject".findclass() where nv_version.SPV6_AA_B_NV_VERSION == true && nv_version.state=="Simulation")
		{
			if (nv_version.LOCKED == "")
			{	
				WriteToLog("Open and lock ~a",nv_version);
				nv_version.callMacro("OPEN");
				nv_version.callMacro("LOCK");
			}
			// cleaning useless references
			/*
			WriteToLog("Deleting useless references in version ~a",nv_version);	
			list_ref=nv_version.sp_clean_useless_ref_version();
			nv_version.callMacro("SAVE");
			WriteToLog("Useless reference are deleted ~a",nv_version);
			WriteToLog("Only these refrences are kept ~a",list_ref);
			*/
			//Copy baseline in project version previously created
			WriteToLog("Start copy baselines ~a",nv_version);
			nv_version.sp_ojs_copy_ref_in_version();
			WriteToLog("End copy baselines ~a",nv_version);
			//update final portfolio
			WriteToLog("Adding project versions in NV_PORTFOLIO_REPORTING ~a",nv_version);
			nv_version.sp_update_nv_portfolio_list();
			
			// Empty organization field
			nv_version.ORGANIZATION = "";
		}
	}
WriteToLog("End  sp_create_nv_portfolio_versions function");

}
sp_create_nv_portfolio_versions.exportfunction();

function sp_del_useless_ref_all_versions()
{
var list_ref;	
for (var nv_version in "OpxProject".findclass() where nv_version.SPV6_AA_B_NV_VERSION == true && nv_version.state=="Simulation")
{
	if (nv_version.LOCKED=="")
	{	
		WriteToLog("Open and lock ~a",nv_version);
		nv_version.callMacro("OPEN");
		nv_version.callMacro("LOCK");
	}
	// cleaning useless references
	
	WriteToLog("Deleting useless references in version ~a",nv_version);	
	list_ref=nv_version.sp_clean_useless_ref_version();
	WriteToLog("Useless reference are deleted ~a",nv_version);
	WriteToLog("Only these refrences are kept ~a",list_ref);
	nv_version.callMacro("SAVE");
}	
}
sp_del_useless_ref_all_versions.exportfunction();


writetolog("Script SPV6_NV_PORTFOLIO loaded with version ~a ", revision_number); 

//* -*- Mode: C++ -*- *****************************************************
//  COPYRIGHT (C) PLANISWARE Date: 2017/09/08 09:47:05                                             
//                                                                          
//  All Rights Reserved                                                     
// 
//  This program and the information contained herein are confidential to
//  and the property of PLANISWARE and are made available only to PLANISWARE
//  employees for the sole purpose of conducting PLANISWARE business.
// 
//  This program and copy therof and the information contained herein shall
//  be maintained in strictest confidence ; shall not be copied in whole or
//  in part except as authorized by the employee's manager ; and shall not
//  be disclosed or distributed (a) to persons who are not PLANISWARE employees,
//  or (b) to PLANISWARE employees for whom such information is not necessary in
//  connection with their assigned responsabilities.
// 
//  There shall be no exceptions to the terms and conditions set forth
//  herein except as authorized in writing by the responsible PLANISWARE General
//  Manager.
//
// 
//  FILE    : RCSfile: SPV6_NV_PORTFOLIO.ojs,v 
// 
//  AUTHOR  : Author: mlakhal 
// 
//  VERSION : Id: SPV6_NV_PORTFOLIO.ojs,v3.45 2019/06/06 14:36 MBL 
// 
//  PURPOSE :
// 
//  HISTORY :
//  Log: SPV6_NV_PORTFOLIO.ojs,v
var revision_number="3.44";
//

//  Revision 3.44 2019/01/03 13:40 MBL Update sp_ojs_display_prj_report to recompute date and cost on the project before the dashboard display
//  Revision 3.43 2018/05/02 13:17 LFA Update sp_ojs_display_arrow_orange and sp_ojs_display_arrow_blue to display no image if there is no arrow to display
//  Revision 3.42 2018/04/12 10:40 LFA OTD 76552 - Redefinition of function sp_ojs_dashboard_viewer by Planisware
//  Revision 3.41 2018/03/02 14:22 JBE Update sp_ojs_display_arrow_blue to remove condition on orange arrow
//	Revision 3.40 2018/02/23 09:15 JBE Update sp_ojs_nv_year_filter_toolbar to display year-10 to year+40 because it impacts Entry & Exit Toolbar
//	Revision 3.39 2018/02/13 14:11 JBE Update sp_ojs_display_arrow_orange to display orange arrow only for current year and to include MTERM condition
//									   Update sp_ojs_display_arrow_blue to include MTERM condition, and to apply it only if there is no orange arrow to display
//									   Update sp_ojs_nv_dynamic_act_filter_final to include MTERM condition and remove condition about yearly baseline (4 weeks) 
//									   Update sp_ojs_check_MTERM_FORMULA to compare PS instead of PF
//									   Update sp_ojs_nv_year_filter_toolbar to display year-1 to year+40
//									   
//  Revision 3.38 2018/02/12 18:50 JBE Update  sp_ojs_next_phase to take in account approach to calculate next phase
//  Revision 3.37 2018/02/12 09:30 JBE Update function _kb_postit_drawPostIt + Ajout de la function _kb_kanban_updateScrollView pour l'OTD 75128
//	Revision 3.36 2017/02/02 16:11 YSA correcte functions for nv portfolio batch
//  Revision 3.35 2018/01/25 15:56 JBE sp_ojs_display_arrow, "else" added on line 702 because to avoid last condition displaying dark bue arrow will by-pass orange arrow for MTERM case
//  
//	Revision 3.34 2017/12/27 16:11 YSA correcte functions for nv portfolio batch
//	sp_del_useless_ref_all_versions, sp_create_nv_portfolio_versions, sp_update_nv_portfolio_list, sp_create_nv_port_versions,sp_delete_old_versions
//
//  Revision 3.33 2018/01/09 16:11 
//		- JBE Update sp_ojs_count_mouvement_dynamic_report to not count TBC activity type as a movment
//		- JBE Re-activation of sp_ojs_copy_ref_in_version using new script provided by PLW
//
//	Revision 3.32 2017/12/27 16:11 YSA correcte sp_ojs_copy_ref_in_version in spv6_create_nv_portfolio_version1 and adding sp_clean_useless_ref_version function
//
//  Revision 3.31 2017/12/22 16:11 NGU deactivate sp_ojs_copy_ref_in_version in spv6_create_nv_portfolio_version1
//
//  Revision 3.30  2017/12/21 10:49:25  lfavre
//  NV Pipeline Projection : Creation of functions sp_ojs_check_MSTAR_FORMULA, sp_ojs_check_MTERM_FORMULA, sp_ojs_display_arrow_orange, sp_ojs_display_arrow_blue and sp_ojs_drawArrow
//  Creation of function sp_ojs_has_is_movement and modification of function sp_ojs_count_mouvement_dynamic_report to count movements on phases
//
//  Revision 3.29  2017/12/15 10:49:25  AHasni
//  addin sp_ojs_all_tpp_toolbar function
//
//  Revision 3.28  2017/12/13 10:49:25  flecanut
//  - temporary workaround for OTD 74712 : set and unset opxVariable 'DO-NOT-STORE-REFERENCES-IN-PROJECT-VERSION' in 'spv6_create_nv_portfolio_version'
//
//  Revision 3.27  2017/09/08 01:31:22  flecanut
//  - correction of functions 'sp_ojs_copy_ref_in_version' and 'spv6_create_nv_portfolio_version1' to enable reference coy to project versions 
//  
//	Revision 3.26 mrochas 2017/11/16
//	supression de la fonction sp_ojs_initialiaze_toolbarfilter
//	jbeaulieu
//  - update method _kb_postit_drawPostIt
// 
//  Revision 3.25  2017/09/08 09:47:05  mlakhal
//  - add sp_js_list_prj_portfolio
//
//  Revision 3.24  2017/09/08 08:59:53  mlakhal
//  - add sp_ojs_initialiaze_toolbarfilter
//
//  Revision 3.23  2017/09/01 13:02:24  mlakhal
//  - typo
//
//  Revision 3.22  2017/09/01 13:00:25  mlakhal
//  - add sp_ojs_count_mouvement_dynamic_report
//
//  Revision 3.21  2017/08/21 15:31:30  mlakhal
//  - add function to count boxes in pipeline dynamic view
//
//  Revision 3.20  2017/08/18 13:51:28  mlakhal
//  - update function for counting
//
//  Revision 3.19  2017/08/18 12:54:32  mlakhal
//  - add function for TC evol (multi value of field Timecard Manager)
//
//  Revision 3.18  2017/08/17 15:35:30  mlakhal
//  - new function to display arrow in pipeline arrow
//
//  Revision 3.17  2017/08/17 12:49:06  mlakhal
//  - set NV version to Inaccessible to other
//
//  Revision 3.16  2017/08/11 11:22:35  mlakhal
//  - modification of _kb_postit_drawPostIt TO color text in Entry & exit
//
//  Revision 3.15  2017/08/07 15:11:45  mlakhal
//  - do not check is project is writable when creating version.
//
//  Revision 3.14  2017/08/04 14:11:01  mlakhal
//  - modification of spv6_create_nv_portfolio_version1 to unlock project is locked and modification of read only group
//
//  Revision 3.13  2017/07/10 13:17:28  mlakhal
//  - correction of sp_ojs_open_tpp_file
//
//  Revision 3.12  2017/07/06 15:31:06  mlakhal
//  - correction on version generation
//
//  Revision 3.11  2017/06/29 13:40:03  mlakhal
//  - spv6_create_nv_portfolio_version1 : we copy the last monthly and last yearly in the version
//
//  Revision 3.10  2017/06/29 10:06:51  mlakhal
//  - release 1.7
//
//  Revision 3.9  2017/06/19 16:12:27  mlakhal
//  - nv pipeline timeline
//
//  Revision 3.8  2017/06/14 14:48:40  mlakhal
//  - new functions for pipeline
//
//  Revision 3.7  2017/06/12 07:42:52  mlakhal
//  modify method _kb_postit_drawBackground
//
//  Revision 3.6  2017/06/12 07:16:58  mlakhal
//  - add sp_ojs_act_postit_color
//
//  Revision 3.5  2017/06/07 14:45:53  mlakhal
//  - add sp_ojs_open_tpp_file
//
//  Revision 3.4  2017/05/09 08:49:45  mlakhal
//  - nv portfolio version release 1.0
//
//  Revision 3.3  2017/05/05 14:51:30  mlakhal
//  *** empty log message ***
//
//  Revision 3.2  2017/05/05 14:49:36  mlakhal
//  *** empty log message ***
//
//  Revision 3.1  2017/05/05 14:03:49  mlakhal
//  - function called in batch SPV6_BATCH_NV_PORTFOLIO
//   (header added automatically)
//
//**************************************************************************
//script called in batch to create projects version in NV Portfolio

function spv6_create_nv_portfolio_version1 ()
{
withoutlocking
{
	var nv_portfolio_name = "NV_PORTFOLIO_SELECTION";
	var nv_portfolio_final_name = "NV_PORTFOLIO_REPORTING";
	var portfolio = "Opx_FF_PT_FAVOR_FILTERS".get(nv_portfolio_name);
	var count = 0;
	var list_ref;	//set semaphore for max number of creation alert
	context.SP_AA_SB_SEM_AL_VERSION = true;
	
	//empty final portfolio list
	var portfolio_final = "Opx_FF_PT_FAVOR_FILTERS".get(nv_portfolio_final_name);
	if (portfolio_final instanceof Opx_FF_PT_FAVOR_FILTERS && portfolio_final.printAttribute("ID") != "")
	{
		portfolio_final._FF_AA_S_PROJ_LIST = "";
	}
	
	if (portfolio instanceof Opx_FF_PT_FAVOR_FILTERS && portfolio.printAttribute("ID") != "")
	{
		
		//delete previous version created
		writeln("***** Deleting old version");
		withmonitoring(true)
		{
			
			for (var old_version in opxproject where old_version.VERSION_NUMBER != "" &&  old_version.SPV6_AA_B_NV_VERSION == true)
			{
				writeln(old_version.printAttribute("ID") + " deleted...");
				withoutlocking
				{
					if (old_version.LOCKED == "")
					{	
						writeln(old_version.printAttribute("ID") + " is locked, unlocking it...");
						old_version.callMacro("OPEN");
						old_version.callMacro("LOCK");
					}
					
					old_version.delete();
				}
			}
		}
		
		
		for(var project in portfolio)
		{
			count++;
		}
		
		withmonitoring(count)
		{
			for(var project in portfolio)
			{
				writeln("Treating project " + project.printAttribute("ID"));
				/*
				if(project.open == false)
				{
					writeln("Opening project " + project.printAttribute("ID"));
					project.callMacro("OPEN");
				}
				*/
				
				// if(project.writable == false)
				// {
				// writeln("Project " + project.printAttribute("ID") + " not writable");
				// }
				
				if(project.open)// && project.writable)
				{
					writeln("Project " + project.printAttribute("ID") + " is open and writable");
					
					var new_version = project.CallMacro("CreateANewVersion"); 
					
					writeln("Version created for  " + project.printAttribute("ID"));
					
					var projectVersion = undefined;
					for(var version in project.versions order by {{"INVERSE","VERSION_NUMBER"}})
					{
						//la version qui vient d'être créée est celle qui a le plus gros numéro
						projectVersion = version;
						break;
					}
					writeln("Treating version " + projectVersion);
					
					if ((projectVersion instanceof opxproject) && (projectVersion.state=="Simulation"))
					{							
						projectVersion._PV_AA_S_STATUS = "Scenario";
						projectVersion.VERSION_DOCUMENTATION = "NV PORTFOLIO version - automatically created";				
						// update access rights to make sure that the contract will not be modified
						projectVersion.RIGHTS = "Inaccessible to others";
						var user_group_obj1 = "opxUser_group".get("G_ADM");
						var user_group_obj2 = "opxUser_group".get("G_PORTADM");
						var user_group_obj3 = "opxUser_group".get("G_PORTLIM");
						var user_group_obj4 = "opxUser_group".get("G_PORTFULL");
						if (user_group_obj1 instanceof opxUser_group && user_group_obj2 instanceof opxUser_group)
						{
							projectVersion.READ_WRITE_GROUPS = "G_ADM,G_PORTADM";
						}
						if (user_group_obj3 instanceof opxUser_group && user_group_obj4 instanceof opxUser_group)
						{
							projectVersion.READ_ONLY_GROUPS = "G_PORTLIM,G_PORTFULL";
						}
						projectVersion.OWNER="intranet";
						
						
						projectVersion.SPV6_AA_B_NV_VERSION = true;
						writeln("End modification version for project " + project.printAttribute("ID"));
						
						//projectVersion.callMacro("SAVE");
						
						// ALM 1103 Copy last YEARLY and last MONTHLY reference to project version
						projectVersion.sp_ojs_copy_ref_in_version();
						// cclean useless references in version						
						//list_ref=projectVersion.sp_clean_useless_ref_version();
						//WriteToLog(projectVersion+" :list of refereneces >>"+list_ref);
						//add version to final portfolio
						writeln("Modifying final portfolio");
						if (portfolio_final instanceof Opx_FF_PT_FAVOR_FILTERS && portfolio_final.printAttribute("ID") != "")
						{
							writeln("Old value : " + portfolio_final._FF_AA_S_PROJ_LIST);
							if (portfolio_final._FF_AA_S_PROJ_LIST == "")
							{
								portfolio_final._FF_AA_S_PROJ_LIST = projectVersion.printAttribute("ID");
							}
							else
							{
								portfolio_final._FF_AA_S_PROJ_LIST += "," + projectVersion.printAttribute("ID");
							}
							writeln("New value : " + portfolio_final._FF_AA_S_PROJ_LIST);
						}	
					}				
				}
				
				"Versioning NV PORTFOLIO projects...".monitor(count,1,1);
				
			}
		}
	}
	else
	{
		WriteToLog("NV portfolio with name " + nv_portfolio_name + " does not exist");
		//alert("NV portfolio with name " + nv_portfolio_name + " does not exist");
	}
	
	//reset semaphore for max number of creation alert
	context.SP_AA_SB_SEM_AL_VERSION = false;
}
}
spv6_create_nv_portfolio_version1.exportfunction();

function spV6_remove_orga()
{
	for(var prj in "opxProject".findclass() where prj.VERSION_NUMBER != "" && prj.SPV6_AA_B_NV_VERSION == true &&  prj.ORGANIZATION != "")
	{
		withoutlocking
		{
			prj.ORGANIZATION = "";
		}
	}
}
spV6_remove_orga.exportfunction();

function spv6_create_nv_portfolio_version ()
{
	// FLC 13-12-2017 Temporary workaround for OTD 74712 (Fonction "COPY_TO_DATASET" KO on project versions)
	// Set and unset opxVariable 'DO-NOT-STORE-REFERENCES-IN-PROJECT-VERSION'
	//context.Set("*DO-NOT-STORE-REFERENCES-IN-PROJECT-VERSION*",false);
	
	spv6_create_nv_portfolio_version1();
	spV6_remove_orga();
	
	//context.Set("*DO-NOT-STORE-REFERENCES-IN-PROJECT-VERSION*",true);
}
spv6_create_nv_portfolio_version.exportfunction();



/**********************************************************
**************** TPP FUNCTION******************************
***********************************************************/
function sp_ojs_open_tpp_file()
{
	var Path = "";
	if (this instanceof opxProject)
	{
		Path = this.SP_NF_S_TPP_LINK;
	}
	else if (this.object instanceof opxProject)
	{
		Path = this.object.SP_NF_S_TPP_LINK;
	}
		
	if (Path != "")
		{
		var symb = new symbol("PDF","KEYWORD");
		var url = lispcall "wttp::get-download-url" (symb);
		var PathString = lispcall "wttp::generate-download-url-ref" (url,Path,context.applet.user);

		var link = new hyperlink("url","page",PathString,"PopUp",true);
		link.go("");
		return true;
	}
}

function sp_ojs_tpp_link_button()
{
	var id=context.SP_AA_S_OC_NV_PRJ_ID;
	var project="opxproject".get(id);
	this.addmousablearea(0, 0, this.cell.width, this.cell.height, 2, "TPP Link", project, sp_ojs_open_tpp_file, sp_ojs_open_tpp_file,false,color("LINE-HIGHLIGHT-COLOR"));
}

function sp_ojs_all_tpp_toolbar()
{
	var result=false;
	var Path = "/compassv6/PDF/PDF_FULL/target_product_profiles.pdf"
	if (Path != "")
	{
		var symb = new symbol("PDF","KEYWORD");
		var url = lispcall "wttp::get-download-url" (symb);
		var PathString = lispcall "wttp::generate-download-url-ref" (url,Path,context.applet.user);

		var link = new hyperlink("url","page",PathString,"PopUp",true);
		link.go("");
		result=true;
	}
return result;
}

/**********************************************************
**************** END TPP FUNCTION *************************
***********************************************************/

function sp_ojs_decision_tree()
{
	var id=context.SP_AA_S_OC_NV_PRJ_ID;
	var prj="opxproject".get(id);
	if (prj instanceof opxproject)
	{
		//if this is a version, we use the image from the project
		if(prj.ORIGIN_PROJECT != "")
		{
			prj = prj.ORIGIN_PROJECT;
		}
		if (prj instanceof opxproject && prj.PM_CREA_STARTING_DOC != undefined && prj.PM_CREA_STARTING_DOC != "" )
		{
			this.drawimage(prj.PM_CREA_STARTING_DOC, 0, 0, true, this.width, this.height, true, 0, 1);
		}
	}
}
/**********************************************************
**************** PIPELINE FUNCTION**************************
***********************************************************/
function sp_ojs_act_postit_color(useless)
{
	var act = this;
	if (act instanceof opxActivity)
	{
		var prj = act.PROJECT;
		
		if (prj instanceof opxproject)
		{
			if (prj.SP_RA_PRJ_PROFILE.printAttribute("NAME") == "Novel")
			{
				return "SP_COL_NV_PRJ_TYPE_1_COLOR";
			}
			else if (prj.SP_RA_PRJ_PROFILE.printAttribute("NAME") == "Life Cycle Management")
			{
				return "SP_COL_NV_PRJ_TYPE_2_COLOR";
			}
			else
			{
				return "GREY";
			}
		}
	}
	return "GREY";
}

"sp_ojs_act_postit_color".exportfunction({"STRING"},"STRING");

//modify method to draw background color (same as title)
method _kb_postit_drawBackground on _kb_postit_modernStyle(graphics,i_X, i_Y, i_width, i_height,o_color){
  // graphics.foreground = o_color;
  graphics.foreground = color(o_color.toString());
  graphics.fillrectangle(i_X, i_Y, i_width, i_height);
}

method _kb_generatecolumn on _kb_kanbanStyle(kanban, title, objects, attributes, values, previous, otherValues) {
  var style = this;
  var titlelink = style.titlelink;
  if ( titlelink instanceof string) {
    if ( "OpxReport".get(titlelink) instanceof OpxReport) {
      titlelink = object_linkOnObject.closure(values.last(), titlelink);
    }else {
      titlelink = false;
    }
  }
  var colSize = this.columnswidth._kb_getColumnWidth(values);
//PLW - set kanban defaut witdh, need to be removed in 6.2.3 when evolution on kanban width will be set
  kanban.boxDefaultWidth = 150;
 // END PLW comment
  var props = new vector("kanban", kanban
                         , "title", title
                         , "titleheight", style.titleheight
                         , "titlegroup", style.titlegroup
                         , "spaceBetweenBoxes", style.spaceBetweenBoxes
                         , "titlelink", titlelink
                         , "titlebackground", style.titlebackground
                         , "columnscolor", style.columnsColor
                         , "titleaddon", style.titleaddon
                         , "titleaddonwidth", style.titleaddonwidth
                         , "titlefont", style.titlefont
                         , "v_badgesAttributes", style.v_badgesAttributes
                         , "v_badgesValuesTocount", style.v_badgesValuesTocount
                         , "v_badgesQuantityToCount", style.v_badgesQuantityToCount
                         , "v_badgesColors", style.v_badgesColors
                         , "v_badgesOrders", style.v_badgesOrders
                         , "titlegaugestatusfield", style.titlegaugestatusfield
                         , "coloroverloadcapacityfield", style.coloroverloadcapacityfield
                         , "titlegaugeloadfield", style.titlegaugeloadfield
                         , "titlegaugecapacityfield", style.titlegaugecapacityfield
                         , "coloroverloadgaugefield", style.coloroverloadgaugefield
                         , "changepostitoverloadcolor", style.changepostitoverloadcolor
                         , "displayoverloadgauge", style.displayoverloadgauge
                         , "gaugecapacitycostunitfield", style.gaugecapacitycostunitfield
                         , "titleaddonheight", style.titleaddonheight
                         , "postitcolor", style.postItColor
                         , "width", colSize ? (colSize * (kanban.boxDefaultWidth + style.spaceBetweenBoxes) + kanban.XSpaceBetweenSteps) : style.columnwidth
                         , "autosize", colSize ? false : true
                         /* , "drawlines", style.drawlines */
                         /* , "drawcolumns", style.drawcolumns */
                         , "dropmethod", _kb_dragPostIt
                         , "columnsDropMethod", style.columnsDropMethod != undefined ? style.columnsDropMethod : false
                         , "drawlines", style.groupby ? false : style.drawlines
                         , "drawcolumns", style.drawcolumns
                         , "dropmask", 255
                         , "dragmask", 255
                         , "dragmethod", _kb_dragPostIt
                         , "selector", _kb_selectObjects.closure(objects, style)
                         , "userdata", new vector("colinfo", new vector(attributes, values))
                         );
  if ( style.fixedHeight) {
    props.setPlist("contentheight", style.fixedHeight);
  }
  for ( var o = 0; o < otherValues.length; o=o+2) {
    if ( otherValues[o] != "userdata") {
      props.setPlist(otherValues[o], otherValues[o+1]);
    }
  }
  var customUserdata = otherValues.getPlist("userdata");
  if ( customUserdata) {
    for ( var i = 0; i < customUserdata.length; i=i+2) {
      props.getPlist("userdata").setPlist(customUserdata[i], customUserdata[i+1]);
    }
  }

  var o_step = new _kb_kanbanStep(props);
  kanban.steps.push(o_step);

  if ( previous instanceof _kb_kanbanStep) {
    previous.next = o_step;
    o_step.previous = previous;
  }
  if ( otherValues.getPlist("toplinkto")) {
    otherValues.getPlist("toplinkto").userdata.setPlist("kanbanstepsincolumn", otherValues.getPlist("toplinkto").userdata.getPlist("kanbanstepsincolumn", new vector()).vector_pushnew(o_step));
  }

  return o_step;
}

//used in toolbar SP_TB_NV_PIPELINE
/*function sp_ojs_nv_year_filter()
{
	var v = new vector();
	for(var i =2000;i<=2200;i++)
	{
		v.push(i.toString());
	}
this.possiblevalues = v;
}
*/

function sp_ojs_nv_year_filter_toolbar(offset)
{
	var default_value = context.callNumberFormula("YEAR_NUMBER(PERIOD_START($DATE_OF_THE_DAY,\"Year\"," + offset + "))")
	var year_to_return = context.callNumberFormula("YEAR_NUMBER($DATE_OF_THE_DAY)")

	var v = new vector();
	for(var i =year_to_return-10;i<=year_to_return+40;i++)
	{
		v.push("print_number".call(i,"####"));
	}
	this.possiblevalues = v;
	
	//default_value
	if (this.value == "")
	{
		this.value = "print_number".call(default_value,"####");
		//refreshallwindows();
	}
}

//used to calculate dynamic date
function sp_ojs_nv_pipeline_dynamic_date(useless)
{
	if (context.SP_AA_S_NV_YEAR_FILTER != "" && context.SP_AA_S_NV_YEAR_FILTER != undefined)
	{
		var s_dyn_date= "31-DEC-"+context.SP_AA_S_NV_YEAR_FILTER;
		
		var dyn_date = new Date(s_dyn_date)
		if(dyn_date instanceof Date)
		{
			return dyn_date;
		}
		else
		{
			return new date();
		}
	}
	return new date();
}

"sp_ojs_nv_pipeline_dynamic_date".exportfunction({"STRING"},"DATE");

// select last movement in case of several at year end for dynamic
function sp_ojs_last_movement(useless)
{
	var act = this;
	if (act instanceof opxActivity)
	{
		var prj = act.PROJECT;
		if (prj instanceof opxproject)
		{
			fromobject(prj)
			{
				for(var act2 in "opxActivity" where act2.SP_NF_B_NV_PIP_DYN_ACT_FILTER order by {{"INVERSE","PF"}})
				{					
					if(act.printAttribute("ID") == act2.printAttribute("ID"))
					{
						return true; // return only the last movement
					}
					else
					{
						return false;
					}
				}
			}
		}
	}
	return false;
}
"sp_ojs_last_movement".exportfunction({"STRING"},"BOOLEAN");

function sp_ojs_retrieve_mstar(useless)
{
	var act = this;
	if (act instanceof opxActivity)
	{
		var prj = act.PROJECT;
		if (prj instanceof opxproject)
		{
			fromobject(prj)
			{
				for(var act2 in "opxActivity" where (act2.WBS_TYPE.printAttribute("ID") == "MSTAR" || act2.WBS_TYPE.printAttribute("ID") == "MSTAR-PREDEV") && act2.PS.getYear().toString() == context.SP_AA_S_NV_YEAR_FILTER && act2.SP_NF_D_YEARLY_REF_SD != undefined && act2.SP_NF_D_YEARLY_REF_SD != -1 && act2.SP_NF_D_YEARLY_REF_SD.getYear().toString() == context.SP_AA_S_NV_YEAR_FILTER )
				{
					//Mstar or mstar-PREDEV PS and yearly baseline planned start start in the selected year
					return true; // return only the last movement					
				}
			}
		}
	}
	return false;
}
"sp_ojs_retrieve_mstar".exportfunction({"STRING"},"BOOLEAN");

function sp_ojs_check_MTERM(useless)
{
	var act = this;
	if (act instanceof opxActivity)
	{
		var prj = act.PROJECT;
		if (prj instanceof opxproject)
		{
			fromobject(prj)
			{
				for(var act2 in "opxActivity" where act2.WBS_TYPE.printAttribute("ID") == "MTERM" && act2.PS.getYear().toString() == context.SP_AA_S_NV_YEAR_FILTER && act2.PF < act.PF )
				{
					//MTERM is found and finish before the last movement
					return true;					
				}
			}
		}
	}
	return false;
}
"sp_ojs_check_MTERM".exportfunction({"STRING"},"BOOLEAN");

function sp_ojs_display_arrow(useless)
{
	var act = this;
	if (act instanceof opxActivity)
	{
		var selected_year = context.SP_AA_S_NV_YEAR_FILTER;
		var current_year = new Date();
		var current_year_s = current_year.getYear().toString();
		
		//ongoing year
		if (selected_year == current_year_s)
		{
			var prj = act.PROJECT;
			if (prj instanceof opxproject)
			{
				fromobject(prj)
				{
					//checking MSTAR milestones
					for(var act2 in "opxActivity" where (act2.WBS_TYPE.printAttribute("ID") == "MSTAR" || act2.WBS_TYPE.printAttribute("ID") == "MSTAR-PREDEV"))
					{
						//Mstar or mstar-PREDEV is in the project
						if(act.PS.getYear().toString() == selected_year && act.SP_NF_D_YEARLY_REF_SD != undefined && act.SP_NF_D_YEARLY_REF_SD != -1 && act.SP_NF_D_YEARLY_REF_SD.getYear().toString() == selected_year)
						{
							//and PS and yearly baseline PS are in the selected year
							if (act.WBS_TYPE.printAttribute("ID") != "")
							{
								var wbs_type_name =act.WBS_TYPE.printAttribute("NAME");
								if (wbs_type_name.substring(wbs_type_name.length-3,3) == "TBC")
								{
									return "SP_IMG_BLUE_SKY_ARROW_TBC"
								}
							}
							return "SP_IMG_BLUE_SKY_ARROW";
						}
						else if (act.WBS_TYPE.printAttribute("ID") != "")
						{
							var wbs_type_name =act.WBS_TYPE.printAttribute("NAME");
							if (wbs_type_name.substring(wbs_type_name.length-3,3) == "TBC")
							{
								return "SP_IMG_GREY_ARROW";
							}
						}
						else if (act2.PS.getYear().toString() != selected_year && act.SP_NF_D_YEARLY_REF_SD != undefined && act.SP_NF_D_YEARLY_REF_SD != -1 && act.SP_NF_D_YEARLY_REF_SD.getYear().toString() == selected_year)
						{
							//and only yearly baseline PS is in the selected year
							return "SP_IMG_ORANGE_ARROW";
						}			
					}
				}
				
				//no MSTART found
				if (act.WBS_TYPE.printAttribute("ID") != "")
				{
					var wbs_type_name =act.WBS_TYPE.printAttribute("NAME");
					if (wbs_type_name.substring(wbs_type_name.length-3,3) == "TBC")
					{
						return "SP_IMG_GREY_ARROW"
					}
				}
				//check if the movement is not met, the case where the stage is not the expected one, in that case the current activity should not be displayed => orange arrow
				if(act.SP_NF_B_NV_PIP_DYN_ACT_FILTER == false || sp_ojs_check_MTERM(""))
				{						
					return "SP_IMG_ORANGE_ARROW";
				}
				else if(act.PS.getYear().toString() == selected_year && act.SP_NF_D_YEARLY_REF_SD != undefined && act.SP_NF_D_YEARLY_REF_SD != -1 && act.SP_NF_D_YEARLY_REF_SD.getYear().toString() == selected_year)
				{
					// PS and yearly baseline PS are in the selected year
					return "SP_IMG_DARK_BLUE_ARROW";
				}
			}
		}
		else if (selected_year > current_year_s) //year++
		{
			if(act.PS.getYear().toString() == selected_year)
			{
				// PS and yearly baseline PS are in the selected year
				return "SP_IMG_DARK_BLUE_ARROW";
			}
		}
		else
		{
			return "SP_IMG_TRANSPARENT_IMAGE"; // return empty image
		}
		
	}
	return "SP_IMG_TRANSPARENT_IMAGE"; // return empty image
}
"sp_ojs_display_arrow".exportfunction({"STRING"},"STRING");


function sp_ojs_drawarrowImage(arg)
{
	var imagename = undefined;
	if (this instanceof Graphics)
	{
		if (arg == "")
		{
			imagename = sp_ojs_display_arrow_new("");
		}
		else 
		{
			imagename = arg;
		}
		
		if (imagename != "")
		{
			var imageObject = "OPXIMAGE".get(imagename);
			
			if (imageObject instanceOf opxImage)
			{
				this.drawimage(imageObject, 0, 0, true, this.width, this.height, true, 0, 1);
			}
		}			
	}
}


function sp_ojs_display_arrow_new(useless)
{
	var act = this.object;
	if (act instanceof opxActivity)
	{
		var selected_year = context.SP_AA_S_NV_YEAR_FILTER;
		var current_year = new Date();
		var current_year_s = current_year.getYear().toString();
		
		//ongoing year
		if (selected_year == current_year_s)
		{
			var prj = act.PROJECT;
			if (prj instanceof opxproject)
			{
				fromobject(prj)
				{
					//checking MSTAR milestones
					for(var act2 in "opxActivity" where (act2.WBS_TYPE.printAttribute("ID") == "MSTAR" || act2.WBS_TYPE.printAttribute("ID") == "MSTAR-PREDEV"))
					{
						//Mstar or mstar-PREDEV is in the project
						if(act.PS.getYear().toString() == selected_year && act.SP_NF_D_YEARLY_REF_SD != undefined && act.SP_NF_D_YEARLY_REF_SD != -1 && act.SP_NF_D_YEARLY_REF_SD.getYear().toString() == selected_year)
						{
							//and PS and yearly baseline PS are in the selected year
							if (act.WBS_TYPE.printAttribute("ID") != "")
							{
								var wbs_type_name =act.WBS_TYPE.printAttribute("NAME");
								if (wbs_type_name.substring(wbs_type_name.length-3,3) == "TBC")
								{
									return "SP_IMG_BLUE_SKY_ARROW_TBC"
								}
							}
							return "SP_IMG_BLUE_SKY_ARROW";
						}
						else if (act.WBS_TYPE.printAttribute("ID") != "")
						{
							var wbs_type_name =act.WBS_TYPE.printAttribute("NAME");
							if (wbs_type_name.substring(wbs_type_name.length-3,3) == "TBC")
							{
								return "SP_IMG_GREY_ARROW";
							}
						}
						else if (act.PS.getYear().toString() != selected_year && act.SP_NF_D_YEARLY_REF_SD != undefined && act.SP_NF_D_YEARLY_REF_SD != -1 && act.SP_NF_D_YEARLY_REF_SD.getYear().toString() == selected_year)
						{
							//and only yearly baseline PS is in the selected year
							return "SP_IMG_ORANGE_ARROW";
						}			
					}
				}
				
				//no MSTART found
				if (act.WBS_TYPE.printAttribute("ID") != "")
				{
					var wbs_type_name =act.WBS_TYPE.printAttribute("NAME");
					if (wbs_type_name.substring(wbs_type_name.length-3,3) == "TBC")
					{
						return "SP_IMG_GREY_ARROW"
					}
				}
				//check if the movement is not met, the case where the stage is not the expected one, in that case the current activity should not be displayed => orange arrow
				if(act.SP_NF_B_NV_PIP_DYN_ACT_FILTER == false || sp_ojs_check_MTERM(""))
				{						
					return "SP_IMG_ORANGE_ARROW";
				}
				if(act.PS.getYear().toString() == selected_year && act.SP_NF_D_YEARLY_REF_SD != undefined && act.SP_NF_D_YEARLY_REF_SD != -1 && act.SP_NF_D_YEARLY_REF_SD.getYear().toString() == selected_year)
				{
					// PS and yearly baseline PS are in the selected year
					return "SP_IMG_DARK_BLUE_ARROW";
				}
			}
		}
		else if (selected_year > current_year_s) //year++
		{
			if(act.PS.getYear().toString() == selected_year)
			{
				// PS and yearly baseline PS are in the selected year
				return "SP_IMG_DARK_BLUE_ARROW";
			}
		}
		else
		{
			return "SP_IMG_TRANSPARENT_IMAGE"; // return empty image
		}
		
	}
	return "SP_IMG_TRANSPARENT_IMAGE"; // return empty image
}
"sp_ojs_display_arrow_new".exportfunction({"STRING"},"STRING");


/*function sp_ojs_next_phase(phase)
{
	if (phase instanceof opxActivity && phase.printAttribute("ID") != "" && phase.get("?WBS_ELEMENT") == true && phase.WBS_TYPE.SP_AA_B_DISP_PIPELINE == true)	
	{
		var prj = phase.PROJECT;
		if (prj instanceof opxProject)
		{
			fromobject(prj)
			{
				for (var wbs in "opxActivity" where wbs.LEVEL > 1 && wbs.WBS_TYPE.SP_AA_B_DISP_PIPELINE == true && wbs.ONB != phase.ONB && wbs.get("?WBS_ELEMENT") && wbs.PS >= phase.PF order by {"PS"})
				{
					
					return wbs;
				}
			}			
		}
	}
	return false; //no next phase
}*/

function sp_ojs_next_phase(phase)
{
	if (phase instanceof opxActivity && phase.printAttribute("ID") != "" && phase.get("?WBS_ELEMENT") == true && phase.WBS_TYPE.SP_AA_B_DISP_PIPELINE == true)	
	{
		var prj = phase.PROJECT;
		if (prj instanceof opxProject)
		{
			if (phase.BREAKDOWN_0 != "" &&  phase.BREAKDOWN_0 != "NV_TEMPLATE.COMMON")
			{
				fromobject(prj)
				{
					for (var wbs in "opxActivity" where wbs.LEVEL > 1 && wbs.WBS_TYPE.SP_AA_B_DISP_PIPELINE == true && wbs.ONB != phase.ONB && wbs.get("?WBS_ELEMENT") && phase.BREAKDOWN_0 == wbs.BREAKDOWN_0 && wbs.PS >= phase.PF order by {"PS"})
					{
						return wbs;
					}
				}			
			}
			else
			{
				fromobject(prj)
				{
					for (var wbs in "opxActivity" where wbs.LEVEL > 1 && wbs.WBS_TYPE.SP_AA_B_DISP_PIPELINE == true && wbs.ONB != phase.ONB && wbs.get("?WBS_ELEMENT") && wbs.PS >= phase.PF order by {"PS"})
					{
						return wbs;
					}
				}	
			}
		}
	}
	return false; //no next phase
}

function sp_ojs_nv_dynamic_act_filter_final(useless)
 {
	var act = this;
	var selected_year = context.SP_AA_S_NV_YEAR_FILTER;
	var begin_current_year = new Date("01-Jan-"+selected_year);
	var end_current_year = new Date("31-Dec-"+selected_year);
	var current_year = new Date();
	var current_year_s = current_year.getYear().toString();
	
	if (act instanceof opxActivity && act.printAttribute("ID") != "" && act.FILE.PM_PRJ_FILTER == true && act.LEVEL > 1 && act.get("?WBS_ELEMENT") == true && act.WBS_TYPE.SP_AA_B_DISP_PIPELINE == true )	
	{
		//if selected year is not the current year, we just return the last movement for the year
		if (selected_year > current_year_s) 
		{
			return act.SP_NF_B_NV_PIP_DYN_ACT_FILTER;
		}
		else
		{
			//ongoing year
			//we need to check if the movement of the next phase is not met and should be displayed, in that case we display the phase (this activity)
			var next_phase = sp_ojs_next_phase(act);
						
			if (next_phase instanceof Activity && next_phase.printAttribute("ID") != "" )
			{
				// check if the planned start is delayed by 4weeks for the yearly start date AND that the next_phase should be displayed
				//if(next_phase.SP_NF_D_YEARLY_REF_SD != -1 && next_phase.SP_NF_D_YEARLY_REF_SD != undefined && next_phase.PS > context.callDateFormula("ADD_DURATION(" + next_phase.SP_NF_D_YEARLY_REF_SD.sdate + ",'28d','')") 
				//&& next_phase.SP_NF_B_NV_PIP_DYN_ACT_FILTER)
				//{					
				//	return true;// in this case we return the current phase
				//}
				//else 
				if (next_phase.SP_NF_B_CHECK_MTERM == true && act.SP_NF_B_CHECK_MTERM == false )
				{
					return true;// in this case we return the current phase
				}
			}
			if (act.SP_NF_B_CHECK_MTERM == true)
			{
				return false;
			}
			//else check if the phase should be displayed
			else
			{
				//return act.SP_NF_B_DISP_ACT_DYNAMIC_YEARLY;
				return act.SP_NF_B_DISP_ACT_DYNAMIC;
			}
			
		}
	}
	return false;
	
 }
 
 "sp_ojs_nv_dynamic_act_filter_final".exportfunction({"STRING"},"BOOLEAN");
 
/*
function sp_ojs_update_dyn_pipeline_count_lead_id(useless)
{
	if (context.SP_AA_N_CPT_DISP_LEAD_ID == 99)
	{
		context.SP_AA_N_CPT_LEAD_ID = 0;		
		context.SP_AA_N_CPT_DISP_LEAD_ID=1;
	}
	// context.SP_AA_N_CPT_LEAD_ID++;
	return true;
}
"sp_ojs_update_dyn_pipeline_count_lead_id".exportfunction({"STRING"},"BOOLEAN");

 function sp_ojs_update_dyn_pipeline_count_lead_opt(useless)
{
	alert("appelé ici 1")
	if (context.SP_AA_N_CPT_DISP_LEAD_OPT == 99)
	{
		context.SP_AA_N_CPT_LEAD_OPT = 0;		
		context.SP_AA_N_CPT_DISP_LEAD_OPT=1;
	}
	// context.SP_AA_N_CPT_LEAD_OPT++;
	return true;
}
"sp_ojs_update_dyn_pipeline_count_lead_opt".exportfunction({"STRING"},"BOOLEAN");

function sp_ojs_update_dyn_pipeline_count_preclinical(useless)
{
	if (context.SP_AA_N_CPT_DISP_PRECLINICAL == 99)
	{
		context.SP_AA_N_CPT_PRECLINICAL = 0;		
		context.SP_AA_N_CPT_DISP_PRECLINICAL=1;
	}
	// context.SP_AA_N_CPT_PRECLINICAL++;
	return true;
}
"sp_ojs_update_dyn_pipeline_count_preclinical".exportfunction({"STRING"},"BOOLEAN");

function sp_ojs_update_dyn_pipeline_count_phaseI(useless)
{
	if (context.SP_AA_N_CPT_DISP_PHASE_I == 99)
	{
		context.SP_AA_N_CPT_PHASE_I = 0;		
		context.SP_AA_N_CPT_DISP_PHASE_I=1;
	}
	// context.SP_AA_N_CPT_PHASE_I++;
	return true;
}
"sp_ojs_update_dyn_pipeline_count_phaseI".exportfunction({"STRING"},"BOOLEAN");

function sp_ojs_update_dyn_pipeline_count_phaseII(useless)
{
	if (context.SP_AA_N_CPT_DISP_PHASE_II == 99)
	{
		context.SP_AA_N_CPT_PHASE_II = 0;		
		context.SP_AA_N_CPT_DISP_PHASE_II=1;
	}
	// context.SP_AA_N_CPT_PHASE_II++;
	return true;
}
"sp_ojs_update_dyn_pipeline_count_phaseII".exportfunction({"STRING"},"BOOLEAN");

function sp_ojs_update_dyn_pipeline_count_phaseIII(useless)
{
	if (context.SP_AA_N_CPT_DISP_PHASE_III == 99)
	{
		context.SP_AA_N_CPT_PHASE_III = 0;		
		context.SP_AA_N_CPT_DISP_PHASE_III=1;
	}
	// context.SP_AA_N_CPT_PHASE_III++;
	return true;
}
"sp_ojs_update_dyn_pipeline_count_phaseIII".exportfunction({"STRING"},"BOOLEAN");

function sp_ojs_update_dyn_pipeline_count_registration(useless)
{
	if (context.SP_AA_N_CPT_DISP_REGIS == 99)
	{
		context.SP_AA_N_CPT_REGIS = 0;		
		context.SP_AA_N_CPT_DISP_REGIS=1;
	}
	// context.SP_AA_N_CPT_REGIS++;
	return true;
}
"sp_ojs_update_dyn_pipeline_count_registration".exportfunction({"STRING"},"BOOLEAN");

function sp_ojs_update_dyn_pipeline_count_postlicensure(useless)
{
	if (context.SP_AA_N_CPT_DISP_PLICENSURE == 99)
	{
		context.SP_AA_N_CPT_PLICENSURE = 0;		
		context.SP_AA_N_CPT_DISP_PLICENSURE=1;
	}
	// context.SP_AA_N_CPT_PLICENSURE++;
	return true;
}
"sp_ojs_update_dyn_pipeline_count_postlicensure".exportfunction({"STRING"},"BOOLEAN");


function sp_ojs_reset_all_pipeline_count()
{
	alert("appelé ici 2")
	context.SP_AA_N_CPT_DISP = 99;
	context.SP_AA_N_CPT_DISP_LEAD_ID = 99;
	context.SP_AA_N_CPT_DISP_LEAD_OPT = 99;
	context.SP_AA_N_CPT_DISP_PHASEI = 99;
	context.SP_AA_N_CPT_DISP_PHASEII = 99;
	context.SP_AA_N_CPT_DISP_PHASEIII = 99;
	context.SP_AA_N_CPT_DISP_PLICENSURE = 99;
	context.SP_AA_N_CPT_DISP_PRECLINICAL = 99;
	context.SP_AA_N_CPT_DISP_REGIS = 99;
}
*/

// Check if the activity is a movement on the selected year
function sp_ojs_has_is_movement(act)
{
	if (act instanceof opxActivity)
	{
		var selected_year = context.SP_AA_S_NV_YEAR_FILTER;
		var current_year_s = context.SP_NF_S_OC_CURRENT_DATE_YEAR;
		
		//Common : Yearly baseline PS in selected year and PS in selected Year
		if (act.SP_NF_S_ACT_PS_YEAR == selected_year && act.SP_NF_S_YEARLY_SD_YEAR == selected_year)
		{
			return true;
		}
		else	
		{
			return false;
		}	
	}
}

function sp_ojs_count_mouvement_dynamic_report()
{
	var new_f = new formula("OpxProject","PM_PRJ_FILTER","BOOLEAN")
	var new_f_act = new formula("OpxActivity","(PROJECT.SP_NF_B_NV_IS_NOVEL_PRJ OR PROJECT.SP_NF_B_NV_IS_LCM_PRJ) AND (BELONGS(\"WBS_TYPE\",\"LEADID-REP\") OR BELONGS(\"WBS_TYPE\",\"LEADOP-REP\") OR BELONGS(\"WBS_TYPE\",\"PHA1-REP\") OR BELONGS(\"WBS_TYPE\",\"PHA2A-REP\") OR BELONGS(\"WBS_TYPE\",\"PHA2B-REP\") OR BELONGS(\"WBS_TYPE\",\"PHA3-REP\") OR BELONGS(\"WBS_TYPE\",\"PLIC-REP\") OR BELONGS(\"WBS_TYPE\",\"LAU-REP\") OR BELONGS(\"WBS_TYPE\",\"PREC-REP\") OR BELONGS(\"WBS_TYPE\",\"REGU-REP\"))","BOOLEAN")

	context.SP_AA_N_CPT_LEAD_ID=0;
	context.SP_AA_N_CPT_LEAD_OPT=0;
	context.SP_AA_N_CPT_PHASE_I=0;
	context.SP_AA_N_CPT_PHASE_II=0;
	context.SP_AA_N_CPT_PHASE_III=0;
	context.SP_AA_N_CPT_PLICENSURE=0;
	context.SP_AA_N_CPT_PRECLINICAL=0;
	context.SP_AA_N_CPT_REGIS=0;
	var image_name = "SP_IMG_DARK_BLUE_ARROW";

	fromobject(new_f)
	{
		for(var prj in "opxProject")
		{
			//alert("prj " + prj)
			fromobject(new_f_act)
			{
				for(var act in "opxActivity" where act.PROJECT==prj && act.SP_NF_B_NV_PIP_DYN_ACT_FILTER_FINAL)
				{
					//if(act.callBooleanFormula("BELONGS(\"WBS_TYPE\",\"LEADID-REP\")") && sp_ojs_has_is_movement(act))
					if (act.callBooleanFormula("wbs_type in (\"LEADID-REP-I\",\"LEADID-REP-R\")") && sp_ojs_has_is_movement(act))
					{
						context.SP_AA_N_CPT_LEAD_ID++;
					}
					//else if (act.callBooleanFormula("BELONGS(\"WBS_TYPE\",\"LEADOP-REP\")") && sp_ojs_has_is_movement(act))
					else if(act.callBooleanFormula("wbs_type in (\"LEADOP-REP-I\",\"LEADOP-REP-R\")") && sp_ojs_has_is_movement(act))
					{
						context.SP_AA_N_CPT_LEAD_OPT++;
					}
					//else if (act.callBooleanFormula("BELONGS(\"WBS_TYPE\",\"PHA1-REP\")") && sp_ojs_has_is_movement(act))
					else if(act.callBooleanFormula("wbs_type in (\"PHA1-REP-I\",\"PHA1-REP-R\")") && sp_ojs_has_is_movement(act))
					{
						context.SP_AA_N_CPT_PHASE_I++;
					}
					//else if ((act.callBooleanFormula("BELONGS(\"WBS_TYPE\",\"PHA2A-REP\") OR BELONGS(\"WBS_TYPE\",\"PHA2B-REP\")") ) && sp_ojs_has_is_movement(act))
					else if(act.callBooleanFormula("wbs_type in (\"PHA2A-REP-I\",\"PHA2B-REP-I\",\"PHA2A-REP-R\",\"PHA2B-REP-R\")") && sp_ojs_has_is_movement(act))
					{
						context.SP_AA_N_CPT_PHASE_II++;
					}
					//else if (act.callBooleanFormula("BELONGS(\"WBS_TYPE\",\"PHA3-REP\")") && sp_ojs_has_is_movement(act))
					else if(act.callBooleanFormula("wbs_type in (\"PHA3-REP-I\",\"PHA3-REP-R\")") && sp_ojs_has_is_movement(act))
					{
						context.SP_AA_N_CPT_PHASE_III++;
					}
					//else if ((act.callBooleanFormula("BELONGS(\"WBS_TYPE\",\"PLIC-REP\") OR BELONGS(\"WBS_TYPE\",\"LAU-REP\")") ) && sp_ojs_has_is_movement(act))
					else if(act.callBooleanFormula("wbs_type in (\"PLIC-REP-I\",\"LAU-REP-I\",\"PLIC-REP-R\",\"LAU-REP-R\")") && sp_ojs_has_is_movement(act))
					{
						context.SP_AA_N_CPT_PLICENSURE++;
					}
					//else if (act.callBooleanFormula("BELONGS(\"WBS_TYPE\",\"PREC-REP\")") && sp_ojs_has_is_movement(act))
					else if(act.callBooleanFormula("wbs_type in (\"PREC-REP-I\",\"PREC-REP-R\")") && sp_ojs_has_is_movement(act))
					{
						context.SP_AA_N_CPT_PRECLINICAL++;
					}
					//else if (act.callBooleanFormula("BELONGS(\"WBS_TYPE\",\"REGU-REP\")") && sp_ojs_has_is_movement(act))
					else if(act.callBooleanFormula("wbs_type in (\"REGU-REP-I\",\"REGU-REP-R\")") && sp_ojs_has_is_movement(act))
					{
						context.SP_AA_N_CPT_REGIS++;
					}
				}
			}
		}
	}
}

/**********************************************************
**************** END PIPELINE FUNCTION ********************
***********************************************************/

/**********************************************************
**************** PIPELINE  TIMELINE FUNCTION ********************
***********************************************************/
function sp_ojs_nv_dev_predev_filter()
{
	var v = new vector();
	v.push("Pre Dev projects");
	v.push("Dev projects");
	this.possiblevalues = v;
}

function sp_ojs_nv_region_filter()
{
	var v = new vector();
	for ( var pValue in "OpxNAT".get("SP_AT_PJT_LEADER_SIT").get("POSSIBLE-VALUES"))
	{
		v.push(pValue.comment);
	}
	this.possiblevalues = v;
}

function sp_ojs_modify_std_kanban_for_printing_issue()
{
	var rep1 = "OpxReport".get("_KB_REPORT_AGILE_KANBAN_MODEL_FOLDER");
	var rep2 = "OpxReport".get("_KB_REPORT_AGILE_KANBAN_MODEL_FOLDER_OC");

	if (rep1 instanceof OpxReport)
	{
      for ( var repElement in report_getElements(rep1) where repElement instanceof OpxSUBFORM_CELL) 
	  {
		alert("print in report modification for " + rep1)
		alert("Before :  " + repElement.get("print_in_report"))
		withoutalerts withoutlocking{
			repElement.set("print_in_report", true);
		}
		alert("After :  " + repElement.get("print_in_report"))
      }
	 }
	 if (rep2 instanceof OpxReport)
	{
	  for ( var repElement in report_getElements(rep2) where repElement instanceof OpxSUBFORM_CELL) 
	  {
       alert("print in report modification for " + rep2)
		alert("Before :  " + repElement.get("print_in_report"))
        withoutalerts withoutlocking{
			repElement.set("print_in_report", true);
		}
		alert("After :  " + repElement.get("print_in_report"))
      }
	 }
}
writeln("calling sp_ojs_modify_std_kanban_for_printing_issue");
sp_ojs_modify_std_kanban_for_printing_issue();
/**********************************************************
**************** END PIPELINE TIMELINE FUNCTION ********************
***********************************************************/

/**********************************************************
**************** NV PROJECT REPORT  FUNCTION ********************
***********************************************************/

// OTD 76552 - Redefinition of function sp_ojs_dashboard_viewer by Planisware
function sp_ojs_dashboard_viewer(){
  var CurrentDashboard = "OpxDashboard".get(context.SP_AA_S_OC_NV_DASHBOARD_ID);//"INTRANET.SP_DB_PRJ_ID_CARD_TEST");
  if ( CurrentDashboard instanceof OpxDashboard) {       
    var DashboardCopy = CurrentDashboard.CopyDashboardObjects();
    var CurrentObject = this.object;
	
    if ( dashboardCopy instanceof OpxDashboard) {
      dashboardCopy.CreateCurrentObjectFilterForQuery(CurrentObject);
    }
		 
    var edit_mode_default = false;
	DashboardCopy.computebefore();
    DashboardCopy.checkquickfiltersselections(); // need to remove obsolete quick filter selections
	  
    var DashboardTodisplay = DashboardCopy;
    var widget = this.Widget;
    var widgetClass = new symbol("DASHBOARD-VIEWER", "KEYWORD");
    var ImposedWidth = CurrentDashboard._DBB_AA_N_MINIMUM_WIDTH; if (! ImposedWidth instanceof number) {ImposedWidth = 0;}else {ImposedWidth = math.round(ImposedWidth);}
    var ImposedHeigth = CurrentDashboard._DBB_AA_N_MINIMUM_HEIGHT; if (! ImposedHeigth instanceof number) {ImposedHeigth = 0;}else {ImposedHeigth = math.round(ImposedHeigth);}
    //CurrentDashboard.delete();
    if ( DashboardTodisplay InstanceOf Opxdashboard) {
      if ( this.widget != undefined && (! (this.widget instanceof opxDashboardviewer))) {
        var widgetPlist = new vector("Dashboard",DashboardTodisplay,
                                     "object",CurrentObject,
                                     "ondoubleclick",DoubleClickItem,
                                     "edit-mode",edit_mode_default,
                                     "dropmask",2559,
                                     "Ondrop",CreateComponent,
                                     "OnDrag",DragItem,
                                     "Onselect",Selectitem,
                                     "OnDrawAfter", OnDrawAfterDashboard,
                                     "Show-grid",SetDisplayGridForViewer(),
                                     "use-grid", true,
                                     "grid-size", DashboardTodisplay.attribute_getWithDefault("_DBB_AA_N_GRID_HORIZ", 0),
                                     "grid-vertical-size", DashboardTodisplay.attribute_getWithDefault("_DBB_AA_N_GRID_VERTI", 0),
                                     "grid-horizontal-gutter", DashboardTodisplay.attribute_getWithDefault("_DBB_AA_N_GUTTER_HORIZ", 0),
                                     "grid-vertical-gutter", DashboardTodisplay.attribute_getWithDefault("_DBB_AA_N_GUTTER_VERTI", 0));
        var checkedPlist = new vector();
        for (var p = 0; p < widgetPlist.length; p=p+2) {
          if ( lispcall "javascript::get-resource-from-name"(widgetClass, widgetPlist[p]) != false) {
            checkedPlist.setPlist(widgetPlist[p],widgetPlist[p+1]);
          }
        }


        widget = this.addwidgetwithplist("DASHBOARD-VIEWER", checkedPlist);
        Context.CURRENT_VIEWER = this.widget;
        if ( ImposedWidth > 0) {
          this.Widget.width = ImposedWidth;
        }
        if ( ImposedHeigth > 0) {
          this.widget.height = ImposedHeigth;
        }
      }
      else if (! this.printing) {
        //le widget existe dj, il faut le mettre  jour, c'est beaucoup plus propre que de le supprimer
        //Mais surtout pas  l'impression: sinon, il va garder la mauvaise taille. La taille est gre directement
        //par le paginate/display noyau
        if ( this instanceof graphics && this.widget != undefined) {
          withoutlocking{
            this.widget.object = CurrentObject;
            this.widget.dashboard = DashboardTodisplay;
            this.widget.editmode = edit_mode_default;
            this.widget.x = this.x;
            this.widget.y = this.y;
            this.widget.width = (ImposedWidth > 0) ? ImposedWidth : this.width;
            this.widget.height = (ImposedHeigth > 0) ? ImposedHeigth : this.height;
            this.widget.showgrid = SetDisplayGridForViewer();
            this.widget.gridsize = DashboardTodisplay.attribute_getWithDefault("_DBB_AA_N_GRID_HORIZ", 0);
            if (lispcall "javascript::get-resource-from-name"(widgetClass, "grid-vertical-size")) {
              this.widget.gridverticalsize = DashboardTodisplay.attribute_getWithDefault("_DBB_AA_N_GRID_VERTI", 0);
              this.widget.gridhorizontalgutter = DashboardTodisplay.attribute_getWithDefault("_DBB_AA_N_GUTTER_HORIZ", 0);
              this.widget.gridverticalgutter = DashboardTodisplay.attribute_getWithDefault("_DBB_AA_N_GUTTER_VERTI", 0);
            }
            context.current_viewer = this.widget;
          }
        }
      }
    }
  }
}

function sp_ojs_display_prj_report(dashboard_ID){
	if (this.widget instanceof ReportForm && Context.Applet instanceof OpxApplet) {
			var object = "opxproject".get(context.SP_AA_S_OC_NV_PRJ_ID);
			if(object instanceof opxObject){		
				object.recomputeCostandDate();
				var report = "opxreport".get("SP_RP_NV_DASHBOARD_VIEWER");
				 if (report instanceof OpxReport) {
					if(object instanceof opxproject){
						context.SP_AA_S_OC_NV_DASHBOARD_ID = dashboard_ID;
						 this.widget.setreportandobject(report, object);
						 this.widget.fittopage = true;
					 }
				 }
			}
	}
}

/**********************************************************
**************** END NV PROJECT REPORT  FUNCTION ********************
***********************************************************/

/**********************************************************
**************** MONITORING FUNCTION ********************
***********************************************************/
function sp_ojs_nv_site_filter()
{
var v = new vector();
	for ( var pValue in "OpxNAT".get("SP_AT_PJT_LEADER_SIT").get("POSSIBLE-VALUES"))
	{
		v.push(pValue.comment);
	}
	this.possiblevalues = v;
}

function sp_ojs_nv_prg_status_filter()
{
var v = new vector();
v.push("Ahead of time");	
v.push("On time");	
v.push("Delayed");	
v.push("Cancelled");	
v.push("Not met");	
this.possiblevalues = v;
}

function sp_ojs_open_pkm_file()
{
	
	var sPdfName="pkm_reference_list.xls";
	var sPdfDirectory = context.SP_GS_PKM_REF_LIST_PATH;
	var Path = sPdfDirectory + "/" + sPdfName;
	
	if (Path != "")
		{
		var symb = new symbol("XLS","KEYWORD");
		var url = lispcall "wttp::get-download-url" (symb);
		var PathString = lispcall "wttp::generate-download-url-ref" (url,Path,context.applet.user);

		var link = new hyperlink("url","page",PathString,"PopUp",true);
		link.go("");
		return true;
	}
}

function sp_ojs_pkm_link_button()
{
	this.addmousablearea(0, 0, this.cell.width, this.cell.height, 2, "PKM Reference list Link", context, sp_ojs_open_pkm_file, sp_ojs_open_pkm_file,false,color("LINE-HIGHLIGHT-COLOR"));
}


/**********************************************************
**************** END MONITORING FUNCTION ********************
***********************************************************/
function _kb_kanban_updateScrollView(position) {
  //Link the widget of the kanban header(columns part has position 0) with the parent widget of the content part(post it part has position 1).
  //It allow to synchronize the horizontal scrollbar of the header and the content part.
  //return true;
  var existingInformation = gettemporaryObject(_kb_kanban_updateScrollView.code);
  if ( existingInformation == undefined) {
    if (this.widget.parent instanceof scrolledView) {
      var scrollViewInfo = new vector();
      scrollViewInfo.push(this.widget.parent);
      scrollViewInfo.push(this.widget);
      scrollViewInfo.push(this.cell);
      scrollViewInfo.push(position);
      scrollViewInfo.storetemporaryObject(_kb_kanban_updateScrollView.code);
    }else {
      true.storetemporaryObject(_kb_kanban_updateScrollView.code);
    }
  }else if (existingInformation instanceof vector) {
    var o_headerWidget = false;
    var o_contentWidgetParent = false;
    if(position == 0 && existingInformation[3] == 1){
      o_headerWidget = this.widget;
      o_contentWidgetParent = existingInformation[0];
      o_contentWidgetParent.set("V-LINKED-WIDGETS",new list(o_headerWidget));
    }
    else if(position == 1 && existingInformation[3] == 0){
      o_headerWidget = existingInformation[1];
      o_contentWidgetParent = this.widget.parent;
      o_contentWidgetParent.set("V-LINKED-WIDGETS",new list(o_headerWidget));
    }
  }
}

method _kb_postit_drawPostIt on _kb_postit_modernStyle(postit, graphics, x1, y1) {
  var style = this;
  var w = postit.width+8;
  var h = postit.height;
  var x = x1;
  var y = y1;
  var o_remainingSpace = new graphics_Rectangle(x,y,w,h);

  style._kb_postit_drawBackground(graphics,x,y,w,h,postit.color);
  style._kb_postit_drawEdge(graphics,x,y,w,h, postit._kb_getThickness(), postit._kb_getBorderscolor());
  var o_spaceDrawn = style._kb_postit_drawTitle(graphics,x,y,w,style._kb_postit_getheaderHeight(postit)
                                                ,postit.color
                                                ,this._kb_postit_getFontColorFromBackground(postit.color)
                                                ,postit.titlefont
                                                ,postit.title);
  o_remainingSpace.y += o_spaceDrawn.height;
  o_remainingSpace.height -= o_spaceDrawn.height;
  style._kb_postit_drawTopRighttools(graphics,x,y,w,h,postit.mousableArea,postit.toprighticons);

  var h_bottomlefticons = style._kb_postit_getFooterHeight(postit);

  if ( o_remainingSpace.height >= h_bottomlefticons) {
    //the place for the image is created in _kb_computeHeight
    var o_leftToolSpaceDrawn = style._kb_postit_drawBottomLefttools(postit
                                                                    ,graphics
                                                                    ,x
                                                                    ,y + h - h_bottomlefticons
                                                                    ,w
                                                                    ,h_bottomlefticons
                                                                    ,postit.bottomlefticons
                                                                    ,postit._kb_getBorderscolor()
                                                                    );
    style._kb_postit_drawBottomRighttools(postit
                                          ,graphics
                                          ,o_leftToolSpaceDrawn.x + o_leftToolSpaceDrawn.width
                                          ,y + h - style._kb_postit_getFooterHeight(postit)
                                          ,w-o_leftToolSpaceDrawn.width
                                          ,style._kb_postit_getFooterHeight(postit)
                                          ,postit.bottomrighticons,postit._kb_getBorderscolor());
    o_remainingSpace.height -= o_leftToolSpaceDrawn.height;
  }

  if ( postit.text instanceof string && postit.text != "") {
    var htmlbox = false; //postit.htmlBoxes.get("text", false, postit.width);
    var o_font = _kb_postit_getContentfont(postit);
    var o_FirstBottomRightImage = this._kb_postit_getFirstBottomRightImage(postIt);
    var n_contentWidth = (o_FirstBottomRightImage ? w - this._kb_postit_getFirstBottomRightImageWidth(o_FirstBottomRightImage,postIt) : w);

	// MODIFICAION TO color text in Entry & exit
	var text_color = color("BLACK");
	var act = postit.object;
	if (act instanceof opxactivity && act.printAttribute("ID") != "")
	{
		var prj = act.PROJECT;
		
		if(prj instanceof opxproject)
		{		
			if (act.callStringFormula("HIERARCHICAL_CODE")=="1.1.1" && prj.callBooleanFormula("SP_AA_S_REASON_PREDEV = \"Moved*\""))
			{
				text_color = color("SP_COL_ENTRY_MOVED");
			}
			if (act.callStringFormula("HIERARCHICAL_CODE")=="1.1" && prj.callBooleanFormula("SP_AA_S_REASON = \"Licensure*\""))
			{
				text_color = color("SP_COL_ENTRY_LICENSURE");
			}
						
		}
	}
    style._kb_postit_drawContent(graphics, x, y + style._kb_postit_getheaderHeight(postit), n_contentWidth, o_remainingSpace.height,
                                 htmlbox,postit.text,postit.Halign,postit.marginBetwenTextAndEdges,text_color,o_font);
  }
}

/*** SCRIPT for Timecard Evolution : multivalues timecard manager field  + sc9953 v3.9 at least ****/
function _tc_UserControllerButNotmanager(UserTested) {
  var ResManager=this.manager;
  var ResManagers= "";
  var ResController=this.controller;
  var IsManager=false;
  var UserID=UserTested.printAttribute();
  //Compatibility 
  var ManagersSlot  = "OpxResource".getslot("MANAGERS");
  if (ManagersSlot instanceof ObjectAttribute){
    ResManagers = this.MANAGERS.parselist();
  }
  // Resmanager can be a user or a group
  if (ResManagers != "" ) { 
    for (var element in Resmanagers){
      var UserElement= "OpxUser".get(element);
      if ((UserElement instanceof OpxUser && (UserTested.printattribute()==element)) || ("USER_IN_GROUP".callMacro(UserID, element))) {
        IsManager=true;
      }
    }
  }
  else {
    if (ResManager != ""){
      if ((ResManager instanceof OpxUser && (UserTested==ResManager)) || ("USER_IN_GROUP".callMacro(UserID, ResManager.printattribute()))) {
        IsManager=true;
      }
    }
  }
  
  var IsController=false;
  if (ResController != ""){
    if ((ResController instanceof OpxUser && (UserTested==ResController)) || ("USER_IN_GROUP".callMacro(UserID, ResController.printattribute()))) {
      IsController=true;
    }
  }
  if (IsManager==false && IsController) {
    return true;
  }
  return false;
}

/*** SCRIPT for Timecard Evolution : multivalues timecard manager field  + sc9953 v3.9 at least ****/



// function sp_ojs_initialiaze_toolbarfilter()
// {
	// context.SP_AA_S_OC_NV_PORT_SELECT = "Dev projects";
// }
// AddWrapperFunction(NewOpxAppletWrapper, "sp_ojs_initialiaze_toolbarfilter");


function sp_js_list_prj_portfolio(useless)
{
	var l = new vector();
	var current_portfolio = "opx_FF_PT_FAVOR_FILTERS".get(context._FF_AA_S_LIST_NAME);
	
	if (current_portfolio instanceof opx_FF_PT_FAVOR_FILTERS && current_portfolio.printAttribute("ID") != "")
	{
		for(var project in current_portfolio)
		{
			l.push(project.printAttribute("ID"));
		}
	}
	l=l.removeduplicates();
	return l.join(","); 
}
"sp_js_list_prj_portfolio".exportfunction({"STRING"},"STRING");

function sp_ojs_copy_ref_in_version()
{
	var projectVersion = this;
	var nb_monthly=2;
	var nb_yearly=1;
	
	if(projectVersion instanceof OpxProject)
	{
		var project = projectVersion.ORIGIN_PROJECT;
		if(project instanceof OpxProject)
		{
			fromobject(project)
			{
				//var yearly_found = false;
				//var monthly_found = false;
				for (var ref in "OpxREFERENCE".findclass() where (ref.file == project && (nb_monthly!=0 || nb_yearly!=0)) order by {{"INVERSE","AD"}})
				{
					//if (ref.NAME.position("YEARLY") != undefined && ref.NAME.position("YEARLY") != -1 && yearly_found == false)
					if ((ref.name instanceof STRING) && (ref.name=="YEARLY") && nb_yearly!=0)	
					{		
						ref.COPY_TO_DATASET = projectVersion;
						nb_yearly=nb_yearly-1;
						//yearly_found = true;
						writetolog("Copying reference " + ref.NAME + " from project " + project.printAttribute("ID") + " to project version" + projectVersion.printAttribute("ID"));
					}
					else if ( (ref.DESC.position("Monthly") instanceof NUMBER) && ref.DESC.position("Monthly")==0 && nb_monthly!=0)
					{
						ref.COPY_TO_DATASET = projectVersion;
						nb_monthly=nb_monthly-1;
						//monthly_found = true;
						writetolog("Copying reference " + ref.NAME + " from project " + project.printAttribute("ID") + " to project version" + projectVersion.printAttribute("ID"));
					}
				}
			}
		}
	}

}

// Functions for NV Pipeline Projection

// Function that search MSTAR/MSTAR-PREDEV Milestone in selected year	
// Used in name formula SP_NF_B_CHECK_MSTAR			
function sp_ojs_check_MSTAR_FORMULA(useless)
{
	var act = this;
	if (act instanceof opxActivity)
	{
		var prj = act.PROJECT;
		if (prj instanceof opxproject)
		{
			fromobject(prj)
			{
				for(var act2 in "opxActivity" where act2.SP_NF_B_MSTAR_ACT && act2.SP_NF_S_ACT_PS_YEAR== context.SP_AA_S_NV_YEAR_FILTER)
				{
					//MSTAR OR MSTAR-PREDEV is found
					return true;					
				}
			}
		}
	}
	return false;
}
"sp_ojs_check_MSTAR_FORMULA".exportfunction({"STRING"},"BOOLEAN");

// Used in name formula SP_NF_B_CHECK_MTERM
function sp_ojs_check_MTERM_FORMULA(useless)
{
	var act = this;
	if (act instanceof opxActivity)
	{
		var prj = act.PROJECT;
		if (prj instanceof opxproject)
		{
			fromobject(prj)
			{
				for(var act2 in "opxActivity" where act2.SP_NF_B_MTERM_ACT && act2.SP_NF_S_ACT_PS_YEAR==context.SP_AA_S_NV_YEAR_FILTER && act2.PS <= act.PS)
				{
					//MTERM is found and finish before the last movement
					return true;					
				}
			}
		}
	}
	return false;
}
"sp_ojs_check_MTERM_FORMULA".exportfunction({"STRING"},"BOOLEAN");


// Creation to display orange arrow
function sp_ojs_display_arrow_orange(useless)
{
	var selected_year = context.SP_AA_S_NV_YEAR_FILTER;
	var current_year = context.SP_NF_S_OC_CURRENT_DATE_YEAR;
	var current_act = this.object;
	var act;
	
	
	if (current_act instanceof opxActivity)
	{
		// Display orange arrow only if selected year = current year (of yearly baseline) 
		if (selected_year==current_year && current_act.SP_NF_B_NV_PIP_DYN_ACT_FILTER_FINAL)
		{
			// MTERM Milestone --> Check that current activity PF is not after MTERM PF
			if  (current_act.SP_NF_B_CHECK_MTERM)
			{
				return "SP_IMG_ORANGE_ARROW";
			}
			else
			{
				
				// We check next phase because displayed phase is the current phase (met phase)
				act = sp_ojs_next_phase(current_act);
												
				if (act instanceof Activity && act.printAttribute("ID") != "" )
				{
					if (act.SP_NF_S_ACT_PS_YEAR != selected_year && act.SP_NF_S_YEARLY_SD_YEAR==selected_year)
					{
						return "SP_IMG_ORANGE_ARROW";
					}	
						
					// check if the planned start is delayed by 4weeks for the yearly start date AND that the next_phase should be displayed
					//else if(act.SP_NF_D_YEARLY_REF_SD != -1 && act.SP_NF_D_YEARLY_REF_SD != undefined && act.PS > context.callDateFormula("ADD_DURATION(" + act.SP_NF_D_YEARLY_REF_SD.sdate + ",'28d','')") && //act.SP_NF_B_NV_PIP_DYN_ACT_FILTER)
					//{					
					//	return "SP_IMG_ORANGE_ARROW";
					//}
					else if (act.SP_NF_B_CHECK_MTERM == true && current_act.SP_NF_B_CHECK_MTERM == false && act.SP_NF_B_NV_PIP_DYN_ACT_FILTER )
					{
						return "SP_IMG_ORANGE_ARROW";
					}
					
									
					//else check if the phase should be displayed
					else if (current_act.SP_NF_B_DISP_ACT_DYNAMIC_YEARLY && current_act.SP_NF_B_CHECK_MTERM)
					{
						return "SP_IMG_ORANGE_ARROW";
					}
							
				}
			}			
		}
	}
	//return "SP_IMG_TRANSPARENT_IMAGE";
	return "";
}
sp_ojs_display_arrow_orange.exportfunction({"STRING"},"STRING");

// Creation to display blue arrows
function sp_ojs_display_arrow_blue(useless)
{
//	var imagename = sp_ojs_display_arrow_orange("");
//	if (imagename == "SP_IMG_TRANSPARENT_IMAGE")
//	{
		var act = this.object;
		if (act instanceof opxActivity)
		{
			var selected_year = context.SP_AA_S_NV_YEAR_FILTER;
			var current_year_s = context.SP_NF_S_OC_CURRENT_DATE_YEAR;
			
			//Common : Yearly baseline PS in selected year and PS in selected Year
			if (act.SP_NF_S_ACT_PS_YEAR == selected_year && act.SP_NF_S_YEARLY_SD_YEAR == selected_year && act.SP_NF_B_NV_PIP_DYN_ACT_FILTER_FINAL)
			{
				//Light blue : (Selected Year = Current Year) and (MSTAR or MSTAR-PREDEV activity type milestone in current Year))
				if not(act.SP_NF_B_CHECK_MTERM)
				{
					if (act.SP_NF_B_CHECK_MSTAR)
					{			
						if (act.SP_NF_B_TBC)
						{
							return "SP_IMG_BLUE_SKY_ARROW_TBC"
						}
						else
						{
							return "SP_IMG_BLUE_SKY_ARROW";
						}
					}
					else
					{		
						if (act.SP_NF_B_TBC )
						{
							return "SP_IMG_GREY_ARROW"
						}
						else
						{
							return "SP_IMG_DARK_BLUE_ARROW";
						}				
					}		
				}
			}	
		}
		//return "SP_IMG_TRANSPARENT_IMAGE";
		return "";
//	}	
}
sp_ojs_display_arrow_blue.exportfunction({"STRING"},"STRING");

// Function to draw blue and orange arrow 
function sp_ojs_drawArrow(Type)
{
	var imagename = undefined;
	if (this instanceof Graphics)
	{
		if (Type == "BLUE")
		{
			imagename = sp_ojs_display_arrow_blue("");
		}
		else 
		{
			imagename = sp_ojs_display_arrow_orange("");
		}		
		
		if (imagename != "")
		{
			var imageObject = "OPXIMAGE".get(imagename);
			
			if (imageObject instanceOf opxImage)
			{
				this.drawimage(imageObject, 0, 0, true, this.width, this.height, true, 0, 1);
			}
		}	
	}
}

function sp_clean_useless_ref_version()
{
var prj_ver=this;
var nb_monthly=2;
var nb_yearly=1;
var vec_ref=new vector();
var result="";

if (prj_ver instanceof opxproject && prj_ver.state=="Simulation")
{
withoutlocking
{
	fromobject(prj_ver)
	{
		for (var ref in "OpxREFERENCE".findclass() where (ref.file==prj_ver && (nb_monthly!=0 || nb_yearly!=0))  order by {{"INVERSE","NAME"}})
		{

			if (ref.name=="YEARLY" && nb_yearly!=0)
			{
			vec_ref.push(ref.name);
			nb_yearly=nb_yearly-1;
			}
			else
			{
				if ((ref.DESC.position("Monthly") instanceof NUMBER) && ref.DESC.position("Monthly")==0 && nb_monthly!=0)
				{
					vec_ref.push(ref.name);
					nb_monthly=nb_monthly-1;
				}
				else
				{
					ref.delete();
				}
			}
		}
	}	
}
	
}
if (vec_ref.length >0)
{
result=	vec_ref.JOIN(",");
}
return result;
}
sp_clean_useless_ref_version.exportfunction();


function sp_delete_old_versions()
{
WriteToLog("Start sp_delete_old_versions function");
	
withoutlocking
{
	for (var old_version in "OpxProject".findclass() where old_version.VERSION_NUMBER != "" &&  old_version.SPV6_AA_B_NV_VERSION == true && old_version.state=="Simulation")
	{
	WriteToLog("Delete the version ~a",old_version);	
	if (old_version.LOCKED == "")
	{	
		WriteToLog("Open and lock ~a",old_version);
		old_version.callMacro("OPEN");
		old_version.callMacro("LOCK");
	}	
	old_version.delete();
	}
}
WriteToLog("End sp_delete_old_versions function");		
}
sp_delete_old_versions.exportfunction();

function sp_create_nv_port_versions()
{
	var portfolio=this;
	var new_version;
	var projectVersion;
	var user_group_obj1;
	var user_group_obj2;
	var user_group_obj3;
	var user_group_obj4;
	
	WriteToLog("Start sp_create_nv_port_versions function");
	//set semaphore for max number of creation alert
	context.SP_AA_SB_SEM_AL_VERSION = true;
	for(var project in portfolio)
	{
		
		if(project.open == false)
		{
			WriteToLog("Opening project ~a",project);
			project.callMacro("OPEN");
		}
		
		if(project.open)
		{
			WriteToLog("Processing ~a",project);
			new_version = project.CallMacro("CreateANewVersion"); 
			WriteToLog("Versions is created for  ~a",project);
			
			for(var version in project.versions order by {{"INVERSE","VERSION_NUMBER"}})
			{
				//la version qui vient d'être créée est celle qui a le plus gros numéro
				projectVersion = version;
				break;
			}
			
			if ((projectVersion instanceof opxproject) && (projectVersion.state=="Simulation"))
			{
				
				WriteToLog("Treating version ~a",projectVersion);
				projectVersion._PV_AA_S_STATUS = "Scenario";
				projectVersion.VERSION_DOCUMENTATION = "NV PORTFOLIO version - automatically created";				
				// update access rights to make sure that the contract will not be modified
				projectVersion.RIGHTS = "Inaccessible to others";
				user_group_obj1 = "opxUser_group".get("G_ADM");
				user_group_obj2 = "opxUser_group".get("G_PORTADM");
				user_group_obj3 = "opxUser_group".get("G_PORTLIM");
				user_group_obj4 = "opxUser_group".get("G_PORTFULL");

				if (user_group_obj1 instanceof opxUser_group && user_group_obj2 instanceof opxUser_group)
				{
					projectVersion.READ_WRITE_GROUPS = "G_ADM,G_PORTADM";
				}
				if (user_group_obj3 instanceof opxUser_group && user_group_obj4 instanceof opxUser_group)
				{
					projectVersion.READ_ONLY_GROUPS = "G_PORTLIM,G_PORTFULL";
				}
				projectVersion.OWNER="intranet";
				projectVersion.SPV6_AA_B_NV_VERSION = true;
				WriteToLog("End modification in ~a",projectVersion);
				projectVersion.callMacro("SAVE");		
			}				
		}	
	}	
	context.SP_AA_SB_SEM_AL_VERSION = false;
	WriteToLog("End  sp_create_nv_port_versions function");
}
sp_create_nv_port_versions.exportfunction();

function sp_update_nv_portfolio_list()
{
var nv_portfolio_final_name = "NV_PORTFOLIO_REPORTING";
var portfolio_final = "Opx_FF_PT_FAVOR_FILTERS".get(nv_portfolio_final_name);
var projectVersion=this;
WriteToLog("Start  sp_update_nv_portfolio_list function");
if 	((projectVersion instanceof opxproject) && (projectVersion.state=="Simulation"))
{
	WriteToLog("Old value : ~a",portfolio_final._FF_AA_S_PROJ_LIST);
	if (portfolio_final._FF_AA_S_PROJ_LIST == "")
	{
		portfolio_final._FF_AA_S_PROJ_LIST = projectVersion.printAttribute("ID");
	}
	else
	{
		portfolio_final._FF_AA_S_PROJ_LIST += "," + projectVersion.printAttribute("ID");
	}
	WriteToLog("New value : ~a",portfolio_final._FF_AA_S_PROJ_LIST);
}
WriteToLog("End  sp_update_nv_portfolio_list function");
}
sp_update_nv_portfolio_list.exportfunction();


function sp_create_nv_portfolio_versions()
{
	var nv_portfolio_name = "NV_PORTFOLIO_SELECTION";
	var nv_portfolio_final_name = "NV_PORTFOLIO_REPORTING";
	var portfolio = "Opx_FF_PT_FAVOR_FILTERS".get(nv_portfolio_name);
	var portfolio_final = "Opx_FF_PT_FAVOR_FILTERS".get(nv_portfolio_final_name);
	var count = 0;
	var list_ref;
WriteToLog("Start sp_create_nv_portfolio_versions function");
	if ((portfolio instanceof Opx_FF_PT_FAVOR_FILTERS && portfolio.printAttribute("ID") != "")
			&& (portfolio_final instanceof Opx_FF_PT_FAVOR_FILTERS && portfolio_final.printAttribute("ID") != ""))
	{
		// Empty portfolio versions list
		portfolio_final._FF_AA_S_PROJ_LIST = "";

		// Delete old versions
		sp_delete_old_versions();
		context.callMacro("SAVE-DATASETS");

		// Create nv versions
		//context.Set("*DO-NOT-STORE-REFERENCES-IN-PROJECT-VERSION*",false);
		portfolio.sp_create_nv_port_versions();
		//context.Set("*DO-NOT-STORE-REFERENCES-IN-PROJECT-VERSION*",true);
	
		for (var nv_version in "OpxProject".findclass() where nv_version.SPV6_AA_B_NV_VERSION == true && nv_version.state=="Simulation")
		{
			if (nv_version.LOCKED == "")
			{	
				WriteToLog("Open and lock ~a",nv_version);
				nv_version.callMacro("OPEN");
				nv_version.callMacro("LOCK");
			}
			// cleaning useless references
			/*
			WriteToLog("Deleting useless references in version ~a",nv_version);	
			list_ref=nv_version.sp_clean_useless_ref_version();
			nv_version.callMacro("SAVE");
			WriteToLog("Useless reference are deleted ~a",nv_version);
			WriteToLog("Only these refrences are kept ~a",list_ref);
			*/
			//Copy baseline in project version previously created
			WriteToLog("Start copy baselines ~a",nv_version);
			nv_version.sp_ojs_copy_ref_in_version();
			WriteToLog("End copy baselines ~a",nv_version);
			//update final portfolio
			WriteToLog("Adding project versions in NV_PORTFOLIO_REPORTING ~a",nv_version);
			nv_version.sp_update_nv_portfolio_list();
			
			// Empty organization field
			nv_version.ORGANIZATION = "";
		}
	}
WriteToLog("End  sp_create_nv_portfolio_versions function");

}
sp_create_nv_portfolio_versions.exportfunction();

function sp_del_useless_ref_all_versions()
{
var list_ref;	
for (var nv_version in "OpxProject".findclass() where nv_version.SPV6_AA_B_NV_VERSION == true && nv_version.state=="Simulation")
{
	if (nv_version.LOCKED=="")
	{	
		WriteToLog("Open and lock ~a",nv_version);
		nv_version.callMacro("OPEN");
		nv_version.callMacro("LOCK");
	}
	// cleaning useless references
	
	WriteToLog("Deleting useless references in version ~a",nv_version);	
	list_ref=nv_version.sp_clean_useless_ref_version();
	WriteToLog("Useless reference are deleted ~a",nv_version);
	WriteToLog("Only these refrences are kept ~a",list_ref);
	nv_version.callMacro("SAVE");
}	
}
sp_del_useless_ref_all_versions.exportfunction();


writetolog("Script SPV6_NV_PORTFOLIO loaded with version ~a ", revision_number); 

 
//	NAME	: SP_JS_APPLET_FUNCTIONS
//	AUTHOR  : bcordel
//  PURPOSE : COMPASS v6 , functions linked to applet
//  
//  HISTORY :
var revision_number ="1.4";
//
//	Revision 1.4  2018/09/03 bcordel
//	RITM0557509 : update of function sp_js_milestone_status_iconhandler to add the "not met" part
//
//	Revision 1.3  2017/10/12 bcordel
//	remplacement de sp_js_init_lock_date_on_timeline par sp_js_init_initiate_fields
//
//	Revision 1.2  2017/07/26 bcordel
//	ajout de sp_js_milestone_status_iconhandler
//
//	Revision 1.1  2017/07/20 ahasni
//	ajout de sp_js_on_applet_style_man_fix
//
//	Revision 1.0  2017/03/27 bcordel
//	cr ation

//function to initiate field value.
function sp_js_init_initiate_fields()
{
	//active the date locking system in timeline.
	context._ROA_AA_B_LOCK = true;
	
	//initiate the filter "Product" on manufacturing reporting.
	context.SP_AA_S_CO_68A_ACT_PRD_TYPE_BRD = "Manufacturing";
	if (context.SP_AA_S_CO_62B_DATE_TYPE == "") context.SP_AA_S_CO_62B_DATE_TYPE = "Validated DKMs";
	if (context.SP_AA_OC_S_REP_STATE_FILTER=="") context.SP_AA_OC_S_REP_STATE_FILTER ="Active";
	if ( context.SP_AA_S_RES_LIST_FILTER=="" ) context.SP_AA_S_RES_LIST_FILTER = "Sanofi Pasteur"

}
AddWrapperFunction(NewOpxAppletWrapper, "sp_js_init_initiate_fields");


//function to update the style manager to the left and unfold the toolbar
function sp_js_on_applet_style_man_fix(){
withoutlocking{
withoutalerts{
var File_Sanofi = opxFile.get("_MOD_SP_COMMON");
var Report_List = new vector(); 
for(var vCell in OpxFolder where (vCell.get("AllocateSpaceForTheReport")==false && (vCell.get("ReportPosition")=="Right") ||  (vCell.get("ReportPosition")=="Right of the screen")))
{
var vLine = vCell.PARENT;
var vReport=lispcall "report-builder::get-report" (vLine);
Report_List.push(vReport);
if (vReport.FILE==File_Sanofi) 
{
vCell.AllocateSpaceForTheReport=true;
vCell.ReportPosition="Left";
}
}
context._IHM_DA_B_FOLDED_BY_DEFAULT=false;
}
}
}

AddWrapperFunction(NewOpxAppletWrapper,"sp_js_on_applet_style_man_fix");

////////////////
//handler for the field SP_SF_PM_SCHED_MAN_STATUS (Status) for milestone.
/////////

function sp_js_milestone_status_iconhandler(){
	var size = 15;
	var oActivity = this;
	var sImage = "Progress_start3" ;
	if (oActivity instanceof opxActivity){
		var sProgressStatus = oActivity.SP_SF_ACT_MIL_ACH;
		if(sProgressStatus == "CANCELLED"){
			sImage = "SP_IMG_DISC_GREY" ;
		}
		else if(sProgressStatus == "NOT MET"){
			sImage = "SP_IMG_DISC_RED" ;
		}
		else if(sProgressStatus == "ABOVE"){
			sImage = "SP_IMG_DISC_GREEN" ;
		}
		else if(sProgressStatus == "MET"){
			sImage = "SP_IMG_DISC_BLACK" ;
		}
		else if(sProgressStatus =="BELOW"){
			sImage = "SP_IMG_DISC_RED" ;
		}
		if(oActivity.SP_NF_B_COMPLETION){
			sImage = sImage + "_CHECKED" ;
		}
		return "opxImage".get(sImage) ;
	}
	else{	
		return false;
	}
}

function sp_js_milestone_status_set_handler(){
	var oSfSlot = "opxSYMBOLIC_FIELD".get("Activity.SP_SF_PM_SCHED_MAN_STATUS");
	if(oSfSlot != undefined && oSfSlot != ""){
		oSfSlot.addiconhandler(sp_js_milestone_status_iconhandler);
	}
}
AddWrapperFunction(InitializeIntranetAfterWrapper,"sp_js_milestone_status_set_handler");



writetolog("Script SP_JS_APPLET_FUNCTIONS loaded with version ~a ", revision_number);

//	NAME	: SP_JS_APPLET_FUNCTIONS
//	AUTHOR  : bcordel
//  PURPOSE : COMPASS v6 , functions linked to applet
//  
//  HISTORY :
var revision_number ="1.4";
//
//	Revision 1.4  2018/09/03 bcordel
//	RITM0557509 : update of function sp_js_milestone_status_iconhandler to add the "not met" part
//
//	Revision 1.3  2017/10/12 bcordel
//	remplacement de sp_js_init_lock_date_on_timeline par sp_js_init_initiate_fields
//
//	Revision 1.2  2017/07/26 bcordel
//	ajout de sp_js_milestone_status_iconhandler
//
//	Revision 1.1  2017/07/20 ahasni
//	ajout de sp_js_on_applet_style_man_fix
//
//	Revision 1.0  2017/03/27 bcordel
//	cr ation

//function to initiate field value.
function sp_js_init_initiate_fields()
{
	//active the date locking system in timeline.
	context._ROA_AA_B_LOCK = true;
	
	//initiate the filter "Product" on manufacturing reporting.
	context.SP_AA_S_CO_68A_ACT_PRD_TYPE_BRD = "Manufacturing";
	if (context.SP_AA_S_CO_62B_DATE_TYPE == "") context.SP_AA_S_CO_62B_DATE_TYPE = "Validated DKMs";
	if (context.SP_AA_OC_S_REP_STATE_FILTER=="") context.SP_AA_OC_S_REP_STATE_FILTER ="Active";
	if ( context.SP_AA_S_RES_LIST_FILTER=="" ) context.SP_AA_S_RES_LIST_FILTER = "Sanofi Pasteur"

}
AddWrapperFunction(NewOpxAppletWrapper, "sp_js_init_initiate_fields");


//function to update the style manager to the left and unfold the toolbar
function sp_js_on_applet_style_man_fix(){
withoutlocking{
withoutalerts{
var File_Sanofi = opxFile.get("_MOD_SP_COMMON");
var Report_List = new vector(); 
for(var vCell in OpxFolder where (vCell.get("AllocateSpaceForTheReport")==false && (vCell.get("ReportPosition")=="Right") ||  (vCell.get("ReportPosition")=="Right of the screen")))
{
var vLine = vCell.PARENT;
var vReport=lispcall "report-builder::get-report" (vLine);
Report_List.push(vReport);
if (vReport.FILE==File_Sanofi) 
{
vCell.AllocateSpaceForTheReport=true;
vCell.ReportPosition="Left";
}
}
context._IHM_DA_B_FOLDED_BY_DEFAULT=false;
}
}
}

AddWrapperFunction(NewOpxAppletWrapper,"sp_js_on_applet_style_man_fix");

////////////////
//handler for the field SP_SF_PM_SCHED_MAN_STATUS (Status) for milestone.
/////////

function sp_js_milestone_status_iconhandler(){
	var size = 15;
	var oActivity = this;
	var sImage = "Progress_start3" ;
	if (oActivity instanceof opxActivity){
		var sProgressStatus = oActivity.SP_SF_ACT_MIL_ACH;
		if(sProgressStatus == "CANCELLED"){
			sImage = "SP_IMG_DISC_GREY" ;
		}
		else if(sProgressStatus == "NOT MET"){
			sImage = "SP_IMG_DISC_RED" ;
		}
		else if(sProgressStatus == "ABOVE"){
			sImage = "SP_IMG_DISC_GREEN" ;
		}
		else if(sProgressStatus == "MET"){
			sImage = "SP_IMG_DISC_BLACK" ;
		}
		else if(sProgressStatus =="BELOW"){
			sImage = "SP_IMG_DISC_RED" ;
		}
		if(oActivity.SP_NF_B_COMPLETION){
			sImage = sImage + "_CHECKED" ;
		}
		return "opxImage".get(sImage) ;
	}
	else{	
		return false;
	}
}

function sp_js_milestone_status_set_handler(){
	var oSfSlot = "opxSYMBOLIC_FIELD".get("Activity.SP_SF_PM_SCHED_MAN_STATUS");
	if(oSfSlot != undefined && oSfSlot != ""){
		oSfSlot.addiconhandler(sp_js_milestone_status_iconhandler);
	}
}
AddWrapperFunction(InitializeIntranetAfterWrapper,"sp_js_milestone_status_set_handler");



writetolog("Script SP_JS_APPLET_FUNCTIONS loaded with version ~a ", revision_number);

 
//  AUTHOR  : YSA
//  PURPOSE : COMPASS v6 , Apply equations
//  Created  by YSA 18:08 10/06/2016
//  NAME JS : SP_JS_APPLY_EQUATION
var revision_number ="1.1";
//  Revision 1.1  2018/09/07 bcordel
//	RITM0557509 : update of function sp_apply_equations_batch to reset the lock for manual launch of equation on projects.
//

////////// Old Logs///////////////
//  Modified by YSA 14:47 am 09/Mar/2017
//  Modified by YSA 14:46 AM 19/October/2017
//  Modified by YSA 14:46 AM 11/01/2018 redefine Creator_Object_Dynamic_Relation_Reader

function Creator_Object_Dynamic_Relation_Reader() {
  //try {
  if (this != undefined) {
    var equationNumber = this.get(ArchivableObjectEquationNumberField);
    if (equationNumber.numberIsNotNull() == true) {
      var equationObject = this.get(ArchivableObjectEquationObjectField);
      if (equationObject.StringIsNotNull() == true) {
        var currentBaseClass = equationObject.get(EquationBaseClassField);
        if (currentBaseClass.StringIsNotNull() == true) {
          var currentClass = currentBaseClass.get(ObjectClassOSClassField);
          var creatorObjectNumber = this.get(ArchivableObjectCreatorNumberField);
          if (currentClass.StringIsNotNull() == true && currentClass.findclass() != undefined) {
            if(creatorObjectNumber instanceof object && creatorObjectNumber.instanceof(currentClass)){
              return creatorObjectNumber;
            }else if(creatorObjectNumber instanceof number && creatorObjectNumber.numberIsNotNull() == true){
            return currentClass.get(creatorObjectNumber);
            }
          }
        }
      }
    }
  }
  // }
  //  catch(error CatchErr)
  //     {
  //       var AlertMessage = OSNullString;
  //       if (CatchErr != undefined)
  //         {
  //           AlertMessage = AlertMessage + this.tostring() + " - " + CatchErr.tostring();
  //         }
  //       if (AlertMessage.StringIsNotNull() == true)
  //         Alert(AlertMessage);
  //     }
  return undefined;
}

function _PeApplyEquation(){
var cur_user_run=context.callstringformula("$current_user");
var cur_date_run=new date(context.CallDateFormula("$Date_Of_The_Day"),"YYYY-MM-DD HH:MM:SS");
var cur_date_run=cur_date_run.sdate;
var cur_sdate_prj;
var finish_date_run;
var CurrentProject = CurrentPageObject();
var SelectionVector = new vector();                                                                                                                 
var selection = new symbol("SELECTION-ATOM","TOOL-BAR");
var table_name="ORDO_PROJECT A";
var column_vector = new vector(); 
column_vector.push("A.SP_AA_S_PRJ_LOCK_RUN_MET"); 
column_vector.push("A.SP_AA_N_RUN_METRICS"); 
var type_vector = new vector();
type_vector.push("String");
type_vector.push("Number");
var sql_result;
var result_state;
var result_sdate;
var where_clause;
var lock_run_met;
var unlock_run_met;
var req_sdate_met;


if (!(CurrentProject instanceof Opxproject))
{
for(var item in selection where (item instanceof OpxActivity))
{
	CurrentProject=item.project;
	break;
}	
}

if (CurrentProject instanceof Opxproject)
{
where_clause ="A.ONB="+CurrentProject.ONB;
sql_result=sqlselect(table_name,column_vector,type_vector,where_clause);
sql_result=sql_result[0];
sql_result=sql_result.parselist();
result_state=sql_result[0];
result_sdate=sql_result[1];
//result_sdate=result_sdate.parsenumber();

if (!(result_sdate instanceof NUMBER))
{
result_sdate=0;	
}

lock_run_met="UPDATE ORDO_PROJECT set SP_AA_S_PRJ_LOCK_RUN_MET='In progress' where ONB="+CurrentProject.ONB;
unlock_run_met="UPDATE ORDO_PROJECT set SP_AA_S_PRJ_LOCK_RUN_MET='Finished' where ONB="+CurrentProject.ONB;

if ((result_state instanceof STRING) && (result_state=="" || (result_state=="Finished" && (cur_date_run>result_sdate || cur_user_run==CurrentProject.SP_AA_S_USER_RUN_METRICS))))

{
	
	SqlwithDatabasetransaction 
	{
		SQLExecuteImmediate(lock_run_met);
		SqlCommit();
	
		for(var item in selection)
			{
				if (item instanceof OpxActivity)
				{
					Fromobject (item)
					{
						for (var act in "OpxActivity".findClass())
						{
							writeln("act :"+act);
							selectionvector.push(act);	
						}	
					} 
					
				}

			}

		if(selectionvector.Length>0)
		{
			withprocesslock(new list(selectionvector.join(",")))
			{
				context.SP_AA_B_AL_LO_ACTIVE=true;
				selectionvector.Applyequations(undefined);
				context.SP_AA_B_AL_LO_ACTIVE=false;
				for (var act in selectionvector where act.SP_NF_B_CLIN_ACT)
				{
					act.sp_cl_launch_sites_int();
				}
				alert("Metrics have been successfully launched"); 

			}

		}
		else
		{
			if(Question(write_text_key("PE.apply_equation_on_everything")))
			{
				FromObject(CurrentProject)
				{
					withprocesslock(new list(selectionvector.join(",")))
					{
					for(var Activity in OpxActivity){
						selectionvector.Push(Activity);
					}
					context.SP_AA_B_AL_LO_ACTIVE=true;
					selectionvector.Applyequations(undefined);
					context.SP_AA_B_AL_LO_ACTIVE=false;
					for (var act in selectionvector where act.SP_NF_B_CLIN_ACT)
					{
						act.sp_cl_launch_sites_int();
						
					}
					}
				}
			alert("Metrics have been successfully launched"); 
			}
		}
		
		CurrentProject.SP_AA_S_USER_RUN_METRICS=cur_user_run;
		finish_date_run=new date(context.CallDateFormula("$Date_Of_The_Day"),"YYYY-MM-DD HH:MM:SS");
		finish_date_run=finish_date_run.sdate+6;
		req_sdate_met="UPDATE ORDO_PROJECT set SP_AA_N_RUN_METRICS="+finish_date_run+"where ONB="+CurrentProject.ONB;
		//CurrentProject.set("SP_AA_N_RUN_METRICS",finish_date_run.sdate);
		SQLExecuteImmediate(unlock_run_met);
		SQLExecuteImmediate(req_sdate_met);
		SqlCommit();
	}
	
}
else
{
alert("Please wait a moment before launching the metrics (metrics are already launched by another user)"); 	
}
}
else
{
	alert("Please select an activity before launching the metrics"); 
}

return true;
}

// Functions used for apply equations in global batch

function sp_gb_apply_equations(){
	
var SelectionVector = new vector();                                                                                                                 
var spj_act = this;
if (spj_act instanceof OpxActivity)
{
	WriteToLog("Applying equations, on ~a",spj_act.Project);
	WriteToLog("Applying equations, on all activities within ~a",spj_act);

	for(var item in spj_act)
	{
		if (item instanceof OpxActivity)
		{
			Fromobject (item)
			{
				for (var act in "OpxActivity".findClass())
				{
					selectionvector.push(act);	
				}
					WriteToLog("Applying equations, Number of activities :"+selectionvector.Length);			
			} 
			
		}

	}

	if(selectionvector.Length>0)
	{
	context.SP_AA_B_AL_LO_ACTIVE=true;
	selectionvector.Applyequations(undefined);
	context.SP_AA_B_AL_LO_ACTIVE=false;
	for (var act in selectionvector where act.SP_NF_B_CLIN_ACT)
	{
		act.sp_cl_launch_sites_int();
	}
	WriteToLog("Applying equations, eqations have been launched successfully on ~a : ",spj_act.Project);
	}
}
return true;
}

withoutlocking
{
sp_gb_apply_equations.exportfunction();
}


function sp_apply_equations_batch ()
{

for (var prj in "Opxproject".findclass() where prj.STATE=="Active")
{
	// reset of the lock on projects for the manual launch of equations
	prj.SP_AA_S_PRJ_LOCK_RUN_MET="Finished";
	
	fromobject(prj)
	{
		for (var obj in "OpxActivity".findclass()
      where obj.CallBooleanFormula("LEVEL=1 AND (SP_NF_B_ACT_IS_ARD_OBS OR (SP_NF_B_ACT_IS_BRD_OBS AND PROJECT.SP_AA_B_LAUNCH_BRD_METRIC) OR SP_NF_B_ACT_IS_CL_OBS)")  ) 
		  {
			WriteToLog("Starting apply equation on ~a",obj.project);
		  obj.Sp_gb_apply_equations();
			WriteToLog("End apply equation on ~a",obj.project);
		  }
	}
}		
}
withoutlocking
{
sp_apply_equations_batch.exportfunction();
}

function sp_delete_lost_equations()
{
var cptfatt=0;
var cptneq=0;
var cptetf=0;

for (var fatt in "Opx_PE_PT_EQUA_EQFILATT".findclass() where !(fatt._PE_RA_EQUA_EQFA instanceof Opx_PE_PT_EQUA_EQUATION))
{
cptfatt++;
fatt.delete();
}

for (var nq in "Opx_PE_PT_EQUA_EQACTATT".findclass() where !(nq._PE_RA_EQUA_EQAA instanceof Opx_PE_PT_EQUA_EQUATION))
{
cptneq++;
nq.delete();
}


for (var etf in "Opx_PE_PT_EQUA_FILTERATT".findclass() where !(etf._PE_RA_EQUA_ETFT instanceof Opx_PE_PT_EQUA_EQUATEMP))
{
cptetf++;
etf.delete();
}

alert("Nb equa filter attributes deleted is: "+cptfatt);
alert("Nb lost equations deleted is : "+cptneq);
alert("Nb equa template filter attribute is "+cptetf);
return true;
}
sp_delete_lost_equations.exportfunction();


writetolog("Script SP_JS_APPLY_EQUATION loaded with version ~a ", revision_number); 

//  AUTHOR  : YSA
//  PURPOSE : COMPASS v6 , Apply equations
//  Created  by YSA 18:08 10/06/2016
//  NAME JS : SP_JS_APPLY_EQUATION
var revision_number ="1.1";
//  Revision 1.1  2018/09/07 bcordel
//	RITM0557509 : update of function sp_apply_equations_batch to reset the lock for manual launch of equation on projects.
//

////////// Old Logs///////////////
//  Modified by YSA 14:47 am 09/Mar/2017
//  Modified by YSA 14:46 AM 19/October/2017
//  Modified by YSA 14:46 AM 11/01/2018 redefine Creator_Object_Dynamic_Relation_Reader

function Creator_Object_Dynamic_Relation_Reader() {
  //try {
  if (this != undefined) {
    var equationNumber = this.get(ArchivableObjectEquationNumberField);
    if (equationNumber.numberIsNotNull() == true) {
      var equationObject = this.get(ArchivableObjectEquationObjectField);
      if (equationObject.StringIsNotNull() == true) {
        var currentBaseClass = equationObject.get(EquationBaseClassField);
        if (currentBaseClass.StringIsNotNull() == true) {
          var currentClass = currentBaseClass.get(ObjectClassOSClassField);
          var creatorObjectNumber = this.get(ArchivableObjectCreatorNumberField);
          if (currentClass.StringIsNotNull() == true && currentClass.findclass() != undefined) {
            if(creatorObjectNumber instanceof object && creatorObjectNumber.instanceof(currentClass)){
              return creatorObjectNumber;
            }else if(creatorObjectNumber instanceof number && creatorObjectNumber.numberIsNotNull() == true){
            return currentClass.get(creatorObjectNumber);
            }
          }
        }
      }
    }
  }
  // }
  //  catch(error CatchErr)
  //     {
  //       var AlertMessage = OSNullString;
  //       if (CatchErr != undefined)
  //         {
  //           AlertMessage = AlertMessage + this.tostring() + " - " + CatchErr.tostring();
  //         }
  //       if (AlertMessage.StringIsNotNull() == true)
  //         Alert(AlertMessage);
  //     }
  return undefined;
}

function _PeApplyEquation(){
var cur_user_run=context.callstringformula("$current_user");
var cur_date_run=new date(context.CallDateFormula("$Date_Of_The_Day"),"YYYY-MM-DD HH:MM:SS");
var cur_date_run=cur_date_run.sdate;
var cur_sdate_prj;
var finish_date_run;
var CurrentProject = CurrentPageObject();
var SelectionVector = new vector();                                                                                                                 
var selection = new symbol("SELECTION-ATOM","TOOL-BAR");
var table_name="ORDO_PROJECT A";
var column_vector = new vector(); 
column_vector.push("A.SP_AA_S_PRJ_LOCK_RUN_MET"); 
column_vector.push("A.SP_AA_N_RUN_METRICS"); 
var type_vector = new vector();
type_vector.push("String");
type_vector.push("Number");
var sql_result;
var result_state;
var result_sdate;
var where_clause;
var lock_run_met;
var unlock_run_met;
var req_sdate_met;


if (!(CurrentProject instanceof Opxproject))
{
for(var item in selection where (item instanceof OpxActivity))
{
	CurrentProject=item.project;
	break;
}	
}

if (CurrentProject instanceof Opxproject)
{
where_clause ="A.ONB="+CurrentProject.ONB;
sql_result=sqlselect(table_name,column_vector,type_vector,where_clause);
sql_result=sql_result[0];
sql_result=sql_result.parselist();
result_state=sql_result[0];
result_sdate=sql_result[1];
//result_sdate=result_sdate.parsenumber();

if (!(result_sdate instanceof NUMBER))
{
result_sdate=0;	
}

lock_run_met="UPDATE ORDO_PROJECT set SP_AA_S_PRJ_LOCK_RUN_MET='In progress' where ONB="+CurrentProject.ONB;
unlock_run_met="UPDATE ORDO_PROJECT set SP_AA_S_PRJ_LOCK_RUN_MET='Finished' where ONB="+CurrentProject.ONB;

if ((result_state instanceof STRING) && (result_state=="" || (result_state=="Finished" && (cur_date_run>result_sdate || cur_user_run==CurrentProject.SP_AA_S_USER_RUN_METRICS))))

{
	
	SqlwithDatabasetransaction 
	{
		SQLExecuteImmediate(lock_run_met);
		SqlCommit();
	
		for(var item in selection)
			{
				if (item instanceof OpxActivity)
				{
					Fromobject (item)
					{
						for (var act in "OpxActivity".findClass())
						{
							writeln("act :"+act);
							selectionvector.push(act);	
						}	
					} 
					
				}

			}

		if(selectionvector.Length>0)
		{
			withprocesslock(new list(selectionvector.join(",")))
			{
				context.SP_AA_B_AL_LO_ACTIVE=true;
				selectionvector.Applyequations(undefined);
				context.SP_AA_B_AL_LO_ACTIVE=false;
				for (var act in selectionvector where act.SP_NF_B_CLIN_ACT)
				{
					act.sp_cl_launch_sites_int();
				}
				alert("Metrics have been successfully launched"); 

			}

		}
		else
		{
			if(Question(write_text_key("PE.apply_equation_on_everything")))
			{
				FromObject(CurrentProject)
				{
					withprocesslock(new list(selectionvector.join(",")))
					{
					for(var Activity in OpxActivity){
						selectionvector.Push(Activity);
					}
					context.SP_AA_B_AL_LO_ACTIVE=true;
					selectionvector.Applyequations(undefined);
					context.SP_AA_B_AL_LO_ACTIVE=false;
					for (var act in selectionvector where act.SP_NF_B_CLIN_ACT)
					{
						act.sp_cl_launch_sites_int();
						
					}
					}
				}
			alert("Metrics have been successfully launched"); 
			}
		}
		
		CurrentProject.SP_AA_S_USER_RUN_METRICS=cur_user_run;
		finish_date_run=new date(context.CallDateFormula("$Date_Of_The_Day"),"YYYY-MM-DD HH:MM:SS");
		finish_date_run=finish_date_run.sdate+6;
		req_sdate_met="UPDATE ORDO_PROJECT set SP_AA_N_RUN_METRICS="+finish_date_run+"where ONB="+CurrentProject.ONB;
		//CurrentProject.set("SP_AA_N_RUN_METRICS",finish_date_run.sdate);
		SQLExecuteImmediate(unlock_run_met);
		SQLExecuteImmediate(req_sdate_met);
		SqlCommit();
	}
	
}
else
{
alert("Please wait a moment before launching the metrics (metrics are already launched by another user)"); 	
}
}
else
{
	alert("Please select an activity before launching the metrics"); 
}

return true;
}

// Functions used for apply equations in global batch

function sp_gb_apply_equations(){
	
var SelectionVector = new vector();                                                                                                                 
var spj_act = this;
if (spj_act instanceof OpxActivity)
{
	WriteToLog("Applying equations, on ~a",spj_act.Project);
	WriteToLog("Applying equations, on all activities within ~a",spj_act);

	for(var item in spj_act)
	{
		if (item instanceof OpxActivity)
		{
			Fromobject (item)
			{
				for (var act in "OpxActivity".findClass())
				{
					selectionvector.push(act);	
				}
					WriteToLog("Applying equations, Number of activities :"+selectionvector.Length);			
			} 
			
		}

	}

	if(selectionvector.Length>0)
	{
	context.SP_AA_B_AL_LO_ACTIVE=true;
	selectionvector.Applyequations(undefined);
	context.SP_AA_B_AL_LO_ACTIVE=false;
	for (var act in selectionvector where act.SP_NF_B_CLIN_ACT)
	{
		act.sp_cl_launch_sites_int();
	}
	WriteToLog("Applying equations, eqations have been launched successfully on ~a : ",spj_act.Project);
	}
}
return true;
}

withoutlocking
{
sp_gb_apply_equations.exportfunction();
}


function sp_apply_equations_batch ()
{

for (var prj in "Opxproject".findclass() where prj.STATE=="Active")
{
	// reset of the lock on projects for the manual launch of equations
	prj.SP_AA_S_PRJ_LOCK_RUN_MET="Finished";
	
	fromobject(prj)
	{
		for (var obj in "OpxActivity".findclass()
      where obj.CallBooleanFormula("LEVEL=1 AND (SP_NF_B_ACT_IS_ARD_OBS OR (SP_NF_B_ACT_IS_BRD_OBS AND PROJECT.SP_AA_B_LAUNCH_BRD_METRIC) OR SP_NF_B_ACT_IS_CL_OBS)")  ) 
		  {
			WriteToLog("Starting apply equation on ~a",obj.project);
		  obj.Sp_gb_apply_equations();
			WriteToLog("End apply equation on ~a",obj.project);
		  }
	}
}		
}
withoutlocking
{
sp_apply_equations_batch.exportfunction();
}

function sp_delete_lost_equations()
{
var cptfatt=0;
var cptneq=0;
var cptetf=0;

for (var fatt in "Opx_PE_PT_EQUA_EQFILATT".findclass() where !(fatt._PE_RA_EQUA_EQFA instanceof Opx_PE_PT_EQUA_EQUATION))
{
cptfatt++;
fatt.delete();
}

for (var nq in "Opx_PE_PT_EQUA_EQACTATT".findclass() where !(nq._PE_RA_EQUA_EQAA instanceof Opx_PE_PT_EQUA_EQUATION))
{
cptneq++;
nq.delete();
}


for (var etf in "Opx_PE_PT_EQUA_FILTERATT".findclass() where !(etf._PE_RA_EQUA_ETFT instanceof Opx_PE_PT_EQUA_EQUATEMP))
{
cptetf++;
etf.delete();
}

alert("Nb equa filter attributes deleted is: "+cptfatt);
alert("Nb lost equations deleted is : "+cptneq);
alert("Nb equa template filter attribute is "+cptetf);
return true;
}
sp_delete_lost_equations.exportfunction();


writetolog("Script SP_JS_APPLY_EQUATION loaded with version ~a ", revision_number); 

 
//
//	NAME	: SP_JS_AS_METRICS_FUNCTION
//	AUTHOR  : MAG
//  PURPOSE : COMPASS v6 , Function for AS Metrics equations
//
//  HISTORY :
var revision_number ="1.1";
//
//  Revision 1.1  2019/07/29 bcordel
//  RITM1166910 - TEMPO - Metrics platformprofile to link with RBS : replacing SP_AA_EQUA_PLATFORM by SP_RA_FTE_METRICS_RESOURCE
//
//  Revision 1.0  2019/05/03 MAG
//  RITM1032555 AS Metrics rework : creation of the script

////////////////////////////////////////////////////////
//	sp_js_as_check_equ_to_launch
//	function on Activity class that allows to check if As metrics equations need to be launched on the activity.
////////////////////////////////////////////////////////

function sp_js_as_check_equ_to_launch(ID,sResource)
{
	var o_act="opxactivity".get(ID);
	var o_res = "OpxResource".get(sResource);
	var o_act_wbs=o_act.wbs_type.name;
	var o_act_site=o_act.breakdown_3.name;
	var o_res_name=o_res.name;
	for (var o_fte_line in "OpxSP_PT_EQUA_FLAT_VALUES" where o_fte_line.SP_AA_EQUA_WBSTYPE == o_act_wbs && o_fte_line.SP_RA_FTE_METRICS_RESOURCE == o_res && o_fte_line.SP_AA_EQUA_SITE == o_act_site)
	{
		if (o_act.SP_NF_B_ACT_AS_MET_TYPE_1)
		{
			for (var o_act_res in o_act.get("r.SP_RA_AS_MET_RES_ACT.SP_PT_AS_MET_NN_RES") where o_act_res.SP_RA_AS_MET_RES_LIST.name==o_res_name )
			{
				if(o_act_res.SP_RA_AS_MET_RES_LIST.name==o_res_name)
				return true;
				else
				return false;
			}
		}
		else if (o_act.SP_NF_B_ACT_AS_MET_TYPE_2)
		{
			for (var x in "opx_SP_PT_AS_MET_DRI_VAL"
				where (x.SP_RA_AS_MET_ACT.ID==o_act.ID && x.SP_RA_AS_MET_RES.name==o_res_name))
				{
					if(x.SP_AA_AS_MET_COMPLEXITY != "")
					{
						return true;
					}
					else
					{
						return false;
					}
				}
		}
		else if (o_act.SP_NF_B_ACT_AS_MET_TYPE_3)
		{
				
			
				for (var x in "opx_SP_PT_AS_MET_DRI_VAL"
				where (x.SP_RA_AS_MET_ACT.ID==o_act.ID && x.SP_RA_AS_MET_RES.name==o_res_name))
				{
					if(x.CallBooleanFormula("SP_AA_NB_AS_MET_TESTS > 0 and SP_AA_NB_AS_MET_LOTS > 0 and SP_AA_NB_AS_MET_SAMPLE_LOT > 0")) 
					{
						return true;
					}
					else 
					{
						return false;
					}
				}
		}
		
		
	}
	return false;
}
sp_js_as_check_equ_to_launch.exportfunction({"STRING","STRING"},"BOOLEAN","Function  to check whether As metrics need to launch on the activity as per the parameter");

////////////////////////////////////////////////////////
//	sp_js_csc_return_desc
//	Function on Activity class that return the allocation description of the Alloc description from FTE Metrics table
////////////////////////////////////////////////////////

function sp_js_as_met_fte_desc(ID,sResource)
{
	var o_act="opxactivity".get(ID);
	var o_res = "OpxResource".get(sResource);
	var o_act_wbs=o_act.wbs_type.name;
	var o_act_site=o_act.breakdown_3.name;
	var o_res_name=o_res.name;
	var o_alloc_desc="";
	for (var o_fte_line in "OpxSP_PT_EQUA_FLAT_VALUES" where o_fte_line.SP_AA_EQUA_WBSTYPE == o_act_wbs && o_fte_line.SP_RA_FTE_METRICS_RESOURCE == o_res && o_fte_line.SP_AA_EQUA_SITE == o_act_site)
	{
		
		o_alloc_desc=o_fte_line.SP_AA_EQUA_ALLOC_DESC;
		
	
	}
	return (o_alloc_desc instanceof String) ? o_alloc_desc : "";
	
}
sp_js_as_met_fte_desc.exportfunction({"STRING","STRING"},"STRING","Function retunring the allocation description for AS Metrics");

////////////////////////////////////////////////////////
//	sp_js_csc_return_workload
//	Method on Activity class that return the workload from the FTE Metrics Table 
////////////////////////////////////////////////////////

function sp_js_as_met_return_workload (ID,sResource)
{
	
	var o_act="opxactivity".get(ID);
	var o_res="opxresource".get(sResource);
	var o_act_wbs=o_act.wbs_type.name;
	var o_act_site=o_act.breakdown_3.name;
	var o_res_name=o_res.name;
	var o_workload="";
	for (var o_fte_line in "OpxSP_PT_EQUA_FLAT_VALUES" where o_fte_line.SP_AA_EQUA_WBSTYPE == o_act_wbs && o_fte_line.SP_RA_FTE_METRICS_RESOURCE == o_res && o_fte_line.SP_AA_EQUA_SITE == o_act_site)
	{

		if (o_act.SP_NF_B_ACT_AS_MET_TYPE_1)
		{
			//Alert (o_fte_line.SP_AA_EQUA_TOTAL_LOAD);
			return (o_fte_line.SP_AA_EQUA_TOTAL_LOAD instanceof number) ? o_fte_line.SP_AA_EQUA_TOTAL_LOAD : -1;
		}
		if (o_act.SP_NF_B_ACT_AS_MET_TYPE_2)
		{
			for (var o_res_comp in "opxSP_PT_AS_MET_DRI_VAL" where o_res_comp.SP_RA_AS_MET_RES.name==o_res_name && o_res_comp.SP_AA_AS_MET_COMPLEXITY!="" && o_res_comp.SP_RA_AS_MET_RES==o_fte_line.SP_RA_FTE_METRICS_RESOURCE && o_res_comp.SP_RA_AS_MET_ACT.ID==o_act.ID )
			{
				for ( var pValue in "OpxNAT".get("SP_AT_ARD_COMLEXITY").get("POSSIBLE-VALUES"))
				{	
					if (pValue.value=="1" && pValue.comment==o_res_comp.SP_AA_AS_MET_COMPLEXITY)
					{
						return (o_fte_line.SP_AA_EQUA_LEVEL_1 instanceof number) ? o_fte_line.SP_AA_EQUA_LEVEL_1 : -1;
						
					}
					else if (pValue.value=="2" && pValue.comment==o_res_comp.SP_AA_AS_MET_COMPLEXITY)
					{
						return (o_fte_line.SP_AA_EQUA_LEVEL_2 instanceof number) ? o_fte_line.SP_AA_EQUA_LEVEL_2 : -1;
					}
					else if (pValue.value=="3" && pValue.comment==o_res_comp.SP_AA_AS_MET_COMPLEXITY)
					{
						return (o_fte_line.SP_AA_EQUA_LEVEL_3 instanceof number) ? o_fte_line.SP_AA_EQUA_LEVEL_3 : -1;
					}
				}
				
			}
		}
		
		if (o_act.SP_NF_B_ACT_AS_MET_TYPE_3)
		{
			for (var o_res_box3 in "opxSP_PT_AS_MET_DRI_VAL" where o_res_box3.SP_RA_AS_MET_RES.name==o_res_name && o_res_box3.SP_RA_AS_MET_ACT.id==o_act.ID )
			{
					if(o_res_box3.CallBooleanFormula("SP_AA_NB_AS_MET_TESTS > 0 and SP_AA_NB_AS_MET_LOTS>0 and SP_AA_NB_AS_MET_SAMPLE_LOT>0")) 
					{
						o_workload=o_fte_line.SP_AA_NB_FTE_MUL*o_res_box3.SP_AA_NB_AS_MET_LOTS*o_res_box3.SP_AA_NB_AS_MET_SAMPLE_LOT*o_res_box3.SP_AA_NB_AS_MET_TESTS;
						return (o_workload instanceof number) ? o_workload : -1;
					}
			}
				
		}

	}
	
}
sp_js_as_met_return_workload.exportfunction({"STRING","STRING"},"NUMBER","Function returning the allocation workload for AS metrics");

writetolog("Loading script SP_JS_AS_METRICS_FUNCTION in revision ~a.",revision_number);

//
//	NAME	: SP_JS_AS_METRICS_FUNCTION
//	AUTHOR  : MAG
//  PURPOSE : COMPASS v6 , Function for AS Metrics equations
//
//  HISTORY :
var revision_number ="1.1";
//
//  Revision 1.1  2019/07/29 bcordel
//  RITM1166910 - TEMPO - Metrics platformprofile to link with RBS : replacing SP_AA_EQUA_PLATFORM by SP_RA_FTE_METRICS_RESOURCE
//
//  Revision 1.0  2019/05/03 MAG
//  RITM1032555 AS Metrics rework : creation of the script

////////////////////////////////////////////////////////
//	sp_js_as_check_equ_to_launch
//	function on Activity class that allows to check if As metrics equations need to be launched on the activity.
////////////////////////////////////////////////////////

function sp_js_as_check_equ_to_launch(ID,sResource)
{
	var o_act="opxactivity".get(ID);
	var o_res = "OpxResource".get(sResource);
	var o_act_wbs=o_act.wbs_type.name;
	var o_act_site=o_act.breakdown_3.name;
	var o_res_name=o_res.name;
	for (var o_fte_line in "OpxSP_PT_EQUA_FLAT_VALUES" where o_fte_line.SP_AA_EQUA_WBSTYPE == o_act_wbs && o_fte_line.SP_RA_FTE_METRICS_RESOURCE == o_res && o_fte_line.SP_AA_EQUA_SITE == o_act_site)
	{
		if (o_act.SP_NF_B_ACT_AS_MET_TYPE_1)
		{
			for (var o_act_res in o_act.get("r.SP_RA_AS_MET_RES_ACT.SP_PT_AS_MET_NN_RES") where o_act_res.SP_RA_AS_MET_RES_LIST.name==o_res_name )
			{
				if(o_act_res.SP_RA_AS_MET_RES_LIST.name==o_res_name)
				return true;
				else
				return false;
			}
		}
		else if (o_act.SP_NF_B_ACT_AS_MET_TYPE_2)
		{
			for (var x in "opx_SP_PT_AS_MET_DRI_VAL"
				where (x.SP_RA_AS_MET_ACT.ID==o_act.ID && x.SP_RA_AS_MET_RES.name==o_res_name))
				{
					if(x.SP_AA_AS_MET_COMPLEXITY != "")
					{
						return true;
					}
					else
					{
						return false;
					}
				}
		}
		else if (o_act.SP_NF_B_ACT_AS_MET_TYPE_3)
		{
				
			
				for (var x in "opx_SP_PT_AS_MET_DRI_VAL"
				where (x.SP_RA_AS_MET_ACT.ID==o_act.ID && x.SP_RA_AS_MET_RES.name==o_res_name))
				{
					if(x.CallBooleanFormula("SP_AA_NB_AS_MET_TESTS > 0 and SP_AA_NB_AS_MET_LOTS > 0 and SP_AA_NB_AS_MET_SAMPLE_LOT > 0")) 
					{
						return true;
					}
					else 
					{
						return false;
					}
				}
		}
		
		
	}
	return false;
}
sp_js_as_check_equ_to_launch.exportfunction({"STRING","STRING"},"BOOLEAN","Function  to check whether As metrics need to launch on the activity as per the parameter");

////////////////////////////////////////////////////////
//	sp_js_csc_return_desc
//	Function on Activity class that return the allocation description of the Alloc description from FTE Metrics table
////////////////////////////////////////////////////////

function sp_js_as_met_fte_desc(ID,sResource)
{
	var o_act="opxactivity".get(ID);
	var o_res = "OpxResource".get(sResource);
	var o_act_wbs=o_act.wbs_type.name;
	var o_act_site=o_act.breakdown_3.name;
	var o_res_name=o_res.name;
	var o_alloc_desc="";
	for (var o_fte_line in "OpxSP_PT_EQUA_FLAT_VALUES" where o_fte_line.SP_AA_EQUA_WBSTYPE == o_act_wbs && o_fte_line.SP_RA_FTE_METRICS_RESOURCE == o_res && o_fte_line.SP_AA_EQUA_SITE == o_act_site)
	{
		
		o_alloc_desc=o_fte_line.SP_AA_EQUA_ALLOC_DESC;
		
	
	}
	return (o_alloc_desc instanceof String) ? o_alloc_desc : "";
	
}
sp_js_as_met_fte_desc.exportfunction({"STRING","STRING"},"STRING","Function retunring the allocation description for AS Metrics");

////////////////////////////////////////////////////////
//	sp_js_csc_return_workload
//	Method on Activity class that return the workload from the FTE Metrics Table 
////////////////////////////////////////////////////////

function sp_js_as_met_return_workload (ID,sResource)
{
	
	var o_act="opxactivity".get(ID);
	var o_res="opxresource".get(sResource);
	var o_act_wbs=o_act.wbs_type.name;
	var o_act_site=o_act.breakdown_3.name;
	var o_res_name=o_res.name;
	var o_workload="";
	for (var o_fte_line in "OpxSP_PT_EQUA_FLAT_VALUES" where o_fte_line.SP_AA_EQUA_WBSTYPE == o_act_wbs && o_fte_line.SP_RA_FTE_METRICS_RESOURCE == o_res && o_fte_line.SP_AA_EQUA_SITE == o_act_site)
	{

		if (o_act.SP_NF_B_ACT_AS_MET_TYPE_1)
		{
			//Alert (o_fte_line.SP_AA_EQUA_TOTAL_LOAD);
			return (o_fte_line.SP_AA_EQUA_TOTAL_LOAD instanceof number) ? o_fte_line.SP_AA_EQUA_TOTAL_LOAD : -1;
		}
		if (o_act.SP_NF_B_ACT_AS_MET_TYPE_2)
		{
			for (var o_res_comp in "opxSP_PT_AS_MET_DRI_VAL" where o_res_comp.SP_RA_AS_MET_RES.name==o_res_name && o_res_comp.SP_AA_AS_MET_COMPLEXITY!="" && o_res_comp.SP_RA_AS_MET_RES==o_fte_line.SP_RA_FTE_METRICS_RESOURCE && o_res_comp.SP_RA_AS_MET_ACT.ID==o_act.ID )
			{
				for ( var pValue in "OpxNAT".get("SP_AT_ARD_COMLEXITY").get("POSSIBLE-VALUES"))
				{	
					if (pValue.value=="1" && pValue.comment==o_res_comp.SP_AA_AS_MET_COMPLEXITY)
					{
						return (o_fte_line.SP_AA_EQUA_LEVEL_1 instanceof number) ? o_fte_line.SP_AA_EQUA_LEVEL_1 : -1;
						
					}
					else if (pValue.value=="2" && pValue.comment==o_res_comp.SP_AA_AS_MET_COMPLEXITY)
					{
						return (o_fte_line.SP_AA_EQUA_LEVEL_2 instanceof number) ? o_fte_line.SP_AA_EQUA_LEVEL_2 : -1;
					}
					else if (pValue.value=="3" && pValue.comment==o_res_comp.SP_AA_AS_MET_COMPLEXITY)
					{
						return (o_fte_line.SP_AA_EQUA_LEVEL_3 instanceof number) ? o_fte_line.SP_AA_EQUA_LEVEL_3 : -1;
					}
				}
				
			}
		}
		
		if (o_act.SP_NF_B_ACT_AS_MET_TYPE_3)
		{
			for (var o_res_box3 in "opxSP_PT_AS_MET_DRI_VAL" where o_res_box3.SP_RA_AS_MET_RES.name==o_res_name && o_res_box3.SP_RA_AS_MET_ACT.id==o_act.ID )
			{
					if(o_res_box3.CallBooleanFormula("SP_AA_NB_AS_MET_TESTS > 0 and SP_AA_NB_AS_MET_LOTS>0 and SP_AA_NB_AS_MET_SAMPLE_LOT>0")) 
					{
						o_workload=o_fte_line.SP_AA_NB_FTE_MUL*o_res_box3.SP_AA_NB_AS_MET_LOTS*o_res_box3.SP_AA_NB_AS_MET_SAMPLE_LOT*o_res_box3.SP_AA_NB_AS_MET_TESTS;
						return (o_workload instanceof number) ? o_workload : -1;
					}
			}
				
		}

	}
	
}
sp_js_as_met_return_workload.exportfunction({"STRING","STRING"},"NUMBER","Function returning the allocation workload for AS metrics");

writetolog("Loading script SP_JS_AS_METRICS_FUNCTION in revision ~a.",revision_number);

 
//	NAME	: sp_js_baseline_functions
//	AUTHOR  : bcordel
//  VERSION : 1.0
//  PURPOSE : COMPASS v6 , functions linked to baseline in compass
//  
//  HISTORY :
var revision_number ="1.2";
//
//	Revision 1.2  2017/04/13 bcordel
//	adding condition of opened file for fonction cleaning reference and actuals in reference
//
//  Revision 1.1  2017/02/21 bcordel
//  adding function sp_js_cleanup_baseline
//  Revision 1.0  2017/02/16 bcordel
//  creation of the macro-script 

function sp_js_delete_yearly_actuals ()
{
	writetolog("Starting cleaning of actuals in yearly baseline.");
	var ctr_entry_deleted = 0;
	withoutlocking{
	withoutalerts{
		for (var o_work_perf in "OpxREFERENCED_WORK_PERFORMED" where o_work_perf.REFERENCE.NAME=="YEARLY" && o_work_perf.FILE.OPEN)
		{
			o_work_perf.delete();
			ctr_entry_deleted++;
		}
	}}
	
	writetolog("Ending cleaning of of actuals in yearly baseline : ~a entries suppressed.",ctr_entry_deleted);
}
sp_js_delete_yearly_actuals.exportfunction();

function sp_js_cleanup_baseline ()
{
	writetolog("Starting cleaning of baselines.");
	var ctr_baseline_counter = 0;
	for (var o_ref in "OpxReference" where o_ref.SP_NF_B_REF_TO_DELETE)
	{
		ctr_baseline_counter++;
	}

	withoutlocking{
	withoutalerts{
	WithMonitoring (ctr_baseline_counter > 5) for (var o_ref in "OpxReference" where o_ref.SP_NF_B_REF_TO_DELETE && o_ref.FILE.OPEN)
	{
		"Performing op on objects".Monitor(ctr_baseline_counter);
		o_ref.delete();
		
	}
	}
	}
	writetolog("Ending cleaning of baselines. ~a baseline deleted",ctr_baseline_counter);
}
sp_js_cleanup_baseline.exportfunction();

function SP_INF_PH_FIELDS_TO_ARCHIVE()
{
	var Reference_template_Attribute_table_ph = new hashtable ("STRING");
	var Reference_template_Attribute_Cache_ph = "COST_ACCOUNT,SP_NF_PH_COMMENT,SP_AA_S_PH_FTE_COMMENTS,COMMENT";
	var attlist = Reference_template_Attribute_Cache_ph.ParseVector();
	
	if (attlist != undefined){
		for(var att in attlist){
			var slot = "OpxAllocation".getslot(att);
			writetolog("Slot ------>  ~a ---- ~a ", slot.Descriptor.Name, att);
			if (slot != undefined){
				Reference_template_Attribute_table_ph.set(slot.Descriptor.Name,true);
			}
		}
	}
	
	if(Reference_template_Attribute_table_ph.count > 0){
		var Slot = "OpxAllocation".getSlot(this);
		writetolog(" this ~a is found ~a",this,Reference_template_Attribute_table_ph.get(Slot.Descriptor.name,false));
		return Reference_template_Attribute_table_ph.get(Slot.Descriptor.name,false);
	}
	else{
		return false;
	}
}


writetolog("Script sp_js_baseline_functions loaded with version ~a ", revision_number);

//	NAME	: sp_js_baseline_functions
//	AUTHOR  : bcordel
//  VERSION : 1.0
//  PURPOSE : COMPASS v6 , functions linked to baseline in compass
//  
//  HISTORY :
var revision_number ="1.2";
//
//	Revision 1.2  2017/04/13 bcordel
//	adding condition of opened file for fonction cleaning reference and actuals in reference
//
//  Revision 1.1  2017/02/21 bcordel
//  adding function sp_js_cleanup_baseline
//  Revision 1.0  2017/02/16 bcordel
//  creation of the macro-script 

function sp_js_delete_yearly_actuals ()
{
	writetolog("Starting cleaning of actuals in yearly baseline.");
	var ctr_entry_deleted = 0;
	withoutlocking{
	withoutalerts{
		for (var o_work_perf in "OpxREFERENCED_WORK_PERFORMED" where o_work_perf.REFERENCE.NAME=="YEARLY" && o_work_perf.FILE.OPEN)
		{
			o_work_perf.delete();
			ctr_entry_deleted++;
		}
	}}
	
	writetolog("Ending cleaning of of actuals in yearly baseline : ~a entries suppressed.",ctr_entry_deleted);
}
sp_js_delete_yearly_actuals.exportfunction();

function sp_js_cleanup_baseline ()
{
	writetolog("Starting cleaning of baselines.");
	var ctr_baseline_counter = 0;
	for (var o_ref in "OpxReference" where o_ref.SP_NF_B_REF_TO_DELETE)
	{
		ctr_baseline_counter++;
	}

	withoutlocking{
	withoutalerts{
	WithMonitoring (ctr_baseline_counter > 5) for (var o_ref in "OpxReference" where o_ref.SP_NF_B_REF_TO_DELETE && o_ref.FILE.OPEN)
	{
		"Performing op on objects".Monitor(ctr_baseline_counter);
		o_ref.delete();
		
	}
	}
	}
	writetolog("Ending cleaning of baselines. ~a baseline deleted",ctr_baseline_counter);
}
sp_js_cleanup_baseline.exportfunction();

function SP_INF_PH_FIELDS_TO_ARCHIVE()
{
	var Reference_template_Attribute_table_ph = new hashtable ("STRING");
	var Reference_template_Attribute_Cache_ph = "COST_ACCOUNT,SP_NF_PH_COMMENT,SP_AA_S_PH_FTE_COMMENTS,COMMENT";
	var attlist = Reference_template_Attribute_Cache_ph.ParseVector();
	
	if (attlist != undefined){
		for(var att in attlist){
			var slot = "OpxAllocation".getslot(att);
			writetolog("Slot ------>  ~a ---- ~a ", slot.Descriptor.Name, att);
			if (slot != undefined){
				Reference_template_Attribute_table_ph.set(slot.Descriptor.Name,true);
			}
		}
	}
	
	if(Reference_template_Attribute_table_ph.count > 0){
		var Slot = "OpxAllocation".getSlot(this);
		writetolog(" this ~a is found ~a",this,Reference_template_Attribute_table_ph.get(Slot.Descriptor.name,false));
		return Reference_template_Attribute_table_ph.get(Slot.Descriptor.name,false);
	}
	else{
		return false;
	}
}


writetolog("Script sp_js_baseline_functions loaded with version ~a ", revision_number);

 
//	NAME	: SP_JS_BEFORE_METHODS_FOR_PKM
//	AUTHOR  : ?
//  PURPOSE : COMPASS v6 (old P5: TMA_BUG_Fix\PBI8670, Package_Delivery_12_Nov)
//  
//  HISTORY :
var revision_number ="1.4";
//
//	Revision 1.4  2019/05/28 MBL : Modification of Mod_PKM_NAME and Mod_PKM_DESC to use SP_NF_B_ELIGIBLE_REL_PKM
//  Revision 1.3: 2019/004/18 MBL: Changing condition on "is a pkm?" by condition on wbs type  =GPKM* or pkm and addition of a fromobject to loop only on the project activities. 
//  Revision 1.2: 2017/02/06 MPA: removing SP_AA_B_DKM_RELATED_TO_PKM "Related to PKM?" field which is no longer useful. 
//  Revision 1.1: 2015/09/11 KSK - #493 Trial code validation
//  Created  by - ?

var slot_PKM_NAME="OpxActivity".findClass().getSlot("NAME"); 
var slot_PKM_DESC="OpxActivity".findClass().getSlot("DESC"); 

function Mod_PKM_NAME(oldV,newV)
{
	var validTrialCode = false;
	var prj=this.PROJECT;
	if(this.CallBooleanFormula("$CURRENT_USER <> \"P_ADM\"") &&  prj instanceof opxproject)
	{
		fromobject(prj)
		{
			if(this.SP_NF_B_ELIGIBLE_REL_PKM)
			{
				var old_rel_PKM=oldV+"_"+this.DESC;
				var new_rel_PKM=newV+"_"+this.DESC;
				old_rel_PKM=old_rel_PKM.substring(0,200);
				new_rel_PKM=new_rel_PKM.substring(0,200);
				for (var act_dkm in "OpxActivity" where act_dkm.SP_AA_RELATED_PKMS==old_rel_PKM)
				{
					withoutlocking act_dkm.SP_AA_RELATED_PKMS=new_rel_PKM;
				}
			} 
			if (this.SP_NF_CL_TRIAL)
			{
				for (var t in "OpxSP_PT_CL_TRIAL_CODE".findclass() where t.name == newV)
				{
					validTrialCode = true;
					break;
				}
				if (! validTrialCode)
				{
					alert("The Trial activity name is not valid. Please select a Trial Code from the list available in the Trial information tab.");
					CancelCurrentTransaction();
				}
			}
		}
	}
}

function Mod_PKM_DESC(oldV,newV)
{
	var prj=this.PROJECT;
	if(this.CallBooleanFormula("$CURRENT_USER <> \"P_ADM\"") && prj instanceof opxproject)
	{
		if(this.SP_NF_B_ELIGIBLE_REL_PKM)
		{
			var old_rel_PKM=this.name+"_"+oldV;
			var new_rel_PKM=this.name+"_"+newV;
			old_rel_PKM=old_rel_PKM.substring(0,200);
			new_rel_PKM=new_rel_PKM.substring(0,200);
			fromobject(prj)
			{
				for (var act_dkm in "OpxActivity" where act_dkm.SP_AA_RELATED_PKMS==old_rel_PKM)
				{
					withoutlocking act_dkm.SP_AA_RELATED_PKMS=new_rel_PKM;
				}
			}
		}
	} 
}

slot_PKM_NAME.modifybeforeMethod = Mod_PKM_NAME; 
slot_PKM_DESC.modifybeforeMethod = Mod_PKM_DESC; 

writetolog("Script SP_JS_BEFORE_METHODS_FOR_PKM loaded with version ~a ", revision_number); 

//	NAME	: SP_JS_BEFORE_METHODS_FOR_PKM
//	AUTHOR  : ?
//  PURPOSE : COMPASS v6 (old P5: TMA_BUG_Fix\PBI8670, Package_Delivery_12_Nov)
//  
//  HISTORY :
var revision_number ="1.4";
//
//	Revision 1.4  2019/05/28 MBL : Modification of Mod_PKM_NAME and Mod_PKM_DESC to use SP_NF_B_ELIGIBLE_REL_PKM
//  Revision 1.3: 2019/004/18 MBL: Changing condition on "is a pkm?" by condition on wbs type  =GPKM* or pkm and addition of a fromobject to loop only on the project activities. 
//  Revision 1.2: 2017/02/06 MPA: removing SP_AA_B_DKM_RELATED_TO_PKM "Related to PKM?" field which is no longer useful. 
//  Revision 1.1: 2015/09/11 KSK - #493 Trial code validation
//  Created  by - ?

var slot_PKM_NAME="OpxActivity".findClass().getSlot("NAME"); 
var slot_PKM_DESC="OpxActivity".findClass().getSlot("DESC"); 

function Mod_PKM_NAME(oldV,newV)
{
	var validTrialCode = false;
	var prj=this.PROJECT;
	if(this.CallBooleanFormula("$CURRENT_USER <> \"P_ADM\"") &&  prj instanceof opxproject)
	{
		fromobject(prj)
		{
			if(this.SP_NF_B_ELIGIBLE_REL_PKM)
			{
				var old_rel_PKM=oldV+"_"+this.DESC;
				var new_rel_PKM=newV+"_"+this.DESC;
				old_rel_PKM=old_rel_PKM.substring(0,200);
				new_rel_PKM=new_rel_PKM.substring(0,200);
				for (var act_dkm in "OpxActivity" where act_dkm.SP_AA_RELATED_PKMS==old_rel_PKM)
				{
					withoutlocking act_dkm.SP_AA_RELATED_PKMS=new_rel_PKM;
				}
			} 
			if (this.SP_NF_CL_TRIAL)
			{
				for (var t in "OpxSP_PT_CL_TRIAL_CODE".findclass() where t.name == newV)
				{
					validTrialCode = true;
					break;
				}
				if (! validTrialCode)
				{
					alert("The Trial activity name is not valid. Please select a Trial Code from the list available in the Trial information tab.");
					CancelCurrentTransaction();
				}
			}
		}
	}
}

function Mod_PKM_DESC(oldV,newV)
{
	var prj=this.PROJECT;
	if(this.CallBooleanFormula("$CURRENT_USER <> \"P_ADM\"") && prj instanceof opxproject)
	{
		if(this.SP_NF_B_ELIGIBLE_REL_PKM)
		{
			var old_rel_PKM=this.name+"_"+oldV;
			var new_rel_PKM=this.name+"_"+newV;
			old_rel_PKM=old_rel_PKM.substring(0,200);
			new_rel_PKM=new_rel_PKM.substring(0,200);
			fromobject(prj)
			{
				for (var act_dkm in "OpxActivity" where act_dkm.SP_AA_RELATED_PKMS==old_rel_PKM)
				{
					withoutlocking act_dkm.SP_AA_RELATED_PKMS=new_rel_PKM;
				}
			}
		}
	} 
}

slot_PKM_NAME.modifybeforeMethod = Mod_PKM_NAME; 
slot_PKM_DESC.modifybeforeMethod = Mod_PKM_DESC; 

writetolog("Script SP_JS_BEFORE_METHODS_FOR_PKM loaded with version ~a ", revision_number); 

 
//  FILE    : SP_JS_BINDER_EXPORT.ojs
// 
//  AUTHOR  : ksk
// 
//  VERSION : 1.0
// 
//  PURPOSE : #xxx BINDER Extraction 
// 
//  HISTORY :
//  Created  by ksk 13:22 01/07/2016
//  Modified  by cke 19/12/2019 modification of  sp_binder_transpose() ALM 1919
//  Modified  by kbe 16:08 22/05/2018 - INC0851833
//  Modified  by ksk 11:15 29/09/2016 --
//  Modified  by ksk 11:11 28/10/2016 -Change 25Oct--
//  Modified  by ksk 17:30 17/05/2018 - Tempo Transposed POS
//  Modified  by ksk 15:16 24/05/2018 - Tempo Transposed POS string

// Project[SP_NF_B_NV_WITHOUT_RES] BELONGS("BREAKDOWN_2","ALL.NV") and not BELONGS("BREAKDOWN_2","ALL.NV.RES")

// OpxSP_PT_NV_PRIO_INF
// Probability of Success[SP_AA_D_POS_DATE]
// Probability of Success[SP_AA_N_POS_PROB]
// Probability of Success[SP_AA_S_POS_DRIVER]
// Probability of Success[SP_AA_S_POS_GP1]
// Probability of Success[SP_AA_S_POS_GP2]
// SP_NF_B_LAST_POS_PHASE


function sp_binder_last_pos_phase(dummy)
{
  var res = false;
  var last;
  var last1;
  if (! this instanceof OpxSP_PT_NV_PRIO_INF)
  return res;
  
  fromObject(this.project)
  {
    for (var pos in "OpxSP_PT_NV_PRIO_INF" where pos.SP_AA_S_POS_GP1 == "POS by phase"
    && pos.SP_AA_S_POS_GP2 == this.SP_AA_S_POS_GP2 
    order by {{"Inverse","SP_AA_D_POS_DATE"}})
    {
      last = pos;
      break;
    }
	
	for (var pos1 in "OpxSP_PT_NV_PRIO_INF" where pos1.SP_AA_S_POS_GP1 == "Overall POS"
    order by {{"Inverse","SP_AA_D_POS_DATE"}})
    {
      last1 = pos1;
      break;
    }
    
    if (this == last && last.SP_AA_D_POS_DATE == last1.SP_AA_D_POS_DATE)
    {
      res = true;
    }
  }
  return res;
  
}
sp_binder_last_pos_phase.exportfunction({"STRING"},"BOOLEAN","Last POS by Phase?");

function sp_binder_pos_get_phase()
{
  var res = "";
  if (this instanceof OpxSP_PT_NV_PRIO_INF)
  {
    res = this.SP_AA_S_POS_GP2;
    res = res.maskregexp("	");
  }
  // res = res.replaceregexp("	",""); 
  return res;
}
sp_binder_pos_get_phase.exportfunction("","STRING","POS Phase format");

function sp_binder_toString(slot)
{
  var r = "";
  if (this.getslot(slot) instanceof ObjectAttribute)
  {
    r = this.Richtext(slot);
  }
  return HtmlToText(r);
}
sp_binder_toString.exportfunction({"STRING"},"STRING","Binder toString")

function sp_binder_create_milestones()
{
  var plist = new vector();
  var miles;
  if (this instanceof OpxActivity && this.project.STATE=="Active")
  { 
    plist.push("SP_AA_S_BINDER_MILES_PRJ_CODE"); plist.push(this.SP_NF_S_PJT_CODE);
    plist.push("SP_AA_S_BINDER_MILES_TYPE"); plist.push(this.WBS_TYPE.NAME);
    plist.push("SP_AA_D_BINDER_MILES_DATE"); plist.push(this.PF.previous("DAY"));
    plist.push("SP_AA_S_BINDER_MILES_DESC"); plist.push(this.DESC);
	plist.push("SP_AA_S_BINDER_MILES_PRJ_NAME"); plist.push(this.PROJECT.NAME);
    miles = "OpxSP_TT_BINDER_MILESTONES".findclass().Makeopx2objectwithplist(plist);
  }
}

function sp_binder_create_repm_milestones()
{
  // this is a repm milestone
  var now = new Date();
  var minD = new Date(now.getYear(),1,1);
  var maxD = new Date(2030,1,1);
  var curD;
  var miles = new vector();
  var flush = false;

  if (this instanceof OpxActivity)
  {
    fromObject(this)
    {
      for (var ch in OpxActivity where ch.DU == 0 order by {"PF"})
      {
        miles.push(ch);
      }
    }
    
    for (var m in miles where m.callBooleanFormula("WBS_TYPE IN (\"SPREC*\",\"SPHA*\") ")
    || m.callBooleanFormula("PROJECT.SP_NF_B_NV_PREDEV and WBS_TYPE IN (\"MM0\",\"MM1\",\"MM2\") and PROJECT.PM_PRJ_FILTER")
    || flush)
    {
      // alert("M2>>"+m.PF+">>"+m.name+"@"+m.BREAKDOWN_2.name);
      curD = m.PF.previous("DAY");
      if (curD>=minD && curD<=maxD)
      {
        m.sp_binder_create_milestones();
      }
      if (flush == false && m.callBooleanFormula("WBS_TYPE IN (\"SPHA3-I\",\"SPHA3-R\") ") )
      {
        flush = true;
      }
    }
  }
}


function sp_binder_create_dec_milestones()
{
  // this is a dec or repm milestone
  var now = new Date();
  var minD = new Date(now.getYear(),1,1);
  var maxD = new Date(2030,1,1);
  var curD;
  
  if (this instanceof OpxActivity)
  {
    fromObject(this)
    {
      for (var ch in OpxActivity where ch.callBooleanFormula("WBS_TYPE in (\"MM0\",\"MM1\",\"MM2\",\"SPREC*\",\"SPHA*\",\"MFSM*\",\"MLIM*\",\"MIDOBJ*\",\"MTERM\",\"MLAM*\",\"MSELE\",\"MSTAR\") and PROJECT.PM_PRJ_FILTER")
      && ch.DU==0
      // order by {"PF"}
       //&& ch.callBooleanFormula("PROJECT.SP_NF_B_NV_PREDEV and WBS_TYPE IN (\"MM1\",\"MM2\") ")
      )
      {
        // alert("mdecALL>>"+ch.PF+">>"+ch.name+"@"+ch.BREAKDOWN_2.name);
        curD = ch.PF.previous("DAY");
        if (curD>=minD && curD<=maxD)
        {
          ch.sp_binder_create_milestones();
          // alert("MDEC>>"+ch.PF+">>"+ch.desc+"@"+ch.BREAKDOWN_2.name);
        }
      }
    }
  }
}  


function sp_binder_init_milestones()
{
  var repm = "OpxActivityType".findclass().get("REPM");
  var dec = "OpxActivityType".findclass().get("PORT-REP");
  
  for (var t in "OpxSP_TT_BINDER_MILESTONES".findclass())
  {
    t.delete();
  }
  
/* if (repm instanceof OpxActivityType)
  {
    fromObject(repm)
    {
      for (var a in OpxActivity where a.PROJECT.SP_NF_B_NV_WITHOUT_RES)
      {
        // create repm milestones in TT
        a.sp_binder_create_dec_milestones();
		
      }
    }
  }*/
  
  if (dec instanceof OpxActivityType)
  {
    fromObject(dec)
    {
      for (var a in OpxActivity where a.PROJECT.SP_NF_B_NV_WITHOUT_RES)
      {
	  
        // create dec milestones in TT
        a.sp_binder_create_dec_milestones();
      }
    }
  }
}
sp_binder_init_milestones.exportfunction();

function sp_binder_display_date(dateSlot, wbsType)
{
  var res = -1;
  var wt = "OpxActivityType".findclass().get(wbsType);
  
  if ( ! this instanceof Opxproject )
  {
    writeln("sp_binder_display_date ERR not a project!");
    return res;
  }
  
  if (wt instanceof OpxActivityType)
  {
    fromObject(wt)
    {
      for (var a in OpxActivity where a.PROJECT == this)
      {
        res = a.get(dateSlot);
        res = res.previous("DAY");
        // writeln(wbsType+">"+dateSlot+">>"+res);
        break;
      }
    }
  }
  
  return res
}

function sp_binder_display_date_future(dateSlot, wbsType)
{
  var res = sp_binder_display_date(dateSlot, wbsType);
  var dotd = context.callDateFormula("$DATE_OF_THE_DAY");  
  
  return (res instanceof Date && res.getyear() >= dotd.getyear()) ? res : -1;
}
sp_binder_display_date_future.exportfunction({"STRING","STRING"},"DATE");

function sp_binder_display_PKM(p)
{
  // this is a project
  var res = new vector();
  var wt = "OpxActivityType".findclass().get("PORT-REP");
  var pkm;
  var curYear = context.callDateFormula("$DATE_OF_THE_DAY").getyear();
  
  if (wt instanceof OpxActivityType && this instanceof Opxproject)
  {
    fromObject(wt)
    {
      for (var a in OpxActivity where a.PROJECT == this)
      {
        pkm = a;
        break;
      }
    }
    if (pkm instanceof OpxActivity)
    {
      fromObject(pkm)
      {
        for (var a in OpxActivity where a.PROJECT == this 
        && a.SP_NF_B_PKM && a.get("?TASK")
        order by {"NAME"})
        {
          res.push(a.NAME +":"+a.DESC);
        }
      }
    }
    
  }
  else
  {
    writeln("sp_binder_display_PKM ERROR!");
  }
  
  return res.join(context.CallStringFormula("GET_CHAR(10)"))
}

sp_binder_display_PKM.exportfunction({"STRING"},"STRING");

function sp_binder_get_monthly_ref(project,i)
{
  var n=i;
  var ref="";

  if (project instanceof Opxproject)
  {
    fromobject(project)
    {
      for (var Each in Opxreference where (Each.FILE==project && Each.name.length==7 ) 
      order by {{"INVERSE","AD"}})
      {
        if (n==0)
        {
          ref=Each;
          break;
        }
        n=n+1;
      }
    }
  }

  return ref;
}

function sp_binder_monthly_slotName(type,offset)
{
  var refName = "";
  var ref;
  if (type instanceof String && this instanceof Opxproject && offset instanceof Number)
  {
    ref = sp_binder_get_monthly_ref(this, offset);
    if (ref instanceof Opxreference)
    {
      refName = type +"_";
      refName += ref.name;
    }    
  }
  else
  {
    writeln("sp_binder_monthly_slotName>arg ERROR");
  }
  return refName
}

function sp_binder_get_milestones()
{
  var repm = "OpxActivityType".findclass().get("REPM");
  var dec = "OpxActivityType".findclass().get("DEC");
  var wbs;
  var result = new vector();
  
  if (repm instanceof OpxActivityType && this instanceof Opxproject)
  {
    fromObject(repm)
    {
      for (var a in OpxActivity where a.PROJECT == this)
      {
        wbs = a;
        break;
      }
    }
    if (wbs instanceof OpxActivity)
    {
      fromObject(wbs)
      {
        for (var ch in OpxActivity where ch.callBooleanFormula("WBS_TYPE in (\"MM0\",\"MM1\",\"MM2\",\"SPREC*\",\"SPHA*\",\"MFSM*\",\"MLIM*\",\"MIDOBJ*\",\"MTERM\",\"MLAM*\",\"MSELE\",\"MSTAR\") ")
        && ch.DU == 0 )
        {
          result.push(ch);
        }
      }
    }
  }
  
  if (dec instanceof OpxActivityType && this instanceof Opxproject)
  {
    fromObject(dec)
    {
      for (var a in OpxActivity where a.PROJECT == this)
      {
        wbs = a;
        break;
      }
    }
    if (wbs instanceof OpxActivity)
    {
      fromObject(wbs)
      {
        for (var ch in OpxActivity where ch.callBooleanFormula("WBS_TYPE in (\"MM0\",\"MM1\",\"MM2\",\"SPREC*\",\"SPHA*\",\"MFSM*\",\"MLIM*\",\"MIDOBJ*\",\"MTERM\",\"MLAM*\",\"MSELE\",\"MSTAR\") ")
        && ch.DU == 0 )
        {
          result.push(ch);
        }
      }
    }
  }  
  return result;
}   


function sp_binder_next_milestone(m)
{
  var now = new Date();
  var eolm = new Date(now.getYear(),now.getMonth(),1);
  var nextStage;
  var miles;
  
  if (this instanceof Opxproject)
  {
    miles = this.sp_binder_get_milestones();
    
    if (miles instanceof Vector)
    {
      for (var c in miles where c.PF > eolm order by {"PF","DU"})
      {
        nextStage = c;
        break;
      }
    }
  }
  else
  {
    writeln("sp_binder_next_milestone ERROR!");
  }
  return nextStage;
}


function sp_binder_display_slot(wbsType,slot,defValue)
{
  var res = defValue;
  var wt = "OpxActivityType".findclass().get(wbsType);
  var next;
  
  if ( ! this instanceof Opxproject )
  {
    writeln("sp_binder_display_slot ERR not a project!");
    return res;
  }
  
  if (wbsType == "NEXT")
  {
    // retrieve the Next Strategic Milestone
    next = this.sp_binder_next_milestone("");
    if (next instanceof OpxActivity)
    {
      res = next.get(slot);
    }
    else
    {
      writeln("sp_binder_display_slot>Next milestone not found "+this.SPAS_AA_PROJECT_CODE);
    }
  }
  else if (wt instanceof OpxActivityType)
  {
    fromObject(wt)
    {
      for (var a in OpxActivity where a.PROJECT == this)
      {
	  if (! a.AF instanceof Date)
        {
        res = a.get(slot);
        // writeln(wbsType+">"+slot+">>"+res);
        
        } break;}
    }
  }
  else
  {
    writeln("sp_binder_display_slot>wbsType ERROR!");
  }
  return res
}


function sp_binder_prj_print_monthly_date(wbsType,type,offset)
{
  var res = this.sp_binder_display_slot(wbsType,sp_binder_monthly_slotName(type,offset),-1);
  
  return (res instanceof Date) ? res.previous("DAY") : -1;
}
sp_binder_prj_print_monthly_date.exportfunction({"STRING","STRING","NUMBER"},"DATE");

function sp_binder_display_slot_ongoing(wbsType,slot,defValue)
{
  var res = defValue;
  var wt = "OpxActivityType".findclass().get(wbsType);
  
  if ( ! this instanceof Opxproject )
  {
    writeln("sp_binder_display_slot_ongoing ERR not a project!");
    return res;
  }
  
  if (wt instanceof OpxActivityType)
  {
    fromObject(wt)
    {
      for (var a in OpxActivity where a.PROJECT == this)
      {
        if (! a.AF instanceof Date)
        {
          res = a.get(slot);
        }
        break;
      }
    }
  }
  else
  {
    writeln("sp_binder_display_slot_ongoing>wbsType ERROR!");
  }
  return res
}

function sp_binder_prj_print_monthly_date_ongoing(wbsType,type,offset)
{
  var res = this.sp_binder_display_slot_ongoing(wbsType,sp_binder_monthly_slotName(type,offset),-1);
  return (res instanceof Date) ? res.previous("DAY") : -1;
}
sp_binder_prj_print_monthly_date_ongoing.exportfunction({"STRING","STRING","NUMBER"},"DATE");

function sp_binder_prj_print_date_ongoing(wbsType,slot)
{
  var res = this.sp_binder_display_slot_ongoing(wbsType,slot,-1);
  return (res instanceof Date) ? res.previous("DAY") : -1;
}
sp_binder_prj_print_date_ongoing.exportfunction({"STRING","STRING"},"DATE");

function sp_binder_prj_print_string_ongoing(wbsType,slot)
{
  var res = this.sp_binder_display_slot_ongoing(wbsType,slot,"");
  return res;
}
sp_binder_prj_print_string_ongoing.exportfunction({"STRING","STRING"},"STRING");

function sp_binder_prj_print_variance(finalD, initD)
{
  // this is a project
  if ( ! this instanceof Opxproject )
  {
    writeln("sp_binder_prj_print_variance ERR not a project!");
    return "";
  }
  
  var fin = this.get(finalD);
  var ini = this.get(initD);
  var variance;
  
  if (fin instanceof Date && ini instanceof Date)
  {
    variance = (fin.sdate - ini.sdate)/1440/30;
    variance = variance.toString("####");
  }
  return (variance instanceof String) ? variance : "";
}
sp_binder_prj_print_variance.exportfunction({"STRING","STRING"},"STRING");

function sp_binder_prj_print_string(wbsType,slot)
{
  var res = this.sp_binder_display_slot(wbsType,slot,"");
  return res;
}
sp_binder_prj_print_string.exportfunction({"STRING","STRING"},"STRING");

function sp_binder_prj_print_date(wbsType,slot)
{
  var res = this.sp_binder_display_slot(wbsType,slot,-1);
  return (res instanceof Date) ? res.previous("DAY") : -1;
}
sp_binder_prj_print_date.exportfunction({"STRING","STRING"},"DATE");

function sp_binder_prj_print_string_ongoing_ppfp(wbsType,slot)
{
  var res = "";
  var wt = "OpxActivityType".findclass().get(wbsType);
  
  if ( ! this instanceof Opxproject )
  {
    writeln("sp_binder_prj_print_string_ongoing_ppfp ERR not a project!");
    return res;
  }
  
  if (wt instanceof OpxActivityType)
  {
    fromObject(wt)
    {
      for (var a in OpxActivity where a.PROJECT == this
      && a.OBS_ELEMENT.NAME == "R&D - PPFP")
      {
        if (! a.AF instanceof Date)
        {
          res = a.get(slot);
        }
        break;
      }
    }
  }
  else
  {
    writeln("sp_binder_prj_print_string_ongoing_ppfp>wbsType ERROR!");
  }
  return res
}  
sp_binder_prj_print_string_ongoing_ppfp.exportfunction({"STRING","STRING"},"STRING");

function sp_binder_prj_print_monthly_date_prio(wbsTypeList,type,offset)
{
  var wbsType;
  var res;
  for (var wbsType in wbsTypeList.parsevector())
  {
    res = this.sp_binder_display_slot(wbsType,sp_binder_monthly_slotName(type,offset),-1);
    if (res instanceof Date)
    {
      break;
    }
  }
  return (res instanceof Date) ? res.previous("DAY") : -1;
}
sp_binder_prj_print_monthly_date_prio.exportfunction({"STRING","STRING","NUMBER"},"DATE");

function sp_binder_prj_print_date_prio(wbsTypeList,slot)
{
  var wbsType;
  var res;
  for (var wbsType in wbsTypeList.parsevector())
  {
    res = this.sp_binder_display_slot(wbsType,slot,-1);
    if (res instanceof Date)
    {
      break;
    }
  }
  return (res instanceof Date) ? res.previous("DAY") : -1;
}
sp_binder_prj_print_date_prio.exportfunction({"STRING","STRING"},"DATE");

function SP_LAST_POS_PER_PHASE(dummy)
{
	var result = false;
	alert(this);
	if ((this instanceof OpxSP_PT_NV_PRIO_INF) && (this.SP_AA_D_POS_DATE instanceof DATE))  
	{
		
		fromobject(this.FILE)
		{
			for (var p in "OpxSP_PT_NV_PRIO_INF" where p.SP_AA_S_POS_PRJ_STAGE == this.SP_AA_S_POS_PRJ_STAGE order by {{"inverse", "SP_AA_D_POS_DATE"}} ) 
				{
					if(p==this) 
					{
						result=true;			
					}
					break;
				}
		}
	}
		return result;
	}
SP_LAST_POS_PER_PHASE.exportfunction({"STRING"},"BOOLEAN","SP_LAST_POS_PER_PHASE")

function sp_binder_last_pos(dummy)
{
  // this is a POS
  var res = false;
  var last;
  if (! this instanceof OpxSP_PT_NV_PRIO_INF)
  return res;
  
  fromObject(this.project)
  {
    for (var pos in "OpxSP_PT_NV_PRIO_INF" order by {{"Inverse","SP_AA_D_POS_DATE"}} )
    {
      last = pos;
      break;
    }
    
    if (this == last)
    {
      res = true;
    }
  }
  return res;  
}
sp_binder_last_pos.exportfunction({"STRING"},"BOOLEAN","Last POS?");

function sp_binder_init_transposed()
{
  
  for (var t in "OpxSP_TT_BINDER_TRANSPOSED".findclass())
  {
    t.delete();
  }
  
  for (var pos in "OpxSP_PT_NV_PRIO_INF" where pos.SP_NF_B_BINDER_TRANSPOSED)
  {
    // alert(pos.SP_NF_PROJECT_NAME);
    // alert(pos.ID);
    pos.sp_binder_transpose();
  }
}
sp_binder_init_transposed.exportfunction();

function sp_binder_create_transpos(phase,pos)
{
  var plist = new vector();
  var tranpos;
  if (this instanceof OpxSP_PT_NV_PRIO_INF )
  { 
    plist.push("SP_AA_S_BT_PROJECT_CODE"); plist.push(this.SP_NF_S_PROJECT_CODE);
    plist.push("SP_AA_S_BT_PROJECT_NAME"); plist.push(this.SP_NF_PROJECT_NAME);
    plist.push("SP_AA_S_BT_PHASE"); plist.push(phase);
    // plist.push("SP_AA_N_BT_POS"); plist.push(math.round(pos));
    plist.push("SP_AA_S_BT_POS"); plist.push(pos.toString("####"));
    
    tranpos = "OpxSP_TT_BINDER_TRANSPOSED".findclass().Makeopx2objectwithplist(plist);
  }
}

function sp_binder_transpose()
{
  // this is a POS
  var col = new vector("SP_AA_N_PRE_CLIN_POS","SP_AA_N_PHASE1_POS","SP_AA_N_PHASE2_POS","SP_AA_N_PHASE3_POS","SP_AA_N_REGISTRATION_POS");
  var label = new vector("SP_AA_N_PRE_CLIN_POS","Preclinical"
  ,"SP_AA_N_PHASE1_POS","I, N/A"
  ,"SP_AA_N_PHASE2_POS","IIa,IIb,I/II,II,II/III"
  ,"SP_AA_N_PHASE3_POS","III,IIIb"
  ,"SP_AA_N_REGISTRATION_POS","Registration");
  
  for (var slot in col)
  {
    if (this.get(slot) instanceof Number && this.get(slot) > 0)
    {
      this.sp_binder_create_transpos(label.get(slot),this.get(slot));
    }
      
  }
}

//  FILE    : SP_JS_BINDER_EXPORT.ojs
// 
//  AUTHOR  : ksk
// 
//  VERSION : 1.0
// 
//  PURPOSE : #xxx BINDER Extraction 
// 
//  HISTORY :
//  Created  by ksk 13:22 01/07/2016
//  Modified  by cke 19/12/2019 modification of  sp_binder_transpose() ALM 1919
//  Modified  by kbe 16:08 22/05/2018 - INC0851833
//  Modified  by ksk 11:15 29/09/2016 --
//  Modified  by ksk 11:11 28/10/2016 -Change 25Oct--
//  Modified  by ksk 17:30 17/05/2018 - Tempo Transposed POS
//  Modified  by ksk 15:16 24/05/2018 - Tempo Transposed POS string

// Project[SP_NF_B_NV_WITHOUT_RES] BELONGS("BREAKDOWN_2","ALL.NV") and not BELONGS("BREAKDOWN_2","ALL.NV.RES")

// OpxSP_PT_NV_PRIO_INF
// Probability of Success[SP_AA_D_POS_DATE]
// Probability of Success[SP_AA_N_POS_PROB]
// Probability of Success[SP_AA_S_POS_DRIVER]
// Probability of Success[SP_AA_S_POS_GP1]
// Probability of Success[SP_AA_S_POS_GP2]
// SP_NF_B_LAST_POS_PHASE


function sp_binder_last_pos_phase(dummy)
{
  var res = false;
  var last;
  var last1;
  if (! this instanceof OpxSP_PT_NV_PRIO_INF)
  return res;
  
  fromObject(this.project)
  {
    for (var pos in "OpxSP_PT_NV_PRIO_INF" where pos.SP_AA_S_POS_GP1 == "POS by phase"
    && pos.SP_AA_S_POS_GP2 == this.SP_AA_S_POS_GP2 
    order by {{"Inverse","SP_AA_D_POS_DATE"}})
    {
      last = pos;
      break;
    }
	
	for (var pos1 in "OpxSP_PT_NV_PRIO_INF" where pos1.SP_AA_S_POS_GP1 == "Overall POS"
    order by {{"Inverse","SP_AA_D_POS_DATE"}})
    {
      last1 = pos1;
      break;
    }
    
    if (this == last && last.SP_AA_D_POS_DATE == last1.SP_AA_D_POS_DATE)
    {
      res = true;
    }
  }
  return res;
  
}
sp_binder_last_pos_phase.exportfunction({"STRING"},"BOOLEAN","Last POS by Phase?");

function sp_binder_pos_get_phase()
{
  var res = "";
  if (this instanceof OpxSP_PT_NV_PRIO_INF)
  {
    res = this.SP_AA_S_POS_GP2;
    res = res.maskregexp("	");
  }
  // res = res.replaceregexp("	",""); 
  return res;
}
sp_binder_pos_get_phase.exportfunction("","STRING","POS Phase format");

function sp_binder_toString(slot)
{
  var r = "";
  if (this.getslot(slot) instanceof ObjectAttribute)
  {
    r = this.Richtext(slot);
  }
  return HtmlToText(r);
}
sp_binder_toString.exportfunction({"STRING"},"STRING","Binder toString")

function sp_binder_create_milestones()
{
  var plist = new vector();
  var miles;
  if (this instanceof OpxActivity && this.project.STATE=="Active")
  { 
    plist.push("SP_AA_S_BINDER_MILES_PRJ_CODE"); plist.push(this.SP_NF_S_PJT_CODE);
    plist.push("SP_AA_S_BINDER_MILES_TYPE"); plist.push(this.WBS_TYPE.NAME);
    plist.push("SP_AA_D_BINDER_MILES_DATE"); plist.push(this.PF.previous("DAY"));
    plist.push("SP_AA_S_BINDER_MILES_DESC"); plist.push(this.DESC);
	plist.push("SP_AA_S_BINDER_MILES_PRJ_NAME"); plist.push(this.PROJECT.NAME);
    miles = "OpxSP_TT_BINDER_MILESTONES".findclass().Makeopx2objectwithplist(plist);
  }
}

function sp_binder_create_repm_milestones()
{
  // this is a repm milestone
  var now = new Date();
  var minD = new Date(now.getYear(),1,1);
  var maxD = new Date(2030,1,1);
  var curD;
  var miles = new vector();
  var flush = false;

  if (this instanceof OpxActivity)
  {
    fromObject(this)
    {
      for (var ch in OpxActivity where ch.DU == 0 order by {"PF"})
      {
        miles.push(ch);
      }
    }
    
    for (var m in miles where m.callBooleanFormula("WBS_TYPE IN (\"SPREC*\",\"SPHA*\") ")
    || m.callBooleanFormula("PROJECT.SP_NF_B_NV_PREDEV and WBS_TYPE IN (\"MM0\",\"MM1\",\"MM2\") and PROJECT.PM_PRJ_FILTER")
    || flush)
    {
      // alert("M2>>"+m.PF+">>"+m.name+"@"+m.BREAKDOWN_2.name);
      curD = m.PF.previous("DAY");
      if (curD>=minD && curD<=maxD)
      {
        m.sp_binder_create_milestones();
      }
      if (flush == false && m.callBooleanFormula("WBS_TYPE IN (\"SPHA3-I\",\"SPHA3-R\") ") )
      {
        flush = true;
      }
    }
  }
}


function sp_binder_create_dec_milestones()
{
  // this is a dec or repm milestone
  var now = new Date();
  var minD = new Date(now.getYear(),1,1);
  var maxD = new Date(2030,1,1);
  var curD;
  
  if (this instanceof OpxActivity)
  {
    fromObject(this)
    {
      for (var ch in OpxActivity where ch.callBooleanFormula("WBS_TYPE in (\"MM0\",\"MM1\",\"MM2\",\"SPREC*\",\"SPHA*\",\"MFSM*\",\"MLIM*\",\"MIDOBJ*\",\"MTERM\",\"MLAM*\",\"MSELE\",\"MSTAR\") and PROJECT.PM_PRJ_FILTER")
      && ch.DU==0
      // order by {"PF"}
       //&& ch.callBooleanFormula("PROJECT.SP_NF_B_NV_PREDEV and WBS_TYPE IN (\"MM1\",\"MM2\") ")
      )
      {
        // alert("mdecALL>>"+ch.PF+">>"+ch.name+"@"+ch.BREAKDOWN_2.name);
        curD = ch.PF.previous("DAY");
        if (curD>=minD && curD<=maxD)
        {
          ch.sp_binder_create_milestones();
          // alert("MDEC>>"+ch.PF+">>"+ch.desc+"@"+ch.BREAKDOWN_2.name);
        }
      }
    }
  }
}  


function sp_binder_init_milestones()
{
  var repm = "OpxActivityType".findclass().get("REPM");
  var dec = "OpxActivityType".findclass().get("PORT-REP");
  
  for (var t in "OpxSP_TT_BINDER_MILESTONES".findclass())
  {
    t.delete();
  }
  
/* if (repm instanceof OpxActivityType)
  {
    fromObject(repm)
    {
      for (var a in OpxActivity where a.PROJECT.SP_NF_B_NV_WITHOUT_RES)
      {
        // create repm milestones in TT
        a.sp_binder_create_dec_milestones();
		
      }
    }
  }*/
  
  if (dec instanceof OpxActivityType)
  {
    fromObject(dec)
    {
      for (var a in OpxActivity where a.PROJECT.SP_NF_B_NV_WITHOUT_RES)
      {
	  
        // create dec milestones in TT
        a.sp_binder_create_dec_milestones();
      }
    }
  }
}
sp_binder_init_milestones.exportfunction();

function sp_binder_display_date(dateSlot, wbsType)
{
  var res = -1;
  var wt = "OpxActivityType".findclass().get(wbsType);
  
  if ( ! this instanceof Opxproject )
  {
    writeln("sp_binder_display_date ERR not a project!");
    return res;
  }
  
  if (wt instanceof OpxActivityType)
  {
    fromObject(wt)
    {
      for (var a in OpxActivity where a.PROJECT == this)
      {
        res = a.get(dateSlot);
        res = res.previous("DAY");
        // writeln(wbsType+">"+dateSlot+">>"+res);
        break;
      }
    }
  }
  
  return res
}

function sp_binder_display_date_future(dateSlot, wbsType)
{
  var res = sp_binder_display_date(dateSlot, wbsType);
  var dotd = context.callDateFormula("$DATE_OF_THE_DAY");  
  
  return (res instanceof Date && res.getyear() >= dotd.getyear()) ? res : -1;
}
sp_binder_display_date_future.exportfunction({"STRING","STRING"},"DATE");

function sp_binder_display_PKM(p)
{
  // this is a project
  var res = new vector();
  var wt = "OpxActivityType".findclass().get("PORT-REP");
  var pkm;
  var curYear = context.callDateFormula("$DATE_OF_THE_DAY").getyear();
  
  if (wt instanceof OpxActivityType && this instanceof Opxproject)
  {
    fromObject(wt)
    {
      for (var a in OpxActivity where a.PROJECT == this)
      {
        pkm = a;
        break;
      }
    }
    if (pkm instanceof OpxActivity)
    {
      fromObject(pkm)
      {
        for (var a in OpxActivity where a.PROJECT == this 
        && a.SP_NF_B_PKM && a.get("?TASK")
        order by {"NAME"})
        {
          res.push(a.NAME +":"+a.DESC);
        }
      }
    }
    
  }
  else
  {
    writeln("sp_binder_display_PKM ERROR!");
  }
  
  return res.join(context.CallStringFormula("GET_CHAR(10)"))
}

sp_binder_display_PKM.exportfunction({"STRING"},"STRING");

function sp_binder_get_monthly_ref(project,i)
{
  var n=i;
  var ref="";

  if (project instanceof Opxproject)
  {
    fromobject(project)
    {
      for (var Each in Opxreference where (Each.FILE==project && Each.name.length==7 ) 
      order by {{"INVERSE","AD"}})
      {
        if (n==0)
        {
          ref=Each;
          break;
        }
        n=n+1;
      }
    }
  }

  return ref;
}

function sp_binder_monthly_slotName(type,offset)
{
  var refName = "";
  var ref;
  if (type instanceof String && this instanceof Opxproject && offset instanceof Number)
  {
    ref = sp_binder_get_monthly_ref(this, offset);
    if (ref instanceof Opxreference)
    {
      refName = type +"_";
      refName += ref.name;
    }    
  }
  else
  {
    writeln("sp_binder_monthly_slotName>arg ERROR");
  }
  return refName
}

function sp_binder_get_milestones()
{
  var repm = "OpxActivityType".findclass().get("REPM");
  var dec = "OpxActivityType".findclass().get("DEC");
  var wbs;
  var result = new vector();
  
  if (repm instanceof OpxActivityType && this instanceof Opxproject)
  {
    fromObject(repm)
    {
      for (var a in OpxActivity where a.PROJECT == this)
      {
        wbs = a;
        break;
      }
    }
    if (wbs instanceof OpxActivity)
    {
      fromObject(wbs)
      {
        for (var ch in OpxActivity where ch.callBooleanFormula("WBS_TYPE in (\"MM0\",\"MM1\",\"MM2\",\"SPREC*\",\"SPHA*\",\"MFSM*\",\"MLIM*\",\"MIDOBJ*\",\"MTERM\",\"MLAM*\",\"MSELE\",\"MSTAR\") ")
        && ch.DU == 0 )
        {
          result.push(ch);
        }
      }
    }
  }
  
  if (dec instanceof OpxActivityType && this instanceof Opxproject)
  {
    fromObject(dec)
    {
      for (var a in OpxActivity where a.PROJECT == this)
      {
        wbs = a;
        break;
      }
    }
    if (wbs instanceof OpxActivity)
    {
      fromObject(wbs)
      {
        for (var ch in OpxActivity where ch.callBooleanFormula("WBS_TYPE in (\"MM0\",\"MM1\",\"MM2\",\"SPREC*\",\"SPHA*\",\"MFSM*\",\"MLIM*\",\"MIDOBJ*\",\"MTERM\",\"MLAM*\",\"MSELE\",\"MSTAR\") ")
        && ch.DU == 0 )
        {
          result.push(ch);
        }
      }
    }
  }  
  return result;
}   


function sp_binder_next_milestone(m)
{
  var now = new Date();
  var eolm = new Date(now.getYear(),now.getMonth(),1);
  var nextStage;
  var miles;
  
  if (this instanceof Opxproject)
  {
    miles = this.sp_binder_get_milestones();
    
    if (miles instanceof Vector)
    {
      for (var c in miles where c.PF > eolm order by {"PF","DU"})
      {
        nextStage = c;
        break;
      }
    }
  }
  else
  {
    writeln("sp_binder_next_milestone ERROR!");
  }
  return nextStage;
}


function sp_binder_display_slot(wbsType,slot,defValue)
{
  var res = defValue;
  var wt = "OpxActivityType".findclass().get(wbsType);
  var next;
  
  if ( ! this instanceof Opxproject )
  {
    writeln("sp_binder_display_slot ERR not a project!");
    return res;
  }
  
  if (wbsType == "NEXT")
  {
    // retrieve the Next Strategic Milestone
    next = this.sp_binder_next_milestone("");
    if (next instanceof OpxActivity)
    {
      res = next.get(slot);
    }
    else
    {
      writeln("sp_binder_display_slot>Next milestone not found "+this.SPAS_AA_PROJECT_CODE);
    }
  }
  else if (wt instanceof OpxActivityType)
  {
    fromObject(wt)
    {
      for (var a in OpxActivity where a.PROJECT == this)
      {
	  if (! a.AF instanceof Date)
        {
        res = a.get(slot);
        // writeln(wbsType+">"+slot+">>"+res);
        
        } break;}
    }
  }
  else
  {
    writeln("sp_binder_display_slot>wbsType ERROR!");
  }
  return res
}


function sp_binder_prj_print_monthly_date(wbsType,type,offset)
{
  var res = this.sp_binder_display_slot(wbsType,sp_binder_monthly_slotName(type,offset),-1);
  
  return (res instanceof Date) ? res.previous("DAY") : -1;
}
sp_binder_prj_print_monthly_date.exportfunction({"STRING","STRING","NUMBER"},"DATE");

function sp_binder_display_slot_ongoing(wbsType,slot,defValue)
{
  var res = defValue;
  var wt = "OpxActivityType".findclass().get(wbsType);
  
  if ( ! this instanceof Opxproject )
  {
    writeln("sp_binder_display_slot_ongoing ERR not a project!");
    return res;
  }
  
  if (wt instanceof OpxActivityType)
  {
    fromObject(wt)
    {
      for (var a in OpxActivity where a.PROJECT == this)
      {
        if (! a.AF instanceof Date)
        {
          res = a.get(slot);
        }
        break;
      }
    }
  }
  else
  {
    writeln("sp_binder_display_slot_ongoing>wbsType ERROR!");
  }
  return res
}

function sp_binder_prj_print_monthly_date_ongoing(wbsType,type,offset)
{
  var res = this.sp_binder_display_slot_ongoing(wbsType,sp_binder_monthly_slotName(type,offset),-1);
  return (res instanceof Date) ? res.previous("DAY") : -1;
}
sp_binder_prj_print_monthly_date_ongoing.exportfunction({"STRING","STRING","NUMBER"},"DATE");

function sp_binder_prj_print_date_ongoing(wbsType,slot)
{
  var res = this.sp_binder_display_slot_ongoing(wbsType,slot,-1);
  return (res instanceof Date) ? res.previous("DAY") : -1;
}
sp_binder_prj_print_date_ongoing.exportfunction({"STRING","STRING"},"DATE");

function sp_binder_prj_print_string_ongoing(wbsType,slot)
{
  var res = this.sp_binder_display_slot_ongoing(wbsType,slot,"");
  return res;
}
sp_binder_prj_print_string_ongoing.exportfunction({"STRING","STRING"},"STRING");

function sp_binder_prj_print_variance(finalD, initD)
{
  // this is a project
  if ( ! this instanceof Opxproject )
  {
    writeln("sp_binder_prj_print_variance ERR not a project!");
    return "";
  }
  
  var fin = this.get(finalD);
  var ini = this.get(initD);
  var variance;
  
  if (fin instanceof Date && ini instanceof Date)
  {
    variance = (fin.sdate - ini.sdate)/1440/30;
    variance = variance.toString("####");
  }
  return (variance instanceof String) ? variance : "";
}
sp_binder_prj_print_variance.exportfunction({"STRING","STRING"},"STRING");

function sp_binder_prj_print_string(wbsType,slot)
{
  var res = this.sp_binder_display_slot(wbsType,slot,"");
  return res;
}
sp_binder_prj_print_string.exportfunction({"STRING","STRING"},"STRING");

function sp_binder_prj_print_date(wbsType,slot)
{
  var res = this.sp_binder_display_slot(wbsType,slot,-1);
  return (res instanceof Date) ? res.previous("DAY") : -1;
}
sp_binder_prj_print_date.exportfunction({"STRING","STRING"},"DATE");

function sp_binder_prj_print_string_ongoing_ppfp(wbsType,slot)
{
  var res = "";
  var wt = "OpxActivityType".findclass().get(wbsType);
  
  if ( ! this instanceof Opxproject )
  {
    writeln("sp_binder_prj_print_string_ongoing_ppfp ERR not a project!");
    return res;
  }
  
  if (wt instanceof OpxActivityType)
  {
    fromObject(wt)
    {
      for (var a in OpxActivity where a.PROJECT == this
      && a.OBS_ELEMENT.NAME == "R&D - PPFP")
      {
        if (! a.AF instanceof Date)
        {
          res = a.get(slot);
        }
        break;
      }
    }
  }
  else
  {
    writeln("sp_binder_prj_print_string_ongoing_ppfp>wbsType ERROR!");
  }
  return res
}  
sp_binder_prj_print_string_ongoing_ppfp.exportfunction({"STRING","STRING"},"STRING");

function sp_binder_prj_print_monthly_date_prio(wbsTypeList,type,offset)
{
  var wbsType;
  var res;
  for (var wbsType in wbsTypeList.parsevector())
  {
    res = this.sp_binder_display_slot(wbsType,sp_binder_monthly_slotName(type,offset),-1);
    if (res instanceof Date)
    {
      break;
    }
  }
  return (res instanceof Date) ? res.previous("DAY") : -1;
}
sp_binder_prj_print_monthly_date_prio.exportfunction({"STRING","STRING","NUMBER"},"DATE");

function sp_binder_prj_print_date_prio(wbsTypeList,slot)
{
  var wbsType;
  var res;
  for (var wbsType in wbsTypeList.parsevector())
  {
    res = this.sp_binder_display_slot(wbsType,slot,-1);
    if (res instanceof Date)
    {
      break;
    }
  }
  return (res instanceof Date) ? res.previous("DAY") : -1;
}
sp_binder_prj_print_date_prio.exportfunction({"STRING","STRING"},"DATE");

function SP_LAST_POS_PER_PHASE(dummy)
{
	var result = false;
	alert(this);
	if ((this instanceof OpxSP_PT_NV_PRIO_INF) && (this.SP_AA_D_POS_DATE instanceof DATE))  
	{
		
		fromobject(this.FILE)
		{
			for (var p in "OpxSP_PT_NV_PRIO_INF" where p.SP_AA_S_POS_PRJ_STAGE == this.SP_AA_S_POS_PRJ_STAGE order by {{"inverse", "SP_AA_D_POS_DATE"}} ) 
				{
					if(p==this) 
					{
						result=true;			
					}
					break;
				}
		}
	}
		return result;
	}
SP_LAST_POS_PER_PHASE.exportfunction({"STRING"},"BOOLEAN","SP_LAST_POS_PER_PHASE")

function sp_binder_last_pos(dummy)
{
  // this is a POS
  var res = false;
  var last;
  if (! this instanceof OpxSP_PT_NV_PRIO_INF)
  return res;
  
  fromObject(this.project)
  {
    for (var pos in "OpxSP_PT_NV_PRIO_INF" order by {{"Inverse","SP_AA_D_POS_DATE"}} )
    {
      last = pos;
      break;
    }
    
    if (this == last)
    {
      res = true;
    }
  }
  return res;  
}
sp_binder_last_pos.exportfunction({"STRING"},"BOOLEAN","Last POS?");

function sp_binder_init_transposed()
{
  
  for (var t in "OpxSP_TT_BINDER_TRANSPOSED".findclass())
  {
    t.delete();
  }
  
  for (var pos in "OpxSP_PT_NV_PRIO_INF" where pos.SP_NF_B_BINDER_TRANSPOSED)
  {
    // alert(pos.SP_NF_PROJECT_NAME);
    // alert(pos.ID);
    pos.sp_binder_transpose();
  }
}
sp_binder_init_transposed.exportfunction();

function sp_binder_create_transpos(phase,pos)
{
  var plist = new vector();
  var tranpos;
  if (this instanceof OpxSP_PT_NV_PRIO_INF )
  { 
    plist.push("SP_AA_S_BT_PROJECT_CODE"); plist.push(this.SP_NF_S_PROJECT_CODE);
    plist.push("SP_AA_S_BT_PROJECT_NAME"); plist.push(this.SP_NF_PROJECT_NAME);
    plist.push("SP_AA_S_BT_PHASE"); plist.push(phase);
    // plist.push("SP_AA_N_BT_POS"); plist.push(math.round(pos));
    plist.push("SP_AA_S_BT_POS"); plist.push(pos.toString("####"));
    
    tranpos = "OpxSP_TT_BINDER_TRANSPOSED".findclass().Makeopx2objectwithplist(plist);
  }
}

function sp_binder_transpose()
{
  // this is a POS
  var col = new vector("SP_AA_N_PRE_CLIN_POS","SP_AA_N_PHASE1_POS","SP_AA_N_PHASE2_POS","SP_AA_N_PHASE3_POS","SP_AA_N_REGISTRATION_POS");
  var label = new vector("SP_AA_N_PRE_CLIN_POS","Preclinical"
  ,"SP_AA_N_PHASE1_POS","I, N/A"
  ,"SP_AA_N_PHASE2_POS","IIa,IIb,I/II,II,II/III"
  ,"SP_AA_N_PHASE3_POS","III,IIIb"
  ,"SP_AA_N_REGISTRATION_POS","Registration");
  
  for (var slot in col)
  {
    if (this.get(slot) instanceof Number && this.get(slot) > 0)
    {
      this.sp_binder_create_transpos(label.get(slot),this.get(slot));
    }
      
  }
}

 
// Functions used for BRD Metrics
// ORE 29-MAR-11 : Script creation (based on the PV Script)
//YSA 12-MAR-14: Deactivate WithProcessLock incident linked to the SP3 migration

// MPA:
//  get this global var from sp_ojs_clin_res_functions.ojs (P5) which has not been imported into Compass P5 right now
//  -> can be moved elsewhere if needed

global var Eq_currently_launched = false;

//
// sp_brd_launch_equations()
//
function sp_brd_launch_equations()
{
	// une  quation est-elle en cours d'ex cution ?
	if (Eq_currently_launched) {
		alert("Please wait a moment before launching the metrics (metrics have already been launched by another user)");
		return;
	}

	//WithProcessLock("equation")
	//{
	Eq_currently_launched = true;

	//check if the selection does not contain activities from different levels of the WBS
	var nb_act = 0;
	var vcount = 0;
	var act_selection = "";
	var vSelectionAtom = new symbol("SELECTION-ATOM","TOOL-BAR");


	for(var each in vSelectionAtom where each instanceof OpxActivity order by {"MSP_ID"}) {
		vcount = vcount + 1;
		var act_ind = each.index;
		if (each.CallBooleanFormula("FROM(\"" + act_selection + "\")"))
			nb_act = nb_act + 1;

		if (act_selection.length>0)
			act_selection = "," + act_ind;
		else
			act_selection = act_ind;
	}

	if (vcount == 0) {
		alert("Please select the line and not a cell.");
		Eq_currently_launched = false;
		return;
	}

	for (var each in vSelectionAtom)
	{
		if (each.project.SP_AA_B_LAUNCH_BRD_METRIC==false) {
			alert("Project is not allowed for BRD metrics");
			Eq_currently_launched = false;
			return;
		}

		//if activities that are parent from each others have been selected, we do not launch the equations and give a warning
		if (nb_act > 0) {
			alert("Please select only one activity ! (you can select several activities only if they are at the same level)");
			Eq_currently_launched = false;
			return;
		}

		//----------------------
		// LAUNCH THE EQUATIONS
		//----------------------
		CallToolOnSelection("ENVTOOL_SP_BRD_TO_APPLY_EQUATION");
		
		// remove planned hours linked to selected activities
		for (var each in vSelectionAtom) {
			var act = each;
			fromobject(act)
				for (var ph in "OpxPlannedHours" where ph.SP_AA_CL_TO_REMOVE)
					ph.CallMacro("REMOVE");

		}
		alert("Metrics have been launched successfully");
		Eq_currently_launched = false;
	}
	//}
}
withoutlocking {
	sp_brd_launch_equations.exportfunction();
}


//
// sp_brd_apply_equation() : launch by the tool : SP_BRD_TO_APPLY_EQUATION
//  (see function sp_brd_launch_equations() above)
//
function sp_brd_apply_equation()
{
	var act = this;
	if (act !=undefined && act Instanceof OpxActivity)
		return;

	fromobject(act)
		for (var subact in OpxActivity where (subact.CallBooleanFormula("BELONGS(\"OBS_ELEMENT\",\"R&D - BRD\")") ))
		{
			fromobject(subact) {
				for (var ph in "OpxPlannedHours" where (ph.CallBooleanFormula("BELONGS(\"COST_ACCOUNT\",\"FTE_METRICS\")") && (ph.ACTIVITY.CallBooleanFormula("BELONGS(\"OBS_ELEMENT\",\"R&D - BRD\")") )))
					withoutlocking {
						ph.delete();
					}
				for (var ph_reest in "OpxPlannedHours" where ph_reest.CallBooleanFormula("BELONGS(\"COST_ACCOUNT\",\"FTE_ESTIMATED\")"))
					withoutlocking {
						ph_reest.SP_AA_CL_TO_REMOVE=true;
					}
			}
			subact.apply_equation();
		}
}
withoutlocking {
	sp_brd_apply_equation.exportfunction();
}

// Functions used for BRD Metrics
// ORE 29-MAR-11 : Script creation (based on the PV Script)
//YSA 12-MAR-14: Deactivate WithProcessLock incident linked to the SP3 migration

// MPA:
//  get this global var from sp_ojs_clin_res_functions.ojs (P5) which has not been imported into Compass P5 right now
//  -> can be moved elsewhere if needed

global var Eq_currently_launched = false;

//
// sp_brd_launch_equations()
//
function sp_brd_launch_equations()
{
	// une  quation est-elle en cours d'ex cution ?
	if (Eq_currently_launched) {
		alert("Please wait a moment before launching the metrics (metrics have already been launched by another user)");
		return;
	}

	//WithProcessLock("equation")
	//{
	Eq_currently_launched = true;

	//check if the selection does not contain activities from different levels of the WBS
	var nb_act = 0;
	var vcount = 0;
	var act_selection = "";
	var vSelectionAtom = new symbol("SELECTION-ATOM","TOOL-BAR");


	for(var each in vSelectionAtom where each instanceof OpxActivity order by {"MSP_ID"}) {
		vcount = vcount + 1;
		var act_ind = each.index;
		if (each.CallBooleanFormula("FROM(\"" + act_selection + "\")"))
			nb_act = nb_act + 1;

		if (act_selection.length>0)
			act_selection = "," + act_ind;
		else
			act_selection = act_ind;
	}

	if (vcount == 0) {
		alert("Please select the line and not a cell.");
		Eq_currently_launched = false;
		return;
	}

	for (var each in vSelectionAtom)
	{
		if (each.project.SP_AA_B_LAUNCH_BRD_METRIC==false) {
			alert("Project is not allowed for BRD metrics");
			Eq_currently_launched = false;
			return;
		}

		//if activities that are parent from each others have been selected, we do not launch the equations and give a warning
		if (nb_act > 0) {
			alert("Please select only one activity ! (you can select several activities only if they are at the same level)");
			Eq_currently_launched = false;
			return;
		}

		//----------------------
		// LAUNCH THE EQUATIONS
		//----------------------
		CallToolOnSelection("ENVTOOL_SP_BRD_TO_APPLY_EQUATION");
		
		// remove planned hours linked to selected activities
		for (var each in vSelectionAtom) {
			var act = each;
			fromobject(act)
				for (var ph in "OpxPlannedHours" where ph.SP_AA_CL_TO_REMOVE)
					ph.CallMacro("REMOVE");

		}
		alert("Metrics have been launched successfully");
		Eq_currently_launched = false;
	}
	//}
}
withoutlocking {
	sp_brd_launch_equations.exportfunction();
}


//
// sp_brd_apply_equation() : launch by the tool : SP_BRD_TO_APPLY_EQUATION
//  (see function sp_brd_launch_equations() above)
//
function sp_brd_apply_equation()
{
	var act = this;
	if (act !=undefined && act Instanceof OpxActivity)
		return;

	fromobject(act)
		for (var subact in OpxActivity where (subact.CallBooleanFormula("BELONGS(\"OBS_ELEMENT\",\"R&D - BRD\")") ))
		{
			fromobject(subact) {
				for (var ph in "OpxPlannedHours" where (ph.CallBooleanFormula("BELONGS(\"COST_ACCOUNT\",\"FTE_METRICS\")") && (ph.ACTIVITY.CallBooleanFormula("BELONGS(\"OBS_ELEMENT\",\"R&D - BRD\")") )))
					withoutlocking {
						ph.delete();
					}
				for (var ph_reest in "OpxPlannedHours" where ph_reest.CallBooleanFormula("BELONGS(\"COST_ACCOUNT\",\"FTE_ESTIMATED\")"))
					withoutlocking {
						ph_reest.SP_AA_CL_TO_REMOVE=true;
					}
			}
			subact.apply_equation();
		}
}
withoutlocking {
	sp_brd_apply_equation.exportfunction();
}

 
//  FILE    : SP_JS_BRD_PLATFORM.ojs
//
//  AUTHOR  : ksk
//
//  VERSION : 2.0
//
//  PURPOSE : BRD platform module
//
//  DEPENDENCY : none
//
//  HISTORY :
// Created  by ksk 17:08 31/08/2017
// Modified by flc 10:09 11/07/2017 moved 'sp_brd_init_platform' function to sp_js_dr_v6.ojs

// BRD platform activity type ring attribute [FR 4.1.20 from CH56]

var BRD_platform_Activity_type = "OpxSP_PT_BRD_PLATFORM".defineRingAttribute("SP_RING_BRD_PLATFORM_WBS_TYPE","Activity Types","r.SP_RA_BRD_PLATFORM_OBJ.SP_PT_BRD_NN_PLATFORM","SP_RA_BRD_PLATFORM_VAL","SP_RA_BRD_PLATFORM_OBJ");
BRD_platform_Activity_type.length = 16000;
BRD_platform_Activity_type.category = "Ring attribute";

function sp_BRD_read_platform(dummy)
{
	// this must be an activity
	var res = "Other";
	var nn;

	if (this instanceof OpxActivity)
	{
		nn = this.wbs_type.get("r.SP_RA_BRD_PLATFORM_VAL.SP_PT_BRD_NN_PLATFORM");
		for (var c in nn where c instanceof OpxSP_PT_BRD_NN_PLATFORM)
		{
			res = c.SP_RA_BRD_PLATFORM_OBJ.get("NAME");
		}
	}
	return res;
}
sp_BRD_read_platform.exportfunction({"STRING"},"STRING","Read the BRD platform");

//  FILE    : SP_JS_BRD_PLATFORM.ojs
//
//  AUTHOR  : ksk
//
//  VERSION : 2.0
//
//  PURPOSE : BRD platform module
//
//  DEPENDENCY : none
//
//  HISTORY :
// Created  by ksk 17:08 31/08/2017
// Modified by flc 10:09 11/07/2017 moved 'sp_brd_init_platform' function to sp_js_dr_v6.ojs

// BRD platform activity type ring attribute [FR 4.1.20 from CH56]

var BRD_platform_Activity_type = "OpxSP_PT_BRD_PLATFORM".defineRingAttribute("SP_RING_BRD_PLATFORM_WBS_TYPE","Activity Types","r.SP_RA_BRD_PLATFORM_OBJ.SP_PT_BRD_NN_PLATFORM","SP_RA_BRD_PLATFORM_VAL","SP_RA_BRD_PLATFORM_OBJ");
BRD_platform_Activity_type.length = 16000;
BRD_platform_Activity_type.category = "Ring attribute";

function sp_BRD_read_platform(dummy)
{
	// this must be an activity
	var res = "Other";
	var nn;

	if (this instanceof OpxActivity)
	{
		nn = this.wbs_type.get("r.SP_RA_BRD_PLATFORM_VAL.SP_PT_BRD_NN_PLATFORM");
		for (var c in nn where c instanceof OpxSP_PT_BRD_NN_PLATFORM)
		{
			res = c.SP_RA_BRD_PLATFORM_OBJ.get("NAME");
		}
	}
	return res;
}
sp_BRD_read_platform.exportfunction({"STRING"},"STRING","Read the BRD platform");

 
//
//  PURPOSE : Functions used in the Clinical Costs Information pop up
//
//	SCRIPT NAME : SP_JS_CL_COSTS_INFORMATION
//
var revision_number ="1.04";
//	VERSION HISTORY :
//		v1.04 04/02/20 - SSK : updating sp_js_compute_clin_dev_quant_CRO_Fees_BS & sp_js_compute_clin_dev_quant_IF_INV_FEE to include currency conversion factor
//		v1.03 13/06/19 - bcordel : updating sp_js_compute_clin_dev_quant_IF_INV_FEE due to change in specifications
//		v1.02 22/05/19 - bcordel : updating sp_js_compute_clin_dev_quant_CRO_Fees_BS due to change to function sp_js_count_act_with_act_type
//		v1.01 15/05/19 - bcordel : adding method sp_js_compute_clin_dev_quant_IF_INV_FEE && sp_js_compute_clin_dev_quant_CRO_Fees_BS
//		11/10/18 - MRO : modify sp_calc_CRA_IN to use new profile CLIN-GRTM-LCRA in place of CLIN-SML-LCRA
//      19/04/18 - ORE : add sp_js_get_cost_unit_value, SP_is_north_america, SP_get_metric_rate_usd_by_nb_site and SP_get_metric_rate_usd functions
//		23/01/17 - CFN : replace "USA" by "United States" in SP_checkExistanceOfCategoryInformation
//		04/01/17 - CFN : add "sp_ext_cost_count_act_typ" from P5 (SP_OJS_CL_COST_EXT)
//		03/01/17 - CFN : Creation with SP_DisplayKtiAttributes function
//		12/07/17 - YSA : sp_get_BIOSTAT_workload correction
//      03/08/17 - YSA : SP_get_TCCI_field_value correction
//      31/08/17 - YSA : SP_get_possible_activity_cost_codes adding lag during value
//      20/09/17 - YSA : SP_propagate_currency update the currency propagation
//      22/09/17 - YSA : Init cost information on pop-up opening
//		21/12/17 - YSA : SP_checkExistenceOfCategoryInformation correction
//      28/12/17 - YSA : deactivate writeln on SP_get_logistics_cost_unit function
//-------------------------- Trial-Category Cost Information identification ------------------------------
function SP_get_TCCI_identifier(act,category){
var cost_infs;
var cat_cost=category;
var result="";

if (!(category instanceof OpxCOST_ACCOUNT))
{
cat_cost="OpxCOST_ACCOUNT".get(category);	
}

if !(act instanceof OpxActivity) act = OpxActivity.get(act);

if ((act instanceof OpxActivity) && (cat_cost instanceof OpxCOST_ACCOUNT))
{
cost_infs=act.get("r.SP_RA_TCCI_ACT_TRIAL.SP_PT_TRIAL_CAT_COST_INFO");
	for (var cf in cost_infs where cf.SP_RA_TCCI_COSTS_ACCOUNT==cat_cost)
	{
	result=cf.ONB;
	break;
	}	
}	

return result;
}

//---------------------------- Get Trial-Category Cost Information field ---------------------------------

//Generic function : get a specific field on a specific Trial-Category Cost Information of trial which countains activity from which "SP_get_TCCI_field_value" is executed
function SP_get_TCCI_field_value(activity, category, field){
var result="";
	//Check function arguments
	if(activity == "" || category == "" || field == "") return;

	//Check activity
	if !(activity instanceof opxactivity){
		activity = opxactivity.get(activity);
		if !(activity instanceof opxactivity) return undefined;
	}
	
	//Check category
	if !(category instanceof opxcostaccount){
		category = opxcostaccount.get(category);
		if !(category instanceof opxcostaccount) return undefined;
	}

	//Check field
	if !(field instanceof string) return undefined;

	//Get corresponding Trial
	var trial = activity.SP_get_Trial_activity();
	if(trial == undefined) trial = activity;

	//Get Trial-Category Costs Information
	var oTCCI = trial.SP_checkExistenceOfCategoryInformation(category.index);
	if(!(oTCCI instanceof OpxSP_PT_TRIAL_CAT_COST_INFO)) return undefined;

	//Return specific field
	if (oTCCI.get(field) instanceof OpxSP_PT_CL_COUNTRY)
	{
		result=oTCCI.get(field).name;
	}
	else
	{
		result=oTCCI.get(field);
	}
	return result;
}
SP_get_TCCI_field_value.exportfunction({"STRING","STRING","STRING"},"STRING","Get specific cost information");


//Get a STRING
method SP_get_TCCI_string_value on opxactivity(category, field){
	var result = SP_get_TCCI_field_value(this, category, field);
	return (result == undefined) ? "" : result;
}
SP_get_TCCI_string_value.exportfunction({"STRING","STRING"},"STRING","Get specific cost information");

function SP_get_TCCI_string_field_value(activity, category, field){
	var result = SP_get_TCCI_field_value(activity, category, field);
	return (result == undefined) ? "" : result;
}
SP_get_TCCI_string_field_value.exportfunction({"STRING","STRING","STRING"},"STRING","Get specific cost information");

//Get a BOOLEAN
method SP_get_TCCI_boolean_value on opxactivity(category, field){
	var result = SP_get_TCCI_field_value(this, category, field);
	return (result == undefined) ? false : result;
}
SP_get_TCCI_boolean_value.exportfunction({"STRING","STRING"},"BOOLEAN","Get specific cost information");

function SP_get_TCCI_boolean_field_value(activity, category, field){
	var result = SP_get_TCCI_field_value(activity, category, field);
	return (result == undefined) ? false : result;
}
SP_get_TCCI_boolean_field_value.exportfunction({"STRING","STRING","STRING"},"BOOLEAN","Get specific cost information");

//Get a NUMBER
method SP_get_TCCI_number_value on opxactivity(category, field){
	var result = SP_get_TCCI_field_value(this, category, field);
	return (result == undefined) ? 0 : result;
}
SP_get_TCCI_number_value.exportfunction({"STRING","STRING"},"NUMBER","Get specific cost information");

function SP_get_TCCI_number_field_value(activity, category, field){
	var result = SP_get_TCCI_field_value(activity, category, field);
	return (result == undefined) ? 0 : result;
}
SP_get_TCCI_number_field_value.exportfunction({"STRING","STRING","STRING"},"NUMBER","Get specific cost information");

//Get a COST
method SP_get_TCCI_cost_value on opxactivity(category,cost_field,currency){
	
	// Category : cost category corresponding to a cost account
	// Cost field : "number" field corresponding to a cost
	// Currency : currency reference to return the cost
	
	//Check function arguments
	if(category == "" || cost_field == "" || currency == "") return;
	
	//Check category
	if !(category instanceof opxcostaccount){
		category = opxcostaccount.get(category);
		if !(category instanceof opxcostaccount) return undefined;
	}

	//Check cost field and currency
	if !(cost_field instanceof string) return undefined;
	if !(currency instanceof string) return undefined;

	//Get corresponding Trial
	var trial = this.SP_get_Trial_activity();
	if(trial == undefined) trial = this;

	//Get Trial-Category Costs Information
	var oTCCI = trial.SP_checkExistenceOfCategoryInformation(category.index);
	if(!(oTCCI instanceof OpxSP_PT_TRIAL_CAT_COST_INFO)) return undefined;

	//Return specific field
	return oTCCI.get(cost_field)*oTCCI.SP_get_conversion_rate(currency);
}
SP_get_TCCI_cost_value.exportfunction({"STRING","STRING","STRING"},"NUMBER","Get specific cost converted in the desired currency");

//Get a DATE
method SP_get_TCCI_date_value on opxactivity(category, field){
	var result = SP_get_TCCI_field_value(this, category, field);
	return (result == undefined) ? "01-JAN-85" : result;
}
SP_get_TCCI_date_value.exportfunction({"STRING","STRING"},"DATE","Get specific cost information");

function SP_get_TCCI_date_field_value(activity, category, field){
	var result = SP_get_TCCI_field_value(activity, category, field);
	return (result == undefined) ? "01-JAN-85" : result;
}
SP_get_TCCI_date_field_value.exportfunction({"STRING","STRING","STRING"},"DATE","Get specific cost information");

//--------------------------- Last Update Handling -----------------------------------
method SP_update_TCCI_last_update on opxplannedexpenditure(){

	//Check activity
	var activity = this.activity;
	if !(activity instanceof opxactivity)return false;

	//Check category
	var category = this.cost_account;
	if !(category instanceof opxcostaccount) return false;

	//Get corresponding Trial
	var trial = activity.SP_get_Trial_activity();	
	if !(trial instanceof opxactivity)return false;

	//Get Trial-Category Costs Information
	var oTCCI = trial.SP_checkExistenceOfCategoryInformation(category.index);
	if(!(oTCCI instanceof OpxSP_PT_TRIAL_CAT_COST_INFO)) return;

	//Return specific field
	oTCCI.SP_AA_D_TCCI_LAST_UPDATE = new date();
}


//--------------------------- Trial-Category Cost Information creation -----------------------------------

// Check existence of a specific Cost Information per Trial and per Category: create it if it does not
method SP_checkExistenceOfCategoryInformation on opxactivity(sCategory){

var oInfo;
var oCategory = "Opxcostaccount".get(sCategory);
var sBudgetSite="";
var h = new HashTable("string");
var sInfo_ID;


if 	(oCategory instanceof opxcostaccount)
{

sInfo_ID = SP_get_TCCI_identifier(this,sCategory);
oInfo = "OpxSP_PT_TRIAL_CAT_COST_INFO".get(sInfo_ID);
	
	if(!(oInfo instanceof OpxSP_PT_TRIAL_CAT_COST_INFO))
	{

		//Default value for "budget site" identification
		h.set("KEuros","France");
		h.set("KUSD","United States");
		h.set("KCAD","Canada");
		if(this.SP_AA_ACT_CUR_FILTER =="KEuros" || this.SP_AA_ACT_CUR_FILTER =="KUSD" || this.SP_AA_ACT_CUR_FILTER =="KCAD")
		{
		sBudgetSite = h.get(this.SP_AA_ACT_CUR_FILTER);
		}
		//Creation of new trial-category information
		oInfo = new "OpxSP_PT_TRIAL_CAT_COST_INFO"
				("Cost category",sCategory, 			
				"Trial",this.index,
				"Budget site",sBudgetSite,
				"Currency - storage (internal)",this.SP_AA_ACT_CUR_FILTER,
				"No cost",this.SP_AA_B_CL_NO_COST,
				"Vendor","1-UNSPECIFIED",
				"File",This.File);
				
		//Fill in "Cost Activity" field on corresponding planned hours
		this.SP_check_cost_activity(sCategory);	
	}	
}

return oInfo;
}

// Check by SQl existence of a specific Cost Information per Trial and per Category
function SP_Cost_Information_Already_Exists(name){
	
	// name : Trial Category Cost Inforamtion name
	
	// var where_clause = "NAME = '5691647601|Investigator_meeting_IF'";
	var where_clause = "NAME = " + "'" + name + "' and dataset > 0";
	var table_name = "SP_PT_TRIAL_CAT_COST_INFO";
	var column_vector = new vector(); 
	column_vector.push("NAME"); 
	var type_vector = new vector(); 
	type_vector.push("string");
	var sql_result;
	try{ 
		sql_result = sqlselect(table_name,column_vector,type_vector,where_clause);
	} 
	//Stop in error case on the SQL request 
	catch(error CatchErr) { 
		if (CatchErr != undefined){ 
			writeln("..."+CatchErr.tostring()); 
			writeln("..."+CatchErr.tostring()); 
		} 
	}
	return (sql_result.length == 0) ? false : true;
}

//----------------------------------------- POP UP DISPLAY -----------------------------------------------

//method displayExternalCostsPopUp on opxactivity(){
function displayExternalCostsPopUp(){
	var check_category = false;
	var current_cat;
	if(context.SP_AA_S_CTX_COSTS_CATEGORY_SELECTION != ""){
		current_cat = "opxcost_account".get(context.SP_AA_S_CTX_COSTS_CATEGORY_SELECTION);
		// if(current_cat == undefined && current_cat == ""){
		if !(current_cat instanceof opxcostaccount){
			context.SP_AA_S_CTX_COSTS_CATEGORY_SELECTION = ""
		}
		else{
			check_category = true;
		}
	}


	var vSelectionAtom = new symbol("SELECTION-ATOM","TOOL-BAR");  
	for(var each in vSelectionAtom where each instanceof OpxActivity order by {"LINE_ID"} ) {          
		//Pick list filter of Cost pop-up initialization
		If (each.SP_NF_CL_TRIAL){ 
			if(each.SP_AA_ACT_CUR_FILTER == ""){
				alert("The pop-up can not be displayed, there is no Currency initialized at the Study level.");
				return;
			}
			context.SP_AA_S_CTX_COST_POP_UP_PICK_LIST_FILTER = "CRO,IF,Logistics,Translation";
			if(check_category){
				if(!current_cat.SP_NF_B_CA_TRIAL_COST_CATEGORY){
					context.SP_AA_S_CTX_COSTS_CATEGORY_SELECTION = "";
				}
			}
		}          
		else{
			if(each.SP_NF_B_ACT_IS_PARTNERSHIP_MGT){
				context.SP_AA_S_CTX_COST_POP_UP_PICK_LIST_FILTER = "Partnership_Cost";
				if(check_category){
					if(!current_cat.SP_NF_B_CA_PARTNERSHIP_COST_CATEGORY){
						context.SP_AA_S_CTX_COSTS_CATEGORY_SELECTION = "";
					}
				}
			}
			else{
				if(each.SP_NF_B_ACT_IS_CDPR){
					context.SP_AA_S_CTX_COST_POP_UP_PICK_LIST_FILTER = "Project_Cost";
					if(check_category){
						if(!current_cat.SP_NF_B_CA_CDPR_COST_CATEGORY){
							context.SP_AA_S_CTX_COSTS_CATEGORY_SELECTION = "";
						}
					}
				}
				else{
					return;
				}
			}
		}
		
		//Creation of category information if necessary
		if(this.SP_AA_S_CTX_COSTS_CATEGORY_SELECTION != ""){
			each.SP_checkExistenceOfCategoryInformation(this.SP_AA_S_CTX_COSTS_CATEGORY_SELECTION);
		}
		
		//Check "Cost Activity" field for each planned expenditure corresponding to selected category
		each.SP_check_cost_activity("");
		
		//Save selected activity to filter planned expenditures
		context.SP_AA_S_CTX_COST_POP_UP_ACT = each.index;
		
		// Open cost pop-up
		var link = new hyperlink("Fformula",                                                           
				   "formula",                                                           
				   each.CallStringFormula("ID"),                                                           
				   "EditorType",                                                           
					"SP_POP_ACT_CL_COST_INFO",                                                           
					"popup",                                                           
					true);   
                                                        
		link.go();  
 
	}
}

//Display/hide cells on Clinical Costs Pop up
function SP_Selected_Category_Belongs_To(sCostAccount){
	var selected_ca = "opxCost_Account".get(context.SP_AA_S_CTX_COSTS_CATEGORY_SELECTION);
	if(selected_ca == undefined) return false;
	//Check if "KTI activity attributes" is linked to selected Cost Account
	return selected_ca.callbooleanformula("from(\"" + sCostAccount + "\")");
}
SP_Selected_Category_Belongs_To.exportfunction({"string"},"boolean");

//Delete selected planned expenditure
function SP_delete_selected_planned_expenditure(){
	var vSelectionAtom = new symbol("SELECTION-ATOM","TOOL-BAR");  
		if(Question("Are you sure you want to delete the selected Planned expanditure.?"))
	{
		withoutalerts{
	for(var each in vSelectionAtom where each instanceof opxplannedexpenditure) {
		each.delete();
		}
		}
	}
}
SP_delete_selected_planned_expenditure.exportfunction();


//----------------------------------------------- CURRENCY -----------------------------------------------

//Get currency conversion rate
method SP_get_conversion_rate on "opxSP_PT_TRIAL_CAT_COST_INFO"(target_currency){

	// target_currency : name of target currency

	//Currency field could not be void
	if(target_currency == "") return 0;

	//Get target currency
	var tc = "opxcost_unit".get(target_currency);
	if(tc == "" || tc == undefined) return 0;
				
	//Get category currency
	var cc = "opxcost_unit".get(this.SP_DA_S_TCCI_CURRENCY);
	if(cc == "" || cc == undefined) return 0;
	if(tc.value == 0) return 0;
	
	//Return rate to convert costs from category currency to the target one
	return cc.value / tc.value;
	
}

//SP_DA_S_TCCI_CURRENCY
function sp_currency_reader(){ 		
	
	// READER => return the "Currency"
	
	if(this.SP_AA_S_TCCI_CURRENCY == "" || this.SP_AA_S_TCCI_CURRENCY == undefined) this.SP_AA_S_TCCI_CURRENCY = this.SP_RA_TCCI_ACT_TRIAL.SP_AA_ACT_CUR_FILTER;
	return this.SP_AA_S_TCCI_CURRENCY;
}
function sp_currency_modifier(new_currency){	
	
	// MODIFIER :

	// - update QUANTITY and UNIT for all planned expenditures
	// - update category currency
	// - update revised amount	
	// - updare Cost per subject (it concerns category "INV_FEES")
	
	//Currency field could not be void
	if(new_currency == "") return;

	//Get new currency
	var nc = "opxcost_unit".get(new_currency);
				
	//Get previous currency
	var pc = "opxcost_unit".get(this.SP_DA_S_TCCI_CURRENCY);

	//Rate computation to convert costs from previous currency to the new one
	var convert = this.SP_get_conversion_rate(new_currency);
	
	if(nc!="" && nc!=undefined){
		if(pc!="" && pc!=undefined){
			withoutalerts{
				//Concerned planned expenditures update
				fromobject(this.SP_RA_TCCI_ACT_TRIAL){
					for(var pe in "OpxFORECAST_EXPENDITURE" where pe.COST_ACCOUNT.Identifier == this.SP_RA_TCCI_COSTS_ACCOUNT.identifier){
						pe.UNIT = new_currency;
						pe.quantity = pe.quantity*convert;
					}
				}
			}

			//Revised amount update
			if(this.SP_AA_N_TCCI_REV_AMT instanceof NUMBER)
			{
				this.SP_AA_N_TCCI_REV_AMT = this.SP_AA_N_TCCI_REV_AMT*convert;
			}
			
			//Cost per subject(only for INV_FEES category), concerned planned expenditures and Trial Currency update
			this.SP_AA_N_TCCI_COST_PER_SUBJECT = this.SP_AA_N_TCCI_COST_PER_SUBJECT*convert;
		}
		
		//Currency update
		this.SP_AA_S_TCCI_CURRENCY = new_currency;
	}
}

var SP_DA_S_TCCI_CURRENCY = new ObjectAttribute("OpxSP_PT_TRIAL_CAT_COST_INFO","SP_DA_S_TCCI_CURRENCY","STRING");
SP_DA_S_TCCI_CURRENCY.reader=sp_currency_reader;
SP_DA_S_TCCI_CURRENCY.modifier=sp_currency_modifier;
SP_DA_S_TCCI_CURRENCY.comment="Currency";

//Currency update at Trial level
method SP_propagate_currency on opxactivity(){
	fromobject(this){
		for(var cat in "opxSP_PT_TRIAL_CAT_COST_INFO" where cat.SP_NF_S_TCCI_COST_PHASING_TYPE!="Re-estimation"){
			if(cat.SP_AA_B_TCCI_NO_COST){
				cat.SP_AA_B_TCCI_NO_COST = false;
				cat.SP_AA_S_TCCI_CURRENCY = this.SP_AA_ACT_CUR_FILTER;
				cat.SP_AA_B_TCCI_NO_COST = true;
			}
			else{
				cat.SP_DA_S_TCCI_CURRENCY = this.SP_AA_ACT_CUR_FILTER;
			}
		}
	}
}

//Currency hanling by cost pop-up
function SP_handle_currency_on_trial_popup(){
	//At First initialization
	if(this.object.SP_AA_ACT_CUR_FILTER == ""){
		this.object.SP_propagate_currency();
		return;
	}
	
	//Void value is not allowed for Trial currency after first initialization
	if(this.editor.SP_AA_ACT_CUR_FILTER == ""){
		this.editor.SP_AA_ACT_CUR_FILTER=this.object.SP_AA_ACT_CUR_FILTER;
		return;
	}		
	
	//Because of impact on categories, trial currency update has to be confirmed by the user
	if(question("Currency change will be propagated to all cost categories. Do you confirm the currency update?")){
		//Currency update propagation on categories
		this.editor.apply();
		this.object.SP_propagate_currency();
	}
	else{
		//Trial currency update cancellation
		this.editor.SP_AA_ACT_CUR_FILTER=this.object.SP_AA_ACT_CUR_FILTER;
	}
}

//Define possible currencies in pick list of the cost pop up
function SP_get_available_currencies(){
	var v = new vector(); 
	v.push("KEuros");
	v.push("KCAD");
	v.push("KUSD");
	return v;
}


//----------------------------------------------- NO COST ------------------------------------------------

//At category level (Cost pop-up)

method SP_apply_no_cost_on_category on "opxSP_PT_TRIAL_CAT_COST_INFO"(){
	
	// > Reinitialisation of:
	// 	- Revised amount
	// 	- Currency (storage)
	// > Remove all planned expenditures from concerned category
	
	if(question("All costs of this category will be deleted, do you confirm the deletion?")){
		withoutlocking{		
			
			//Reset Currency
			//this.SP_AA_S_TCCI_CURRENCY="";
			
			//Reset Revised Amount
			this.SP_AA_N_TCCI_REV_AMT=0;
			
			//Reset Cost per subject
			this.SP_AA_N_TCCI_COST_PER_SUBJECT=0;
			
			//Remove all costs
			fromobject(this.SP_RA_TCCI_ACT_TRIAL){
			if(Question("Are you sure you want to delete the selected Planned expanditure.?"))
			{
				withoutalerts{
				for(var pe in "OpxFORECAST_EXPENDITURE" where pe.COST_ACCOUNT.Identifier == this.SP_RA_TCCI_COSTS_ACCOUNT.identifier){
					pe.delete();
				}
				}
				}
			}
			return true;
			
			//Reset "No Cost"
			this.SP_AA_B_TCCI_NO_COST=true;
		}
	}
	else{
		this.SP_AA_B_TCCI_NO_COST=false;
		return false;
	}
}

function SP_handle_no_cost_on_cost_popup(){

	//Function in "No cost" cell of Cost pop-up to manage "No cost" change
	
	this.editor.apply();
	if (this.editor.SP_AA_B_TCCI_NO_COST && !this.object.SP_RA_TCCI_ACT_TRIAL.SP_AA_B_CL_NO_COST){
		if(!this.object.SP_apply_no_cost_on_category()){
			this.SP_AA_B_TCCI_NO_COST = false;
		}
	}
}


//At Trial level (Trial pop-up)

method SP_apply_no_cost_on_trial on opxactivity(){
	
	//For all categories of the concerned activity:
	// > Reinitialisation of:
	// 	- Revised amount
	// 	- Currency (storage)
	// > Remove all planned expenditures
	
	if(question("All costs of the study will be deleted, do you confirm the deletion?")){
		fromobject(this){
			//Remove planned expenditures
			if(Question("Are you sure you want to delete the selected Planned expanditure.?"))
	{
		withoutalerts{
			for(var pe in "OpxFORECAST_EXPENDITURE"){
				pe.delete();
			}
			}
			}
			
			//Reset Cost categories
			for(var tcci in "OpxSP_PT_TRIAL_CAT_COST_INFO".findclass()){
				
				//Reset Currency
				//tcci.SP_AA_S_TCCI_CURRENCY="";
				
				//Reset Revised Amount
				tcci.SP_AA_N_TCCI_REV_AMT=0;
				
				//Reset Cost per Subject
				tcci.SP_AA_N_TCCI_COST_PER_SUBJECT=0;					
								
				//Reset "No Cost"
				tcci.SP_AA_B_TCCI_NO_COST=true;
			}
			return true;
		}
	}
	else
	{
		this.SP_AA_B_CL_NO_COST=false;
		return false;
	}
}

method SP_deactivate_no_cost_on_trial on opxactivity(){
	
	//Deactivate "No Cost" for concerned trial and all categories of the concerned activity
	this.SP_AA_B_CL_NO_COST=false;
	fromobject(this){
		for(var tcci in "OpxSP_PT_TRIAL_CAT_COST_INFO".findclass()) tcci.SP_AA_B_TCCI_NO_COST=false;
	}
}

function handle_no_cost_on_trial_popup(){

	//Function in "No cost" cell of Trial pop-up to manage "No cost" change

	this.editor.apply();
	if (this.editor.SP_AA_B_CL_NO_COST){
		if(!this.object.SP_apply_no_cost_on_trial()){
			this.editor.SP_AA_B_CL_NO_COST = false;
		}
	}
	else{
		this.object.SP_deactivate_no_cost_on_trial();
	}
}

//Indicate if costs are linked to concerned activity or one of its children
method SP_any_planned_expenditure_consolidated_by_activity on opxactivity(){
	fromobject(this){
		for(var act in opxactivity where act.SP_NF_B_ACT_NO_PLE) return false;
	}
	return true;
}

//------------------------------------------------ KTI -------------------------------------------------

//Display/hide KTI attributes on Clinical Costs Pop up
/*
function SP_DisplayKtiAttributes(sCostAccount){
	var selected_ca = "opxCost_Account".get(context.SP_AA_S_CTX_COSTS_CATEGORY_SELECTION);
	if(selected_ca == undefined) return false;
	//Check if "KTI activity attributes" is linked to selected Cost Account
	return selected_ca.callbooleanformula("from(\"" + sCostAccount + "\")");
}
SP_DisplayKtiAttributes.exportfunction({"string"},"boolean");
*/

//Compute occurences number of children activity with a specific activity type
function sp_ext_cost_count_act_typ(act_typ){
	var result=0;
	fromobject(This){
		for (var act in "OpxActivity" where act.WBS_TYPE.NAME==act_typ  ){
			result=result+1;
		}
	}
	return result;
}
sp_ext_cost_count_act_typ.exportfunction({"STRING"},"NUMBER");

//return theoretical sum of FTE created by metrics and linked to resource  CLIN-GRTM-LCRA 
function sp_calc_CRA_IN(){
	var vActTypesList = new vector();
	var vDistinctActTypesList;
	var act_typ_list="";
	var div=0;
	var result=0;
	var resource="";
	var vLCRA_Equations = new vector();
	
	//Get list of activity types linked to resource "CLIN-GRTM-LCRA" through equations
	resource=opxresource.get("CLIN-GRTM-LCRA");
	for(var equa in resource.get("r._PE_RA_EQUA_RES._PE_PT_EQUA_EQUATION") where equa._PE_AA_EQUA_ACTIVE){
		vActTypesList.push(equa._PE_DA_EQUA_FILTERFIELD1);
		vLCRA_Equations.push(equa);		
	}
	vDistinctActTypesList = vActTypesList.removeduplicates();
	act_typ_list = "\"" + vDistinctActTypesList.join("\",\"") + "\"";

	//Get theoritical FTEs applied by metrics on all children activities linked to resource "CLIN-GRTM-LCRA"
	fromobject(This)
	{
		//Identification of children activities linked to resource "CLIN-GRTM-LCRA"
		for (var act in "OpxActivity" where act.CallBooleanFormula(" WBS_TYPE IN ("+act_typ_list+") "))
		{
			//Identification of equations linked to these children activities and to resource "CLIN-GRTM-LCRA"
			for (var equa in vLCRA_Equations where equa._PE_DA_EQUA_FILTERFIELD1== act.WBS_TYPE.NAME)
			{
				if (act.CallBooleanFormula(equa._PE_AA_EQUA_BASEFILTER)){
					//Identification of "Number of hours per day"
					if (equa._PE_DA_EQUA_FIELD7=="SP_NF_CL_FR"){
						div=act.CallNumberFormula("SP_NF_CL_NB_DAYS_PER_YEAR_FR");
					}
					if (equa._PE_DA_EQUA_FIELD7=="SP_NF_CL_US"){
						div=act.CallNumberFormula("SP_NF_CL_NB_DAYS_PER_YEAR_US");
					}
					if (equa._PE_DA_EQUA_FIELD7=="SP_NF_CL_INT"){
						div=act.CallNumberFormula("SP_NF_CL_NB_DAYS_PER_YEAR_INT");
					}
					//Identification of FTE created by parsed equation and add to total sum
					result=result+(act.get(equa._PE_DA_EQUA_FIELD4+"_IN")/div);
				}
			}
		}
	}
	return result;
}
sp_calc_CRA_IN.exportfunction("","NUMBER");


//-------------------------------------- External CRA Rate (KTI) ---------------------------------------

//Get the highest CRO rate of linked "clinical countries"
function Sp_cl_calculate_cra_rate(){
	var act = this;
	var cra_rate=0;
	var ctry_list=new Vector();
	var result=0;
	if ((act!=undefined && act.SP_NF_CL_COUNTRY!="") && act Instanceof OpxActivity){
		ctry_list = act.SP_NF_CL_COUNTRY.parselist();
		if (ctry_list.length >0){
			for (var cty in ctry_list){
				var opx_cty = "OpxSP_PT_CL_COUNTRY".get(cty);
				if (opx_cty !=undefined){
					cra_rate=opx_cty.SP_AA_CRO_RATE;
					if (cra_rate>result){
						result=cra_rate;
					}
				}
			}
		}
	}
	return result;
}
Sp_cl_calculate_cra_rate.exportfunction("","NUMBER");

//Get currency linked to a specific currency
method SP_get_Currency_ID_for_category on opxactivity(category){	
	
	//category : name of concerned category	

	// var tcci = "opxSP_PT_TRIAL_CAT_COST_INFO".get(SP_get_TCCI_identifier(this.index,category));
	var tcci = "opxSP_PT_TRIAL_CAT_COST_INFO".get(SP_get_TCCI_identifier(this,category));
	if(tcci == undefined || tcci == ""){
		return "";
	}
	else{
		return tcci.SP_DA_S_TCCI_CURRENCY;
	}
}

//Get money conversion rate for a specifica category
method SP_get_conversion_rate_for_category on opxactivity(category){
	
	//category : name of concerned category	
	
	var cur_ID = this.SP_get_Currency_ID_for_category(category);
	if(cur_ID == "") return 0;
	var cur = "opxcost_unit".get(cur_ID);
	if(cur == undefined || cur == "") return 0;
	return cur.value;
}
SP_get_conversion_rate_for_category.exportfunction({"STRING"},"NUMBER");

//----------------------------------------- Cost activity -----------------------------------------------

//Get concerned Trial
method SP_get_Trial_activity on opxactivity(){
	if(this.SP_NF_CL_TRIAL) return this;
	return (this.level == 1) ? undefined : this.WBS_ELEMENT.SP_get_Trial_activity();
}

//Get an activity with a specific activity type in the upstream tree
method Sp_get_clin_activity_with_act_type on opxactivity(act_type){
	if((this.SP_NF_B_OBS_CLIN_ACT || this.SP_NF_B_CLIN_ACT) && this.Wbs_Type != "") {
		if(this.Wbs_Type.name == act_type) return this;
	}
	return (this.level == 1) ? undefined : this.WBS_ELEMENT.Sp_get_clin_activity_with_act_type(act_type);
}

//Method to check/fill in "Cost Activity" field on planned expenditure linked to concerned activity
method SP_check_cost_activity on opxactivity(category){
	// var ActNb = 0;
	if(category == "") return;
	fromobject(this){
		for(var ple in opxplannedexpenditure where ple.cost_account.index == category){
			if(ple.SP_AA_S_PLE_TMP_COST_ACT != ple.ACTIVITY.SP_NF_S_ACT_COSTS_ACT_CODE) ple.SP_AA_S_PLE_TMP_COST_ACT = ple.ACTIVITY.SP_NF_S_ACT_COSTS_ACT_CODE;
		}
	}
}

//Method used to update "ACTIVITY" field on planned expenditure when change occurs with the activity corresponding to the "Cost Activity" (SP_AA_S_PLE_TMP_COST_ACT)
method SP_get_activity_from_cost_code on opxplannedexpenditure(){
	
	//Get new cost code
	var cost_code = this.SP_AA_S_PLE_TMP_COST_ACT;

	if(cost_code != ""){
		//Get Trial activity
		var root_act = opxactivity.get(context.SP_AA_S_CTX_COST_POP_UP_ACT);
		if(root_act instanceof opxactivity){
			fromobject(root_act){
				for(var act in opxactivity){
					if(cost_code == act.SP_NF_S_ACT_COSTS_ACT_CODE.trim(" ")) return act.index;
				}
			}
		}
	}
	
	//If any activity is linked to the new cost code
	return this.ACTIVITY.index;
}
SP_get_activity_from_cost_code.exportfunction("","STRING");

//Check "Cost code" consistency with "Activity"
method SP_check_cost_code_consistency_with_activity_NOK on opxplannedexpenditure(){
	return (this.SP_AA_S_PLE_TMP_COST_ACT == this.activity.SP_NF_S_ACT_COSTS_ACT_CODE.trim(" ")) ? false : true;
}

//Check new value of "Cost activity" field in the cost pop-up
method SP_cancel_ple_creation_through_cost_popup_with_wrong_cost_code on opxplannedexpenditure(){

	//Check creation method: if it is created by parametric equation, the context field SP_AA_B_AL_LO_ACTIVE is set to TRUE
	if(context.SP_AA_B_AL_LO_ACTIVE) return false;

	//Check currency
	if(this.SP_AA_S_TCCI_CURRENCY == "") return true;

	//Get cost code
	var cost_code = this.SP_AA_S_PLE_TMP_COST_ACT;
	if(cost_code == "") return true;

	//Get "root activity" : the activity selected to display cost pop-pup (trial or project/partnership activity)
	var root_act = opxactivity.get(context.SP_AA_S_CTX_COST_POP_UP_ACT);
	if(root_act == "") return true;

	//Check that activity linked to the concerned planned expenditure belongs to "root activity"
	if(root_act instanceof opxactivity){
		fromobject(root_act){
			for(var act in opxactivity){
				if(cost_code == act.SP_NF_S_ACT_COSTS_ACT_CODE.trim(" ")) return false;
			}
		}
	}
	
	return true;
}
SP_cancel_ple_creation_through_cost_popup_with_wrong_cost_code.exportfunction("","BOOLEAN");



//------------------------------------ Cost activity pick list ------------------------------------------

//Save a vector of cost codes corresponding to a list of activities into the context variable "CostActPossibleValuesVector"
method SP_save_possible_values_for_cost_act_code on opxactivity(){
	var vPossibleValues = new vector();
	if(!this.SP_NF_B_ACT_NO_PLE) vPossibleValues.push(this.SP_NF_S_ACT_COSTS_ACT_CODE.trim(" "));
	fromobject(this){
		for(var act in opxactivity where act.SP_NF_B_OBS_CLIN_ACT && act.SP_NF_B_ACT_NO_PLE order by {"PlannedStart"}) vPossibleValues.push(act.SP_NF_S_ACT_COSTS_ACT_CODE.trim(" "));		
	}
	context.CostActPossibleValuesVector=vPossibleValues;
}


//Function given to "Addpossiblevalueshandler" of Cost pop-up to initiate pick list of "Cost activity" field (in planned expenditures table) from context variable "CostActPossibleValuesVector"
function SP_get_possible_activity_cost_codes(slot){
	
	//Cost activity	
	var cost_activity_code_field = opxplannedexpenditure.getslotbyid("SP_AA_S_PLE_TMP_COST_ACT"); //SP_DA_S_PLE_COST_ACTIVITY
	if(cost_activity_code_field == slot) return context.CostActPossibleValuesVector;
		
	//Duration computation
	var list_DC = new vector();
	list_DC.push("Extendible");
	list_DC.push("Fixed dates");
	list_DC.push("Lag-during");
	var cost_activity_code_field = opxplannedexpenditure.getslot("DURATION_COMPUTATION");
	if(cost_activity_code_field == slot) return list_DC;
	return false;
}



//-------------------------------------- Cost phasing type ----------------------------------------------

//Manual reestimation
method SP_switch_to_manual_mode on opxplannedexpenditure(){
	
	//Set "Equation override" to true for all planned expenditures having the same linked activity and the same linked cost account
	
	var onb_category = this.cost_account.onb;
	
	//Get the Trial to which belongs currrent activity
	var trial = opxactivity.get(this.ACTIVITY.SP_NF_CL_TRIAL_ID);	
	if (!(trial instanceof opxactivity)) return false;
	fromobject(trial){
		for(var ple in opxplannedexpenditure where ple.cost_account.onb == onb_category) ple.equation_override = TRUE;
	}
	context.SP_AA_B_AL_LO_ACTIVE = false;
	return true;
}

method SP_switch_to_manual_mode on "OpxSP_PT_TRIAL_CAT_COST_INFO"(){
	
	//Set "Equation override" to true for all planned expenditures having the same linked activity and the same linked cost account
	
	var onb_category = this.SP_RA_TCCI_COSTS_ACCOUNT.onb;
	var trial = this.SP_RA_TCCI_ACT_TRIAL;
	
	if (!(trial instanceof opxactivity)) return false;
	fromobject(trial){
		for(var ple in opxplannedexpenditure where ple.cost_account.onb == onb_category) ple.equation_override = TRUE;
	}
	return true;
}

//Display on cost pop-up
method SP_display_cost_phasing_type on "OpxSP_PT_TRIAL_CAT_COST_INFO"(){
		
	//Display only in case of planned expenditure presence
	
	if !(this.SP_RA_TCCI_ACT_TRIAL instanceof opxactivity) return false;
	var trial = this.SP_RA_TCCI_ACT_TRIAL;
	if !(this.SP_RA_TCCI_COSTS_ACCOUNT instanceof opxcost_account) return false;
	var category = this.SP_RA_TCCI_COSTS_ACCOUNT;
	fromobject(trial){
		for(var ple in opxplannedexpenditure where ple.cost_account == category) return true
	}
	return false;
}

//Compute "Cost Phasing" Type
method SP_get_cost_phasing_type on "OpxSP_PT_TRIAL_CAT_COST_INFO"(){
		
	//If "No Cost" option is ticked, it is neither "Metrics" phase nor "Re-estimation" phase
	if(this.SP_AA_B_TCCI_NO_COST) return "";
	
	//If "Revised amount" has been initialized (to another value then 0)
	if((this.SP_AA_N_TCCI_REV_AMT instanceof NUMBER) && (this.SP_AA_N_TCCI_REV_AMT > 0 )) return "Re-estimation";
	
	//Get Trial activity (or linked activity for "Partnership_Cost" and "Project_Cost")
	if !(this.SP_RA_TCCI_ACT_TRIAL instanceof opxactivity){
		//If any activity is linked to Trial-Category Cost Information, there is a problem
		var msg = "/!\ Trial-Category Cost Information \"" + this.index + "\" is linked to any activity !!!!";
		writeln(msg);
		return msg;
	}
	var trial = this.SP_RA_TCCI_ACT_TRIAL;
	
	//Get Cost Category (= CostAccount)
	if !(this.SP_RA_TCCI_COSTS_ACCOUNT instanceof opxcost_account){
		//If any activity is linked to Trial-Category Cost Information, there is a problem
		var msg = "/!\ Trial-Category Cost Information \"" + this.index + "\" is linked to any cost account !!!!";
		writeln(msg);
		return msg;
	}
	var category = this.SP_RA_TCCI_COSTS_ACCOUNT;
	
	//Check first planned expenditure linked to Trial (or linked activity for "Partnership_Cost" and "Project_Cost")
	// /!\ Pre-requisit : all planned expenditures of one cost category inside a trial have the same value for "equation_override" field
	fromobject(trial){
		for(var ple in opxplannedexpenditure where ple.cost_account == category){
			if(ple.equation_override) return "Re-estimation";
			return "Metrics";
		}
	}
	return "";
}
SP_get_cost_phasing_type.exportfunction("","STRING");


//-------------------------------------- Metric Amount / Cost consolidation ----------------------------------------------

// Check that activity complies to equation filter
method SP_equation_filters_complied on "opx_PE_PT_EQUA_EQUATION"(act){
		
		// act : activity on which equation has to be applied
		
	//Parse each Filter Attribute 
	for(var EqFilterAtt in this.get("r._PE_RA_EQUA_EQFA._PE_PT_EQUA_EQFILATT")){
		//Check that concerned activity attribute value comply with filter attribute filter value 
		// Note : filter attribute name is saved in "Equation template filter attributes" table
		//"printattribute" is better then "get" in case of relation attribute
		if(act.printattribute(EqFilterAtt._PE_RA_EQUA_EQFA2.NAME) != EqFilterAtt._PE_AA_EQUA_FILATTVAL) return false;
	}
	
	//Check "Basic filter" compliance
	// alert("Basefilter = " + this._PE_AA_EQUA_BASEFILTER);
	// alert("Basefilter filtering = " + act.CallBooleanFormula(this._PE_AA_EQUA_BASEFILTER));
	if(!act.CallBooleanFormula(this._PE_AA_EQUA_BASEFILTER)) return false;
	
	//Return true if activity comply with all filtering conditions
	return true;
}

// Return vector of equations linked to a specific cost account
method SP_get_linked_equations on opxcostaccount(){
		
	var vEquas = new vector();
	
	//Identification of active "Create" equations linked to concerned Trial-Category Cost Information
	for(var equa in this.get("r._PE_RA_EQUA_CBS._PE_PT_EQUA_EQUATION") where equa._PE_AA_EQUA_ACTIVE && equa._PE_RA_EQUA_EQET.getinternalvalue("_PE_AA_EQUA_TYP").tostring() == "1"){
		//Check that these equations are linked to "Planned expenditures" and "Activities" objects through their equation template 
		if(equa._PE_RA_EQUA_EQET._PE_RA_EQUA_STRTCL.NAME == "Activity" && equa._PE_RA_EQUA_EQET._PE_RA_EQUA_ACTCL.NAME == "Planned Expenditure") vEquas.push(equa);
	}
	
	return (vEquas.length == 0) ? "" : vEquas;	
}

//Check if at least one active equation is linked to Trial-Category Cost Information
method SP_is_linked_to_equation on "opx_SP_PT_TRIAL_CAT_COST_INFO"(){
	//Identification of active "Create" equations linked to concerned Trial-Category Cost Information
	for(var equa in this.SP_RA_TCCI_COSTS_ACCOUNT.get("r._PE_RA_EQUA_CBS._PE_PT_EQUA_EQUATION") where equa._PE_AA_EQUA_ACTIVE && equa._PE_RA_EQUA_EQET.getinternalvalue("_PE_AA_EQUA_TYP").tostring() == "1") return true;
	return false;
}
SP_is_linked_to_equation.exportfunction("","BOOLEAN","Return true if cost information is linked to at least one parametric equation through cost category (cost account)");

//Return consolidation of field "Quantity" computed by specific equations on a specific activity
//Pre-requisit : only one equation could be applied on a specific activity for a specific cost account
method SP_get_quantity_conso on opxactivity(vEquations){
	
	// vEquations : vector of concerned equations
	
	var conso = 0;
	
	// Parse equations
	for(var equa in vEquations){
		//Check equation filters compliance
		if(equa.SP_equation_filters_complied(this)){
			// alert("Equation \"" + equa.name + "\" complied");
			
			//Add "Quantity" to the consolidation
			for(var EqActionAtt in equa.get("r._PE_RA_EQUA_EQAA._PE_PT_EQUA_EQACTATT") where EqActionAtt._PE_RA_EQUA_EQAA2.NAME=="Quantity" && EqActionAtt._PE_AA_EQUA_ACTATTVAL != ""){
				//only one equation could be applied on a specific activity for a specific cost account
				return this.callnumberformula(EqActionAtt._PE_AA_EQUA_ACTATTVAL);				
				
				//If it would not be the case:
				//conso=conso + this.callnumberformula(EqActionAtt._PE_AA_EQUA_ACTATTVAL);
				//break;
			}
		}
	}
	
	//Return consolidation
	return conso;
}

//Return consolidation of field "Quantity" computed by specific equations on all activities of the trial
method SP_get_metric_amount on "OpxSP_PT_TRIAL_CAT_COST_INFO"(){ 
	
	//Relevant equations identification
	var vEquations = this.SP_RA_TCCI_COSTS_ACCOUNT.SP_get_linked_equations();
	if(vEquations == "") return 0;
	
	//Consolidate equations simulations results
	var conso = 0;
	
	//In case of Trial, all children activities are concerned
	if (this.SP_RA_TCCI_ACT_TRIAL.SP_NF_CL_TRIAL){
		var trial = this.SP_RA_TCCI_ACT_TRIAL;
		fromobject(trial){
			for(var act in opxactivity){
				conso = conso + act.SP_get_quantity_conso(vEquations);
			}
		}
	}
	//In case of PROJECT or PARTNERSHIP, only linked activity is concerned
	else{
		var act = this.SP_RA_TCCI_ACT_TRIAL;
		conso = act.SP_get_quantity_conso(vEquations);
	}
	return conso;
}
SP_get_metric_amount.exportfunction("","NUMBER","Return consolidation of field \"Quantity\" of planned expenditures that would be created by equations if they were applied on all activities of the concerned trial")

//Get sum of planned expenditures quantities linked to one Trial-Category Cost Information
method SP_get_sum_of_planned_expenditures_quantity on "OpxSP_PT_TRIAL_CAT_COST_INFO"(){
	
	var conso = 0;
	
	//Parse planned expenditures from conceened trial
	fromobject(this.SP_RA_TCCI_ACT_TRIAL){
		for(var pe in opxplannedexpenditure where pe.COST_ACCOUNT.index == this.SP_RA_TCCI_COSTS_ACCOUNT.index){
			conso = conso + pe.quantity;
		}
	}
	return conso;
}
SP_get_sum_of_planned_expenditures_quantity.exportfunction("","NUMBER","Return consolidation of field \"Quantity\" of planned expenditures linked to activities of the concerned trial");



//-------------------------------------- Parametric Equation ----------------------------------------------

//Check if activity belongs to a Trial, if equation could apply on a specific cost category and specific study leadership
//method SP_costs_equations_conditions_linked_to_trial_checked on opxactivity(cost_category,study_leadership,position){
method SP_costs_equations_conditions_linked_to_trial_checked on opxactivity(cost_category,study_leadership,position,other_filter){
	
	// /!\ this function works only if it is used in external cost equations (SP_CL_EXT_COST...) where another condition is defined on a specific activity type : 
	//		> this function works only if current activity ("this") is linked to this specific activity type) !!!!
	
	//Check concerned activity belongs to a trial
	var trial = this.SP_get_Trial_activity();
	if(trial == undefined) return false;

	//Check currency selection at trial level
	if(trial.SP_AA_ACT_CUR_FILTER == "") return false;
	
	//Check "No Cost" at trial level
	if(trial.SP_AA_B_CL_NO_COST) return false;

	//Check study leadership
	if (!trial.callbooleanformula("belongs(\"Study Leadership\",\"" + study_leadership + "\")")) return false;		
	
	//Check Cost Category conditions
	if !trial.SP_get_TCCI_boolean_value(cost_category,"SP_NF_B_TCCI_APPLY_EQUATIONS") return false;

	//Check activity position
	if(position != ""){
		fromobject(trial){
			// /!\ Method "SP_costs_equations_conditions_linked_to_trial_checked" is executed on activity with specific activity type
			if(position == "Last"){
				for (var act in "OpxActivity".findclass() where act.WBS_TYPE==this.WBS_TYPE order by {{"INVERSE","PF"}}){	
					if (act.onb != this.onb) return false;
					break;
				}
			}
			else{			
				for (var act in "OpxActivity".findclass() where act.WBS_TYPE==this.WBS_TYPE order by {"PS"}){				
					//"act" is the FIRST activity (on time scale) of trial with the specific activity type
					if (act.onb == this.onb){
						//Current activity (on which is executed this method) is the "initial" activity (= first activity in time scale)
						if(position == "Additional") return false;
					}
					else{
						//Current activity (on which is executed this method) is NOT the "initial" activity (= first activity in time scale)
						if(position == "First") return false;
					}
					//Other activities do not matter
					break;
				}
			}
		}
	}

	//Check other conditions
	if(other_filter != ""){
		if(!trial.callbooleanformula(other_filter)) return false;
	}

	//If all conditions are checked:
	return true;
}

SP_costs_equations_conditions_linked_to_trial_checked.exportfunction({"STRING","STRING","STRING","STRING"},"BOOLEAN","Check if activity belongs to a Trial, if equation could apply on a specific cost category, on a specific study leadership and check activity position (\"\",\"First\",\"Additional\" or \"Last\") in trial compared to other activities with the same activity type, if trial comply to additional condition");


//Get currency value in euros for the given cost category
method sp_js_get_currency_value on opxactivity(category){
	var s_currency=this.SP_get_TCCI_string_value(category,"SP_DA_S_TCCI_CURRENCY");
	var o_currency="opxCOST_UNIT".get(s_currency);
	if(!(o_currency instanceof opxCOST_UNIT)) return 1;
	return (o_currency.VALUE == 0) ? 1 : o_currency.VALUE;
}
sp_js_get_currency_value.exportfunction({"STRING"},"NUMBER","Get currency value in euros for the given cost category"); 

//Get conversion factor
method SP_get_currency_conversion_factor on opxactivity(category){
	var result = this.sp_js_get_currency_value(category);
	return (result == 0) ? result : 1/result;
}
SP_get_currency_conversion_factor.exportfunction({"STRING"},"NUMBER","Get currency conversion factor to convert a value in euros into the currency given by the cost category of concerned trial"); 

method SP_get_logistics_costs_consolidation on opxactivity(log_categories,Months_Nb,sTrialFactor){
	
	// log_categories : list of logitics categories
	// Months_Nb : months number used to identifiy the "unit cost" through "Period" column
	// sTrialFactor : string to evaluate to get the factor to apply to unit cost(s)

	//Get concerned trial
	var trial = this.SP_get_Trial_activity();
	if !(trial instanceof opxactivity) return 0;

	//Check factor
	var iFactor = 1;
	if(sTrialFactor != "") iFactor = trial.callnumberformula(sTrialFactor);
	
	//Parse categories	to consolidate costs
	var conso = 0;
	for(var log_category in log_categories.parsevector()) conso += iFactor * trial.SP_get_logistics_cost_unit(log_category,Months_Nb);		
		
	//Return consolidation
	return conso;
}
SP_get_logistics_costs_consolidation.exportfunction({"STRING","NUMBER","STRING"},"NUMBER","Get logistics costs consolidation");

method SP_get_logistics_cost_unit on opxactivity(log_category,Months_Nb){
	
	// log_category : logitics category
	// Months_Nb : months number used to identifiy the "unit cost" through "Period" column

	//Get concerned trial
	var trial = this.SP_get_Trial_activity();
	if !(trial instanceof opxactivity) return 0;
	var vTrialGeoArea = trial.SP_NF_S_GEO_AREA.parsevector();

	//Parse logistic elements
	for(var unit_cost in "opxSP_PT_LOGISTICS_UNIT_COST" where unit_cost.SP_AA_S_LUC_CATEGORY == log_category){
		if(unit_cost.SP_cost_unit_compliance_checked(vTrialGeoArea,Months_Nb)) return unit_cost.SP_AA_N_LUC_UNIT_COST;
	}
	
	//Default return
	//writeln("Any unit cost found for category \"" + log_category + "\" in \"SP_PT_LOGISTICS_UNIT_COST\" table.");
	return 0;
	
}
// SP_get_logistics_cost_unit.exportfunction({"STRING","NUMBER"},"NUMBER","Get corresponding unit cost value");

method SP_cost_unit_compliance_checked on "opxSP_PT_LOGISTICS_UNIT_COST"(vTrialGeoArea,Months_Nb){
		
		// vTrialGeoArea : georgaphic area of concerned trial
		// Months_Nb : months number used to identifiy the "unit cost" through "Period" column
	
		//Check Geographic area
		if(this.SP_AA_S_LUC_GEO_AREA != ""){
			var bAtLeastOneCompliance = false;
			var bAtLeastOneNonCompliance = false;
			var ucga = this.SP_AA_S_LUC_GEO_AREA.parsevector();
		
			//Parse Trial Geographic area to compare elements to "Unit Cost" georgaphic areas
			for(var tga in vTrialGeoArea){
				if(ucga.position(tga) instanceof number) bAtLeastOneCompliance = true;
				else bAtLeastOneNonCompliance = true
			}
			
			//Check results
			if(bAtLeastOneCompliance){
				if(bAtLeastOneNonCompliance){
					if(ucga.position("North America") instanceof number) return false;
				}
			}
			else{
				return false;
			}
		}
		
		//Check Time period
		if(this.SP_AA_S_LUC_PERIOD != ""){
			var iPeriod = this.getinternalvalue("SP_AA_S_LUC_PERIOD").name.parseint();
			if(this.SP_AA_S_LUC_PERIOD.search("(>")  instanceof NUMBER){
				var min = iPeriod * 12;
				if(Months_Nb <= min) return false;
			}
			else{							
				var max = iPeriod * 12;
				var min = (iPeriod - 1) * 12;
				if(Months_Nb <= min || Months_Nb > max) return false;
			}
		}
			
		//Default return if all tests are checked
		return true;
}

// Check if geographic area of concerned trial is North America and/or Latin America
method SP_is_north_latin_america on opxactivity(){
	
	//Get concerned trial
	var trial = this.SP_get_Trial_activity();
	if !(trial instanceof opxactivity) return 0;
	
	//Check geographic area number
	var vTrialGeoArea = trial.SP_NF_S_GEO_AREA.parsevector();
	if(vTrialGeoArea.length > 2) return false;
	
	//Check geographic area content
	if (vTrialGeoArea.length == 1){
		if(trial.SP_NF_S_GEO_AREA == "North America" || trial.SP_NF_S_GEO_AREA == "Latin America") return true;
		else return false;
	}
	else{
		if(vTrialGeoArea.position("North America") instanceof number && vTrialGeoArea.position("Latin America") instanceof number) return true;
		else return false;
	}	
}
SP_is_north_latin_america.exportfunction("","BOOLEAN","Check if geaographic area of concerned trial is North America and/or Latin America");

// Compute Biostat workload

/*
method sp_get_BIOSTAT_workload on opxactivity(){
	var trial = this.SP_get_Trial_activity();
	if !(trial instanceof opxactivity) return 0;
	
	var i=0;
	fromobject(trial){

		for (var act in "OpxActivity" where act.CallBooleanFormula(" BELONGS(\"WBS_TYPE\",\"S_STAT,M_STAT\") ") order by {"PS"})i=i+1;
	}
	
	if(i == 0) return 0;

	if(trial.CallBooleanFormula("SP_RA_CL_STUDY_LEADERSHIP in (\"Clin. Dev.\",\"Med. Aff.\") and SP_NF_IS_PROG_OUTSOURCED and NOT SP_NF_IS_BIO_OUTSOURCED ") )	return 130 + (i-1)*25;
	
	if(trial.CallBooleanFormula(" SP_RA_CL_STUDY_LEADERSHIP in (\"Clin. Dev.\",\"Med. Aff.\") and SP_NF_IS_PROG_OUTSOURCED and SP_NF_IS_BIO_OUTSOURCED ") )	return 160 + (i-1)*25;
	
	if(trial.CallBooleanFormula("SP_RA_CL_STUDY_LEADERSHIP IN (\"Medical\")"))	return 25 + (i-1)*7;
		
}
sp_get_BIOSTAT_workload.exportfunction("","NUMBER");
*/

function sp_get_BIOSTAT_workload()
{
	var act=this;
	var trial_index;
	var trial;
	var result=0;
	var i=0;
	if (act instanceof opxactivity)
	{
		
		trial_index=act.sp_get_trial_id("");
		trial="OpxActivity".get(trial_index); 
		if(trial instanceof opxactivity)
		{
			fromobject(trial){

				for (var act_s in "OpxActivity".findclass() where act_s.CallBooleanFormula("BELONGS(\"WBS_TYPE\",\"S_STAT\")") order by {"PS"})
				{
					i=i+1;
				}
			}
			if (i>0)
			{
				if (trial.CallBooleanFormula("SP_RA_CL_STUDY_LEADERSHIP in (\"Clin. Dev.\",\"Medical US\") and SP_NF_IS_PROG_OUTSOURCED and NOT SP_NF_IS_BIO_OUTSOURCED") )
				{
					result=130 + (i-1)*25;
				}
				else
				{
					if (trial.CallBooleanFormula("SP_RA_CL_STUDY_LEADERSHIP in (\"Clin. Dev.\",\"Medical US\") and SP_NF_IS_PROG_OUTSOURCED and SP_NF_IS_BIO_OUTSOURCED") )
					{
						result=160 + (i-1)*25;
					}
					else
					{
						if (trial.CallBooleanFormula("SP_RA_CL_STUDY_LEADERSHIP IN (\"Medical\")"))
						{
							result=25 + (i-1)*7;
						}
						else
						{
							result=0;
						}
						
					}
					
				}
				
			}


		}
	}

	return result;	
	
}
withoutlocking
{
sp_get_BIOSTAT_workload.exportfunction("","NUMBER");
}

//Get currency value for the given currency
method sp_js_get_cost_unit_value on opxactivity(currency){
	var o_currency="opxCOST_UNIT".get(currency);
	if(!(o_currency instanceof opxCOST_UNIT)) return 1;
	return (o_currency.VALUE == 0) ? 1 : o_currency.VALUE;
}
sp_js_get_cost_unit_value.exportfunction({"STRING"},"NUMBER","Get currency value for the given currency"); 

method SP_get_metric_rate_usd on opxactivity(rate_category){

	//Get concerned trial
	var trial = this.SP_get_Trial_activity();
	if !(trial instanceof opxactivity) return 0;

	//Parse metric rate elements
	var metric_rate = "opxSP_PT_METRICS_RATE_USD".get(rate_category)

	if (metric_rate != undefined)
	{
		return metric_rate.SP_AA_N_MRU_RATE;
	}	

	//Default return
	//writeln("Any metric rate found for category \"" + rate_category + "\" in \"SP_PT_METRICS_RATE_USD\" table.");
	return 0;
}
SP_get_metric_rate_usd.exportfunction({"STRING"},"NUMBER","Get corresponding metric rate value");

method SP_get_metric_rate_usd_by_nb_site on opxactivity(rate_category){

	//Get concerned trial
	var trial = this.SP_get_Trial_activity();
	if !(trial instanceof opxactivity) return 0;
	var vTrialNbSite = trial.SP_NF_CL_INVESTIGATOR_PHASE_TRIAL;
	
	//Parse logistic elements
	for(var metric_rate in "opxSP_PT_METRICS_RATE_USD" where metric_rate.NAME == rate_category && vTrialNbSite <= metric_rate.SP_AA_N_MRU_UPPER_SITE && vTrialNbSite >= metric_rate.SP_AA_N_MRU_LOW_SITE){
		return metric_rate.SP_AA_N_MRU_RATE;
	}
	
	//Default return
	//writeln("Any metric rate found for category \"" + rate_category + "\" in \"SP_PT_METRICS_RATE_USD\" table.");
	return 0;
}
SP_get_metric_rate_usd_by_nb_site.exportfunction({"STRING"},"NUMBER","Get corresponding metric rate value");

// Check if geographic area of concerned trial is at least North America
method SP_is_north_america on opxactivity(){
	
	//Get concerned trial
	var trial = this.SP_get_Trial_activity();
	if !(trial instanceof opxactivity) return 0;
	
	//Check geographic area number
	var vTrialGeoArea = trial.SP_NF_S_GEO_AREA.parsevector();
	
	if(vTrialGeoArea.position("North America") instanceof number) return true;
	else return false;	
}
SP_is_north_america.exportfunction("","BOOLEAN","Check if geaographic area of concerned trial is at least North America");

/*
//Get the first activity among activities with specific activity type
method SP_get_field_from_first_activity_with_wbs_tpe on opxactivity(wbs_type){

	// wbs_type : activity type

	fromobject(this){
		for(var act in opxactivity where act.WBS_TYPE == wbs_type order by {"PS"})	return act;			
	}
}
//Get the last activity among activities with specific activity type
method SP_get_field_from_last_activity_with_wbs_tpe on opxactivity(wbs_type,field){

	// wbs_type : activity type

	fromobject(this){
		for(var act in opxactivity where act.WBS_TYPE == wbs_type order by {{"INVERSE","PF"}})	return act;
	}
}
*/

/*
//Get "Investigator Fees budget"
method SP_get_investigator_fees_budget on opxactivity(category){
	//Check concerned activity belongs to a trial
	var trial = this.SP_get_Trial_activity();
	if(trial == undefined) return 0;
	
	//Return result
	return (trial.SP_get_TCCI_number_value(category,"sp_aa_n_tcci_cost_per_subject") * trial.SP_NF_N_ACT_CL_TRIAL_EXP_SUB / 100);
	
}
SP_get_investigator_fees_budget.exportfunction({"STRING"},"NUMBER","Get Investigator Fees budget for the given cost category"); 
*/

//////////
//Method to compute the quantity for equation linked to study leadership clin dev and cost account Investigator_fees_IF and activity type S_COST
/////////
method sp_js_compute_clin_dev_quant_IF_INV_FEE on opxactivity ()
{
	var o_current_act = this;
	// getting the trial linked to the activity
	var o_trial = this.sp_get_Trial_activity();
	// if the object returned is not an activity we stop everything
	if !(o_trial instanceof opxactivity)
	{
		writetolog ("Error during the computation of the quantity for Investigator Fees, unable to get the trial linked to the activity ~a.",o_current_act.ID);
		return 0;
	}
	// Declaration of all the number variable that will store values.
	
	/* average rates*/
	var n_average_rate_site = 0;
	var n_average_rate_site_25 = 0;	
	var n_average_rate_phone = 0;
	var n_average_rate_subj = 0;
	var n_average_rate_vacc_subj = 0;
	var n_average_rate_vacc_05_subj = 0;
	var n_average_rate_visit_subj = 0;
	var n_average_rate_visit_1_subj = 0;
	var n_average_rate_blood = 0;
	var n_average_rate_overhead = 0;
	
	var n_nbr_countries = 0;
	/*result*/
	var n_quantity = 0;
	
	//Loop on geographic area for which we have at least 1 country
	for (var o_geo_area in "opxSP_PT_CL_GEO_AREA" where (o_trial.sp_cl_list_count_reg("SP_RING_CL_COUNTRY",o_geo_area.NAME)>0))
	{
		//computing averages going contry by country
		var v_countries = o_trial.sp_cl_contries_in_reg("SP_RING_CL_COUNTRY",o_geo_area.NAME).split(",");
		for (var s_country in v_countries)
		{
			var o_country = "opxSP_PT_CL_COUNTRY".get(s_country);
			if !(o_country instanceof opxSP_PT_CL_COUNTRY)
			{
				writetolog ("Error during the computation of the quantity for Investigator Fees, the country ~a can't be find in the country table.",s_country);
				return 0;
			}
			n_average_rate_site = n_average_rate_site + o_country.SP_AA_N_CLCO_RATE_SITE;
			n_average_rate_site_25 = n_average_rate_site_25 + o_country.SP_AA_N_CLCO_RA_SITE_25;	
			n_average_rate_phone = n_average_rate_phone + o_country.SP_AA_N_CLCO_RATE_PHONE_SUBJ;
			n_average_rate_subj = n_average_rate_subj + o_country.SP_AA_N_CLCO_RATE_SUBJ;
			n_average_rate_vacc_subj = n_average_rate_vacc_subj + o_country.SP_AA_N_CLCO_RATE_VACC_SUBJ;
			n_average_rate_vacc_05_subj = n_average_rate_vacc_05_subj + o_country.SP_AA_N_CLCO_RATE_VACC_05_SUBJ;
			n_average_rate_visit_subj = n_average_rate_visit_subj + o_country.SP_AA_N_CLCO_RATE_VISIT_SUBJ;
			n_average_rate_visit_1_subj = n_average_rate_visit_1_subj + o_country.SP_AA_N_CLCO_RATE_VISIT_1_SUBJ;
			n_average_rate_blood = n_average_rate_blood + o_country.SP_AA_N_CLCO_RATE_BLOOD_SUBJ;
			n_average_rate_overhead = n_average_rate_overhead + o_country.SP_AA_N_CLCO_RATE_OVERHEAD;
		}
		
		//now that the rate of every country has been added, dividing by the number of country.
		n_nbr_countries = o_trial.sp_cl_list_count_reg("SP_RING_CL_COUNTRY",o_geo_area.NAME);
		
		n_average_rate_site = n_average_rate_site/n_nbr_countries;
		n_average_rate_site_25 = n_average_rate_site_25/n_nbr_countries;	
		n_average_rate_phone = n_average_rate_phone/n_nbr_countries;
		n_average_rate_subj = n_average_rate_subj/n_nbr_countries;
		n_average_rate_vacc_subj = n_average_rate_vacc_subj/n_nbr_countries;
		n_average_rate_vacc_05_subj = n_average_rate_vacc_05_subj/n_nbr_countries;
		n_average_rate_visit_subj = n_average_rate_visit_subj/n_nbr_countries;
		n_average_rate_visit_1_subj = n_average_rate_visit_1_subj/n_nbr_countries;
		n_average_rate_blood = n_average_rate_blood/n_nbr_countries;
		n_average_rate_overhead = n_average_rate_overhead/n_nbr_countries;
		
		// computing the total quantity
		var n_nb_sites = o_trial.CallNumberFormula("SP_DA_N_CL_SITES_"+o_geo_area.SP_AA_S_CL_GEOAREA_NICKNAME);
		var n_nb_subj = o_trial.CallNumberFormula("SP_DA_N_CL_SUB_"+o_geo_area.SP_AA_S_CL_GEOAREA_NICKNAME);
		
		n_quantity=n_quantity+((n_average_rate_site*n_nb_sites)+(n_average_rate_site_25*n_nb_sites*25)+(n_average_rate_phone*o_trial.SP_AA_CL_PHONE_CALLS*n_nb_subj)+(n_average_rate_subj*n_nb_subj)+(n_average_rate_vacc_subj*o_trial.SP_AA_CL_VACCINATIONS*n_nb_subj)+(n_average_rate_vacc_05_subj*o_trial.SP_AA_CL_VACCINATIONS*0.5*n_nb_subj)+(n_average_rate_visit_subj*o_trial.SP_AA_CL_VISITS*n_nb_subj)+(n_average_rate_visit_1_subj*(o_trial.SP_AA_CL_VISITS-1)*n_nb_subj)+(n_average_rate_blood*o_trial.SP_AA_CL_BLOOD_DRAW*n_nb_subj))*(1+n_average_rate_overhead)*SP_get_currency_conversion_factor("Investigator_fees_IF");
		
		// reset of rates
		n_average_rate_site = 0;
		n_average_rate_site_25 = 0;	
		n_average_rate_phone = 0;
		n_average_rate_subj = 0;
		n_average_rate_vacc_subj = 0;
		n_average_rate_vacc_05_subj = 0;
		n_average_rate_visit_subj = 0;
		n_average_rate_visit_1_subj = 0;
		n_average_rate_blood = 0;
		n_average_rate_overhead = 0;
	}
	

	
	//once all geographical area have been treated we return the total result
	return n_quantity;
	
}
sp_js_compute_clin_dev_quant_IF_INV_FEE.exportfunction("","NUMBER","function computing the quantity for equations with Study leadership = Clin. Dev., cost account Investigator_fees_IF and activity type S_COST");

//////////
//Method to compute the quantity for equation linked to study leadership clin dev and cost account CRO_Fees_BS and activity type S_COST
/////////
method sp_js_compute_clin_dev_quant_CRO_Fees_BS on opxactivity ()
{
	var o_current_act = this;
	// getting the trial linked to the activity
	var o_trial = this.sp_get_Trial_activity();
	// if the object returned is not an activity we stop everything
	if !(o_trial instanceof opxactivity)
	{
		writetolog ("Error during the computation of the quantity for Investigator Fees, unable to get the trial linked to the activity ~a.",o_current_act.ID);
		return 0;
	}
	
	//china factor between fte and costs
	var n_china_factor = 75;
	// cost for statical analysis
	var n_init_stat_only_prog = 130;
	var n_add_stat_only_prog = 25;
	var n_init_stat_prog_stat = 160;
	var n_add_stat_prog_stat = 25;
	
	/*result*/
	var n_quantity = 0;
	
	// China case
	if (o_trial.CallBooleanFormula("SP_NF_B_PROG_STAT_FILTER and (SP_NF_IS_BIO_CHINA or SP_NF_IS_PROG_CHINA)"))
	{
		fromobject(o_trial)
		{
			for (var o_act in "opxactivity" where o_act.SP_NF_IS_BIO_CRO_FEES_CHINA)
			{
				n_quantity=n_quantity + o_act.SP_NF_N_BIO_CRO_FEES_CHN_WORKLOAD;
			}
		}
		// Multiplying the "China" quantity by a factor
		//n_quantity = n_quantity*n_china_factor;
		n_quantity = n_quantity*n_china_factor*SP_get_currency_conversion_factor("CRO_Fees_BS");
	}
	
	// Outsourced cases, it depend of the number of S_STAT activities.
	if (o_trial.callbooleanformula("SP_NF_IS_PROG_OUTSOURCED AND NOT SP_NF_IS_BIO_OUTSOURCED"))
	{
		var n_number_stat_act = o_trial.sp_js_count_act_with_act_type("S_STAT","");
		if (n_number_stat_act>0)
		{
			n_quantity=n_quantity+(n_init_stat_only_prog+(n_number_stat_act-1)*n_add_stat_only_prog)*SP_get_currency_conversion_factor("CRO_Fees_BS");
		}
	}
	if (o_trial.callbooleanformula("SP_NF_IS_PROG_OUTSOURCED AND SP_NF_IS_BIO_OUTSOURCED"))
	{
		var n_number_stat_act = o_trial.sp_js_count_act_with_act_type("S_STAT","");
		if (n_number_stat_act>0)
		{
			n_quantity=n_quantity+(n_init_stat_prog_stat+(n_number_stat_act-1)*n_add_stat_prog_stat)*SP_get_currency_conversion_factor("CRO_Fees_BS");
		}
	}
	return n_quantity;	
}
sp_js_compute_clin_dev_quant_CRO_Fees_BS.exportfunction("","NUMBER","function computing the quantity for equations with Study leadership = Clin. Dev., cost account CRO_Fees_BS and activity type S_COST");


writetolog("Script SP_JS_CL_COSTS_INFORMATION loaded with version ~a ", revision_number);

//
//  PURPOSE : Functions used in the Clinical Costs Information pop up
//
//	SCRIPT NAME : SP_JS_CL_COSTS_INFORMATION
//
var revision_number ="1.04";
//	VERSION HISTORY :
//		v1.04 04/02/20 - SSK : updating sp_js_compute_clin_dev_quant_CRO_Fees_BS & sp_js_compute_clin_dev_quant_IF_INV_FEE to include currency conversion factor
//		v1.03 13/06/19 - bcordel : updating sp_js_compute_clin_dev_quant_IF_INV_FEE due to change in specifications
//		v1.02 22/05/19 - bcordel : updating sp_js_compute_clin_dev_quant_CRO_Fees_BS due to change to function sp_js_count_act_with_act_type
//		v1.01 15/05/19 - bcordel : adding method sp_js_compute_clin_dev_quant_IF_INV_FEE && sp_js_compute_clin_dev_quant_CRO_Fees_BS
//		11/10/18 - MRO : modify sp_calc_CRA_IN to use new profile CLIN-GRTM-LCRA in place of CLIN-SML-LCRA
//      19/04/18 - ORE : add sp_js_get_cost_unit_value, SP_is_north_america, SP_get_metric_rate_usd_by_nb_site and SP_get_metric_rate_usd functions
//		23/01/17 - CFN : replace "USA" by "United States" in SP_checkExistanceOfCategoryInformation
//		04/01/17 - CFN : add "sp_ext_cost_count_act_typ" from P5 (SP_OJS_CL_COST_EXT)
//		03/01/17 - CFN : Creation with SP_DisplayKtiAttributes function
//		12/07/17 - YSA : sp_get_BIOSTAT_workload correction
//      03/08/17 - YSA : SP_get_TCCI_field_value correction
//      31/08/17 - YSA : SP_get_possible_activity_cost_codes adding lag during value
//      20/09/17 - YSA : SP_propagate_currency update the currency propagation
//      22/09/17 - YSA : Init cost information on pop-up opening
//		21/12/17 - YSA : SP_checkExistenceOfCategoryInformation correction
//      28/12/17 - YSA : deactivate writeln on SP_get_logistics_cost_unit function
//-------------------------- Trial-Category Cost Information identification ------------------------------
function SP_get_TCCI_identifier(act,category){
var cost_infs;
var cat_cost=category;
var result="";

if (!(category instanceof OpxCOST_ACCOUNT))
{
cat_cost="OpxCOST_ACCOUNT".get(category);	
}

if !(act instanceof OpxActivity) act = OpxActivity.get(act);

if ((act instanceof OpxActivity) && (cat_cost instanceof OpxCOST_ACCOUNT))
{
cost_infs=act.get("r.SP_RA_TCCI_ACT_TRIAL.SP_PT_TRIAL_CAT_COST_INFO");
	for (var cf in cost_infs where cf.SP_RA_TCCI_COSTS_ACCOUNT==cat_cost)
	{
	result=cf.ONB;
	break;
	}	
}	

return result;
}

//---------------------------- Get Trial-Category Cost Information field ---------------------------------

//Generic function : get a specific field on a specific Trial-Category Cost Information of trial which countains activity from which "SP_get_TCCI_field_value" is executed
function SP_get_TCCI_field_value(activity, category, field){
var result="";
	//Check function arguments
	if(activity == "" || category == "" || field == "") return;

	//Check activity
	if !(activity instanceof opxactivity){
		activity = opxactivity.get(activity);
		if !(activity instanceof opxactivity) return undefined;
	}
	
	//Check category
	if !(category instanceof opxcostaccount){
		category = opxcostaccount.get(category);
		if !(category instanceof opxcostaccount) return undefined;
	}

	//Check field
	if !(field instanceof string) return undefined;

	//Get corresponding Trial
	var trial = activity.SP_get_Trial_activity();
	if(trial == undefined) trial = activity;

	//Get Trial-Category Costs Information
	var oTCCI = trial.SP_checkExistenceOfCategoryInformation(category.index);
	if(!(oTCCI instanceof OpxSP_PT_TRIAL_CAT_COST_INFO)) return undefined;

	//Return specific field
	if (oTCCI.get(field) instanceof OpxSP_PT_CL_COUNTRY)
	{
		result=oTCCI.get(field).name;
	}
	else
	{
		result=oTCCI.get(field);
	}
	return result;
}
SP_get_TCCI_field_value.exportfunction({"STRING","STRING","STRING"},"STRING","Get specific cost information");


//Get a STRING
method SP_get_TCCI_string_value on opxactivity(category, field){
	var result = SP_get_TCCI_field_value(this, category, field);
	return (result == undefined) ? "" : result;
}
SP_get_TCCI_string_value.exportfunction({"STRING","STRING"},"STRING","Get specific cost information");

function SP_get_TCCI_string_field_value(activity, category, field){
	var result = SP_get_TCCI_field_value(activity, category, field);
	return (result == undefined) ? "" : result;
}
SP_get_TCCI_string_field_value.exportfunction({"STRING","STRING","STRING"},"STRING","Get specific cost information");

//Get a BOOLEAN
method SP_get_TCCI_boolean_value on opxactivity(category, field){
	var result = SP_get_TCCI_field_value(this, category, field);
	return (result == undefined) ? false : result;
}
SP_get_TCCI_boolean_value.exportfunction({"STRING","STRING"},"BOOLEAN","Get specific cost information");

function SP_get_TCCI_boolean_field_value(activity, category, field){
	var result = SP_get_TCCI_field_value(activity, category, field);
	return (result == undefined) ? false : result;
}
SP_get_TCCI_boolean_field_value.exportfunction({"STRING","STRING","STRING"},"BOOLEAN","Get specific cost information");

//Get a NUMBER
method SP_get_TCCI_number_value on opxactivity(category, field){
	var result = SP_get_TCCI_field_value(this, category, field);
	return (result == undefined) ? 0 : result;
}
SP_get_TCCI_number_value.exportfunction({"STRING","STRING"},"NUMBER","Get specific cost information");

function SP_get_TCCI_number_field_value(activity, category, field){
	var result = SP_get_TCCI_field_value(activity, category, field);
	return (result == undefined) ? 0 : result;
}
SP_get_TCCI_number_field_value.exportfunction({"STRING","STRING","STRING"},"NUMBER","Get specific cost information");

//Get a COST
method SP_get_TCCI_cost_value on opxactivity(category,cost_field,currency){
	
	// Category : cost category corresponding to a cost account
	// Cost field : "number" field corresponding to a cost
	// Currency : currency reference to return the cost
	
	//Check function arguments
	if(category == "" || cost_field == "" || currency == "") return;
	
	//Check category
	if !(category instanceof opxcostaccount){
		category = opxcostaccount.get(category);
		if !(category instanceof opxcostaccount) return undefined;
	}

	//Check cost field and currency
	if !(cost_field instanceof string) return undefined;
	if !(currency instanceof string) return undefined;

	//Get corresponding Trial
	var trial = this.SP_get_Trial_activity();
	if(trial == undefined) trial = this;

	//Get Trial-Category Costs Information
	var oTCCI = trial.SP_checkExistenceOfCategoryInformation(category.index);
	if(!(oTCCI instanceof OpxSP_PT_TRIAL_CAT_COST_INFO)) return undefined;

	//Return specific field
	return oTCCI.get(cost_field)*oTCCI.SP_get_conversion_rate(currency);
}
SP_get_TCCI_cost_value.exportfunction({"STRING","STRING","STRING"},"NUMBER","Get specific cost converted in the desired currency");

//Get a DATE
method SP_get_TCCI_date_value on opxactivity(category, field){
	var result = SP_get_TCCI_field_value(this, category, field);
	return (result == undefined) ? "01-JAN-85" : result;
}
SP_get_TCCI_date_value.exportfunction({"STRING","STRING"},"DATE","Get specific cost information");

function SP_get_TCCI_date_field_value(activity, category, field){
	var result = SP_get_TCCI_field_value(activity, category, field);
	return (result == undefined) ? "01-JAN-85" : result;
}
SP_get_TCCI_date_field_value.exportfunction({"STRING","STRING","STRING"},"DATE","Get specific cost information");

//--------------------------- Last Update Handling -----------------------------------
method SP_update_TCCI_last_update on opxplannedexpenditure(){

	//Check activity
	var activity = this.activity;
	if !(activity instanceof opxactivity)return false;

	//Check category
	var category = this.cost_account;
	if !(category instanceof opxcostaccount) return false;

	//Get corresponding Trial
	var trial = activity.SP_get_Trial_activity();	
	if !(trial instanceof opxactivity)return false;

	//Get Trial-Category Costs Information
	var oTCCI = trial.SP_checkExistenceOfCategoryInformation(category.index);
	if(!(oTCCI instanceof OpxSP_PT_TRIAL_CAT_COST_INFO)) return;

	//Return specific field
	oTCCI.SP_AA_D_TCCI_LAST_UPDATE = new date();
}


//--------------------------- Trial-Category Cost Information creation -----------------------------------

// Check existence of a specific Cost Information per Trial and per Category: create it if it does not
method SP_checkExistenceOfCategoryInformation on opxactivity(sCategory){

var oInfo;
var oCategory = "Opxcostaccount".get(sCategory);
var sBudgetSite="";
var h = new HashTable("string");
var sInfo_ID;


if 	(oCategory instanceof opxcostaccount)
{

sInfo_ID = SP_get_TCCI_identifier(this,sCategory);
oInfo = "OpxSP_PT_TRIAL_CAT_COST_INFO".get(sInfo_ID);
	
	if(!(oInfo instanceof OpxSP_PT_TRIAL_CAT_COST_INFO))
	{

		//Default value for "budget site" identification
		h.set("KEuros","France");
		h.set("KUSD","United States");
		h.set("KCAD","Canada");
		if(this.SP_AA_ACT_CUR_FILTER =="KEuros" || this.SP_AA_ACT_CUR_FILTER =="KUSD" || this.SP_AA_ACT_CUR_FILTER =="KCAD")
		{
		sBudgetSite = h.get(this.SP_AA_ACT_CUR_FILTER);
		}
		//Creation of new trial-category information
		oInfo = new "OpxSP_PT_TRIAL_CAT_COST_INFO"
				("Cost category",sCategory, 			
				"Trial",this.index,
				"Budget site",sBudgetSite,
				"Currency - storage (internal)",this.SP_AA_ACT_CUR_FILTER,
				"No cost",this.SP_AA_B_CL_NO_COST,
				"Vendor","1-UNSPECIFIED",
				"File",This.File);
				
		//Fill in "Cost Activity" field on corresponding planned hours
		this.SP_check_cost_activity(sCategory);	
	}	
}

return oInfo;
}

// Check by SQl existence of a specific Cost Information per Trial and per Category
function SP_Cost_Information_Already_Exists(name){
	
	// name : Trial Category Cost Inforamtion name
	
	// var where_clause = "NAME = '5691647601|Investigator_meeting_IF'";
	var where_clause = "NAME = " + "'" + name + "' and dataset > 0";
	var table_name = "SP_PT_TRIAL_CAT_COST_INFO";
	var column_vector = new vector(); 
	column_vector.push("NAME"); 
	var type_vector = new vector(); 
	type_vector.push("string");
	var sql_result;
	try{ 
		sql_result = sqlselect(table_name,column_vector,type_vector,where_clause);
	} 
	//Stop in error case on the SQL request 
	catch(error CatchErr) { 
		if (CatchErr != undefined){ 
			writeln("..."+CatchErr.tostring()); 
			writeln("..."+CatchErr.tostring()); 
		} 
	}
	return (sql_result.length == 0) ? false : true;
}

//----------------------------------------- POP UP DISPLAY -----------------------------------------------

//method displayExternalCostsPopUp on opxactivity(){
function displayExternalCostsPopUp(){
	var check_category = false;
	var current_cat;
	if(context.SP_AA_S_CTX_COSTS_CATEGORY_SELECTION != ""){
		current_cat = "opxcost_account".get(context.SP_AA_S_CTX_COSTS_CATEGORY_SELECTION);
		// if(current_cat == undefined && current_cat == ""){
		if !(current_cat instanceof opxcostaccount){
			context.SP_AA_S_CTX_COSTS_CATEGORY_SELECTION = ""
		}
		else{
			check_category = true;
		}
	}


	var vSelectionAtom = new symbol("SELECTION-ATOM","TOOL-BAR");  
	for(var each in vSelectionAtom where each instanceof OpxActivity order by {"LINE_ID"} ) {          
		//Pick list filter of Cost pop-up initialization
		If (each.SP_NF_CL_TRIAL){ 
			if(each.SP_AA_ACT_CUR_FILTER == ""){
				alert("The pop-up can not be displayed, there is no Currency initialized at the Study level.");
				return;
			}
			context.SP_AA_S_CTX_COST_POP_UP_PICK_LIST_FILTER = "CRO,IF,Logistics,Translation";
			if(check_category){
				if(!current_cat.SP_NF_B_CA_TRIAL_COST_CATEGORY){
					context.SP_AA_S_CTX_COSTS_CATEGORY_SELECTION = "";
				}
			}
		}          
		else{
			if(each.SP_NF_B_ACT_IS_PARTNERSHIP_MGT){
				context.SP_AA_S_CTX_COST_POP_UP_PICK_LIST_FILTER = "Partnership_Cost";
				if(check_category){
					if(!current_cat.SP_NF_B_CA_PARTNERSHIP_COST_CATEGORY){
						context.SP_AA_S_CTX_COSTS_CATEGORY_SELECTION = "";
					}
				}
			}
			else{
				if(each.SP_NF_B_ACT_IS_CDPR){
					context.SP_AA_S_CTX_COST_POP_UP_PICK_LIST_FILTER = "Project_Cost";
					if(check_category){
						if(!current_cat.SP_NF_B_CA_CDPR_COST_CATEGORY){
							context.SP_AA_S_CTX_COSTS_CATEGORY_SELECTION = "";
						}
					}
				}
				else{
					return;
				}
			}
		}
		
		//Creation of category information if necessary
		if(this.SP_AA_S_CTX_COSTS_CATEGORY_SELECTION != ""){
			each.SP_checkExistenceOfCategoryInformation(this.SP_AA_S_CTX_COSTS_CATEGORY_SELECTION);
		}
		
		//Check "Cost Activity" field for each planned expenditure corresponding to selected category
		each.SP_check_cost_activity("");
		
		//Save selected activity to filter planned expenditures
		context.SP_AA_S_CTX_COST_POP_UP_ACT = each.index;
		
		// Open cost pop-up
		var link = new hyperlink("Fformula",                                                           
				   "formula",                                                           
				   each.CallStringFormula("ID"),                                                           
				   "EditorType",                                                           
					"SP_POP_ACT_CL_COST_INFO",                                                           
					"popup",                                                           
					true);   
                                                        
		link.go();  
 
	}
}

//Display/hide cells on Clinical Costs Pop up
function SP_Selected_Category_Belongs_To(sCostAccount){
	var selected_ca = "opxCost_Account".get(context.SP_AA_S_CTX_COSTS_CATEGORY_SELECTION);
	if(selected_ca == undefined) return false;
	//Check if "KTI activity attributes" is linked to selected Cost Account
	return selected_ca.callbooleanformula("from(\"" + sCostAccount + "\")");
}
SP_Selected_Category_Belongs_To.exportfunction({"string"},"boolean");

//Delete selected planned expenditure
function SP_delete_selected_planned_expenditure(){
	var vSelectionAtom = new symbol("SELECTION-ATOM","TOOL-BAR");  
		if(Question("Are you sure you want to delete the selected Planned expanditure.?"))
	{
		withoutalerts{
	for(var each in vSelectionAtom where each instanceof opxplannedexpenditure) {
		each.delete();
		}
		}
	}
}
SP_delete_selected_planned_expenditure.exportfunction();


//----------------------------------------------- CURRENCY -----------------------------------------------

//Get currency conversion rate
method SP_get_conversion_rate on "opxSP_PT_TRIAL_CAT_COST_INFO"(target_currency){

	// target_currency : name of target currency

	//Currency field could not be void
	if(target_currency == "") return 0;

	//Get target currency
	var tc = "opxcost_unit".get(target_currency);
	if(tc == "" || tc == undefined) return 0;
				
	//Get category currency
	var cc = "opxcost_unit".get(this.SP_DA_S_TCCI_CURRENCY);
	if(cc == "" || cc == undefined) return 0;
	if(tc.value == 0) return 0;
	
	//Return rate to convert costs from category currency to the target one
	return cc.value / tc.value;
	
}

//SP_DA_S_TCCI_CURRENCY
function sp_currency_reader(){ 		
	
	// READER => return the "Currency"
	
	if(this.SP_AA_S_TCCI_CURRENCY == "" || this.SP_AA_S_TCCI_CURRENCY == undefined) this.SP_AA_S_TCCI_CURRENCY = this.SP_RA_TCCI_ACT_TRIAL.SP_AA_ACT_CUR_FILTER;
	return this.SP_AA_S_TCCI_CURRENCY;
}
function sp_currency_modifier(new_currency){	
	
	// MODIFIER :

	// - update QUANTITY and UNIT for all planned expenditures
	// - update category currency
	// - update revised amount	
	// - updare Cost per subject (it concerns category "INV_FEES")
	
	//Currency field could not be void
	if(new_currency == "") return;

	//Get new currency
	var nc = "opxcost_unit".get(new_currency);
				
	//Get previous currency
	var pc = "opxcost_unit".get(this.SP_DA_S_TCCI_CURRENCY);

	//Rate computation to convert costs from previous currency to the new one
	var convert = this.SP_get_conversion_rate(new_currency);
	
	if(nc!="" && nc!=undefined){
		if(pc!="" && pc!=undefined){
			withoutalerts{
				//Concerned planned expenditures update
				fromobject(this.SP_RA_TCCI_ACT_TRIAL){
					for(var pe in "OpxFORECAST_EXPENDITURE" where pe.COST_ACCOUNT.Identifier == this.SP_RA_TCCI_COSTS_ACCOUNT.identifier){
						pe.UNIT = new_currency;
						pe.quantity = pe.quantity*convert;
					}
				}
			}

			//Revised amount update
			if(this.SP_AA_N_TCCI_REV_AMT instanceof NUMBER)
			{
				this.SP_AA_N_TCCI_REV_AMT = this.SP_AA_N_TCCI_REV_AMT*convert;
			}
			
			//Cost per subject(only for INV_FEES category), concerned planned expenditures and Trial Currency update
			this.SP_AA_N_TCCI_COST_PER_SUBJECT = this.SP_AA_N_TCCI_COST_PER_SUBJECT*convert;
		}
		
		//Currency update
		this.SP_AA_S_TCCI_CURRENCY = new_currency;
	}
}

var SP_DA_S_TCCI_CURRENCY = new ObjectAttribute("OpxSP_PT_TRIAL_CAT_COST_INFO","SP_DA_S_TCCI_CURRENCY","STRING");
SP_DA_S_TCCI_CURRENCY.reader=sp_currency_reader;
SP_DA_S_TCCI_CURRENCY.modifier=sp_currency_modifier;
SP_DA_S_TCCI_CURRENCY.comment="Currency";

//Currency update at Trial level
method SP_propagate_currency on opxactivity(){
	fromobject(this){
		for(var cat in "opxSP_PT_TRIAL_CAT_COST_INFO" where cat.SP_NF_S_TCCI_COST_PHASING_TYPE!="Re-estimation"){
			if(cat.SP_AA_B_TCCI_NO_COST){
				cat.SP_AA_B_TCCI_NO_COST = false;
				cat.SP_AA_S_TCCI_CURRENCY = this.SP_AA_ACT_CUR_FILTER;
				cat.SP_AA_B_TCCI_NO_COST = true;
			}
			else{
				cat.SP_DA_S_TCCI_CURRENCY = this.SP_AA_ACT_CUR_FILTER;
			}
		}
	}
}

//Currency hanling by cost pop-up
function SP_handle_currency_on_trial_popup(){
	//At First initialization
	if(this.object.SP_AA_ACT_CUR_FILTER == ""){
		this.object.SP_propagate_currency();
		return;
	}
	
	//Void value is not allowed for Trial currency after first initialization
	if(this.editor.SP_AA_ACT_CUR_FILTER == ""){
		this.editor.SP_AA_ACT_CUR_FILTER=this.object.SP_AA_ACT_CUR_FILTER;
		return;
	}		
	
	//Because of impact on categories, trial currency update has to be confirmed by the user
	if(question("Currency change will be propagated to all cost categories. Do you confirm the currency update?")){
		//Currency update propagation on categories
		this.editor.apply();
		this.object.SP_propagate_currency();
	}
	else{
		//Trial currency update cancellation
		this.editor.SP_AA_ACT_CUR_FILTER=this.object.SP_AA_ACT_CUR_FILTER;
	}
}

//Define possible currencies in pick list of the cost pop up
function SP_get_available_currencies(){
	var v = new vector(); 
	v.push("KEuros");
	v.push("KCAD");
	v.push("KUSD");
	return v;
}


//----------------------------------------------- NO COST ------------------------------------------------

//At category level (Cost pop-up)

method SP_apply_no_cost_on_category on "opxSP_PT_TRIAL_CAT_COST_INFO"(){
	
	// > Reinitialisation of:
	// 	- Revised amount
	// 	- Currency (storage)
	// > Remove all planned expenditures from concerned category
	
	if(question("All costs of this category will be deleted, do you confirm the deletion?")){
		withoutlocking{		
			
			//Reset Currency
			//this.SP_AA_S_TCCI_CURRENCY="";
			
			//Reset Revised Amount
			this.SP_AA_N_TCCI_REV_AMT=0;
			
			//Reset Cost per subject
			this.SP_AA_N_TCCI_COST_PER_SUBJECT=0;
			
			//Remove all costs
			fromobject(this.SP_RA_TCCI_ACT_TRIAL){
			if(Question("Are you sure you want to delete the selected Planned expanditure.?"))
			{
				withoutalerts{
				for(var pe in "OpxFORECAST_EXPENDITURE" where pe.COST_ACCOUNT.Identifier == this.SP_RA_TCCI_COSTS_ACCOUNT.identifier){
					pe.delete();
				}
				}
				}
			}
			return true;
			
			//Reset "No Cost"
			this.SP_AA_B_TCCI_NO_COST=true;
		}
	}
	else{
		this.SP_AA_B_TCCI_NO_COST=false;
		return false;
	}
}

function SP_handle_no_cost_on_cost_popup(){

	//Function in "No cost" cell of Cost pop-up to manage "No cost" change
	
	this.editor.apply();
	if (this.editor.SP_AA_B_TCCI_NO_COST && !this.object.SP_RA_TCCI_ACT_TRIAL.SP_AA_B_CL_NO_COST){
		if(!this.object.SP_apply_no_cost_on_category()){
			this.SP_AA_B_TCCI_NO_COST = false;
		}
	}
}


//At Trial level (Trial pop-up)

method SP_apply_no_cost_on_trial on opxactivity(){
	
	//For all categories of the concerned activity:
	// > Reinitialisation of:
	// 	- Revised amount
	// 	- Currency (storage)
	// > Remove all planned expenditures
	
	if(question("All costs of the study will be deleted, do you confirm the deletion?")){
		fromobject(this){
			//Remove planned expenditures
			if(Question("Are you sure you want to delete the selected Planned expanditure.?"))
	{
		withoutalerts{
			for(var pe in "OpxFORECAST_EXPENDITURE"){
				pe.delete();
			}
			}
			}
			
			//Reset Cost categories
			for(var tcci in "OpxSP_PT_TRIAL_CAT_COST_INFO".findclass()){
				
				//Reset Currency
				//tcci.SP_AA_S_TCCI_CURRENCY="";
				
				//Reset Revised Amount
				tcci.SP_AA_N_TCCI_REV_AMT=0;
				
				//Reset Cost per Subject
				tcci.SP_AA_N_TCCI_COST_PER_SUBJECT=0;					
								
				//Reset "No Cost"
				tcci.SP_AA_B_TCCI_NO_COST=true;
			}
			return true;
		}
	}
	else
	{
		this.SP_AA_B_CL_NO_COST=false;
		return false;
	}
}

method SP_deactivate_no_cost_on_trial on opxactivity(){
	
	//Deactivate "No Cost" for concerned trial and all categories of the concerned activity
	this.SP_AA_B_CL_NO_COST=false;
	fromobject(this){
		for(var tcci in "OpxSP_PT_TRIAL_CAT_COST_INFO".findclass()) tcci.SP_AA_B_TCCI_NO_COST=false;
	}
}

function handle_no_cost_on_trial_popup(){

	//Function in "No cost" cell of Trial pop-up to manage "No cost" change

	this.editor.apply();
	if (this.editor.SP_AA_B_CL_NO_COST){
		if(!this.object.SP_apply_no_cost_on_trial()){
			this.editor.SP_AA_B_CL_NO_COST = false;
		}
	}
	else{
		this.object.SP_deactivate_no_cost_on_trial();
	}
}

//Indicate if costs are linked to concerned activity or one of its children
method SP_any_planned_expenditure_consolidated_by_activity on opxactivity(){
	fromobject(this){
		for(var act in opxactivity where act.SP_NF_B_ACT_NO_PLE) return false;
	}
	return true;
}

//------------------------------------------------ KTI -------------------------------------------------

//Display/hide KTI attributes on Clinical Costs Pop up
/*
function SP_DisplayKtiAttributes(sCostAccount){
	var selected_ca = "opxCost_Account".get(context.SP_AA_S_CTX_COSTS_CATEGORY_SELECTION);
	if(selected_ca == undefined) return false;
	//Check if "KTI activity attributes" is linked to selected Cost Account
	return selected_ca.callbooleanformula("from(\"" + sCostAccount + "\")");
}
SP_DisplayKtiAttributes.exportfunction({"string"},"boolean");
*/

//Compute occurences number of children activity with a specific activity type
function sp_ext_cost_count_act_typ(act_typ){
	var result=0;
	fromobject(This){
		for (var act in "OpxActivity" where act.WBS_TYPE.NAME==act_typ  ){
			result=result+1;
		}
	}
	return result;
}
sp_ext_cost_count_act_typ.exportfunction({"STRING"},"NUMBER");

//return theoretical sum of FTE created by metrics and linked to resource  CLIN-GRTM-LCRA 
function sp_calc_CRA_IN(){
	var vActTypesList = new vector();
	var vDistinctActTypesList;
	var act_typ_list="";
	var div=0;
	var result=0;
	var resource="";
	var vLCRA_Equations = new vector();
	
	//Get list of activity types linked to resource "CLIN-GRTM-LCRA" through equations
	resource=opxresource.get("CLIN-GRTM-LCRA");
	for(var equa in resource.get("r._PE_RA_EQUA_RES._PE_PT_EQUA_EQUATION") where equa._PE_AA_EQUA_ACTIVE){
		vActTypesList.push(equa._PE_DA_EQUA_FILTERFIELD1);
		vLCRA_Equations.push(equa);		
	}
	vDistinctActTypesList = vActTypesList.removeduplicates();
	act_typ_list = "\"" + vDistinctActTypesList.join("\",\"") + "\"";

	//Get theoritical FTEs applied by metrics on all children activities linked to resource "CLIN-GRTM-LCRA"
	fromobject(This)
	{
		//Identification of children activities linked to resource "CLIN-GRTM-LCRA"
		for (var act in "OpxActivity" where act.CallBooleanFormula(" WBS_TYPE IN ("+act_typ_list+") "))
		{
			//Identification of equations linked to these children activities and to resource "CLIN-GRTM-LCRA"
			for (var equa in vLCRA_Equations where equa._PE_DA_EQUA_FILTERFIELD1== act.WBS_TYPE.NAME)
			{
				if (act.CallBooleanFormula(equa._PE_AA_EQUA_BASEFILTER)){
					//Identification of "Number of hours per day"
					if (equa._PE_DA_EQUA_FIELD7=="SP_NF_CL_FR"){
						div=act.CallNumberFormula("SP_NF_CL_NB_DAYS_PER_YEAR_FR");
					}
					if (equa._PE_DA_EQUA_FIELD7=="SP_NF_CL_US"){
						div=act.CallNumberFormula("SP_NF_CL_NB_DAYS_PER_YEAR_US");
					}
					if (equa._PE_DA_EQUA_FIELD7=="SP_NF_CL_INT"){
						div=act.CallNumberFormula("SP_NF_CL_NB_DAYS_PER_YEAR_INT");
					}
					//Identification of FTE created by parsed equation and add to total sum
					result=result+(act.get(equa._PE_DA_EQUA_FIELD4+"_IN")/div);
				}
			}
		}
	}
	return result;
}
sp_calc_CRA_IN.exportfunction("","NUMBER");


//-------------------------------------- External CRA Rate (KTI) ---------------------------------------

//Get the highest CRO rate of linked "clinical countries"
function Sp_cl_calculate_cra_rate(){
	var act = this;
	var cra_rate=0;
	var ctry_list=new Vector();
	var result=0;
	if ((act!=undefined && act.SP_NF_CL_COUNTRY!="") && act Instanceof OpxActivity){
		ctry_list = act.SP_NF_CL_COUNTRY.parselist();
		if (ctry_list.length >0){
			for (var cty in ctry_list){
				var opx_cty = "OpxSP_PT_CL_COUNTRY".get(cty);
				if (opx_cty !=undefined){
					cra_rate=opx_cty.SP_AA_CRO_RATE;
					if (cra_rate>result){
						result=cra_rate;
					}
				}
			}
		}
	}
	return result;
}
Sp_cl_calculate_cra_rate.exportfunction("","NUMBER");

//Get currency linked to a specific currency
method SP_get_Currency_ID_for_category on opxactivity(category){	
	
	//category : name of concerned category	

	// var tcci = "opxSP_PT_TRIAL_CAT_COST_INFO".get(SP_get_TCCI_identifier(this.index,category));
	var tcci = "opxSP_PT_TRIAL_CAT_COST_INFO".get(SP_get_TCCI_identifier(this,category));
	if(tcci == undefined || tcci == ""){
		return "";
	}
	else{
		return tcci.SP_DA_S_TCCI_CURRENCY;
	}
}

//Get money conversion rate for a specifica category
method SP_get_conversion_rate_for_category on opxactivity(category){
	
	//category : name of concerned category	
	
	var cur_ID = this.SP_get_Currency_ID_for_category(category);
	if(cur_ID == "") return 0;
	var cur = "opxcost_unit".get(cur_ID);
	if(cur == undefined || cur == "") return 0;
	return cur.value;
}
SP_get_conversion_rate_for_category.exportfunction({"STRING"},"NUMBER");

//----------------------------------------- Cost activity -----------------------------------------------

//Get concerned Trial
method SP_get_Trial_activity on opxactivity(){
	if(this.SP_NF_CL_TRIAL) return this;
	return (this.level == 1) ? undefined : this.WBS_ELEMENT.SP_get_Trial_activity();
}

//Get an activity with a specific activity type in the upstream tree
method Sp_get_clin_activity_with_act_type on opxactivity(act_type){
	if((this.SP_NF_B_OBS_CLIN_ACT || this.SP_NF_B_CLIN_ACT) && this.Wbs_Type != "") {
		if(this.Wbs_Type.name == act_type) return this;
	}
	return (this.level == 1) ? undefined : this.WBS_ELEMENT.Sp_get_clin_activity_with_act_type(act_type);
}

//Method to check/fill in "Cost Activity" field on planned expenditure linked to concerned activity
method SP_check_cost_activity on opxactivity(category){
	// var ActNb = 0;
	if(category == "") return;
	fromobject(this){
		for(var ple in opxplannedexpenditure where ple.cost_account.index == category){
			if(ple.SP_AA_S_PLE_TMP_COST_ACT != ple.ACTIVITY.SP_NF_S_ACT_COSTS_ACT_CODE) ple.SP_AA_S_PLE_TMP_COST_ACT = ple.ACTIVITY.SP_NF_S_ACT_COSTS_ACT_CODE;
		}
	}
}

//Method used to update "ACTIVITY" field on planned expenditure when change occurs with the activity corresponding to the "Cost Activity" (SP_AA_S_PLE_TMP_COST_ACT)
method SP_get_activity_from_cost_code on opxplannedexpenditure(){
	
	//Get new cost code
	var cost_code = this.SP_AA_S_PLE_TMP_COST_ACT;

	if(cost_code != ""){
		//Get Trial activity
		var root_act = opxactivity.get(context.SP_AA_S_CTX_COST_POP_UP_ACT);
		if(root_act instanceof opxactivity){
			fromobject(root_act){
				for(var act in opxactivity){
					if(cost_code == act.SP_NF_S_ACT_COSTS_ACT_CODE.trim(" ")) return act.index;
				}
			}
		}
	}
	
	//If any activity is linked to the new cost code
	return this.ACTIVITY.index;
}
SP_get_activity_from_cost_code.exportfunction("","STRING");

//Check "Cost code" consistency with "Activity"
method SP_check_cost_code_consistency_with_activity_NOK on opxplannedexpenditure(){
	return (this.SP_AA_S_PLE_TMP_COST_ACT == this.activity.SP_NF_S_ACT_COSTS_ACT_CODE.trim(" ")) ? false : true;
}

//Check new value of "Cost activity" field in the cost pop-up
method SP_cancel_ple_creation_through_cost_popup_with_wrong_cost_code on opxplannedexpenditure(){

	//Check creation method: if it is created by parametric equation, the context field SP_AA_B_AL_LO_ACTIVE is set to TRUE
	if(context.SP_AA_B_AL_LO_ACTIVE) return false;

	//Check currency
	if(this.SP_AA_S_TCCI_CURRENCY == "") return true;

	//Get cost code
	var cost_code = this.SP_AA_S_PLE_TMP_COST_ACT;
	if(cost_code == "") return true;

	//Get "root activity" : the activity selected to display cost pop-pup (trial or project/partnership activity)
	var root_act = opxactivity.get(context.SP_AA_S_CTX_COST_POP_UP_ACT);
	if(root_act == "") return true;

	//Check that activity linked to the concerned planned expenditure belongs to "root activity"
	if(root_act instanceof opxactivity){
		fromobject(root_act){
			for(var act in opxactivity){
				if(cost_code == act.SP_NF_S_ACT_COSTS_ACT_CODE.trim(" ")) return false;
			}
		}
	}
	
	return true;
}
SP_cancel_ple_creation_through_cost_popup_with_wrong_cost_code.exportfunction("","BOOLEAN");



//------------------------------------ Cost activity pick list ------------------------------------------

//Save a vector of cost codes corresponding to a list of activities into the context variable "CostActPossibleValuesVector"
method SP_save_possible_values_for_cost_act_code on opxactivity(){
	var vPossibleValues = new vector();
	if(!this.SP_NF_B_ACT_NO_PLE) vPossibleValues.push(this.SP_NF_S_ACT_COSTS_ACT_CODE.trim(" "));
	fromobject(this){
		for(var act in opxactivity where act.SP_NF_B_OBS_CLIN_ACT && act.SP_NF_B_ACT_NO_PLE order by {"PlannedStart"}) vPossibleValues.push(act.SP_NF_S_ACT_COSTS_ACT_CODE.trim(" "));		
	}
	context.CostActPossibleValuesVector=vPossibleValues;
}


//Function given to "Addpossiblevalueshandler" of Cost pop-up to initiate pick list of "Cost activity" field (in planned expenditures table) from context variable "CostActPossibleValuesVector"
function SP_get_possible_activity_cost_codes(slot){
	
	//Cost activity	
	var cost_activity_code_field = opxplannedexpenditure.getslotbyid("SP_AA_S_PLE_TMP_COST_ACT"); //SP_DA_S_PLE_COST_ACTIVITY
	if(cost_activity_code_field == slot) return context.CostActPossibleValuesVector;
		
	//Duration computation
	var list_DC = new vector();
	list_DC.push("Extendible");
	list_DC.push("Fixed dates");
	list_DC.push("Lag-during");
	var cost_activity_code_field = opxplannedexpenditure.getslot("DURATION_COMPUTATION");
	if(cost_activity_code_field == slot) return list_DC;
	return false;
}



//-------------------------------------- Cost phasing type ----------------------------------------------

//Manual reestimation
method SP_switch_to_manual_mode on opxplannedexpenditure(){
	
	//Set "Equation override" to true for all planned expenditures having the same linked activity and the same linked cost account
	
	var onb_category = this.cost_account.onb;
	
	//Get the Trial to which belongs currrent activity
	var trial = opxactivity.get(this.ACTIVITY.SP_NF_CL_TRIAL_ID);	
	if (!(trial instanceof opxactivity)) return false;
	fromobject(trial){
		for(var ple in opxplannedexpenditure where ple.cost_account.onb == onb_category) ple.equation_override = TRUE;
	}
	context.SP_AA_B_AL_LO_ACTIVE = false;
	return true;
}

method SP_switch_to_manual_mode on "OpxSP_PT_TRIAL_CAT_COST_INFO"(){
	
	//Set "Equation override" to true for all planned expenditures having the same linked activity and the same linked cost account
	
	var onb_category = this.SP_RA_TCCI_COSTS_ACCOUNT.onb;
	var trial = this.SP_RA_TCCI_ACT_TRIAL;
	
	if (!(trial instanceof opxactivity)) return false;
	fromobject(trial){
		for(var ple in opxplannedexpenditure where ple.cost_account.onb == onb_category) ple.equation_override = TRUE;
	}
	return true;
}

//Display on cost pop-up
method SP_display_cost_phasing_type on "OpxSP_PT_TRIAL_CAT_COST_INFO"(){
		
	//Display only in case of planned expenditure presence
	
	if !(this.SP_RA_TCCI_ACT_TRIAL instanceof opxactivity) return false;
	var trial = this.SP_RA_TCCI_ACT_TRIAL;
	if !(this.SP_RA_TCCI_COSTS_ACCOUNT instanceof opxcost_account) return false;
	var category = this.SP_RA_TCCI_COSTS_ACCOUNT;
	fromobject(trial){
		for(var ple in opxplannedexpenditure where ple.cost_account == category) return true
	}
	return false;
}

//Compute "Cost Phasing" Type
method SP_get_cost_phasing_type on "OpxSP_PT_TRIAL_CAT_COST_INFO"(){
		
	//If "No Cost" option is ticked, it is neither "Metrics" phase nor "Re-estimation" phase
	if(this.SP_AA_B_TCCI_NO_COST) return "";
	
	//If "Revised amount" has been initialized (to another value then 0)
	if((this.SP_AA_N_TCCI_REV_AMT instanceof NUMBER) && (this.SP_AA_N_TCCI_REV_AMT > 0 )) return "Re-estimation";
	
	//Get Trial activity (or linked activity for "Partnership_Cost" and "Project_Cost")
	if !(this.SP_RA_TCCI_ACT_TRIAL instanceof opxactivity){
		//If any activity is linked to Trial-Category Cost Information, there is a problem
		var msg = "/!\ Trial-Category Cost Information \"" + this.index + "\" is linked to any activity !!!!";
		writeln(msg);
		return msg;
	}
	var trial = this.SP_RA_TCCI_ACT_TRIAL;
	
	//Get Cost Category (= CostAccount)
	if !(this.SP_RA_TCCI_COSTS_ACCOUNT instanceof opxcost_account){
		//If any activity is linked to Trial-Category Cost Information, there is a problem
		var msg = "/!\ Trial-Category Cost Information \"" + this.index + "\" is linked to any cost account !!!!";
		writeln(msg);
		return msg;
	}
	var category = this.SP_RA_TCCI_COSTS_ACCOUNT;
	
	//Check first planned expenditure linked to Trial (or linked activity for "Partnership_Cost" and "Project_Cost")
	// /!\ Pre-requisit : all planned expenditures of one cost category inside a trial have the same value for "equation_override" field
	fromobject(trial){
		for(var ple in opxplannedexpenditure where ple.cost_account == category){
			if(ple.equation_override) return "Re-estimation";
			return "Metrics";
		}
	}
	return "";
}
SP_get_cost_phasing_type.exportfunction("","STRING");


//-------------------------------------- Metric Amount / Cost consolidation ----------------------------------------------

// Check that activity complies to equation filter
method SP_equation_filters_complied on "opx_PE_PT_EQUA_EQUATION"(act){
		
		// act : activity on which equation has to be applied
		
	//Parse each Filter Attribute 
	for(var EqFilterAtt in this.get("r._PE_RA_EQUA_EQFA._PE_PT_EQUA_EQFILATT")){
		//Check that concerned activity attribute value comply with filter attribute filter value 
		// Note : filter attribute name is saved in "Equation template filter attributes" table
		//"printattribute" is better then "get" in case of relation attribute
		if(act.printattribute(EqFilterAtt._PE_RA_EQUA_EQFA2.NAME) != EqFilterAtt._PE_AA_EQUA_FILATTVAL) return false;
	}
	
	//Check "Basic filter" compliance
	// alert("Basefilter = " + this._PE_AA_EQUA_BASEFILTER);
	// alert("Basefilter filtering = " + act.CallBooleanFormula(this._PE_AA_EQUA_BASEFILTER));
	if(!act.CallBooleanFormula(this._PE_AA_EQUA_BASEFILTER)) return false;
	
	//Return true if activity comply with all filtering conditions
	return true;
}

// Return vector of equations linked to a specific cost account
method SP_get_linked_equations on opxcostaccount(){
		
	var vEquas = new vector();
	
	//Identification of active "Create" equations linked to concerned Trial-Category Cost Information
	for(var equa in this.get("r._PE_RA_EQUA_CBS._PE_PT_EQUA_EQUATION") where equa._PE_AA_EQUA_ACTIVE && equa._PE_RA_EQUA_EQET.getinternalvalue("_PE_AA_EQUA_TYP").tostring() == "1"){
		//Check that these equations are linked to "Planned expenditures" and "Activities" objects through their equation template 
		if(equa._PE_RA_EQUA_EQET._PE_RA_EQUA_STRTCL.NAME == "Activity" && equa._PE_RA_EQUA_EQET._PE_RA_EQUA_ACTCL.NAME == "Planned Expenditure") vEquas.push(equa);
	}
	
	return (vEquas.length == 0) ? "" : vEquas;	
}

//Check if at least one active equation is linked to Trial-Category Cost Information
method SP_is_linked_to_equation on "opx_SP_PT_TRIAL_CAT_COST_INFO"(){
	//Identification of active "Create" equations linked to concerned Trial-Category Cost Information
	for(var equa in this.SP_RA_TCCI_COSTS_ACCOUNT.get("r._PE_RA_EQUA_CBS._PE_PT_EQUA_EQUATION") where equa._PE_AA_EQUA_ACTIVE && equa._PE_RA_EQUA_EQET.getinternalvalue("_PE_AA_EQUA_TYP").tostring() == "1") return true;
	return false;
}
SP_is_linked_to_equation.exportfunction("","BOOLEAN","Return true if cost information is linked to at least one parametric equation through cost category (cost account)");

//Return consolidation of field "Quantity" computed by specific equations on a specific activity
//Pre-requisit : only one equation could be applied on a specific activity for a specific cost account
method SP_get_quantity_conso on opxactivity(vEquations){
	
	// vEquations : vector of concerned equations
	
	var conso = 0;
	
	// Parse equations
	for(var equa in vEquations){
		//Check equation filters compliance
		if(equa.SP_equation_filters_complied(this)){
			// alert("Equation \"" + equa.name + "\" complied");
			
			//Add "Quantity" to the consolidation
			for(var EqActionAtt in equa.get("r._PE_RA_EQUA_EQAA._PE_PT_EQUA_EQACTATT") where EqActionAtt._PE_RA_EQUA_EQAA2.NAME=="Quantity" && EqActionAtt._PE_AA_EQUA_ACTATTVAL != ""){
				//only one equation could be applied on a specific activity for a specific cost account
				return this.callnumberformula(EqActionAtt._PE_AA_EQUA_ACTATTVAL);				
				
				//If it would not be the case:
				//conso=conso + this.callnumberformula(EqActionAtt._PE_AA_EQUA_ACTATTVAL);
				//break;
			}
		}
	}
	
	//Return consolidation
	return conso;
}

//Return consolidation of field "Quantity" computed by specific equations on all activities of the trial
method SP_get_metric_amount on "OpxSP_PT_TRIAL_CAT_COST_INFO"(){ 
	
	//Relevant equations identification
	var vEquations = this.SP_RA_TCCI_COSTS_ACCOUNT.SP_get_linked_equations();
	if(vEquations == "") return 0;
	
	//Consolidate equations simulations results
	var conso = 0;
	
	//In case of Trial, all children activities are concerned
	if (this.SP_RA_TCCI_ACT_TRIAL.SP_NF_CL_TRIAL){
		var trial = this.SP_RA_TCCI_ACT_TRIAL;
		fromobject(trial){
			for(var act in opxactivity){
				conso = conso + act.SP_get_quantity_conso(vEquations);
			}
		}
	}
	//In case of PROJECT or PARTNERSHIP, only linked activity is concerned
	else{
		var act = this.SP_RA_TCCI_ACT_TRIAL;
		conso = act.SP_get_quantity_conso(vEquations);
	}
	return conso;
}
SP_get_metric_amount.exportfunction("","NUMBER","Return consolidation of field \"Quantity\" of planned expenditures that would be created by equations if they were applied on all activities of the concerned trial")

//Get sum of planned expenditures quantities linked to one Trial-Category Cost Information
method SP_get_sum_of_planned_expenditures_quantity on "OpxSP_PT_TRIAL_CAT_COST_INFO"(){
	
	var conso = 0;
	
	//Parse planned expenditures from conceened trial
	fromobject(this.SP_RA_TCCI_ACT_TRIAL){
		for(var pe in opxplannedexpenditure where pe.COST_ACCOUNT.index == this.SP_RA_TCCI_COSTS_ACCOUNT.index){
			conso = conso + pe.quantity;
		}
	}
	return conso;
}
SP_get_sum_of_planned_expenditures_quantity.exportfunction("","NUMBER","Return consolidation of field \"Quantity\" of planned expenditures linked to activities of the concerned trial");



//-------------------------------------- Parametric Equation ----------------------------------------------

//Check if activity belongs to a Trial, if equation could apply on a specific cost category and specific study leadership
//method SP_costs_equations_conditions_linked_to_trial_checked on opxactivity(cost_category,study_leadership,position){
method SP_costs_equations_conditions_linked_to_trial_checked on opxactivity(cost_category,study_leadership,position,other_filter){
	
	// /!\ this function works only if it is used in external cost equations (SP_CL_EXT_COST...) where another condition is defined on a specific activity type : 
	//		> this function works only if current activity ("this") is linked to this specific activity type) !!!!
	
	//Check concerned activity belongs to a trial
	var trial = this.SP_get_Trial_activity();
	if(trial == undefined) return false;

	//Check currency selection at trial level
	if(trial.SP_AA_ACT_CUR_FILTER == "") return false;
	
	//Check "No Cost" at trial level
	if(trial.SP_AA_B_CL_NO_COST) return false;

	//Check study leadership
	if (!trial.callbooleanformula("belongs(\"Study Leadership\",\"" + study_leadership + "\")")) return false;		
	
	//Check Cost Category conditions
	if !trial.SP_get_TCCI_boolean_value(cost_category,"SP_NF_B_TCCI_APPLY_EQUATIONS") return false;

	//Check activity position
	if(position != ""){
		fromobject(trial){
			// /!\ Method "SP_costs_equations_conditions_linked_to_trial_checked" is executed on activity with specific activity type
			if(position == "Last"){
				for (var act in "OpxActivity".findclass() where act.WBS_TYPE==this.WBS_TYPE order by {{"INVERSE","PF"}}){	
					if (act.onb != this.onb) return false;
					break;
				}
			}
			else{			
				for (var act in "OpxActivity".findclass() where act.WBS_TYPE==this.WBS_TYPE order by {"PS"}){				
					//"act" is the FIRST activity (on time scale) of trial with the specific activity type
					if (act.onb == this.onb){
						//Current activity (on which is executed this method) is the "initial" activity (= first activity in time scale)
						if(position == "Additional") return false;
					}
					else{
						//Current activity (on which is executed this method) is NOT the "initial" activity (= first activity in time scale)
						if(position == "First") return false;
					}
					//Other activities do not matter
					break;
				}
			}
		}
	}

	//Check other conditions
	if(other_filter != ""){
		if(!trial.callbooleanformula(other_filter)) return false;
	}

	//If all conditions are checked:
	return true;
}

SP_costs_equations_conditions_linked_to_trial_checked.exportfunction({"STRING","STRING","STRING","STRING"},"BOOLEAN","Check if activity belongs to a Trial, if equation could apply on a specific cost category, on a specific study leadership and check activity position (\"\",\"First\",\"Additional\" or \"Last\") in trial compared to other activities with the same activity type, if trial comply to additional condition");


//Get currency value in euros for the given cost category
method sp_js_get_currency_value on opxactivity(category){
	var s_currency=this.SP_get_TCCI_string_value(category,"SP_DA_S_TCCI_CURRENCY");
	var o_currency="opxCOST_UNIT".get(s_currency);
	if(!(o_currency instanceof opxCOST_UNIT)) return 1;
	return (o_currency.VALUE == 0) ? 1 : o_currency.VALUE;
}
sp_js_get_currency_value.exportfunction({"STRING"},"NUMBER","Get currency value in euros for the given cost category"); 

//Get conversion factor
method SP_get_currency_conversion_factor on opxactivity(category){
	var result = this.sp_js_get_currency_value(category);
	return (result == 0) ? result : 1/result;
}
SP_get_currency_conversion_factor.exportfunction({"STRING"},"NUMBER","Get currency conversion factor to convert a value in euros into the currency given by the cost category of concerned trial"); 

method SP_get_logistics_costs_consolidation on opxactivity(log_categories,Months_Nb,sTrialFactor){
	
	// log_categories : list of logitics categories
	// Months_Nb : months number used to identifiy the "unit cost" through "Period" column
	// sTrialFactor : string to evaluate to get the factor to apply to unit cost(s)

	//Get concerned trial
	var trial = this.SP_get_Trial_activity();
	if !(trial instanceof opxactivity) return 0;

	//Check factor
	var iFactor = 1;
	if(sTrialFactor != "") iFactor = trial.callnumberformula(sTrialFactor);
	
	//Parse categories	to consolidate costs
	var conso = 0;
	for(var log_category in log_categories.parsevector()) conso += iFactor * trial.SP_get_logistics_cost_unit(log_category,Months_Nb);		
		
	//Return consolidation
	return conso;
}
SP_get_logistics_costs_consolidation.exportfunction({"STRING","NUMBER","STRING"},"NUMBER","Get logistics costs consolidation");

method SP_get_logistics_cost_unit on opxactivity(log_category,Months_Nb){
	
	// log_category : logitics category
	// Months_Nb : months number used to identifiy the "unit cost" through "Period" column

	//Get concerned trial
	var trial = this.SP_get_Trial_activity();
	if !(trial instanceof opxactivity) return 0;
	var vTrialGeoArea = trial.SP_NF_S_GEO_AREA.parsevector();

	//Parse logistic elements
	for(var unit_cost in "opxSP_PT_LOGISTICS_UNIT_COST" where unit_cost.SP_AA_S_LUC_CATEGORY == log_category){
		if(unit_cost.SP_cost_unit_compliance_checked(vTrialGeoArea,Months_Nb)) return unit_cost.SP_AA_N_LUC_UNIT_COST;
	}
	
	//Default return
	//writeln("Any unit cost found for category \"" + log_category + "\" in \"SP_PT_LOGISTICS_UNIT_COST\" table.");
	return 0;
	
}
// SP_get_logistics_cost_unit.exportfunction({"STRING","NUMBER"},"NUMBER","Get corresponding unit cost value");

method SP_cost_unit_compliance_checked on "opxSP_PT_LOGISTICS_UNIT_COST"(vTrialGeoArea,Months_Nb){
		
		// vTrialGeoArea : georgaphic area of concerned trial
		// Months_Nb : months number used to identifiy the "unit cost" through "Period" column
	
		//Check Geographic area
		if(this.SP_AA_S_LUC_GEO_AREA != ""){
			var bAtLeastOneCompliance = false;
			var bAtLeastOneNonCompliance = false;
			var ucga = this.SP_AA_S_LUC_GEO_AREA.parsevector();
		
			//Parse Trial Geographic area to compare elements to "Unit Cost" georgaphic areas
			for(var tga in vTrialGeoArea){
				if(ucga.position(tga) instanceof number) bAtLeastOneCompliance = true;
				else bAtLeastOneNonCompliance = true
			}
			
			//Check results
			if(bAtLeastOneCompliance){
				if(bAtLeastOneNonCompliance){
					if(ucga.position("North America") instanceof number) return false;
				}
			}
			else{
				return false;
			}
		}
		
		//Check Time period
		if(this.SP_AA_S_LUC_PERIOD != ""){
			var iPeriod = this.getinternalvalue("SP_AA_S_LUC_PERIOD").name.parseint();
			if(this.SP_AA_S_LUC_PERIOD.search("(>")  instanceof NUMBER){
				var min = iPeriod * 12;
				if(Months_Nb <= min) return false;
			}
			else{							
				var max = iPeriod * 12;
				var min = (iPeriod - 1) * 12;
				if(Months_Nb <= min || Months_Nb > max) return false;
			}
		}
			
		//Default return if all tests are checked
		return true;
}

// Check if geographic area of concerned trial is North America and/or Latin America
method SP_is_north_latin_america on opxactivity(){
	
	//Get concerned trial
	var trial = this.SP_get_Trial_activity();
	if !(trial instanceof opxactivity) return 0;
	
	//Check geographic area number
	var vTrialGeoArea = trial.SP_NF_S_GEO_AREA.parsevector();
	if(vTrialGeoArea.length > 2) return false;
	
	//Check geographic area content
	if (vTrialGeoArea.length == 1){
		if(trial.SP_NF_S_GEO_AREA == "North America" || trial.SP_NF_S_GEO_AREA == "Latin America") return true;
		else return false;
	}
	else{
		if(vTrialGeoArea.position("North America") instanceof number && vTrialGeoArea.position("Latin America") instanceof number) return true;
		else return false;
	}	
}
SP_is_north_latin_america.exportfunction("","BOOLEAN","Check if geaographic area of concerned trial is North America and/or Latin America");

// Compute Biostat workload

/*
method sp_get_BIOSTAT_workload on opxactivity(){
	var trial = this.SP_get_Trial_activity();
	if !(trial instanceof opxactivity) return 0;
	
	var i=0;
	fromobject(trial){

		for (var act in "OpxActivity" where act.CallBooleanFormula(" BELONGS(\"WBS_TYPE\",\"S_STAT,M_STAT\") ") order by {"PS"})i=i+1;
	}
	
	if(i == 0) return 0;

	if(trial.CallBooleanFormula("SP_RA_CL_STUDY_LEADERSHIP in (\"Clin. Dev.\",\"Med. Aff.\") and SP_NF_IS_PROG_OUTSOURCED and NOT SP_NF_IS_BIO_OUTSOURCED ") )	return 130 + (i-1)*25;
	
	if(trial.CallBooleanFormula(" SP_RA_CL_STUDY_LEADERSHIP in (\"Clin. Dev.\",\"Med. Aff.\") and SP_NF_IS_PROG_OUTSOURCED and SP_NF_IS_BIO_OUTSOURCED ") )	return 160 + (i-1)*25;
	
	if(trial.CallBooleanFormula("SP_RA_CL_STUDY_LEADERSHIP IN (\"Medical\")"))	return 25 + (i-1)*7;
		
}
sp_get_BIOSTAT_workload.exportfunction("","NUMBER");
*/

function sp_get_BIOSTAT_workload()
{
	var act=this;
	var trial_index;
	var trial;
	var result=0;
	var i=0;
	if (act instanceof opxactivity)
	{
		
		trial_index=act.sp_get_trial_id("");
		trial="OpxActivity".get(trial_index); 
		if(trial instanceof opxactivity)
		{
			fromobject(trial){

				for (var act_s in "OpxActivity".findclass() where act_s.CallBooleanFormula("BELONGS(\"WBS_TYPE\",\"S_STAT\")") order by {"PS"})
				{
					i=i+1;
				}
			}
			if (i>0)
			{
				if (trial.CallBooleanFormula("SP_RA_CL_STUDY_LEADERSHIP in (\"Clin. Dev.\",\"Medical US\") and SP_NF_IS_PROG_OUTSOURCED and NOT SP_NF_IS_BIO_OUTSOURCED") )
				{
					result=130 + (i-1)*25;
				}
				else
				{
					if (trial.CallBooleanFormula("SP_RA_CL_STUDY_LEADERSHIP in (\"Clin. Dev.\",\"Medical US\") and SP_NF_IS_PROG_OUTSOURCED and SP_NF_IS_BIO_OUTSOURCED") )
					{
						result=160 + (i-1)*25;
					}
					else
					{
						if (trial.CallBooleanFormula("SP_RA_CL_STUDY_LEADERSHIP IN (\"Medical\")"))
						{
							result=25 + (i-1)*7;
						}
						else
						{
							result=0;
						}
						
					}
					
				}
				
			}


		}
	}

	return result;	
	
}
withoutlocking
{
sp_get_BIOSTAT_workload.exportfunction("","NUMBER");
}

//Get currency value for the given currency
method sp_js_get_cost_unit_value on opxactivity(currency){
	var o_currency="opxCOST_UNIT".get(currency);
	if(!(o_currency instanceof opxCOST_UNIT)) return 1;
	return (o_currency.VALUE == 0) ? 1 : o_currency.VALUE;
}
sp_js_get_cost_unit_value.exportfunction({"STRING"},"NUMBER","Get currency value for the given currency"); 

method SP_get_metric_rate_usd on opxactivity(rate_category){

	//Get concerned trial
	var trial = this.SP_get_Trial_activity();
	if !(trial instanceof opxactivity) return 0;

	//Parse metric rate elements
	var metric_rate = "opxSP_PT_METRICS_RATE_USD".get(rate_category)

	if (metric_rate != undefined)
	{
		return metric_rate.SP_AA_N_MRU_RATE;
	}	

	//Default return
	//writeln("Any metric rate found for category \"" + rate_category + "\" in \"SP_PT_METRICS_RATE_USD\" table.");
	return 0;
}
SP_get_metric_rate_usd.exportfunction({"STRING"},"NUMBER","Get corresponding metric rate value");

method SP_get_metric_rate_usd_by_nb_site on opxactivity(rate_category){

	//Get concerned trial
	var trial = this.SP_get_Trial_activity();
	if !(trial instanceof opxactivity) return 0;
	var vTrialNbSite = trial.SP_NF_CL_INVESTIGATOR_PHASE_TRIAL;
	
	//Parse logistic elements
	for(var metric_rate in "opxSP_PT_METRICS_RATE_USD" where metric_rate.NAME == rate_category && vTrialNbSite <= metric_rate.SP_AA_N_MRU_UPPER_SITE && vTrialNbSite >= metric_rate.SP_AA_N_MRU_LOW_SITE){
		return metric_rate.SP_AA_N_MRU_RATE;
	}
	
	//Default return
	//writeln("Any metric rate found for category \"" + rate_category + "\" in \"SP_PT_METRICS_RATE_USD\" table.");
	return 0;
}
SP_get_metric_rate_usd_by_nb_site.exportfunction({"STRING"},"NUMBER","Get corresponding metric rate value");

// Check if geographic area of concerned trial is at least North America
method SP_is_north_america on opxactivity(){
	
	//Get concerned trial
	var trial = this.SP_get_Trial_activity();
	if !(trial instanceof opxactivity) return 0;
	
	//Check geographic area number
	var vTrialGeoArea = trial.SP_NF_S_GEO_AREA.parsevector();
	
	if(vTrialGeoArea.position("North America") instanceof number) return true;
	else return false;	
}
SP_is_north_america.exportfunction("","BOOLEAN","Check if geaographic area of concerned trial is at least North America");

/*
//Get the first activity among activities with specific activity type
method SP_get_field_from_first_activity_with_wbs_tpe on opxactivity(wbs_type){

	// wbs_type : activity type

	fromobject(this){
		for(var act in opxactivity where act.WBS_TYPE == wbs_type order by {"PS"})	return act;			
	}
}
//Get the last activity among activities with specific activity type
method SP_get_field_from_last_activity_with_wbs_tpe on opxactivity(wbs_type,field){

	// wbs_type : activity type

	fromobject(this){
		for(var act in opxactivity where act.WBS_TYPE == wbs_type order by {{"INVERSE","PF"}})	return act;
	}
}
*/

/*
//Get "Investigator Fees budget"
method SP_get_investigator_fees_budget on opxactivity(category){
	//Check concerned activity belongs to a trial
	var trial = this.SP_get_Trial_activity();
	if(trial == undefined) return 0;
	
	//Return result
	return (trial.SP_get_TCCI_number_value(category,"sp_aa_n_tcci_cost_per_subject") * trial.SP_NF_N_ACT_CL_TRIAL_EXP_SUB / 100);
	
}
SP_get_investigator_fees_budget.exportfunction({"STRING"},"NUMBER","Get Investigator Fees budget for the given cost category"); 
*/

//////////
//Method to compute the quantity for equation linked to study leadership clin dev and cost account Investigator_fees_IF and activity type S_COST
/////////
method sp_js_compute_clin_dev_quant_IF_INV_FEE on opxactivity ()
{
	var o_current_act = this;
	// getting the trial linked to the activity
	var o_trial = this.sp_get_Trial_activity();
	// if the object returned is not an activity we stop everything
	if !(o_trial instanceof opxactivity)
	{
		writetolog ("Error during the computation of the quantity for Investigator Fees, unable to get the trial linked to the activity ~a.",o_current_act.ID);
		return 0;
	}
	// Declaration of all the number variable that will store values.
	
	/* average rates*/
	var n_average_rate_site = 0;
	var n_average_rate_site_25 = 0;	
	var n_average_rate_phone = 0;
	var n_average_rate_subj = 0;
	var n_average_rate_vacc_subj = 0;
	var n_average_rate_vacc_05_subj = 0;
	var n_average_rate_visit_subj = 0;
	var n_average_rate_visit_1_subj = 0;
	var n_average_rate_blood = 0;
	var n_average_rate_overhead = 0;
	
	var n_nbr_countries = 0;
	/*result*/
	var n_quantity = 0;
	
	//Loop on geographic area for which we have at least 1 country
	for (var o_geo_area in "opxSP_PT_CL_GEO_AREA" where (o_trial.sp_cl_list_count_reg("SP_RING_CL_COUNTRY",o_geo_area.NAME)>0))
	{
		//computing averages going contry by country
		var v_countries = o_trial.sp_cl_contries_in_reg("SP_RING_CL_COUNTRY",o_geo_area.NAME).split(",");
		for (var s_country in v_countries)
		{
			var o_country = "opxSP_PT_CL_COUNTRY".get(s_country);
			if !(o_country instanceof opxSP_PT_CL_COUNTRY)
			{
				writetolog ("Error during the computation of the quantity for Investigator Fees, the country ~a can't be find in the country table.",s_country);
				return 0;
			}
			n_average_rate_site = n_average_rate_site + o_country.SP_AA_N_CLCO_RATE_SITE;
			n_average_rate_site_25 = n_average_rate_site_25 + o_country.SP_AA_N_CLCO_RA_SITE_25;	
			n_average_rate_phone = n_average_rate_phone + o_country.SP_AA_N_CLCO_RATE_PHONE_SUBJ;
			n_average_rate_subj = n_average_rate_subj + o_country.SP_AA_N_CLCO_RATE_SUBJ;
			n_average_rate_vacc_subj = n_average_rate_vacc_subj + o_country.SP_AA_N_CLCO_RATE_VACC_SUBJ;
			n_average_rate_vacc_05_subj = n_average_rate_vacc_05_subj + o_country.SP_AA_N_CLCO_RATE_VACC_05_SUBJ;
			n_average_rate_visit_subj = n_average_rate_visit_subj + o_country.SP_AA_N_CLCO_RATE_VISIT_SUBJ;
			n_average_rate_visit_1_subj = n_average_rate_visit_1_subj + o_country.SP_AA_N_CLCO_RATE_VISIT_1_SUBJ;
			n_average_rate_blood = n_average_rate_blood + o_country.SP_AA_N_CLCO_RATE_BLOOD_SUBJ;
			n_average_rate_overhead = n_average_rate_overhead + o_country.SP_AA_N_CLCO_RATE_OVERHEAD;
		}
		
		//now that the rate of every country has been added, dividing by the number of country.
		n_nbr_countries = o_trial.sp_cl_list_count_reg("SP_RING_CL_COUNTRY",o_geo_area.NAME);
		
		n_average_rate_site = n_average_rate_site/n_nbr_countries;
		n_average_rate_site_25 = n_average_rate_site_25/n_nbr_countries;	
		n_average_rate_phone = n_average_rate_phone/n_nbr_countries;
		n_average_rate_subj = n_average_rate_subj/n_nbr_countries;
		n_average_rate_vacc_subj = n_average_rate_vacc_subj/n_nbr_countries;
		n_average_rate_vacc_05_subj = n_average_rate_vacc_05_subj/n_nbr_countries;
		n_average_rate_visit_subj = n_average_rate_visit_subj/n_nbr_countries;
		n_average_rate_visit_1_subj = n_average_rate_visit_1_subj/n_nbr_countries;
		n_average_rate_blood = n_average_rate_blood/n_nbr_countries;
		n_average_rate_overhead = n_average_rate_overhead/n_nbr_countries;
		
		// computing the total quantity
		var n_nb_sites = o_trial.CallNumberFormula("SP_DA_N_CL_SITES_"+o_geo_area.SP_AA_S_CL_GEOAREA_NICKNAME);
		var n_nb_subj = o_trial.CallNumberFormula("SP_DA_N_CL_SUB_"+o_geo_area.SP_AA_S_CL_GEOAREA_NICKNAME);
		
		n_quantity=n_quantity+((n_average_rate_site*n_nb_sites)+(n_average_rate_site_25*n_nb_sites*25)+(n_average_rate_phone*o_trial.SP_AA_CL_PHONE_CALLS*n_nb_subj)+(n_average_rate_subj*n_nb_subj)+(n_average_rate_vacc_subj*o_trial.SP_AA_CL_VACCINATIONS*n_nb_subj)+(n_average_rate_vacc_05_subj*o_trial.SP_AA_CL_VACCINATIONS*0.5*n_nb_subj)+(n_average_rate_visit_subj*o_trial.SP_AA_CL_VISITS*n_nb_subj)+(n_average_rate_visit_1_subj*(o_trial.SP_AA_CL_VISITS-1)*n_nb_subj)+(n_average_rate_blood*o_trial.SP_AA_CL_BLOOD_DRAW*n_nb_subj))*(1+n_average_rate_overhead)*SP_get_currency_conversion_factor("Investigator_fees_IF");
		
		// reset of rates
		n_average_rate_site = 0;
		n_average_rate_site_25 = 0;	
		n_average_rate_phone = 0;
		n_average_rate_subj = 0;
		n_average_rate_vacc_subj = 0;
		n_average_rate_vacc_05_subj = 0;
		n_average_rate_visit_subj = 0;
		n_average_rate_visit_1_subj = 0;
		n_average_rate_blood = 0;
		n_average_rate_overhead = 0;
	}
	

	
	//once all geographical area have been treated we return the total result
	return n_quantity;
	
}
sp_js_compute_clin_dev_quant_IF_INV_FEE.exportfunction("","NUMBER","function computing the quantity for equations with Study leadership = Clin. Dev., cost account Investigator_fees_IF and activity type S_COST");

//////////
//Method to compute the quantity for equation linked to study leadership clin dev and cost account CRO_Fees_BS and activity type S_COST
/////////
method sp_js_compute_clin_dev_quant_CRO_Fees_BS on opxactivity ()
{
	var o_current_act = this;
	// getting the trial linked to the activity
	var o_trial = this.sp_get_Trial_activity();
	// if the object returned is not an activity we stop everything
	if !(o_trial instanceof opxactivity)
	{
		writetolog ("Error during the computation of the quantity for Investigator Fees, unable to get the trial linked to the activity ~a.",o_current_act.ID);
		return 0;
	}
	
	//china factor between fte and costs
	var n_china_factor = 75;
	// cost for statical analysis
	var n_init_stat_only_prog = 130;
	var n_add_stat_only_prog = 25;
	var n_init_stat_prog_stat = 160;
	var n_add_stat_prog_stat = 25;
	
	/*result*/
	var n_quantity = 0;
	
	// China case
	if (o_trial.CallBooleanFormula("SP_NF_B_PROG_STAT_FILTER and (SP_NF_IS_BIO_CHINA or SP_NF_IS_PROG_CHINA)"))
	{
		fromobject(o_trial)
		{
			for (var o_act in "opxactivity" where o_act.SP_NF_IS_BIO_CRO_FEES_CHINA)
			{
				n_quantity=n_quantity + o_act.SP_NF_N_BIO_CRO_FEES_CHN_WORKLOAD;
			}
		}
		// Multiplying the "China" quantity by a factor
		//n_quantity = n_quantity*n_china_factor;
		n_quantity = n_quantity*n_china_factor*SP_get_currency_conversion_factor("CRO_Fees_BS");
	}
	
	// Outsourced cases, it depend of the number of S_STAT activities.
	if (o_trial.callbooleanformula("SP_NF_IS_PROG_OUTSOURCED AND NOT SP_NF_IS_BIO_OUTSOURCED"))
	{
		var n_number_stat_act = o_trial.sp_js_count_act_with_act_type("S_STAT","");
		if (n_number_stat_act>0)
		{
			n_quantity=n_quantity+(n_init_stat_only_prog+(n_number_stat_act-1)*n_add_stat_only_prog)*SP_get_currency_conversion_factor("CRO_Fees_BS");
		}
	}
	if (o_trial.callbooleanformula("SP_NF_IS_PROG_OUTSOURCED AND SP_NF_IS_BIO_OUTSOURCED"))
	{
		var n_number_stat_act = o_trial.sp_js_count_act_with_act_type("S_STAT","");
		if (n_number_stat_act>0)
		{
			n_quantity=n_quantity+(n_init_stat_prog_stat+(n_number_stat_act-1)*n_add_stat_prog_stat)*SP_get_currency_conversion_factor("CRO_Fees_BS");
		}
	}
	return n_quantity;	
}
sp_js_compute_clin_dev_quant_CRO_Fees_BS.exportfunction("","NUMBER","function computing the quantity for equations with Study leadership = Clin. Dev., cost account CRO_Fees_BS and activity type S_COST");


writetolog("Script SP_JS_CL_COSTS_INFORMATION loaded with version ~a ", revision_number);

 
//  FILE    : SP_JS_CL_DATA_RECOVERY_CLINICAL.ojs
// 
//  AUTHOR  : YSA
// 
//  VERSION : 1.0
// 
//  PURPOSE : V6 project: Data recovery Clinical metrics
// 
//  HISTORY :
//  Created  by YSA 17:51 29/12/2016
//  Modified  by YSA 17:26 21/12/2017
// Modified vy ckeita 15:05 23/12/2019 : modification of function SP_RA_CL_GROUP_CAT=> replace SP_RA_CL_SP_CATEGORY=SP_RA_CL_GROUP_CAT
// Modified vy ckeita 15:05 08/01/2019 : adding  funtion rdd_tempo_phase to recover activities phases. 
//

function rdd_tempo_phase()
{
var i =0;	
writeln("*****************starting rdd_tempo_phase *******************************");
	for(var o_project in "opxproject" where o_project.STATE=="Active"  && o_project.DELETED ==false)
	{
		fromobject(o_project)
		{
			for (var o_act in "opxactivity" where o_act.SP_RA_CL_CLIN_PHASE!="" && o_act.SP_RA_CL_CLIN_PHASE != undefined )
			{
				if(o_act.SP_RA_CL_CLIN_PHASE.NAME.toUpperCase()=="Not applicable".toUpperCase() || o_act.SP_RA_CL_CLIN_PHASE.NAME.toUpperCase()=="Epidemiology".toUpperCase() || o_act.SP_RA_CL_CLIN_PHASE.NAME.toUpperCase()=="Exploratory phase".toUpperCase())
				{
					i++;
					withoutlocking { withoutalerts {o_act.SP_RA_CL_CLIN_PHASE="opxSP_PT_CL_PHASE".get("N/A");}}
					writeln(o_act.PROJECT.name + " : " + "modification of activity (onb) : " + o_act.onb );
				}
			
			}
		}
	}
alert(i);
writeln("*****************END  rdd_tempo_phase *******************************");

}
function sp_checking_get_values_new(input_field,class_field,log,obj,field_name)
{
var result="";
var vec_trace;
var vec_value_fs=new vector();
var vec_fte_input=new vector();
var vec_value_result=new vector();
var value_f;
var class_f=class_field.findClass();
var vec_mapp= new vector(
"Com Ops","Global Medical",
"GMA central","Medical",
"GMA local","Medical",
"Adolescent (12-17 yrs)","Adolescent",
"Adult (>=18 yrs)","Adult",
"Adult (>=50 yrs)","Adult",
"Children (2-11 yrs)","Children",
"Children (2-5 yrs)","Children",
"Elderly (>65 yrs)","Elderly",
"Infant (<12 months)","Infant",
"Toddler (12-23 months)","Toddler",
"9-90 years","Adult",
"Adolescents (>=10 to 18)","Adolescent",
"Adults (18-60 y)","Adult",
"Children (2-18 yrs)","Children",
"outsourced","Outsourced",
" outsourced","Outsourced",
"outsourced ","Outsourced",
" Outsourced","Outsourced",
"Outsourced ","Outsourced"
);

if (class_f!=undefined && input_field!="")
{
	vec_value_fs=input_field.parsevector();
	
	for (var vv in vec_value_fs )
	{
		if (vec_mapp.get(vv) instanceof STRING)
		{
			vec_value_result.push(vec_mapp.get(vv));
			if (vv=="9-90 years")
			{
				vec_value_result.push("Adolescent");
			}	
		}
		else
		{
			vec_value_result.push(vv);
		}
	}

	for(var s in vec_value_result)
	{
		value_f=class_f.get(s);
		if (value_f != undefined && value_f.name instanceof STRING && value_f.name !="")
		{
			vec_fte_input.push(value_f.name);
		}
		else
		{
		vec_trace=new vector(obj,field_name,input_field,s);
		log.writeln(vec_trace.JOIN(";"));
		//WriteToLog("Error velue is not found for the field ~a",input_field);
		//WriteToLog("Error velue is ~a",s);					
		}
	}
	if (vec_fte_input.length>0)
	{
	result=vec_fte_input.removeduplicates().JOIN(",");
	}

}
return result;
	
}


function sp_cl_init_adm_kti_sites_ph(log)
{
WriteToLog("Start sp_cl_init_adm_kti_sites_ph");	
var ct_act=0;
var ct_ph=0;
var cpm_name;
var trial_index;
var trial;
var vec_log;
var obs_el="OpxRESPONSIBILITY".get("R&D - CLIN");
var ref_date=new DATE("01-JAN-18");
var population;

var vec_study=new vector("Clin. Dev.","Clin. Dev.",
"GMA central","Medical",
"GMA local","Medical",
"Epi","HEOR (Health Economy Outcome Research)",
"PharmacoEpi","PharmacoEpi",
"Med. Aff.","Medical US",
"SP MSD","SP MSD",
"Transfer to HEOR","Transferred to HEOR"
);


var all_population= new vector("9-90 years",
"Adolescent (12-17 yrs)",
"Adolescents (>=10 to 18)",
"Adult (>=18 yrs)",
"Adult (>=50 yrs)",
"Adults (18-60 y)",
"At Risk population",
"Children (2-11 yrs)",
"Children (2-18 yrs)",
"Children (2-5 yrs)",
"Elderly (>65 yrs)",
"Infant (<12 months)",
"Toddler (12-23 months)",
"Traveler",
"Unspecified",
"Adolescent",
"Adult",
"Children",
"Elderly",
"Infant",
"Toddler");

var all_pop_del= new vector("9-90 years",
"Adolescent (12-17 yrs)",
"Adolescents (>=10 to 18)",
"Adult (>=18 yrs)",
"Adult (>=50 yrs)",
"Adults (18-60 y)",
"Children (2-11 yrs)",
"Children (2-18 yrs)",
"Children (2-5 yrs)",
"Elderly (>65 yrs)",
"Infant (<12 months)",
"Toddler (12-23 months)");

var vec_new_fund= new vector (
"Com Ops",
"Global Medical",
"Regional Medical AMEE",
"Regional Medical AsiaPac",
"Regional Medical China",
"Regional Medical Europe",
"Regional Medical LATAM",
"Regional Medical NA",
"HEOR (Health Economy Outcome Research)")


var vec_exist_f= new vector ();
//writeln("Data recovery starting ...");
//writeln("Drivers Initialization");
//writeln("Trial KTI + FTE sites Drivers Initialization");
//writeln("Equation_overrride=true for all estimated planned hours");


if(obs_el instanceof OpxRESPONSIBILITY)
{

// pupulate geographic area field
for (var cc in "OpxSP_PT_CL_COUNTRY".findclass())
{
	if (cc.SP_AA_S_GEO_AREA=="North America Region"){
		cc.SP_AA_S_GEO_AREA="North America";
	}
	//WriteToLog("Populate geaographic Area on ~a",cc);
	cc.SP_RA_CL_GEO_AREA=sp_checking_get_values_new(cc.SP_AA_S_GEO_AREA,"OpxSP_PT_CL_GEO_AREA",log,cc.name,"SP_AA_S_GEO_AREA");	
}


//delete pharma chine and Canada cl site

for (var rs in "OpxSP_PT_CL_SITES" where (rs.name=="Pharma" || rs.name=="Pharma-China" || rs.name=="Canada"))
{
	//WriteToLog("delete reousce site ~a",rs);
	rs.delete();
}

//Adding new values for funding pick list
for (var pf in "OpxSP_PT_CL_FUNDING".findclass())
{
vec_exist_f.push(pf.name);	
}
for (var nf in vec_new_fund where !(vec_exist_f.position(nf) instanceof NUMBER))
{
	new OpxSP_PT_CL_FUNDING
	("NAME",nf,
	"DESC",nf,
	"FILE","COM_CLIN");
}

// Update population values

for (var pp in all_population)
{
population="OpxSPAS_PT_POPULATION".get(pp);
	
if ( !(population instanceof OpxSPAS_PT_POPULATION))
{
new OpxSPAS_PT_POPULATION
("NAME",pp,
"DESC",pp,
"FILE","COM_XBS");
}
	
}


fromobject(obs_el)
{
	
	for (var act in "OpxActivity".findClass() where (act.project.STATE=="Active" && act.SP_NF_B_CLIN_ACT && act.wbs_type instanceof OpxWBS_TYPE))
	{
		ct_act=ct_act+1;
		
		
		if (act.SP_NF_CL_TRIAL)
		{
			//trial kti updating
			//WriteToLog("Populate kti on ~a",act);
			
			if 	("OpxRESOURCE".get(act.SP_AA_TRIAL_CPM_NAME) instanceof OpxRESOURCE)
			{
				act.SP_RA_TRIAL_CPM_NAME=act.SP_AA_TRIAL_CPM_NAME;	
			}
			else
			{
				//resource with name xxxxxxx_old
				cpm_name=act.SP_AA_TRIAL_CPM_NAME+"_OLD";
				cpm_name="OpxRESOURCE".get(cpm_name);
				if 	(cpm_name instanceof OpxRESOURCE)
				{
					act.SP_RA_TRIAL_CPM_NAME=cpm_name;	
				}
				else
				{
					
					vec_log=new vector(act.printattribute("ID"),"SP_AA_TRIAL_CPM_NAME",act.SP_AA_TRIAL_CPM_NAME,"Empty or not found");
					log.writeln(vec_log.JOIN(";"));
					act.SP_RA_TRIAL_CPM_NAME="";
					//WriteToLog("CPM NAME is empty on the following Trial ~a",act);					
				}
			}
			if (vec_study.get(act.SP_AA_CL_STUDY_LEADERSHIP) instanceof STRING)
			{
				act.SP_RA_CL_STUDY_LEADERSHIP=sp_checking_get_values_new(vec_study.get(act.SP_AA_CL_STUDY_LEADERSHIP),"OpxSP_PT_CL_STD_LEADERSHIP",log,act.printattribute("ID"),"SP_AA_CL_STUDY_LEADERSHIP");
			}
			
			act.SP_RING_CL_SPONSORSHIP=sp_checking_get_values_new(act.SP_AA_CL_SPONSORSHIP,"OpxSP_PT_CL_SPONSOR",log,act.printattribute("ID"),"SP_AA_CL_SPONSORSHIP");
			act.SP_RA_CL_FUNDING=sp_checking_get_values_new(act.SP_AA_CL_FUNDING,"OpxSP_PT_CL_FUNDING",log,act.printattribute("ID"),"SP_AA_CL_FUNDING");
			act.SP_RA_CL_CLIN_PHASE=sp_checking_get_values_new(act.SP_AA_CL_CLIN_PHASE,"OpxSP_PT_CL_PHASE",log,act.printattribute("ID"),"SP_AA_CL_CLIN_PHASE");
			act.SP_RING_CL_OBJECTIVES=sp_checking_get_values_new(act.SP_AA_CL_OBJECTIVES,"OpxSP_PT_CL_OBJECTIVES",log,act.printattribute("ID"),"SP_AA_CL_OBJECTIVES");
			act.SP_RING_CL_POPULATION=sp_checking_get_values_new(act.SP_AA_CL_POPULATION,"OpxSPAS_PT_POPULATION",log,act.printattribute("ID"),"SP_AA_CL_POPULATION");
			act.SP_RA_CL_GROUP_CAT=sp_checking_get_values_new(act.SP_AA_S_STUDY_CAT,"OpxSP_PT_CL_SP_CAT",log,act.printattribute("ID"),"SP_AA_S_STUDY_CAT");
			act.SP_RING_CL_COUNTRY=sp_checking_get_values_new(act.SP_AA_CL_LOCATION_TRIAL,"OpxSP_PT_CL_COUNTRY",log,act.printattribute("ID"),"SP_AA_CL_LOCATION_TRIAL");
			

		}
		else
		{

			if ((act.PF instanceof DATE) && (act.PF>ref_date))
			{
				//WriteToLog("Initialize Resource site on ~a",act);
				//Resource site fields

				if (act.SP_NF_B_CL_IS_ANALYST && act.SP_AA_CL_TRIAL_ANALYST!="") {
					//WriteToLog("Initialize resource site on field ~a","SP_AA_CL_TRIAL_ANALYST");
					act.SP_RING_CL_TRIAL_ANALYST=sp_checking_get_values_new(act.SP_AA_CL_TRIAL_ANALYST,"OpxSP_PT_CL_SITES",log,act.printattribute("ID"),"SP_AA_CL_TRIAL_ANALYST");

				}
				
				if (act.SP_NF_B_CL_IS_CPM && act.SP_AA_CL_CPM!="") {
					//WriteToLog("Initialize resource site on field ~a","SP_AA_CL_CPM");
					act.SP_RING_CL_CPM=sp_checking_get_values_new(act.SP_AA_CL_CPM,"OpxSP_PT_CL_SITES",log,act.printattribute("ID"),"SP_AA_CL_CPM");

				}
				
				if (act.SP_NF_B_CL_IS_CRA && act.SP_AA_CL_CRA!="") {
					//WriteToLog("Initialize resource site on field ~a","SP_AA_CL_CRA");
					act.SP_RING_CL_CRA =sp_checking_get_values_new(act.SP_AA_CL_CRA,"OpxSP_PT_CL_SITES",log,act.printattribute("ID"),"SP_AA_CL_CRA");

				}
				
				if (act.SP_NF_B_CL_IS_CTL && act.SP_AA_CL_CTL_CS!="") {
					//WriteToLog("Initialize resource site on field ~a","SP_AA_CL_CTL_CS");
					act.SP_RING_CL_CTL_CS =sp_checking_get_values_new(act.SP_AA_CL_CTL_CS,"OpxSP_PT_CL_SITES",log,act.printattribute("ID"),"SP_AA_CL_CTL_CS");

					
				}
				
				if (act.SP_NF_B_CL_IS_CTM && act.SP_AA_CL_CENTRAL_CRA!="") {
					//WriteToLog("Initialize resource site on field ~a","SP_AA_CL_CENTRAL_CRA");
					act.SP_RING_CL_CTM =sp_checking_get_values_new(act.SP_AA_CL_CENTRAL_CRA,"OpxSP_PT_CL_SITES",log,act.printattribute("ID"),"SP_AA_CL_CENTRAL_CRA");

				}
				
				if (act.SP_NF_B_CL_IS_C_COORD && act.SP_AA_CL_CPM_CC!="") {
					//WriteToLog("Initialize resource site on field ~a","SP_AA_CL_CPM_CC");
					act.SP_RING_CL_CPM_CC =sp_checking_get_values_new(act.SP_AA_CL_CPM_CC,"OpxSP_PT_CL_SITES",log,act.printattribute("ID"),"SP_AA_CL_CPM_CC");

				}
				
				if (act.SP_NF_B_CL_IS_DATA_MGR && act.SP_AA_CL_DATA_MANAGER!="") {
					//WriteToLog("Initialize resource site on field ~a","SP_AA_CL_DATA_MANAGER");
					act.SP_RING_CL_DATA_MANAGER  =sp_checking_get_values_new(act.SP_AA_CL_DATA_MANAGER,"OpxSP_PT_CL_SITES",log,act.printattribute("ID"),"SP_AA_CL_DATA_MANAGER");

				}
				
				if (act.SP_NF_B_CL_IS_DOCC && act.SP_AA_CL_CLINDOC!="") {
					//WriteToLog("Initialize resource site on field ~a","SP_AA_CL_CLINDOC");
					act.SP_RING_CL_CLINDOC=sp_checking_get_values_new(act.SP_AA_CL_CLINDOC,"OpxSP_PT_CL_SITES",log,act.printattribute("ID"),"SP_AA_CL_CLINDOC");

				}
				
				if (act.SP_NF_B_CL_IS_EDOC && act.SP_AA_CL_EDOC!="") {
					//WriteToLog("Initialize resource site on field ~a","SP_AA_CL_EDOC");
					act.SP_RING_CL_EDOC=sp_checking_get_values_new(act.SP_AA_CL_EDOC,"OpxSP_PT_CL_SITES",log,act.printattribute("ID"),"SP_AA_CL_EDOC");

				}
				
				if (act.SP_NF_B_CL_IS_GMA_MTL && act.SP_AA_CL_SPI_MTL!="") {
					//WriteToLog("Initialize resource site on field ~a","SP_AA_CL_SPI_MTL");
					act.SP_RING_CL_GMA_MTL=sp_checking_get_values_new(act.SP_AA_CL_SPI_MTL,"OpxSP_PT_CL_SITES",log,act.printattribute("ID"),"SP_AA_CL_SPI_MTL");

				}
				
				if (act.SP_NF_B_CL_IS_LOG_COORD && act.SP_AA_CL_LOG_COORDINATOR!="") {
					//WriteToLog("Initialize resource site on field ~a","SP_AA_CL_LOG_COORDINATOR");
					act.SP_RING_CL_LOG_COORD =sp_checking_get_values_new(act.SP_AA_CL_LOG_COORDINATOR,"OpxSP_PT_CL_SITES",log,act.printattribute("ID"),"SP_AA_CL_LOG_COORDINATOR");

				}
				
				if (act.SP_NF_B_CL_IS_LOG_MED_WRT && act.SP_AA_CL_MED_WRITER!="") {
					//WriteToLog("Initialize resource site on field ~a","SP_AA_CL_MED_WRITER");
					act.SP_RING_CL_MED_WRITER  =sp_checking_get_values_new(act.SP_AA_CL_MED_WRITER,"OpxSP_PT_CL_SITES",log,act.printattribute("ID"),"SP_AA_CL_MED_WRITER");

				}
				
				if (act.SP_NF_B_CL_IS_PMSL && act.SP_AA_CL_PMSL!="") {
					//WriteToLog("Initialize resource site on field ~a","SP_AA_CL_PMSL");
					act.SP_RING_CL_PMSL =sp_checking_get_values_new(act.SP_AA_CL_PMSL,"OpxSP_PT_CL_SITES",log,act.printattribute("ID"),"SP_AA_CL_PMSL");

				}
				
				if (act.SP_NF_B_CL_IS_PPO_COPM && act.SP_AA_CL_SPI_TRIAL_MANAGER!="") {
					//WriteToLog("Initialize resource site on field ~a","SP_AA_CL_SPI_TRIAL_MANAGER");
					act.SP_RING_CL_COPM =sp_checking_get_values_new(act.SP_AA_CL_SPI_TRIAL_MANAGER,"OpxSP_PT_CL_SITES",log,act.printattribute("ID"),"SP_AA_CL_SPI_TRIAL_MANAGER");

				}
				
				if (act.SP_NF_B_CL_IS_PROG && act.SP_AA_CL_PROGRAMMER!="") {
					//WriteToLog("Initialize resource site on field ~a","SP_AA_CL_PROGRAMMER");
					act.SP_RING_CL_PROGRAMMER=sp_checking_get_values_new(act.SP_AA_CL_PROGRAMMER,"OpxSP_PT_CL_SITES",log,act.printattribute("ID"),"SP_AA_CL_PROGRAMMER");

				}
				
				//if act.SP_NF_B_CL_IS_RCTM {act.SP_RING_CL_RCTM =sp_checking_get_values_new(act.SP_AA_CL_RCTM,"OpxSP_PT_CL_SITES");}
				if (act.SP_NF_B_CL_IS_REC_MGR && act.SP_AA_CL_RM!="") {
					//WriteToLog("Initialize resource site on field ~a","SP_AA_CL_RM");
					act.SP_RING_CL_REC_MGR=sp_checking_get_values_new(act.SP_AA_CL_RM,"OpxSP_PT_CL_SITES",log,act.printattribute("ID"),"SP_AA_CL_RM");

				}
				
				if (act.SP_NF_B_CL_IS_STAT && act.SP_AA_CL_STATISTICIAN!="") {
					//WriteToLog("Initialize resource site on field ~a","SP_AA_CL_STATISTICIAN");
					act.SP_RING_CL_STATISTICIAN=sp_checking_get_values_new(act.SP_AA_CL_STATISTICIAN,"OpxSP_PT_CL_SITES",log,act.printattribute("ID"),"SP_AA_CL_STATISTICIAN");

				}
				
				if (act.SP_NF_B_CL_IS_TRANSLAT && act.SP_AA_CL_TRANSLATOR!="") {
					//WriteToLog("Initialize resource site on field ~a","SP_AA_CL_TRANSLATOR");
					act.SP_RING_CL_TRANSLATOR=sp_checking_get_values_new(act.SP_AA_CL_TRANSLATOR,"OpxSP_PT_CL_SITES",log,act.printattribute("ID"),"SP_AA_CL_TRANSLATOR");

				}
				
			//init empty default site
			
				trial_index=act.sp_get_trial_id("");
				trial="OpxActivity".get(trial_index); 
				if (trial instanceof OpxActivity && trial.SP_RING_CL_COUNTRY=="" && trial.SP_AA_CL_LOCATION_TRIAL!="")
				{
					trial.SP_RING_CL_COUNTRY=sp_checking_get_values_new(trial.SP_AA_CL_LOCATION_TRIAL,"OpxSP_PT_CL_COUNTRY",log,act.printattribute("ID"),"SP_AA_CL_LOCATION_TRIAL");
			
				}
				act.sp_cl_init_act_def_res_sites();
			}	
		}
	
		//GCI Release Number 
		if (
		act.WBS_TYPE.name == "S_SAMP"  || act.WBS_TYPE.name == "S_SAMP-S" || 
			act.WBS_TYPE.name == "S_SAMP-E" || act.WBS_TYPE.name == "S_GCI-LAB" ||
			act.WBS_TYPE.name == "S_GCI-LAB-S" || act.WBS_TYPE.name == "S_GCI-LAB-E" ||
			act.WBS_TYPE.name == "S_IA_SAMP" || act.WBS_TYPE.name == "IDMC_SAMP")
		{
			if (act.NOTE_PAD=="")
			{
				vec_log=new vector(act.printattribute("ID"),"NOTE_PAD",act.NOTE_PAD,"Empty or not found");
				log.writeln(vec_log.JOIN(";"));
			}
			else
			{
				//WriteToLog("Populate GCI Release Number on ~a",act) GCIA1-191
				if (act.CallBooleanFormula("NOTE_PAD=\"*GCI*\""))
				{
				act.SP_CL_S_GCI_RELEASE=act.NOTE_PAD;
				}				
			}	

		}
		
	}
	

WriteToLog("Number of avtivity updated: "+ct_act);
WriteToLog("END sp_cl_init_adm_kti_sites_ph");
	
}

}
}
withoutlocking
{
sp_cl_init_adm_kti_sites_ph.exportfunction();
}



function sp_cl_init_act_def_res_sites()
{
var act=this;	
var nn_st;
var vec_re= new vector
("SP_RA_CL_SITES_ACT_CC",
"SP_RA_CL_SITES_ACT_CPM",
"SP_RA_CL_SITES_ACT_CTL",
"SP_RA_CL_SITES_ACT_CTM",
"SP_RA_CL_SITES_ACT_DM",
"SP_RA_CL_SITES_ACT_DOCC",
"SP_RA_CL_SITES_ACT_EDOCS",
"SP_RA_CL_SITES_ACT_GMAM",
"SP_RA_CL_SITES_ACT_LOCALC",
"SP_RA_CL_SITES_ACT_LOGC",
"SP_RA_CL_SITES_ACT_MW",
"SP_RA_CL_SITES_ACT_PMSL",
"SP_RA_CL_SITES_ACT_PPOC",
"SP_RA_CL_SITES_ACT_PROG",
"SP_RA_CL_SITES_ACT_RCTM",
"SP_RA_CL_SITES_ACT_RECM",
"SP_RA_CL_SITES_ACT_STAT",
"SP_RA_CL_SITES_ACT_TA",
"SP_RA_CL_SITES_ACT_TRANS");


if (
(act.SP_NF_B_CL_IS_ANALYST && act.SP_RING_CL_TRIAL_ANALYST=="") ||
(act.SP_NF_B_CL_IS_CPM && act.SP_RING_CL_CPM=="")||
(act.SP_NF_B_CL_IS_CRA && act.SP_RING_CL_CRA=="")||
(act.SP_NF_B_CL_IS_CTL && act.SP_RING_CL_CTL_CS=="") ||
(act.SP_NF_B_CL_IS_CTM && act.SP_RING_CL_CTM=="")||
(act.SP_NF_B_CL_IS_C_COORD && act.SP_RING_CL_CPM_CC=="") ||
(act.SP_NF_B_CL_IS_DATA_MGR && act.SP_RING_CL_DATA_MANAGER=="")||
(act.SP_NF_B_CL_IS_DOCC && act.SP_RING_CL_CLINDOC=="") ||
(act.SP_NF_B_CL_IS_EDOC && act.SP_RING_CL_EDOC=="") ||
(act.SP_NF_B_CL_IS_GMA_MTL && act.SP_RING_CL_GMA_MTL=="") ||
(act.SP_NF_B_CL_IS_LOG_COORD && act.SP_RING_CL_LOG_COORD=="") ||
(act.SP_NF_B_CL_IS_LOG_MED_WRT && act.SP_RING_CL_MED_WRITER=="") ||
(act.SP_NF_B_CL_IS_PMSL && act.SP_RING_CL_PMSL=="") ||
(act.SP_NF_B_CL_IS_PPO_COPM && act.SP_RING_CL_COPM=="") ||
(act.SP_NF_B_CL_IS_PROG && act.SP_RING_CL_PROGRAMMER=="") ||
(act.SP_NF_B_CL_IS_REC_MGR && act.SP_RING_CL_REC_MGR=="") ||
(act.SP_NF_B_CL_IS_STAT && act.SP_RING_CL_STATISTICIAN=="") ||
(act.SP_NF_B_CL_IS_TRANSLAT && act.SP_RING_CL_TRANSLATOR=="")
) {
	//WriteToLog("Initialyze default site on ~a",act);
	act.sp_cl_default_res_sites();
}	
	
			

}
withoutlocking
{
sp_cl_init_act_def_res_sites.exportfunction();
}



function sp_cl_update_allocations()
{
var act=this;
var ref_date=new DATE("01-JAN-18");
var ct_ph=0;

for(var ph in act.ALLOCATIONS where ((ph.COST_ACCOUNT instanceof OpxCOST_ACCOUNT) && (ph.RES instanceof OpxResource)&& (ph.COST_ACCOUNT.name=="FTE_ESTIMATED" || ph.COST_ACCOUNT.name=="FTE_METRICS") && ph.RES.SP_NF_B_IS_CL_RES))
{
	if ((ph.FD instanceof DATE) && (ph.FD<=ref_date))
	{
		ph.COST_ACCOUNT="FTE";
		//WriteToLog("Allocation is moved to manual ~a",ph);
		
	}
	else
	{
		ph.delete();
		//WriteToLog("Delete ~a",ph);
	}
	
ct_ph=ct_ph+1;
}
return ct_ph;		
}
withoutlocking
{
sp_cl_update_allocations.exportfunction();
}

function sp_clinical_data_recovery()
{
	WriteToLog("Start sp_clinical_data_recovery");
	var vec_header=new vector("Activity","Field","Input values","Error Values");

	var pathname = "/compassv6/data_recovery/output";
	var dir = mkdir(pathname);
	if (dir instanceof Boolean && dir)
	{
	alert("Directory ~a has been created".format(pathname));
	}

	var log = new fileoutputstream(pathname+"/clinical_data_recovery.csv","APPEND");
	if (! log instanceof fileoutputstream)
	{
	return 1;
	}
	  
	log.writeln(vec_header.JOIN(";"));
	context.callmacro("SP_JS_CL_DEACT_DEAMON");
	sp_cl_init_adm_kti_sites_ph(log);
	log.close();
	WriteToLog("End sp_clinical_data_recovery");
}
sp_clinical_data_recovery.exportfunction();


function sp_clinical_adm_deleted()
{

var all_pop_del= new vector("9-90 years",
"Adolescent (12-17 yrs)",
"Adolescents (>=10 to 18)",
"Adult (>=18 yrs)",
"Adult (>=50 yrs)",
"Adults (18-60 y)",
"Children (2-11 yrs)",
"Children (2-18 yrs)",
"Children (2-5 yrs)",
"Elderly (>65 yrs)",
"Infant (<12 months)",
"Toddler (12-23 months)");
var fund_del=new vector("Com Ops");

var std_leader=new vector("Epi");

// delete population p5 pick list values
for (var p in "OpxSPAS_PT_POPULATION".findclass() where (all_pop_del.position(p.name) instanceof NUMBER))
{
	
	//WriteToLog("Delete P5 population: "+p);
	p.delete();
}

for (var pf in "OpxSP_PT_CL_FUNDING".findclass() where (fund_del.position(pf.name) instanceof NUMBER))
{
	//WriteToLog("Delete P5 funding: "+pf);
	pf.delete();
}
for (var std in "OpxSP_PT_CL_STD_LEADERSHIP".findclass() where (std_leader.position(std.name) instanceof NUMBER))
{
	//WriteToLog("Delete P5 Study leadership: "+std);
	std.delete();
}

}
withoutlocking
{
withoutalerts
{
sp_clinical_adm_deleted.exportfunction();
}
}


function sp_clinical_set_code()
{

var vec_study_code=new vector("Clin. Dev.","CDV",
"HEOR (Health Economy Outcome Research)","HEO",
"Medical","MED",
"Medical US","GMA",
"PharmacoEpi","EPO",
"SP MSD","MSD",
"Transferred to HEOR","THE");

var vec_phase_code=new vector("Epidemiology","EPID",
"Exploratory phase","EXPL",
"Not applicable","N/A",
"Phase 1","PHA1",
"Phase 2a","PHA2A",
"Phase 2b","PHA2B",
"Phase 3","PHA3",
"Phase 4","PHA4");


for (var std in "OpxSP_PT_CL_STD_LEADERSHIP".findclass() where (vec_study_code.get(std.name) instanceof STRING) )
{
	std.SP_AA_S_CL_STD_LEAD_CODE=vec_study_code.get(std.name);
}

for (var pse in "OpxSP_PT_CL_PHASE".findclass() where (vec_phase_code.get(pse.name) instanceof STRING) )
{
	pse.SP_AA_S_CL_PHASE_CODE=vec_phase_code.get(pse.name);
}


}
withoutlocking
{
withoutalerts
{
sp_clinical_set_code.exportfunction();
}
}


function sp_init_gs_metrics()
{
var init_date=new date("01/01/2018");

context.SP_GS_D_CL_LAUNCH_METRICS=init_date;
context.SP_GS_D_BRD_LAUNCH_METRICS=init_date;
context.SP_GS_D_ARD_LAUNCH_METRICS=init_date;

return true;	
}
withoutlocking
{
withoutalerts
{
sp_init_gs_metrics.exportfunction();
}
}

function sp_all_data_rec_fte_allocations()
{
var ref_date=new DATE("01-JAN-18");
var fte_metric="OpxCOST_ACCOUNT".get("FTE_METRICS");	
var fte_estimated="OpxCOST_ACCOUNT".get("FTE_ESTIMATED");	
var cmpt_met=0;
var cmpt_est=0;
withoutalerts
{
if (fte_metric instanceof OpxCOST_ACCOUNT)
{
	fromobject(fte_metric)
	{
		for (var ph in "OpxALLOCATION".findclass() where ph.cost_account.name==fte_metric.name)
		{
			cmpt_met++;
			if ((ph.FD instanceof DATE) && (ph.FD<=ref_date))
			{
				ph.COST_ACCOUNT="FTE";
				//WriteToLog("Allocation is moved to manual ~a",ph);
			}
			else
			{
				ph.delete();
				//WriteToLog("Delete ~a",ph);
			}
		}
	}	
}

if (fte_estimated instanceof OpxCOST_ACCOUNT)
{
	fromobject(fte_estimated)
	{
		for (var ph in "OpxALLOCATION".findclass() where ph.cost_account.name==fte_estimated.name)
		{
			cmpt_est++;
			if ((ph.FD instanceof DATE) && (ph.FD<=ref_date))
			{
				ph.COST_ACCOUNT="FTE";
				//WriteToLog("Allocation is moved to manual ~a",ph);
			}
			else
			{
				ph.delete();
				//WriteToLog("Delete ~a",ph);
			}
		}
	}	
}
}
WriteToLog("Nb allocation fte metrics processed is ~a",cmpt_met);
WriteToLog("Nb allocation fte estimated processed is ~a",cmpt_est);
return true;	
}
withoutlocking
{
sp_all_data_rec_fte_allocations.exportfunction();
}

function sp_all_data_alloc_test_p5_v6()
{
var ref_date=new DATE("01-JAN-18");
var fte_metric="OpxCOST_ACCOUNT".get("FTE_METRICS");	
var fte_estimated="OpxCOST_ACCOUNT".get("FTE_ESTIMATED");	
var cmpt_met=0;
var cmpt_est=0;
withoutalerts
{
if (fte_metric instanceof OpxCOST_ACCOUNT)
{
	fromobject(fte_metric)
	{
		for (var ph in "OpxALLOCATION".findclass() where ph.cost_account.name==fte_metric.name)
		{
			cmpt_met++;
			if ((ph.FD instanceof DATE) && (ph.FD<=ref_date))
			{
				ph.COST_ACCOUNT="FTE";
				//WriteToLog("Allocation is moved to manual ~a",ph);
			}
			else
			{
				ph.delete();
				//WriteToLog("Delete ~a",ph);
			}
		}
	}	
}

if (fte_estimated instanceof OpxCOST_ACCOUNT)
{
	fromobject(fte_estimated)
	{
		for (var ph in "OpxALLOCATION".findclass() where ph.cost_account.name==fte_estimated.name)
		{
			cmpt_est++;
			if ((ph.FD instanceof DATE) && (ph.FD<=ref_date))
			{
				ph.COST_ACCOUNT="FTE";
				//WriteToLog("Allocation is moved to manual ~a",ph);
			}
			else
			{
				ph.EQUATION_OVERRIDE=true;
			}
		}
	}	
}
}
WriteToLog("Nb allocation fte metrics processed is ~a",cmpt_met);
WriteToLog("Nb allocation fte estimated processed is ~a",cmpt_est);
return true;	
}
withoutlocking
{
sp_all_data_alloc_test_p5_v6.exportfunction();
}




//  FILE    : SP_JS_CL_DATA_RECOVERY_CLINICAL.ojs
// 
//  AUTHOR  : YSA
// 
//  VERSION : 1.0
// 
//  PURPOSE : V6 project: Data recovery Clinical metrics
// 
//  HISTORY :
//  Created  by YSA 17:51 29/12/2016
//  Modified  by YSA 17:26 21/12/2017
// Modified vy ckeita 15:05 23/12/2019 : modification of function SP_RA_CL_GROUP_CAT=> replace SP_RA_CL_SP_CATEGORY=SP_RA_CL_GROUP_CAT
// Modified vy ckeita 15:05 08/01/2019 : adding  funtion rdd_tempo_phase to recover activities phases. 
//

function rdd_tempo_phase()
{
var i =0;	
writeln("*****************starting rdd_tempo_phase *******************************");
	for(var o_project in "opxproject" where o_project.STATE=="Active"  && o_project.DELETED ==false)
	{
		fromobject(o_project)
		{
			for (var o_act in "opxactivity" where o_act.SP_RA_CL_CLIN_PHASE!="" && o_act.SP_RA_CL_CLIN_PHASE != undefined )
			{
				if(o_act.SP_RA_CL_CLIN_PHASE.NAME.toUpperCase()=="Not applicable".toUpperCase() || o_act.SP_RA_CL_CLIN_PHASE.NAME.toUpperCase()=="Epidemiology".toUpperCase() || o_act.SP_RA_CL_CLIN_PHASE.NAME.toUpperCase()=="Exploratory phase".toUpperCase())
				{
					i++;
					withoutlocking { withoutalerts {o_act.SP_RA_CL_CLIN_PHASE="opxSP_PT_CL_PHASE".get("N/A");}}
					writeln(o_act.PROJECT.name + " : " + "modification of activity (onb) : " + o_act.onb );
				}
			
			}
		}
	}
alert(i);
writeln("*****************END  rdd_tempo_phase *******************************");

}
function sp_checking_get_values_new(input_field,class_field,log,obj,field_name)
{
var result="";
var vec_trace;
var vec_value_fs=new vector();
var vec_fte_input=new vector();
var vec_value_result=new vector();
var value_f;
var class_f=class_field.findClass();
var vec_mapp= new vector(
"Com Ops","Global Medical",
"GMA central","Medical",
"GMA local","Medical",
"Adolescent (12-17 yrs)","Adolescent",
"Adult (>=18 yrs)","Adult",
"Adult (>=50 yrs)","Adult",
"Children (2-11 yrs)","Children",
"Children (2-5 yrs)","Children",
"Elderly (>65 yrs)","Elderly",
"Infant (<12 months)","Infant",
"Toddler (12-23 months)","Toddler",
"9-90 years","Adult",
"Adolescents (>=10 to 18)","Adolescent",
"Adults (18-60 y)","Adult",
"Children (2-18 yrs)","Children",
"outsourced","Outsourced",
" outsourced","Outsourced",
"outsourced ","Outsourced",
" Outsourced","Outsourced",
"Outsourced ","Outsourced"
);

if (class_f!=undefined && input_field!="")
{
	vec_value_fs=input_field.parsevector();
	
	for (var vv in vec_value_fs )
	{
		if (vec_mapp.get(vv) instanceof STRING)
		{
			vec_value_result.push(vec_mapp.get(vv));
			if (vv=="9-90 years")
			{
				vec_value_result.push("Adolescent");
			}	
		}
		else
		{
			vec_value_result.push(vv);
		}
	}

	for(var s in vec_value_result)
	{
		value_f=class_f.get(s);
		if (value_f != undefined && value_f.name instanceof STRING && value_f.name !="")
		{
			vec_fte_input.push(value_f.name);
		}
		else
		{
		vec_trace=new vector(obj,field_name,input_field,s);
		log.writeln(vec_trace.JOIN(";"));
		//WriteToLog("Error velue is not found for the field ~a",input_field);
		//WriteToLog("Error velue is ~a",s);					
		}
	}
	if (vec_fte_input.length>0)
	{
	result=vec_fte_input.removeduplicates().JOIN(",");
	}

}
return result;
	
}


function sp_cl_init_adm_kti_sites_ph(log)
{
WriteToLog("Start sp_cl_init_adm_kti_sites_ph");	
var ct_act=0;
var ct_ph=0;
var cpm_name;
var trial_index;
var trial;
var vec_log;
var obs_el="OpxRESPONSIBILITY".get("R&D - CLIN");
var ref_date=new DATE("01-JAN-18");
var population;

var vec_study=new vector("Clin. Dev.","Clin. Dev.",
"GMA central","Medical",
"GMA local","Medical",
"Epi","HEOR (Health Economy Outcome Research)",
"PharmacoEpi","PharmacoEpi",
"Med. Aff.","Medical US",
"SP MSD","SP MSD",
"Transfer to HEOR","Transferred to HEOR"
);


var all_population= new vector("9-90 years",
"Adolescent (12-17 yrs)",
"Adolescents (>=10 to 18)",
"Adult (>=18 yrs)",
"Adult (>=50 yrs)",
"Adults (18-60 y)",
"At Risk population",
"Children (2-11 yrs)",
"Children (2-18 yrs)",
"Children (2-5 yrs)",
"Elderly (>65 yrs)",
"Infant (<12 months)",
"Toddler (12-23 months)",
"Traveler",
"Unspecified",
"Adolescent",
"Adult",
"Children",
"Elderly",
"Infant",
"Toddler");

var all_pop_del= new vector("9-90 years",
"Adolescent (12-17 yrs)",
"Adolescents (>=10 to 18)",
"Adult (>=18 yrs)",
"Adult (>=50 yrs)",
"Adults (18-60 y)",
"Children (2-11 yrs)",
"Children (2-18 yrs)",
"Children (2-5 yrs)",
"Elderly (>65 yrs)",
"Infant (<12 months)",
"Toddler (12-23 months)");

var vec_new_fund= new vector (
"Com Ops",
"Global Medical",
"Regional Medical AMEE",
"Regional Medical AsiaPac",
"Regional Medical China",
"Regional Medical Europe",
"Regional Medical LATAM",
"Regional Medical NA",
"HEOR (Health Economy Outcome Research)")


var vec_exist_f= new vector ();
//writeln("Data recovery starting ...");
//writeln("Drivers Initialization");
//writeln("Trial KTI + FTE sites Drivers Initialization");
//writeln("Equation_overrride=true for all estimated planned hours");


if(obs_el instanceof OpxRESPONSIBILITY)
{

// pupulate geographic area field
for (var cc in "OpxSP_PT_CL_COUNTRY".findclass())
{
	if (cc.SP_AA_S_GEO_AREA=="North America Region"){
		cc.SP_AA_S_GEO_AREA="North America";
	}
	//WriteToLog("Populate geaographic Area on ~a",cc);
	cc.SP_RA_CL_GEO_AREA=sp_checking_get_values_new(cc.SP_AA_S_GEO_AREA,"OpxSP_PT_CL_GEO_AREA",log,cc.name,"SP_AA_S_GEO_AREA");	
}


//delete pharma chine and Canada cl site

for (var rs in "OpxSP_PT_CL_SITES" where (rs.name=="Pharma" || rs.name=="Pharma-China" || rs.name=="Canada"))
{
	//WriteToLog("delete reousce site ~a",rs);
	rs.delete();
}

//Adding new values for funding pick list
for (var pf in "OpxSP_PT_CL_FUNDING".findclass())
{
vec_exist_f.push(pf.name);	
}
for (var nf in vec_new_fund where !(vec_exist_f.position(nf) instanceof NUMBER))
{
	new OpxSP_PT_CL_FUNDING
	("NAME",nf,
	"DESC",nf,
	"FILE","COM_CLIN");
}

// Update population values

for (var pp in all_population)
{
population="OpxSPAS_PT_POPULATION".get(pp);
	
if ( !(population instanceof OpxSPAS_PT_POPULATION))
{
new OpxSPAS_PT_POPULATION
("NAME",pp,
"DESC",pp,
"FILE","COM_XBS");
}
	
}


fromobject(obs_el)
{
	
	for (var act in "OpxActivity".findClass() where (act.project.STATE=="Active" && act.SP_NF_B_CLIN_ACT && act.wbs_type instanceof OpxWBS_TYPE))
	{
		ct_act=ct_act+1;
		
		
		if (act.SP_NF_CL_TRIAL)
		{
			//trial kti updating
			//WriteToLog("Populate kti on ~a",act);
			
			if 	("OpxRESOURCE".get(act.SP_AA_TRIAL_CPM_NAME) instanceof OpxRESOURCE)
			{
				act.SP_RA_TRIAL_CPM_NAME=act.SP_AA_TRIAL_CPM_NAME;	
			}
			else
			{
				//resource with name xxxxxxx_old
				cpm_name=act.SP_AA_TRIAL_CPM_NAME+"_OLD";
				cpm_name="OpxRESOURCE".get(cpm_name);
				if 	(cpm_name instanceof OpxRESOURCE)
				{
					act.SP_RA_TRIAL_CPM_NAME=cpm_name;	
				}
				else
				{
					
					vec_log=new vector(act.printattribute("ID"),"SP_AA_TRIAL_CPM_NAME",act.SP_AA_TRIAL_CPM_NAME,"Empty or not found");
					log.writeln(vec_log.JOIN(";"));
					act.SP_RA_TRIAL_CPM_NAME="";
					//WriteToLog("CPM NAME is empty on the following Trial ~a",act);					
				}
			}
			if (vec_study.get(act.SP_AA_CL_STUDY_LEADERSHIP) instanceof STRING)
			{
				act.SP_RA_CL_STUDY_LEADERSHIP=sp_checking_get_values_new(vec_study.get(act.SP_AA_CL_STUDY_LEADERSHIP),"OpxSP_PT_CL_STD_LEADERSHIP",log,act.printattribute("ID"),"SP_AA_CL_STUDY_LEADERSHIP");
			}
			
			act.SP_RING_CL_SPONSORSHIP=sp_checking_get_values_new(act.SP_AA_CL_SPONSORSHIP,"OpxSP_PT_CL_SPONSOR",log,act.printattribute("ID"),"SP_AA_CL_SPONSORSHIP");
			act.SP_RA_CL_FUNDING=sp_checking_get_values_new(act.SP_AA_CL_FUNDING,"OpxSP_PT_CL_FUNDING",log,act.printattribute("ID"),"SP_AA_CL_FUNDING");
			act.SP_RA_CL_CLIN_PHASE=sp_checking_get_values_new(act.SP_AA_CL_CLIN_PHASE,"OpxSP_PT_CL_PHASE",log,act.printattribute("ID"),"SP_AA_CL_CLIN_PHASE");
			act.SP_RING_CL_OBJECTIVES=sp_checking_get_values_new(act.SP_AA_CL_OBJECTIVES,"OpxSP_PT_CL_OBJECTIVES",log,act.printattribute("ID"),"SP_AA_CL_OBJECTIVES");
			act.SP_RING_CL_POPULATION=sp_checking_get_values_new(act.SP_AA_CL_POPULATION,"OpxSPAS_PT_POPULATION",log,act.printattribute("ID"),"SP_AA_CL_POPULATION");
			act.SP_RA_CL_GROUP_CAT=sp_checking_get_values_new(act.SP_AA_S_STUDY_CAT,"OpxSP_PT_CL_SP_CAT",log,act.printattribute("ID"),"SP_AA_S_STUDY_CAT");
			act.SP_RING_CL_COUNTRY=sp_checking_get_values_new(act.SP_AA_CL_LOCATION_TRIAL,"OpxSP_PT_CL_COUNTRY",log,act.printattribute("ID"),"SP_AA_CL_LOCATION_TRIAL");
			

		}
		else
		{

			if ((act.PF instanceof DATE) && (act.PF>ref_date))
			{
				//WriteToLog("Initialize Resource site on ~a",act);
				//Resource site fields

				if (act.SP_NF_B_CL_IS_ANALYST && act.SP_AA_CL_TRIAL_ANALYST!="") {
					//WriteToLog("Initialize resource site on field ~a","SP_AA_CL_TRIAL_ANALYST");
					act.SP_RING_CL_TRIAL_ANALYST=sp_checking_get_values_new(act.SP_AA_CL_TRIAL_ANALYST,"OpxSP_PT_CL_SITES",log,act.printattribute("ID"),"SP_AA_CL_TRIAL_ANALYST");

				}
				
				if (act.SP_NF_B_CL_IS_CPM && act.SP_AA_CL_CPM!="") {
					//WriteToLog("Initialize resource site on field ~a","SP_AA_CL_CPM");
					act.SP_RING_CL_CPM=sp_checking_get_values_new(act.SP_AA_CL_CPM,"OpxSP_PT_CL_SITES",log,act.printattribute("ID"),"SP_AA_CL_CPM");

				}
				
				if (act.SP_NF_B_CL_IS_CRA && act.SP_AA_CL_CRA!="") {
					//WriteToLog("Initialize resource site on field ~a","SP_AA_CL_CRA");
					act.SP_RING_CL_CRA =sp_checking_get_values_new(act.SP_AA_CL_CRA,"OpxSP_PT_CL_SITES",log,act.printattribute("ID"),"SP_AA_CL_CRA");

				}
				
				if (act.SP_NF_B_CL_IS_CTL && act.SP_AA_CL_CTL_CS!="") {
					//WriteToLog("Initialize resource site on field ~a","SP_AA_CL_CTL_CS");
					act.SP_RING_CL_CTL_CS =sp_checking_get_values_new(act.SP_AA_CL_CTL_CS,"OpxSP_PT_CL_SITES",log,act.printattribute("ID"),"SP_AA_CL_CTL_CS");

					
				}
				
				if (act.SP_NF_B_CL_IS_CTM && act.SP_AA_CL_CENTRAL_CRA!="") {
					//WriteToLog("Initialize resource site on field ~a","SP_AA_CL_CENTRAL_CRA");
					act.SP_RING_CL_CTM =sp_checking_get_values_new(act.SP_AA_CL_CENTRAL_CRA,"OpxSP_PT_CL_SITES",log,act.printattribute("ID"),"SP_AA_CL_CENTRAL_CRA");

				}
				
				if (act.SP_NF_B_CL_IS_C_COORD && act.SP_AA_CL_CPM_CC!="") {
					//WriteToLog("Initialize resource site on field ~a","SP_AA_CL_CPM_CC");
					act.SP_RING_CL_CPM_CC =sp_checking_get_values_new(act.SP_AA_CL_CPM_CC,"OpxSP_PT_CL_SITES",log,act.printattribute("ID"),"SP_AA_CL_CPM_CC");

				}
				
				if (act.SP_NF_B_CL_IS_DATA_MGR && act.SP_AA_CL_DATA_MANAGER!="") {
					//WriteToLog("Initialize resource site on field ~a","SP_AA_CL_DATA_MANAGER");
					act.SP_RING_CL_DATA_MANAGER  =sp_checking_get_values_new(act.SP_AA_CL_DATA_MANAGER,"OpxSP_PT_CL_SITES",log,act.printattribute("ID"),"SP_AA_CL_DATA_MANAGER");

				}
				
				if (act.SP_NF_B_CL_IS_DOCC && act.SP_AA_CL_CLINDOC!="") {
					//WriteToLog("Initialize resource site on field ~a","SP_AA_CL_CLINDOC");
					act.SP_RING_CL_CLINDOC=sp_checking_get_values_new(act.SP_AA_CL_CLINDOC,"OpxSP_PT_CL_SITES",log,act.printattribute("ID"),"SP_AA_CL_CLINDOC");

				}
				
				if (act.SP_NF_B_CL_IS_EDOC && act.SP_AA_CL_EDOC!="") {
					//WriteToLog("Initialize resource site on field ~a","SP_AA_CL_EDOC");
					act.SP_RING_CL_EDOC=sp_checking_get_values_new(act.SP_AA_CL_EDOC,"OpxSP_PT_CL_SITES",log,act.printattribute("ID"),"SP_AA_CL_EDOC");

				}
				
				if (act.SP_NF_B_CL_IS_GMA_MTL && act.SP_AA_CL_SPI_MTL!="") {
					//WriteToLog("Initialize resource site on field ~a","SP_AA_CL_SPI_MTL");
					act.SP_RING_CL_GMA_MTL=sp_checking_get_values_new(act.SP_AA_CL_SPI_MTL,"OpxSP_PT_CL_SITES",log,act.printattribute("ID"),"SP_AA_CL_SPI_MTL");

				}
				
				if (act.SP_NF_B_CL_IS_LOG_COORD && act.SP_AA_CL_LOG_COORDINATOR!="") {
					//WriteToLog("Initialize resource site on field ~a","SP_AA_CL_LOG_COORDINATOR");
					act.SP_RING_CL_LOG_COORD =sp_checking_get_values_new(act.SP_AA_CL_LOG_COORDINATOR,"OpxSP_PT_CL_SITES",log,act.printattribute("ID"),"SP_AA_CL_LOG_COORDINATOR");

				}
				
				if (act.SP_NF_B_CL_IS_LOG_MED_WRT && act.SP_AA_CL_MED_WRITER!="") {
					//WriteToLog("Initialize resource site on field ~a","SP_AA_CL_MED_WRITER");
					act.SP_RING_CL_MED_WRITER  =sp_checking_get_values_new(act.SP_AA_CL_MED_WRITER,"OpxSP_PT_CL_SITES",log,act.printattribute("ID"),"SP_AA_CL_MED_WRITER");

				}
				
				if (act.SP_NF_B_CL_IS_PMSL && act.SP_AA_CL_PMSL!="") {
					//WriteToLog("Initialize resource site on field ~a","SP_AA_CL_PMSL");
					act.SP_RING_CL_PMSL =sp_checking_get_values_new(act.SP_AA_CL_PMSL,"OpxSP_PT_CL_SITES",log,act.printattribute("ID"),"SP_AA_CL_PMSL");

				}
				
				if (act.SP_NF_B_CL_IS_PPO_COPM && act.SP_AA_CL_SPI_TRIAL_MANAGER!="") {
					//WriteToLog("Initialize resource site on field ~a","SP_AA_CL_SPI_TRIAL_MANAGER");
					act.SP_RING_CL_COPM =sp_checking_get_values_new(act.SP_AA_CL_SPI_TRIAL_MANAGER,"OpxSP_PT_CL_SITES",log,act.printattribute("ID"),"SP_AA_CL_SPI_TRIAL_MANAGER");

				}
				
				if (act.SP_NF_B_CL_IS_PROG && act.SP_AA_CL_PROGRAMMER!="") {
					//WriteToLog("Initialize resource site on field ~a","SP_AA_CL_PROGRAMMER");
					act.SP_RING_CL_PROGRAMMER=sp_checking_get_values_new(act.SP_AA_CL_PROGRAMMER,"OpxSP_PT_CL_SITES",log,act.printattribute("ID"),"SP_AA_CL_PROGRAMMER");

				}
				
				//if act.SP_NF_B_CL_IS_RCTM {act.SP_RING_CL_RCTM =sp_checking_get_values_new(act.SP_AA_CL_RCTM,"OpxSP_PT_CL_SITES");}
				if (act.SP_NF_B_CL_IS_REC_MGR && act.SP_AA_CL_RM!="") {
					//WriteToLog("Initialize resource site on field ~a","SP_AA_CL_RM");
					act.SP_RING_CL_REC_MGR=sp_checking_get_values_new(act.SP_AA_CL_RM,"OpxSP_PT_CL_SITES",log,act.printattribute("ID"),"SP_AA_CL_RM");

				}
				
				if (act.SP_NF_B_CL_IS_STAT && act.SP_AA_CL_STATISTICIAN!="") {
					//WriteToLog("Initialize resource site on field ~a","SP_AA_CL_STATISTICIAN");
					act.SP_RING_CL_STATISTICIAN=sp_checking_get_values_new(act.SP_AA_CL_STATISTICIAN,"OpxSP_PT_CL_SITES",log,act.printattribute("ID"),"SP_AA_CL_STATISTICIAN");

				}
				
				if (act.SP_NF_B_CL_IS_TRANSLAT && act.SP_AA_CL_TRANSLATOR!="") {
					//WriteToLog("Initialize resource site on field ~a","SP_AA_CL_TRANSLATOR");
					act.SP_RING_CL_TRANSLATOR=sp_checking_get_values_new(act.SP_AA_CL_TRANSLATOR,"OpxSP_PT_CL_SITES",log,act.printattribute("ID"),"SP_AA_CL_TRANSLATOR");

				}
				
			//init empty default site
			
				trial_index=act.sp_get_trial_id("");
				trial="OpxActivity".get(trial_index); 
				if (trial instanceof OpxActivity && trial.SP_RING_CL_COUNTRY=="" && trial.SP_AA_CL_LOCATION_TRIAL!="")
				{
					trial.SP_RING_CL_COUNTRY=sp_checking_get_values_new(trial.SP_AA_CL_LOCATION_TRIAL,"OpxSP_PT_CL_COUNTRY",log,act.printattribute("ID"),"SP_AA_CL_LOCATION_TRIAL");
			
				}
				act.sp_cl_init_act_def_res_sites();
			}	
		}
	
		//GCI Release Number 
		if (
		act.WBS_TYPE.name == "S_SAMP"  || act.WBS_TYPE.name == "S_SAMP-S" || 
			act.WBS_TYPE.name == "S_SAMP-E" || act.WBS_TYPE.name == "S_GCI-LAB" ||
			act.WBS_TYPE.name == "S_GCI-LAB-S" || act.WBS_TYPE.name == "S_GCI-LAB-E" ||
			act.WBS_TYPE.name == "S_IA_SAMP" || act.WBS_TYPE.name == "IDMC_SAMP")
		{
			if (act.NOTE_PAD=="")
			{
				vec_log=new vector(act.printattribute("ID"),"NOTE_PAD",act.NOTE_PAD,"Empty or not found");
				log.writeln(vec_log.JOIN(";"));
			}
			else
			{
				//WriteToLog("Populate GCI Release Number on ~a",act) GCIA1-191
				if (act.CallBooleanFormula("NOTE_PAD=\"*GCI*\""))
				{
				act.SP_CL_S_GCI_RELEASE=act.NOTE_PAD;
				}				
			}	

		}
		
	}
	

WriteToLog("Number of avtivity updated: "+ct_act);
WriteToLog("END sp_cl_init_adm_kti_sites_ph");
	
}

}
}
withoutlocking
{
sp_cl_init_adm_kti_sites_ph.exportfunction();
}



function sp_cl_init_act_def_res_sites()
{
var act=this;	
var nn_st;
var vec_re= new vector
("SP_RA_CL_SITES_ACT_CC",
"SP_RA_CL_SITES_ACT_CPM",
"SP_RA_CL_SITES_ACT_CTL",
"SP_RA_CL_SITES_ACT_CTM",
"SP_RA_CL_SITES_ACT_DM",
"SP_RA_CL_SITES_ACT_DOCC",
"SP_RA_CL_SITES_ACT_EDOCS",
"SP_RA_CL_SITES_ACT_GMAM",
"SP_RA_CL_SITES_ACT_LOCALC",
"SP_RA_CL_SITES_ACT_LOGC",
"SP_RA_CL_SITES_ACT_MW",
"SP_RA_CL_SITES_ACT_PMSL",
"SP_RA_CL_SITES_ACT_PPOC",
"SP_RA_CL_SITES_ACT_PROG",
"SP_RA_CL_SITES_ACT_RCTM",
"SP_RA_CL_SITES_ACT_RECM",
"SP_RA_CL_SITES_ACT_STAT",
"SP_RA_CL_SITES_ACT_TA",
"SP_RA_CL_SITES_ACT_TRANS");


if (
(act.SP_NF_B_CL_IS_ANALYST && act.SP_RING_CL_TRIAL_ANALYST=="") ||
(act.SP_NF_B_CL_IS_CPM && act.SP_RING_CL_CPM=="")||
(act.SP_NF_B_CL_IS_CRA && act.SP_RING_CL_CRA=="")||
(act.SP_NF_B_CL_IS_CTL && act.SP_RING_CL_CTL_CS=="") ||
(act.SP_NF_B_CL_IS_CTM && act.SP_RING_CL_CTM=="")||
(act.SP_NF_B_CL_IS_C_COORD && act.SP_RING_CL_CPM_CC=="") ||
(act.SP_NF_B_CL_IS_DATA_MGR && act.SP_RING_CL_DATA_MANAGER=="")||
(act.SP_NF_B_CL_IS_DOCC && act.SP_RING_CL_CLINDOC=="") ||
(act.SP_NF_B_CL_IS_EDOC && act.SP_RING_CL_EDOC=="") ||
(act.SP_NF_B_CL_IS_GMA_MTL && act.SP_RING_CL_GMA_MTL=="") ||
(act.SP_NF_B_CL_IS_LOG_COORD && act.SP_RING_CL_LOG_COORD=="") ||
(act.SP_NF_B_CL_IS_LOG_MED_WRT && act.SP_RING_CL_MED_WRITER=="") ||
(act.SP_NF_B_CL_IS_PMSL && act.SP_RING_CL_PMSL=="") ||
(act.SP_NF_B_CL_IS_PPO_COPM && act.SP_RING_CL_COPM=="") ||
(act.SP_NF_B_CL_IS_PROG && act.SP_RING_CL_PROGRAMMER=="") ||
(act.SP_NF_B_CL_IS_REC_MGR && act.SP_RING_CL_REC_MGR=="") ||
(act.SP_NF_B_CL_IS_STAT && act.SP_RING_CL_STATISTICIAN=="") ||
(act.SP_NF_B_CL_IS_TRANSLAT && act.SP_RING_CL_TRANSLATOR=="")
) {
	//WriteToLog("Initialyze default site on ~a",act);
	act.sp_cl_default_res_sites();
}	
	
			

}
withoutlocking
{
sp_cl_init_act_def_res_sites.exportfunction();
}



function sp_cl_update_allocations()
{
var act=this;
var ref_date=new DATE("01-JAN-18");
var ct_ph=0;

for(var ph in act.ALLOCATIONS where ((ph.COST_ACCOUNT instanceof OpxCOST_ACCOUNT) && (ph.RES instanceof OpxResource)&& (ph.COST_ACCOUNT.name=="FTE_ESTIMATED" || ph.COST_ACCOUNT.name=="FTE_METRICS") && ph.RES.SP_NF_B_IS_CL_RES))
{
	if ((ph.FD instanceof DATE) && (ph.FD<=ref_date))
	{
		ph.COST_ACCOUNT="FTE";
		//WriteToLog("Allocation is moved to manual ~a",ph);
		
	}
	else
	{
		ph.delete();
		//WriteToLog("Delete ~a",ph);
	}
	
ct_ph=ct_ph+1;
}
return ct_ph;		
}
withoutlocking
{
sp_cl_update_allocations.exportfunction();
}

function sp_clinical_data_recovery()
{
	WriteToLog("Start sp_clinical_data_recovery");
	var vec_header=new vector("Activity","Field","Input values","Error Values");

	var pathname = "/compassv6/data_recovery/output";
	var dir = mkdir(pathname);
	if (dir instanceof Boolean && dir)
	{
	alert("Directory ~a has been created".format(pathname));
	}

	var log = new fileoutputstream(pathname+"/clinical_data_recovery.csv","APPEND");
	if (! log instanceof fileoutputstream)
	{
	return 1;
	}
	  
	log.writeln(vec_header.JOIN(";"));
	context.callmacro("SP_JS_CL_DEACT_DEAMON");
	sp_cl_init_adm_kti_sites_ph(log);
	log.close();
	WriteToLog("End sp_clinical_data_recovery");
}
sp_clinical_data_recovery.exportfunction();


function sp_clinical_adm_deleted()
{

var all_pop_del= new vector("9-90 years",
"Adolescent (12-17 yrs)",
"Adolescents (>=10 to 18)",
"Adult (>=18 yrs)",
"Adult (>=50 yrs)",
"Adults (18-60 y)",
"Children (2-11 yrs)",
"Children (2-18 yrs)",
"Children (2-5 yrs)",
"Elderly (>65 yrs)",
"Infant (<12 months)",
"Toddler (12-23 months)");
var fund_del=new vector("Com Ops");

var std_leader=new vector("Epi");

// delete population p5 pick list values
for (var p in "OpxSPAS_PT_POPULATION".findclass() where (all_pop_del.position(p.name) instanceof NUMBER))
{
	
	//WriteToLog("Delete P5 population: "+p);
	p.delete();
}

for (var pf in "OpxSP_PT_CL_FUNDING".findclass() where (fund_del.position(pf.name) instanceof NUMBER))
{
	//WriteToLog("Delete P5 funding: "+pf);
	pf.delete();
}
for (var std in "OpxSP_PT_CL_STD_LEADERSHIP".findclass() where (std_leader.position(std.name) instanceof NUMBER))
{
	//WriteToLog("Delete P5 Study leadership: "+std);
	std.delete();
}

}
withoutlocking
{
withoutalerts
{
sp_clinical_adm_deleted.exportfunction();
}
}


function sp_clinical_set_code()
{

var vec_study_code=new vector("Clin. Dev.","CDV",
"HEOR (Health Economy Outcome Research)","HEO",
"Medical","MED",
"Medical US","GMA",
"PharmacoEpi","EPO",
"SP MSD","MSD",
"Transferred to HEOR","THE");

var vec_phase_code=new vector("Epidemiology","EPID",
"Exploratory phase","EXPL",
"Not applicable","N/A",
"Phase 1","PHA1",
"Phase 2a","PHA2A",
"Phase 2b","PHA2B",
"Phase 3","PHA3",
"Phase 4","PHA4");


for (var std in "OpxSP_PT_CL_STD_LEADERSHIP".findclass() where (vec_study_code.get(std.name) instanceof STRING) )
{
	std.SP_AA_S_CL_STD_LEAD_CODE=vec_study_code.get(std.name);
}

for (var pse in "OpxSP_PT_CL_PHASE".findclass() where (vec_phase_code.get(pse.name) instanceof STRING) )
{
	pse.SP_AA_S_CL_PHASE_CODE=vec_phase_code.get(pse.name);
}


}
withoutlocking
{
withoutalerts
{
sp_clinical_set_code.exportfunction();
}
}


function sp_init_gs_metrics()
{
var init_date=new date("01/01/2018");

context.SP_GS_D_CL_LAUNCH_METRICS=init_date;
context.SP_GS_D_BRD_LAUNCH_METRICS=init_date;
context.SP_GS_D_ARD_LAUNCH_METRICS=init_date;

return true;	
}
withoutlocking
{
withoutalerts
{
sp_init_gs_metrics.exportfunction();
}
}

function sp_all_data_rec_fte_allocations()
{
var ref_date=new DATE("01-JAN-18");
var fte_metric="OpxCOST_ACCOUNT".get("FTE_METRICS");	
var fte_estimated="OpxCOST_ACCOUNT".get("FTE_ESTIMATED");	
var cmpt_met=0;
var cmpt_est=0;
withoutalerts
{
if (fte_metric instanceof OpxCOST_ACCOUNT)
{
	fromobject(fte_metric)
	{
		for (var ph in "OpxALLOCATION".findclass() where ph.cost_account.name==fte_metric.name)
		{
			cmpt_met++;
			if ((ph.FD instanceof DATE) && (ph.FD<=ref_date))
			{
				ph.COST_ACCOUNT="FTE";
				//WriteToLog("Allocation is moved to manual ~a",ph);
			}
			else
			{
				ph.delete();
				//WriteToLog("Delete ~a",ph);
			}
		}
	}	
}

if (fte_estimated instanceof OpxCOST_ACCOUNT)
{
	fromobject(fte_estimated)
	{
		for (var ph in "OpxALLOCATION".findclass() where ph.cost_account.name==fte_estimated.name)
		{
			cmpt_est++;
			if ((ph.FD instanceof DATE) && (ph.FD<=ref_date))
			{
				ph.COST_ACCOUNT="FTE";
				//WriteToLog("Allocation is moved to manual ~a",ph);
			}
			else
			{
				ph.delete();
				//WriteToLog("Delete ~a",ph);
			}
		}
	}	
}
}
WriteToLog("Nb allocation fte metrics processed is ~a",cmpt_met);
WriteToLog("Nb allocation fte estimated processed is ~a",cmpt_est);
return true;	
}
withoutlocking
{
sp_all_data_rec_fte_allocations.exportfunction();
}

function sp_all_data_alloc_test_p5_v6()
{
var ref_date=new DATE("01-JAN-18");
var fte_metric="OpxCOST_ACCOUNT".get("FTE_METRICS");	
var fte_estimated="OpxCOST_ACCOUNT".get("FTE_ESTIMATED");	
var cmpt_met=0;
var cmpt_est=0;
withoutalerts
{
if (fte_metric instanceof OpxCOST_ACCOUNT)
{
	fromobject(fte_metric)
	{
		for (var ph in "OpxALLOCATION".findclass() where ph.cost_account.name==fte_metric.name)
		{
			cmpt_met++;
			if ((ph.FD instanceof DATE) && (ph.FD<=ref_date))
			{
				ph.COST_ACCOUNT="FTE";
				//WriteToLog("Allocation is moved to manual ~a",ph);
			}
			else
			{
				ph.delete();
				//WriteToLog("Delete ~a",ph);
			}
		}
	}	
}

if (fte_estimated instanceof OpxCOST_ACCOUNT)
{
	fromobject(fte_estimated)
	{
		for (var ph in "OpxALLOCATION".findclass() where ph.cost_account.name==fte_estimated.name)
		{
			cmpt_est++;
			if ((ph.FD instanceof DATE) && (ph.FD<=ref_date))
			{
				ph.COST_ACCOUNT="FTE";
				//WriteToLog("Allocation is moved to manual ~a",ph);
			}
			else
			{
				ph.EQUATION_OVERRIDE=true;
			}
		}
	}	
}
}
WriteToLog("Nb allocation fte metrics processed is ~a",cmpt_met);
WriteToLog("Nb allocation fte estimated processed is ~a",cmpt_est);
return true;	
}
withoutlocking
{
sp_all_data_alloc_test_p5_v6.exportfunction();
}




 
//SP_JS_CL_DA_RING_ATTRIBUTES.ojs

//  Created  by YSA 15:58 09-SEP-2016
  
//	VERSION HISTORY :
var revision_number ="2.6";
//
// Revision 2.6 2020/06/05 KSH
// ALM 1988 - Creation of the Dynamic attribute SP_DA_CL_COMPL_GCD for GCD complexity factor and creation of RING attribute SP_RING_CL_MWD for MWD sites
//
//
//
// Revision 2.5 2020/03/19 ASP
//(ITS-INC3942887) : Modifying the function of Dynamic Attribute (Reader, locker and modifier) SP_DA_CL_TOTAL_LOAD 
//
//
//Revision 2.4 2020/02/18 ASP 
//#2045 - Merge of CDOC and MW : modification of function sp_cl_ph_transl_lang_lock() removing CLIN-MW-TRA and replacing with CLIN-GCD-TRA
//

//Revision 2.3 2020/01/14 ckeita 
//ALM 1919  : modification of function sp_cl_crf_page_read () and function sp_cl_unique_crf_page_read () remove conditions for 2 projects already closed and adding value for new phases to add

//Revision 2.2 2019/12/20 ckeita 
//ALM 1919  : modification of function sp_cl_crf_page_read () and function sp_cl_unique_crf_page_read ()
//


//Revision 2.1 2019/09/06 Sivanagapavan G 
//RITM1265091 : Creation of Ring attribute for DKM PLATFORM:  SP_RING_DKM_ACT_PLATFORM_RBS
//
//Revision 2.0 2019/10/28 SKJ 
//RITM1369584 TEMPO - Review of CDM profiles and adjustments of FTE/ cost metrics==> Addition of SP_RING_CL_CDL
//
//
//Revision 1.9 2019/06/12 mblaise 
//ITS-INC2724160 : Renaming AS Metrics Ring attribute
//
//	Revision 1.8 2019/05/20 mblaise   
//  ITS-INC2625128 : modification of sp_blood_draw_read to add wbs type S_SCREEN and of sp_blood_draw_calc to call sp_blood_draw_read
//
//	Revision 1.7 2019/05/20 bcordel 
//	Merge 1.6
//
//	Revision 1.6 2019/05/15 bcordel 
//	Putting back the blood draw DA in this script.
//	Revision 1.6 2019/05/03 MAG - RITM1032555 - Creation of As metrics resource list ring attribute
//
//	Revision 1.5 2019/03/07 SKJ for ITS-INC2071122#1877 N  CRF Pages per Subject
//	Revision 1.4 2018/09/26 mrochas
//	change label : only last part of profile (CLIN-CPMO-CC changed into CC for example)
//
// Revision 1.3 2018/09/19 mrochas
// CPMO-FIN-CC changes into CLIN-CPMO-CC
//
//	Revision 1.2 2018/09/06 mrochas
//	new ring attributes for Clinical re-org
//
//	Revision 1.1 2018/06/19 bcordel
//	ITS-INC1065423 : adding method sp_js_check_formula_on_sponsor on activities
//
//  Modified by YSA 15:20 21 September 2017
//
//	v1.1 mrochas 2017/11/16
//	Creation of SP_RING_PROJECT_USER & SP_DR_TEAM_MEMBERS_OF_SEL_PRJS
// Clinical Dynamic and Ring attributes



////Dynamic Attributes section

//
// N  of Blood Draws:  
//
function sp_blood_draw_read()
{
	var o_act = this;
	var blood = 0;
	
	if (o_act instanceof OpxActivity && o_act !=undefined && o_act.SP_NF_CL_TRIAL==true)
	{
		fromobject(o_act) 
		{
			for (var act in "OpxActivity" where act.SP_NF_CL_STEP==true)
			{
				if (act.SP_AA_ACT_N_BLODD_DRAW_ESTIM !=0)
				{
					blood=blood+act.SP_AA_ACT_N_BLODD_DRAW_ESTIM;
				}
				else
				{
					blood=blood+act.SP_NF_ACT_N_BLOOD_DRAW_CALC;
				}
			}
		}	
	}
	else
	{
		if (o_act.SP_AA_ACT_N_BLODD_DRAW_ESTIM !=0)
		{
			blood=o_act.SP_AA_ACT_N_BLODD_DRAW_ESTIM;
		}
		else
		{
			fromobject(o_act) 
			{
				for (var act in "OpxActivity" where act.AB_AA_B_ACT_BLOOD_DRAW==true && (act.WBS_TYPE.name == "S_INCL" || act.WBS_TYPE.name == "S_VISIT" || act.WBS_TYPE.name == "S_FOL" || act.WBS_TYPE.name == "S_SCREEN"))
				{
					blood++;
				}
			}	
		}
	}
	return blood;
}

function sp_blood_draw_mod(num)
{
var o_act = this;
	if (o_act instanceof OpxActivity && o_act !=undefined)
	{
		withoutlocking
		{
			if (num==undefined)
			{
				o_act.SP_AA_ACT_N_BLODD_DRAW_ESTIM=0;
			}
			else
			{
				o_act.SP_AA_ACT_N_BLODD_DRAW_ESTIM=num;
			}
		}
	}
}

var reestim_blood_draw = new objectAttribute("OpxActivity","SP_DA_REESTIM_BLOOD_DRAW","NUMBER");
	reestim_blood_draw.comment = "N  of Blood Draws";
	reestim_blood_draw.reader = sp_blood_draw_read;
	reestim_blood_draw.modifier = sp_blood_draw_mod;
	
//
// sp_blood_draw_calc
//
function sp_blood_draw_calc(id_act)
{
	var o_act = "opxActivity".get(id_act);
	var blood = 0;
	if (o_act instanceof OpxActivity && o_act !=undefined)  
		blood = o_act.sp_blood_draw_read();
	return blood
}
sp_blood_draw_calc.exportfunction({"STRING"},"NUMBER","");

//N  Subjects expected (visit) 

function sp_cl_nb_sub_exp_read ()
{
	var act=this;
	var trial_index=act.sp_get_trial_id("");
	var trial="OpxActivity".get(trial_index);
	var result=0;

	if ((act instanceof Opxactivity) && (trial instanceof Opxactivity) && (act.SP_NF_B_OBS_CLIN_ACT) && (act.wbs_type instanceof OpxWBS_TYPE) &&
			(act.wbs_type.name=="S_INCL" || act.wbs_type.name=="S_FOL" || act.wbs_type.name=="S_VISIT" || act.SP_NF_CL_STEP))
	{
		if (act.SP_NF_CL_STEP)
		{
			result=act.SP_AA_N_CL_SUB_EXP_VISIT;	
		}
		else
		{
			if (act.SP_AA_N_CL_SUB_EXP_VISIT==0)
			{
				result=trial.SP_AA_CL_TRIAL_EXP_SUB;
			}
			else
				result=act.SP_AA_N_CL_SUB_EXP_VISIT;			
		}

	}

	return result;
}

function sp_cl_nb_sub_exp_lock ()
{

	var act=this;

	if (act.wbs_type.name=="S_INCL" || act.wbs_type.name=="S_FOL" || act.wbs_type.name=="S_VISIT" || act.SP_NF_CL_STEP)
	{
		return false;
	}
	else
	{
		return true;
	}	
}

function sp_cl_nb_sub_exp_modif (nb)
{
	this.SP_AA_N_CL_SUB_EXP_VISIT=nb;
}

var CL_NB_SUB_EXP = new objectAttribute("OpxActivity","SP_DA_N_CL_SUB_EXP_VISIT","NUMBER");
CL_NB_SUB_EXP.comment = "N  Subjects expected (visit)";
CL_NB_SUB_EXP.reader = sp_cl_nb_sub_exp_read;
CL_NB_SUB_EXP.modifier = sp_cl_nb_sub_exp_modif;
CL_NB_SUB_EXP.locker=sp_cl_nb_sub_exp_lock;



//New Subjects


function sp_cl_new_subj_read ()
{
	var act=this;
	var result="";

	if ((act instanceof Opxactivity) && (act.SP_NF_B_OBS_CLIN_ACT) && (act.wbs_type instanceof OpxWBS_TYPE) &&
			(act.wbs_type.name=="S_INCL" || act.wbs_type.name=="S_FOL" || act.wbs_type.name=="S_VISIT" || act.SP_NF_B_CL_IS_FIRST_STEP || act.SP_NF_CL_STEP))
	{
		if ( act.SP_AA_CL_NEW_SUBJECT=="")
		{
			
			if (act.SP_NF_B_CL_IS_FIRST_STEP || act.SP_NF_CL_STEP){
				
				result="";
				
			}
			else
			{
				if (act.CallBooleanFormula("BOOLEAN_VALUE(\"ACTIVITY\",SP_GET_ACTIVITY_STEP(\"\"),\"SP_NF_B_CL_IS_FIRST_STEP\")"))
				{
					result="YES";
				}
				else
				{
					result="NO";
				}	
			}
		}
		else
			result=act.SP_AA_CL_NEW_SUBJECT;
	}	

	return result;
}

function sp_cl_new_subj_lock ()
{
	var act=this;
	if ((act.wbs_type instanceof OpxWBS_TYPE) &&
			(act.wbs_type.name=="S_INCL" || act.wbs_type.name=="S_FOL" || act.wbs_type.name=="S_VISIT" || act.SP_NF_B_CL_IS_FIRST_STEP || act.SP_NF_CL_STEP))
	{
		return false;
	}
	else
	{
		return true;
	}	
}

function sp_cl_new_subj_modif (b)
{
	this.SP_AA_CL_NEW_SUBJECT=b;
}

var CL_NEW_SUBJECT = new objectAttribute("OpxActivity","SP_DA_CL_NEW_SUBJECT","SP_AT_CL_NEW_SUBJECT");
CL_NEW_SUBJECT.comment = "New Subjects?";
CL_NEW_SUBJECT.reader = sp_cl_new_subj_read;
CL_NEW_SUBJECT.modifier = sp_cl_new_subj_modif;
CL_NEW_SUBJECT.locker= sp_cl_new_subj_lock;

/*
//Blood Draw


function sp_cl_blood_draw_read ()
{
	var act=this;
	var result=false;

	if ((act instanceof Opxactivity) && (act.SP_NF_B_OBS_CLIN_ACT) && (act.wbs_type instanceof OpxWBS_TYPE) &&
			(act.wbs_type.name=="S_INCL" || act.wbs_type.name=="S_FOL" || act.wbs_type.name=="S_VISIT" || act.wbs_type.name=="S_PRREP"))
	{

			result=act.AB_AA_B_ACT_BLOOD_DRAW;
	}	

	return result;
}

function sp_cl_blood_draw_lock ()
{
	var act=this;
	if ((act.wbs_type instanceof OpxWBS_TYPE) &&
			(act.wbs_type.name=="S_INCL" || act.wbs_type.name=="S_FOL" || act.wbs_type.name=="S_VISIT" || act.wbs_type.name=="S_PRREP"))
	{
		return false;
	}
	else
	{
		return true;
	}	
}

function sp_cl_blood_draw_modif (b)
{
	this.AB_AA_B_ACT_BLOOD_DRAW=b;
}

var CL_BLOOD_DRAW = new objectAttribute("OpxActivity","SP_DA_CL_BLOOD_DRAW","BOOLEAN");
CL_BLOOD_DRAW.comment = "Blood Draw";
CL_BLOOD_DRAW.reader = sp_cl_blood_draw_read;
CL_BLOOD_DRAW.modifier = sp_cl_blood_draw_modif;
CL_BLOOD_DRAW.locker= sp_cl_blood_draw_lock;

//Product request

function sp_cl_product_request_read ()
{
	var act=this;
	var result=false;

	if ((act instanceof Opxactivity) && (act.SP_NF_B_OBS_CLIN_ACT) && (act.wbs_type instanceof OpxWBS_TYPE) &&
			(act.wbs_type.name=="S_INCL" || act.wbs_type.name=="S_FOL" || act.wbs_type.name=="S_VISIT" || act.wbs_type.name=="S_PRREP"))
	{

			result=act.SP_AA_B_PRODUCT_REQUEST;
	}	

	return result;
}

function sp_cl_product_request_lock ()
{
	var act=this;
	if ((act.wbs_type instanceof OpxWBS_TYPE) &&
			(act.wbs_type.name=="S_INCL" || act.wbs_type.name=="S_FOL" || act.wbs_type.name=="S_VISIT" || act.wbs_type.name=="S_PRREP"))
	{
		return false;
	}
	else
	{
		return true;
	}	
}

function sp_cl_product_request_modif (b)
{
	this.SP_AA_B_PRODUCT_REQUEST=b;
}

var CL_PRODUCT_REQ = new objectAttribute("OpxActivity","SP_DA_CL_PRODUCT_REQUEST","BOOLEAN");
CL_PRODUCT_REQ.comment = "Product Request";
CL_PRODUCT_REQ.reader = sp_cl_product_request_read;
CL_PRODUCT_REQ.modifier = sp_cl_product_request_modif;
CL_PRODUCT_REQ.locker= sp_cl_product_request_lock;

//Vaccination

function sp_cl_vaccination_read ()
{
	var act=this;
	var result=false;

	if ((act instanceof Opxactivity) && (act.SP_NF_B_OBS_CLIN_ACT) && (act.wbs_type instanceof OpxWBS_TYPE) &&
			(act.wbs_type.name=="S_INCL" || act.wbs_type.name=="S_FOL" || act.wbs_type.name=="S_VISIT" || act.wbs_type.name=="S_PRREP"))
	{

			result=act.AB_AA_B_ACT_VACCINATION;
	}	

	return result;
}

function sp_cl_vaccination_lock ()
{
	var act=this;
	if ((act.wbs_type instanceof OpxWBS_TYPE) &&
			(act.wbs_type.name=="S_INCL" || act.wbs_type.name=="S_FOL" || act.wbs_type.name=="S_VISIT" || act.wbs_type.name=="S_PRREP"))
	{
		return false;
	}
	else
	{
		return true;
	}	
}

function sp_cl_vaccination_modif (b)
{
	this.AB_AA_B_ACT_VACCINATION=b;
}

var CL_VACCINATION = new objectAttribute("OpxActivity","SP_DA_CL_VACCINATION","BOOLEAN");
CL_VACCINATION.comment = "Vaccination";
CL_VACCINATION.reader = sp_cl_vaccination_read;
CL_VACCINATION.modifier = sp_cl_vaccination_modif;
CL_VACCINATION.locker= sp_cl_vaccination_lock;
*/


//Subjects Greater Europe field

function sp_cl_subj_eu_read()
{

	var act=this;
	var result=0;
	var total_subjects=0;
	var total_nb_country=0;
	var nb_country_region=0;

if (act instanceof OpxActivity)
{
	if (act.SP_NF_CL_TRIAL)
	{
		total_subjects=act.SP_AA_CL_TRIAL_EXP_SUB;
		total_nb_country=this.sp_cl_list_count_reg("SP_RING_CL_COUNTRY","Greater Europe,Africa and Middle-East,Asia Pacific,Latin America,North America");
		nb_country_region=this.sp_cl_list_count_reg("SP_RING_CL_COUNTRY","Greater Europe");

		if ( (total_subjects instanceof NUMBER)&& (act.SP_AA_N_CL_SUB_EU<0) && (nb_country_region instanceof NUMBER) 
				&& (total_nb_country instanceof NUMBER) && (total_nb_country >0 ) )
		{

			result=(total_subjects/total_nb_country)*nb_country_region;

		}
		else
		{
			if (act.SP_AA_N_CL_SUB_EU>=0)
			{
			result=act.SP_AA_N_CL_SUB_EU;
			}
			else
			{
			result=0;
				
			}
		}
		
	}
	else
	{
		var trial_index=act.sp_get_trial_id("");
		var trial="OpxActivity".get(trial_index);

		if (trial instanceof OpxActivity)
		{
			result=trial.SP_DA_N_CL_SUB_EU;
		}
		
	}
}
	return result;
}

function sp_cl_subj_eu_lock()
{
	var act=this;
	var lock=true;

	if (act.SP_NF_CL_TRIAL)
	{
		lock=false;
	}
	
	return lock;	
}

function sp_cl_subj_eu_modif(n)
{
	if (n instanceof NUMBER)
	{
		this.SP_AA_N_CL_SUB_EU=n;

	}
	else
	{
		this.SP_AA_N_CL_SUB_EU=-1;
	}

}

var CL_SUB_EU = new objectAttribute("OpxActivity","SP_DA_N_CL_SUB_EU","NUMBER");
CL_SUB_EU.comment = "#Subjects(Greater Europe)";
CL_SUB_EU.reader = sp_cl_subj_eu_read;
CL_SUB_EU.modifier = sp_cl_subj_eu_modif;
CL_SUB_EU.locker= sp_cl_subj_eu_lock;


//Subjects Africa and Middle-East

function sp_cl_subj_africa_read()
{

var act=this;
var result=0;
var total_subjects=0;
var total_nb_country=0;
var nb_country_region=0;

if (act instanceof OpxActivity)
{
	if (act.SP_NF_CL_TRIAL)
	{
		total_subjects=act.SP_AA_CL_TRIAL_EXP_SUB;
		total_nb_country=this.sp_cl_list_count_reg("SP_RING_CL_COUNTRY","Greater Europe,Africa and Middle-East,Asia Pacific,Latin America,North America");
		nb_country_region=this.sp_cl_list_count_reg("SP_RING_CL_COUNTRY","Africa and Middle-East");

		if ( (total_subjects instanceof NUMBER)&& (act.SP_AA_N_CL_SUB_AFRICA <0) && (nb_country_region instanceof NUMBER) 
				&& (total_nb_country instanceof NUMBER) && (total_nb_country >0 ) )
		{

			result=(total_subjects/total_nb_country)*nb_country_region;

		}
		else
		{
			if (act.SP_AA_N_CL_SUB_AFRICA>=0)
			{
			result=act.SP_AA_N_CL_SUB_AFRICA;
			}
			else
			{
			result=0;
				
			}
		}
		
	}
	else
	{
		var trial_index=act.sp_get_trial_id("");
		var trial="OpxActivity".get(trial_index);
		if (trial instanceof OpxActivity)
		{
			result=trial.SP_DA_N_CL_SUB_AFRICA;
		}
	}
}
return result;
}

function sp_cl_subj_africa_lock()
{
	var act=this;
	var lock=true;

	if (act.SP_NF_CL_TRIAL)
	{
		lock=false;
	}
	
	return lock;	
}

function sp_cl_subj_africa_modif(n)
{
	if (n instanceof NUMBER)
	{
		this.SP_AA_N_CL_SUB_AFRICA=n;
	
	}
	else
	{
		this.SP_AA_N_CL_SUB_AFRICA=-1;
	}

}

var CL_SUB_AFRICA = new objectAttribute("OpxActivity","SP_DA_N_CL_SUB_AFRICA","NUMBER");
CL_SUB_AFRICA.comment = "#Subjects(Africa and Middle-East)";
CL_SUB_AFRICA.reader = sp_cl_subj_africa_read;
CL_SUB_AFRICA.modifier = sp_cl_subj_africa_modif;
CL_SUB_AFRICA.locker= sp_cl_subj_africa_lock;

//Subjects Africa and Middle-East

function sp_cl_subj_ASIA_read()
{

	var act=this;
	var result=0;
	var total_subjects=0;
	var total_nb_country=0;
	var nb_country_region=0;

if (act instanceof OpxActivity)
{
	if (act.SP_NF_CL_TRIAL)
	{
		total_subjects=act.SP_AA_CL_TRIAL_EXP_SUB;
		total_nb_country=this.sp_cl_list_count_reg("SP_RING_CL_COUNTRY","Greater Europe,Africa and Middle-East,Asia Pacific,Latin America,North America");
		nb_country_region=this.sp_cl_list_count_reg("SP_RING_CL_COUNTRY","Asia Pacific");

		if ( (total_subjects instanceof NUMBER)&& (act.SP_AA_N_CL_SUB_ASIA<0) && (nb_country_region instanceof NUMBER) 
				&& (total_nb_country instanceof NUMBER) && (total_nb_country >0 ) )
		{

			result=(total_subjects/total_nb_country)*nb_country_region;

		}
		else
		{
			if (act.SP_AA_N_CL_SUB_ASIA>=0)
			{
			result=act.SP_AA_N_CL_SUB_ASIA;
			}
			else
			{
			result=0;	
			}
		}	
	}
	else
	{
		var trial_index=act.sp_get_trial_id("");
		var trial="OpxActivity".get(trial_index);
		if (trial instanceof OpxActivity)
		{
			result=trial.SP_DA_N_CL_SUB_ASIA;
		}	
	}
}
return result;
}

function sp_cl_subj_ASIA_lock()
{
	var act=this;
	var lock=true;

	if (act.SP_NF_CL_TRIAL)
	{
		lock=false;
	}
	
	return lock;	
}

function sp_cl_subj_ASIA_modif(n)
{
	if (n instanceof NUMBER)
	{
		this.SP_AA_N_CL_SUB_ASIA=n;
	
	}
	else
	{
		this.SP_AA_N_CL_SUB_ASIA=-1;
	}	

}

var CL_SUB_ASIA = new objectAttribute("OpxActivity","SP_DA_N_CL_SUB_ASIA","NUMBER");
CL_SUB_ASIA.comment = "#Subjects(Asia Pacific)";
CL_SUB_ASIA.reader = sp_cl_subj_ASIA_read;
CL_SUB_ASIA.modifier = sp_cl_subj_ASIA_modif;
CL_SUB_ASIA.locker= sp_cl_subj_ASIA_lock;


//Subjects North America

function sp_cl_subj_AMERICA_read()
{

	var act=this;
	var result=0;
	var total_subjects=0;
	var total_nb_country=0;
	var nb_country_region=0;

if (act instanceof OpxActivity)
{
	if (act.SP_NF_CL_TRIAL)
	{
		total_subjects=act.SP_AA_CL_TRIAL_EXP_SUB;
		total_nb_country=this.sp_cl_list_count_reg("SP_RING_CL_COUNTRY","Greater Europe,Africa and Middle-East,Asia Pacific,Latin America,North America");
		nb_country_region=this.sp_cl_list_count_reg("SP_RING_CL_COUNTRY","North America");

		if ( (total_subjects instanceof NUMBER)&& (act.SP_AA_N_CL_SUB_AMERICA<0) && (nb_country_region instanceof NUMBER) 
				&& (total_nb_country instanceof NUMBER) && (total_nb_country >0 ) )
		{

			result=(total_subjects/total_nb_country)*nb_country_region;
		}
		else
		{
			if (act.SP_AA_N_CL_SUB_AMERICA>=0)
			{
			result=act.SP_AA_N_CL_SUB_AMERICA;
			}
			else
			{
			result=0;	
			}
		}
	}
	else
	{
		var trial_index=act.sp_get_trial_id("");
		var trial="OpxActivity".get(trial_index);

		if (trial instanceof OpxActivity)
		{
			result=trial.SP_DA_N_CL_SUB_AMERICA;
		}
		
	}
}
	return result;
}

function sp_cl_subj_AMERICA_lock()
{
	var act=this;
	var lock=true;

	if (act.SP_NF_CL_TRIAL)
	{
		lock=false;
	}
	
	return lock;	
}

function sp_cl_subj_AMERICA_modif(n)
{
	if (n instanceof NUMBER)
	{
		this.SP_AA_N_CL_SUB_AMERICA=n;
	
	}
	else
	{
		this.SP_AA_N_CL_SUB_AMERICA=-1;
	}	
}

var CL_SUB_AMERICA = new objectAttribute("OpxActivity","SP_DA_N_CL_SUB_AMERICA","NUMBER");
CL_SUB_AMERICA.comment = "#Subjects(North America)";
CL_SUB_AMERICA.reader = sp_cl_subj_AMERICA_read;
CL_SUB_AMERICA.modifier = sp_cl_subj_AMERICA_modif;
CL_SUB_AMERICA.locker= sp_cl_subj_AMERICA_lock;

//Subjects Latin America

function sp_cl_subj_LATIN_read()
{

	var act=this;
	var result=0;
	var total_subjects=0;
	var total_nb_country=0;
	var nb_country_region=0;

if (act instanceof OpxActivity)
{
	if (act.SP_NF_CL_TRIAL)
	{
		total_subjects=act.SP_AA_CL_TRIAL_EXP_SUB;
		total_nb_country=this.sp_cl_list_count_reg("SP_RING_CL_COUNTRY","Greater Europe,Africa and Middle-East,Asia Pacific,Latin America,North America");
		nb_country_region=this.sp_cl_list_count_reg("SP_RING_CL_COUNTRY","Latin America");

		if ( (total_subjects instanceof NUMBER)&& (act.SP_AA_N_CL_SUB_LATIN<0) && (nb_country_region instanceof NUMBER) 
				&& (total_nb_country instanceof NUMBER) && (total_nb_country >0 ) )
		{

			result=(total_subjects/total_nb_country)*nb_country_region;

		}
		else
		{
			if (act.SP_AA_N_CL_SUB_LATIN>=0)
			{
			result=act.SP_AA_N_CL_SUB_LATIN;
			}
			else
			{
			result=0;
				
			}
		}
		
	}
	else
	{
		var trial_index=act.sp_get_trial_id("");
		var trial="OpxActivity".get(trial_index);

		if (trial instanceof OpxActivity)
		{
			result=trial.SP_DA_N_CL_SUB_LATIN;
		}
	}
}
	return result;
}

function sp_cl_subj_LATIN_lock()
{
	var act=this;
	var lock=true;

	if (act.SP_NF_CL_TRIAL)
	{
		lock=false;
	}
	
	return lock;	
}

function sp_cl_subj_LATIN_modif(n)
{
	if (n instanceof NUMBER)
	{
		this.SP_AA_N_CL_SUB_LATIN=n;
	
	}
	else
	{
		this.SP_AA_N_CL_SUB_LATIN=-1;
	}	
}

var CL_SUB_LATIN = new objectAttribute("OpxActivity","SP_DA_N_CL_SUB_LATIN","NUMBER");
CL_SUB_LATIN.comment = "#Subjects(Latin America)";
CL_SUB_LATIN.reader = sp_cl_subj_LATIN_read;
CL_SUB_LATIN.modifier = sp_cl_subj_LATIN_modif;
CL_SUB_LATIN.locker= sp_cl_subj_LATIN_lock;


//Sites Greater Europe field

function sp_cl_sites_eu_read()
{

	var act=this;
	var result=0;
	var total_Sites=0;
	var total_nb_country=0;
	var nb_country_region=0;

if (act instanceof OpxActivity)
{
	if (act.SP_NF_CL_TRIAL)
	{
		total_Sites=act.SP_AA_CL_INVESTIGATOR_SITES;
		total_nb_country=this.sp_cl_list_count_reg("SP_RING_CL_COUNTRY","Greater Europe,Africa and Middle-East,Asia Pacific,Latin America,North America");
		nb_country_region=this.sp_cl_list_count_reg("SP_RING_CL_COUNTRY","Greater Europe");

		if ( (total_Sites instanceof NUMBER)&& (act.SP_AA_N_CL_SITES_EU<0) && (nb_country_region instanceof NUMBER) 
				&& (total_nb_country instanceof NUMBER) && (total_nb_country >0 ) )
		{

			result=(total_Sites/total_nb_country)*nb_country_region;

		}
		else
		{
			if (act.SP_AA_N_CL_SITES_EU>=0)
			{
			result=act.SP_AA_N_CL_SITES_EU;
			}
			else
			{
			result=0;
				
			}
		}
		
	}
	else
	{
		var trial_index=act.sp_get_trial_id("");
		var trial="OpxActivity".get(trial_index);

		if (trial instanceof OpxActivity)
		{
			result=trial.SP_DA_N_CL_SITES_EU;
		}
	}
}
	return result;
}

function sp_cl_sites_eu_lock()
{
	var act=this;
	var lock=true;

	if (act.SP_NF_CL_TRIAL)
	{
		lock=false;
	}
	
	return lock;	
}

function sp_cl_sites_eu_modif(n)
{
	if (n instanceof NUMBER)
	{
		this.SP_AA_N_CL_SITES_EU=n;
	
	}
	else
	{
		this.SP_AA_N_CL_SITES_EU=-1;
	}	
}

var CL_SITES_EU = new objectAttribute("OpxActivity","SP_DA_N_CL_SITES_EU","NUMBER");
CL_SITES_EU.comment = "#Sites(Greater Europe)";
CL_SITES_EU.reader = sp_cl_sites_eu_read;
CL_SITES_EU.modifier = sp_cl_sites_eu_modif;
CL_SITES_EU.locker= sp_cl_sites_eu_lock;


//Sites Africa and Middle-East

function sp_cl_sites_africa_read()
{

	var act=this;
	var result=0;
	var total_Sites=0;
	var total_nb_country=0;
	var nb_country_region=0;

if (act instanceof OpxActivity)
{
	if (act.SP_NF_CL_TRIAL)
	{
		total_Sites=act.SP_AA_CL_INVESTIGATOR_SITES;
		total_nb_country=this.sp_cl_list_count_reg("SP_RING_CL_COUNTRY","Greater Europe,Africa and Middle-East,Asia Pacific,Latin America,North America");
		nb_country_region=this.sp_cl_list_count_reg("SP_RING_CL_COUNTRY","Africa and Middle-East");

		if ( (total_Sites instanceof NUMBER)&& (act.SP_AA_N_CL_SITES_AFRICA<0) && (nb_country_region instanceof NUMBER) 
				&& (total_nb_country instanceof NUMBER) && (total_nb_country >0 ) )
		{

			result=(total_Sites/total_nb_country)*nb_country_region;

		}
		else
		{
			if (act.SP_AA_N_CL_SITES_AFRICA>=0)
			{
			result=act.SP_AA_N_CL_SITES_AFRICA;
			}
			else
			{
			result=0;	
			}
		}
	}
	else
	{
		var trial_index=act.sp_get_trial_id("");
		var trial="OpxActivity".get(trial_index);
		if (trial instanceof OpxActivity)
		{
			result=trial.SP_DA_N_CL_SITES_AFRICA;
		}
	}
}
return result;
}

function sp_cl_sites_africa_lock()
{
	var act=this;
	var lock=true;

	if (act.SP_NF_CL_TRIAL)
	{
		lock=false;
	}
	
	return lock;	
}

function sp_cl_sites_africa_modif(n)
{
	if (n instanceof NUMBER)
	{
		this.SP_AA_N_CL_SITES_AFRICA=n;
	
	}
	else
	{
		this.SP_AA_N_CL_SITES_AFRICA=-1;
	}
}

var CL_SITES_AFRICA = new objectAttribute("OpxActivity","SP_DA_N_CL_SITES_AFRICA","NUMBER");
CL_SITES_AFRICA.comment = "#Sites(Africa and Middle-East)";
CL_SITES_AFRICA.reader = sp_cl_sites_africa_read;
CL_SITES_AFRICA.modifier = sp_cl_sites_africa_modif;
CL_SITES_AFRICA.locker= sp_cl_sites_africa_lock;

//Sites Africa and Middle-East

function sp_cl_sites_ASIA_read()
{

	var act=this;
	var result=0;
	var total_Sites=0;
	var total_nb_country=0;
	var nb_country_region=0;

if (act instanceof OpxActivity)
{
	if (act.SP_NF_CL_TRIAL)
	{
		total_Sites=act.SP_AA_CL_INVESTIGATOR_SITES;
		total_nb_country=this.sp_cl_list_count_reg("SP_RING_CL_COUNTRY","Greater Europe,Africa and Middle-East,Asia Pacific,Latin America,North America");
		nb_country_region=this.sp_cl_list_count_reg("SP_RING_CL_COUNTRY","Asia Pacific");

		if ( (total_Sites instanceof NUMBER)&& (act.SP_AA_N_CL_SITES_ASIA<0) && (nb_country_region instanceof NUMBER) 
				&& (total_nb_country instanceof NUMBER) && (total_nb_country >0 ) )
		{

			result=(total_Sites/total_nb_country)*nb_country_region;

		}
		else
		{
			if (act.SP_AA_N_CL_SITES_ASIA>=0)
			{
			result=act.SP_AA_N_CL_SITES_ASIA;
			}
			else
			{
			result=0;
				
			}
		}
		
	}
	else
	{
		var trial_index=act.sp_get_trial_id("");
		var trial="OpxActivity".get(trial_index);
		if (trial instanceof OpxActivity)
		{
			result=trial.SP_DA_N_CL_SITES_ASIA;
		}	
	}
}
return result;
}

function sp_cl_sites_ASIA_lock()
{
	var act=this;
	var lock=true;

	if (act.SP_NF_CL_TRIAL)
	{
		lock=false;
	}
	
	return lock;	
}

function sp_cl_sites_ASIA_modif(n)
{
	if (n instanceof NUMBER)
	{
		this.SP_AA_N_CL_SITES_ASIA=n;

	}
	else
	{
		this.SP_AA_N_CL_SITES_ASIA=-1;
	}	

}

var CL_SITES_ASIA = new objectAttribute("OpxActivity","SP_DA_N_CL_SITES_ASIA","NUMBER");
CL_SITES_ASIA.comment = "#Sites(Asia Pacific)";
CL_SITES_ASIA.reader = sp_cl_sites_ASIA_read;
CL_SITES_ASIA.modifier = sp_cl_sites_ASIA_modif;
CL_SITES_ASIA.locker= sp_cl_sites_ASIA_lock;


//Sites North America

function sp_cl_sites_AMERICA_read()
{

	var act=this;
	var result=0;
	var total_Sites=0;
	var total_nb_country=0;
	var nb_country_region=0;

if (act instanceof OpxActivity)
{
	if (act.SP_NF_CL_TRIAL)
	{
		total_Sites=act.SP_AA_CL_INVESTIGATOR_SITES;
		total_nb_country=this.sp_cl_list_count_reg("SP_RING_CL_COUNTRY","Greater Europe,Africa and Middle-East,Asia Pacific,Latin America,North America");
		nb_country_region=this.sp_cl_list_count_reg("SP_RING_CL_COUNTRY","North America");

		if ( (total_Sites instanceof NUMBER)&& (act.SP_AA_N_CL_SITES_AMERICA<0) && (nb_country_region instanceof NUMBER) 
				&& (total_nb_country instanceof NUMBER) && (total_nb_country >0 ) )
		{

			result=(total_Sites/total_nb_country)*nb_country_region;

		}
		else
		{
			if (act.SP_AA_N_CL_SITES_AMERICA>=0)
			{
			result=act.SP_AA_N_CL_SITES_AMERICA;
			}
			else
			{
			result=0;
				
			}
		}
		
	}
	else
	{
		var trial_index=act.sp_get_trial_id("");
		var trial="OpxActivity".get(trial_index);
		if (trial instanceof OpxActivity)
		{
			result=trial.SP_DA_N_CL_SITES_AMERICA;
		}
	}
}
	return result;
}

function sp_cl_sites_AMERICA_lock()
{
	var act=this;
	var lock=true;

	if (act.SP_NF_CL_TRIAL)
	{
		lock=false;
	}
	
	return lock;	
}

function sp_cl_sites_AMERICA_modif(n)
{
	if (n instanceof NUMBER)
	{
		this.SP_AA_N_CL_SITES_AMERICA=n;
	
	}
	else
	{
		this.SP_AA_N_CL_SITES_AMERICA=-1;
	}	

}

var CL_SITES_AMERICA = new objectAttribute("OpxActivity","SP_DA_N_CL_SITES_AMERICA","NUMBER");
CL_SITES_AMERICA.comment = "#Sites(North America)";
CL_SITES_AMERICA.reader = sp_cl_sites_AMERICA_read;
CL_SITES_AMERICA.modifier = sp_cl_sites_AMERICA_modif;
CL_SITES_AMERICA.locker= sp_cl_sites_AMERICA_lock;

//Sites Latin America

function sp_cl_sites_LATIN_read()
{

	var act=this;
	var result=0;
	var total_Sites=0;
	var total_nb_country=0;
	var nb_country_region=0;

if (act instanceof OpxActivity)
{
	if (act.SP_NF_CL_TRIAL)
	{
		total_Sites=act.SP_AA_CL_INVESTIGATOR_SITES;
		total_nb_country=this.sp_cl_list_count_reg("SP_RING_CL_COUNTRY","Greater Europe,Africa and Middle-East,Asia Pacific,Latin America,North America");
		nb_country_region=this.sp_cl_list_count_reg("SP_RING_CL_COUNTRY","Latin America");

		if ( (total_Sites instanceof NUMBER)&& (act.SP_AA_N_CL_SITES_LATIN<0) && (nb_country_region instanceof NUMBER) 
				&& (total_nb_country instanceof NUMBER) && (total_nb_country >0 ) )
		{

			result=(total_Sites/total_nb_country)*nb_country_region;

		}
		else
		{
			if (act.SP_AA_N_CL_SITES_LATIN>=0)
			{
			result=act.SP_AA_N_CL_SITES_LATIN;
			}
			else
			{
			result=0;
				
			}
		}
		
	}
	else
	{
		var trial_index=act.sp_get_trial_id("");
		var trial="OpxActivity".get(trial_index);
		if (trial instanceof OpxActivity)
		{
			result=trial.SP_DA_N_CL_SITES_LATIN;
		}
	}
}
	return result;
}

function sp_cl_sites_LATIN_lock()
{
	var act=this;
	var lock=true;

	if (act.SP_NF_CL_TRIAL)
	{
		lock=false;
	}
	
	return lock;	
}

function sp_cl_sites_LATIN_modif(n)
{
	if (n instanceof NUMBER)
	{
		this.SP_AA_N_CL_SITES_LATIN=n;
	
	}
	else
	{
		this.SP_AA_N_CL_SITES_LATIN=-1;
	}
}

var CL_SITES_LATIN = new objectAttribute("OpxActivity","SP_DA_N_CL_SITES_LATIN","NUMBER");
CL_SITES_LATIN.comment = "#Sites(Latin America)";
CL_SITES_LATIN.reader = sp_cl_sites_LATIN_read;
CL_SITES_LATIN.modifier = sp_cl_sites_LATIN_modif;
CL_SITES_LATIN.locker= sp_cl_sites_LATIN_lock;


//Data capture

function sp_cl_data_cap_read ()
{
	var act=this;
	var result="";

	if (act instanceof Opxactivity) 
	{
		if (act.SP_NF_CL_TRIAL)
		{
			
			result=act.SP_AA_CL_DATA_CAPT;
		}
		else
		{
			if (act.SP_NF_B_CL_IS_DATA_MGR || act.SP_NF_B_CL_IS_ANALYST)
			{

				result=act.Sp_get_info_trial_attribute("SP_AA_CL_DATA_CAPT");
			}

		}

	}	

	Return result;
}

function sp_cl_data_cap_lock ()
{
	var act=this;
	if (act.SP_NF_CL_TRIAL)
	{
		return false;
	}
	else
	{
		return true;
	}	
}

function sp_cl_data_cap_modif (data_cap)
{
	this.SP_AA_CL_DATA_CAPT=data_cap;
}

var CL_DATA_CAP = new objectAttribute("OpxActivity","SP_DA_CL_DATA_CAPT","SP_AT_DATA_CAPT");
CL_DATA_CAP.comment = "Data Capture";
CL_DATA_CAP.reader = sp_cl_data_cap_read;
CL_DATA_CAP.modifier = sp_cl_data_cap_modif;
CL_DATA_CAP.locker= sp_cl_data_cap_lock;

// Unique CRF Pages per Subject (SP_AA_CL_UNIQUE_CRF_PAGES)

function sp_cl_unique_crf_page_read ()
{
	var act=this.sp_get_trial_id("");
	var trial="OpxActivity".get(act);
	var result=0;
	 if(this.SP_NF_CL_TRIAL)
	{
	result=60;
	}
	// //var vec_val=new vector ("Epidemiology",20,"Phase 1",30,"Phase 2a",35,"Phase 2b",40,"Phase 3",40,"Phase 4",25,"Exploratory Phase",0,"Not applicable",0);
	// /*
	// I/II =35
	// II=35
	// II/III=40
	// N/A = 20
	
	// */
	// //var vec_val=new vector ("I",30,"IIa",35,"I/II",35,"II",35,"II/III",40,"IIb",40,"III",40,"IIIb",40,"IV",25,"N/A",25);edited as per ITS-INC5509561

	if (trial instanceof Opxactivity) 
	{
		if (trial.SP_AA_CL_UNIQUE_CRF_PAGES > 0 && this.SP_NF_CL_TRIAL)
		{
			result=trial.SP_AA_CL_UNIQUE_CRF_PAGES;
		}
		// /*else
		// {
			// if (vec_val.get(trial.SP_NF_CL_TRIAL_PHASE) instanceof NUMBER)
			// {
				// result=vec_val.get(trial.SP_NF_CL_TRIAL_PHASE);
			// }
		// }*/

	}	
	

	return result;
}

function sp_cl_unique_crf_page_lock ()
{
	var act=this;
	if (act.SP_NF_CL_TRIAL)
	{
		return false;
	}
	else
	{
		return true;
	}	
}

function sp_cl_unique_crf_page_modif (n)
{
	if (n instanceof NUMBER)
	{
	this.SP_AA_CL_UNIQUE_CRF_PAGES=n;		
	}

}

var CL_UNIQUE_CRF_PAGE = new objectAttribute("OpxActivity","SP_DA_CL_UNIQUE_CRF_PAGES","NUMBER");
CL_UNIQUE_CRF_PAGE.comment = "Unique CRF Pages per Subject";
CL_UNIQUE_CRF_PAGE.reader = sp_cl_unique_crf_page_read;
CL_UNIQUE_CRF_PAGE.modifier = sp_cl_unique_crf_page_modif;
CL_UNIQUE_CRF_PAGE.locker= sp_cl_unique_crf_page_lock;




// Unique CRF Pages per Subject (SP_AA_CL_CRF_PAGES)

function sp_cl_crf_page_read ()
{
	var act=this.sp_get_trial_id("");
	var trial="OpxActivity".get(act);
	var result=0;
	var prj_code="";
	if(this.SP_NF_CL_TRIAL)
	{
	result=90;
	}
//	var vec_val01=new vector ("Epidemiology",25,"Phase 1",45,"Phase 2a",65,"Phase 2b",75,"Phase 3",65,"Phase 4",45,"Exploratory Phase",0,"Not applicable",0);
/*
***vec_val02****
I/II = 65
II/III =75
II = 65
N/A=25

*/
	//var vec_val01=new vector ("N/A",25,"I",45,"IIa",65,"I/II",65,"II",65,"II/III",75,"IIb",75,"III",65,"IIIb",65,"IV",45);edited as per ITS-INC5509561

	//values depending on projet code
	//var vec_val02=new vector ("Epidemiology",25,"Phase 1",45,"Phase 2a",85,"Phase 2b",100,"Phase 3",100,"Phase 4",45,"Exploratory Phase",0,"Not applicable",0);
	//var vec_val02=new vector ("N/A",25,"I",45,"IIa",85,"I/II",65,"II",65,"II/III",75,"IIb",100,"III",100,"IIIb",100,"IV",45);
	
	if (trial instanceof Opxactivity) 
	{
		prj_code=trial.project.get("SPAS_AA_PROJECT_CODE");
		
		if (trial.SP_AA_CL_CRF_PAGES > 0 && this.SP_NF_CL_TRIAL)
		{
			result=trial.SP_AA_CL_CRF_PAGES;
		}
		/*else
		{
				if (vec_val01.get(trial.SP_NF_CL_TRIAL_PHASE) instanceof NUMBER)
				{
					result=vec_val01.get(trial.SP_NF_CL_TRIAL_PHASE);
				}
			
		}*/

	}	

	return result;
}

function sp_cl_crf_page_lock ()
{
	var act=this;
	if (act.SP_NF_CL_TRIAL)
	{
		return false;
	}
	else
	{
		return true;
	}	
}

function sp_cl_crf_page_modif (n)
{
	if (n instanceof NUMBER)
	{
	this.SP_AA_CL_CRF_PAGES=n;		
	}

}

var CL_CRF_PAGE = new objectAttribute("OpxActivity","SP_DA_CL_CRF_PAGES","NUMBER");
CL_CRF_PAGE.comment = "N  CRF Pages per Subject";
CL_CRF_PAGE.reader = sp_cl_crf_page_read;
CL_CRF_PAGE.modifier = sp_cl_crf_page_modif;
CL_CRF_PAGE.locker= sp_cl_crf_page_lock;


// Total load in TIME_SYNTHESIS 

function sp_cl_total_load_read ()
{
	var result=0;

	for (var ph in this.ACTIVITY.ALLOCATIONS where ( (ph.cost_account.name==this.cost_account.name) && 
	(this.resource.name==ph.resource.name) && (this.SPAS_RA_SITE.name==ph.SPAS_RA_SITE.name) && (this.SP_RA_METRIC.name==ph.SP_RA_METRIC.name)) )
		{

			result=result+ph.total_load;
				
		}

	Return result;
}


function sp_cl_total_load_lock ()
{
	var result=false;
	var cmpt=0;
	for (var ph in this.ACTIVITY.ALLOCATIONS where ( (ph.cost_account.name==this.cost_account.name) &&
	(this.resource.name==ph.resource.name) && (this.SPAS_RA_SITE.name==ph.SPAS_RA_SITE.name) && (this.SP_RA_METRIC.name==ph.SP_RA_METRIC.name)))
		{
			cmpt=cmpt+1;

		}
	if (cmpt>1)
	{
		result=true;
	}
	
return result;
}


function sp_cl_total_load_modif (load)
{
	var cmpt=0;
	var ph_upd;
	for (var ph in this.ACTIVITY.ALLOCATIONS where ( (ph.cost_account.name==this.cost_account.name) && 
	(this.resource.name==ph.resource.name) && (this.SPAS_RA_SITE.name==ph.SPAS_RA_SITE.name) && (this.SP_RA_METRIC.name==ph.SP_RA_METRIC.name)))
		{
			ph_upd=ph;
			cmpt=cmpt+1;
			if (cmpt>1)
			{
				alert("Updating is not allowed");
				break;
			}

		}
	if (cmpt==1)
	{
		
		ph_upd.total_load=load;
	}
}

var CL_TOTAL_LOAD = new objectAttribute("OpxTIME_SYNTHESIS","SP_DA_CL_TOTAL_LOAD","NUMBER");
CL_TOTAL_LOAD.comment = "Total Load (Clinical)";
CL_TOTAL_LOAD.reader = sp_cl_total_load_read;
CL_TOTAL_LOAD.modifier = sp_cl_total_load_modif;
CL_TOTAL_LOAD.locker= sp_cl_total_load_lock;

//Estimated FTE

function sp_cl_fte_estimasted_read ()
{
	var result=0;
	for (var ph in this.ACTIVITY.ALLOCATIONS where ( (ph.cost_account.name==this.cost_account.name) && 
	(this.resource.name==ph.resource.name) && (this.SPAS_RA_SITE.name==ph.SPAS_RA_SITE.name)))
		{
			if  (ph.COST_ACCOUNT.NAME=="FTE_ESTIMATED" || ph.COST_ACCOUNT.NAME=="FTE")
				{
					result=result+ph.SP_NF_CL_REF_FTE_PH;
				}

		}
		

return result;	

}


function sp_cl_fte_estimated_lock ()
{
	var cmpt=0;
	var result=false;
	
	for (var ph in this.ACTIVITY.ALLOCATIONS where ( (ph.cost_account.name==this.cost_account.name) && 
	(this.resource.name==ph.resource.name) && (this.SPAS_RA_SITE.name==ph.SPAS_RA_SITE.name)))
		{
			cmpt=cmpt+1;
		}
	if (cmpt>1)
	{
		result=true;
	}
	
return result;
}


function sp_cl_fte_estimated_modif (load)
{
	var no_support=false;
	
	for (var ph in this.ACTIVITY.ALLOCATIONS where ( (ph.cost_account.name==this.cost_account.name) && 
	(this.resource.name==ph.resource.name) && (this.SPAS_RA_SITE.name==ph.SPAS_RA_SITE.name)))
		{

			no_support=ph.SP_AA_B_CL_NO_SUPPORT;
			if (! no_support)
			{
			ph.TOTAL_LOAD=ph.SP_NF_CONV_FTE*load;
			}
			else
			{
			alert("This allocation is flagged as No Support; to edit FTEs to this allocation, change No support? to no and then reestimate.");
			}
			break;
		}	
}

var CL_FTE_ESTIM = new objectAttribute("OpxTIME_SYNTHESIS","SP_DA_CL_FTE_ESTIMATED","NUMBER");
CL_FTE_ESTIM.comment = "Estimated FTE (Clinical)";
CL_FTE_ESTIM.reader = sp_cl_fte_estimasted_read;
CL_FTE_ESTIM.modifier = sp_cl_fte_estimated_modif;
CL_FTE_ESTIM.locker= sp_cl_fte_estimated_lock;




//YSA Complexity level for clinical fte metrics

var vec_fields= new vector("SP_AA_CL_CF_DATAMAN","SP_AA_CL_CF_BIOSTAT",
"SP_AA_CL_CF_BIOSTATPROG","SP_AA_CL_CF_CPM",
"SP_AA_CL_CF_GMA","SP_AA_CL_CF_MONITO","SP_AA_CL_CF_GCD");

var vec_fields_platform= new vector ("SP_AA_CL_CF_DATAMAN","CDM",
"SP_AA_CL_CF_BIOSTAT","STAT",
"SP_AA_CL_CF_BIOSTATPROG","PROG",
"SP_AA_CL_CF_CPM","CPM Platform",
"SP_AA_CL_CF_GMA","CMO",
"SP_AA_CL_CF_MONITO","SML",
"SP_AA_CL_CF_GCD","GCD");

var vec_Codif= new vector("SP_AA_CL_CF_DATAMAN","DATA_MGT",
"SP_AA_CL_CF_BIOSTAT","STATIS",
"SP_AA_CL_CF_BIOSTATPROG","PROG",
"SP_AA_CL_CF_CPM","PROG_MGT",
"SP_AA_CL_CF_GMA","MED_OP",
"SP_AA_CL_CF_MONITO","MGT_LOG",
"SP_AA_CL_CF_GCD","GCD");

var vec_fields_lock= new vector("SP_AA_CL_CF_DATAMAN","SP_NF_B_IS_DATA_MGT",
"SP_AA_CL_CF_BIOSTAT","SP_NF_B_CL_IS_STAT",
"SP_AA_CL_CF_BIOSTATPROG","SP_NF_B_CL_IS_PROG",
"SP_AA_CL_CF_CPM","SP_NF_B_IS_PROG_MGT",
"SP_AA_CL_CF_GMA","SP_NF_B_IS_MED_OP",
"SP_AA_CL_CF_MONITO","SP_NF_B_IS_MGT_LOG",
"SP_AA_CL_CF_GCD","SP_NF_B_IS_GCD");


for (var v in vec_fields)
{
	
	var readerFunction="Function Complexity_level_read_"+vec_Codif.get(v)+"() return Complexity_level_read(\""+v+"\",\""+vec_fields_lock.get(v)+"\" );";
	readerFunction.eval();

	var modifierFunction="Function Complexity_level_mod_" + vec_Codif.get(v)+"(value) return Complexity_level_mod(\""+v+"\",value);";
	modifierFunction.eval();

	var lockerFunction="Function Complexity_level_lock_"+vec_Codif.get(v)+"() return Complexity_level_lock(\""+vec_fields_lock.get(v)+"\");";
	lockerFunction.eval();

	var complexity_level = new ObjectAttribute("OpxActivity","SP_DA_CL_COMPL_"+vec_Codif.get(v),"SP_AT_CL_COMPL_LEVEL");
	complexity_level.reader=new function("Complexity_level_read_"+vec_Codif.get(v));
	complexity_level.modifier=new function("Complexity_level_mod_"+vec_Codif.get(v));
	complexity_level.comment="Complexity factor "+vec_fields_platform.get(v);
	complexity_level.locker=new function("Complexity_level_lock_"+vec_Codif.get(v));
	
}


function Complexity_level_read(field,cond)
{
	var result="";
	var trial_index;
	var trial;
if (this instanceof OpxActivity)
{
	if (this.SP_NF_CL_TRIAL
	&& this.get(field) instanceof STRING)
	{
		result= this.get(field);
	}
	else
	{
		if (this.get(cond) instanceof BOOLEAN
		&& this.get(field) instanceof STRING
		&& this.get(cond) &&
		this.get(field)!="")
		{
			result= this.get(field);		
		}
		else
		{
			trial_index=this.sp_get_trial_id("");
			trial="OpxActivity".get(trial_index);
			if (trial instanceof OpxActivity && 
			trial.get(field) instanceof STRING &&
			this.get(cond) instanceof BOOLEAN &&
			this.get(cond)
			)
			{
				result= trial.get(field);
			}
		}
	}
}

return result;
}

function Complexity_level_lock (cond)
{

	var result=true;
	
	if (this.get(cond) || this.SP_NF_CL_TRIAL)
	{
		result=false;
	}

return result;	
}


function Complexity_level_mod(field,value)
{

	if (this instanceof OpxActivity)
	{
			
		if (value instanceof STRING)
		{
			this.set(field,value);
		}
	}
}

//Translator language on SP_PT_CL_TRANSLATION_FTE


function sp_cl_transl_lang_read ()
{
	var lang=this;
	var result="";

	if (lang instanceof OpxSP_PT_CL_TRANSLATION_FTE ) 
	{
		result=lang.SP_AA_CL_LANGUAGES;
	}	

	return result;
}


function sp_cl_transl_lang_modif (l)
{
	this.SP_AA_CL_LANGUAGES=l;
}

var CL_TRANS_LANG = new objectAttribute("OpxSP_PT_CL_TRANSLATION_FTE","SP_DA_CL_LANGUAGES","SP_AT_CLIN_LANGUAGE");
CL_TRANS_LANG.comment = "Language";
CL_TRANS_LANG.reader = sp_cl_transl_lang_read;
CL_TRANS_LANG.modifier = sp_cl_transl_lang_modif;


//Translator language on SP_PT_CL_TRANSLATION_FTE

function sp_cl_ph_transl_lang_read ()
{
	var ph=this;
	var result="";

	if (ph instanceof OpxPlannedHours && ph.SP_AA_S_PH_CL_LANGUAGE!="" ) 
	{
		result=ph.SP_AA_S_PH_CL_LANGUAGE;
	}	

	return result;
}

function sp_cl_ph_transl_lang_lock ()
{
	var ph=this;
	var lock=true;
	if ((ph.COST_ACCOUNT instanceof OpxCOST_ACCOUNT && ph.COST_ACCOUNT.name=="FTE") && (PH.Resource instanceof OpxRESOURCE && PH.Resource.name=="CLIN-GCD-TRA"))
	{
		lock=false;
	}
return lock;	
}

function sp_cl_ph_transl_lang_modif (l)
{
	this.SP_AA_S_PH_CL_LANGUAGE=l;
}

var CL_PH_TRANS_LANG = new objectAttribute("OpxPlannedHours","SP_DA_PH_CL_LANGUAGES","SP_AT_CLIN_LANGUAGE");
CL_PH_TRANS_LANG.comment = "Languages (Translator)";
CL_PH_TRANS_LANG.reader = sp_cl_ph_transl_lang_read;
CL_PH_TRANS_LANG.modifier =sp_cl_ph_transl_lang_modif;
CL_PH_TRANS_LANG.locker=sp_cl_ph_transl_lang_lock;

//dynamic fields used in clinical cost_account

function sp_CL_VENDOR_read ()
{
	var result="1-UNSPECIFIED";

	if ((this instanceof OpxSP_PT_TRIAL_CAT_COST_INFO) && (this.SP_AA_S_TCCI_CRO_VENDOR instanceof STRING))
	{
	result=this.SP_AA_S_TCCI_CRO_VENDOR;
	}

	return result;
}


function sp_CL_VENDOR_modif (st)
{
var vec_cro=new vector();
var vec_ven_in=new vector();
for (var cv in "OpxSP_PT_CL_CRO_VENDOR".findclass())
{
	vec_cro.push(cv.name);
}
	
if (st instanceof STRING && st!="" && st!=undefined)
{
	vec_ven_in=st.parsevector();
	vec_ven_in=Intersection(vec_cro,vec_ven_in);
	if (vec_ven_in instanceof Vector && vec_ven_in.length>0)
	{
		this.SP_AA_S_TCCI_CRO_VENDOR=vec_ven_in.JOIN(",");	
	}
	else{
		this.SP_AA_S_TCCI_CRO_VENDOR="1-UNSPECIFIED";
	}

}
else{
this.SP_AA_S_TCCI_CRO_VENDOR="1-UNSPECIFIED";
}

}

var CL_VENDOR = new objectAttribute("OpxSP_PT_TRIAL_CAT_COST_INFO","SP_DA_CL_COST_VENDOR","STRING");
CL_VENDOR.comment = "Vendor (cost)";
CL_VENDOR.reader = sp_CL_VENDOR_read;
CL_VENDOR.modifier = sp_CL_VENDOR_modif;


function sp_CL_REV_AMT_read ()
{
	var result=0;

	if ((this instanceof OpxSP_PT_TRIAL_CAT_COST_INFO) && (this.SP_AA_N_TCCI_REV_AMT instanceof NUMBER))
	{
	result=this.SP_AA_N_TCCI_REV_AMT;
	}

	return result;
}


function sp_CL_REV_AMT_modif (st)
{

if (st instanceof NUMBER && st!="" && st!=undefined)
{
	this.SP_AA_N_TCCI_REV_AMT=st;
}
else{
this.SP_AA_N_TCCI_REV_AMT=0;
}

}

var CL_REV_AMT = new objectAttribute("OpxSP_PT_TRIAL_CAT_COST_INFO","SP_DA_CL_COST_REV_AMT","NUMBER");
CL_REV_AMT.comment = "Revised Amount (cost)";
CL_REV_AMT.reader = sp_CL_REV_AMT_read;
CL_REV_AMT.modifier = sp_CL_REV_AMT_modif;




//Ring Attributes section

//AS Metrics Resource List

Var AS_MET_RES="OpxActivity".defineRingAttribute("SP_RING_AS_MET_RES_LIST","AS Metrics Type 1 Resource :","r.SP_RA_AS_MET_RES_ACT.SP_PT_AS_MET_NN_RES",
"SP_RA_AS_MET_RES_LIST",
"SP_RA_AS_MET_RES_ACT");
AS_MET_RES.length = 16000;
AS_MET_RES.category = "Ring attribute";
//Sponsorship ring attribute

var trial_sponsorship="OpxActivity".defineRingAttribute("SP_RING_CL_SPONSORSHIP","Sponsorship","r.SP_RA_SPONSORHIP_ACT.SP_PT_CL_NN_SPONSORSHIP",
"SP_RA_SPONSORSHIP_VAL",
"SP_RA_SPONSORHIP_ACT");
trial_sponsorship.length = 16000;
trial_sponsorship.category = "Ring attribute";

//Country (Clin Trial) ring attribute (P5: SP_AA_CL_LOCATION_TRIAL)


var trial_cl_country="OpxActivity".defineRingAttribute("SP_RING_CL_COUNTRY","Country (Clin Trial)","r.SP_RA_CL_COUNTRY_ACT.SP_PT_CL_NN_COUNTRIES",
"SP_RA_CL_COUNTRY_VAL",
"SP_RA_CL_COUNTRY_ACT");
trial_cl_country.length = 16000;
trial_cl_country.category = "Ring attribute";


//Objectives ring attribute

var trial_cl_objectives="OpxActivity".defineRingAttribute("SP_RING_CL_OBJECTIVES","Objectives","r.SP_RA_CL_OBJECTIVES_ACT.SP_PT_CL_NN_OBJECTIVES",
"SP_RA_CL_OBJECTIVES_VAL",
"SP_RA_CL_OBJECTIVES_ACT");
trial_cl_objectives.length = 16000;
trial_cl_objectives.category = "Ring attribute";

//Population ring attribute

var trial_cl_Population="OpxActivity".defineRingAttribute("SP_RING_CL_POPULATION","Population","r.SP_RA_CL_POPULATION_ACT.SP_PT_CL_NN_POPULATION",
"SP_RA_CL_POPULATION_VAL",
"SP_RA_CL_POPULATION_ACT");
trial_cl_Population.length = 16000;
trial_cl_Population.category = "Ring attribute";

//Population ring attribute (Programmer)

var prog_cl_country="OpxActivity".defineRingAttribute("SP_RING_CL_PROGRAMMER","Programmer","r.SP_RA_CL_SITES_PROG_ACT.SP_PT_CL_NN_SITES_PROG",
"SP_RA_CL_SITES_VAL_PROG",
"SP_RA_CL_SITES_PROG_ACT");
prog_cl_country.length = 16000;
prog_cl_country.category = "Ring attribute";


//Statistician ring attribute (SP_AA_CL_STATISTICIAN)

var stat_cl_country="OpxActivity".defineRingAttribute("SP_RING_CL_STATISTICIAN","Statistician","r.SP_RA_CL_SITES_STAT_ACT.SP_PT_CL_NN_SITES_STAT",
"SP_RA_CL_SITES_VAL_STAT",
"SP_RA_CL_SITES_STAT_ACT");
stat_cl_country.length = 16000;
stat_cl_country.category = "Ring attribute";


//Clin. Trial Analyst ring attribute (SP_AA_CL_TRIAL_ANALYST)

var analyst_cl_country="OpxActivity".defineRingAttribute("SP_RING_CL_TRIAL_ANALYST","Clin. Trial Analyst","r.SP_RA_CL_SITES_TANLST_ACT.SP_PT_CL_NN_SITES_TANLST",
"SP_RA_CL_SITES_VAL_TANLST",
"SP_RA_CL_SITES_TANLST_ACT");
analyst_cl_country.length = 16000;
analyst_cl_country.category = "Ring attribute";


//Data Manager ring attribute  (SP_AA_CL_DATA_MANAGER)

var manager_cl_country="OpxActivity".defineRingAttribute("SP_RING_CL_DATA_MANAGER","Data Manager","r.SP_RA_CL_SITES_DMG_ACT.SP_PT_CL_NN_SITES_DMG",
"SP_RA_CL_SITES_VAL_DMG",
"SP_RA_CL_SITES_DMG_ACT");
manager_cl_country.length = 16000;
manager_cl_country.category = "Ring attribute";


//Medical Writer ring attribute (SP_AA_CL_MED_WRITER)

var med_cl_country="OpxActivity".defineRingAttribute("SP_RING_CL_MED_WRITER","Medical Writer","r.SP_RA_CL_SITES_MEDW_ACT.SP_PT_CL_NN_SITES_MEDW",
"SP_RA_CL_SITES_VAL_MEDW",
"SP_RA_CL_SITES_MEDW_ACT");
med_cl_country.length = 16000;
med_cl_country.category = "Ring attribute";

//CDL (Clinical Datamanagement Lead) ring attribute.

var ctl_cl_country="OpxActivity".defineRingAttribute("SP_RING_CL_CDL","Clin. Data Lead","r.SP_RA_CL_SITES_CDL_ACT.SP_PT_CL_NN_SITES_CDL",
"SP_RA_CL_SITES_VAL_CDL","SP_RA_CL_SITES_CDL_ACT");
ctl_cl_country.length = 16000;
ctl_cl_country.category = "Ring attribute";


//CTL ring attribute (SP_AA_CL_CTL_CS)

var ctl_cl_country="OpxActivity".defineRingAttribute("SP_RING_CL_CTL_CS","CTL","r.SP_RA_CL_SITES_CTLCS_ACT.SP_PT_CL_NN_SITES_CTLCS",
"SP_RA_CL_SITES_VAL_CTLCS",
"SP_RA_CL_SITES_CTLCS_ACT");
ctl_cl_country.length = 16000;
ctl_cl_country.category = "Ring attribute";


// MWD (Medical Writer Developer) ring attribute

var mwd_cl_country="OpxActivity".defineRingAttribute("SP_RING_CL_MWD","Medical Writer Developer","r.SP_RA_CL_SITES_MWD_ACT.SP_PT_CL_NN_SITES_MWD",
"SP_RA_CL_SITES_VAL_MWD",
"SP_RA_CL_SITES_MWD_ACT");
mwd_cl_country.length = 16000;
mwd_cl_country.category = "Ring attribute";


//Contract Coordinator ring attribute (SP_AA_CL_CPM_CC)

var cc_cl_country="OpxActivity".defineRingAttribute("SP_RING_CL_CPM_CC","Contract Coordinator","r.SP_RA_CL_SITES_CPMCC_ACT.SP_PT_CL_NN_SITES_CPMCC",
"SP_RA_CL_SITES_VAL_CPMCC",
"SP_RA_CL_SITES_CPMCC_ACT");
cc_cl_country.length = 16000;
cc_cl_country.category = "Ring attribute";


//CPM ring attribute (SP_AA_CL_CPM)

var cpm_cl_country="OpxActivity".defineRingAttribute("SP_RING_CL_CPM","CPM","r.SP_RA_CL_SITES_CPM_ACT.SP_PT_CL_NN_SITES_CPM",
"SP_RA_CL_SITES_VAL_CPM",
"SP_RA_CL_SITES_CPM_ACT");
cpm_cl_country.length = 16000;
cpm_cl_country.category = "Ring attribute";


//Documentation Coord ring attribute  (SP_AA_CL_CLINDOC)

var doc_cl_country="OpxActivity".defineRingAttribute("SP_RING_CL_CLINDOC","Doc Coord","r.SP_RA_CL_SITES_CLINDOC_ACT.SP_PT_CL_NN_SITES_CLINDOC",
"SP_RA_CL_SITES_VAL_CLINDOC",
"SP_RA_CL_SITES_CLINDOC_ACT");
doc_cl_country.length = 16000;
doc_cl_country.category = "Ring attribute";



//Records Manager ring attribute (SP_AA_CL_RM)

var rm_cl_country="OpxActivity".defineRingAttribute("SP_RING_CL_REC_MGR","Records Manager","r.SP_RA_CL_SITES_RECMGR_ACT.SP_PT_CL_NN_SITES_RECMGR",
"SP_RA_CL_SITES_VAL_RECMGR",
"SP_RA_CL_SITES_RECMGR_ACT");
rm_cl_country.length = 16000;
rm_cl_country.category = "Ring attribute";


//Electronic Doc. Specialist ring attribute  (SP_AA_CL_EDOC)

var edoc_cl_country="OpxActivity".defineRingAttribute("SP_RING_CL_EDOC","eDoc Specialist","r.SP_RA_CL_SITES_EDOC_ACT.SP_PT_CL_NN_SITES_EDOC",
"SP_RA_CL_SITES_VAL_EDOC",
"SP_RA_CL_SITES_EDOC_ACT");
edoc_cl_country.length = 16000;
edoc_cl_country.category = "Ring attribute";


//Translator ring attribute (SP_AA_CL_TRANSLATOR)

var ts_cl_country="OpxActivity".defineRingAttribute("SP_RING_CL_TRANSLATOR","Translator","r.SP_RA_CL_SITES_TRANS_ACT.SP_PT_CL_NN_SITES_TRANS",
"SP_RA_CL_SITES_VAL_TRANS",
"SP_RA_CL_SITES_TRANS_ACT");
ts_cl_country.length = 16000;
ts_cl_country.category = "Ring attribute";


//CTM ring attribute (SP_AA_CL_CENTRAL_CRA)

var ctm_cl_country="OpxActivity".defineRingAttribute("SP_RING_CL_CTM","CTM","r.SP_RA_CL_SITES_CTM_ACT.SP_PT_CL_NN_SITES_CTM",
"SP_RA_CL_SITES_VAL_CTM",
"SP_RA_CL_SITES_CTM_ACT");
ctm_cl_country.length = 16000;
ctm_cl_country.category = "Ring attribute";


//Local CRA ring attribute (SP_AA_CL_CRA)

var cra_cl_country="OpxActivity".defineRingAttribute("SP_RING_CL_CRA","Local CRA","r.SP_RA_CL_SITES_CRA_ACT.SP_PT_CL_NN_SITES_CRA",
"SP_RA_CL_SITES_VAL_CRA",
"SP_RA_CL_SITES_CRA_ACT");
cra_cl_country.length = 16000;
cra_cl_country.category = "Ring attribute";


//Logistics Coord ring attribute (SP_AA_CL_LOG_COORDINATOR)

var lc_cl_country="OpxActivity".defineRingAttribute("SP_RING_CL_LOG_COORD","Logistics Coord","r.SP_RA_CL_SITES_LCOORD_ACT.SP_PT_CL_NN_SITES_LCOORD",
"SP_RA_CL_SITES_VAL_LCOORD",
"SP_RA_CL_SITES_LCOORD_ACT");
lc_cl_country.length = 16000;
lc_cl_country.category = "Ring attribute";


/*
//Regional CTM ring attribute (SP_AA_CL_RCTM)

var rctm_cl_country="OpxActivity".defineRingAttribute("SP_RING_CL_RCTM","Regional CTM","r.SP_RA_CL_SITES_ACT_RCTM.SP_PT_CL_NN_SITES",
"SP_RA_CL_SITES_VAL",
"SP_RA_CL_SITES_ACT_RCTM");
rctm_cl_country.length = 16000;
rctm_cl_country.category = "Ring attribute";
*/


//GMA Medical Team Leader ring attribute (SP_AA_CL_SPI_MTL)

var gma_cl_country="OpxActivity".defineRingAttribute("SP_RING_CL_GMA_MTL","GMA Medical Team Leader","r.SP_RA_CL_SITES_GMAMTL_ACT.SP_PT_CL_NN_SITES_GMAMTL",
"SP_RA_CL_SITES_VAL_GMAMTL",
"SP_RA_CL_SITES_GMAMTL_ACT");
gma_cl_country.length = 16000;
gma_cl_country.category = "Ring attribute";

//Clinical and Observational Project Mgmt ring attribute (SP_AA_CL_SPI_TRIAL_MANAGER)

var copm_cl_country="OpxActivity".defineRingAttribute("SP_RING_CL_COPM","PPO COPM","r.SP_RA_CL_SITES_COPM_ACT.SP_PT_CL_NN_SITES_COPM",
"SP_RA_CL_SITES_VAL_COPM",
"SP_RA_CL_SITES_COPM_ACT");
copm_cl_country.length = 16000;
copm_cl_country.category = "Ring attribute";

//Project Manager & Study Leade rring attribute (SP_AA_CL_PMSL)

var pmsl_cl_country="OpxActivity".defineRingAttribute("SP_RING_CL_PMSL","PMSL","r.SP_RA_CL_SITES_PMSL_ACT.SP_PT_CL_NN_SITES_PMSL",
"SP_RA_CL_SITES_VAL_PMSL",
"SP_RA_CL_SITES_PMSL_ACT");
pmsl_cl_country.length = 16000;
pmsl_cl_country.category = "Ring attribute";

//new ring attributes for Clinical re-org
var rng_cl_country = undefined;

rng_cl_country = "OpxActivity".defineRingAttribute("SP_RING_CL_CPC_CPL","CPL","r.SP_RA_CL_SITES_CPCCPL_ACT.SP_PT_CL_NN_SITES_CPCCPL","SP_RA_CL_SITES_VAL_CPCCPL","SP_RA_CL_SITES_CPCCPL_ACT");
rng_cl_country.length=16000;
rng_cl_country.category = "Ring attribute";

rng_cl_country = "OpxActivity".defineRingAttribute("SP_RING_CL_GTO_GTOM","GTOM","r.SP_RA_CL_SITES_GTOGTOM_ACT.SP_PT_CL_NN_SITES_GTOGTOM","SP_RA_CL_SITES_VAL_GTOGTOM","SP_RA_CL_SITES_GTOGTOM_ACT");
rng_cl_country.length=16000;
rng_cl_country.category = "Ring attribute";

rng_cl_country = "OpxActivity".defineRingAttribute("SP_RING_CL_GRTM_RTM","RTM","r.SP_RA_CL_SITES_GRTMRTM_ACT.SP_PT_CL_NN_SITES_GRTMRTM","SP_RA_CL_SITES_VAL_GRTMRTM","SP_RA_CL_SITES_GRTMRTM_ACT");
rng_cl_country.length=16000;
rng_cl_country.category = "Ring attribute";

rng_cl_country = "OpxActivity".defineRingAttribute("SP_RING_CL_GTO_LOG","LOG","r.SP_RA_CL_SITES_GTOLOG_ACT.SP_PT_CL_NN_SITES_GTOLOG","SP_RA_CL_SITES_VAL_GTOLOG","SP_RA_CL_SITES_GTOLOG_ACT");
rng_cl_country.length=16000;
rng_cl_country.category = "Ring attribute";

rng_cl_country = "OpxActivity".defineRingAttribute("SP_RING_CL_CPMO_CC","CC","r.SP_RA_CL_SITES_CPMOCC_ACT.SP_PT_CL_NN_SITES_CPMOCC","SP_RA_CL_SITES_VAL_CPMOCC","SP_RA_CL_SITES_CPMOCC_ACT");
rng_cl_country.length=16000;
rng_cl_country.category = "Ring attribute";

rng_cl_country = "OpxActivity".defineRingAttribute("SP_RING_CL_GRTM_LCRA","LCRA","r.SP_RA_CL_SITES_GRTMLCRA_ACT.SP_PT_CL_NN_SITES_GRTMLCR","SP_RA_CL_SITES_VAL_GRTMLCRA","SP_RA_CL_SITES_GRTMLCRA_ACT");
rng_cl_country.length=16000;
rng_cl_country.category = "Ring attribute";

//CKE ADD
var dkm_platform_rbs="OpxActivity".defineRingAttribute("SP_RING_DKM_ACT_PLATFORM_RBS","DKM Platform ","r.SP_RA_NN_VERS_DKM_ACT.SP_PT_NN_DKM_ACT_RBS",
"SP_RA_NN_VERS_RBS",
"SP_RA_NN_VERS_DKM_ACT");
dkm_platform_rbs.length = 16000;
dkm_platform_rbs.category = "Ring attribute";

//end clinical re-org

// User groups with write permission

var user_grous_cost="OpxCOST_ACCOUNT".defineRingAttribute("SP_RING_READ_WRITE_GROUPS","User groups with write permission","r.SP_RA_ADM_COST_ACCOUNT.SP_PT_ADM_CA_NN_GRP",
"SP_RA_ADM_USER_GRP_VAL",
"SP_RA_ADM_COST_ACCOUNT");
user_grous_cost.length = 16000;
user_grous_cost.category = "Ring attribute";

/**team members**/
/* var SP_RING_PROJECT_USER = "OpxProject".defineRingAttribute("SP_RING_PROJECT_USER",multilingual_getTextKeyMessageString("Attributes.SP_RING_PROJECT_USER"),"r.SP_RA_TEAM_MEMBER_PROJECT.SP_PT_TEAM_MEMBER","SP_RA_TEAM_MEMBER_USER","SP_RA_TEAM_MEMBER_PROJECT");
SP_RING_PROJECT_USER.length = 16000;
SP_RING_PROJECT_USER.category = "Ring attribute"; */

function sp_js_sp_dyn_team_members_reader (){
	var v_vect = new vector();
	fromobject(this){
		for (var o_tm in "OpxSP_PT_TEAM_MEMBER"){
			v_vect.push(o_tm.SP_RA_TEAM_MEMBER_USER.printattribute());
		}
	}
	if (v_vect.length > 0) return v_vect.removeduplicates().join(",");
	return undefined;
}
function sp_js_sp_dyn_team_members_modifier (value){
	var v_vect = value.split(",").removeduplicates();
	var v_tm_to_create = new vector();
	fromobject(this){
		for (var tm in "OpxSP_PT_TEAM_MEMBER") tm.delete();
		for (var tm_id in v_vect){
			var tm = "OpxUser".get(tm_id);
			if (!(tm.internal)) v_tm_to_create.push(tm);
		}
	}
	for (var user in v_tm_to_create){
		try{
			withoutlocking{
				var new_tm = new OpxSP_PT_TEAM_MEMBER("file",this,"SP_RA_TEAM_MEMBER_USER",user);
				if (new_tm == undefined) alert("A problem occured during addition of "+user.printattribute()+" to team members list");
			}
		}catch(error e){
			writeln("ERROR in sp_js_sp_dyn_team_members_modifier : "+e);
			alert("ERROR while creating team members list : "+e);
			alert("Please, contact your admin to solve the problem");
		}
	}
}
function sp_js_sp_dyn_team_members_locker (){
	return false;
}
var SP_DYN_TEAM_MEMBERS = new objectAttribute("OpxProject","SP_DYN_TEAM_MEMBERS","STRING");//replace old "SP_AA_S_PJT_TEAM"
SP_DYN_TEAM_MEMBERS.comment = "Project Team Members";
SP_DYN_TEAM_MEMBERS.reader = sp_js_sp_dyn_team_members_reader;
SP_DYN_TEAM_MEMBERS.modifier = sp_js_sp_dyn_team_members_modifier;
SP_DYN_TEAM_MEMBERS.locker=sp_js_sp_dyn_team_members_locker;
SP_DYN_TEAM_MEMBERS.length = 16000;

method sp_js_team_member_of_projects_selected_mapper on opxopx2context(f){
	var v_users = new vector();
	for (var prj in "OpxProject" where prj.OPEN && prj.PM_PRJ_FILTER && prj.SP_NF_FILTER_DEV_PREDEV){
		fromobject(prj) for (var tm in "OpxSP_PT_TEAM_MEMBER") v_users.push(tm.SP_RA_TEAM_MEMBER_USER);
	}
	v_users = v_users.removeduplicates();
	for (var o_user in v_users) f.call(o_user);
}
_Utils_makeDynRelation("SP_DR_TEAM_MEMBERS_OF_SEL_PRJS", "Team members of selected projects - [JREL]", "opxopx2context", "OpxUser", sp_js_team_member_of_projects_selected_mapper);


method sp_js_check_formula_on_sponsor on opxActivity (s_formula)
{
	var o_act = this;
	var b_one_true = false;
	for (var o_sponsor in o_act.get("r.SP_RA_SPONSORHIP_ACT.SP_PT_CL_NN_SPONSORSHIP"))
	{
		if (o_sponsor.SP_RA_SPONSORSHIP_VAL.CallBooleanFormula(s_formula)){b_one_true=true;}
		// alert(o_sponsor.SP_RA_SPONSORSHIP_VAL);
	}
	return b_one_true;
}	
sp_js_check_formula_on_sponsor.exportFunction({"STRING"},"BOOLEAN","Return true if one of the element of attribute SP_RING_CL_SPONSORSHIP is corresponding to the formula in argument.");


writetolog("Loading script SP_JS_CL_DA_RING_ATTRIBUTES in revision ~a.",revision_number);

//SP_JS_CL_DA_RING_ATTRIBUTES.ojs

//  Created  by YSA 15:58 09-SEP-2016
  
//	VERSION HISTORY :
var revision_number ="2.6";
//
// Revision 2.6 2020/06/05 KSH
// ALM 1988 - Creation of the Dynamic attribute SP_DA_CL_COMPL_GCD for GCD complexity factor and creation of RING attribute SP_RING_CL_MWD for MWD sites
//
//
//
// Revision 2.5 2020/03/19 ASP
//(ITS-INC3942887) : Modifying the function of Dynamic Attribute (Reader, locker and modifier) SP_DA_CL_TOTAL_LOAD 
//
//
//Revision 2.4 2020/02/18 ASP 
//#2045 - Merge of CDOC and MW : modification of function sp_cl_ph_transl_lang_lock() removing CLIN-MW-TRA and replacing with CLIN-GCD-TRA
//

//Revision 2.3 2020/01/14 ckeita 
//ALM 1919  : modification of function sp_cl_crf_page_read () and function sp_cl_unique_crf_page_read () remove conditions for 2 projects already closed and adding value for new phases to add

//Revision 2.2 2019/12/20 ckeita 
//ALM 1919  : modification of function sp_cl_crf_page_read () and function sp_cl_unique_crf_page_read ()
//


//Revision 2.1 2019/09/06 Sivanagapavan G 
//RITM1265091 : Creation of Ring attribute for DKM PLATFORM:  SP_RING_DKM_ACT_PLATFORM_RBS
//
//Revision 2.0 2019/10/28 SKJ 
//RITM1369584 TEMPO - Review of CDM profiles and adjustments of FTE/ cost metrics==> Addition of SP_RING_CL_CDL
//
//
//Revision 1.9 2019/06/12 mblaise 
//ITS-INC2724160 : Renaming AS Metrics Ring attribute
//
//	Revision 1.8 2019/05/20 mblaise   
//  ITS-INC2625128 : modification of sp_blood_draw_read to add wbs type S_SCREEN and of sp_blood_draw_calc to call sp_blood_draw_read
//
//	Revision 1.7 2019/05/20 bcordel 
//	Merge 1.6
//
//	Revision 1.6 2019/05/15 bcordel 
//	Putting back the blood draw DA in this script.
//	Revision 1.6 2019/05/03 MAG - RITM1032555 - Creation of As metrics resource list ring attribute
//
//	Revision 1.5 2019/03/07 SKJ for ITS-INC2071122#1877 N  CRF Pages per Subject
//	Revision 1.4 2018/09/26 mrochas
//	change label : only last part of profile (CLIN-CPMO-CC changed into CC for example)
//
// Revision 1.3 2018/09/19 mrochas
// CPMO-FIN-CC changes into CLIN-CPMO-CC
//
//	Revision 1.2 2018/09/06 mrochas
//	new ring attributes for Clinical re-org
//
//	Revision 1.1 2018/06/19 bcordel
//	ITS-INC1065423 : adding method sp_js_check_formula_on_sponsor on activities
//
//  Modified by YSA 15:20 21 September 2017
//
//	v1.1 mrochas 2017/11/16
//	Creation of SP_RING_PROJECT_USER & SP_DR_TEAM_MEMBERS_OF_SEL_PRJS
// Clinical Dynamic and Ring attributes



////Dynamic Attributes section

//
// N  of Blood Draws:  
//
function sp_blood_draw_read()
{
	var o_act = this;
	var blood = 0;
	
	if (o_act instanceof OpxActivity && o_act !=undefined && o_act.SP_NF_CL_TRIAL==true)
	{
		fromobject(o_act) 
		{
			for (var act in "OpxActivity" where act.SP_NF_CL_STEP==true)
			{
				if (act.SP_AA_ACT_N_BLODD_DRAW_ESTIM !=0)
				{
					blood=blood+act.SP_AA_ACT_N_BLODD_DRAW_ESTIM;
				}
				else
				{
					blood=blood+act.SP_NF_ACT_N_BLOOD_DRAW_CALC;
				}
			}
		}	
	}
	else
	{
		if (o_act.SP_AA_ACT_N_BLODD_DRAW_ESTIM !=0)
		{
			blood=o_act.SP_AA_ACT_N_BLODD_DRAW_ESTIM;
		}
		else
		{
			fromobject(o_act) 
			{
				for (var act in "OpxActivity" where act.AB_AA_B_ACT_BLOOD_DRAW==true && (act.WBS_TYPE.name == "S_INCL" || act.WBS_TYPE.name == "S_VISIT" || act.WBS_TYPE.name == "S_FOL" || act.WBS_TYPE.name == "S_SCREEN"))
				{
					blood++;
				}
			}	
		}
	}
	return blood;
}

function sp_blood_draw_mod(num)
{
var o_act = this;
	if (o_act instanceof OpxActivity && o_act !=undefined)
	{
		withoutlocking
		{
			if (num==undefined)
			{
				o_act.SP_AA_ACT_N_BLODD_DRAW_ESTIM=0;
			}
			else
			{
				o_act.SP_AA_ACT_N_BLODD_DRAW_ESTIM=num;
			}
		}
	}
}

var reestim_blood_draw = new objectAttribute("OpxActivity","SP_DA_REESTIM_BLOOD_DRAW","NUMBER");
	reestim_blood_draw.comment = "N  of Blood Draws";
	reestim_blood_draw.reader = sp_blood_draw_read;
	reestim_blood_draw.modifier = sp_blood_draw_mod;
	
//
// sp_blood_draw_calc
//
function sp_blood_draw_calc(id_act)
{
	var o_act = "opxActivity".get(id_act);
	var blood = 0;
	if (o_act instanceof OpxActivity && o_act !=undefined)  
		blood = o_act.sp_blood_draw_read();
	return blood
}
sp_blood_draw_calc.exportfunction({"STRING"},"NUMBER","");

//N  Subjects expected (visit) 

function sp_cl_nb_sub_exp_read ()
{
	var act=this;
	var trial_index=act.sp_get_trial_id("");
	var trial="OpxActivity".get(trial_index);
	var result=0;

	if ((act instanceof Opxactivity) && (trial instanceof Opxactivity) && (act.SP_NF_B_OBS_CLIN_ACT) && (act.wbs_type instanceof OpxWBS_TYPE) &&
			(act.wbs_type.name=="S_INCL" || act.wbs_type.name=="S_FOL" || act.wbs_type.name=="S_VISIT" || act.SP_NF_CL_STEP))
	{
		if (act.SP_NF_CL_STEP)
		{
			result=act.SP_AA_N_CL_SUB_EXP_VISIT;	
		}
		else
		{
			if (act.SP_AA_N_CL_SUB_EXP_VISIT==0)
			{
				result=trial.SP_AA_CL_TRIAL_EXP_SUB;
			}
			else
				result=act.SP_AA_N_CL_SUB_EXP_VISIT;			
		}

	}

	return result;
}

function sp_cl_nb_sub_exp_lock ()
{

	var act=this;

	if (act.wbs_type.name=="S_INCL" || act.wbs_type.name=="S_FOL" || act.wbs_type.name=="S_VISIT" || act.SP_NF_CL_STEP)
	{
		return false;
	}
	else
	{
		return true;
	}	
}

function sp_cl_nb_sub_exp_modif (nb)
{
	this.SP_AA_N_CL_SUB_EXP_VISIT=nb;
}

var CL_NB_SUB_EXP = new objectAttribute("OpxActivity","SP_DA_N_CL_SUB_EXP_VISIT","NUMBER");
CL_NB_SUB_EXP.comment = "N  Subjects expected (visit)";
CL_NB_SUB_EXP.reader = sp_cl_nb_sub_exp_read;
CL_NB_SUB_EXP.modifier = sp_cl_nb_sub_exp_modif;
CL_NB_SUB_EXP.locker=sp_cl_nb_sub_exp_lock;



//New Subjects


function sp_cl_new_subj_read ()
{
	var act=this;
	var result="";

	if ((act instanceof Opxactivity) && (act.SP_NF_B_OBS_CLIN_ACT) && (act.wbs_type instanceof OpxWBS_TYPE) &&
			(act.wbs_type.name=="S_INCL" || act.wbs_type.name=="S_FOL" || act.wbs_type.name=="S_VISIT" || act.SP_NF_B_CL_IS_FIRST_STEP || act.SP_NF_CL_STEP))
	{
		if ( act.SP_AA_CL_NEW_SUBJECT=="")
		{
			
			if (act.SP_NF_B_CL_IS_FIRST_STEP || act.SP_NF_CL_STEP){
				
				result="";
				
			}
			else
			{
				if (act.CallBooleanFormula("BOOLEAN_VALUE(\"ACTIVITY\",SP_GET_ACTIVITY_STEP(\"\"),\"SP_NF_B_CL_IS_FIRST_STEP\")"))
				{
					result="YES";
				}
				else
				{
					result="NO";
				}	
			}
		}
		else
			result=act.SP_AA_CL_NEW_SUBJECT;
	}	

	return result;
}

function sp_cl_new_subj_lock ()
{
	var act=this;
	if ((act.wbs_type instanceof OpxWBS_TYPE) &&
			(act.wbs_type.name=="S_INCL" || act.wbs_type.name=="S_FOL" || act.wbs_type.name=="S_VISIT" || act.SP_NF_B_CL_IS_FIRST_STEP || act.SP_NF_CL_STEP))
	{
		return false;
	}
	else
	{
		return true;
	}	
}

function sp_cl_new_subj_modif (b)
{
	this.SP_AA_CL_NEW_SUBJECT=b;
}

var CL_NEW_SUBJECT = new objectAttribute("OpxActivity","SP_DA_CL_NEW_SUBJECT","SP_AT_CL_NEW_SUBJECT");
CL_NEW_SUBJECT.comment = "New Subjects?";
CL_NEW_SUBJECT.reader = sp_cl_new_subj_read;
CL_NEW_SUBJECT.modifier = sp_cl_new_subj_modif;
CL_NEW_SUBJECT.locker= sp_cl_new_subj_lock;

/*
//Blood Draw


function sp_cl_blood_draw_read ()
{
	var act=this;
	var result=false;

	if ((act instanceof Opxactivity) && (act.SP_NF_B_OBS_CLIN_ACT) && (act.wbs_type instanceof OpxWBS_TYPE) &&
			(act.wbs_type.name=="S_INCL" || act.wbs_type.name=="S_FOL" || act.wbs_type.name=="S_VISIT" || act.wbs_type.name=="S_PRREP"))
	{

			result=act.AB_AA_B_ACT_BLOOD_DRAW;
	}	

	return result;
}

function sp_cl_blood_draw_lock ()
{
	var act=this;
	if ((act.wbs_type instanceof OpxWBS_TYPE) &&
			(act.wbs_type.name=="S_INCL" || act.wbs_type.name=="S_FOL" || act.wbs_type.name=="S_VISIT" || act.wbs_type.name=="S_PRREP"))
	{
		return false;
	}
	else
	{
		return true;
	}	
}

function sp_cl_blood_draw_modif (b)
{
	this.AB_AA_B_ACT_BLOOD_DRAW=b;
}

var CL_BLOOD_DRAW = new objectAttribute("OpxActivity","SP_DA_CL_BLOOD_DRAW","BOOLEAN");
CL_BLOOD_DRAW.comment = "Blood Draw";
CL_BLOOD_DRAW.reader = sp_cl_blood_draw_read;
CL_BLOOD_DRAW.modifier = sp_cl_blood_draw_modif;
CL_BLOOD_DRAW.locker= sp_cl_blood_draw_lock;

//Product request

function sp_cl_product_request_read ()
{
	var act=this;
	var result=false;

	if ((act instanceof Opxactivity) && (act.SP_NF_B_OBS_CLIN_ACT) && (act.wbs_type instanceof OpxWBS_TYPE) &&
			(act.wbs_type.name=="S_INCL" || act.wbs_type.name=="S_FOL" || act.wbs_type.name=="S_VISIT" || act.wbs_type.name=="S_PRREP"))
	{

			result=act.SP_AA_B_PRODUCT_REQUEST;
	}	

	return result;
}

function sp_cl_product_request_lock ()
{
	var act=this;
	if ((act.wbs_type instanceof OpxWBS_TYPE) &&
			(act.wbs_type.name=="S_INCL" || act.wbs_type.name=="S_FOL" || act.wbs_type.name=="S_VISIT" || act.wbs_type.name=="S_PRREP"))
	{
		return false;
	}
	else
	{
		return true;
	}	
}

function sp_cl_product_request_modif (b)
{
	this.SP_AA_B_PRODUCT_REQUEST=b;
}

var CL_PRODUCT_REQ = new objectAttribute("OpxActivity","SP_DA_CL_PRODUCT_REQUEST","BOOLEAN");
CL_PRODUCT_REQ.comment = "Product Request";
CL_PRODUCT_REQ.reader = sp_cl_product_request_read;
CL_PRODUCT_REQ.modifier = sp_cl_product_request_modif;
CL_PRODUCT_REQ.locker= sp_cl_product_request_lock;

//Vaccination

function sp_cl_vaccination_read ()
{
	var act=this;
	var result=false;

	if ((act instanceof Opxactivity) && (act.SP_NF_B_OBS_CLIN_ACT) && (act.wbs_type instanceof OpxWBS_TYPE) &&
			(act.wbs_type.name=="S_INCL" || act.wbs_type.name=="S_FOL" || act.wbs_type.name=="S_VISIT" || act.wbs_type.name=="S_PRREP"))
	{

			result=act.AB_AA_B_ACT_VACCINATION;
	}	

	return result;
}

function sp_cl_vaccination_lock ()
{
	var act=this;
	if ((act.wbs_type instanceof OpxWBS_TYPE) &&
			(act.wbs_type.name=="S_INCL" || act.wbs_type.name=="S_FOL" || act.wbs_type.name=="S_VISIT" || act.wbs_type.name=="S_PRREP"))
	{
		return false;
	}
	else
	{
		return true;
	}	
}

function sp_cl_vaccination_modif (b)
{
	this.AB_AA_B_ACT_VACCINATION=b;
}

var CL_VACCINATION = new objectAttribute("OpxActivity","SP_DA_CL_VACCINATION","BOOLEAN");
CL_VACCINATION.comment = "Vaccination";
CL_VACCINATION.reader = sp_cl_vaccination_read;
CL_VACCINATION.modifier = sp_cl_vaccination_modif;
CL_VACCINATION.locker= sp_cl_vaccination_lock;
*/


//Subjects Greater Europe field

function sp_cl_subj_eu_read()
{

	var act=this;
	var result=0;
	var total_subjects=0;
	var total_nb_country=0;
	var nb_country_region=0;

if (act instanceof OpxActivity)
{
	if (act.SP_NF_CL_TRIAL)
	{
		total_subjects=act.SP_AA_CL_TRIAL_EXP_SUB;
		total_nb_country=this.sp_cl_list_count_reg("SP_RING_CL_COUNTRY","Greater Europe,Africa and Middle-East,Asia Pacific,Latin America,North America");
		nb_country_region=this.sp_cl_list_count_reg("SP_RING_CL_COUNTRY","Greater Europe");

		if ( (total_subjects instanceof NUMBER)&& (act.SP_AA_N_CL_SUB_EU<0) && (nb_country_region instanceof NUMBER) 
				&& (total_nb_country instanceof NUMBER) && (total_nb_country >0 ) )
		{

			result=(total_subjects/total_nb_country)*nb_country_region;

		}
		else
		{
			if (act.SP_AA_N_CL_SUB_EU>=0)
			{
			result=act.SP_AA_N_CL_SUB_EU;
			}
			else
			{
			result=0;
				
			}
		}
		
	}
	else
	{
		var trial_index=act.sp_get_trial_id("");
		var trial="OpxActivity".get(trial_index);

		if (trial instanceof OpxActivity)
		{
			result=trial.SP_DA_N_CL_SUB_EU;
		}
		
	}
}
	return result;
}

function sp_cl_subj_eu_lock()
{
	var act=this;
	var lock=true;

	if (act.SP_NF_CL_TRIAL)
	{
		lock=false;
	}
	
	return lock;	
}

function sp_cl_subj_eu_modif(n)
{
	if (n instanceof NUMBER)
	{
		this.SP_AA_N_CL_SUB_EU=n;

	}
	else
	{
		this.SP_AA_N_CL_SUB_EU=-1;
	}

}

var CL_SUB_EU = new objectAttribute("OpxActivity","SP_DA_N_CL_SUB_EU","NUMBER");
CL_SUB_EU.comment = "#Subjects(Greater Europe)";
CL_SUB_EU.reader = sp_cl_subj_eu_read;
CL_SUB_EU.modifier = sp_cl_subj_eu_modif;
CL_SUB_EU.locker= sp_cl_subj_eu_lock;


//Subjects Africa and Middle-East

function sp_cl_subj_africa_read()
{

var act=this;
var result=0;
var total_subjects=0;
var total_nb_country=0;
var nb_country_region=0;

if (act instanceof OpxActivity)
{
	if (act.SP_NF_CL_TRIAL)
	{
		total_subjects=act.SP_AA_CL_TRIAL_EXP_SUB;
		total_nb_country=this.sp_cl_list_count_reg("SP_RING_CL_COUNTRY","Greater Europe,Africa and Middle-East,Asia Pacific,Latin America,North America");
		nb_country_region=this.sp_cl_list_count_reg("SP_RING_CL_COUNTRY","Africa and Middle-East");

		if ( (total_subjects instanceof NUMBER)&& (act.SP_AA_N_CL_SUB_AFRICA <0) && (nb_country_region instanceof NUMBER) 
				&& (total_nb_country instanceof NUMBER) && (total_nb_country >0 ) )
		{

			result=(total_subjects/total_nb_country)*nb_country_region;

		}
		else
		{
			if (act.SP_AA_N_CL_SUB_AFRICA>=0)
			{
			result=act.SP_AA_N_CL_SUB_AFRICA;
			}
			else
			{
			result=0;
				
			}
		}
		
	}
	else
	{
		var trial_index=act.sp_get_trial_id("");
		var trial="OpxActivity".get(trial_index);
		if (trial instanceof OpxActivity)
		{
			result=trial.SP_DA_N_CL_SUB_AFRICA;
		}
	}
}
return result;
}

function sp_cl_subj_africa_lock()
{
	var act=this;
	var lock=true;

	if (act.SP_NF_CL_TRIAL)
	{
		lock=false;
	}
	
	return lock;	
}

function sp_cl_subj_africa_modif(n)
{
	if (n instanceof NUMBER)
	{
		this.SP_AA_N_CL_SUB_AFRICA=n;
	
	}
	else
	{
		this.SP_AA_N_CL_SUB_AFRICA=-1;
	}

}

var CL_SUB_AFRICA = new objectAttribute("OpxActivity","SP_DA_N_CL_SUB_AFRICA","NUMBER");
CL_SUB_AFRICA.comment = "#Subjects(Africa and Middle-East)";
CL_SUB_AFRICA.reader = sp_cl_subj_africa_read;
CL_SUB_AFRICA.modifier = sp_cl_subj_africa_modif;
CL_SUB_AFRICA.locker= sp_cl_subj_africa_lock;

//Subjects Africa and Middle-East

function sp_cl_subj_ASIA_read()
{

	var act=this;
	var result=0;
	var total_subjects=0;
	var total_nb_country=0;
	var nb_country_region=0;

if (act instanceof OpxActivity)
{
	if (act.SP_NF_CL_TRIAL)
	{
		total_subjects=act.SP_AA_CL_TRIAL_EXP_SUB;
		total_nb_country=this.sp_cl_list_count_reg("SP_RING_CL_COUNTRY","Greater Europe,Africa and Middle-East,Asia Pacific,Latin America,North America");
		nb_country_region=this.sp_cl_list_count_reg("SP_RING_CL_COUNTRY","Asia Pacific");

		if ( (total_subjects instanceof NUMBER)&& (act.SP_AA_N_CL_SUB_ASIA<0) && (nb_country_region instanceof NUMBER) 
				&& (total_nb_country instanceof NUMBER) && (total_nb_country >0 ) )
		{

			result=(total_subjects/total_nb_country)*nb_country_region;

		}
		else
		{
			if (act.SP_AA_N_CL_SUB_ASIA>=0)
			{
			result=act.SP_AA_N_CL_SUB_ASIA;
			}
			else
			{
			result=0;	
			}
		}	
	}
	else
	{
		var trial_index=act.sp_get_trial_id("");
		var trial="OpxActivity".get(trial_index);
		if (trial instanceof OpxActivity)
		{
			result=trial.SP_DA_N_CL_SUB_ASIA;
		}	
	}
}
return result;
}

function sp_cl_subj_ASIA_lock()
{
	var act=this;
	var lock=true;

	if (act.SP_NF_CL_TRIAL)
	{
		lock=false;
	}
	
	return lock;	
}

function sp_cl_subj_ASIA_modif(n)
{
	if (n instanceof NUMBER)
	{
		this.SP_AA_N_CL_SUB_ASIA=n;
	
	}
	else
	{
		this.SP_AA_N_CL_SUB_ASIA=-1;
	}	

}

var CL_SUB_ASIA = new objectAttribute("OpxActivity","SP_DA_N_CL_SUB_ASIA","NUMBER");
CL_SUB_ASIA.comment = "#Subjects(Asia Pacific)";
CL_SUB_ASIA.reader = sp_cl_subj_ASIA_read;
CL_SUB_ASIA.modifier = sp_cl_subj_ASIA_modif;
CL_SUB_ASIA.locker= sp_cl_subj_ASIA_lock;


//Subjects North America

function sp_cl_subj_AMERICA_read()
{

	var act=this;
	var result=0;
	var total_subjects=0;
	var total_nb_country=0;
	var nb_country_region=0;

if (act instanceof OpxActivity)
{
	if (act.SP_NF_CL_TRIAL)
	{
		total_subjects=act.SP_AA_CL_TRIAL_EXP_SUB;
		total_nb_country=this.sp_cl_list_count_reg("SP_RING_CL_COUNTRY","Greater Europe,Africa and Middle-East,Asia Pacific,Latin America,North America");
		nb_country_region=this.sp_cl_list_count_reg("SP_RING_CL_COUNTRY","North America");

		if ( (total_subjects instanceof NUMBER)&& (act.SP_AA_N_CL_SUB_AMERICA<0) && (nb_country_region instanceof NUMBER) 
				&& (total_nb_country instanceof NUMBER) && (total_nb_country >0 ) )
		{

			result=(total_subjects/total_nb_country)*nb_country_region;
		}
		else
		{
			if (act.SP_AA_N_CL_SUB_AMERICA>=0)
			{
			result=act.SP_AA_N_CL_SUB_AMERICA;
			}
			else
			{
			result=0;	
			}
		}
	}
	else
	{
		var trial_index=act.sp_get_trial_id("");
		var trial="OpxActivity".get(trial_index);

		if (trial instanceof OpxActivity)
		{
			result=trial.SP_DA_N_CL_SUB_AMERICA;
		}
		
	}
}
	return result;
}

function sp_cl_subj_AMERICA_lock()
{
	var act=this;
	var lock=true;

	if (act.SP_NF_CL_TRIAL)
	{
		lock=false;
	}
	
	return lock;	
}

function sp_cl_subj_AMERICA_modif(n)
{
	if (n instanceof NUMBER)
	{
		this.SP_AA_N_CL_SUB_AMERICA=n;
	
	}
	else
	{
		this.SP_AA_N_CL_SUB_AMERICA=-1;
	}	
}

var CL_SUB_AMERICA = new objectAttribute("OpxActivity","SP_DA_N_CL_SUB_AMERICA","NUMBER");
CL_SUB_AMERICA.comment = "#Subjects(North America)";
CL_SUB_AMERICA.reader = sp_cl_subj_AMERICA_read;
CL_SUB_AMERICA.modifier = sp_cl_subj_AMERICA_modif;
CL_SUB_AMERICA.locker= sp_cl_subj_AMERICA_lock;

//Subjects Latin America

function sp_cl_subj_LATIN_read()
{

	var act=this;
	var result=0;
	var total_subjects=0;
	var total_nb_country=0;
	var nb_country_region=0;

if (act instanceof OpxActivity)
{
	if (act.SP_NF_CL_TRIAL)
	{
		total_subjects=act.SP_AA_CL_TRIAL_EXP_SUB;
		total_nb_country=this.sp_cl_list_count_reg("SP_RING_CL_COUNTRY","Greater Europe,Africa and Middle-East,Asia Pacific,Latin America,North America");
		nb_country_region=this.sp_cl_list_count_reg("SP_RING_CL_COUNTRY","Latin America");

		if ( (total_subjects instanceof NUMBER)&& (act.SP_AA_N_CL_SUB_LATIN<0) && (nb_country_region instanceof NUMBER) 
				&& (total_nb_country instanceof NUMBER) && (total_nb_country >0 ) )
		{

			result=(total_subjects/total_nb_country)*nb_country_region;

		}
		else
		{
			if (act.SP_AA_N_CL_SUB_LATIN>=0)
			{
			result=act.SP_AA_N_CL_SUB_LATIN;
			}
			else
			{
			result=0;
				
			}
		}
		
	}
	else
	{
		var trial_index=act.sp_get_trial_id("");
		var trial="OpxActivity".get(trial_index);

		if (trial instanceof OpxActivity)
		{
			result=trial.SP_DA_N_CL_SUB_LATIN;
		}
	}
}
	return result;
}

function sp_cl_subj_LATIN_lock()
{
	var act=this;
	var lock=true;

	if (act.SP_NF_CL_TRIAL)
	{
		lock=false;
	}
	
	return lock;	
}

function sp_cl_subj_LATIN_modif(n)
{
	if (n instanceof NUMBER)
	{
		this.SP_AA_N_CL_SUB_LATIN=n;
	
	}
	else
	{
		this.SP_AA_N_CL_SUB_LATIN=-1;
	}	
}

var CL_SUB_LATIN = new objectAttribute("OpxActivity","SP_DA_N_CL_SUB_LATIN","NUMBER");
CL_SUB_LATIN.comment = "#Subjects(Latin America)";
CL_SUB_LATIN.reader = sp_cl_subj_LATIN_read;
CL_SUB_LATIN.modifier = sp_cl_subj_LATIN_modif;
CL_SUB_LATIN.locker= sp_cl_subj_LATIN_lock;


//Sites Greater Europe field

function sp_cl_sites_eu_read()
{

	var act=this;
	var result=0;
	var total_Sites=0;
	var total_nb_country=0;
	var nb_country_region=0;

if (act instanceof OpxActivity)
{
	if (act.SP_NF_CL_TRIAL)
	{
		total_Sites=act.SP_AA_CL_INVESTIGATOR_SITES;
		total_nb_country=this.sp_cl_list_count_reg("SP_RING_CL_COUNTRY","Greater Europe,Africa and Middle-East,Asia Pacific,Latin America,North America");
		nb_country_region=this.sp_cl_list_count_reg("SP_RING_CL_COUNTRY","Greater Europe");

		if ( (total_Sites instanceof NUMBER)&& (act.SP_AA_N_CL_SITES_EU<0) && (nb_country_region instanceof NUMBER) 
				&& (total_nb_country instanceof NUMBER) && (total_nb_country >0 ) )
		{

			result=(total_Sites/total_nb_country)*nb_country_region;

		}
		else
		{
			if (act.SP_AA_N_CL_SITES_EU>=0)
			{
			result=act.SP_AA_N_CL_SITES_EU;
			}
			else
			{
			result=0;
				
			}
		}
		
	}
	else
	{
		var trial_index=act.sp_get_trial_id("");
		var trial="OpxActivity".get(trial_index);

		if (trial instanceof OpxActivity)
		{
			result=trial.SP_DA_N_CL_SITES_EU;
		}
	}
}
	return result;
}

function sp_cl_sites_eu_lock()
{
	var act=this;
	var lock=true;

	if (act.SP_NF_CL_TRIAL)
	{
		lock=false;
	}
	
	return lock;	
}

function sp_cl_sites_eu_modif(n)
{
	if (n instanceof NUMBER)
	{
		this.SP_AA_N_CL_SITES_EU=n;
	
	}
	else
	{
		this.SP_AA_N_CL_SITES_EU=-1;
	}	
}

var CL_SITES_EU = new objectAttribute("OpxActivity","SP_DA_N_CL_SITES_EU","NUMBER");
CL_SITES_EU.comment = "#Sites(Greater Europe)";
CL_SITES_EU.reader = sp_cl_sites_eu_read;
CL_SITES_EU.modifier = sp_cl_sites_eu_modif;
CL_SITES_EU.locker= sp_cl_sites_eu_lock;


//Sites Africa and Middle-East

function sp_cl_sites_africa_read()
{

	var act=this;
	var result=0;
	var total_Sites=0;
	var total_nb_country=0;
	var nb_country_region=0;

if (act instanceof OpxActivity)
{
	if (act.SP_NF_CL_TRIAL)
	{
		total_Sites=act.SP_AA_CL_INVESTIGATOR_SITES;
		total_nb_country=this.sp_cl_list_count_reg("SP_RING_CL_COUNTRY","Greater Europe,Africa and Middle-East,Asia Pacific,Latin America,North America");
		nb_country_region=this.sp_cl_list_count_reg("SP_RING_CL_COUNTRY","Africa and Middle-East");

		if ( (total_Sites instanceof NUMBER)&& (act.SP_AA_N_CL_SITES_AFRICA<0) && (nb_country_region instanceof NUMBER) 
				&& (total_nb_country instanceof NUMBER) && (total_nb_country >0 ) )
		{

			result=(total_Sites/total_nb_country)*nb_country_region;

		}
		else
		{
			if (act.SP_AA_N_CL_SITES_AFRICA>=0)
			{
			result=act.SP_AA_N_CL_SITES_AFRICA;
			}
			else
			{
			result=0;	
			}
		}
	}
	else
	{
		var trial_index=act.sp_get_trial_id("");
		var trial="OpxActivity".get(trial_index);
		if (trial instanceof OpxActivity)
		{
			result=trial.SP_DA_N_CL_SITES_AFRICA;
		}
	}
}
return result;
}

function sp_cl_sites_africa_lock()
{
	var act=this;
	var lock=true;

	if (act.SP_NF_CL_TRIAL)
	{
		lock=false;
	}
	
	return lock;	
}

function sp_cl_sites_africa_modif(n)
{
	if (n instanceof NUMBER)
	{
		this.SP_AA_N_CL_SITES_AFRICA=n;
	
	}
	else
	{
		this.SP_AA_N_CL_SITES_AFRICA=-1;
	}
}

var CL_SITES_AFRICA = new objectAttribute("OpxActivity","SP_DA_N_CL_SITES_AFRICA","NUMBER");
CL_SITES_AFRICA.comment = "#Sites(Africa and Middle-East)";
CL_SITES_AFRICA.reader = sp_cl_sites_africa_read;
CL_SITES_AFRICA.modifier = sp_cl_sites_africa_modif;
CL_SITES_AFRICA.locker= sp_cl_sites_africa_lock;

//Sites Africa and Middle-East

function sp_cl_sites_ASIA_read()
{

	var act=this;
	var result=0;
	var total_Sites=0;
	var total_nb_country=0;
	var nb_country_region=0;

if (act instanceof OpxActivity)
{
	if (act.SP_NF_CL_TRIAL)
	{
		total_Sites=act.SP_AA_CL_INVESTIGATOR_SITES;
		total_nb_country=this.sp_cl_list_count_reg("SP_RING_CL_COUNTRY","Greater Europe,Africa and Middle-East,Asia Pacific,Latin America,North America");
		nb_country_region=this.sp_cl_list_count_reg("SP_RING_CL_COUNTRY","Asia Pacific");

		if ( (total_Sites instanceof NUMBER)&& (act.SP_AA_N_CL_SITES_ASIA<0) && (nb_country_region instanceof NUMBER) 
				&& (total_nb_country instanceof NUMBER) && (total_nb_country >0 ) )
		{

			result=(total_Sites/total_nb_country)*nb_country_region;

		}
		else
		{
			if (act.SP_AA_N_CL_SITES_ASIA>=0)
			{
			result=act.SP_AA_N_CL_SITES_ASIA;
			}
			else
			{
			result=0;
				
			}
		}
		
	}
	else
	{
		var trial_index=act.sp_get_trial_id("");
		var trial="OpxActivity".get(trial_index);
		if (trial instanceof OpxActivity)
		{
			result=trial.SP_DA_N_CL_SITES_ASIA;
		}	
	}
}
return result;
}

function sp_cl_sites_ASIA_lock()
{
	var act=this;
	var lock=true;

	if (act.SP_NF_CL_TRIAL)
	{
		lock=false;
	}
	
	return lock;	
}

function sp_cl_sites_ASIA_modif(n)
{
	if (n instanceof NUMBER)
	{
		this.SP_AA_N_CL_SITES_ASIA=n;

	}
	else
	{
		this.SP_AA_N_CL_SITES_ASIA=-1;
	}	

}

var CL_SITES_ASIA = new objectAttribute("OpxActivity","SP_DA_N_CL_SITES_ASIA","NUMBER");
CL_SITES_ASIA.comment = "#Sites(Asia Pacific)";
CL_SITES_ASIA.reader = sp_cl_sites_ASIA_read;
CL_SITES_ASIA.modifier = sp_cl_sites_ASIA_modif;
CL_SITES_ASIA.locker= sp_cl_sites_ASIA_lock;


//Sites North America

function sp_cl_sites_AMERICA_read()
{

	var act=this;
	var result=0;
	var total_Sites=0;
	var total_nb_country=0;
	var nb_country_region=0;

if (act instanceof OpxActivity)
{
	if (act.SP_NF_CL_TRIAL)
	{
		total_Sites=act.SP_AA_CL_INVESTIGATOR_SITES;
		total_nb_country=this.sp_cl_list_count_reg("SP_RING_CL_COUNTRY","Greater Europe,Africa and Middle-East,Asia Pacific,Latin America,North America");
		nb_country_region=this.sp_cl_list_count_reg("SP_RING_CL_COUNTRY","North America");

		if ( (total_Sites instanceof NUMBER)&& (act.SP_AA_N_CL_SITES_AMERICA<0) && (nb_country_region instanceof NUMBER) 
				&& (total_nb_country instanceof NUMBER) && (total_nb_country >0 ) )
		{

			result=(total_Sites/total_nb_country)*nb_country_region;

		}
		else
		{
			if (act.SP_AA_N_CL_SITES_AMERICA>=0)
			{
			result=act.SP_AA_N_CL_SITES_AMERICA;
			}
			else
			{
			result=0;
				
			}
		}
		
	}
	else
	{
		var trial_index=act.sp_get_trial_id("");
		var trial="OpxActivity".get(trial_index);
		if (trial instanceof OpxActivity)
		{
			result=trial.SP_DA_N_CL_SITES_AMERICA;
		}
	}
}
	return result;
}

function sp_cl_sites_AMERICA_lock()
{
	var act=this;
	var lock=true;

	if (act.SP_NF_CL_TRIAL)
	{
		lock=false;
	}
	
	return lock;	
}

function sp_cl_sites_AMERICA_modif(n)
{
	if (n instanceof NUMBER)
	{
		this.SP_AA_N_CL_SITES_AMERICA=n;
	
	}
	else
	{
		this.SP_AA_N_CL_SITES_AMERICA=-1;
	}	

}

var CL_SITES_AMERICA = new objectAttribute("OpxActivity","SP_DA_N_CL_SITES_AMERICA","NUMBER");
CL_SITES_AMERICA.comment = "#Sites(North America)";
CL_SITES_AMERICA.reader = sp_cl_sites_AMERICA_read;
CL_SITES_AMERICA.modifier = sp_cl_sites_AMERICA_modif;
CL_SITES_AMERICA.locker= sp_cl_sites_AMERICA_lock;

//Sites Latin America

function sp_cl_sites_LATIN_read()
{

	var act=this;
	var result=0;
	var total_Sites=0;
	var total_nb_country=0;
	var nb_country_region=0;

if (act instanceof OpxActivity)
{
	if (act.SP_NF_CL_TRIAL)
	{
		total_Sites=act.SP_AA_CL_INVESTIGATOR_SITES;
		total_nb_country=this.sp_cl_list_count_reg("SP_RING_CL_COUNTRY","Greater Europe,Africa and Middle-East,Asia Pacific,Latin America,North America");
		nb_country_region=this.sp_cl_list_count_reg("SP_RING_CL_COUNTRY","Latin America");

		if ( (total_Sites instanceof NUMBER)&& (act.SP_AA_N_CL_SITES_LATIN<0) && (nb_country_region instanceof NUMBER) 
				&& (total_nb_country instanceof NUMBER) && (total_nb_country >0 ) )
		{

			result=(total_Sites/total_nb_country)*nb_country_region;

		}
		else
		{
			if (act.SP_AA_N_CL_SITES_LATIN>=0)
			{
			result=act.SP_AA_N_CL_SITES_LATIN;
			}
			else
			{
			result=0;
				
			}
		}
		
	}
	else
	{
		var trial_index=act.sp_get_trial_id("");
		var trial="OpxActivity".get(trial_index);
		if (trial instanceof OpxActivity)
		{
			result=trial.SP_DA_N_CL_SITES_LATIN;
		}
	}
}
	return result;
}

function sp_cl_sites_LATIN_lock()
{
	var act=this;
	var lock=true;

	if (act.SP_NF_CL_TRIAL)
	{
		lock=false;
	}
	
	return lock;	
}

function sp_cl_sites_LATIN_modif(n)
{
	if (n instanceof NUMBER)
	{
		this.SP_AA_N_CL_SITES_LATIN=n;
	
	}
	else
	{
		this.SP_AA_N_CL_SITES_LATIN=-1;
	}
}

var CL_SITES_LATIN = new objectAttribute("OpxActivity","SP_DA_N_CL_SITES_LATIN","NUMBER");
CL_SITES_LATIN.comment = "#Sites(Latin America)";
CL_SITES_LATIN.reader = sp_cl_sites_LATIN_read;
CL_SITES_LATIN.modifier = sp_cl_sites_LATIN_modif;
CL_SITES_LATIN.locker= sp_cl_sites_LATIN_lock;


//Data capture

function sp_cl_data_cap_read ()
{
	var act=this;
	var result="";

	if (act instanceof Opxactivity) 
	{
		if (act.SP_NF_CL_TRIAL)
		{
			
			result=act.SP_AA_CL_DATA_CAPT;
		}
		else
		{
			if (act.SP_NF_B_CL_IS_DATA_MGR || act.SP_NF_B_CL_IS_ANALYST)
			{

				result=act.Sp_get_info_trial_attribute("SP_AA_CL_DATA_CAPT");
			}

		}

	}	

	Return result;
}

function sp_cl_data_cap_lock ()
{
	var act=this;
	if (act.SP_NF_CL_TRIAL)
	{
		return false;
	}
	else
	{
		return true;
	}	
}

function sp_cl_data_cap_modif (data_cap)
{
	this.SP_AA_CL_DATA_CAPT=data_cap;
}

var CL_DATA_CAP = new objectAttribute("OpxActivity","SP_DA_CL_DATA_CAPT","SP_AT_DATA_CAPT");
CL_DATA_CAP.comment = "Data Capture";
CL_DATA_CAP.reader = sp_cl_data_cap_read;
CL_DATA_CAP.modifier = sp_cl_data_cap_modif;
CL_DATA_CAP.locker= sp_cl_data_cap_lock;

// Unique CRF Pages per Subject (SP_AA_CL_UNIQUE_CRF_PAGES)

function sp_cl_unique_crf_page_read ()
{
	var act=this.sp_get_trial_id("");
	var trial="OpxActivity".get(act);
	var result=0;
	 if(this.SP_NF_CL_TRIAL)
	{
	result=60;
	}
	// //var vec_val=new vector ("Epidemiology",20,"Phase 1",30,"Phase 2a",35,"Phase 2b",40,"Phase 3",40,"Phase 4",25,"Exploratory Phase",0,"Not applicable",0);
	// /*
	// I/II =35
	// II=35
	// II/III=40
	// N/A = 20
	
	// */
	// //var vec_val=new vector ("I",30,"IIa",35,"I/II",35,"II",35,"II/III",40,"IIb",40,"III",40,"IIIb",40,"IV",25,"N/A",25);edited as per ITS-INC5509561

	if (trial instanceof Opxactivity) 
	{
		if (trial.SP_AA_CL_UNIQUE_CRF_PAGES > 0 && this.SP_NF_CL_TRIAL)
		{
			result=trial.SP_AA_CL_UNIQUE_CRF_PAGES;
		}
		// /*else
		// {
			// if (vec_val.get(trial.SP_NF_CL_TRIAL_PHASE) instanceof NUMBER)
			// {
				// result=vec_val.get(trial.SP_NF_CL_TRIAL_PHASE);
			// }
		// }*/

	}	
	

	return result;
}

function sp_cl_unique_crf_page_lock ()
{
	var act=this;
	if (act.SP_NF_CL_TRIAL)
	{
		return false;
	}
	else
	{
		return true;
	}	
}

function sp_cl_unique_crf_page_modif (n)
{
	if (n instanceof NUMBER)
	{
	this.SP_AA_CL_UNIQUE_CRF_PAGES=n;		
	}

}

var CL_UNIQUE_CRF_PAGE = new objectAttribute("OpxActivity","SP_DA_CL_UNIQUE_CRF_PAGES","NUMBER");
CL_UNIQUE_CRF_PAGE.comment = "Unique CRF Pages per Subject";
CL_UNIQUE_CRF_PAGE.reader = sp_cl_unique_crf_page_read;
CL_UNIQUE_CRF_PAGE.modifier = sp_cl_unique_crf_page_modif;
CL_UNIQUE_CRF_PAGE.locker= sp_cl_unique_crf_page_lock;




// Unique CRF Pages per Subject (SP_AA_CL_CRF_PAGES)

function sp_cl_crf_page_read ()
{
	var act=this.sp_get_trial_id("");
	var trial="OpxActivity".get(act);
	var result=0;
	var prj_code="";
	if(this.SP_NF_CL_TRIAL)
	{
	result=90;
	}
//	var vec_val01=new vector ("Epidemiology",25,"Phase 1",45,"Phase 2a",65,"Phase 2b",75,"Phase 3",65,"Phase 4",45,"Exploratory Phase",0,"Not applicable",0);
/*
***vec_val02****
I/II = 65
II/III =75
II = 65
N/A=25

*/
	//var vec_val01=new vector ("N/A",25,"I",45,"IIa",65,"I/II",65,"II",65,"II/III",75,"IIb",75,"III",65,"IIIb",65,"IV",45);edited as per ITS-INC5509561

	//values depending on projet code
	//var vec_val02=new vector ("Epidemiology",25,"Phase 1",45,"Phase 2a",85,"Phase 2b",100,"Phase 3",100,"Phase 4",45,"Exploratory Phase",0,"Not applicable",0);
	//var vec_val02=new vector ("N/A",25,"I",45,"IIa",85,"I/II",65,"II",65,"II/III",75,"IIb",100,"III",100,"IIIb",100,"IV",45);
	
	if (trial instanceof Opxactivity) 
	{
		prj_code=trial.project.get("SPAS_AA_PROJECT_CODE");
		
		if (trial.SP_AA_CL_CRF_PAGES > 0 && this.SP_NF_CL_TRIAL)
		{
			result=trial.SP_AA_CL_CRF_PAGES;
		}
		/*else
		{
				if (vec_val01.get(trial.SP_NF_CL_TRIAL_PHASE) instanceof NUMBER)
				{
					result=vec_val01.get(trial.SP_NF_CL_TRIAL_PHASE);
				}
			
		}*/

	}	

	return result;
}

function sp_cl_crf_page_lock ()
{
	var act=this;
	if (act.SP_NF_CL_TRIAL)
	{
		return false;
	}
	else
	{
		return true;
	}	
}

function sp_cl_crf_page_modif (n)
{
	if (n instanceof NUMBER)
	{
	this.SP_AA_CL_CRF_PAGES=n;		
	}

}

var CL_CRF_PAGE = new objectAttribute("OpxActivity","SP_DA_CL_CRF_PAGES","NUMBER");
CL_CRF_PAGE.comment = "N  CRF Pages per Subject";
CL_CRF_PAGE.reader = sp_cl_crf_page_read;
CL_CRF_PAGE.modifier = sp_cl_crf_page_modif;
CL_CRF_PAGE.locker= sp_cl_crf_page_lock;


// Total load in TIME_SYNTHESIS 

function sp_cl_total_load_read ()
{
	var result=0;

	for (var ph in this.ACTIVITY.ALLOCATIONS where ( (ph.cost_account.name==this.cost_account.name) && 
	(this.resource.name==ph.resource.name) && (this.SPAS_RA_SITE.name==ph.SPAS_RA_SITE.name) && (this.SP_RA_METRIC.name==ph.SP_RA_METRIC.name)) )
		{

			result=result+ph.total_load;
				
		}

	Return result;
}


function sp_cl_total_load_lock ()
{
	var result=false;
	var cmpt=0;
	for (var ph in this.ACTIVITY.ALLOCATIONS where ( (ph.cost_account.name==this.cost_account.name) &&
	(this.resource.name==ph.resource.name) && (this.SPAS_RA_SITE.name==ph.SPAS_RA_SITE.name) && (this.SP_RA_METRIC.name==ph.SP_RA_METRIC.name)))
		{
			cmpt=cmpt+1;

		}
	if (cmpt>1)
	{
		result=true;
	}
	
return result;
}


function sp_cl_total_load_modif (load)
{
	var cmpt=0;
	var ph_upd;
	for (var ph in this.ACTIVITY.ALLOCATIONS where ( (ph.cost_account.name==this.cost_account.name) && 
	(this.resource.name==ph.resource.name) && (this.SPAS_RA_SITE.name==ph.SPAS_RA_SITE.name) && (this.SP_RA_METRIC.name==ph.SP_RA_METRIC.name)))
		{
			ph_upd=ph;
			cmpt=cmpt+1;
			if (cmpt>1)
			{
				alert("Updating is not allowed");
				break;
			}

		}
	if (cmpt==1)
	{
		
		ph_upd.total_load=load;
	}
}

var CL_TOTAL_LOAD = new objectAttribute("OpxTIME_SYNTHESIS","SP_DA_CL_TOTAL_LOAD","NUMBER");
CL_TOTAL_LOAD.comment = "Total Load (Clinical)";
CL_TOTAL_LOAD.reader = sp_cl_total_load_read;
CL_TOTAL_LOAD.modifier = sp_cl_total_load_modif;
CL_TOTAL_LOAD.locker= sp_cl_total_load_lock;

//Estimated FTE

function sp_cl_fte_estimasted_read ()
{
	var result=0;
	for (var ph in this.ACTIVITY.ALLOCATIONS where ( (ph.cost_account.name==this.cost_account.name) && 
	(this.resource.name==ph.resource.name) && (this.SPAS_RA_SITE.name==ph.SPAS_RA_SITE.name)))
		{
			if  (ph.COST_ACCOUNT.NAME=="FTE_ESTIMATED" || ph.COST_ACCOUNT.NAME=="FTE")
				{
					result=result+ph.SP_NF_CL_REF_FTE_PH;
				}

		}
		

return result;	

}


function sp_cl_fte_estimated_lock ()
{
	var cmpt=0;
	var result=false;
	
	for (var ph in this.ACTIVITY.ALLOCATIONS where ( (ph.cost_account.name==this.cost_account.name) && 
	(this.resource.name==ph.resource.name) && (this.SPAS_RA_SITE.name==ph.SPAS_RA_SITE.name)))
		{
			cmpt=cmpt+1;
		}
	if (cmpt>1)
	{
		result=true;
	}
	
return result;
}


function sp_cl_fte_estimated_modif (load)
{
	var no_support=false;
	
	for (var ph in this.ACTIVITY.ALLOCATIONS where ( (ph.cost_account.name==this.cost_account.name) && 
	(this.resource.name==ph.resource.name) && (this.SPAS_RA_SITE.name==ph.SPAS_RA_SITE.name)))
		{

			no_support=ph.SP_AA_B_CL_NO_SUPPORT;
			if (! no_support)
			{
			ph.TOTAL_LOAD=ph.SP_NF_CONV_FTE*load;
			}
			else
			{
			alert("This allocation is flagged as No Support; to edit FTEs to this allocation, change No support? to no and then reestimate.");
			}
			break;
		}	
}

var CL_FTE_ESTIM = new objectAttribute("OpxTIME_SYNTHESIS","SP_DA_CL_FTE_ESTIMATED","NUMBER");
CL_FTE_ESTIM.comment = "Estimated FTE (Clinical)";
CL_FTE_ESTIM.reader = sp_cl_fte_estimasted_read;
CL_FTE_ESTIM.modifier = sp_cl_fte_estimated_modif;
CL_FTE_ESTIM.locker= sp_cl_fte_estimated_lock;




//YSA Complexity level for clinical fte metrics

var vec_fields= new vector("SP_AA_CL_CF_DATAMAN","SP_AA_CL_CF_BIOSTAT",
"SP_AA_CL_CF_BIOSTATPROG","SP_AA_CL_CF_CPM",
"SP_AA_CL_CF_GMA","SP_AA_CL_CF_MONITO","SP_AA_CL_CF_GCD");

var vec_fields_platform= new vector ("SP_AA_CL_CF_DATAMAN","CDM",
"SP_AA_CL_CF_BIOSTAT","STAT",
"SP_AA_CL_CF_BIOSTATPROG","PROG",
"SP_AA_CL_CF_CPM","CPM Platform",
"SP_AA_CL_CF_GMA","CMO",
"SP_AA_CL_CF_MONITO","SML",
"SP_AA_CL_CF_GCD","GCD");

var vec_Codif= new vector("SP_AA_CL_CF_DATAMAN","DATA_MGT",
"SP_AA_CL_CF_BIOSTAT","STATIS",
"SP_AA_CL_CF_BIOSTATPROG","PROG",
"SP_AA_CL_CF_CPM","PROG_MGT",
"SP_AA_CL_CF_GMA","MED_OP",
"SP_AA_CL_CF_MONITO","MGT_LOG",
"SP_AA_CL_CF_GCD","GCD");

var vec_fields_lock= new vector("SP_AA_CL_CF_DATAMAN","SP_NF_B_IS_DATA_MGT",
"SP_AA_CL_CF_BIOSTAT","SP_NF_B_CL_IS_STAT",
"SP_AA_CL_CF_BIOSTATPROG","SP_NF_B_CL_IS_PROG",
"SP_AA_CL_CF_CPM","SP_NF_B_IS_PROG_MGT",
"SP_AA_CL_CF_GMA","SP_NF_B_IS_MED_OP",
"SP_AA_CL_CF_MONITO","SP_NF_B_IS_MGT_LOG",
"SP_AA_CL_CF_GCD","SP_NF_B_IS_GCD");


for (var v in vec_fields)
{
	
	var readerFunction="Function Complexity_level_read_"+vec_Codif.get(v)+"() return Complexity_level_read(\""+v+"\",\""+vec_fields_lock.get(v)+"\" );";
	readerFunction.eval();

	var modifierFunction="Function Complexity_level_mod_" + vec_Codif.get(v)+"(value) return Complexity_level_mod(\""+v+"\",value);";
	modifierFunction.eval();

	var lockerFunction="Function Complexity_level_lock_"+vec_Codif.get(v)+"() return Complexity_level_lock(\""+vec_fields_lock.get(v)+"\");";
	lockerFunction.eval();

	var complexity_level = new ObjectAttribute("OpxActivity","SP_DA_CL_COMPL_"+vec_Codif.get(v),"SP_AT_CL_COMPL_LEVEL");
	complexity_level.reader=new function("Complexity_level_read_"+vec_Codif.get(v));
	complexity_level.modifier=new function("Complexity_level_mod_"+vec_Codif.get(v));
	complexity_level.comment="Complexity factor "+vec_fields_platform.get(v);
	complexity_level.locker=new function("Complexity_level_lock_"+vec_Codif.get(v));
	
}


function Complexity_level_read(field,cond)
{
	var result="";
	var trial_index;
	var trial;
if (this instanceof OpxActivity)
{
	if (this.SP_NF_CL_TRIAL
	&& this.get(field) instanceof STRING)
	{
		result= this.get(field);
	}
	else
	{
		if (this.get(cond) instanceof BOOLEAN
		&& this.get(field) instanceof STRING
		&& this.get(cond) &&
		this.get(field)!="")
		{
			result= this.get(field);		
		}
		else
		{
			trial_index=this.sp_get_trial_id("");
			trial="OpxActivity".get(trial_index);
			if (trial instanceof OpxActivity && 
			trial.get(field) instanceof STRING &&
			this.get(cond) instanceof BOOLEAN &&
			this.get(cond)
			)
			{
				result= trial.get(field);
			}
		}
	}
}

return result;
}

function Complexity_level_lock (cond)
{

	var result=true;
	
	if (this.get(cond) || this.SP_NF_CL_TRIAL)
	{
		result=false;
	}

return result;	
}


function Complexity_level_mod(field,value)
{

	if (this instanceof OpxActivity)
	{
			
		if (value instanceof STRING)
		{
			this.set(field,value);
		}
	}
}

//Translator language on SP_PT_CL_TRANSLATION_FTE


function sp_cl_transl_lang_read ()
{
	var lang=this;
	var result="";

	if (lang instanceof OpxSP_PT_CL_TRANSLATION_FTE ) 
	{
		result=lang.SP_AA_CL_LANGUAGES;
	}	

	return result;
}


function sp_cl_transl_lang_modif (l)
{
	this.SP_AA_CL_LANGUAGES=l;
}

var CL_TRANS_LANG = new objectAttribute("OpxSP_PT_CL_TRANSLATION_FTE","SP_DA_CL_LANGUAGES","SP_AT_CLIN_LANGUAGE");
CL_TRANS_LANG.comment = "Language";
CL_TRANS_LANG.reader = sp_cl_transl_lang_read;
CL_TRANS_LANG.modifier = sp_cl_transl_lang_modif;


//Translator language on SP_PT_CL_TRANSLATION_FTE

function sp_cl_ph_transl_lang_read ()
{
	var ph=this;
	var result="";

	if (ph instanceof OpxPlannedHours && ph.SP_AA_S_PH_CL_LANGUAGE!="" ) 
	{
		result=ph.SP_AA_S_PH_CL_LANGUAGE;
	}	

	return result;
}

function sp_cl_ph_transl_lang_lock ()
{
	var ph=this;
	var lock=true;
	if ((ph.COST_ACCOUNT instanceof OpxCOST_ACCOUNT && ph.COST_ACCOUNT.name=="FTE") && (PH.Resource instanceof OpxRESOURCE && PH.Resource.name=="CLIN-GCD-TRA"))
	{
		lock=false;
	}
return lock;	
}

function sp_cl_ph_transl_lang_modif (l)
{
	this.SP_AA_S_PH_CL_LANGUAGE=l;
}

var CL_PH_TRANS_LANG = new objectAttribute("OpxPlannedHours","SP_DA_PH_CL_LANGUAGES","SP_AT_CLIN_LANGUAGE");
CL_PH_TRANS_LANG.comment = "Languages (Translator)";
CL_PH_TRANS_LANG.reader = sp_cl_ph_transl_lang_read;
CL_PH_TRANS_LANG.modifier =sp_cl_ph_transl_lang_modif;
CL_PH_TRANS_LANG.locker=sp_cl_ph_transl_lang_lock;

//dynamic fields used in clinical cost_account

function sp_CL_VENDOR_read ()
{
	var result="1-UNSPECIFIED";

	if ((this instanceof OpxSP_PT_TRIAL_CAT_COST_INFO) && (this.SP_AA_S_TCCI_CRO_VENDOR instanceof STRING))
	{
	result=this.SP_AA_S_TCCI_CRO_VENDOR;
	}

	return result;
}


function sp_CL_VENDOR_modif (st)
{
var vec_cro=new vector();
var vec_ven_in=new vector();
for (var cv in "OpxSP_PT_CL_CRO_VENDOR".findclass())
{
	vec_cro.push(cv.name);
}
	
if (st instanceof STRING && st!="" && st!=undefined)
{
	vec_ven_in=st.parsevector();
	vec_ven_in=Intersection(vec_cro,vec_ven_in);
	if (vec_ven_in instanceof Vector && vec_ven_in.length>0)
	{
		this.SP_AA_S_TCCI_CRO_VENDOR=vec_ven_in.JOIN(",");	
	}
	else{
		this.SP_AA_S_TCCI_CRO_VENDOR="1-UNSPECIFIED";
	}

}
else{
this.SP_AA_S_TCCI_CRO_VENDOR="1-UNSPECIFIED";
}

}

var CL_VENDOR = new objectAttribute("OpxSP_PT_TRIAL_CAT_COST_INFO","SP_DA_CL_COST_VENDOR","STRING");
CL_VENDOR.comment = "Vendor (cost)";
CL_VENDOR.reader = sp_CL_VENDOR_read;
CL_VENDOR.modifier = sp_CL_VENDOR_modif;


function sp_CL_REV_AMT_read ()
{
	var result=0;

	if ((this instanceof OpxSP_PT_TRIAL_CAT_COST_INFO) && (this.SP_AA_N_TCCI_REV_AMT instanceof NUMBER))
	{
	result=this.SP_AA_N_TCCI_REV_AMT;
	}

	return result;
}


function sp_CL_REV_AMT_modif (st)
{

if (st instanceof NUMBER && st!="" && st!=undefined)
{
	this.SP_AA_N_TCCI_REV_AMT=st;
}
else{
this.SP_AA_N_TCCI_REV_AMT=0;
}

}

var CL_REV_AMT = new objectAttribute("OpxSP_PT_TRIAL_CAT_COST_INFO","SP_DA_CL_COST_REV_AMT","NUMBER");
CL_REV_AMT.comment = "Revised Amount (cost)";
CL_REV_AMT.reader = sp_CL_REV_AMT_read;
CL_REV_AMT.modifier = sp_CL_REV_AMT_modif;




//Ring Attributes section

//AS Metrics Resource List

Var AS_MET_RES="OpxActivity".defineRingAttribute("SP_RING_AS_MET_RES_LIST","AS Metrics Type 1 Resource :","r.SP_RA_AS_MET_RES_ACT.SP_PT_AS_MET_NN_RES",
"SP_RA_AS_MET_RES_LIST",
"SP_RA_AS_MET_RES_ACT");
AS_MET_RES.length = 16000;
AS_MET_RES.category = "Ring attribute";
//Sponsorship ring attribute

var trial_sponsorship="OpxActivity".defineRingAttribute("SP_RING_CL_SPONSORSHIP","Sponsorship","r.SP_RA_SPONSORHIP_ACT.SP_PT_CL_NN_SPONSORSHIP",
"SP_RA_SPONSORSHIP_VAL",
"SP_RA_SPONSORHIP_ACT");
trial_sponsorship.length = 16000;
trial_sponsorship.category = "Ring attribute";

//Country (Clin Trial) ring attribute (P5: SP_AA_CL_LOCATION_TRIAL)


var trial_cl_country="OpxActivity".defineRingAttribute("SP_RING_CL_COUNTRY","Country (Clin Trial)","r.SP_RA_CL_COUNTRY_ACT.SP_PT_CL_NN_COUNTRIES",
"SP_RA_CL_COUNTRY_VAL",
"SP_RA_CL_COUNTRY_ACT");
trial_cl_country.length = 16000;
trial_cl_country.category = "Ring attribute";


//Objectives ring attribute

var trial_cl_objectives="OpxActivity".defineRingAttribute("SP_RING_CL_OBJECTIVES","Objectives","r.SP_RA_CL_OBJECTIVES_ACT.SP_PT_CL_NN_OBJECTIVES",
"SP_RA_CL_OBJECTIVES_VAL",
"SP_RA_CL_OBJECTIVES_ACT");
trial_cl_objectives.length = 16000;
trial_cl_objectives.category = "Ring attribute";

//Population ring attribute

var trial_cl_Population="OpxActivity".defineRingAttribute("SP_RING_CL_POPULATION","Population","r.SP_RA_CL_POPULATION_ACT.SP_PT_CL_NN_POPULATION",
"SP_RA_CL_POPULATION_VAL",
"SP_RA_CL_POPULATION_ACT");
trial_cl_Population.length = 16000;
trial_cl_Population.category = "Ring attribute";

//Population ring attribute (Programmer)

var prog_cl_country="OpxActivity".defineRingAttribute("SP_RING_CL_PROGRAMMER","Programmer","r.SP_RA_CL_SITES_PROG_ACT.SP_PT_CL_NN_SITES_PROG",
"SP_RA_CL_SITES_VAL_PROG",
"SP_RA_CL_SITES_PROG_ACT");
prog_cl_country.length = 16000;
prog_cl_country.category = "Ring attribute";


//Statistician ring attribute (SP_AA_CL_STATISTICIAN)

var stat_cl_country="OpxActivity".defineRingAttribute("SP_RING_CL_STATISTICIAN","Statistician","r.SP_RA_CL_SITES_STAT_ACT.SP_PT_CL_NN_SITES_STAT",
"SP_RA_CL_SITES_VAL_STAT",
"SP_RA_CL_SITES_STAT_ACT");
stat_cl_country.length = 16000;
stat_cl_country.category = "Ring attribute";


//Clin. Trial Analyst ring attribute (SP_AA_CL_TRIAL_ANALYST)

var analyst_cl_country="OpxActivity".defineRingAttribute("SP_RING_CL_TRIAL_ANALYST","Clin. Trial Analyst","r.SP_RA_CL_SITES_TANLST_ACT.SP_PT_CL_NN_SITES_TANLST",
"SP_RA_CL_SITES_VAL_TANLST",
"SP_RA_CL_SITES_TANLST_ACT");
analyst_cl_country.length = 16000;
analyst_cl_country.category = "Ring attribute";


//Data Manager ring attribute  (SP_AA_CL_DATA_MANAGER)

var manager_cl_country="OpxActivity".defineRingAttribute("SP_RING_CL_DATA_MANAGER","Data Manager","r.SP_RA_CL_SITES_DMG_ACT.SP_PT_CL_NN_SITES_DMG",
"SP_RA_CL_SITES_VAL_DMG",
"SP_RA_CL_SITES_DMG_ACT");
manager_cl_country.length = 16000;
manager_cl_country.category = "Ring attribute";


//Medical Writer ring attribute (SP_AA_CL_MED_WRITER)

var med_cl_country="OpxActivity".defineRingAttribute("SP_RING_CL_MED_WRITER","Medical Writer","r.SP_RA_CL_SITES_MEDW_ACT.SP_PT_CL_NN_SITES_MEDW",
"SP_RA_CL_SITES_VAL_MEDW",
"SP_RA_CL_SITES_MEDW_ACT");
med_cl_country.length = 16000;
med_cl_country.category = "Ring attribute";

//CDL (Clinical Datamanagement Lead) ring attribute.

var ctl_cl_country="OpxActivity".defineRingAttribute("SP_RING_CL_CDL","Clin. Data Lead","r.SP_RA_CL_SITES_CDL_ACT.SP_PT_CL_NN_SITES_CDL",
"SP_RA_CL_SITES_VAL_CDL","SP_RA_CL_SITES_CDL_ACT");
ctl_cl_country.length = 16000;
ctl_cl_country.category = "Ring attribute";


//CTL ring attribute (SP_AA_CL_CTL_CS)

var ctl_cl_country="OpxActivity".defineRingAttribute("SP_RING_CL_CTL_CS","CTL","r.SP_RA_CL_SITES_CTLCS_ACT.SP_PT_CL_NN_SITES_CTLCS",
"SP_RA_CL_SITES_VAL_CTLCS",
"SP_RA_CL_SITES_CTLCS_ACT");
ctl_cl_country.length = 16000;
ctl_cl_country.category = "Ring attribute";


// MWD (Medical Writer Developer) ring attribute

var mwd_cl_country="OpxActivity".defineRingAttribute("SP_RING_CL_MWD","Medical Writer Developer","r.SP_RA_CL_SITES_MWD_ACT.SP_PT_CL_NN_SITES_MWD",
"SP_RA_CL_SITES_VAL_MWD",
"SP_RA_CL_SITES_MWD_ACT");
mwd_cl_country.length = 16000;
mwd_cl_country.category = "Ring attribute";


//Contract Coordinator ring attribute (SP_AA_CL_CPM_CC)

var cc_cl_country="OpxActivity".defineRingAttribute("SP_RING_CL_CPM_CC","Contract Coordinator","r.SP_RA_CL_SITES_CPMCC_ACT.SP_PT_CL_NN_SITES_CPMCC",
"SP_RA_CL_SITES_VAL_CPMCC",
"SP_RA_CL_SITES_CPMCC_ACT");
cc_cl_country.length = 16000;
cc_cl_country.category = "Ring attribute";


//CPM ring attribute (SP_AA_CL_CPM)

var cpm_cl_country="OpxActivity".defineRingAttribute("SP_RING_CL_CPM","CPM","r.SP_RA_CL_SITES_CPM_ACT.SP_PT_CL_NN_SITES_CPM",
"SP_RA_CL_SITES_VAL_CPM",
"SP_RA_CL_SITES_CPM_ACT");
cpm_cl_country.length = 16000;
cpm_cl_country.category = "Ring attribute";


//Documentation Coord ring attribute  (SP_AA_CL_CLINDOC)

var doc_cl_country="OpxActivity".defineRingAttribute("SP_RING_CL_CLINDOC","Doc Coord","r.SP_RA_CL_SITES_CLINDOC_ACT.SP_PT_CL_NN_SITES_CLINDOC",
"SP_RA_CL_SITES_VAL_CLINDOC",
"SP_RA_CL_SITES_CLINDOC_ACT");
doc_cl_country.length = 16000;
doc_cl_country.category = "Ring attribute";



//Records Manager ring attribute (SP_AA_CL_RM)

var rm_cl_country="OpxActivity".defineRingAttribute("SP_RING_CL_REC_MGR","Records Manager","r.SP_RA_CL_SITES_RECMGR_ACT.SP_PT_CL_NN_SITES_RECMGR",
"SP_RA_CL_SITES_VAL_RECMGR",
"SP_RA_CL_SITES_RECMGR_ACT");
rm_cl_country.length = 16000;
rm_cl_country.category = "Ring attribute";


//Electronic Doc. Specialist ring attribute  (SP_AA_CL_EDOC)

var edoc_cl_country="OpxActivity".defineRingAttribute("SP_RING_CL_EDOC","eDoc Specialist","r.SP_RA_CL_SITES_EDOC_ACT.SP_PT_CL_NN_SITES_EDOC",
"SP_RA_CL_SITES_VAL_EDOC",
"SP_RA_CL_SITES_EDOC_ACT");
edoc_cl_country.length = 16000;
edoc_cl_country.category = "Ring attribute";


//Translator ring attribute (SP_AA_CL_TRANSLATOR)

var ts_cl_country="OpxActivity".defineRingAttribute("SP_RING_CL_TRANSLATOR","Translator","r.SP_RA_CL_SITES_TRANS_ACT.SP_PT_CL_NN_SITES_TRANS",
"SP_RA_CL_SITES_VAL_TRANS",
"SP_RA_CL_SITES_TRANS_ACT");
ts_cl_country.length = 16000;
ts_cl_country.category = "Ring attribute";


//CTM ring attribute (SP_AA_CL_CENTRAL_CRA)

var ctm_cl_country="OpxActivity".defineRingAttribute("SP_RING_CL_CTM","CTM","r.SP_RA_CL_SITES_CTM_ACT.SP_PT_CL_NN_SITES_CTM",
"SP_RA_CL_SITES_VAL_CTM",
"SP_RA_CL_SITES_CTM_ACT");
ctm_cl_country.length = 16000;
ctm_cl_country.category = "Ring attribute";


//Local CRA ring attribute (SP_AA_CL_CRA)

var cra_cl_country="OpxActivity".defineRingAttribute("SP_RING_CL_CRA","Local CRA","r.SP_RA_CL_SITES_CRA_ACT.SP_PT_CL_NN_SITES_CRA",
"SP_RA_CL_SITES_VAL_CRA",
"SP_RA_CL_SITES_CRA_ACT");
cra_cl_country.length = 16000;
cra_cl_country.category = "Ring attribute";


//Logistics Coord ring attribute (SP_AA_CL_LOG_COORDINATOR)

var lc_cl_country="OpxActivity".defineRingAttribute("SP_RING_CL_LOG_COORD","Logistics Coord","r.SP_RA_CL_SITES_LCOORD_ACT.SP_PT_CL_NN_SITES_LCOORD",
"SP_RA_CL_SITES_VAL_LCOORD",
"SP_RA_CL_SITES_LCOORD_ACT");
lc_cl_country.length = 16000;
lc_cl_country.category = "Ring attribute";


/*
//Regional CTM ring attribute (SP_AA_CL_RCTM)

var rctm_cl_country="OpxActivity".defineRingAttribute("SP_RING_CL_RCTM","Regional CTM","r.SP_RA_CL_SITES_ACT_RCTM.SP_PT_CL_NN_SITES",
"SP_RA_CL_SITES_VAL",
"SP_RA_CL_SITES_ACT_RCTM");
rctm_cl_country.length = 16000;
rctm_cl_country.category = "Ring attribute";
*/


//GMA Medical Team Leader ring attribute (SP_AA_CL_SPI_MTL)

var gma_cl_country="OpxActivity".defineRingAttribute("SP_RING_CL_GMA_MTL","GMA Medical Team Leader","r.SP_RA_CL_SITES_GMAMTL_ACT.SP_PT_CL_NN_SITES_GMAMTL",
"SP_RA_CL_SITES_VAL_GMAMTL",
"SP_RA_CL_SITES_GMAMTL_ACT");
gma_cl_country.length = 16000;
gma_cl_country.category = "Ring attribute";

//Clinical and Observational Project Mgmt ring attribute (SP_AA_CL_SPI_TRIAL_MANAGER)

var copm_cl_country="OpxActivity".defineRingAttribute("SP_RING_CL_COPM","PPO COPM","r.SP_RA_CL_SITES_COPM_ACT.SP_PT_CL_NN_SITES_COPM",
"SP_RA_CL_SITES_VAL_COPM",
"SP_RA_CL_SITES_COPM_ACT");
copm_cl_country.length = 16000;
copm_cl_country.category = "Ring attribute";

//Project Manager & Study Leade rring attribute (SP_AA_CL_PMSL)

var pmsl_cl_country="OpxActivity".defineRingAttribute("SP_RING_CL_PMSL","PMSL","r.SP_RA_CL_SITES_PMSL_ACT.SP_PT_CL_NN_SITES_PMSL",
"SP_RA_CL_SITES_VAL_PMSL",
"SP_RA_CL_SITES_PMSL_ACT");
pmsl_cl_country.length = 16000;
pmsl_cl_country.category = "Ring attribute";

//new ring attributes for Clinical re-org
var rng_cl_country = undefined;

rng_cl_country = "OpxActivity".defineRingAttribute("SP_RING_CL_CPC_CPL","CPL","r.SP_RA_CL_SITES_CPCCPL_ACT.SP_PT_CL_NN_SITES_CPCCPL","SP_RA_CL_SITES_VAL_CPCCPL","SP_RA_CL_SITES_CPCCPL_ACT");
rng_cl_country.length=16000;
rng_cl_country.category = "Ring attribute";

rng_cl_country = "OpxActivity".defineRingAttribute("SP_RING_CL_GTO_GTOM","GTOM","r.SP_RA_CL_SITES_GTOGTOM_ACT.SP_PT_CL_NN_SITES_GTOGTOM","SP_RA_CL_SITES_VAL_GTOGTOM","SP_RA_CL_SITES_GTOGTOM_ACT");
rng_cl_country.length=16000;
rng_cl_country.category = "Ring attribute";

rng_cl_country = "OpxActivity".defineRingAttribute("SP_RING_CL_GRTM_RTM","RTM","r.SP_RA_CL_SITES_GRTMRTM_ACT.SP_PT_CL_NN_SITES_GRTMRTM","SP_RA_CL_SITES_VAL_GRTMRTM","SP_RA_CL_SITES_GRTMRTM_ACT");
rng_cl_country.length=16000;
rng_cl_country.category = "Ring attribute";

rng_cl_country = "OpxActivity".defineRingAttribute("SP_RING_CL_GTO_LOG","LOG","r.SP_RA_CL_SITES_GTOLOG_ACT.SP_PT_CL_NN_SITES_GTOLOG","SP_RA_CL_SITES_VAL_GTOLOG","SP_RA_CL_SITES_GTOLOG_ACT");
rng_cl_country.length=16000;
rng_cl_country.category = "Ring attribute";

rng_cl_country = "OpxActivity".defineRingAttribute("SP_RING_CL_CPMO_CC","CC","r.SP_RA_CL_SITES_CPMOCC_ACT.SP_PT_CL_NN_SITES_CPMOCC","SP_RA_CL_SITES_VAL_CPMOCC","SP_RA_CL_SITES_CPMOCC_ACT");
rng_cl_country.length=16000;
rng_cl_country.category = "Ring attribute";

rng_cl_country = "OpxActivity".defineRingAttribute("SP_RING_CL_GRTM_LCRA","LCRA","r.SP_RA_CL_SITES_GRTMLCRA_ACT.SP_PT_CL_NN_SITES_GRTMLCR","SP_RA_CL_SITES_VAL_GRTMLCRA","SP_RA_CL_SITES_GRTMLCRA_ACT");
rng_cl_country.length=16000;
rng_cl_country.category = "Ring attribute";

//CKE ADD
var dkm_platform_rbs="OpxActivity".defineRingAttribute("SP_RING_DKM_ACT_PLATFORM_RBS","DKM Platform ","r.SP_RA_NN_VERS_DKM_ACT.SP_PT_NN_DKM_ACT_RBS",
"SP_RA_NN_VERS_RBS",
"SP_RA_NN_VERS_DKM_ACT");
dkm_platform_rbs.length = 16000;
dkm_platform_rbs.category = "Ring attribute";

//end clinical re-org

// User groups with write permission

var user_grous_cost="OpxCOST_ACCOUNT".defineRingAttribute("SP_RING_READ_WRITE_GROUPS","User groups with write permission","r.SP_RA_ADM_COST_ACCOUNT.SP_PT_ADM_CA_NN_GRP",
"SP_RA_ADM_USER_GRP_VAL",
"SP_RA_ADM_COST_ACCOUNT");
user_grous_cost.length = 16000;
user_grous_cost.category = "Ring attribute";

/**team members**/
/* var SP_RING_PROJECT_USER = "OpxProject".defineRingAttribute("SP_RING_PROJECT_USER",multilingual_getTextKeyMessageString("Attributes.SP_RING_PROJECT_USER"),"r.SP_RA_TEAM_MEMBER_PROJECT.SP_PT_TEAM_MEMBER","SP_RA_TEAM_MEMBER_USER","SP_RA_TEAM_MEMBER_PROJECT");
SP_RING_PROJECT_USER.length = 16000;
SP_RING_PROJECT_USER.category = "Ring attribute"; */

function sp_js_sp_dyn_team_members_reader (){
	var v_vect = new vector();
	fromobject(this){
		for (var o_tm in "OpxSP_PT_TEAM_MEMBER"){
			v_vect.push(o_tm.SP_RA_TEAM_MEMBER_USER.printattribute());
		}
	}
	if (v_vect.length > 0) return v_vect.removeduplicates().join(",");
	return undefined;
}
function sp_js_sp_dyn_team_members_modifier (value){
	var v_vect = value.split(",").removeduplicates();
	var v_tm_to_create = new vector();
	fromobject(this){
		for (var tm in "OpxSP_PT_TEAM_MEMBER") tm.delete();
		for (var tm_id in v_vect){
			var tm = "OpxUser".get(tm_id);
			if (!(tm.internal)) v_tm_to_create.push(tm);
		}
	}
	for (var user in v_tm_to_create){
		try{
			withoutlocking{
				var new_tm = new OpxSP_PT_TEAM_MEMBER("file",this,"SP_RA_TEAM_MEMBER_USER",user);
				if (new_tm == undefined) alert("A problem occured during addition of "+user.printattribute()+" to team members list");
			}
		}catch(error e){
			writeln("ERROR in sp_js_sp_dyn_team_members_modifier : "+e);
			alert("ERROR while creating team members list : "+e);
			alert("Please, contact your admin to solve the problem");
		}
	}
}
function sp_js_sp_dyn_team_members_locker (){
	return false;
}
var SP_DYN_TEAM_MEMBERS = new objectAttribute("OpxProject","SP_DYN_TEAM_MEMBERS","STRING");//replace old "SP_AA_S_PJT_TEAM"
SP_DYN_TEAM_MEMBERS.comment = "Project Team Members";
SP_DYN_TEAM_MEMBERS.reader = sp_js_sp_dyn_team_members_reader;
SP_DYN_TEAM_MEMBERS.modifier = sp_js_sp_dyn_team_members_modifier;
SP_DYN_TEAM_MEMBERS.locker=sp_js_sp_dyn_team_members_locker;
SP_DYN_TEAM_MEMBERS.length = 16000;

method sp_js_team_member_of_projects_selected_mapper on opxopx2context(f){
	var v_users = new vector();
	for (var prj in "OpxProject" where prj.OPEN && prj.PM_PRJ_FILTER && prj.SP_NF_FILTER_DEV_PREDEV){
		fromobject(prj) for (var tm in "OpxSP_PT_TEAM_MEMBER") v_users.push(tm.SP_RA_TEAM_MEMBER_USER);
	}
	v_users = v_users.removeduplicates();
	for (var o_user in v_users) f.call(o_user);
}
_Utils_makeDynRelation("SP_DR_TEAM_MEMBERS_OF_SEL_PRJS", "Team members of selected projects - [JREL]", "opxopx2context", "OpxUser", sp_js_team_member_of_projects_selected_mapper);


method sp_js_check_formula_on_sponsor on opxActivity (s_formula)
{
	var o_act = this;
	var b_one_true = false;
	for (var o_sponsor in o_act.get("r.SP_RA_SPONSORHIP_ACT.SP_PT_CL_NN_SPONSORSHIP"))
	{
		if (o_sponsor.SP_RA_SPONSORSHIP_VAL.CallBooleanFormula(s_formula)){b_one_true=true;}
		// alert(o_sponsor.SP_RA_SPONSORSHIP_VAL);
	}
	return b_one_true;
}	
sp_js_check_formula_on_sponsor.exportFunction({"STRING"},"BOOLEAN","Return true if one of the element of attribute SP_RING_CL_SPONSORSHIP is corresponding to the formula in argument.");


writetolog("Loading script SP_JS_CL_DA_RING_ATTRIBUTES in revision ~a.",revision_number);

 
function ClInitialyzeResSite(oV, nV)
{
var ctl=nV;
var old_v=oV;

	if ((old_v=="" && ctl!="" && (this Instanceof OpxActivity) && this.SP_NF_CL_TRIAL))
	{
		
		fromObject(this)
		{
			for (var act in "OpxActivity".findclass() where (act.SP_CL_METRIC_LAUNCH && (act.wbs_type Instanceof OpxWBS_TYPE)) )
			{
				//act.sp_cl_default_res_sites();
			}
		}
	//alert("Clinical Resourse sites by default are initialized within Trial :"+this.SP_NF_CL_TRIAL_CODE);		
	}

}
function ClInitialyzeResSite(oV, nV)
{
var ctl=nV;
var old_v=oV;

	if ((old_v=="" && ctl!="" && (this Instanceof OpxActivity) && this.SP_NF_CL_TRIAL))
	{
		
		fromObject(this)
		{
			for (var act in "OpxActivity".findclass() where (act.SP_CL_METRIC_LAUNCH && (act.wbs_type Instanceof OpxWBS_TYPE)) )
			{
				//act.sp_cl_default_res_sites();
			}
		}
	//alert("Clinical Resourse sites by default are initialized within Trial :"+this.SP_NF_CL_TRIAL_CODE);		
	}

}
 
//  FILE    : SP_JS_CL_DELETE_FTE_METRICS.ojs
// 
// 
//  PURPOSE : V6 project: Delete fte metrics for UAT Testing
// 
//  HISTORY :
//  Created  by YSA 13:08 29/12/2016



function sp_delete_all_allocations_metrics()
{
	
var metric="OpxCOST_ACCOUNT".get("FTE_METRICS");
var ph_met=0;
var estimated="OpxCOST_ACCOUNT".get("FTE_ESTIMATED");
var ph_estim=0;


WriteToLog("Data recovery starting, delete all allocations for  ~a",metric);
withoutlocking
{
	
fromobject (metric)
{
	for (var ph in "OpxPlannedHours".findclass() where ph.COST_ACCOUNT.name=="FTE_METRICS")
	{
		ph.delete();
		ph_met++;
	}	
}

WriteToLog("Data recovery starting, delete all allocations for  ~a",estimated);
fromobject (estimated)
{
	for (var ph in "OpxPlannedHours".findclass() where ph.COST_ACCOUNT.name=="FTE_ESTIMATED")
	{
		ph.delete();
		ph_estim++;
	}	
}
}

WriteToLog("Number of deleted allocations for FTE_METRICS is : "+ph_met);
WriteToLog("Number of deleted allocations for FTE_ESTIMATED is : "+ph_estim);
WriteToLog("End of batch for the ~a",metric);
WriteToLog("End of batch for the ~a",estimated);
return true;	
}
withoutlocking
{
sp_delete_all_allocations_metrics.exportfunction();
}

//  FILE    : SP_JS_CL_DELETE_FTE_METRICS.ojs
// 
// 
//  PURPOSE : V6 project: Delete fte metrics for UAT Testing
// 
//  HISTORY :
//  Created  by YSA 13:08 29/12/2016



function sp_delete_all_allocations_metrics()
{
	
var metric="OpxCOST_ACCOUNT".get("FTE_METRICS");
var ph_met=0;
var estimated="OpxCOST_ACCOUNT".get("FTE_ESTIMATED");
var ph_estim=0;


WriteToLog("Data recovery starting, delete all allocations for  ~a",metric);
withoutlocking
{
	
fromobject (metric)
{
	for (var ph in "OpxPlannedHours".findclass() where ph.COST_ACCOUNT.name=="FTE_METRICS")
	{
		ph.delete();
		ph_met++;
	}	
}

WriteToLog("Data recovery starting, delete all allocations for  ~a",estimated);
fromobject (estimated)
{
	for (var ph in "OpxPlannedHours".findclass() where ph.COST_ACCOUNT.name=="FTE_ESTIMATED")
	{
		ph.delete();
		ph_estim++;
	}	
}
}

WriteToLog("Number of deleted allocations for FTE_METRICS is : "+ph_met);
WriteToLog("Number of deleted allocations for FTE_ESTIMATED is : "+ph_estim);
WriteToLog("End of batch for the ~a",metric);
WriteToLog("End of batch for the ~a",estimated);
return true;	
}
withoutlocking
{
sp_delete_all_allocations_metrics.exportfunction();
}

 
//  FILE    : SP_JS_CL_FTE_METRICS.ojs
// 
//  AUTHOR  : Atos team
// 
//  VERSION : 1.26
// 
//  PURPOSE : V6 project: fte metrics
// 
//
var revision_number ="1.28";
//
//
// Revision 1.27 2020/06/10 MBL #1988
// Updating the fundtion SP_CL_LAUNCH_SITES_INT to replace S_CONC by S_SITCLOS (RTM metric update)
//
// Revision 1.27 2020/06/05 KSH #1988
// Updating the fundtion SP_CLIN_MAP_RES_INFO and sp_cl_color_ring_at_gantt for the ring attribute SP_RING_CL_MWD to map and for color in gantt
//
// Revision 1.26 2020/02/18 ASP #2045 - Merge of CDOC and MW  
// Updating function "sp_cl_default_res_sites" on the place of "GCD"(previously it was "DOC" and "MW") we hardcode the value of resources as it impacting the functionality. (ITS-INC3956307) 
//  
// Updating function SP_CLIN_MAP_RES_INFO, sp_cl_default_res_sites and SP_CL_LAUNCH_SITES_INT 
//CLIN-DOC-RM,CLIN-DOC-CDC,CLIN-MW-EDS,CLIN-MW-MWR and CLIN-MW-TRA removed from this scripts and replaced by CLIN-GCD-RM,CLIN-GCD-CDC,CLIN-GCD-EDS,CLIN-GCD-MWR and CLIN-GCD-TRA
//
//
// Revision 1.25 2020/03/02   
// updating Sp_get_workload_ctm_prep(profile,res_site,Load_In)  and function Sp_get_workload_ctm_conc_desc(profile,res_site) and Sp_get_workload_ctm_prcond_desc(profile,res_site) and Sp_get_workload_ctm_prep_desc and Sp_get_workload_ctm_prcond

//
// Revision 1.24 2019/10/21 CKE BIOSTATISTICS REORGANIZATION  
// Updating function SP_CLIN_MAP_RES_INFO CLIN-BS-PROG
 and 
CLIN-BS-STAT
 removed from these scripts and replaced by "GBS-CLIN-PROG" & "GBS-CLIN-STAT"
//
// Revision 1.23 2019/11/05 SKJ - Adding the maping "CLIN-CDM-CDL","SP_RING_CL_CDL" for RITM1369584 TEMPO - Review of CDM profiles and adjustments of FTE cost metrics and arg_CDL for color.
// Revision 1.22 2019/08/13 SPG - ITS-INC2976010   
// Updating function SP_CLIN_MAP_RES_INFO to creation of new FTE_METRIC for international  countries

// Revision 1.21 2019/07/31 bcordel -  RITM1166910
// replacing occurences of SP_AA_S_CTM_PROFILE by SP_RA_CTM_METRICS_RESOURCE.NAME
//
// Revision 1.20 2019/07/22 MBL -  ITS-INC2894293  
// Updating function SP_CL_LAUNCH_SITES_INT to prevent creation of new FTE_METRIC when a FTE_ESTIMATED already exists
//
// Revision 1.19 2019/06/18 MBL - ITS-INC2701238  
// Updating function SP_CL_LAUNCH_SITES_INT to delete old splitted allocations (created by equation no more active on the activity)
//
// Revision 1.18 2019/01/10 MAG - RITM0711421 
// Adding function sp_get_china_under_act to identify the activity with china country based on profile and activity type
//
// Revision 1.17 2019/01/28 bcordel
// Modify function SP_CL_LAUNCH_SITES_INT : Adding a way to avoid the split when "Unspecified site" depending of a field on the equation
//
// Revision 1.17 2019/01/28 MBL
// Modify function reestim_allocdesc_read : call of the technical name of the field "label" instead of its label
//
// Revision 1.16 2018/11/02 ORE
// adding functions Sp_get_workload_ctm_prep_inter, Sp_get_workload_ctm_conc_inter and Sp_get_workload_ctm_prcond_inter for calling in formula SP_NF_CL_VALUE_OUTSOURCED_PH and SP_NF_CL_VALUE_NOT_OUTSOURCED_PH
// Modify function Sp_get_workload_ctm_prcond : add completion of reg_site africa
//
// Revision 1.15 2018/10/11 mrochas
// Modify sp_calc_CRA_IN_DAY to use CLIN-GRTM-LCRA in place of old profile CLIN-SML-LCRA
//
// Revision 1.14 2018/09/20 mrochas
// CPMO-FIN-CC changes into CLIN-CPMO-CC
//
// Revision 1.13 2018/09/18 mrochas
// function SP_CL_LAUNCH_SITES_INT : replace CLIN-SML-CTM witch is deactivated by new CLIN-GRTM-RTM profile
//
// Revision 1.12 2018/09/07 mrochas
// Adding "CLIN-GCD-RM","SP_RING_CL_REC_MGR",
// "CLIN-CPC-CPL","SP_RING_CL_CPC_CPL",
// "CLIN-GTO-GTOM","SP_RING_CL_GTO_GTOM",
// "CLIN-GRTM-RTM","SP_RING_CL_GRTM_RTM",
// "CLIN-GTO-LOG","SP_RING_CL_GTO_LOG",
// "CLIN-CPMO-CC","SP_RING_CL_CPMO_CC",
// "CLIN-GRTM-LCRA","SP_RING_CL_GRTM_LCRA"
// to function sp_clin_map_res_info
// modify sp_cl_color_ring_at_gantt to take new profiles of clinical re-org
// modify sp_cl_sml_get_split_ratio : Clinical re-org : CLIN-SML-CTM replaced by CLIN-GRTM-RTM
// 
// Revision 1.11 2018/06/19 ORE
// Adding sp_clinical_outsourced_modifier and sp_clinical_outsourced_reader functions - INC0931202
// 
// Revision 1.10 2018/04/19 ORE
// updating Sp_get_workload_ctm_prcond - replace this by cur_act - INC0785912
//
// Revision 1.9 2018/03/29 ORE
// updating SP_CL_LAUNCH_SITES_INT function - adding Geographic area Africa in the total load for Marcy
// updating Sp_get_workload_ctm_conc, Sp_get_workload_ctm_prcond, Sp_get_workload_ctm_prep - adding Geographic area Africa
//
// Revision 1.8 2018/03/20 ORE 
// updating sp_cl_get_translator_row function - adding resource site argument - INC0483944
// updating SP_CL_LAUNCH_SITES_INT function - adding ratio and resource site argument - INC0483944
// updating sp_cl_default_res_sites function - changing default site for translator profile - INC0483944
// updating sp_get_outsourced_under_act function - adding activity_type argument - INC0469668 
//
// Revision 1.7 2018/03/20 ORE
// Adding controls sp_cl_delete_ph_estimated_metrics to avoid  equation batch errors (crash) - INC0522552
// updating SP_CL_LAUNCH_SITES_INT function
//
// Revision 1.6 2018/03/15 ORE
// updating SP_CL_LAUNCH_SITES_INT function - inversion of true/false for S_PREP if SP_NF_CL_IS_CCRA_OUTSOURCED
//
// Revision 1.5 2018/03/01 ORE
// updating SP_CL_LAUNCH_SITES_INT function - inversion of true/false for S_PRCOND if SP_NF_CL_IS_CCRA_OUTSOURCED
// updating Sp_get_workload_ctm_prcond function (INC0539055)
//
// Revision 1.4 2018/01/16 YSA
// YSA : added sp_get_outsourced_profile_desc function in order to display outsourced profile
//
// Revision 1.3 2017/12/19 YSA
// Correction sp_cl_get_translator_row
//
//	Revision 1.2  2017/11/29 bcordel
//	Correction of function sp_get_outsourced_under_act.
//
//	Revision 1.1  2017/11/22 bcordel
//	Modifying function sp_get_outsourced_under_act that was not working anymore.
//
//YSA: Last modification 15:19 08/September/2017 V6 project
//YSA: Implement Translator metrics change
//	Modifying function sp_cl_get_translator_row
//	Modifying function SP_CL_LAUNCH_SITES_INT
//YSA: Last modification 11:19 07/December/2017 V6 project
//ysa : add sp_cl_color_ring_at_gantt function


//Clinical science fte metrics

function sp_cl_clinical_sciences_fte(id)
{
	var act="OpxActivity".get(id);
	var result=0;
	var Size="n/a";
	if (act instanceof OpxActivity)
	{
		if (act.SP_AA_S_ACT_CL_PRJ_CAT!="In Clin Dev/CTD phase")
		{
			Size="n/a"
		}
		else
		{
			if (act.SP_AA_S_ACT_CL_SIZE!="" && act.SP_AA_S_ACT_CL_SIZE!=undefined)
			{
				Size=act.SP_AA_S_ACT_CL_SIZE;
			}
		}

		var Cl_Sciences="OpxSP_PT_CL_SCIENCES_FTE".get(act.SP_AA_S_ACT_CL_PRJ_CAT+"_"+act.SP_AA_S_ACT_CL_COMPLEXITY+"_"+Size);
		if (Cl_Sciences instanceof OpxSP_PT_CL_SCIENCES_FTE)
		{
			result=Cl_Sciences.SP_AA_N_SC_WORKLOAD;
		}
	}
	if (result instanceof NUMBER)
	{
		return result;
	}
	else
	{
		return 0;
	}
}
withoutlocking
{
	sp_cl_clinical_sciences_fte.exportfunction({"STRING"},"NUMBER");
}

function sp_cl_get_translator_fte_in_out(unsed) 
{

var field="";
var obj=this;
var result=0;
var country="";
var language="";
var countries= new vector();
var vect_met_fields=new vector ("SP_CL_TRANS_HA_EC_IR_ALL_SITES","SP_AA_CL_HA_EC_SUBM",
"SP_CL_TRANS_IB_TRANSLATION_ALL_SITES","SP_AA_CL_IB",
"SP_CL_TRANS_CSR_APP_ALL_SITES","SP_AA_CL_CSR",
"SP_CL_TRANS_CSR_BODY_ALL_SITES","SP_AA_CL_CSR_BODY",
"SP_CL_TRANS_TRANS_FVFS_ALL_SITES","SP_AA_CL_FVFS");

if ( (obj instanceof OpxPlannedHours) && (obj.SP_RA_METRIC instanceof OpxSP_METRIC) && (vect_met_fields.position(obj.SP_RA_METRIC.name) instanceof NUMBER) )
{
	field=vect_met_fields.get(obj.SP_RA_METRIC.name);
	country=obj.get("SP_AA_S_PH_CL_COUNTRY");
	language=obj.get("SP_AA_S_PH_CL_LANGUAGE");
	
	for (var x in "OpxSP_PT_CL_TRANSLATION_FTE".findclass() where (x.name==country && x.SP_AA_CL_LANGUAGES==language) )
	{
	result=x.get(field);
	break;
	}	
}
else
{
	if((obj.SP_RA_METRIC instanceof OpxSP_METRIC) && (vect_met_fields.position(obj.SP_RA_METRIC.name) instanceof NUMBER))
	{
		field=vect_met_fields.get(obj.SP_RA_METRIC.name);
		country=obj.get("SP_NF_PH_CL_COUNTRY");
		countries=country.parsevector();
			for (var x in "OpxSP_PT_CL_TRANSLATION_FTE".findclass() where (countries.position(x.name) instanceof NUMBER) )
		{
		result=result+x.get(field);

		}	
	}
	
}
	

return result ;
}

withoutlocking
{
sp_cl_get_translator_fte_in_out.exportfunction({"STRING"},"NUMBER");
}


function sp_cl_get_translator_row(Countries,ID,field,res_site) 
{
//var OrderLIst = new vector("INVERSE",field);
var OrderLIst = new vector();
var ct=new vector("INVERSE",field);
OrderLIst.push(ct);
var Translat_rows= new vector();
var values = Countries.parsevector();
var result="";
var tr;
var site="OpxSP_PT_CL_SITES".get(res_site);
if ((values.length > 0) && (site instanceof OpxSP_PT_CL_SITES))
{
	for (var x in "OpxSP_PT_CL_TRANSLATION_FTE".findclass() where ((values.position(x.name) instanceof NUMBER) && (x.SP_AA_CL_LANGUAGES instanceof STRING) &&
	(x.SP_AA_CL_LANGUAGES!="") && (x.SP_AA_S_CL_TRANS_RES_SITE==site.name)) order by OrderLIst)
	{	
		if(!(Translat_rows.position(x.get("SP_AA_CL_LANGUAGES")) instanceof NUMBER))
		{
			Translat_rows.push(x.get("SP_AA_CL_LANGUAGES"));
			Translat_rows.push(x.get(ID));
		}
	}
}

if (Translat_rows.length > 0)
{
result=	Translat_rows.join(",")
}
return result ;
}
withoutlocking
{
sp_cl_get_translator_row.exportfunction({"STRING","STRING","STRING","STRING"},"STRING");
}


function sp_cl_delete_ph_estimated_metrics()
{
var ph=this;
withoutalerts
{
if ((ph instanceof OpxALLOCATION) && 
(ph.COST_ACCOUNT instanceof OpxCOST_ACCOUNT) &&
((ph.COST_ACCOUNT.name=="FTE_METRICS") || (ph.COST_ACCOUNT.name=="FTE_ESTIMATED" && !ph.EQUATION_OVERRIDE)))
{

ph.delete();	
	
}
}
return true;
}
withoutlocking
{
	sp_cl_delete_ph_estimated_metrics.exportfunction();
}


function SP_CL_LAUNCH_SITES_INT()
{
	var champ="";
	var sit;
	var v;
	var creat_ph=true;
	var vec_sites=new vector();
	var vect_ph_del=new vector();
	var vect_ctrl_int=new vector();
	var vect_ph=new vector();
	var vect_ph_sites=new vector();
	var vect_sites_int=new vector();
	var ph_tmp;
	var ph_delete;
	var site_int="";
	var vect_met_field=new vector ("SP_CL_TRANS_HA_EC_IR_ALL_SITES","SP_AA_CL_HA_EC_SUBM",
	"SP_CL_TRANS_IB_TRANSLATION_ALL_SITES","SP_AA_CL_IB",
	"SP_CL_TRANS_CSR_APP_ALL_SITES","SP_AA_CL_CSR",
	"SP_CL_TRANS_CSR_BODY_ALL_SITES","SP_AA_CL_CSR_BODY",
	"SP_CL_TRANS_TRANS_FVFS_ALL_SITES","SP_AA_CL_FVFS");
	var hash_cl=new hashtable("String");
	var v_cl =new vector();
	var tr_id="";
	var tr_o="";
	var total_load_cal=0;
	var ctm_sites="";
	var map_res="";
	var res_s_tr="";
	var tr_ratio=100;
	var s_equation="";
	var v_active_equations=new vector();
	var o_act=this;
	
	if (o_act instanceof opxACTIVITY)
	{
		for (var obj in o_act.ALLOCATIONS  where ((obj.SPAS_RA_SITE instanceof OpxBREAKDOWN_3) && (obj.Resource instanceof OpxRESOURCE) && 
		(obj.COST_ACCOUNT instanceof OpxCOST_ACCOUNT) && (obj.COST_ACCOUNT.NAME=="FTE_METRICS") && (obj.SPAS_RA_SITE.name=="Unspecified")))
		{
			// Skipping the split if the allocation is coming from an equation not supporting the splitting.
			if (obj.EQUATION instanceof OpxEquations && obj.EQUATION.CallBooleanFormula("SP_AA_B_EQ_TO_NOT_SPLIT"))
			{
				break;
			}
			vect_ph=new vector();
			vect_ph_sites=new vector();
			s_equation="";
			champ= obj.SP_CLIN_MAP_RES_INFO(obj.resource.name);
			//champ=o_act.CallStringFormula(obj.SP_CLIN_MAP_RES_INFO(obj.resource.name));
			if ((champ instanceof STRING) && (champ!=""))
				{
				champ=o_act.get(champ);
				}
				
			if ((o_act.CallBooleanFormula("LIST_FIND(\"China\",SP_RING_CL_DATA_MANAGER)")) && (obj.resource.name == "CLIN-CDM-DMG"))
				{
				  if ((o_act.CallBooleanFormula("BELONGS(\"WBS_TYPE\",\"S_CRFD\")")) ||(o_act.CallBooleanFormula("BELONGS(\"WBS_TYPE\",\"S_DBDEV\")")) 
					  || (o_act.CallBooleanFormula("BELONGS(\"WBS_TYPE\",\"S_DIA\")"))
					  || ((o_act.CallBooleanFormula("BELONGS(\"WBS_TYPE\",\"S_DATREV\")")) && o_act.CallBooleanFormula("SP_NF_CL_IS_STEP_PRIMO")))
				  {
					champ=o_act.CallStringFormula("LIST_REMOVE(\"China\",SP_RING_CL_DATA_MANAGER)");
				  }
				}
		
		
			if (champ instanceof STRING && champ!="")
			{
				// Store splitting equations active for the activity (to delete old splitted allocation)
				if (obj.EQUATION instanceof OpxEquations) 
				{	
					s_equation=obj.EQUATION.printattribute();
					v_active_equations.push(s_equation);
				}
				vec_sites=champ.parsevector();
				
				// Translator fte processing
				if (obj.resource.name == "CLIN-GCD-TRA" && o_act.CallBooleanFormula("BELONGS(\"WBS_TYPE\",\"S_TRAAPP,S_TRAREP,S_TRASUB,S_TRAIB,S_TRAFVFS\")"))
				{
				
					for ( var s in vec_sites where s!="Outsourced" )
					{
						res_s_tr=s;
						sit="";
						if (s == "USA") s = "US - Swiftwater";
						if (s == "France") s = "FR - Marcy l'Etoile";
						sit="OpxBREAKDOWN_3".get(s);
						vect_ph=new vector();
						vect_ph_sites=new vector();
						
						if (sit instanceof OpxBREAKDOWN_3)
						{
							if (sit.name=="International")
							{
							sit="OpxBREAKDOWN_3".get("International.2");
							}
							// found all translator allocations
							for(var ph in o_act.ALLOCATIONS where ((ph.SPAS_RA_SITE instanceof OpxBREAKDOWN_3) && 
							(ph.SPAS_RA_SITE.name==sit.name) &&
							(ph.COMMENT==obj.COMMENT) && 
							(ph.COST_ACCOUNT instanceof OpxCOST_ACCOUNT) &&
							(ph.Resource instanceof OpxRESOURCE) &&
							(ph.Resource.name==obj.Resource.name) && 
							((ph.COST_ACCOUNT.name=="FTE_METRICS") || (ph.COST_ACCOUNT.name=="FTE_ESTIMATED")) ))
							{
								//vect_ph.push(ph.SP_AA_S_PH_CL_COUNTRY+"_"+ph.SP_AA_S_PH_CL_LANGUAGE);
								vect_ph.push(ph.SP_AA_S_PH_CL_LANGUAGE);
								vect_ph.push(ph);	
								vect_ph_sites.push(ph);
							}
													
							//translator planned hours updating
							if (vect_met_field.get(obj.SP_RA_METRIC.name) instanceof STRING)
							{
								v_cl=new vector();
								hash_cl.Clear();
								v_cl=sp_cl_get_translator_row(o_act.CallStringFormula("SP_NF_CL_COUNTRY"),"ONB",vect_met_field.get(obj.SP_RA_METRIC.name),res_s_tr).parsevector();
								f_test(SIT,s_equation,vect_ph,obj,vect_met_field,total_load_cal,tr_ratio,tr_o,tr_id,hash_cl,v_cl);
							}
							if (v_cl.length>0)
							{
									
								//Cl countries are updated (remove 1 contry..)
								for (var pm in vect_ph_sites where ! (hash_cl.get(pm.SP_AA_S_PH_CL_LANGUAGE) instanceof STRING ))
								{
									WriteToLog("01 Delete planned hours linkec to cl countris updating, ID is : "+pm.ID);
									pm.sp_cl_delete_ph_estimated_metrics();
								}
							}
							else
							{
								for (var pm in vect_ph_sites )
								{
									WriteToLog("02 Cl country is empty, planned hours with ID is deleted : "+pm.ID);
									pm.sp_cl_delete_ph_estimated_metrics();
								}
							}
						}
					}
					WriteToLog("03 Delete planned hours Unspecified with ID :"+obj.ID);
					obj.sp_cl_delete_ph_estimated_metrics();				
				}
				else
				{	
					if(obj.resource.name == "CLIN-GRTM-RTM" && o_act.CallBooleanFormula("BELONGS(\"WBS_TYPE\",\"S_SITCLOS,S_PREP,S_PRCOND\")"))
					{
						vect_ph=new vector();
						vect_ph_sites=new vector();
						ph_tmp="";
						ph_delete="";
						
						for(var ph in o_act.ALLOCATIONS where ((ph.SPAS_RA_SITE instanceof OpxBREAKDOWN_3) && 
						(ph.SPAS_RA_SITE.name!="Unspecified") &&

						(ph.COMMENT==obj.COMMENT) && 
						(ph.COST_ACCOUNT instanceof OpxCOST_ACCOUNT) &&
						(ph.Resource instanceof OpxRESOURCE) &&
						(ph.Resource.name==obj.Resource.name) &&
						((ph.COST_ACCOUNT.name=="FTE_METRICS") || (ph.COST_ACCOUNT.name=="FTE_ESTIMATED")) ))
						{
							vect_ph.push(ph.SPAS_RA_SITE.name);
							vect_ph.push(ph);
							
							if (ph.SPAS_RA_SITE.name=="FR - Marcy l'Etoile")
							{
								vect_ph_sites.push("France");
							}
							else
							{
								if(ph.SPAS_RA_SITE.name=="US - Swiftwater")
								{
									vect_ph_sites.push("USA");
								}
								else
								{
									vect_ph_sites.push(ph.SPAS_RA_SITE.name);
								}
							}
						}
						for (var ctm_s in vec_sites where ctm_s!="Outsourced")
						{
							sit="";
							if (ctm_s == "USA") ctm_s = "US - Swiftwater";
							if (ctm_s == "France") ctm_s = "FR - Marcy l'Etoile";
							WriteToLog("ctm resource sites is: "+ctm_s);
							sit="OpxBREAKDOWN_3".get(ctm_s);
							WriteToLog("ctm sites is: "+sit);
							if (sit instanceof OpxBREAKDOWN_3)
							{
								if (sit.name=="International")
								{
								sit="OpxBREAKDOWN_3".get("International.2");
								}
								
								
								ph_tmp=vect_ph.get(sit.name);
								
								if (this.wbs_type.name=="S_SITCLOS" && obj.resource.name == "CLIN-GRTM-RTM")
								{
									if (this.SP_NF_CL_IS_GRTM_RTM_OUTSOURCED)
									{
										total_load_cal=Sp_get_workload_ctm_conc_inter("CLIN-GRTM-RTM",ctm_s,"SP_AA_N_CTM_LOAD_OUT");
									}
									else
									{
										total_load_cal=Sp_get_workload_ctm_conc_inter("CLIN-GRTM-RTM",ctm_s,"SP_AA_N_CTM_LOAD_IN")
									}
								}
								else
								{
									if (this.wbs_type.name=="S_PRCOND" && obj.resource.name == "CLIN-GRTM-RTM")
									{
										if (this.SP_NF_CL_IS_GRTM_RTM_OUTSOURCED)
										{
											total_load_cal=Sp_get_workload_ctm_prcond_inter("CLIN-GRTM-RTM",ctm_s,true);
										}
										else
										{
											total_load_cal=Sp_get_workload_ctm_prcond_inter("CLIN-GRTM-RTM",ctm_s,false)
										}
									}
									else
									{
										if (this.SP_NF_CL_IS_GRTM_RTM_OUTSOURCED)
										{
											total_load_cal=Sp_get_workload_ctm_prep_inter("CLIN-GRTM-RTM",ctm_s,false);
										}
										else
										{
											total_load_cal=Sp_get_workload_ctm_prep_inter("CLIN-GRTM-RTM",ctm_s,true)
										}
									}
								}
								
								if (ph_tmp instanceof OpxPlannedHours)
								{
									if (ph_tmp.COST_ACCOUNT.name=="FTE_METRICS")
									{
										context.SP_AA_B_AL_LO_ACTIVE=true;
										ph_tmp.TOTAL_LOAD=total_load_cal;
										context.SP_AA_B_AL_LO_ACTIVE=false;
									}
									else
									{
										if ((!ph_tmp.EQUATION_OVERRIDE) && (ph_tmp.COST_ACCOUNT.NAME=="FTE_ESTIMATED"))
										{
											context.SP_AA_B_AL_LO_ACTIVE=true;
											ph_tmp.TOTAL_LOAD=total_load_cal;
											ph_tmp.COST_ACCOUNT=obj.COST_ACCOUNT;
											context.SP_AA_B_AL_LO_ACTIVE=false;
										}
									}
									if (ph_tmp.SP_AA_S_PH_CL_EQU_ORI!=s_equation) 
										ph_tmp.SP_AA_S_PH_CL_EQU_ORI=s_equation;										
								}
								else
								{
									context.SP_AA_B_AL_LO_ACTIVE=true;
									new OpxPlannedHours
										("TotalLoad",total_load_cal,
										"TaskOrWbsElement",obj.TaskOrWbsElement,
										"Site",sit,
										"Resource",obj.Resource,
										"COMMENT",obj.COMMENT,
										"FixedRate",FALSE,
										"DurationComputation","Extendible",
										"CostAccount","FTE_METRICS",
										"SP_AA_S_PH_CL_EQU_ORI",s_equation);
									context.SP_AA_B_AL_LO_ACTIVE=false;
								}
							}
						}
						for (var site_ph in vect_ph_sites where (!(vec_sites.position(site_ph) instanceof NUMBER)))
						{
							if (site_ph=="France")
							{
								site_ph="FR - Marcy l'Etoile";
							}
							else
							{
								if(site_ph=="USA")
								{
									site_ph="US - Swiftwater";
								}
							}
							ph_delete=vect_ph.get(site_ph);
							WriteToLog("04 Delete planned hours with ID :"+ph_delete.ID);
							ph_delete.sp_cl_delete_ph_estimated_metrics();
						}
						WriteToLog("05 Delete planned hours Unspecified with ID :"+obj.ID);
						obj.sp_cl_delete_ph_estimated_metrics();
						
					}
					else
					{
						ph_tmp="";
						ph_delete="";
						vect_ph=new vector();
						vect_ph_sites=new vector();
						
						for(var ph in o_act.ALLOCATIONS where ((ph.SPAS_RA_SITE instanceof OpxBREAKDOWN_3) && (ph.SPAS_RA_SITE.SP_NF_B_IS_INT) && 
						(ph.SPAS_RA_SITE.name!="Unspecified") &&

						(ph.COMMENT==obj.COMMENT) && 
						(ph.COST_ACCOUNT instanceof OpxCOST_ACCOUNT) &&
						(ph.Resource instanceof OpxRESOURCE) &&
						(ph.Resource.name==obj.Resource.name) &&
						((ph.COST_ACCOUNT.name=="FTE_METRICS") || (ph.COST_ACCOUNT.name=="FTE_ESTIMATED")) ))
						{
							vect_ph.push(ph.SPAS_RA_SITE.name);
							vect_ph_sites.push(ph.SPAS_RA_SITE.name);
							vect_ph.push(ph);	
						}
						for ( v in vec_sites where v!="Outsourced")
						{
							sit="";
							sit="OpxBREAKDOWN_3".get(v);

							if (sit instanceof OpxBREAKDOWN_3 && sit.SP_NF_B_IS_INT)
							{
								if (sit.name=="International")
								{
								sit="OpxBREAKDOWN_3".get("International.2");
								}
								
								ph_tmp=vect_ph.get(sit.name);
								

								total_load_cal=obj.TOTAL_LOAD;
								
								if (ph_tmp instanceof OpxPlannedHours)
								{
									if (ph_tmp.COST_ACCOUNT.name=="FTE_METRICS")
									{
										context.SP_AA_B_AL_LO_ACTIVE=true;
										ph_tmp.TOTAL_LOAD=total_load_cal;
										context.SP_AA_B_AL_LO_ACTIVE=false;
									}
									else
									{
										if ((!ph_tmp.EQUATION_OVERRIDE) && (ph_tmp.COST_ACCOUNT.NAME=="FTE_ESTIMATED"))
										{
											context.SP_AA_B_AL_LO_ACTIVE=true;
											ph_tmp.TOTAL_LOAD=total_load_cal;
											ph_tmp.COST_ACCOUNT=obj.COST_ACCOUNT;
											context.SP_AA_B_AL_LO_ACTIVE=false;
										}
									}	
									if (ph_tmp.SP_AA_S_PH_CL_EQU_ORI!=s_equation) 
										ph_tmp.SP_AA_S_PH_CL_EQU_ORI=s_equation;	
								}
								else
								{
									context.SP_AA_B_AL_LO_ACTIVE=true;
									new OpxPlannedHours
										("TotalLoad",total_load_cal,
										"TaskOrWbsElement",obj.TaskOrWbsElement,
										"Site",sit,
										"Resource",obj.Resource,
										"COMMENT",obj.COMMENT,
										"FixedRate",FALSE,
										"DurationComputation","Extendible",
										"CostAccount","FTE_METRICS",
										"SP_AA_S_PH_CL_EQU_ORI",s_equation);
									context.SP_AA_B_AL_LO_ACTIVE=false;
								}
							}
						}
						for (var site_ph in vect_ph_sites where (!(vec_sites.position(site_ph) instanceof NUMBER)))
						{
							ph_delete=vect_ph.get(site_ph);
							WriteToLog("06 Delete planned hours with ID :"+ph_delete.ID);
							ph_delete.sp_cl_delete_ph_estimated_metrics();
						}
						WriteToLog("07 Delete planned hours Unspecified with ID :"+obj.ID);
						obj.sp_cl_delete_ph_estimated_metrics();
					}
				}
			}
			else
			{
				WriteToLog("08 Delete planned hours Unspecified with ID :"+obj.ID);
				obj.sp_cl_delete_ph_estimated_metrics();	
			}
		}
		
		// Deletion of old splitted allocations (created by an equation no more active on the activity)
		for (var obj in o_act.ALLOCATIONS  where obj.COST_ACCOUNT instanceof OpxCOST_ACCOUNT && (obj.COST_ACCOUNT.NAME=="FTE_METRICS" || (obj.COST_ACCOUNT.NAME=="FTE_ESTIMATED" && !obj.EQUATION_OVERRIDE)) && obj.SP_AA_S_PH_CL_EQU_ORI!="" && (!v_active_equations.position(obj.SP_AA_S_PH_CL_EQU_ORI) instanceof NUMBER))
		{
			WriteToLog("09 Delete planned hours with ID :"+obj.ID);
			obj.sp_cl_delete_ph_estimated_metrics();
		}

		// Delete metrics allocations with fte resource site empty
		for (var obj in o_act.ALLOCATIONS  where ((obj.SPAS_RA_SITE instanceof OpxBREAKDOWN_3) && (obj.Resource instanceof OpxRESOURCE) && 
		(obj.COST_ACCOUNT instanceof OpxCOST_ACCOUNT) && ((obj.COST_ACCOUNT.NAME=="FTE_METRICS") || (obj.COST_ACCOUNT.NAME=="FTE_ESTIMATED" && !obj.EQUATION_OVERRIDE))
		&& (obj.SPAS_RA_SITE.SP_NF_B_IS_INT || 
		(obj.resource.name == "CLIN-GCD-TRA" && o_act.CallBooleanFormula("BELONGS(\"WBS_TYPE\",\"S_TRAAPP,S_TRAREP,S_TRASUB,S_TRAIB,S_TRAFVFS\")") )|| 
		(obj.resource.name =="CLIN-GRTM-RTM" && o_act.CallBooleanFormula("BELONGS(\"WBS_TYPE\",\"S_SITCLOS,S_PREP,S_PRCOND\")")) ) && (obj.SPAS_RA_SITE.name!="Unspecified")))
		{

			// Skipping the deletion if the allocation is coming from an equation not supporting the splitting.
			if (obj.EQUATION instanceof OpxEquations && obj.EQUATION.CallBooleanFormula("SP_AA_B_EQ_TO_NOT_SPLIT"))
			{
				break;
			}
			
			vect_sites_int=new vector();
			champ=obj.SP_CLIN_MAP_RES_INFO(obj.resource.name);
			if ((champ instanceof STRING) && (champ!=""))
			{
				champ=o_act.get(champ);
			}
					
			if (champ instanceof STRING)
			{
				vect_ctrl_int=new vector();
				vect_ctrl_int=champ.parsevector();
				map_res=obj.SPAS_RA_SITE.name;
				if (map_res=="FR - Marcy l'Etoile") map_res="France";
				if (map_res=="US - Swiftwater") map_res="USA";
				if(obj.resource.name == "CLIN-GRTM-RTM" && o_act.CallBooleanFormula("BELONGS(\"WBS_TYPE\",\"S_SITCLOS,S_PREP,S_PRCOND\")"))
				{
					if (!(vect_ctrl_int.position(map_res) instanceof NUMBER) )
					{
					WriteToLog("10 Delete planned hours with ID :"+obj.ID);
					obj.sp_cl_delete_ph_estimated_metrics();
					}
				}
				else
				{
					if (!(vect_ctrl_int.position(map_res) instanceof NUMBER) )
					{
					WriteToLog("11 Delete planned hours with ID :"+obj.ID);
					obj.sp_cl_delete_ph_estimated_metrics();
					}
					
				}
			}
		}
	}
}	



withoutlocking
{
	SP_CL_LAUNCH_SITES_INT.exportfunction();
}

//** MPA and YSA: VERSION OPTIMISEE ****

// this function is used to map a resource from the RBS with corresponding field in the Resource information screen on the activities
// the result will be the name of the corresponding resource field

function SP_CLIN_MAP_RES_INFO(unused)
{
var vec_res_drivers={"GBS-CLIN-STAT","SP_RING_CL_STATISTICIAN",
"GBS-CLIN-PROG","SP_RING_CL_PROGRAMMER",
"CLIN-CDV-CTL/CS","SP_RING_CL_CTL_CS",
"CLIN-CPM-CPM","SP_RING_CL_CPM",
"CLIN-CPM-CC","SP_RING_CL_CPM_CC",
"CLIN-CDM-DMG","SP_RING_CL_DATA_MANAGER",
"CLIN-CDM-CTA","SP_RING_CL_TRIAL_ANALYST",
"CLIN-GCD-MWR","SP_RING_CL_MED_WRITER",
"CLIN-GCD-CDC","SP_RING_CL_CLINDOC",
"CLIN-GCD-TRA","SP_RING_CL_TRANSLATOR",
"CLIN-GCD-EDS","SP_RING_CL_EDOC",
"CLIN-SML-CTM","SP_RING_CL_CTM",
"CLIN-SML-LCRA","SP_RING_CL_CRA",
"CLIN-SML-LOG","SP_RING_CL_LOG_COORD",
"PPO-COPM","SP_RING_CL_COPM",
"GMA-MTL","SP_RING_CL_GMA_MTL",
"PPO-PMSL","SP_RING_CL_PMSL",
"CLIN-GCD-RM","SP_RING_CL_REC_MGR",
"CLIN-CPC-CPL","SP_RING_CL_CPC_CPL",
"CLIN-GTO-GTOM","SP_RING_CL_GTO_GTOM",
"CLIN-GRTM-RTM","SP_RING_CL_GRTM_RTM",
"CLIN-GTO-LOG","SP_RING_CL_GTO_LOG",
"CLIN-CPMO-CC","SP_RING_CL_CPMO_CC",
"CLIN-GRTM-LCRA","SP_RING_CL_GRTM_LCRA",
"CLIN-CDM-CDL","SP_RING_CL_CDL", // addition
"CLIN-GCS-CTL","SP_RING_CL_CTL_CS", // addition
"CLIN-CPL-CPL","SP_RING_CL_CPC_CPL", //addition
"CLIN-GCD-MWD","SP_RING_CL_MWD"};// addition

	var res = this.RES;
	var result = "";
	var use=unused;
	if ((res Instanceof OpxResource) && (res !=undefined) && (res!=""))
	{
		result = vec_res_drivers.get(res.name);
		if (!(result instanceof STRING)) 
		{
		 result = "";	
		}
	}
	return result;
}
withoutlocking
{
  SP_CLIN_MAP_RES_INFO.exportfunction({"STRING"},"STRING");
}



function Sp_Cl_Is_Site_Int(sites)
{
	var found = false;
	var site;

	for (var clinSite in sites.parsevector())
	{
		site = "OpxBREAKDOWN_3".get(clinSite);
		if (site instanceof OpxBREAKDOWN_3 && site.SP_NF_B_IS_INT)
		{
			found = true;
			break;
		}
	}
	return found;
}

withoutlocking
{
	Sp_Cl_Is_Site_Int.exportfunction({"STRING"},"BOOLEAN");
}


//  AUTHOR  : ksk
//  VERSION : 1.0
//  PURPOSE : #371 SML split
//  Created  by ksk 16:28 12/12/2013
//  Updated  by YSA 18:38 23/03/2017

function sp_cl_sml_get_split_ratio(site)
{
	var ratio = 1;
	var ctm;
	var clSiteO;
	var ht = new hashtable("string");
	var c;
	var nbSite = 1;

	// warning clinical site USA is Site US
	if (site == "USA") site = "US";

	if (this instanceof OpxActivity	&& site instanceof string && "OpxBREAKDOWN_3".get(site) instanceof OpxBREAKDOWN_3)
	{
		// Clinical re-org : CLIN-SML-CTM replaced by CLIN-GRTM-RTM
		// ctm = this.SP_RING_CL_CTM.parsevector();
		ctm = this.SP_RING_CL_GRTM_RTM.parsevector();

		if ( ctm.length >0)
		{
			// split case
			// Counting number of sites by Region
			for (var clSite in ctm)
			{
				// warning clinical site USA is Site US
				if (clSite == "USA") clSite = "US";

				clSiteO = "OpxBREAKDOWN_3".get(clSite);
				if (clSiteO instanceof OpxBREAKDOWN_3)
				{
					c = ht.get(clSiteO.SP_NF_S_FTE_REGION);
					if (c instanceof number) {
						c++;
					}
					else {
						c = 1;
					}
					ht.set(clSiteO.SP_NF_S_FTE_REGION, c);
				}
			}
			clSiteO = "OpxBREAKDOWN_3".get(site);
			nbSite = ht.get(clSiteO.SP_NF_S_FTE_REGION);
			if ( nbSite instanceof number)
			{
				ratio = ratio / nbSite;
			}
		}
	}
	return ratio;
}

withoutlocking
{
	sp_cl_sml_get_split_ratio.exportfunction({"STRING"},"NUMBER");
}

function SP_Clin_get_field_hrs_value(field_name)
{
	var hrs = this;
	var result="";
	if ( (field_name!="" && field_name!=undefined) &&   (hrs !=undefined && hrs!="" && ((hrs Instanceof OpxHoursAndExpendituresSummary) || (hrs Instanceof OpxAllocation))))
	{
		var act = hrs.ACTIVITY;
		result= act.get(field_name);
	}
	return result;
}
withoutlocking
{
	SP_Clin_get_field_hrs_value.exportfunction({"STRING"},"STRING");
}


//------------------------------------
//  FILE    : SP_JS_REESTIMATE_LOAD.ojs
//  AUTHOR  : oroudaire
//  VERSION : 1.0
//  PURPOSE : Reestimation of the total load of allocation in days
//      Allow reestimation to 0
//      Allow reestimation on allocation based on metrics
//  HISTORY :
//  Created  by oroudaire 23/09/2011 16:45
//------------------------------------
// MPA: création de l'attribut dynamique:
//   - "Estimated Days" (SP_AA_REESTIM_LOAD_DAYS) :
//		réestimation du Total load d'une affectation avec màj de la "Metric value" et du Cost account
//------------------------------------

// Modifier permettant la mise à jour du total load. Permet de reestimer à 0
function reestimate_load_days_mod(nbr)
{
	var ts = this;
	var rem_brut=0;
	if (nbr!= undefined)
	{
		rem_brut=nbr;

		if (ts !=undefined && ts Instanceof OpxPlannedHours)
		{
			withoutlocking
			{
				if(rem_brut >=0 && rem_brut!= undefined)
				{
					var Cost_acc = "OpxCost_ACCOUNT".get("FTE_ESTIMATED");
					if  (ts.COST_ACCOUNT.NAME=="FTE_METRICS")
					{
						ts.SP_AA_N_METRIC_VALUE=ts.CallNumberFormula("TOTAL_LOAD/SP_NF_CONV_FTE");
						ts.COST_ACCOUNT=Cost_Acc;
					}
					ts.TOTAL_LOAD = rem_brut;
				}
			}
		}
	}
}


// Reader donnant la valeur du champ égal à la total load
function reestimate_load_days_read()
{
	var load="";
	if  (This.COST_ACCOUNT.NAME=="FTE_ESTIMATED" || This.COST_ACCOUNT.NAME=="FTE")
		load=This.TOTAL_LOAD;
	return load;
}

var reestimate_load_days = new objectAttribute("OpxPlannedHours","SP_AA_REESTIM_LOAD_DAYS","NUMBER");
reestimate_load_days.comment = "Estimated Days";
reestimate_load_days.reader = reestimate_load_days_read;
reestimate_load_days.modifier = reestimate_load_days_mod;


//------------------------------------
//  FILE    : SP_JS_FTE_PHARMA_SITE.ojs (extraction)
//  AUTHOR  : ksk
//  VERSION : 1.0
//  PURPOSE : #364 & 368 FTE Pharma ? & Pharma Site
//  HISTORY :
//  Created  by ksk 14:31 28/11/2013 
//------------------------------------
// MPA: création des attributs dynamiques:
//   - "Pharma ?" (SP_DA_B_PH_IS_PHARMA)
//   - "Pharma site" (SP_DA_S_PH_PHARMA_SITE)
//------------------------------------
var acceptablePharmaSite = new vector(
	"Pharma", true,
	"Pharma-China", true
);

function sp_fte_acceptablePharmaSite(site)
{
	var b = false;
	if (site instanceOf string && site != "") {
		if (acceptablePharmaSite instanceOf vector && acceptablePharmaSite.get(site) instanceOf boolean)
			b = true;
		else
			alert("Acceptable values are Pharma or Pharma-China and must match precisely"); 
	}
	return b;
}

function sp_fte_pharma_locker()
{
	var lock = true;
	if (this.COST_ACCOUNT.name == "FTE")
		lock = false;
	return lock;
}

function sp_fte_pharma_site_modifier(site)
{
	if (site instanceOf string && site == "") {    
		this.SP_AA_S_CL_PHARMA_SITE = site;
		this.SP_AA_B_CL_IS_PHARMA = false;
	}  
	else if (site instanceOf string && sp_fte_acceptablePharmaSite(site)) {
		// value is acceptable
		this.SP_AA_S_CL_PHARMA_SITE = site;
		this.SP_AA_B_CL_IS_PHARMA = true;
	}  
}

function sp_fte_pharma_reader()
{
	return this.SP_AA_B_CL_IS_PHARMA;
}

function sp_fte_pharma_site_reader()
{
	return this.SP_AA_S_CL_PHARMA_SITE;
}

var fte_pharma_site = new objectAttribute("OpxPlannedHours","SP_DA_S_PH_PHARMA_SITE","STRING");
fte_pharma_site.comment = "Pharma Site";
fte_pharma_site.reader = sp_fte_pharma_site_reader;
fte_pharma_site.modifier = sp_fte_pharma_site_modifier;
fte_pharma_site.locker = sp_fte_pharma_locker;

var fte_pharma = new objectAttribute("OpxPlannedHours","SP_DA_B_PH_IS_PHARMA","BOOLEAN");
fte_pharma.comment = "Pharma ?";
fte_pharma.reader = sp_fte_pharma_reader;
fte_pharma.locker = true;


//------------------------------------
// MPA: création de l'attribut dynamique:
//   - "Estimated FTE" (SP_AA_REESTIM_LOAD_FTE)
//------------------------------------
//YSA: 26 DEC 2016, Modify Estimated FTE field 

function reestim_load_FTE_mod(nbr)
{
	var ph = this;
	var no_support=false;
	
if ((nbr instanceof NUMBER) && (ph instanceof OpxPlannedHours))
{
	/*
	if(ph.COST_ACCOUNT.NAME=="FTE_METRICS")
	{
		ph.SP_AA_N_METRIC_VALUE=ph.SP_NF_CL_REF_FTE_PH;
	}
	*/
	no_support=ph.SP_AA_B_CL_NO_SUPPORT;
	if (! no_support)
	{
	ph.TOTAL_LOAD=ph.SP_NF_CONV_FTE*nbr;
	}
	else
	{
	alert("This allocation is flagged as No Support; to edit FTEs to this allocation, change No support? to no and then reestimate.");
	}
}

}

function reestim_load_FTE_read()
{
	var load=0;
	if  (This.COST_ACCOUNT.NAME=="FTE_ESTIMATED" || This.COST_ACCOUNT.NAME=="FTE")
		load = this.CallNumberFormula(" TOTAL_LOAD/SP_NF_CONV_FTE ")
	return load;
}

var reestim_load_FTE = new objectAttribute("OpxPlannedHours","SP_DA_REESTIM_LOAD_FTE","NUMBER");
reestim_load_FTE.comment = "Estimated FTE";
reestim_load_FTE.reader = reestim_load_FTE_read;
reestim_load_FTE.modifier = reestim_load_FTE_mod;


//------------------------------------
// MPA: création de l'attribut dynamique:
//   - "Allocation Description" (SP_AA_REESTIM_ALLOCDESC)
//------------------------------------
function reestim_allocdesc_mod(strg)
{
	var ph = this;
	if (ph !=undefined && ph Instanceof OpxPlannedHours) {
		withoutlocking {
			ph.COMMENT = strg;
		}
	}
}

function reestim_allocdesc_read()
{
	var ph = this;
	var result = ph.COMMENT;
	if (ph.SP_RA_METRIC.NAME != undefined && ph.SP_RA_METRIC.NAME != "")
		result = ph.SP_RA_METRIC.DESC;
	return result;
}

function reestim_loc()
{
	if (this.COST_ACCOUNT.NAME == "FTE") return false
	return true;
}	

var reestim_allocdesc = new objectAttribute("OpxPlannedHours","SP_AA_REESTIM_ALLOCDESC","STRING");
reestim_allocdesc.comment = "Allocation Description";
reestim_allocdesc.reader = reestim_allocdesc_read;
reestim_allocdesc.modifier = reestim_allocdesc_mod;
reestim_allocdesc.locker = reestim_loc;


//=====
// MPA
//=====
// Import pour les équations cliniques
//=====

//
// Provenance P5 : sp_ojs_cl_get_study_info.ojs
//
function sp_cl_calculate_trans_load(column)
{
	var act = this;
	var vhash = new hashtable("STRING");
	var ctry_list=new Vector();
	var already_listed_ctry =new Vector();
	var result=0;
	if ((act!=undefined && act.SP_NF_CL_COUNTRY!="") && act Instanceof OpxActivity)
	{
		ctry_list = act.SP_NF_CL_COUNTRY.parselist();

		if (ctry_list.length >0)
		{
			for (var cty in ctry_list)
			{
			var opx_cty = "OpxSP_PT_CL_COUNTRY".get(cty);

				if (opx_cty !=undefined)
				{
					if (opx_cty.SP_AA_CL_CTY_GROUP !="" && opx_cty.SP_AA_CL_CTY_GROUP!=undefined)
					{
						if (already_listed_ctry.length ==0)
						{
						already_listed_ctry.push(opx_cty.SP_AA_CL_CTY_GROUP);
						cty=opx_cty.SP_AA_CL_CTY_GROUP;
						}
					}


					for (var ligne in "OpxSP_PT_CL_TRANSLATION_FTE" where ligne.name==cty )
						{
							 var lang=ligne.languages;
							 var fte=ligne.get(column);
							 if (vhash.get(lang)==undefined)
								{
								 vhash.set(lang,fte);
								}
							 else if (vhash.get(lang)!=undefined && vhash.get(lang)<=fte)
									 {
									 vhash.rem(lang);
									 vhash.set(lang,fte);
									 }
						}
				}
			}
		for(var res in vhash)
           {
           result= result + vhash.get(res);
           }
		}

	}

	return result;
}
withoutlocking
{
	sp_cl_calculate_trans_load.exportfunction({"STRING"},"NUMBER");
}


//
// Provenance P5 : sp_ojs_cl_reporting_functions.ojs
//
function sp_get_outsourced_under_act(s_profile,act_type)
{
	var cur_act=this;
	var result=false;
	
	fromobject(cur_act)
	{
		 for (var act in "OpxActivity" where (act.SP_NF_B_OBS_CLIN_ACT && (act.CallStringFormula(s_profile).position("Outsourced") instanceof NUMBER) && 
		 (act.CallBooleanFormula(act_type) instanceof BOOLEAN) && act.CallBooleanFormula(act_type)))
		{
			result=true;
			break;
		}
	}
	
	return result;
}
withoutlocking
{
	sp_get_outsourced_under_act.exportfunction({"STRING","STRING"},"BOOLEAN");
}

function sp_get_china_under_act(s_profile,act_type)
{
	var cur_act=this;
	var result=false;
	
	fromobject(cur_act)
	{
		 for (var act in "OpxActivity" where (act.SP_NF_B_OBS_CLIN_ACT && (act.CallStringFormula(s_profile).position("China") instanceof NUMBER) && 
		 (act.CallBooleanFormula(act_type) instanceof BOOLEAN) && act.CallBooleanFormula(act_type)))
		{
			result=true;
			break;
		}
	}
	
	return result;
}
withoutlocking
{
	sp_get_china_under_act.exportfunction({"STRING","STRING"},"BOOLEAN");
}

//
// Provenance P5 : sp_ojs_cl_get_study_info.ojs
//
function sp_is_stat_bsprep_out(Trial_ID)
{
	var Trial="OpxActivity".get(Trial_ID);
	var result=false;

	if (Trial Instanceof OpxActivity)
	{
		fromobject(Trial)
		{
			for(var act in OpxActivity where act.SP_NF_B_CL_BSPREP_OUT)
			{
				result=True;
				break;
			}
		}
	}
	return result;
}
withoutlocking
{
	sp_is_stat_bsprep_out.exportfunction({"STRING"},"BOOLEAN");
}

//YSA: getLanguageForCountries function is used in Language field (class: planned hours)

function getLanguageForCountries(varCountries)
{

var result;
result="";
var countryTrial= new vector();

//Checking whether countries parameter is empty 
if (varcountries == undefined)|| (varcountries == "")
{
 return result;
}

//If countries parameter is not empty,remove the comma and push into vector
countryTrial= varCountries.split(",");
var j= countryTrial.length;

//For each country in vector check whether any language exists in persisten table and push into result
for (var vec in countryTrial)
{
	for (var each in "OpxSP_PT_CL_TRANSLATION_FTE" where each.NAME==vec)
	{
	if (each.SP_AA_CL_LANGUAGES!=undefined)
 	result +=each.SP_AA_CL_LANGUAGES +",";
	}
}
//Remove the last comma existed in the result
result =result.substring(0,result.length-1); 
if ( result.substring(0,1)==",")
{
  result= result.substring(1, result.length);
}
return result;
}
WITHOUTLOCKING
{
getLanguageForCountries.EXPORTFUNCTION({"STRING"},"STRING");
}

//Load calculation for CTM metrics

function Sp_get_workload_ctm_conc(profile,res_site,workload_field)
{
var wbs_type="";
var ctm_profile="";
var study_lerdership="";
var pasteur_cat="";
var sponsorship="";
var region="";
var index_act="";
var index_ctm="";
var v_index_act;	
var v_index_ctm;
var ctm_level_field="";
var ctm_workload_field="";
var result_level = 1;
var result_workload=0;
var result_nb_site=1;
var result = 0;
var clSiteO="";
var reg_res_site="";
var trial_nb_site=1;
var split_sit_reg=1;
var trial_Id="";
var cur_act = (this instanceof OpxActivity ? this:this.ACTIVITY);
var vec_level=new vector("SP_AA_N_CTM_LEVEL_0",true
,"SP_AA_N_CTM_LEVEL_1",true
,"SP_AA_N_CTM_LEVEL_2",true
,"SP_AA_N_CTM_LEVEL_3",true
);

var vec_workload=new vector("SP_AA_N_CTM_LOAD_IN",true
,"SP_AA_N_CTM_LOAD_OUT",true
);

var vec_region_field =new vector(
"Greater Europe","SP_DA_N_CL_SITES_EU",
"Africa and Middle-East","SP_DA_N_CL_SITES_AFRICA",
"Asia Pacific","SP_DA_N_CL_SITES_ASIA",
"Latin America","SP_DA_N_CL_SITES_LATIN",
"North America","SP_DA_N_CL_SITES_AMERICA");


//find id level field

if (vec_level.get("SP_AA_N_CTM_LEVEL_"+this.get("SP_DA_CL_COMPL_MGT_LOG")))
{
ctm_level_field="SP_AA_N_CTM_LEVEL_"+this.get("SP_DA_CL_COMPL_MGT_LOG");	
}
	
//find id workload field

if (vec_workload.get(workload_field))
{
ctm_workload_field=workload_field;	
}

if (cur_act instanceof OpxActivity)
{

//find a trial and trial KTIs
trial_Id=cur_act.sp_get_trial_id("");
trial_Id="OpxActivity".get(trial_Id);
WriteToLog("Trial is : "+trial_Id);

//find resource site region

if (res_site == "USA") 
{
res_site ="US";
}

if (res_site == "Africa & Middle East - Unspecified")
{
reg_res_site="Africa and Middle-East";
}

//Africa and Middle-East,Asia Pacific,Greater Europe,Latin America
clSiteO = "OpxBREAKDOWN_3".get(res_site);
if (clSiteO instanceof OpxBREAKDOWN_3)
{
reg_res_site=clSiteO.SP_NF_S_FTE_REGION;

if (reg_res_site=="Europe")
{
reg_res_site="Greater Europe";	
}
}

if (trial_Id instanceof OpxActivity)
{
wbs_type=cur_act.wbs_type.name;
ctm_profile=profile;
if (trial_Id.SP_RA_CL_STUDY_LEADERSHIP instanceof OpxSP_PT_CL_STD_LEADERSHIP)
{
study_lerdership=trial_Id.SP_RA_CL_STUDY_LEADERSHIP.name;	
}
if(trial_Id.SP_RA_CL_GROUP_CAT instanceof OpxSP_PT_CL_GROUP_CAT )
{
pasteur_cat=trial_Id.SP_RA_CL_GROUP_CAT.name;	
}
sponsorship=trial_Id.SP_RING_CL_SPONSORSHIP;
index_act=wbs_type+","+ctm_profile+","+study_lerdership+","+pasteur_cat+","+sponsorship+","+reg_res_site;
WriteToLog("Index on activities :"+index_act);


	for (var fte_ctm in "OpxSP_PT_CL_CTM".findclass())
	{
		index_ctm =	fte_ctm.SP_AA_S_CTM_WBS_TYPE+","+
		fte_ctm.SP_RA_CTM_METRICS_RESOURCE.NAME+","+
		fte_ctm.SP_AA_S_CTM_STD_LEADER+","+
		fte_ctm.SP_AA_S_CTM_PASTEUR_CAT+","+
		fte_ctm.SP_AA_S_CTM_SPONSORSHIP+","+
		fte_ctm.SP_AA_S_CTM_RES_REGION;
		v_index_act=index_act.parsevector();
		v_index_ctm=index_ctm.parsevector();
		//find ctm row
		if (Intersection(v_index_ctm,v_index_act).length==v_index_act.length)
		{
			WriteToLog("intersection index is :"+Intersection(v_index_ctm,v_index_act));
			//coef complexity factor
			if ( (fte_ctm.get(ctm_level_field) instanceof NUMBER) && fte_ctm.SP_AA_B_CTM_COMPL_FACTOR)
			{
				
				result_level=fte_ctm.get(ctm_level_field)/100;
				WriteToLog("coef complexity factor: "+result_level);
			}
			
			//laod In or Out
			if (fte_ctm.get(ctm_workload_field) instanceof NUMBER)
			{
				result_workload=fte_ctm.get(ctm_workload_field);
				WriteToLog("laod In or Out: "+result_workload);
			}
			//nb site per region (value in trial information pop-up)
			if (fte_ctm.SP_AA_B_CTM_NB_SITE_REGION)
			{

				WriteToLog("region is "+reg_res_site);
				WriteToLog("region res site :"+vec_region_field.get(reg_res_site));
				trial_nb_site=cur_act.get(vec_region_field.get(reg_res_site));
				
				if (trial_nb_site instanceof NUMBER)
				{
					result_nb_site=trial_nb_site;
					WriteToLog("nb site in this region: "+result_nb_site);
				}	
						
			}
			//div per res sites per region
			if ((cur_act.sp_cl_sml_get_split_ratio(res_site) instanceof NUMBER) && (cur_act.sp_cl_sml_get_split_ratio(res_site)>0) )
			{
				split_sit_reg=cur_act.sp_cl_sml_get_split_ratio(res_site);
				WriteToLog("split per res site in region: "+split_sit_reg);
			}
		
		result=(result_workload*result_nb_site*result_level)*split_sit_reg;
		WriteToLog("result :"+result);
		break;	
		}
	}

}

}

return result;
}
withoutlocking
{
Sp_get_workload_ctm_conc.exportfunction({"STRING","STRING","STRING"},"NUMBER");
}


function Sp_get_workload_ctm_prep(profile,res_site,Load_In)
{
var wbs_type="";
var ctm_profile="";
var study_lerdership="";
var pasteur_cat="";
var sponsorship="";
var region="";
var index_act="";
var index_ctm="";
var v_index_act;	
var v_index_ctm;
var ctm_level_field="";
var result_level = 1;
var result_workload=0;
var result_nb_site=1;
var result = 0;
var clSiteO="";
var phase="";
var reg_res_site="";
var trial_nb_site=1;
var split_sit_reg=1;
var trial_Id="";
var cur_act = (this instanceof OpxActivity ? this:this.ACTIVITY);
var inter01;
var inter02;

var vec_level=new vector("SP_AA_N_CTM_LEVEL_0",true
,"SP_AA_N_CTM_LEVEL_1",true
,"SP_AA_N_CTM_LEVEL_2",true
,"SP_AA_N_CTM_LEVEL_3",true
);

var vec_region_field =new vector(
"Greater Europe","SP_DA_N_CL_SITES_EU",
"Africa and Middle-East","SP_DA_N_CL_SITES_AFRICA",
"Asia Pacific","SP_DA_N_CL_SITES_ASIA",
"Latin America","SP_DA_N_CL_SITES_LATIN",
"North America","SP_DA_N_CL_SITES_AMERICA");


//find id level field

if (vec_level.get("SP_AA_N_CTM_LEVEL_"+this.get("SP_DA_CL_COMPL_MGT_LOG")))
{
ctm_level_field="SP_AA_N_CTM_LEVEL_"+this.get("SP_DA_CL_COMPL_MGT_LOG");	
}
	
if (cur_act instanceof OpxActivity)
{

//find a trial and trial KTIs
trial_Id=cur_act.sp_get_trial_id("");
trial_Id="OpxActivity".get(trial_Id);
WriteToLog("Trial is : "+trial_Id);

//find resource site region

if (res_site == "USA") 
{
res_site ="US";
}

if (res_site == "Africa & Middle East - Unspecified")
{
reg_res_site="Africa and Middle-East";
}

// find region (Africa and Middle-East,Asia Pacific,Greater Europe,Latin America)
clSiteO = "OpxBREAKDOWN_3".get(res_site);
if (clSiteO instanceof OpxBREAKDOWN_3)
{
reg_res_site=clSiteO.SP_NF_S_FTE_REGION;

	if (reg_res_site=="Europe")
	{
	reg_res_site="Greater Europe";	
	}
}

if (trial_Id instanceof OpxActivity)
{
wbs_type=cur_act.wbs_type.name;
ctm_profile=profile;
if (trial_Id.SP_RA_CL_STUDY_LEADERSHIP instanceof OpxSP_PT_CL_STD_LEADERSHIP)
{
study_lerdership=trial_Id.SP_RA_CL_STUDY_LEADERSHIP.name;	
}
if(trial_Id.SP_RA_CL_GROUP_CAT instanceof OpxSP_PT_CL_GROUP_CAT)
{
pasteur_cat=trial_Id.SP_RA_CL_GROUP_CAT.name;	
}
sponsorship=trial_Id.SP_RING_CL_SPONSORSHIP;
if(trial_Id.SP_RA_CL_CLIN_PHASE instanceof OpxSP_PT_CL_PHASE)	
{
phase=trial_Id.SP_RA_CL_CLIN_PHASE.name;	
}	
index_act=wbs_type+","+ctm_profile+","+study_lerdership+","+pasteur_cat+","+sponsorship+","+phase+","+reg_res_site;
WriteToLog("Index on activities :"+index_act);

// find # site per region
WriteToLog("region is "+reg_res_site);
WriteToLog("region res site :"+vec_region_field.get(reg_res_site));
trial_nb_site=cur_act.get(vec_region_field.get(reg_res_site));

if (trial_nb_site instanceof NUMBER)
{
	result_nb_site=trial_nb_site;
	WriteToLog("nb site in this region: "+result_nb_site);
}

	for (var fte_ctm in "OpxSP_PT_CL_CTM".findclass() )
	{
		if ((result_nb_site>= fte_ctm.SP_AA_N_CTM_SIT_REG_LOW) && (result_nb_site<= fte_ctm.SP_AA_N_CTM_SIT_REG_UP))
		{	
		WriteToLog("admin row is : "+fte_ctm);
		index_ctm =	fte_ctm.SP_AA_S_CTM_WBS_TYPE+","+
		fte_ctm.SP_RA_CTM_METRICS_RESOURCE.NAME+","+
		fte_ctm.SP_AA_S_CTM_STD_LEADER+","+
		fte_ctm.SP_AA_S_CTM_PASTEUR_CAT+","+
		fte_ctm.SP_AA_S_CTM_SPONSORSHIP+","+
		fte_ctm.SP_AA_S_CTM_PHASE+","+
		fte_ctm.SP_AA_S_CTM_RES_REGION;
		v_index_act=index_act.parsevector();
		v_index_ctm=index_ctm.parsevector();
		WriteToLog("admin row is : "+fte_ctm);
		//find ctm row
		inter01=Intersection(v_index_ctm,v_index_act);
		WriteToLog("intersection is :"+inter01);
		WriteToLog("Act vector is :"+v_index_act);
		
		if (inter01 instanceof Vector && v_index_ctm instanceof Vector &&  inter01.length == v_index_act.length )
		{
			// WriteToLog("intersection index is :"+Intersection(v_index_ctm,v_index_act));
			//coef complexity factor
			if ( (fte_ctm.get(ctm_level_field) instanceof NUMBER) && fte_ctm.SP_AA_B_CTM_COMPL_FACTOR)
			{
				
				result_level=fte_ctm.get(ctm_level_field)/100;
				WriteToLog("coef complexity factor: "+result_level);
			}
			//laod In or Out
			if (Load_In)
			{
				result_workload=(fte_ctm.get("SP_AA_N_CTM_DAY_MONTH_IN") * cur_act.SP_NF_CL_GET_ACTIVITY_DURATION) + 
				(fte_ctm.get("SP_AA_N_CTM_DAY_COUNT_REG_IN") * trial_Id.sp_cl_list_count_reg("SP_RING_CL_COUNTRY",reg_res_site));
				
				if (fte_ctm.SP_AA_B_CTM_NB_SITE_REGION)
				{
					
					result_workload=result_workload+ (fte_ctm.get("SP_AA_N_CTM_DAY_SITE_REG_IN")*result_nb_site);
							
				}
				else
				{
					result_workload=result_workload+(fte_ctm.get("SP_AA_N_CTM_DAY_SITE_REG_IN"));
				}
				WriteToLog("laod IN: "+result_workload);
			}
			else
			{
				result_workload=(fte_ctm.get("SP_AA_N_CTM_DAY_MONTH_OUT") * cur_act.SP_NF_CL_GET_ACTIVITY_DURATION) + 
				(fte_ctm.get("SP_AA_N_CTM_DAY_COUNT_REG_OUT") * trial_Id.sp_cl_list_count_reg("SP_RING_CL_COUNTRY",reg_res_site));
				
				if (fte_ctm.SP_AA_B_CTM_NB_SITE_REGION)
				{
					
					result_workload=result_workload+ (fte_ctm.get("SP_AA_N_CTM_DAY_SITE_REG_OUT")*result_nb_site);
							
				}
				else
				{
					result_workload=result_workload+(fte_ctm.get("SP_AA_N_CTM_DAY_SITE_REG_OUT"));
				}
				WriteToLog("laod out: "+result_workload);
			}
			//nb site per region (value in trial information pop-up)

			//div per res sites per region
			if ((cur_act.sp_cl_sml_get_split_ratio(res_site) instanceof NUMBER) && (cur_act.sp_cl_sml_get_split_ratio(res_site)>0) )
			{
				split_sit_reg=cur_act.sp_cl_sml_get_split_ratio(res_site);
				WriteToLog("split per res site in region: "+split_sit_reg);
			}
		
		result=result_workload * result_level * split_sit_reg;
		WriteToLog("Final Result :"+result);
		break;	
		}
		}
	}
	
}

}

return result;
}
withoutlocking
{
Sp_get_workload_ctm_prep.exportfunction({"STRING","STRING","BOOLEAN"},"NUMBER");
}

function Sp_get_workload_ctm_prcond(profile,res_site,Load_In)
{
var wbs_type="";
var ctm_profile="";
var study_lerdership="";
var pasteur_cat="";
var sponsorship="";
var region="";
var index_act="";
var index_ctm="";
var v_index_act;	
var v_index_ctm;
var ctm_level_field="";
var result_level = 1;
var result_workload=0;
var result_nb_site=1;
var result_nb_subject=1;
var result = 0;
var clSiteO="";
var phase="";
var reg_res_site="";
var trial_nb_site=1;
var trial_nb_subject=1;
var split_sit_reg=1;
var trial_Id="";
var cur_act = (this instanceof OpxActivity ? this:this.ACTIVITY);
var inter01;
var act_order_1=false;
var count_reg_1=false;
var sub_multi=0;
var site_multi=0;

var vec_level=new vector("SP_AA_N_CTM_LEVEL_0",true
,"SP_AA_N_CTM_LEVEL_1",true
,"SP_AA_N_CTM_LEVEL_2",true
,"SP_AA_N_CTM_LEVEL_3",true
);

var vec_nb_sites_field =new vector(
"Greater Europe","SP_DA_N_CL_SITES_EU",
"Africa and Middle-East","SP_DA_N_CL_SITES_AFRICA",
"Asia Pacific","SP_DA_N_CL_SITES_ASIA",
"Latin America","SP_DA_N_CL_SITES_LATIN",
"North America","SP_DA_N_CL_SITES_AMERICA");

var vec_nb_subjects_field =new vector(
"Greater Europe","SP_DA_N_CL_SUB_EU",
"Africa and Middle-East","SP_DA_N_CL_SUB_AFRICA",
"Asia Pacific","SP_DA_N_CL_SUB_ASIA",
"Latin America","SP_DA_N_CL_SUB_LATIN",
"North America","SP_DA_N_CL_SUB_AMERICA");
	
if (cur_act instanceof OpxActivity)
{
//find id level field
if (vec_level.get("SP_AA_N_CTM_LEVEL_"+cur_act.get("SP_DA_CL_COMPL_MGT_LOG")))
{
ctm_level_field="SP_AA_N_CTM_LEVEL_"+cur_act.get("SP_DA_CL_COMPL_MGT_LOG");	
}

//find a trial and trial KTIs
trial_Id=cur_act.sp_get_trial_id("");
trial_Id="OpxActivity".get(trial_Id);
WriteToLog("Trial is : "+trial_Id);

//find resource site region

if (res_site == "USA") 
{
res_site ="US";
}

// find region (Africa and Middle-East,Asia Pacific,Greater Europe,Latin America)
clSiteO = "OpxBREAKDOWN_3".get(res_site);
if (clSiteO instanceof OpxBREAKDOWN_3)
{
reg_res_site=clSiteO.SP_NF_S_FTE_REGION;

	if (reg_res_site=="Europe")
	{
	reg_res_site="Greater Europe";	
	}
}

if (res_site == "Africa & Middle East - Unspecified")
{
	reg_res_site ="Africa and Middle-East";
}

// found informations on trial level

if (trial_Id instanceof OpxActivity)
{
wbs_type=cur_act.wbs_type.name;
ctm_profile=profile;
if (trial_Id.SP_RA_CL_STUDY_LEADERSHIP instanceof OpxSP_PT_CL_STD_LEADERSHIP)
{
study_lerdership=trial_Id.SP_RA_CL_STUDY_LEADERSHIP.name;	
}
if(trial_Id.SP_RA_CL_GROUP_CAT instanceof OpxSP_PT_CL_GROUP_CAT)
{
pasteur_cat=trial_Id.SP_RA_CL_GROUP_CAT.name;	
}
sponsorship=trial_Id.SP_RING_CL_SPONSORSHIP;
if(trial_Id.SP_RA_CL_CLIN_PHASE instanceof OpxSP_PT_CL_PHASE)	
{
phase=trial_Id.SP_RA_CL_CLIN_PHASE.name;	
}	
index_act=wbs_type+","+ctm_profile+","+study_lerdership+","+pasteur_cat+","+sponsorship+","+phase+","+reg_res_site;
WriteToLog("Index on activities :"+index_act);

// find # site per region
WriteToLog("region is "+reg_res_site);
WriteToLog("region res site :"+vec_nb_sites_field.get(reg_res_site));
trial_nb_site=cur_act.get(vec_nb_sites_field.get(reg_res_site));

if (trial_nb_site instanceof NUMBER)
{
	result_nb_site=trial_nb_site;
	WriteToLog("nb site in this region: "+result_nb_site);
	
	if (result_nb_site>=50 && result_nb_site<=1000000)
	{
		site_multi=1.2;
	}
	else
	{
		if(result_nb_site>=31 && result_nb_site<=50)
		{
			site_multi=1.1;
		}
		else
		{
			if (result_nb_site>=16 && result_nb_site<=30)
			{
				site_multi=1.08;
			}
			else
			{
				if (result_nb_site>=6 && result_nb_site<=15)
				{
				site_multi=1.05;
				}
				else
				{
					if (result_nb_site>=1 && result_nb_site<=5)
					{
					site_multi=0.8;					
					}
					else
					{
					site_multi=0;							
					}
				}

			}
			
		}
	}
	WriteToLog("Sites multiplier is : "+site_multi);	
}

// find # subjects per region

WriteToLog("region is "+reg_res_site);
WriteToLog("region res site :"+vec_nb_subjects_field.get(reg_res_site));
trial_nb_subject=cur_act.get(vec_nb_subjects_field.get(reg_res_site));

if (trial_nb_subject instanceof NUMBER)
{
	result_nb_subject=trial_nb_subject;
	WriteToLog("nb subject in this region: "+result_nb_subject);
	if (result_nb_subject>=500 && result_nb_subject<=1000000)
	{
		sub_multi=1.1;
	}
	else
	{
		if(result_nb_subject>=301 && result_nb_subject<=500)
		{
			sub_multi=1.08;
		}
		else
		{
			if (result_nb_subject>=100 && result_nb_subject<=300)
			{
				sub_multi=1.05;
			}
			else
			{
				sub_multi=1;
			}	
		}
	}
WriteToLog("subject multiplier is : "+sub_multi);	
	
}

if (cur_act.SP_NF_B_ACT_ORDER_IS_ONE instanceof BOOLEAN )
{
act_order_1=cur_act.SP_NF_B_ACT_ORDER_IS_ONE;	
}

if (reg_res_site instanceof STRING && trial_Id.sp_cl_list_count_reg("SP_RING_CL_COUNTRY",reg_res_site) instanceof NUMBER && trial_Id.sp_cl_list_count_reg("SP_RING_CL_COUNTRY",reg_res_site)==1)
{
count_reg_1=true;
}


for (var fte_ctm in "OpxSP_PT_CL_CTM".findclass() )
{
	if (count_reg_1==fte_ctm.SP_AA_B_CTM_ONE_COUNT_REG && act_order_1==fte_ctm.SP_AA_B_CTM_ACT_ORDER_ONE && Load_In==fte_ctm.SP_AA_B_CTM_IS_OUT)
	{	
	index_ctm =	fte_ctm.SP_AA_S_CTM_WBS_TYPE+","+
	fte_ctm.SP_RA_CTM_METRICS_RESOURCE.NAME+","+
	fte_ctm.SP_AA_S_CTM_STD_LEADER+","+
	fte_ctm.SP_AA_S_CTM_PASTEUR_CAT+","+
	fte_ctm.SP_AA_S_CTM_SPONSORSHIP+","+
	fte_ctm.SP_AA_S_CTM_PHASE+","+
	fte_ctm.SP_AA_S_CTM_RES_REGION;
	v_index_act=index_act.parsevector();
	v_index_ctm=index_ctm.parsevector();

	//find ctm row
	inter01=Intersection(v_index_ctm,v_index_act);
	WriteToLog("intersection is :"+inter01);
	
	if (inter01 instanceof Vector && v_index_ctm instanceof Vector &&  inter01.length == v_index_act.length )
	{
		// WriteToLog("intersection index is :"+Intersection(v_index_ctm,v_index_act));
		//coef complexity factor
		if ( (fte_ctm.get(ctm_level_field) instanceof NUMBER) && fte_ctm.SP_AA_B_CTM_COMPL_FACTOR)
		{
			
			result_level=fte_ctm.get(ctm_level_field)/100;
			WriteToLog("coef complexity factor: "+result_level);
		}
		//laod In or Out

		result_workload=(fte_ctm.get("SP_AA_N_CTM_DAY_MONTH_IN") * cur_act.SP_NF_CL_GET_ACTIVITY_DURATION) 
		
		if (fte_ctm.SP_AA_B_CTM_NB_SITE_REGION)
		{
			result_workload=result_workload+ (fte_ctm.get("SP_AA_N_CTM_DAY_SITE_REG_IN")*result_nb_site);
			
			if (fte_ctm.SP_AA_B_CTM_ONE_COUNT_REG)
			{
				result_workload=result_workload+ ((fte_ctm.get("SP_AA_N_CTM_DAY_COUNT_REG_IN") * trial_Id.sp_cl_list_count_reg("SP_RING_CL_COUNTRY",reg_res_site)) * cur_act.SP_NF_CL_GET_ACTIVITY_DURATION) +
				(fte_ctm.get("SP_AA_N_CTM_DAY_TMF") * cur_act.SP_NF_CL_GET_ACTIVITY_DURATION);
			}
			else
			{
				result_workload=result_workload+ (fte_ctm.get("SP_AA_N_CTM_DAY_COUNT_REG_IN") *result_nb_site) +
				(fte_ctm.get("SP_AA_N_CTM_DAY_TMF") *result_nb_site);
			}
			
			result_workload=result_workload  * sub_multi * site_multi;
		}
		else
		{
			result_workload=result_workload+(fte_ctm.get("SP_AA_N_CTM_DAY_SITE_REG_IN"));
		}
		
		result_workload= result_workload * fte_ctm.get("SP_AA_N_CTM_MULT_OUT_ORDER")


	result= result_workload * result_level;
	WriteToLog("Final Result :"+result);
	break;	
	}
	}
}
}
}

return result;
}
withoutlocking
{
Sp_get_workload_ctm_prcond.exportfunction({"STRING","STRING","BOOLEAN"},"NUMBER");
}

function Sp_get_workload_ctm_conc_desc(profile,res_site)
{
var wbs_type="";
var ctm_profile="";
var study_lerdership="";
var pasteur_cat="";
var sponsorship="";
var index_act="";
var index_ctm="";
var v_index_act;	
var v_index_ctm;
var ctm_level_field="";
var result = "";
var clSiteO="";
var reg_res_site="";
var trial_Id="";
var cur_act = (this instanceof OpxActivity ? this:this.ACTIVITY);
	

if (cur_act instanceof OpxActivity)
{

//find a trial and trial KTIs
trial_Id=cur_act.sp_get_trial_id("");
trial_Id="OpxActivity".get(trial_Id);
WriteToLog("Trial is : "+trial_Id);

//find resource site region

if (res_site == "USA") 
{
res_site ="US";
}

if (res_site == "Africa & Middle East - Unspecified")
{
reg_res_site="Africa and Middle-East";
}

//Africa and Middle-East,Asia Pacific,Greater Europe,Latin America
clSiteO = "OpxBREAKDOWN_3".get(res_site);
if (clSiteO instanceof OpxBREAKDOWN_3)
{
reg_res_site=clSiteO.SP_NF_S_FTE_REGION;

if (reg_res_site=="Europe")
{
reg_res_site="Greater Europe";	
}
}

if (trial_Id instanceof OpxActivity)
{
wbs_type=cur_act.wbs_type.name;
ctm_profile=profile;
if (trial_Id.SP_RA_CL_STUDY_LEADERSHIP instanceof OpxSP_PT_CL_STD_LEADERSHIP)
{
study_lerdership=trial_Id.SP_RA_CL_STUDY_LEADERSHIP.name;	
}
if(trial_Id.SP_RA_CL_GROUP_CAT instanceof OpxSP_PT_CL_GROUP_CAT)
{
pasteur_cat=trial_Id.SP_RA_CL_GROUP_CAT.name;	
}
sponsorship=trial_Id.SP_RING_CL_SPONSORSHIP;
index_act=wbs_type+","+ctm_profile+","+study_lerdership+","+pasteur_cat+","+sponsorship+","+reg_res_site;
WriteToLog("Index on activities :"+index_act);

	for (var fte_ctm in "OpxSP_PT_CL_CTM".findclass())
	{
		index_ctm =	fte_ctm.SP_AA_S_CTM_WBS_TYPE+","+
		fte_ctm.SP_RA_CTM_METRICS_RESOURCE.NAME+","+
		fte_ctm.SP_AA_S_CTM_STD_LEADER+","+
		fte_ctm.SP_AA_S_CTM_PASTEUR_CAT+","+
		fte_ctm.SP_AA_S_CTM_SPONSORSHIP+","+
		fte_ctm.SP_AA_S_CTM_RES_REGION;
		v_index_act=index_act.parsevector();
		v_index_ctm=index_ctm.parsevector();
		//find ctm row
		if (Intersection(v_index_ctm,v_index_act).length==v_index_act.length)
		{
			
		
		result=fte_ctm.get("SP_AA_S_CTM_ALLOC_DESC");
		WriteToLog("result :"+result);
		break;	
		}
	}

}



}

return result;
}
withoutlocking
{
Sp_get_workload_ctm_conc_desc.exportfunction({"STRING","STRING"},"STRING");
}

function Sp_get_workload_ctm_prep_desc(profile,res_site)
{
var wbs_type="";
var ctm_profile="";
var study_lerdership="";
var pasteur_cat="";
var sponsorship="";
var region="";
var index_act="";
var index_ctm="";
var v_index_act;	
var v_index_ctm;
var ctm_level_field="";
var result = "";
var clSiteO="";
var phase="";
var reg_res_site="";
var trial_nb_site=1;
var result_nb_site;
var trial_Id="";
var cur_act = (this instanceof OpxActivity ? this:this.ACTIVITY);
var inter01;

var vec_region_field =new vector(
"Greater Europe","SP_DA_N_CL_SITES_EU",
"Africa and Middle-East","SP_DA_N_CL_SITES_AFRICA",
"Asia Pacific","SP_DA_N_CL_SITES_ASIA",
"Latin America","SP_DA_N_CL_SITES_LATIN",
"North America","SP_DA_N_CL_SITES_AMERICA");

if (cur_act instanceof OpxActivity)
{

//find a trial and trial KTIs
trial_Id=cur_act.sp_get_trial_id("");
trial_Id="OpxActivity".get(trial_Id);
WriteToLog("Trial is : "+trial_Id);

//find resource site region

if (res_site == "USA") 
{
res_site ="US";
}

// find region (Africa and Middle-East,Asia Pacific,Greater Europe,Latin America)
clSiteO = "OpxBREAKDOWN_3".get(res_site);
if (clSiteO instanceof OpxBREAKDOWN_3)
{
reg_res_site=clSiteO.SP_NF_S_FTE_REGION;

	if (reg_res_site=="Europe")
	{
	reg_res_site="Greater Europe";	
	}
}

if (trial_Id instanceof OpxActivity)
{
wbs_type=cur_act.wbs_type.name;
ctm_profile=profile;
if (trial_Id.SP_RA_CL_STUDY_LEADERSHIP instanceof OpxSP_PT_CL_STD_LEADERSHIP)
{
study_lerdership=trial_Id.SP_RA_CL_STUDY_LEADERSHIP.name;	
}
if(trial_Id.SP_RA_CL_GROUP_CAT instanceof OpxSP_PT_CL_GROUP_CAT)
{
pasteur_cat=trial_Id.SP_RA_CL_GROUP_CAT.name;	
}
sponsorship=trial_Id.SP_RING_CL_SPONSORSHIP;
if(trial_Id.SP_RA_CL_CLIN_PHASE instanceof OpxSP_PT_CL_PHASE)	
{
phase=trial_Id.SP_RA_CL_CLIN_PHASE.name;	
}	
index_act=wbs_type+","+ctm_profile+","+study_lerdership+","+pasteur_cat+","+sponsorship+","+phase+","+reg_res_site;
WriteToLog("Index on activities :"+index_act);

// find # site per region
WriteToLog("region is "+reg_res_site);
WriteToLog("region res site :"+vec_region_field.get(reg_res_site));
trial_nb_site=cur_act.get(vec_region_field.get(reg_res_site));

if (trial_nb_site instanceof NUMBER)
{
	result_nb_site=trial_nb_site;
	WriteToLog("nb site in this region: "+result_nb_site);
}

	for (var fte_ctm in "OpxSP_PT_CL_CTM".findclass() where ((result_nb_site>= fte_ctm.SP_AA_N_CTM_SIT_REG_LOW) && (result_nb_site<= fte_ctm.SP_AA_N_CTM_SIT_REG_UP)))
	{
		index_ctm =	fte_ctm.SP_AA_S_CTM_WBS_TYPE+","+
		fte_ctm.SP_RA_CTM_METRICS_RESOURCE.NAME+","+
		fte_ctm.SP_AA_S_CTM_STD_LEADER+","+
		fte_ctm.SP_AA_S_CTM_PASTEUR_CAT+","+
		fte_ctm.SP_AA_S_CTM_SPONSORSHIP+","+
		fte_ctm.SP_AA_S_CTM_PHASE+","+
		fte_ctm.SP_AA_S_CTM_RES_REGION;
		v_index_act=index_act.parsevector();
		v_index_ctm=index_ctm.parsevector();
		//find ctm row
		inter01=Intersection(v_index_ctm,v_index_act);
		
		if (inter01 instanceof Vector && v_index_ctm instanceof Vector &&  inter01.length == v_index_act.length )
		{
		result=fte_ctm.get("SP_AA_S_CTM_ALLOC_DESC");
		break;	
		}	
	}

}



}

return result;
}
withoutlocking
{
Sp_get_workload_ctm_prep_desc.exportfunction({"STRING","STRING"},"STRING");
}




function Sp_get_workload_ctm_prcond_desc(profile,res_site)
{
var wbs_type="";
var ctm_profile="";
var study_lerdership="";
var pasteur_cat="";
var sponsorship="";
var region="";
var index_act="";
var index_ctm="";
var v_index_act;	
var v_index_ctm;
var ctm_level_field="";
var result_level = 1;
var result_workload=0;
var result_nb_site=1;
var result_nb_subject=1;
var result = "";
var clSiteO="";
var phase="";
var reg_res_site="";
var trial_nb_site=1;
var trial_nb_subject=1;
var trial_Id="";
var cur_act = (this instanceof OpxActivity ? this:this.ACTIVITY);
var inter01;
var act_order_1=false;
var count_reg_1=false;


var vec_nb_sites_field =new vector(
"Greater Europe","SP_DA_N_CL_SITES_EU",
"Africa and Middle-East","SP_DA_N_CL_SITES_AFRICA",
"Asia Pacific","SP_DA_N_CL_SITES_ASIA",
"Latin America","SP_DA_N_CL_SITES_LATIN",
"North America","SP_DA_N_CL_SITES_AMERICA");

var vec_nb_subjects_field =new vector(
"Greater Europe","SP_DA_N_CL_SUB_EU",
"Africa and Middle-East","SP_DA_N_CL_SUB_AFRICA",
"Asia Pacific","SP_DA_N_CL_SUB_ASIA",
"Latin America","SP_DA_N_CL_SUB_LATIN",
"North America","SP_DA_N_CL_SUB_AMERICA");

if (cur_act instanceof OpxActivity)
{

//find a trial and trial KTIs
trial_Id=cur_act.sp_get_trial_id("");
trial_Id="OpxActivity".get(trial_Id);
WriteToLog("Trial is : "+trial_Id);

//find resource site region

if (res_site == "USA") 
{
res_site ="US";
}

// find region (Africa and Middle-East,Asia Pacific,Greater Europe,Latin America)
clSiteO = "OpxBREAKDOWN_3".get(res_site);
if (clSiteO instanceof OpxBREAKDOWN_3)
{
reg_res_site=clSiteO.SP_NF_S_FTE_REGION;

	if (reg_res_site=="Europe")
	{
	reg_res_site="Greater Europe";	
	}
}

// found informations on trial level

if (trial_Id instanceof OpxActivity)
{
wbs_type=cur_act.wbs_type.name;
ctm_profile=profile;
if (trial_Id.SP_RA_CL_STUDY_LEADERSHIP instanceof OpxSP_PT_CL_STD_LEADERSHIP)
{
study_lerdership=trial_Id.SP_RA_CL_STUDY_LEADERSHIP.name;	
}
if(trial_Id.SP_RA_CL_GROUP_CAT instanceof OpxSP_PT_CL_GROUP_CAT)
{
pasteur_cat=trial_Id.SP_RA_CL_GROUP_CAT.name;	
}
sponsorship=trial_Id.SP_RING_CL_SPONSORSHIP;
if(trial_Id.SP_RA_CL_CLIN_PHASE instanceof OpxSP_PT_CL_PHASE)	
{
phase=trial_Id.SP_RA_CL_CLIN_PHASE.name;	
}	
index_act=wbs_type+","+ctm_profile+","+study_lerdership+","+pasteur_cat+","+sponsorship+","+phase+","+reg_res_site;
WriteToLog("Index on activities :"+index_act);

// find # site per region
WriteToLog("region is "+reg_res_site);
WriteToLog("region res site :"+vec_nb_sites_field.get(reg_res_site));
trial_nb_site=cur_act.get(vec_nb_sites_field.get(reg_res_site));

if (trial_nb_site instanceof NUMBER)
{
	result_nb_site=trial_nb_site;
	WriteToLog("nb site in this region: "+result_nb_site);
	
}

// find # subjects per region

WriteToLog("region is "+reg_res_site);
WriteToLog("region res site :"+vec_nb_subjects_field.get(reg_res_site));
trial_nb_subject=cur_act.get(vec_nb_subjects_field.get(reg_res_site));

if (trial_nb_subject instanceof NUMBER)
{
	result_nb_subject=trial_nb_subject;
	WriteToLog("nb subject in this region: "+result_nb_subject);
}

if (cur_act.SP_NF_B_ACT_ORDER_IS_ONE instanceof BOOLEAN )
{
act_order_1=cur_act.SP_NF_B_ACT_ORDER_IS_ONE;	
}

if (trial_Id.sp_cl_list_count_reg("SP_RING_CL_COUNTRY",reg_res_site) instanceof NUMBER && trial_Id.sp_cl_list_count_reg("SP_RING_CL_COUNTRY",reg_res_site)==1)
{
count_reg_1=true;
}

for (var fte_ctm in "OpxSP_PT_CL_CTM".findclass() where (count_reg_1==fte_ctm.SP_AA_B_CTM_ONE_COUNT_REG && act_order_1==fte_ctm.SP_AA_B_CTM_ACT_ORDER_ONE))
{
	
index_ctm =	fte_ctm.SP_AA_S_CTM_WBS_TYPE+","+
fte_ctm.SP_RA_CTM_METRICS_RESOURCE.NAME+","+
fte_ctm.SP_AA_S_CTM_STD_LEADER+","+
fte_ctm.SP_AA_S_CTM_PASTEUR_CAT+","+
fte_ctm.SP_AA_S_CTM_SPONSORSHIP+","+
fte_ctm.SP_AA_S_CTM_PHASE+","+
fte_ctm.SP_AA_S_CTM_RES_REGION;
v_index_act=index_act.parsevector();
v_index_ctm=index_ctm.parsevector();

//find ctm row
inter01=Intersection(v_index_ctm,v_index_act);
	
if (inter01 instanceof Vector && v_index_ctm instanceof Vector &&  inter01.length == v_index_act.length )
{

result=fte_ctm.get("SP_AA_S_CTM_ALLOC_DESC");
break;	
}
	
}	
}



}

return result;
}
withoutlocking
{
Sp_get_workload_ctm_prcond_desc.exportfunction({"STRING","STRING"},"STRING");
}


function Sp_get_workload_ctm_prcond_inter(profile,res_site,Load_In)
{
	if (res_site == "FR - Marcy l'Etoile")
	{	
		var total_load_cal1=this.Sp_get_workload_ctm_prcond(profile,res_site,Load_In);
		var total_load_cal2=this.Sp_get_workload_ctm_prcond(profile,"Africa & Middle East - Unspecified",Load_In);
		return	total_load_cal1 + total_load_cal2;										
	}
	else
	{
		return this.Sp_get_workload_ctm_prcond(profile,res_site,Load_In);	
	}
}

withoutlocking
{
Sp_get_workload_ctm_prcond_inter.exportfunction({"STRING","STRING","BOOLEAN"},"NUMBER");
}

function Sp_get_workload_ctm_conc_inter(profile,res_site,Load_In)
{
	if (res_site == "FR - Marcy l'Etoile")
	{	
		var total_load_cal1=this.Sp_get_workload_ctm_conc(profile,res_site,Load_In);
		var total_load_cal2=this.Sp_get_workload_ctm_conc(profile,"Africa & Middle East - Unspecified",Load_In);
		return	total_load_cal1 + total_load_cal2;										
	}
	else
	{
		return this.Sp_get_workload_ctm_conc(profile,res_site,Load_In);	
	}
}

withoutlocking
{
Sp_get_workload_ctm_conc_inter.exportfunction({"STRING","STRING","STRING"},"NUMBER");
}


function Sp_get_workload_ctm_prep_inter(profile,res_site,Load_In)
{
	if (res_site == "FR - Marcy l'Etoile")
	{	
		var total_load_cal1=this.Sp_get_workload_ctm_prep(profile,res_site,Load_In);
		var total_load_cal2=this.Sp_get_workload_ctm_prep(profile,"Africa & Middle East - Unspecified",Load_In);
		return	total_load_cal1 + total_load_cal2;										
	}
	else
	{
		return this.Sp_get_workload_ctm_prep(profile,res_site,Load_In);	
	}
}

withoutlocking
{
Sp_get_workload_ctm_prep_inter.exportfunction({"STRING","STRING","BOOLEAN"},"NUMBER");
}


// Functions used for apply equations in global batch

function sp_cl_default_res_sites(){
	                                                                                                    
var act = this;
var trial_index;
var trial;
var hash_site=new hashtable("String");
var geo_area=new vector();
var prj_site;
var def_res_site;
var res_site_vec=new vector();

if (act instanceof OpxActivity)
{
	
trial_index=act.sp_get_trial_id("");
trial="OpxActivity".get(trial_index);   

if (trial instanceof OpxActivity)
{
geo_area=trial.SP_NF_S_GEO_AREA.parsevector();
	for (var def_site in "OpxSP_PT_CL_RES_SITE" where ( def_site.SP_AA_S_CL_INIT_TYPE=="Trial" &&
	(def_site.SP_AA_S_CL_RS_WBS_TYPE !="") &&
	(act.wbs_type instanceof OpxWBS_TYPE) &&
	(def_site.SP_AA_S_CL_RS_WBS_TYPE.parsevector().position(act.wbs_type.name) instanceof NUMBER )&&
	act.get(def_site.SP_AA_S_CL_ID_ACT_FIELD)=="" && 
	(geo_area.length >0) &&
	(geo_area.position(def_site.SP_AA_S_CL_GEOG_AREA) instanceof NUMBER) &&
	(def_site.SP_AA_S_CL_SITE_DEF instanceof STRING && def_site.SP_AA_S_CL_SITE_DEF!="") &&
	!((def_site.SP_AA_S_CL_PROFIL_SITE=="CLIN-GCD-MWR" || def_site.SP_AA_S_CL_PROFIL_SITE=="CLIN-GCD-EDS") && geo_area.length>=2)) )
	{
		//if (def_site.SP_AA_S_CL_PLATFORM=="GCD"(for DOC) && geo_area.length>=2) Changing the if condition as it is not going in else loop
		if ((def_site.SP_AA_S_CL_PROFIL_SITE=="CLIN-GCD-CDC" || def_site.SP_AA_S_CL_PROFIL_SITE=="CLIN-GCD-RM") && geo_area.length>=2)
		{
			if (geo_area.position("North America") instanceof NUMBER)
			{
				hash_site.set(def_site.SP_AA_S_CL_ID_ACT_FIELD,"USA")
			}
			else
			{
				if (def_site.SP_AA_S_CL_PROFIL_SITE=="CLIN-GCD-RM")
				{
					hash_site.set(def_site.SP_AA_S_CL_ID_ACT_FIELD,"France")	
				}
				else
				{
					hash_site.set(def_site.SP_AA_S_CL_ID_ACT_FIELD,"USA")
				}
			}				
		}
		else
		{
			if (hash_site.get(def_site.SP_AA_S_CL_ID_ACT_FIELD) instanceof STRING)
			{
				def_res_site=hash_site.get(def_site.SP_AA_S_CL_ID_ACT_FIELD)+","+def_site.SP_AA_S_CL_SITE_DEF;
				hash_site.set(def_site.SP_AA_S_CL_ID_ACT_FIELD,def_res_site);
			}
			else
			{
				hash_site.set(def_site.SP_AA_S_CL_ID_ACT_FIELD,def_site.SP_AA_S_CL_SITE_DEF)
			}
		}
	}
	
	for (var def_site in "OpxSP_PT_CL_RES_SITE" where ( def_site.SP_AA_S_CL_INIT_TYPE=="NonTrial" &&
	(def_site.SP_AA_S_CL_RS_WBS_TYPE !="") &&
	(act.wbs_type instanceof OpxWBS_TYPE) &&
	(def_site.SP_AA_S_CL_RS_WBS_TYPE.parsevector().position(act.wbs_type.name) instanceof NUMBER )&&
	act.get(def_site.SP_AA_S_CL_ID_ACT_FIELD)=="" && 
	act.project.SP_AA_S_PJT_LEADER_SITE==def_site.SP_AA_S_CL_PRJ_SITE &&
	(geo_area.length >=2) &&
	(def_site.SP_AA_S_CL_SITE_DEF instanceof STRING && def_site.SP_AA_S_CL_SITE_DEF!="") &&
	(def_site.SP_AA_S_CL_PROFIL_SITE=="CLIN-GCD-EDS" || def_site.SP_AA_S_CL_PROFIL_SITE=="CLIN-GCD-MWR" || def_site.SP_AA_S_CL_PROFIL_SITE=="CLIN-GCD-TRA")))
	{
		/*in the above for loop, we hardcode the value of resources(CLIN-GCD-EDS,CLIN-GCD-MWR,CLIN-GCD-TRA) previously it was "MW"*/
		if (hash_site.get(def_site.SP_AA_S_CL_ID_ACT_FIELD) instanceof STRING)
		{
			def_res_site=hash_site.get(def_site.SP_AA_S_CL_ID_ACT_FIELD)+","+def_site.SP_AA_S_CL_SITE_DEF;
			hash_site.set(def_site.SP_AA_S_CL_ID_ACT_FIELD,def_res_site);
		}
		else
		{
			hash_site.set(def_site.SP_AA_S_CL_ID_ACT_FIELD,def_site.SP_AA_S_CL_SITE_DEF)
		}
	}
		
}
else
{
	for (var def_site in "OpxSP_PT_CL_RES_SITE" where ( def_site.SP_AA_S_CL_INIT_TYPE=="NonTrial" &&
	(def_site.SP_AA_S_CL_RS_WBS_TYPE !="") &&
	(act.wbs_type instanceof OpxWBS_TYPE) &&
	(def_site.SP_AA_S_CL_RS_WBS_TYPE.parsevector().position(act.wbs_type.name) instanceof NUMBER) &&
	act.project.SP_AA_S_PJT_LEADER_SITE==def_site.SP_AA_S_CL_PRJ_SITE &&
	act.get(def_site.SP_AA_S_CL_ID_ACT_FIELD)=="" && 
	(def_site.SP_AA_S_CL_SITE_DEF instanceof STRING && def_site.SP_AA_S_CL_SITE_DEF!="")	) )
	{
		if (hash_site.get(def_site.SP_AA_S_CL_ID_ACT_FIELD) instanceof STRING)
		{
			def_res_site=hash_site.get(def_site.SP_AA_S_CL_ID_ACT_FIELD)+","+def_site.SP_AA_S_CL_SITE_DEF;
			hash_site.set(def_site.SP_AA_S_CL_ID_ACT_FIELD,def_res_site);
		}
		else
		{
			hash_site.set(def_site.SP_AA_S_CL_ID_ACT_FIELD,def_site.SP_AA_S_CL_SITE_DEF)
		}
	}		
}	

//resource site fields initiate	
withoutlocking
{
for (var hs in hash_site)
{
act.set(hs,hash_site.get(hs).parsevector().removeduplicates().join(","));
}	
}


}
return true;
}
	
withoutlocking
{
sp_cl_default_res_sites.exportfunction();
}


//function for clinical cost

function sp_calc_CRA_IN_DAY(unused)
{
	var result=0;
	var res_f="OpxResource".get("CLIN-GRTM-LCRA");
	var list_eq;
	var vec_act=new vector();
	var trial_Id=this.sp_get_trial_id("");
	var trial="OpxActivity".get(trial_Id);
	if (trial instanceOf OpxActivity)
	{
		if (res_f instanceof OpxResource)
		{
			list_eq=res_f.get("r._PE_RA_EQUA_RES._PE_PT_EQUA_EQUATION");
			for (var eq in list_eq where eq.get("_PE_AA_EQUA_ACTIVE"))
			{
				vec_act.push(eq.get("_PE_DA_EQUA_FILTERFIELD1"));
			}
			fromobject(trial)
			{
				for (var each in "OpxActivity".findclass() where (vec_act.position(each.wbs_type.name) instanceof NUMBER) )
				{
					for (var eq_eval in list_eq where (eq_eval.get("_PE_DA_EQUA_FILTERFIELD1")==each.WBS_TYPE.NAME && each.CallBooleanFormula(eq_eval._PE_AA_EQUA_BASEFILTER) ))
					{
						if (each.get(eq_eval.get("_PE_DA_EQUA_FIELD4")+"_IN") instanceof NUMBER)
						{
							result=result+each.get(eq_eval.get("_PE_DA_EQUA_FIELD4")+"_IN");
						}
					}
				}
			}
		}	
	}
	
	return result;
}

withoutlocking
{
	sp_calc_CRA_IN_DAY.exportfunction({"STRING"},"NUMBER");
}

//Trial control 

var slot;
var size_slot;

function ClinicalCountryNotEmpty(oV, nV)
{
	var ctl=nV;
	if (ctl=="" || ctl==undefined)
	{
		alert("Country (Clin Trial) field cannot be empty");
		CancelCurrentTransaction();
	}

}


function Size_cl_scienceNotEmpty(oV, nV)
{
	var ctl=nV;
	if (ctl=="" || ctl==undefined)
	{
		alert("Size (Clinical Sciences) field cannot be empty");
		CancelCurrentTransaction();
	}

}

function ClInitialyzeResSite(oV, nV)
{
var ctl=nV;
var old_v=oV;
var cmpt=0;

	if ((old_v=="" && ctl!="" && (this Instanceof OpxActivity) && this.SP_NF_CL_TRIAL))
	{
		
		fromObject(this)
		{
			for (var act in "OpxActivity".findclass() where (act.wbs_type Instanceof OpxWBS_TYPE) )
			{
				cmpt=cmpt+1;
				act.sp_cl_default_res_sites();
			}
		}
	if (cmpt>0)
	{
	alert("Clinical Resourse sites by default are initialized within Trial :"+this.SP_NF_CL_TRIAL_CODE);
	}	
	}

}

slot ="OpxActivity".findClass().getSlot("SP_RING_CL_COUNTRY");
if ( slot Instanceof objectattribute)
{
	slot.modifybeforeMethod = ClinicalCountryNotEmpty;
	slot.modifyafterMethod = ClInitialyzeResSite;
}

size_slot="OpxActivity".findClass().getSlot("SP_AA_S_ACT_CL_SIZE");

if ( size_slot Instanceof objectattribute)
{
	size_slot.modifybeforeMethod = Size_cl_scienceNotEmpty;
}


function sp_lag_during_not_allow(oV, nV)
{
	var ctl=nV;
	if ((oV=="Extendible" || oV=="Fixed dates")&& ctl=="Lag-during" && ((this instanceOf OpxFORECAST_EXPENDITURE) && this.ACTIVITY.SP_NF_B_CLIN_ACT) )
	{
		alert("Lag-during value in Duration Computation field is not allowed for the manual cost");
		CancelCurrentTransaction();
	}

}

var dur_com_slot="OpxFORECAST_EXPENDITURE".findClass().getSlot("DURATION_COMPUTATION");

if ( dur_com_slot Instanceof objectattribute)
{
	dur_com_slot.modifybeforeMethod = sp_lag_during_not_allow;
}

function sp_cl_color_ring_at_gantt(slot)
{
var yellow = Color(245,245,220);
var arg_stat ="OpxActivity".findClass().getSlot("SP_RING_CL_STATISTICIAN");
var arg_prog ="OpxActivity".findClass().getSlot("SP_RING_CL_PROGRAMMER");
var arg_cs ="OpxActivity".findClass().getSlot("SP_RING_CL_CTL_CS");
var arg_cpm ="OpxActivity".findClass().getSlot("SP_RING_CL_CPM");
var arg_cc ="OpxActivity".findClass().getSlot("SP_RING_CL_CPM_CC");
var arg_dm ="OpxActivity".findClass().getSlot("SP_RING_CL_DATA_MANAGER"); 
var arg_cdl ="OpxActivity".findClass().getSlot("SP_RING_CL_CDL"); 
var arg_ta ="OpxActivity".findClass().getSlot("SP_RING_CL_TRIAL_ANALYST");
var arg_mw ="OpxActivity".findClass().getSlot("SP_RING_CL_MED_WRITER");
var arg_cd ="OpxActivity".findClass().getSlot("SP_RING_CL_CLINDOC");
var arg_tr ="OpxActivity".findClass().getSlot("SP_RING_CL_TRANSLATOR");
var arg_edoc ="OpxActivity".findClass().getSlot("SP_RING_CL_EDOC");
var arg_ctm ="OpxActivity".findClass().getSlot("SP_RING_CL_CTM");
var arg_cra ="OpxActivity".findClass().getSlot("SP_RING_CL_CRA");
var arg_lc ="OpxActivity".findClass().getSlot("SP_RING_CL_LOG_COORD");
var arg_copm ="OpxActivity".findClass().getSlot("SP_RING_CL_COPM");
var arg_mtl ="OpxActivity".findClass().getSlot("SP_RING_CL_GMA_MTL");
var arg_pmsl ="OpxActivity".findClass().getSlot("SP_RING_CL_PMSL");
var arg_mgr ="OpxActivity".findClass().getSlot("SP_RING_CL_REC_MGR");
// clinical re-org new profiles:
var arg_cpc_cpl ="OpxActivity".findClass().getSlot("SP_RING_CL_CPC_CPL");
var arg_gto_gtom ="OpxActivity".findClass().getSlot("SP_RING_CL_GTO_GTOM");
var arg_grtm_rtm ="OpxActivity".findClass().getSlot("SP_RING_CL_GRTM_RTM");
var arg_gto_log ="OpxActivity".findClass().getSlot("SP_RING_CL_GTO_LOG");
var arg_CPMO_CC ="OpxActivity".findClass().getSlot("SP_RING_CL_CPMO_CC");
var arg_grtm_lcra ="OpxActivity".findClass().getSlot("SP_RING_CL_GRTM_LCRA");
var arg_mwd="OpxActivity".findClass().getSlot("SP_RING_CL_MWD");

if (slot Instanceof objectattribute)
{
	if ( slot.descriptor.Name==arg_stat.descriptor.Name && this.SP_NF_B_CL_IS_STAT)
	{
		return yellow;
	}
	if ( slot.descriptor.Name==arg_cdl.descriptor.Name && this.SP_NF_B_CL_IS_CDL)
	{
		return yellow;
	}
	if ( slot.descriptor.Name==arg_prog.descriptor.Name && this.SP_NF_B_CL_IS_PROG)
	{
		return yellow;
	}
	if ( slot.descriptor.Name==arg_cs.descriptor.Name && this.SP_NF_B_CL_IS_CTL)
	{
		return yellow;
	}
		if ( slot.descriptor.Name==arg_cpm.descriptor.Name && this.SP_NF_B_CL_IS_CPM)
	{
		return yellow;
	}
		if ( slot.descriptor.Name==arg_cc.descriptor.Name && this.SP_NF_B_CL_IS_C_COORD)
	{
		return yellow;
	}
		if ( slot.descriptor.Name==arg_dm.descriptor.Name && this.SP_NF_B_CL_IS_DATA_MGR)
	{
		return yellow;
	}
		if ( slot.descriptor.Name==arg_ta.descriptor.Name && this.SP_NF_B_CL_IS_ANALYST)
	{
		return yellow;
	}
		if ( slot.descriptor.Name==arg_mw.descriptor.Name && this.SP_NF_B_CL_IS_LOG_MED_WRT)
	{
		return yellow;
	}
		if ( slot.descriptor.Name==arg_cd.descriptor.Name && this.SP_NF_B_CL_IS_DOCC)
	{
		return yellow;
	}
		if ( slot.descriptor.Name==arg_tr.descriptor.Name && this.SP_NF_B_CL_IS_TRANSLAT)
	{
		return yellow;
	}
		if ( slot.descriptor.Name==arg_edoc.descriptor.Name && this.SP_NF_B_CL_IS_EDOC)
	{
		return yellow;
	}
		if ( slot.descriptor.Name==arg_ctm.descriptor.Name && this.SP_NF_B_CL_IS_CTM)
	{
		return yellow;
	}
		if ( slot.descriptor.Name==arg_cra.descriptor.Name && this.SP_NF_B_CL_IS_CRA)
	{
		return yellow;
	}
		if ( slot.descriptor.Name==arg_lc.descriptor.Name && this.SP_NF_B_CL_IS_LOG_COORD)
	{
		return yellow;
	}
		if ( slot.descriptor.Name==arg_copm.descriptor.Name && this.SP_NF_B_CL_IS_PPO_COPM)
	{
		return yellow;
	}
		if ( slot.descriptor.Name==arg_mtl.descriptor.Name && this.SP_NF_B_CL_IS_GMA_MTL)
	{
		return yellow;
	}
		if ( slot.descriptor.Name==arg_pmsl.descriptor.Name && this.SP_NF_B_CL_IS_PMSL)
	{
		return yellow;
	}
		if ( slot.descriptor.Name==arg_mgr.descriptor.Name && this.SP_NF_B_CL_IS_REC_MGR)
	{
		return yellow;
	}
	
	if ( slot.descriptor.Name==arg_cpc_cpl.descriptor.Name && this.SP_NF_B_CL_IS_CPCCPL)
	{
		return yellow;
	}
	if ( slot.descriptor.Name==arg_gto_gtom.descriptor.Name && this.SP_NF_B_CL_IS_GTOGTOM)
	{
		return yellow;
	}
	if ( slot.descriptor.Name==arg_grtm_rtm.descriptor.Name && this.SP_NF_B_CL_IS_GRTMRTM)
	{
		return yellow;
	}
	if ( slot.descriptor.Name==arg_gto_log.descriptor.Name && this.SP_NF_B_CL_IS_GTOLOG)
	{
		return yellow;
	}
	if ( slot.descriptor.Name==arg_CPMO_CC.descriptor.Name && this.SP_NF_B_CL_IS_CPMOCC)
	{
		return yellow;
	}
	if ( slot.descriptor.Name==arg_grtm_lcra.descriptor.Name && this.SP_NF_B_CL_IS_GRTMLCRA)
	{
		return yellow;
	}
	if ( slot.descriptor.Name==arg_mwd.descriptor.Name && this.SP_NF_B_CL_IS_MWD)
	{
		return yellow;
	}
}	


}

function sp_get_outsourced_profile_desc()
{
	var cur_act=this;
	var profile_desc=new vector();
	var result="";
	if (cur_act instanceof Opxactivity && cur_act.SP_NF_B_OBS_CLIN_ACT)
	{
		fromobject(cur_act)
		{
			for (var act in "OpxActivity".findclass() where act.SP_NF_B_OBS_CLIN_ACT)
			{
				for (var ph in act.ALLOCATIONS where ((ph.resource instanceof OpxRESOURCE ) && (ph.COST_ACCOUNT.NAME=="FTE_METRICS" || ph.COST_ACCOUNT.NAME=="FTE_ESTIMATED")))
				{	
					if (ph.SP_NF_CL_OUTSOURCED_PH && !(profile_desc.position(ph.resource.description) instanceof NUMBER))
					{
						profile_desc.push(ph.resource.description);
					}
				}
			}
		}
		

	}
	profile_desc=profile_desc.sort("<");
	if (profile_desc.length>0)
	{
	result=profile_desc.JOIN(",");
	}
	
	return result;
}
sp_get_outsourced_profile_desc.exportfunction("","STRING");


function sp_clinical_outsourced_reader()
{
	var o_ph = this
	var o_act = o_ph.ACTIVITY;
	var o_res = o_ph.RES;
	var field_name = SP_CLIN_MAP_RES_INFO(o_res);
	var field_res = o_act.get(field_name);
	// Default return is false
	var result = false;

	if (field_res!="" && field_res!=undefined) 
	{
		for (var each in field_res.parselist())
		{
			// If at least one resource is outsourced return true
			if (each == "Outsourced")
			{
				result = true;
				break;
			}
		}
	}
	return result;
}

function sp_clinical_outsourced_modifier(new)
{
	var o_ph = this
	var o_act = o_ph.ACTIVITY;
	var o_res = o_ph.RES;
	var field_name = SP_CLIN_MAP_RES_INFO(o_res);
	var field_res = o_act.get(field_name);
	var vresult = new vector();
	var vbool = false;
	var result;

	if ( (field_name!="" && field_name!=undefined) &&   (o_ph !=undefined && o_ph!="" && ((o_ph Instanceof OpxHoursAndExpendituresSummary) || (o_ph Instanceof OpxAllocation))) && o_act instanceof OpxActivity && (field_res!="" && field_res!=undefined))
	{
		if (field_res!="" && field_res!=undefined) 
		{
			for (var each in field_res.parselist())
			{
				if (each == "Outsourced")
				{
					vbool = true;
				}
			}
			vresult = field_res.parselist();
		}
		// If there is already outsourced we remove this value
		if (vbool)
		{
			var newresult = vresult.parsevector();		
			vresult = newresult.remove("Outsourced").parselist();
			vresult = vresult.removeduplicates();
			result = vresult.join(",");
		}
		// If not we add it
		else
		{
			vresult.push("Outsourced");
			vresult = vresult.removeduplicates();
			result = vresult.join(",");
		}
		withoutlocking
		{
			o_act.set(field_name,result);
		}
	}
}

var outsourced_clin = new objectAttribute("OpxAllocation","SP_DA_CLIN_OUTSOURCED","BOOLEAN");
outsourced_clin.comment = "Outsourced (Clin)";
outsourced_clin.reader = sp_clinical_outsourced_reader;
outsourced_clin.modifier = sp_clinical_outsourced_modifier;

function f_test(SIT,s_equation,vect_ph,obj,vect_met_field,total_load_cal,tr_ratio,tr_o,tr_id,hash_cl,v_cl)
{
if (v_cl.length >0)
{
	for (var e in v_cl where ((v_cl.position(e) instanceof NUMBER) && (v_cl.position(e)%2==0)) )
	{
	hash_cl.set(e,v_cl.get(e));
	}
}
for (var cl in hash_cl)
{
	tr_id=hash_cl.get(cl).parseint();
	tr_o="OpxSP_PT_CL_TRANSLATION_FTE".findclass().get(tr_id);
	if (tr_o instanceof OpxSP_PT_CL_TRANSLATION_FTE)
	{
		tr_ratio=100;
		//((o_act.SP_NF_CL_NB_SITES_TRANS instanceof NUMBER) && (o_act.SP_NF_CL_NB_SITES_TRANS>1)) )
		
		if ((tr_o.SP_AA_N_CL_TRANS_PERCENT instanceof NUMBER) && (tr_o.SP_AA_N_CL_TRANS_PERCENT>=0))
		{
			tr_ratio=tr_o.SP_AA_N_CL_TRANS_PERCENT;
		}
	//update allocations
		//total_load_cal=tr_o.get(vect_met_field.get(obj.SP_RA_METRIC.name))/o_act.SP_NF_CL_NB_SITES_TRANS;
		total_load_cal=tr_o.get(vect_met_field.get(obj.SP_RA_METRIC.name)) * (tr_ratio /100);
		if (total_load_cal instanceof NUMBER )
		{
			
			if (vect_ph.get(cl) instanceof OpxPlannedHours)
			{
				if (vect_ph.get(cl).COST_ACCOUNT.name=="FTE_METRICS")
				{
					context.SP_AA_B_AL_LO_ACTIVE=true;
					vect_ph.get(cl).TOTAL_LOAD=total_load_cal;
					vect_ph.get(cl).SP_AA_S_PH_CL_LANGUAGE=tr_o.SP_AA_CL_LANGUAGES;
					vect_ph.get(cl).SP_AA_S_PH_CL_COUNTRY=tr_o.Name;
					context.SP_AA_B_AL_LO_ACTIVE=false;
				}
				else
				{
					if ((!vect_ph.get(cl).EQUATION_OVERRIDE) && (vect_ph.get(cl).COST_ACCOUNT.NAME=="FTE_ESTIMATED"))
					{
						context.SP_AA_B_AL_LO_ACTIVE=true;
						vect_ph.get(cl).TOTAL_LOAD=total_load_cal;
						vect_ph.get(cl).COST_ACCOUNT=obj.COST_ACCOUNT;
						vect_ph.get(cl).SP_AA_S_PH_CL_LANGUAGE=tr_o.SP_AA_CL_LANGUAGES;
						vect_ph.get(cl).SP_AA_S_PH_CL_COUNTRY=tr_o.Name;
						context.SP_AA_B_AL_LO_ACTIVE=false;	
					}
				}	
				if (vect_ph.get(cl).SP_AA_S_PH_CL_EQU_ORI!=s_equation) 
					vect_ph.get(cl).SP_AA_S_PH_CL_EQU_ORI=s_equation;
			}
			// Create allocations
			else
			{
				context.SP_AA_B_AL_LO_ACTIVE=true;
				new OpxPlannedHours
					("TotalLoad",total_load_cal,
					"TaskOrWbsElement",obj.TaskOrWbsElement,
					"Site",sit,
					"Resource",obj.Resource,
					"COMMENT",obj.COMMENT,
					"SP_AA_S_PH_CL_LANGUAGE",tr_o.SP_AA_CL_LANGUAGES,
					"SP_AA_S_PH_CL_COUNTRY",tr_o.Name,
					"FixedRate",FALSE,
					"DurationComputation","Extendible",
					"CostAccount","FTE_METRICS",
					"SP_AA_S_PH_CL_EQU_ORI",s_equation);
				context.SP_AA_B_AL_LO_ACTIVE=false;
			}
		}
	}

}
}

writetolog("Script SP_JS_CL_FTE_METRICS loaded with version ~a ", revision_number);

//  FILE    : SP_JS_CL_FTE_METRICS.ojs
// 
//  AUTHOR  : Atos team
// 
//  VERSION : 1.26
// 
//  PURPOSE : V6 project: fte metrics
// 
//
var revision_number ="1.28";
//
//
// Revision 1.27 2020/06/10 MBL #1988
// Updating the fundtion SP_CL_LAUNCH_SITES_INT to replace S_CONC by S_SITCLOS (RTM metric update)
//
// Revision 1.27 2020/06/05 KSH #1988
// Updating the fundtion SP_CLIN_MAP_RES_INFO and sp_cl_color_ring_at_gantt for the ring attribute SP_RING_CL_MWD to map and for color in gantt
//
// Revision 1.26 2020/02/18 ASP #2045 - Merge of CDOC and MW  
// Updating function "sp_cl_default_res_sites" on the place of "GCD"(previously it was "DOC" and "MW") we hardcode the value of resources as it impacting the functionality. (ITS-INC3956307) 
//  
// Updating function SP_CLIN_MAP_RES_INFO, sp_cl_default_res_sites and SP_CL_LAUNCH_SITES_INT 
//CLIN-DOC-RM,CLIN-DOC-CDC,CLIN-MW-EDS,CLIN-MW-MWR and CLIN-MW-TRA removed from this scripts and replaced by CLIN-GCD-RM,CLIN-GCD-CDC,CLIN-GCD-EDS,CLIN-GCD-MWR and CLIN-GCD-TRA
//
//
// Revision 1.25 2020/03/02   
// updating Sp_get_workload_ctm_prep(profile,res_site,Load_In)  and function Sp_get_workload_ctm_conc_desc(profile,res_site) and Sp_get_workload_ctm_prcond_desc(profile,res_site) and Sp_get_workload_ctm_prep_desc and Sp_get_workload_ctm_prcond

//
// Revision 1.24 2019/10/21 CKE BIOSTATISTICS REORGANIZATION  
// Updating function SP_CLIN_MAP_RES_INFO CLIN-BS-PROG
 and 
CLIN-BS-STAT
 removed from these scripts and replaced by "GBS-CLIN-PROG" & "GBS-CLIN-STAT"
//
// Revision 1.23 2019/11/05 SKJ - Adding the maping "CLIN-CDM-CDL","SP_RING_CL_CDL" for RITM1369584 TEMPO - Review of CDM profiles and adjustments of FTE cost metrics and arg_CDL for color.
// Revision 1.22 2019/08/13 SPG - ITS-INC2976010   
// Updating function SP_CLIN_MAP_RES_INFO to creation of new FTE_METRIC for international  countries

// Revision 1.21 2019/07/31 bcordel -  RITM1166910
// replacing occurences of SP_AA_S_CTM_PROFILE by SP_RA_CTM_METRICS_RESOURCE.NAME
//
// Revision 1.20 2019/07/22 MBL -  ITS-INC2894293  
// Updating function SP_CL_LAUNCH_SITES_INT to prevent creation of new FTE_METRIC when a FTE_ESTIMATED already exists
//
// Revision 1.19 2019/06/18 MBL - ITS-INC2701238  
// Updating function SP_CL_LAUNCH_SITES_INT to delete old splitted allocations (created by equation no more active on the activity)
//
// Revision 1.18 2019/01/10 MAG - RITM0711421 
// Adding function sp_get_china_under_act to identify the activity with china country based on profile and activity type
//
// Revision 1.17 2019/01/28 bcordel
// Modify function SP_CL_LAUNCH_SITES_INT : Adding a way to avoid the split when "Unspecified site" depending of a field on the equation
//
// Revision 1.17 2019/01/28 MBL
// Modify function reestim_allocdesc_read : call of the technical name of the field "label" instead of its label
//
// Revision 1.16 2018/11/02 ORE
// adding functions Sp_get_workload_ctm_prep_inter, Sp_get_workload_ctm_conc_inter and Sp_get_workload_ctm_prcond_inter for calling in formula SP_NF_CL_VALUE_OUTSOURCED_PH and SP_NF_CL_VALUE_NOT_OUTSOURCED_PH
// Modify function Sp_get_workload_ctm_prcond : add completion of reg_site africa
//
// Revision 1.15 2018/10/11 mrochas
// Modify sp_calc_CRA_IN_DAY to use CLIN-GRTM-LCRA in place of old profile CLIN-SML-LCRA
//
// Revision 1.14 2018/09/20 mrochas
// CPMO-FIN-CC changes into CLIN-CPMO-CC
//
// Revision 1.13 2018/09/18 mrochas
// function SP_CL_LAUNCH_SITES_INT : replace CLIN-SML-CTM witch is deactivated by new CLIN-GRTM-RTM profile
//
// Revision 1.12 2018/09/07 mrochas
// Adding "CLIN-GCD-RM","SP_RING_CL_REC_MGR",
// "CLIN-CPC-CPL","SP_RING_CL_CPC_CPL",
// "CLIN-GTO-GTOM","SP_RING_CL_GTO_GTOM",
// "CLIN-GRTM-RTM","SP_RING_CL_GRTM_RTM",
// "CLIN-GTO-LOG","SP_RING_CL_GTO_LOG",
// "CLIN-CPMO-CC","SP_RING_CL_CPMO_CC",
// "CLIN-GRTM-LCRA","SP_RING_CL_GRTM_LCRA"
// to function sp_clin_map_res_info
// modify sp_cl_color_ring_at_gantt to take new profiles of clinical re-org
// modify sp_cl_sml_get_split_ratio : Clinical re-org : CLIN-SML-CTM replaced by CLIN-GRTM-RTM
// 
// Revision 1.11 2018/06/19 ORE
// Adding sp_clinical_outsourced_modifier and sp_clinical_outsourced_reader functions - INC0931202
// 
// Revision 1.10 2018/04/19 ORE
// updating Sp_get_workload_ctm_prcond - replace this by cur_act - INC0785912
//
// Revision 1.9 2018/03/29 ORE
// updating SP_CL_LAUNCH_SITES_INT function - adding Geographic area Africa in the total load for Marcy
// updating Sp_get_workload_ctm_conc, Sp_get_workload_ctm_prcond, Sp_get_workload_ctm_prep - adding Geographic area Africa
//
// Revision 1.8 2018/03/20 ORE 
// updating sp_cl_get_translator_row function - adding resource site argument - INC0483944
// updating SP_CL_LAUNCH_SITES_INT function - adding ratio and resource site argument - INC0483944
// updating sp_cl_default_res_sites function - changing default site for translator profile - INC0483944
// updating sp_get_outsourced_under_act function - adding activity_type argument - INC0469668 
//
// Revision 1.7 2018/03/20 ORE
// Adding controls sp_cl_delete_ph_estimated_metrics to avoid  equation batch errors (crash) - INC0522552
// updating SP_CL_LAUNCH_SITES_INT function
//
// Revision 1.6 2018/03/15 ORE
// updating SP_CL_LAUNCH_SITES_INT function - inversion of true/false for S_PREP if SP_NF_CL_IS_CCRA_OUTSOURCED
//
// Revision 1.5 2018/03/01 ORE
// updating SP_CL_LAUNCH_SITES_INT function - inversion of true/false for S_PRCOND if SP_NF_CL_IS_CCRA_OUTSOURCED
// updating Sp_get_workload_ctm_prcond function (INC0539055)
//
// Revision 1.4 2018/01/16 YSA
// YSA : added sp_get_outsourced_profile_desc function in order to display outsourced profile
//
// Revision 1.3 2017/12/19 YSA
// Correction sp_cl_get_translator_row
//
//	Revision 1.2  2017/11/29 bcordel
//	Correction of function sp_get_outsourced_under_act.
//
//	Revision 1.1  2017/11/22 bcordel
//	Modifying function sp_get_outsourced_under_act that was not working anymore.
//
//YSA: Last modification 15:19 08/September/2017 V6 project
//YSA: Implement Translator metrics change
//	Modifying function sp_cl_get_translator_row
//	Modifying function SP_CL_LAUNCH_SITES_INT
//YSA: Last modification 11:19 07/December/2017 V6 project
//ysa : add sp_cl_color_ring_at_gantt function


//Clinical science fte metrics

function sp_cl_clinical_sciences_fte(id)
{
	var act="OpxActivity".get(id);
	var result=0;
	var Size="n/a";
	if (act instanceof OpxActivity)
	{
		if (act.SP_AA_S_ACT_CL_PRJ_CAT!="In Clin Dev/CTD phase")
		{
			Size="n/a"
		}
		else
		{
			if (act.SP_AA_S_ACT_CL_SIZE!="" && act.SP_AA_S_ACT_CL_SIZE!=undefined)
			{
				Size=act.SP_AA_S_ACT_CL_SIZE;
			}
		}

		var Cl_Sciences="OpxSP_PT_CL_SCIENCES_FTE".get(act.SP_AA_S_ACT_CL_PRJ_CAT+"_"+act.SP_AA_S_ACT_CL_COMPLEXITY+"_"+Size);
		if (Cl_Sciences instanceof OpxSP_PT_CL_SCIENCES_FTE)
		{
			result=Cl_Sciences.SP_AA_N_SC_WORKLOAD;
		}
	}
	if (result instanceof NUMBER)
	{
		return result;
	}
	else
	{
		return 0;
	}
}
withoutlocking
{
	sp_cl_clinical_sciences_fte.exportfunction({"STRING"},"NUMBER");
}

function sp_cl_get_translator_fte_in_out(unsed) 
{

var field="";
var obj=this;
var result=0;
var country="";
var language="";
var countries= new vector();
var vect_met_fields=new vector ("SP_CL_TRANS_HA_EC_IR_ALL_SITES","SP_AA_CL_HA_EC_SUBM",
"SP_CL_TRANS_IB_TRANSLATION_ALL_SITES","SP_AA_CL_IB",
"SP_CL_TRANS_CSR_APP_ALL_SITES","SP_AA_CL_CSR",
"SP_CL_TRANS_CSR_BODY_ALL_SITES","SP_AA_CL_CSR_BODY",
"SP_CL_TRANS_TRANS_FVFS_ALL_SITES","SP_AA_CL_FVFS");

if ( (obj instanceof OpxPlannedHours) && (obj.SP_RA_METRIC instanceof OpxSP_METRIC) && (vect_met_fields.position(obj.SP_RA_METRIC.name) instanceof NUMBER) )
{
	field=vect_met_fields.get(obj.SP_RA_METRIC.name);
	country=obj.get("SP_AA_S_PH_CL_COUNTRY");
	language=obj.get("SP_AA_S_PH_CL_LANGUAGE");
	
	for (var x in "OpxSP_PT_CL_TRANSLATION_FTE".findclass() where (x.name==country && x.SP_AA_CL_LANGUAGES==language) )
	{
	result=x.get(field);
	break;
	}	
}
else
{
	if((obj.SP_RA_METRIC instanceof OpxSP_METRIC) && (vect_met_fields.position(obj.SP_RA_METRIC.name) instanceof NUMBER))
	{
		field=vect_met_fields.get(obj.SP_RA_METRIC.name);
		country=obj.get("SP_NF_PH_CL_COUNTRY");
		countries=country.parsevector();
			for (var x in "OpxSP_PT_CL_TRANSLATION_FTE".findclass() where (countries.position(x.name) instanceof NUMBER) )
		{
		result=result+x.get(field);

		}	
	}
	
}
	

return result ;
}

withoutlocking
{
sp_cl_get_translator_fte_in_out.exportfunction({"STRING"},"NUMBER");
}


function sp_cl_get_translator_row(Countries,ID,field,res_site) 
{
//var OrderLIst = new vector("INVERSE",field);
var OrderLIst = new vector();
var ct=new vector("INVERSE",field);
OrderLIst.push(ct);
var Translat_rows= new vector();
var values = Countries.parsevector();
var result="";
var tr;
var site="OpxSP_PT_CL_SITES".get(res_site);
if ((values.length > 0) && (site instanceof OpxSP_PT_CL_SITES))
{
	for (var x in "OpxSP_PT_CL_TRANSLATION_FTE".findclass() where ((values.position(x.name) instanceof NUMBER) && (x.SP_AA_CL_LANGUAGES instanceof STRING) &&
	(x.SP_AA_CL_LANGUAGES!="") && (x.SP_AA_S_CL_TRANS_RES_SITE==site.name)) order by OrderLIst)
	{	
		if(!(Translat_rows.position(x.get("SP_AA_CL_LANGUAGES")) instanceof NUMBER))
		{
			Translat_rows.push(x.get("SP_AA_CL_LANGUAGES"));
			Translat_rows.push(x.get(ID));
		}
	}
}

if (Translat_rows.length > 0)
{
result=	Translat_rows.join(",")
}
return result ;
}
withoutlocking
{
sp_cl_get_translator_row.exportfunction({"STRING","STRING","STRING","STRING"},"STRING");
}


function sp_cl_delete_ph_estimated_metrics()
{
var ph=this;
withoutalerts
{
if ((ph instanceof OpxALLOCATION) && 
(ph.COST_ACCOUNT instanceof OpxCOST_ACCOUNT) &&
((ph.COST_ACCOUNT.name=="FTE_METRICS") || (ph.COST_ACCOUNT.name=="FTE_ESTIMATED" && !ph.EQUATION_OVERRIDE)))
{

ph.delete();	
	
}
}
return true;
}
withoutlocking
{
	sp_cl_delete_ph_estimated_metrics.exportfunction();
}


function SP_CL_LAUNCH_SITES_INT()
{
	var champ="";
	var sit;
	var v;
	var creat_ph=true;
	var vec_sites=new vector();
	var vect_ph_del=new vector();
	var vect_ctrl_int=new vector();
	var vect_ph=new vector();
	var vect_ph_sites=new vector();
	var vect_sites_int=new vector();
	var ph_tmp;
	var ph_delete;
	var site_int="";
	var vect_met_field=new vector ("SP_CL_TRANS_HA_EC_IR_ALL_SITES","SP_AA_CL_HA_EC_SUBM",
	"SP_CL_TRANS_IB_TRANSLATION_ALL_SITES","SP_AA_CL_IB",
	"SP_CL_TRANS_CSR_APP_ALL_SITES","SP_AA_CL_CSR",
	"SP_CL_TRANS_CSR_BODY_ALL_SITES","SP_AA_CL_CSR_BODY",
	"SP_CL_TRANS_TRANS_FVFS_ALL_SITES","SP_AA_CL_FVFS");
	var hash_cl=new hashtable("String");
	var v_cl =new vector();
	var tr_id="";
	var tr_o="";
	var total_load_cal=0;
	var ctm_sites="";
	var map_res="";
	var res_s_tr="";
	var tr_ratio=100;
	var s_equation="";
	var v_active_equations=new vector();
	var o_act=this;
	
	if (o_act instanceof opxACTIVITY)
	{
		for (var obj in o_act.ALLOCATIONS  where ((obj.SPAS_RA_SITE instanceof OpxBREAKDOWN_3) && (obj.Resource instanceof OpxRESOURCE) && 
		(obj.COST_ACCOUNT instanceof OpxCOST_ACCOUNT) && (obj.COST_ACCOUNT.NAME=="FTE_METRICS") && (obj.SPAS_RA_SITE.name=="Unspecified")))
		{
			// Skipping the split if the allocation is coming from an equation not supporting the splitting.
			if (obj.EQUATION instanceof OpxEquations && obj.EQUATION.CallBooleanFormula("SP_AA_B_EQ_TO_NOT_SPLIT"))
			{
				break;
			}
			vect_ph=new vector();
			vect_ph_sites=new vector();
			s_equation="";
			champ= obj.SP_CLIN_MAP_RES_INFO(obj.resource.name);
			//champ=o_act.CallStringFormula(obj.SP_CLIN_MAP_RES_INFO(obj.resource.name));
			if ((champ instanceof STRING) && (champ!=""))
				{
				champ=o_act.get(champ);
				}
				
			if ((o_act.CallBooleanFormula("LIST_FIND(\"China\",SP_RING_CL_DATA_MANAGER)")) && (obj.resource.name == "CLIN-CDM-DMG"))
				{
				  if ((o_act.CallBooleanFormula("BELONGS(\"WBS_TYPE\",\"S_CRFD\")")) ||(o_act.CallBooleanFormula("BELONGS(\"WBS_TYPE\",\"S_DBDEV\")")) 
					  || (o_act.CallBooleanFormula("BELONGS(\"WBS_TYPE\",\"S_DIA\")"))
					  || ((o_act.CallBooleanFormula("BELONGS(\"WBS_TYPE\",\"S_DATREV\")")) && o_act.CallBooleanFormula("SP_NF_CL_IS_STEP_PRIMO")))
				  {
					champ=o_act.CallStringFormula("LIST_REMOVE(\"China\",SP_RING_CL_DATA_MANAGER)");
				  }
				}
		
		
			if (champ instanceof STRING && champ!="")
			{
				// Store splitting equations active for the activity (to delete old splitted allocation)
				if (obj.EQUATION instanceof OpxEquations) 
				{	
					s_equation=obj.EQUATION.printattribute();
					v_active_equations.push(s_equation);
				}
				vec_sites=champ.parsevector();
				
				// Translator fte processing
				if (obj.resource.name == "CLIN-GCD-TRA" && o_act.CallBooleanFormula("BELONGS(\"WBS_TYPE\",\"S_TRAAPP,S_TRAREP,S_TRASUB,S_TRAIB,S_TRAFVFS\")"))
				{
				
					for ( var s in vec_sites where s!="Outsourced" )
					{
						res_s_tr=s;
						sit="";
						if (s == "USA") s = "US - Swiftwater";
						if (s == "France") s = "FR - Marcy l'Etoile";
						sit="OpxBREAKDOWN_3".get(s);
						vect_ph=new vector();
						vect_ph_sites=new vector();
						
						if (sit instanceof OpxBREAKDOWN_3)
						{
							if (sit.name=="International")
							{
							sit="OpxBREAKDOWN_3".get("International.2");
							}
							// found all translator allocations
							for(var ph in o_act.ALLOCATIONS where ((ph.SPAS_RA_SITE instanceof OpxBREAKDOWN_3) && 
							(ph.SPAS_RA_SITE.name==sit.name) &&
							(ph.COMMENT==obj.COMMENT) && 
							(ph.COST_ACCOUNT instanceof OpxCOST_ACCOUNT) &&
							(ph.Resource instanceof OpxRESOURCE) &&
							(ph.Resource.name==obj.Resource.name) && 
							((ph.COST_ACCOUNT.name=="FTE_METRICS") || (ph.COST_ACCOUNT.name=="FTE_ESTIMATED")) ))
							{
								//vect_ph.push(ph.SP_AA_S_PH_CL_COUNTRY+"_"+ph.SP_AA_S_PH_CL_LANGUAGE);
								vect_ph.push(ph.SP_AA_S_PH_CL_LANGUAGE);
								vect_ph.push(ph);	
								vect_ph_sites.push(ph);
							}
													
							//translator planned hours updating
							if (vect_met_field.get(obj.SP_RA_METRIC.name) instanceof STRING)
							{
								v_cl=new vector();
								hash_cl.Clear();
								v_cl=sp_cl_get_translator_row(o_act.CallStringFormula("SP_NF_CL_COUNTRY"),"ONB",vect_met_field.get(obj.SP_RA_METRIC.name),res_s_tr).parsevector();
								f_test(SIT,s_equation,vect_ph,obj,vect_met_field,total_load_cal,tr_ratio,tr_o,tr_id,hash_cl,v_cl);
							}
							if (v_cl.length>0)
							{
									
								//Cl countries are updated (remove 1 contry..)
								for (var pm in vect_ph_sites where ! (hash_cl.get(pm.SP_AA_S_PH_CL_LANGUAGE) instanceof STRING ))
								{
									WriteToLog("01 Delete planned hours linkec to cl countris updating, ID is : "+pm.ID);
									pm.sp_cl_delete_ph_estimated_metrics();
								}
							}
							else
							{
								for (var pm in vect_ph_sites )
								{
									WriteToLog("02 Cl country is empty, planned hours with ID is deleted : "+pm.ID);
									pm.sp_cl_delete_ph_estimated_metrics();
								}
							}
						}
					}
					WriteToLog("03 Delete planned hours Unspecified with ID :"+obj.ID);
					obj.sp_cl_delete_ph_estimated_metrics();				
				}
				else
				{	
					if(obj.resource.name == "CLIN-GRTM-RTM" && o_act.CallBooleanFormula("BELONGS(\"WBS_TYPE\",\"S_SITCLOS,S_PREP,S_PRCOND\")"))
					{
						vect_ph=new vector();
						vect_ph_sites=new vector();
						ph_tmp="";
						ph_delete="";
						
						for(var ph in o_act.ALLOCATIONS where ((ph.SPAS_RA_SITE instanceof OpxBREAKDOWN_3) && 
						(ph.SPAS_RA_SITE.name!="Unspecified") &&

						(ph.COMMENT==obj.COMMENT) && 
						(ph.COST_ACCOUNT instanceof OpxCOST_ACCOUNT) &&
						(ph.Resource instanceof OpxRESOURCE) &&
						(ph.Resource.name==obj.Resource.name) &&
						((ph.COST_ACCOUNT.name=="FTE_METRICS") || (ph.COST_ACCOUNT.name=="FTE_ESTIMATED")) ))
						{
							vect_ph.push(ph.SPAS_RA_SITE.name);
							vect_ph.push(ph);
							
							if (ph.SPAS_RA_SITE.name=="FR - Marcy l'Etoile")
							{
								vect_ph_sites.push("France");
							}
							else
							{
								if(ph.SPAS_RA_SITE.name=="US - Swiftwater")
								{
									vect_ph_sites.push("USA");
								}
								else
								{
									vect_ph_sites.push(ph.SPAS_RA_SITE.name);
								}
							}
						}
						for (var ctm_s in vec_sites where ctm_s!="Outsourced")
						{
							sit="";
							if (ctm_s == "USA") ctm_s = "US - Swiftwater";
							if (ctm_s == "France") ctm_s = "FR - Marcy l'Etoile";
							WriteToLog("ctm resource sites is: "+ctm_s);
							sit="OpxBREAKDOWN_3".get(ctm_s);
							WriteToLog("ctm sites is: "+sit);
							if (sit instanceof OpxBREAKDOWN_3)
							{
								if (sit.name=="International")
								{
								sit="OpxBREAKDOWN_3".get("International.2");
								}
								
								
								ph_tmp=vect_ph.get(sit.name);
								
								if (this.wbs_type.name=="S_SITCLOS" && obj.resource.name == "CLIN-GRTM-RTM")
								{
									if (this.SP_NF_CL_IS_GRTM_RTM_OUTSOURCED)
									{
										total_load_cal=Sp_get_workload_ctm_conc_inter("CLIN-GRTM-RTM",ctm_s,"SP_AA_N_CTM_LOAD_OUT");
									}
									else
									{
										total_load_cal=Sp_get_workload_ctm_conc_inter("CLIN-GRTM-RTM",ctm_s,"SP_AA_N_CTM_LOAD_IN")
									}
								}
								else
								{
									if (this.wbs_type.name=="S_PRCOND" && obj.resource.name == "CLIN-GRTM-RTM")
									{
										if (this.SP_NF_CL_IS_GRTM_RTM_OUTSOURCED)
										{
											total_load_cal=Sp_get_workload_ctm_prcond_inter("CLIN-GRTM-RTM",ctm_s,true);
										}
										else
										{
											total_load_cal=Sp_get_workload_ctm_prcond_inter("CLIN-GRTM-RTM",ctm_s,false)
										}
									}
									else
									{
										if (this.SP_NF_CL_IS_GRTM_RTM_OUTSOURCED)
										{
											total_load_cal=Sp_get_workload_ctm_prep_inter("CLIN-GRTM-RTM",ctm_s,false);
										}
										else
										{
											total_load_cal=Sp_get_workload_ctm_prep_inter("CLIN-GRTM-RTM",ctm_s,true)
										}
									}
								}
								
								if (ph_tmp instanceof OpxPlannedHours)
								{
									if (ph_tmp.COST_ACCOUNT.name=="FTE_METRICS")
									{
										context.SP_AA_B_AL_LO_ACTIVE=true;
										ph_tmp.TOTAL_LOAD=total_load_cal;
										context.SP_AA_B_AL_LO_ACTIVE=false;
									}
									else
									{
										if ((!ph_tmp.EQUATION_OVERRIDE) && (ph_tmp.COST_ACCOUNT.NAME=="FTE_ESTIMATED"))
										{
											context.SP_AA_B_AL_LO_ACTIVE=true;
											ph_tmp.TOTAL_LOAD=total_load_cal;
											ph_tmp.COST_ACCOUNT=obj.COST_ACCOUNT;
											context.SP_AA_B_AL_LO_ACTIVE=false;
										}
									}
									if (ph_tmp.SP_AA_S_PH_CL_EQU_ORI!=s_equation) 
										ph_tmp.SP_AA_S_PH_CL_EQU_ORI=s_equation;										
								}
								else
								{
									context.SP_AA_B_AL_LO_ACTIVE=true;
									new OpxPlannedHours
										("TotalLoad",total_load_cal,
										"TaskOrWbsElement",obj.TaskOrWbsElement,
										"Site",sit,
										"Resource",obj.Resource,
										"COMMENT",obj.COMMENT,
										"FixedRate",FALSE,
										"DurationComputation","Extendible",
										"CostAccount","FTE_METRICS",
										"SP_AA_S_PH_CL_EQU_ORI",s_equation);
									context.SP_AA_B_AL_LO_ACTIVE=false;
								}
							}
						}
						for (var site_ph in vect_ph_sites where (!(vec_sites.position(site_ph) instanceof NUMBER)))
						{
							if (site_ph=="France")
							{
								site_ph="FR - Marcy l'Etoile";
							}
							else
							{
								if(site_ph=="USA")
								{
									site_ph="US - Swiftwater";
								}
							}
							ph_delete=vect_ph.get(site_ph);
							WriteToLog("04 Delete planned hours with ID :"+ph_delete.ID);
							ph_delete.sp_cl_delete_ph_estimated_metrics();
						}
						WriteToLog("05 Delete planned hours Unspecified with ID :"+obj.ID);
						obj.sp_cl_delete_ph_estimated_metrics();
						
					}
					else
					{
						ph_tmp="";
						ph_delete="";
						vect_ph=new vector();
						vect_ph_sites=new vector();
						
						for(var ph in o_act.ALLOCATIONS where ((ph.SPAS_RA_SITE instanceof OpxBREAKDOWN_3) && (ph.SPAS_RA_SITE.SP_NF_B_IS_INT) && 
						(ph.SPAS_RA_SITE.name!="Unspecified") &&

						(ph.COMMENT==obj.COMMENT) && 
						(ph.COST_ACCOUNT instanceof OpxCOST_ACCOUNT) &&
						(ph.Resource instanceof OpxRESOURCE) &&
						(ph.Resource.name==obj.Resource.name) &&
						((ph.COST_ACCOUNT.name=="FTE_METRICS") || (ph.COST_ACCOUNT.name=="FTE_ESTIMATED")) ))
						{
							vect_ph.push(ph.SPAS_RA_SITE.name);
							vect_ph_sites.push(ph.SPAS_RA_SITE.name);
							vect_ph.push(ph);	
						}
						for ( v in vec_sites where v!="Outsourced")
						{
							sit="";
							sit="OpxBREAKDOWN_3".get(v);

							if (sit instanceof OpxBREAKDOWN_3 && sit.SP_NF_B_IS_INT)
							{
								if (sit.name=="International")
								{
								sit="OpxBREAKDOWN_3".get("International.2");
								}
								
								ph_tmp=vect_ph.get(sit.name);
								

								total_load_cal=obj.TOTAL_LOAD;
								
								if (ph_tmp instanceof OpxPlannedHours)
								{
									if (ph_tmp.COST_ACCOUNT.name=="FTE_METRICS")
									{
										context.SP_AA_B_AL_LO_ACTIVE=true;
										ph_tmp.TOTAL_LOAD=total_load_cal;
										context.SP_AA_B_AL_LO_ACTIVE=false;
									}
									else
									{
										if ((!ph_tmp.EQUATION_OVERRIDE) && (ph_tmp.COST_ACCOUNT.NAME=="FTE_ESTIMATED"))
										{
											context.SP_AA_B_AL_LO_ACTIVE=true;
											ph_tmp.TOTAL_LOAD=total_load_cal;
											ph_tmp.COST_ACCOUNT=obj.COST_ACCOUNT;
											context.SP_AA_B_AL_LO_ACTIVE=false;
										}
									}	
									if (ph_tmp.SP_AA_S_PH_CL_EQU_ORI!=s_equation) 
										ph_tmp.SP_AA_S_PH_CL_EQU_ORI=s_equation;	
								}
								else
								{
									context.SP_AA_B_AL_LO_ACTIVE=true;
									new OpxPlannedHours
										("TotalLoad",total_load_cal,
										"TaskOrWbsElement",obj.TaskOrWbsElement,
										"Site",sit,
										"Resource",obj.Resource,
										"COMMENT",obj.COMMENT,
										"FixedRate",FALSE,
										"DurationComputation","Extendible",
										"CostAccount","FTE_METRICS",
										"SP_AA_S_PH_CL_EQU_ORI",s_equation);
									context.SP_AA_B_AL_LO_ACTIVE=false;
								}
							}
						}
						for (var site_ph in vect_ph_sites where (!(vec_sites.position(site_ph) instanceof NUMBER)))
						{
							ph_delete=vect_ph.get(site_ph);
							WriteToLog("06 Delete planned hours with ID :"+ph_delete.ID);
							ph_delete.sp_cl_delete_ph_estimated_metrics();
						}
						WriteToLog("07 Delete planned hours Unspecified with ID :"+obj.ID);
						obj.sp_cl_delete_ph_estimated_metrics();
					}
				}
			}
			else
			{
				WriteToLog("08 Delete planned hours Unspecified with ID :"+obj.ID);
				obj.sp_cl_delete_ph_estimated_metrics();	
			}
		}
		
		// Deletion of old splitted allocations (created by an equation no more active on the activity)
		for (var obj in o_act.ALLOCATIONS  where obj.COST_ACCOUNT instanceof OpxCOST_ACCOUNT && (obj.COST_ACCOUNT.NAME=="FTE_METRICS" || (obj.COST_ACCOUNT.NAME=="FTE_ESTIMATED" && !obj.EQUATION_OVERRIDE)) && obj.SP_AA_S_PH_CL_EQU_ORI!="" && (!v_active_equations.position(obj.SP_AA_S_PH_CL_EQU_ORI) instanceof NUMBER))
		{
			WriteToLog("09 Delete planned hours with ID :"+obj.ID);
			obj.sp_cl_delete_ph_estimated_metrics();
		}

		// Delete metrics allocations with fte resource site empty
		for (var obj in o_act.ALLOCATIONS  where ((obj.SPAS_RA_SITE instanceof OpxBREAKDOWN_3) && (obj.Resource instanceof OpxRESOURCE) && 
		(obj.COST_ACCOUNT instanceof OpxCOST_ACCOUNT) && ((obj.COST_ACCOUNT.NAME=="FTE_METRICS") || (obj.COST_ACCOUNT.NAME=="FTE_ESTIMATED" && !obj.EQUATION_OVERRIDE))
		&& (obj.SPAS_RA_SITE.SP_NF_B_IS_INT || 
		(obj.resource.name == "CLIN-GCD-TRA" && o_act.CallBooleanFormula("BELONGS(\"WBS_TYPE\",\"S_TRAAPP,S_TRAREP,S_TRASUB,S_TRAIB,S_TRAFVFS\")") )|| 
		(obj.resource.name =="CLIN-GRTM-RTM" && o_act.CallBooleanFormula("BELONGS(\"WBS_TYPE\",\"S_SITCLOS,S_PREP,S_PRCOND\")")) ) && (obj.SPAS_RA_SITE.name!="Unspecified")))
		{

			// Skipping the deletion if the allocation is coming from an equation not supporting the splitting.
			if (obj.EQUATION instanceof OpxEquations && obj.EQUATION.CallBooleanFormula("SP_AA_B_EQ_TO_NOT_SPLIT"))
			{
				break;
			}
			
			vect_sites_int=new vector();
			champ=obj.SP_CLIN_MAP_RES_INFO(obj.resource.name);
			if ((champ instanceof STRING) && (champ!=""))
			{
				champ=o_act.get(champ);
			}
					
			if (champ instanceof STRING)
			{
				vect_ctrl_int=new vector();
				vect_ctrl_int=champ.parsevector();
				map_res=obj.SPAS_RA_SITE.name;
				if (map_res=="FR - Marcy l'Etoile") map_res="France";
				if (map_res=="US - Swiftwater") map_res="USA";
				if(obj.resource.name == "CLIN-GRTM-RTM" && o_act.CallBooleanFormula("BELONGS(\"WBS_TYPE\",\"S_SITCLOS,S_PREP,S_PRCOND\")"))
				{
					if (!(vect_ctrl_int.position(map_res) instanceof NUMBER) )
					{
					WriteToLog("10 Delete planned hours with ID :"+obj.ID);
					obj.sp_cl_delete_ph_estimated_metrics();
					}
				}
				else
				{
					if (!(vect_ctrl_int.position(map_res) instanceof NUMBER) )
					{
					WriteToLog("11 Delete planned hours with ID :"+obj.ID);
					obj.sp_cl_delete_ph_estimated_metrics();
					}
					
				}
			}
		}
	}
}	



withoutlocking
{
	SP_CL_LAUNCH_SITES_INT.exportfunction();
}

//** MPA and YSA: VERSION OPTIMISEE ****

// this function is used to map a resource from the RBS with corresponding field in the Resource information screen on the activities
// the result will be the name of the corresponding resource field

function SP_CLIN_MAP_RES_INFO(unused)
{
var vec_res_drivers={"GBS-CLIN-STAT","SP_RING_CL_STATISTICIAN",
"GBS-CLIN-PROG","SP_RING_CL_PROGRAMMER",
"CLIN-CDV-CTL/CS","SP_RING_CL_CTL_CS",
"CLIN-CPM-CPM","SP_RING_CL_CPM",
"CLIN-CPM-CC","SP_RING_CL_CPM_CC",
"CLIN-CDM-DMG","SP_RING_CL_DATA_MANAGER",
"CLIN-CDM-CTA","SP_RING_CL_TRIAL_ANALYST",
"CLIN-GCD-MWR","SP_RING_CL_MED_WRITER",
"CLIN-GCD-CDC","SP_RING_CL_CLINDOC",
"CLIN-GCD-TRA","SP_RING_CL_TRANSLATOR",
"CLIN-GCD-EDS","SP_RING_CL_EDOC",
"CLIN-SML-CTM","SP_RING_CL_CTM",
"CLIN-SML-LCRA","SP_RING_CL_CRA",
"CLIN-SML-LOG","SP_RING_CL_LOG_COORD",
"PPO-COPM","SP_RING_CL_COPM",
"GMA-MTL","SP_RING_CL_GMA_MTL",
"PPO-PMSL","SP_RING_CL_PMSL",
"CLIN-GCD-RM","SP_RING_CL_REC_MGR",
"CLIN-CPC-CPL","SP_RING_CL_CPC_CPL",
"CLIN-GTO-GTOM","SP_RING_CL_GTO_GTOM",
"CLIN-GRTM-RTM","SP_RING_CL_GRTM_RTM",
"CLIN-GTO-LOG","SP_RING_CL_GTO_LOG",
"CLIN-CPMO-CC","SP_RING_CL_CPMO_CC",
"CLIN-GRTM-LCRA","SP_RING_CL_GRTM_LCRA",
"CLIN-CDM-CDL","SP_RING_CL_CDL", // addition
"CLIN-GCS-CTL","SP_RING_CL_CTL_CS", // addition
"CLIN-CPL-CPL","SP_RING_CL_CPC_CPL", //addition
"CLIN-GCD-MWD","SP_RING_CL_MWD"};// addition

	var res = this.RES;
	var result = "";
	var use=unused;
	if ((res Instanceof OpxResource) && (res !=undefined) && (res!=""))
	{
		result = vec_res_drivers.get(res.name);
		if (!(result instanceof STRING)) 
		{
		 result = "";	
		}
	}
	return result;
}
withoutlocking
{
  SP_CLIN_MAP_RES_INFO.exportfunction({"STRING"},"STRING");
}



function Sp_Cl_Is_Site_Int(sites)
{
	var found = false;
	var site;

	for (var clinSite in sites.parsevector())
	{
		site = "OpxBREAKDOWN_3".get(clinSite);
		if (site instanceof OpxBREAKDOWN_3 && site.SP_NF_B_IS_INT)
		{
			found = true;
			break;
		}
	}
	return found;
}

withoutlocking
{
	Sp_Cl_Is_Site_Int.exportfunction({"STRING"},"BOOLEAN");
}


//  AUTHOR  : ksk
//  VERSION : 1.0
//  PURPOSE : #371 SML split
//  Created  by ksk 16:28 12/12/2013
//  Updated  by YSA 18:38 23/03/2017

function sp_cl_sml_get_split_ratio(site)
{
	var ratio = 1;
	var ctm;
	var clSiteO;
	var ht = new hashtable("string");
	var c;
	var nbSite = 1;

	// warning clinical site USA is Site US
	if (site == "USA") site = "US";

	if (this instanceof OpxActivity	&& site instanceof string && "OpxBREAKDOWN_3".get(site) instanceof OpxBREAKDOWN_3)
	{
		// Clinical re-org : CLIN-SML-CTM replaced by CLIN-GRTM-RTM
		// ctm = this.SP_RING_CL_CTM.parsevector();
		ctm = this.SP_RING_CL_GRTM_RTM.parsevector();

		if ( ctm.length >0)
		{
			// split case
			// Counting number of sites by Region
			for (var clSite in ctm)
			{
				// warning clinical site USA is Site US
				if (clSite == "USA") clSite = "US";

				clSiteO = "OpxBREAKDOWN_3".get(clSite);
				if (clSiteO instanceof OpxBREAKDOWN_3)
				{
					c = ht.get(clSiteO.SP_NF_S_FTE_REGION);
					if (c instanceof number) {
						c++;
					}
					else {
						c = 1;
					}
					ht.set(clSiteO.SP_NF_S_FTE_REGION, c);
				}
			}
			clSiteO = "OpxBREAKDOWN_3".get(site);
			nbSite = ht.get(clSiteO.SP_NF_S_FTE_REGION);
			if ( nbSite instanceof number)
			{
				ratio = ratio / nbSite;
			}
		}
	}
	return ratio;
}

withoutlocking
{
	sp_cl_sml_get_split_ratio.exportfunction({"STRING"},"NUMBER");
}

function SP_Clin_get_field_hrs_value(field_name)
{
	var hrs = this;
	var result="";
	if ( (field_name!="" && field_name!=undefined) &&   (hrs !=undefined && hrs!="" && ((hrs Instanceof OpxHoursAndExpendituresSummary) || (hrs Instanceof OpxAllocation))))
	{
		var act = hrs.ACTIVITY;
		result= act.get(field_name);
	}
	return result;
}
withoutlocking
{
	SP_Clin_get_field_hrs_value.exportfunction({"STRING"},"STRING");
}


//------------------------------------
//  FILE    : SP_JS_REESTIMATE_LOAD.ojs
//  AUTHOR  : oroudaire
//  VERSION : 1.0
//  PURPOSE : Reestimation of the total load of allocation in days
//      Allow reestimation to 0
//      Allow reestimation on allocation based on metrics
//  HISTORY :
//  Created  by oroudaire 23/09/2011 16:45
//------------------------------------
// MPA: création de l'attribut dynamique:
//   - "Estimated Days" (SP_AA_REESTIM_LOAD_DAYS) :
//		réestimation du Total load d'une affectation avec màj de la "Metric value" et du Cost account
//------------------------------------

// Modifier permettant la mise à jour du total load. Permet de reestimer à 0
function reestimate_load_days_mod(nbr)
{
	var ts = this;
	var rem_brut=0;
	if (nbr!= undefined)
	{
		rem_brut=nbr;

		if (ts !=undefined && ts Instanceof OpxPlannedHours)
		{
			withoutlocking
			{
				if(rem_brut >=0 && rem_brut!= undefined)
				{
					var Cost_acc = "OpxCost_ACCOUNT".get("FTE_ESTIMATED");
					if  (ts.COST_ACCOUNT.NAME=="FTE_METRICS")
					{
						ts.SP_AA_N_METRIC_VALUE=ts.CallNumberFormula("TOTAL_LOAD/SP_NF_CONV_FTE");
						ts.COST_ACCOUNT=Cost_Acc;
					}
					ts.TOTAL_LOAD = rem_brut;
				}
			}
		}
	}
}


// Reader donnant la valeur du champ égal à la total load
function reestimate_load_days_read()
{
	var load="";
	if  (This.COST_ACCOUNT.NAME=="FTE_ESTIMATED" || This.COST_ACCOUNT.NAME=="FTE")
		load=This.TOTAL_LOAD;
	return load;
}

var reestimate_load_days = new objectAttribute("OpxPlannedHours","SP_AA_REESTIM_LOAD_DAYS","NUMBER");
reestimate_load_days.comment = "Estimated Days";
reestimate_load_days.reader = reestimate_load_days_read;
reestimate_load_days.modifier = reestimate_load_days_mod;


//------------------------------------
//  FILE    : SP_JS_FTE_PHARMA_SITE.ojs (extraction)
//  AUTHOR  : ksk
//  VERSION : 1.0
//  PURPOSE : #364 & 368 FTE Pharma ? & Pharma Site
//  HISTORY :
//  Created  by ksk 14:31 28/11/2013 
//------------------------------------
// MPA: création des attributs dynamiques:
//   - "Pharma ?" (SP_DA_B_PH_IS_PHARMA)
//   - "Pharma site" (SP_DA_S_PH_PHARMA_SITE)
//------------------------------------
var acceptablePharmaSite = new vector(
	"Pharma", true,
	"Pharma-China", true
);

function sp_fte_acceptablePharmaSite(site)
{
	var b = false;
	if (site instanceOf string && site != "") {
		if (acceptablePharmaSite instanceOf vector && acceptablePharmaSite.get(site) instanceOf boolean)
			b = true;
		else
			alert("Acceptable values are Pharma or Pharma-China and must match precisely"); 
	}
	return b;
}

function sp_fte_pharma_locker()
{
	var lock = true;
	if (this.COST_ACCOUNT.name == "FTE")
		lock = false;
	return lock;
}

function sp_fte_pharma_site_modifier(site)
{
	if (site instanceOf string && site == "") {    
		this.SP_AA_S_CL_PHARMA_SITE = site;
		this.SP_AA_B_CL_IS_PHARMA = false;
	}  
	else if (site instanceOf string && sp_fte_acceptablePharmaSite(site)) {
		// value is acceptable
		this.SP_AA_S_CL_PHARMA_SITE = site;
		this.SP_AA_B_CL_IS_PHARMA = true;
	}  
}

function sp_fte_pharma_reader()
{
	return this.SP_AA_B_CL_IS_PHARMA;
}

function sp_fte_pharma_site_reader()
{
	return this.SP_AA_S_CL_PHARMA_SITE;
}

var fte_pharma_site = new objectAttribute("OpxPlannedHours","SP_DA_S_PH_PHARMA_SITE","STRING");
fte_pharma_site.comment = "Pharma Site";
fte_pharma_site.reader = sp_fte_pharma_site_reader;
fte_pharma_site.modifier = sp_fte_pharma_site_modifier;
fte_pharma_site.locker = sp_fte_pharma_locker;

var fte_pharma = new objectAttribute("OpxPlannedHours","SP_DA_B_PH_IS_PHARMA","BOOLEAN");
fte_pharma.comment = "Pharma ?";
fte_pharma.reader = sp_fte_pharma_reader;
fte_pharma.locker = true;


//------------------------------------
// MPA: création de l'attribut dynamique:
//   - "Estimated FTE" (SP_AA_REESTIM_LOAD_FTE)
//------------------------------------
//YSA: 26 DEC 2016, Modify Estimated FTE field 

function reestim_load_FTE_mod(nbr)
{
	var ph = this;
	var no_support=false;
	
if ((nbr instanceof NUMBER) && (ph instanceof OpxPlannedHours))
{
	/*
	if(ph.COST_ACCOUNT.NAME=="FTE_METRICS")
	{
		ph.SP_AA_N_METRIC_VALUE=ph.SP_NF_CL_REF_FTE_PH;
	}
	*/
	no_support=ph.SP_AA_B_CL_NO_SUPPORT;
	if (! no_support)
	{
	ph.TOTAL_LOAD=ph.SP_NF_CONV_FTE*nbr;
	}
	else
	{
	alert("This allocation is flagged as No Support; to edit FTEs to this allocation, change No support? to no and then reestimate.");
	}
}

}

function reestim_load_FTE_read()
{
	var load=0;
	if  (This.COST_ACCOUNT.NAME=="FTE_ESTIMATED" || This.COST_ACCOUNT.NAME=="FTE")
		load = this.CallNumberFormula(" TOTAL_LOAD/SP_NF_CONV_FTE ")
	return load;
}

var reestim_load_FTE = new objectAttribute("OpxPlannedHours","SP_DA_REESTIM_LOAD_FTE","NUMBER");
reestim_load_FTE.comment = "Estimated FTE";
reestim_load_FTE.reader = reestim_load_FTE_read;
reestim_load_FTE.modifier = reestim_load_FTE_mod;


//------------------------------------
// MPA: création de l'attribut dynamique:
//   - "Allocation Description" (SP_AA_REESTIM_ALLOCDESC)
//------------------------------------
function reestim_allocdesc_mod(strg)
{
	var ph = this;
	if (ph !=undefined && ph Instanceof OpxPlannedHours) {
		withoutlocking {
			ph.COMMENT = strg;
		}
	}
}

function reestim_allocdesc_read()
{
	var ph = this;
	var result = ph.COMMENT;
	if (ph.SP_RA_METRIC.NAME != undefined && ph.SP_RA_METRIC.NAME != "")
		result = ph.SP_RA_METRIC.DESC;
	return result;
}

function reestim_loc()
{
	if (this.COST_ACCOUNT.NAME == "FTE") return false
	return true;
}	

var reestim_allocdesc = new objectAttribute("OpxPlannedHours","SP_AA_REESTIM_ALLOCDESC","STRING");
reestim_allocdesc.comment = "Allocation Description";
reestim_allocdesc.reader = reestim_allocdesc_read;
reestim_allocdesc.modifier = reestim_allocdesc_mod;
reestim_allocdesc.locker = reestim_loc;


//=====
// MPA
//=====
// Import pour les équations cliniques
//=====

//
// Provenance P5 : sp_ojs_cl_get_study_info.ojs
//
function sp_cl_calculate_trans_load(column)
{
	var act = this;
	var vhash = new hashtable("STRING");
	var ctry_list=new Vector();
	var already_listed_ctry =new Vector();
	var result=0;
	if ((act!=undefined && act.SP_NF_CL_COUNTRY!="") && act Instanceof OpxActivity)
	{
		ctry_list = act.SP_NF_CL_COUNTRY.parselist();

		if (ctry_list.length >0)
		{
			for (var cty in ctry_list)
			{
			var opx_cty = "OpxSP_PT_CL_COUNTRY".get(cty);

				if (opx_cty !=undefined)
				{
					if (opx_cty.SP_AA_CL_CTY_GROUP !="" && opx_cty.SP_AA_CL_CTY_GROUP!=undefined)
					{
						if (already_listed_ctry.length ==0)
						{
						already_listed_ctry.push(opx_cty.SP_AA_CL_CTY_GROUP);
						cty=opx_cty.SP_AA_CL_CTY_GROUP;
						}
					}


					for (var ligne in "OpxSP_PT_CL_TRANSLATION_FTE" where ligne.name==cty )
						{
							 var lang=ligne.languages;
							 var fte=ligne.get(column);
							 if (vhash.get(lang)==undefined)
								{
								 vhash.set(lang,fte);
								}
							 else if (vhash.get(lang)!=undefined && vhash.get(lang)<=fte)
									 {
									 vhash.rem(lang);
									 vhash.set(lang,fte);
									 }
						}
				}
			}
		for(var res in vhash)
           {
           result= result + vhash.get(res);
           }
		}

	}

	return result;
}
withoutlocking
{
	sp_cl_calculate_trans_load.exportfunction({"STRING"},"NUMBER");
}


//
// Provenance P5 : sp_ojs_cl_reporting_functions.ojs
//
function sp_get_outsourced_under_act(s_profile,act_type)
{
	var cur_act=this;
	var result=false;
	
	fromobject(cur_act)
	{
		 for (var act in "OpxActivity" where (act.SP_NF_B_OBS_CLIN_ACT && (act.CallStringFormula(s_profile).position("Outsourced") instanceof NUMBER) && 
		 (act.CallBooleanFormula(act_type) instanceof BOOLEAN) && act.CallBooleanFormula(act_type)))
		{
			result=true;
			break;
		}
	}
	
	return result;
}
withoutlocking
{
	sp_get_outsourced_under_act.exportfunction({"STRING","STRING"},"BOOLEAN");
}

function sp_get_china_under_act(s_profile,act_type)
{
	var cur_act=this;
	var result=false;
	
	fromobject(cur_act)
	{
		 for (var act in "OpxActivity" where (act.SP_NF_B_OBS_CLIN_ACT && (act.CallStringFormula(s_profile).position("China") instanceof NUMBER) && 
		 (act.CallBooleanFormula(act_type) instanceof BOOLEAN) && act.CallBooleanFormula(act_type)))
		{
			result=true;
			break;
		}
	}
	
	return result;
}
withoutlocking
{
	sp_get_china_under_act.exportfunction({"STRING","STRING"},"BOOLEAN");
}

//
// Provenance P5 : sp_ojs_cl_get_study_info.ojs
//
function sp_is_stat_bsprep_out(Trial_ID)
{
	var Trial="OpxActivity".get(Trial_ID);
	var result=false;

	if (Trial Instanceof OpxActivity)
	{
		fromobject(Trial)
		{
			for(var act in OpxActivity where act.SP_NF_B_CL_BSPREP_OUT)
			{
				result=True;
				break;
			}
		}
	}
	return result;
}
withoutlocking
{
	sp_is_stat_bsprep_out.exportfunction({"STRING"},"BOOLEAN");
}

//YSA: getLanguageForCountries function is used in Language field (class: planned hours)

function getLanguageForCountries(varCountries)
{

var result;
result="";
var countryTrial= new vector();

//Checking whether countries parameter is empty 
if (varcountries == undefined)|| (varcountries == "")
{
 return result;
}

//If countries parameter is not empty,remove the comma and push into vector
countryTrial= varCountries.split(",");
var j= countryTrial.length;

//For each country in vector check whether any language exists in persisten table and push into result
for (var vec in countryTrial)
{
	for (var each in "OpxSP_PT_CL_TRANSLATION_FTE" where each.NAME==vec)
	{
	if (each.SP_AA_CL_LANGUAGES!=undefined)
 	result +=each.SP_AA_CL_LANGUAGES +",";
	}
}
//Remove the last comma existed in the result
result =result.substring(0,result.length-1); 
if ( result.substring(0,1)==",")
{
  result= result.substring(1, result.length);
}
return result;
}
WITHOUTLOCKING
{
getLanguageForCountries.EXPORTFUNCTION({"STRING"},"STRING");
}

//Load calculation for CTM metrics

function Sp_get_workload_ctm_conc(profile,res_site,workload_field)
{
var wbs_type="";
var ctm_profile="";
var study_lerdership="";
var pasteur_cat="";
var sponsorship="";
var region="";
var index_act="";
var index_ctm="";
var v_index_act;	
var v_index_ctm;
var ctm_level_field="";
var ctm_workload_field="";
var result_level = 1;
var result_workload=0;
var result_nb_site=1;
var result = 0;
var clSiteO="";
var reg_res_site="";
var trial_nb_site=1;
var split_sit_reg=1;
var trial_Id="";
var cur_act = (this instanceof OpxActivity ? this:this.ACTIVITY);
var vec_level=new vector("SP_AA_N_CTM_LEVEL_0",true
,"SP_AA_N_CTM_LEVEL_1",true
,"SP_AA_N_CTM_LEVEL_2",true
,"SP_AA_N_CTM_LEVEL_3",true
);

var vec_workload=new vector("SP_AA_N_CTM_LOAD_IN",true
,"SP_AA_N_CTM_LOAD_OUT",true
);

var vec_region_field =new vector(
"Greater Europe","SP_DA_N_CL_SITES_EU",
"Africa and Middle-East","SP_DA_N_CL_SITES_AFRICA",
"Asia Pacific","SP_DA_N_CL_SITES_ASIA",
"Latin America","SP_DA_N_CL_SITES_LATIN",
"North America","SP_DA_N_CL_SITES_AMERICA");


//find id level field

if (vec_level.get("SP_AA_N_CTM_LEVEL_"+this.get("SP_DA_CL_COMPL_MGT_LOG")))
{
ctm_level_field="SP_AA_N_CTM_LEVEL_"+this.get("SP_DA_CL_COMPL_MGT_LOG");	
}
	
//find id workload field

if (vec_workload.get(workload_field))
{
ctm_workload_field=workload_field;	
}

if (cur_act instanceof OpxActivity)
{

//find a trial and trial KTIs
trial_Id=cur_act.sp_get_trial_id("");
trial_Id="OpxActivity".get(trial_Id);
WriteToLog("Trial is : "+trial_Id);

//find resource site region

if (res_site == "USA") 
{
res_site ="US";
}

if (res_site == "Africa & Middle East - Unspecified")
{
reg_res_site="Africa and Middle-East";
}

//Africa and Middle-East,Asia Pacific,Greater Europe,Latin America
clSiteO = "OpxBREAKDOWN_3".get(res_site);
if (clSiteO instanceof OpxBREAKDOWN_3)
{
reg_res_site=clSiteO.SP_NF_S_FTE_REGION;

if (reg_res_site=="Europe")
{
reg_res_site="Greater Europe";	
}
}

if (trial_Id instanceof OpxActivity)
{
wbs_type=cur_act.wbs_type.name;
ctm_profile=profile;
if (trial_Id.SP_RA_CL_STUDY_LEADERSHIP instanceof OpxSP_PT_CL_STD_LEADERSHIP)
{
study_lerdership=trial_Id.SP_RA_CL_STUDY_LEADERSHIP.name;	
}
if(trial_Id.SP_RA_CL_GROUP_CAT instanceof OpxSP_PT_CL_GROUP_CAT )
{
pasteur_cat=trial_Id.SP_RA_CL_GROUP_CAT.name;	
}
sponsorship=trial_Id.SP_RING_CL_SPONSORSHIP;
index_act=wbs_type+","+ctm_profile+","+study_lerdership+","+pasteur_cat+","+sponsorship+","+reg_res_site;
WriteToLog("Index on activities :"+index_act);


	for (var fte_ctm in "OpxSP_PT_CL_CTM".findclass())
	{
		index_ctm =	fte_ctm.SP_AA_S_CTM_WBS_TYPE+","+
		fte_ctm.SP_RA_CTM_METRICS_RESOURCE.NAME+","+
		fte_ctm.SP_AA_S_CTM_STD_LEADER+","+
		fte_ctm.SP_AA_S_CTM_PASTEUR_CAT+","+
		fte_ctm.SP_AA_S_CTM_SPONSORSHIP+","+
		fte_ctm.SP_AA_S_CTM_RES_REGION;
		v_index_act=index_act.parsevector();
		v_index_ctm=index_ctm.parsevector();
		//find ctm row
		if (Intersection(v_index_ctm,v_index_act).length==v_index_act.length)
		{
			WriteToLog("intersection index is :"+Intersection(v_index_ctm,v_index_act));
			//coef complexity factor
			if ( (fte_ctm.get(ctm_level_field) instanceof NUMBER) && fte_ctm.SP_AA_B_CTM_COMPL_FACTOR)
			{
				
				result_level=fte_ctm.get(ctm_level_field)/100;
				WriteToLog("coef complexity factor: "+result_level);
			}
			
			//laod In or Out
			if (fte_ctm.get(ctm_workload_field) instanceof NUMBER)
			{
				result_workload=fte_ctm.get(ctm_workload_field);
				WriteToLog("laod In or Out: "+result_workload);
			}
			//nb site per region (value in trial information pop-up)
			if (fte_ctm.SP_AA_B_CTM_NB_SITE_REGION)
			{

				WriteToLog("region is "+reg_res_site);
				WriteToLog("region res site :"+vec_region_field.get(reg_res_site));
				trial_nb_site=cur_act.get(vec_region_field.get(reg_res_site));
				
				if (trial_nb_site instanceof NUMBER)
				{
					result_nb_site=trial_nb_site;
					WriteToLog("nb site in this region: "+result_nb_site);
				}	
						
			}
			//div per res sites per region
			if ((cur_act.sp_cl_sml_get_split_ratio(res_site) instanceof NUMBER) && (cur_act.sp_cl_sml_get_split_ratio(res_site)>0) )
			{
				split_sit_reg=cur_act.sp_cl_sml_get_split_ratio(res_site);
				WriteToLog("split per res site in region: "+split_sit_reg);
			}
		
		result=(result_workload*result_nb_site*result_level)*split_sit_reg;
		WriteToLog("result :"+result);
		break;	
		}
	}

}

}

return result;
}
withoutlocking
{
Sp_get_workload_ctm_conc.exportfunction({"STRING","STRING","STRING"},"NUMBER");
}


function Sp_get_workload_ctm_prep(profile,res_site,Load_In)
{
var wbs_type="";
var ctm_profile="";
var study_lerdership="";
var pasteur_cat="";
var sponsorship="";
var region="";
var index_act="";
var index_ctm="";
var v_index_act;	
var v_index_ctm;
var ctm_level_field="";
var result_level = 1;
var result_workload=0;
var result_nb_site=1;
var result = 0;
var clSiteO="";
var phase="";
var reg_res_site="";
var trial_nb_site=1;
var split_sit_reg=1;
var trial_Id="";
var cur_act = (this instanceof OpxActivity ? this:this.ACTIVITY);
var inter01;
var inter02;

var vec_level=new vector("SP_AA_N_CTM_LEVEL_0",true
,"SP_AA_N_CTM_LEVEL_1",true
,"SP_AA_N_CTM_LEVEL_2",true
,"SP_AA_N_CTM_LEVEL_3",true
);

var vec_region_field =new vector(
"Greater Europe","SP_DA_N_CL_SITES_EU",
"Africa and Middle-East","SP_DA_N_CL_SITES_AFRICA",
"Asia Pacific","SP_DA_N_CL_SITES_ASIA",
"Latin America","SP_DA_N_CL_SITES_LATIN",
"North America","SP_DA_N_CL_SITES_AMERICA");


//find id level field

if (vec_level.get("SP_AA_N_CTM_LEVEL_"+this.get("SP_DA_CL_COMPL_MGT_LOG")))
{
ctm_level_field="SP_AA_N_CTM_LEVEL_"+this.get("SP_DA_CL_COMPL_MGT_LOG");	
}
	
if (cur_act instanceof OpxActivity)
{

//find a trial and trial KTIs
trial_Id=cur_act.sp_get_trial_id("");
trial_Id="OpxActivity".get(trial_Id);
WriteToLog("Trial is : "+trial_Id);

//find resource site region

if (res_site == "USA") 
{
res_site ="US";
}

if (res_site == "Africa & Middle East - Unspecified")
{
reg_res_site="Africa and Middle-East";
}

// find region (Africa and Middle-East,Asia Pacific,Greater Europe,Latin America)
clSiteO = "OpxBREAKDOWN_3".get(res_site);
if (clSiteO instanceof OpxBREAKDOWN_3)
{
reg_res_site=clSiteO.SP_NF_S_FTE_REGION;

	if (reg_res_site=="Europe")
	{
	reg_res_site="Greater Europe";	
	}
}

if (trial_Id instanceof OpxActivity)
{
wbs_type=cur_act.wbs_type.name;
ctm_profile=profile;
if (trial_Id.SP_RA_CL_STUDY_LEADERSHIP instanceof OpxSP_PT_CL_STD_LEADERSHIP)
{
study_lerdership=trial_Id.SP_RA_CL_STUDY_LEADERSHIP.name;	
}
if(trial_Id.SP_RA_CL_GROUP_CAT instanceof OpxSP_PT_CL_GROUP_CAT)
{
pasteur_cat=trial_Id.SP_RA_CL_GROUP_CAT.name;	
}
sponsorship=trial_Id.SP_RING_CL_SPONSORSHIP;
if(trial_Id.SP_RA_CL_CLIN_PHASE instanceof OpxSP_PT_CL_PHASE)	
{
phase=trial_Id.SP_RA_CL_CLIN_PHASE.name;	
}	
index_act=wbs_type+","+ctm_profile+","+study_lerdership+","+pasteur_cat+","+sponsorship+","+phase+","+reg_res_site;
WriteToLog("Index on activities :"+index_act);

// find # site per region
WriteToLog("region is "+reg_res_site);
WriteToLog("region res site :"+vec_region_field.get(reg_res_site));
trial_nb_site=cur_act.get(vec_region_field.get(reg_res_site));

if (trial_nb_site instanceof NUMBER)
{
	result_nb_site=trial_nb_site;
	WriteToLog("nb site in this region: "+result_nb_site);
}

	for (var fte_ctm in "OpxSP_PT_CL_CTM".findclass() )
	{
		if ((result_nb_site>= fte_ctm.SP_AA_N_CTM_SIT_REG_LOW) && (result_nb_site<= fte_ctm.SP_AA_N_CTM_SIT_REG_UP))
		{	
		WriteToLog("admin row is : "+fte_ctm);
		index_ctm =	fte_ctm.SP_AA_S_CTM_WBS_TYPE+","+
		fte_ctm.SP_RA_CTM_METRICS_RESOURCE.NAME+","+
		fte_ctm.SP_AA_S_CTM_STD_LEADER+","+
		fte_ctm.SP_AA_S_CTM_PASTEUR_CAT+","+
		fte_ctm.SP_AA_S_CTM_SPONSORSHIP+","+
		fte_ctm.SP_AA_S_CTM_PHASE+","+
		fte_ctm.SP_AA_S_CTM_RES_REGION;
		v_index_act=index_act.parsevector();
		v_index_ctm=index_ctm.parsevector();
		WriteToLog("admin row is : "+fte_ctm);
		//find ctm row
		inter01=Intersection(v_index_ctm,v_index_act);
		WriteToLog("intersection is :"+inter01);
		WriteToLog("Act vector is :"+v_index_act);
		
		if (inter01 instanceof Vector && v_index_ctm instanceof Vector &&  inter01.length == v_index_act.length )
		{
			// WriteToLog("intersection index is :"+Intersection(v_index_ctm,v_index_act));
			//coef complexity factor
			if ( (fte_ctm.get(ctm_level_field) instanceof NUMBER) && fte_ctm.SP_AA_B_CTM_COMPL_FACTOR)
			{
				
				result_level=fte_ctm.get(ctm_level_field)/100;
				WriteToLog("coef complexity factor: "+result_level);
			}
			//laod In or Out
			if (Load_In)
			{
				result_workload=(fte_ctm.get("SP_AA_N_CTM_DAY_MONTH_IN") * cur_act.SP_NF_CL_GET_ACTIVITY_DURATION) + 
				(fte_ctm.get("SP_AA_N_CTM_DAY_COUNT_REG_IN") * trial_Id.sp_cl_list_count_reg("SP_RING_CL_COUNTRY",reg_res_site));
				
				if (fte_ctm.SP_AA_B_CTM_NB_SITE_REGION)
				{
					
					result_workload=result_workload+ (fte_ctm.get("SP_AA_N_CTM_DAY_SITE_REG_IN")*result_nb_site);
							
				}
				else
				{
					result_workload=result_workload+(fte_ctm.get("SP_AA_N_CTM_DAY_SITE_REG_IN"));
				}
				WriteToLog("laod IN: "+result_workload);
			}
			else
			{
				result_workload=(fte_ctm.get("SP_AA_N_CTM_DAY_MONTH_OUT") * cur_act.SP_NF_CL_GET_ACTIVITY_DURATION) + 
				(fte_ctm.get("SP_AA_N_CTM_DAY_COUNT_REG_OUT") * trial_Id.sp_cl_list_count_reg("SP_RING_CL_COUNTRY",reg_res_site));
				
				if (fte_ctm.SP_AA_B_CTM_NB_SITE_REGION)
				{
					
					result_workload=result_workload+ (fte_ctm.get("SP_AA_N_CTM_DAY_SITE_REG_OUT")*result_nb_site);
							
				}
				else
				{
					result_workload=result_workload+(fte_ctm.get("SP_AA_N_CTM_DAY_SITE_REG_OUT"));
				}
				WriteToLog("laod out: "+result_workload);
			}
			//nb site per region (value in trial information pop-up)

			//div per res sites per region
			if ((cur_act.sp_cl_sml_get_split_ratio(res_site) instanceof NUMBER) && (cur_act.sp_cl_sml_get_split_ratio(res_site)>0) )
			{
				split_sit_reg=cur_act.sp_cl_sml_get_split_ratio(res_site);
				WriteToLog("split per res site in region: "+split_sit_reg);
			}
		
		result=result_workload * result_level * split_sit_reg;
		WriteToLog("Final Result :"+result);
		break;	
		}
		}
	}
	
}

}

return result;
}
withoutlocking
{
Sp_get_workload_ctm_prep.exportfunction({"STRING","STRING","BOOLEAN"},"NUMBER");
}

function Sp_get_workload_ctm_prcond(profile,res_site,Load_In)
{
var wbs_type="";
var ctm_profile="";
var study_lerdership="";
var pasteur_cat="";
var sponsorship="";
var region="";
var index_act="";
var index_ctm="";
var v_index_act;	
var v_index_ctm;
var ctm_level_field="";
var result_level = 1;
var result_workload=0;
var result_nb_site=1;
var result_nb_subject=1;
var result = 0;
var clSiteO="";
var phase="";
var reg_res_site="";
var trial_nb_site=1;
var trial_nb_subject=1;
var split_sit_reg=1;
var trial_Id="";
var cur_act = (this instanceof OpxActivity ? this:this.ACTIVITY);
var inter01;
var act_order_1=false;
var count_reg_1=false;
var sub_multi=0;
var site_multi=0;

var vec_level=new vector("SP_AA_N_CTM_LEVEL_0",true
,"SP_AA_N_CTM_LEVEL_1",true
,"SP_AA_N_CTM_LEVEL_2",true
,"SP_AA_N_CTM_LEVEL_3",true
);

var vec_nb_sites_field =new vector(
"Greater Europe","SP_DA_N_CL_SITES_EU",
"Africa and Middle-East","SP_DA_N_CL_SITES_AFRICA",
"Asia Pacific","SP_DA_N_CL_SITES_ASIA",
"Latin America","SP_DA_N_CL_SITES_LATIN",
"North America","SP_DA_N_CL_SITES_AMERICA");

var vec_nb_subjects_field =new vector(
"Greater Europe","SP_DA_N_CL_SUB_EU",
"Africa and Middle-East","SP_DA_N_CL_SUB_AFRICA",
"Asia Pacific","SP_DA_N_CL_SUB_ASIA",
"Latin America","SP_DA_N_CL_SUB_LATIN",
"North America","SP_DA_N_CL_SUB_AMERICA");
	
if (cur_act instanceof OpxActivity)
{
//find id level field
if (vec_level.get("SP_AA_N_CTM_LEVEL_"+cur_act.get("SP_DA_CL_COMPL_MGT_LOG")))
{
ctm_level_field="SP_AA_N_CTM_LEVEL_"+cur_act.get("SP_DA_CL_COMPL_MGT_LOG");	
}

//find a trial and trial KTIs
trial_Id=cur_act.sp_get_trial_id("");
trial_Id="OpxActivity".get(trial_Id);
WriteToLog("Trial is : "+trial_Id);

//find resource site region

if (res_site == "USA") 
{
res_site ="US";
}

// find region (Africa and Middle-East,Asia Pacific,Greater Europe,Latin America)
clSiteO = "OpxBREAKDOWN_3".get(res_site);
if (clSiteO instanceof OpxBREAKDOWN_3)
{
reg_res_site=clSiteO.SP_NF_S_FTE_REGION;

	if (reg_res_site=="Europe")
	{
	reg_res_site="Greater Europe";	
	}
}

if (res_site == "Africa & Middle East - Unspecified")
{
	reg_res_site ="Africa and Middle-East";
}

// found informations on trial level

if (trial_Id instanceof OpxActivity)
{
wbs_type=cur_act.wbs_type.name;
ctm_profile=profile;
if (trial_Id.SP_RA_CL_STUDY_LEADERSHIP instanceof OpxSP_PT_CL_STD_LEADERSHIP)
{
study_lerdership=trial_Id.SP_RA_CL_STUDY_LEADERSHIP.name;	
}
if(trial_Id.SP_RA_CL_GROUP_CAT instanceof OpxSP_PT_CL_GROUP_CAT)
{
pasteur_cat=trial_Id.SP_RA_CL_GROUP_CAT.name;	
}
sponsorship=trial_Id.SP_RING_CL_SPONSORSHIP;
if(trial_Id.SP_RA_CL_CLIN_PHASE instanceof OpxSP_PT_CL_PHASE)	
{
phase=trial_Id.SP_RA_CL_CLIN_PHASE.name;	
}	
index_act=wbs_type+","+ctm_profile+","+study_lerdership+","+pasteur_cat+","+sponsorship+","+phase+","+reg_res_site;
WriteToLog("Index on activities :"+index_act);

// find # site per region
WriteToLog("region is "+reg_res_site);
WriteToLog("region res site :"+vec_nb_sites_field.get(reg_res_site));
trial_nb_site=cur_act.get(vec_nb_sites_field.get(reg_res_site));

if (trial_nb_site instanceof NUMBER)
{
	result_nb_site=trial_nb_site;
	WriteToLog("nb site in this region: "+result_nb_site);
	
	if (result_nb_site>=50 && result_nb_site<=1000000)
	{
		site_multi=1.2;
	}
	else
	{
		if(result_nb_site>=31 && result_nb_site<=50)
		{
			site_multi=1.1;
		}
		else
		{
			if (result_nb_site>=16 && result_nb_site<=30)
			{
				site_multi=1.08;
			}
			else
			{
				if (result_nb_site>=6 && result_nb_site<=15)
				{
				site_multi=1.05;
				}
				else
				{
					if (result_nb_site>=1 && result_nb_site<=5)
					{
					site_multi=0.8;					
					}
					else
					{
					site_multi=0;							
					}
				}

			}
			
		}
	}
	WriteToLog("Sites multiplier is : "+site_multi);	
}

// find # subjects per region

WriteToLog("region is "+reg_res_site);
WriteToLog("region res site :"+vec_nb_subjects_field.get(reg_res_site));
trial_nb_subject=cur_act.get(vec_nb_subjects_field.get(reg_res_site));

if (trial_nb_subject instanceof NUMBER)
{
	result_nb_subject=trial_nb_subject;
	WriteToLog("nb subject in this region: "+result_nb_subject);
	if (result_nb_subject>=500 && result_nb_subject<=1000000)
	{
		sub_multi=1.1;
	}
	else
	{
		if(result_nb_subject>=301 && result_nb_subject<=500)
		{
			sub_multi=1.08;
		}
		else
		{
			if (result_nb_subject>=100 && result_nb_subject<=300)
			{
				sub_multi=1.05;
			}
			else
			{
				sub_multi=1;
			}	
		}
	}
WriteToLog("subject multiplier is : "+sub_multi);	
	
}

if (cur_act.SP_NF_B_ACT_ORDER_IS_ONE instanceof BOOLEAN )
{
act_order_1=cur_act.SP_NF_B_ACT_ORDER_IS_ONE;	
}

if (reg_res_site instanceof STRING && trial_Id.sp_cl_list_count_reg("SP_RING_CL_COUNTRY",reg_res_site) instanceof NUMBER && trial_Id.sp_cl_list_count_reg("SP_RING_CL_COUNTRY",reg_res_site)==1)
{
count_reg_1=true;
}


for (var fte_ctm in "OpxSP_PT_CL_CTM".findclass() )
{
	if (count_reg_1==fte_ctm.SP_AA_B_CTM_ONE_COUNT_REG && act_order_1==fte_ctm.SP_AA_B_CTM_ACT_ORDER_ONE && Load_In==fte_ctm.SP_AA_B_CTM_IS_OUT)
	{	
	index_ctm =	fte_ctm.SP_AA_S_CTM_WBS_TYPE+","+
	fte_ctm.SP_RA_CTM_METRICS_RESOURCE.NAME+","+
	fte_ctm.SP_AA_S_CTM_STD_LEADER+","+
	fte_ctm.SP_AA_S_CTM_PASTEUR_CAT+","+
	fte_ctm.SP_AA_S_CTM_SPONSORSHIP+","+
	fte_ctm.SP_AA_S_CTM_PHASE+","+
	fte_ctm.SP_AA_S_CTM_RES_REGION;
	v_index_act=index_act.parsevector();
	v_index_ctm=index_ctm.parsevector();

	//find ctm row
	inter01=Intersection(v_index_ctm,v_index_act);
	WriteToLog("intersection is :"+inter01);
	
	if (inter01 instanceof Vector && v_index_ctm instanceof Vector &&  inter01.length == v_index_act.length )
	{
		// WriteToLog("intersection index is :"+Intersection(v_index_ctm,v_index_act));
		//coef complexity factor
		if ( (fte_ctm.get(ctm_level_field) instanceof NUMBER) && fte_ctm.SP_AA_B_CTM_COMPL_FACTOR)
		{
			
			result_level=fte_ctm.get(ctm_level_field)/100;
			WriteToLog("coef complexity factor: "+result_level);
		}
		//laod In or Out

		result_workload=(fte_ctm.get("SP_AA_N_CTM_DAY_MONTH_IN") * cur_act.SP_NF_CL_GET_ACTIVITY_DURATION) 
		
		if (fte_ctm.SP_AA_B_CTM_NB_SITE_REGION)
		{
			result_workload=result_workload+ (fte_ctm.get("SP_AA_N_CTM_DAY_SITE_REG_IN")*result_nb_site);
			
			if (fte_ctm.SP_AA_B_CTM_ONE_COUNT_REG)
			{
				result_workload=result_workload+ ((fte_ctm.get("SP_AA_N_CTM_DAY_COUNT_REG_IN") * trial_Id.sp_cl_list_count_reg("SP_RING_CL_COUNTRY",reg_res_site)) * cur_act.SP_NF_CL_GET_ACTIVITY_DURATION) +
				(fte_ctm.get("SP_AA_N_CTM_DAY_TMF") * cur_act.SP_NF_CL_GET_ACTIVITY_DURATION);
			}
			else
			{
				result_workload=result_workload+ (fte_ctm.get("SP_AA_N_CTM_DAY_COUNT_REG_IN") *result_nb_site) +
				(fte_ctm.get("SP_AA_N_CTM_DAY_TMF") *result_nb_site);
			}
			
			result_workload=result_workload  * sub_multi * site_multi;
		}
		else
		{
			result_workload=result_workload+(fte_ctm.get("SP_AA_N_CTM_DAY_SITE_REG_IN"));
		}
		
		result_workload= result_workload * fte_ctm.get("SP_AA_N_CTM_MULT_OUT_ORDER")


	result= result_workload * result_level;
	WriteToLog("Final Result :"+result);
	break;	
	}
	}
}
}
}

return result;
}
withoutlocking
{
Sp_get_workload_ctm_prcond.exportfunction({"STRING","STRING","BOOLEAN"},"NUMBER");
}

function Sp_get_workload_ctm_conc_desc(profile,res_site)
{
var wbs_type="";
var ctm_profile="";
var study_lerdership="";
var pasteur_cat="";
var sponsorship="";
var index_act="";
var index_ctm="";
var v_index_act;	
var v_index_ctm;
var ctm_level_field="";
var result = "";
var clSiteO="";
var reg_res_site="";
var trial_Id="";
var cur_act = (this instanceof OpxActivity ? this:this.ACTIVITY);
	

if (cur_act instanceof OpxActivity)
{

//find a trial and trial KTIs
trial_Id=cur_act.sp_get_trial_id("");
trial_Id="OpxActivity".get(trial_Id);
WriteToLog("Trial is : "+trial_Id);

//find resource site region

if (res_site == "USA") 
{
res_site ="US";
}

if (res_site == "Africa & Middle East - Unspecified")
{
reg_res_site="Africa and Middle-East";
}

//Africa and Middle-East,Asia Pacific,Greater Europe,Latin America
clSiteO = "OpxBREAKDOWN_3".get(res_site);
if (clSiteO instanceof OpxBREAKDOWN_3)
{
reg_res_site=clSiteO.SP_NF_S_FTE_REGION;

if (reg_res_site=="Europe")
{
reg_res_site="Greater Europe";	
}
}

if (trial_Id instanceof OpxActivity)
{
wbs_type=cur_act.wbs_type.name;
ctm_profile=profile;
if (trial_Id.SP_RA_CL_STUDY_LEADERSHIP instanceof OpxSP_PT_CL_STD_LEADERSHIP)
{
study_lerdership=trial_Id.SP_RA_CL_STUDY_LEADERSHIP.name;	
}
if(trial_Id.SP_RA_CL_GROUP_CAT instanceof OpxSP_PT_CL_GROUP_CAT)
{
pasteur_cat=trial_Id.SP_RA_CL_GROUP_CAT.name;	
}
sponsorship=trial_Id.SP_RING_CL_SPONSORSHIP;
index_act=wbs_type+","+ctm_profile+","+study_lerdership+","+pasteur_cat+","+sponsorship+","+reg_res_site;
WriteToLog("Index on activities :"+index_act);

	for (var fte_ctm in "OpxSP_PT_CL_CTM".findclass())
	{
		index_ctm =	fte_ctm.SP_AA_S_CTM_WBS_TYPE+","+
		fte_ctm.SP_RA_CTM_METRICS_RESOURCE.NAME+","+
		fte_ctm.SP_AA_S_CTM_STD_LEADER+","+
		fte_ctm.SP_AA_S_CTM_PASTEUR_CAT+","+
		fte_ctm.SP_AA_S_CTM_SPONSORSHIP+","+
		fte_ctm.SP_AA_S_CTM_RES_REGION;
		v_index_act=index_act.parsevector();
		v_index_ctm=index_ctm.parsevector();
		//find ctm row
		if (Intersection(v_index_ctm,v_index_act).length==v_index_act.length)
		{
			
		
		result=fte_ctm.get("SP_AA_S_CTM_ALLOC_DESC");
		WriteToLog("result :"+result);
		break;	
		}
	}

}



}

return result;
}
withoutlocking
{
Sp_get_workload_ctm_conc_desc.exportfunction({"STRING","STRING"},"STRING");
}

function Sp_get_workload_ctm_prep_desc(profile,res_site)
{
var wbs_type="";
var ctm_profile="";
var study_lerdership="";
var pasteur_cat="";
var sponsorship="";
var region="";
var index_act="";
var index_ctm="";
var v_index_act;	
var v_index_ctm;
var ctm_level_field="";
var result = "";
var clSiteO="";
var phase="";
var reg_res_site="";
var trial_nb_site=1;
var result_nb_site;
var trial_Id="";
var cur_act = (this instanceof OpxActivity ? this:this.ACTIVITY);
var inter01;

var vec_region_field =new vector(
"Greater Europe","SP_DA_N_CL_SITES_EU",
"Africa and Middle-East","SP_DA_N_CL_SITES_AFRICA",
"Asia Pacific","SP_DA_N_CL_SITES_ASIA",
"Latin America","SP_DA_N_CL_SITES_LATIN",
"North America","SP_DA_N_CL_SITES_AMERICA");

if (cur_act instanceof OpxActivity)
{

//find a trial and trial KTIs
trial_Id=cur_act.sp_get_trial_id("");
trial_Id="OpxActivity".get(trial_Id);
WriteToLog("Trial is : "+trial_Id);

//find resource site region

if (res_site == "USA") 
{
res_site ="US";
}

// find region (Africa and Middle-East,Asia Pacific,Greater Europe,Latin America)
clSiteO = "OpxBREAKDOWN_3".get(res_site);
if (clSiteO instanceof OpxBREAKDOWN_3)
{
reg_res_site=clSiteO.SP_NF_S_FTE_REGION;

	if (reg_res_site=="Europe")
	{
	reg_res_site="Greater Europe";	
	}
}

if (trial_Id instanceof OpxActivity)
{
wbs_type=cur_act.wbs_type.name;
ctm_profile=profile;
if (trial_Id.SP_RA_CL_STUDY_LEADERSHIP instanceof OpxSP_PT_CL_STD_LEADERSHIP)
{
study_lerdership=trial_Id.SP_RA_CL_STUDY_LEADERSHIP.name;	
}
if(trial_Id.SP_RA_CL_GROUP_CAT instanceof OpxSP_PT_CL_GROUP_CAT)
{
pasteur_cat=trial_Id.SP_RA_CL_GROUP_CAT.name;	
}
sponsorship=trial_Id.SP_RING_CL_SPONSORSHIP;
if(trial_Id.SP_RA_CL_CLIN_PHASE instanceof OpxSP_PT_CL_PHASE)	
{
phase=trial_Id.SP_RA_CL_CLIN_PHASE.name;	
}	
index_act=wbs_type+","+ctm_profile+","+study_lerdership+","+pasteur_cat+","+sponsorship+","+phase+","+reg_res_site;
WriteToLog("Index on activities :"+index_act);

// find # site per region
WriteToLog("region is "+reg_res_site);
WriteToLog("region res site :"+vec_region_field.get(reg_res_site));
trial_nb_site=cur_act.get(vec_region_field.get(reg_res_site));

if (trial_nb_site instanceof NUMBER)
{
	result_nb_site=trial_nb_site;
	WriteToLog("nb site in this region: "+result_nb_site);
}

	for (var fte_ctm in "OpxSP_PT_CL_CTM".findclass() where ((result_nb_site>= fte_ctm.SP_AA_N_CTM_SIT_REG_LOW) && (result_nb_site<= fte_ctm.SP_AA_N_CTM_SIT_REG_UP)))
	{
		index_ctm =	fte_ctm.SP_AA_S_CTM_WBS_TYPE+","+
		fte_ctm.SP_RA_CTM_METRICS_RESOURCE.NAME+","+
		fte_ctm.SP_AA_S_CTM_STD_LEADER+","+
		fte_ctm.SP_AA_S_CTM_PASTEUR_CAT+","+
		fte_ctm.SP_AA_S_CTM_SPONSORSHIP+","+
		fte_ctm.SP_AA_S_CTM_PHASE+","+
		fte_ctm.SP_AA_S_CTM_RES_REGION;
		v_index_act=index_act.parsevector();
		v_index_ctm=index_ctm.parsevector();
		//find ctm row
		inter01=Intersection(v_index_ctm,v_index_act);
		
		if (inter01 instanceof Vector && v_index_ctm instanceof Vector &&  inter01.length == v_index_act.length )
		{
		result=fte_ctm.get("SP_AA_S_CTM_ALLOC_DESC");
		break;	
		}	
	}

}



}

return result;
}
withoutlocking
{
Sp_get_workload_ctm_prep_desc.exportfunction({"STRING","STRING"},"STRING");
}




function Sp_get_workload_ctm_prcond_desc(profile,res_site)
{
var wbs_type="";
var ctm_profile="";
var study_lerdership="";
var pasteur_cat="";
var sponsorship="";
var region="";
var index_act="";
var index_ctm="";
var v_index_act;	
var v_index_ctm;
var ctm_level_field="";
var result_level = 1;
var result_workload=0;
var result_nb_site=1;
var result_nb_subject=1;
var result = "";
var clSiteO="";
var phase="";
var reg_res_site="";
var trial_nb_site=1;
var trial_nb_subject=1;
var trial_Id="";
var cur_act = (this instanceof OpxActivity ? this:this.ACTIVITY);
var inter01;
var act_order_1=false;
var count_reg_1=false;


var vec_nb_sites_field =new vector(
"Greater Europe","SP_DA_N_CL_SITES_EU",
"Africa and Middle-East","SP_DA_N_CL_SITES_AFRICA",
"Asia Pacific","SP_DA_N_CL_SITES_ASIA",
"Latin America","SP_DA_N_CL_SITES_LATIN",
"North America","SP_DA_N_CL_SITES_AMERICA");

var vec_nb_subjects_field =new vector(
"Greater Europe","SP_DA_N_CL_SUB_EU",
"Africa and Middle-East","SP_DA_N_CL_SUB_AFRICA",
"Asia Pacific","SP_DA_N_CL_SUB_ASIA",
"Latin America","SP_DA_N_CL_SUB_LATIN",
"North America","SP_DA_N_CL_SUB_AMERICA");

if (cur_act instanceof OpxActivity)
{

//find a trial and trial KTIs
trial_Id=cur_act.sp_get_trial_id("");
trial_Id="OpxActivity".get(trial_Id);
WriteToLog("Trial is : "+trial_Id);

//find resource site region

if (res_site == "USA") 
{
res_site ="US";
}

// find region (Africa and Middle-East,Asia Pacific,Greater Europe,Latin America)
clSiteO = "OpxBREAKDOWN_3".get(res_site);
if (clSiteO instanceof OpxBREAKDOWN_3)
{
reg_res_site=clSiteO.SP_NF_S_FTE_REGION;

	if (reg_res_site=="Europe")
	{
	reg_res_site="Greater Europe";	
	}
}

// found informations on trial level

if (trial_Id instanceof OpxActivity)
{
wbs_type=cur_act.wbs_type.name;
ctm_profile=profile;
if (trial_Id.SP_RA_CL_STUDY_LEADERSHIP instanceof OpxSP_PT_CL_STD_LEADERSHIP)
{
study_lerdership=trial_Id.SP_RA_CL_STUDY_LEADERSHIP.name;	
}
if(trial_Id.SP_RA_CL_GROUP_CAT instanceof OpxSP_PT_CL_GROUP_CAT)
{
pasteur_cat=trial_Id.SP_RA_CL_GROUP_CAT.name;	
}
sponsorship=trial_Id.SP_RING_CL_SPONSORSHIP;
if(trial_Id.SP_RA_CL_CLIN_PHASE instanceof OpxSP_PT_CL_PHASE)	
{
phase=trial_Id.SP_RA_CL_CLIN_PHASE.name;	
}	
index_act=wbs_type+","+ctm_profile+","+study_lerdership+","+pasteur_cat+","+sponsorship+","+phase+","+reg_res_site;
WriteToLog("Index on activities :"+index_act);

// find # site per region
WriteToLog("region is "+reg_res_site);
WriteToLog("region res site :"+vec_nb_sites_field.get(reg_res_site));
trial_nb_site=cur_act.get(vec_nb_sites_field.get(reg_res_site));

if (trial_nb_site instanceof NUMBER)
{
	result_nb_site=trial_nb_site;
	WriteToLog("nb site in this region: "+result_nb_site);
	
}

// find # subjects per region

WriteToLog("region is "+reg_res_site);
WriteToLog("region res site :"+vec_nb_subjects_field.get(reg_res_site));
trial_nb_subject=cur_act.get(vec_nb_subjects_field.get(reg_res_site));

if (trial_nb_subject instanceof NUMBER)
{
	result_nb_subject=trial_nb_subject;
	WriteToLog("nb subject in this region: "+result_nb_subject);
}

if (cur_act.SP_NF_B_ACT_ORDER_IS_ONE instanceof BOOLEAN )
{
act_order_1=cur_act.SP_NF_B_ACT_ORDER_IS_ONE;	
}

if (trial_Id.sp_cl_list_count_reg("SP_RING_CL_COUNTRY",reg_res_site) instanceof NUMBER && trial_Id.sp_cl_list_count_reg("SP_RING_CL_COUNTRY",reg_res_site)==1)
{
count_reg_1=true;
}

for (var fte_ctm in "OpxSP_PT_CL_CTM".findclass() where (count_reg_1==fte_ctm.SP_AA_B_CTM_ONE_COUNT_REG && act_order_1==fte_ctm.SP_AA_B_CTM_ACT_ORDER_ONE))
{
	
index_ctm =	fte_ctm.SP_AA_S_CTM_WBS_TYPE+","+
fte_ctm.SP_RA_CTM_METRICS_RESOURCE.NAME+","+
fte_ctm.SP_AA_S_CTM_STD_LEADER+","+
fte_ctm.SP_AA_S_CTM_PASTEUR_CAT+","+
fte_ctm.SP_AA_S_CTM_SPONSORSHIP+","+
fte_ctm.SP_AA_S_CTM_PHASE+","+
fte_ctm.SP_AA_S_CTM_RES_REGION;
v_index_act=index_act.parsevector();
v_index_ctm=index_ctm.parsevector();

//find ctm row
inter01=Intersection(v_index_ctm,v_index_act);
	
if (inter01 instanceof Vector && v_index_ctm instanceof Vector &&  inter01.length == v_index_act.length )
{

result=fte_ctm.get("SP_AA_S_CTM_ALLOC_DESC");
break;	
}
	
}	
}



}

return result;
}
withoutlocking
{
Sp_get_workload_ctm_prcond_desc.exportfunction({"STRING","STRING"},"STRING");
}


function Sp_get_workload_ctm_prcond_inter(profile,res_site,Load_In)
{
	if (res_site == "FR - Marcy l'Etoile")
	{	
		var total_load_cal1=this.Sp_get_workload_ctm_prcond(profile,res_site,Load_In);
		var total_load_cal2=this.Sp_get_workload_ctm_prcond(profile,"Africa & Middle East - Unspecified",Load_In);
		return	total_load_cal1 + total_load_cal2;										
	}
	else
	{
		return this.Sp_get_workload_ctm_prcond(profile,res_site,Load_In);	
	}
}

withoutlocking
{
Sp_get_workload_ctm_prcond_inter.exportfunction({"STRING","STRING","BOOLEAN"},"NUMBER");
}

function Sp_get_workload_ctm_conc_inter(profile,res_site,Load_In)
{
	if (res_site == "FR - Marcy l'Etoile")
	{	
		var total_load_cal1=this.Sp_get_workload_ctm_conc(profile,res_site,Load_In);
		var total_load_cal2=this.Sp_get_workload_ctm_conc(profile,"Africa & Middle East - Unspecified",Load_In);
		return	total_load_cal1 + total_load_cal2;										
	}
	else
	{
		return this.Sp_get_workload_ctm_conc(profile,res_site,Load_In);	
	}
}

withoutlocking
{
Sp_get_workload_ctm_conc_inter.exportfunction({"STRING","STRING","STRING"},"NUMBER");
}


function Sp_get_workload_ctm_prep_inter(profile,res_site,Load_In)
{
	if (res_site == "FR - Marcy l'Etoile")
	{	
		var total_load_cal1=this.Sp_get_workload_ctm_prep(profile,res_site,Load_In);
		var total_load_cal2=this.Sp_get_workload_ctm_prep(profile,"Africa & Middle East - Unspecified",Load_In);
		return	total_load_cal1 + total_load_cal2;										
	}
	else
	{
		return this.Sp_get_workload_ctm_prep(profile,res_site,Load_In);	
	}
}

withoutlocking
{
Sp_get_workload_ctm_prep_inter.exportfunction({"STRING","STRING","BOOLEAN"},"NUMBER");
}


// Functions used for apply equations in global batch

function sp_cl_default_res_sites(){
	                                                                                                    
var act = this;
var trial_index;
var trial;
var hash_site=new hashtable("String");
var geo_area=new vector();
var prj_site;
var def_res_site;
var res_site_vec=new vector();

if (act instanceof OpxActivity)
{
	
trial_index=act.sp_get_trial_id("");
trial="OpxActivity".get(trial_index);   

if (trial instanceof OpxActivity)
{
geo_area=trial.SP_NF_S_GEO_AREA.parsevector();
	for (var def_site in "OpxSP_PT_CL_RES_SITE" where ( def_site.SP_AA_S_CL_INIT_TYPE=="Trial" &&
	(def_site.SP_AA_S_CL_RS_WBS_TYPE !="") &&
	(act.wbs_type instanceof OpxWBS_TYPE) &&
	(def_site.SP_AA_S_CL_RS_WBS_TYPE.parsevector().position(act.wbs_type.name) instanceof NUMBER )&&
	act.get(def_site.SP_AA_S_CL_ID_ACT_FIELD)=="" && 
	(geo_area.length >0) &&
	(geo_area.position(def_site.SP_AA_S_CL_GEOG_AREA) instanceof NUMBER) &&
	(def_site.SP_AA_S_CL_SITE_DEF instanceof STRING && def_site.SP_AA_S_CL_SITE_DEF!="") &&
	!((def_site.SP_AA_S_CL_PROFIL_SITE=="CLIN-GCD-MWR" || def_site.SP_AA_S_CL_PROFIL_SITE=="CLIN-GCD-EDS") && geo_area.length>=2)) )
	{
		//if (def_site.SP_AA_S_CL_PLATFORM=="GCD"(for DOC) && geo_area.length>=2) Changing the if condition as it is not going in else loop
		if ((def_site.SP_AA_S_CL_PROFIL_SITE=="CLIN-GCD-CDC" || def_site.SP_AA_S_CL_PROFIL_SITE=="CLIN-GCD-RM") && geo_area.length>=2)
		{
			if (geo_area.position("North America") instanceof NUMBER)
			{
				hash_site.set(def_site.SP_AA_S_CL_ID_ACT_FIELD,"USA")
			}
			else
			{
				if (def_site.SP_AA_S_CL_PROFIL_SITE=="CLIN-GCD-RM")
				{
					hash_site.set(def_site.SP_AA_S_CL_ID_ACT_FIELD,"France")	
				}
				else
				{
					hash_site.set(def_site.SP_AA_S_CL_ID_ACT_FIELD,"USA")
				}
			}				
		}
		else
		{
			if (hash_site.get(def_site.SP_AA_S_CL_ID_ACT_FIELD) instanceof STRING)
			{
				def_res_site=hash_site.get(def_site.SP_AA_S_CL_ID_ACT_FIELD)+","+def_site.SP_AA_S_CL_SITE_DEF;
				hash_site.set(def_site.SP_AA_S_CL_ID_ACT_FIELD,def_res_site);
			}
			else
			{
				hash_site.set(def_site.SP_AA_S_CL_ID_ACT_FIELD,def_site.SP_AA_S_CL_SITE_DEF)
			}
		}
	}
	
	for (var def_site in "OpxSP_PT_CL_RES_SITE" where ( def_site.SP_AA_S_CL_INIT_TYPE=="NonTrial" &&
	(def_site.SP_AA_S_CL_RS_WBS_TYPE !="") &&
	(act.wbs_type instanceof OpxWBS_TYPE) &&
	(def_site.SP_AA_S_CL_RS_WBS_TYPE.parsevector().position(act.wbs_type.name) instanceof NUMBER )&&
	act.get(def_site.SP_AA_S_CL_ID_ACT_FIELD)=="" && 
	act.project.SP_AA_S_PJT_LEADER_SITE==def_site.SP_AA_S_CL_PRJ_SITE &&
	(geo_area.length >=2) &&
	(def_site.SP_AA_S_CL_SITE_DEF instanceof STRING && def_site.SP_AA_S_CL_SITE_DEF!="") &&
	(def_site.SP_AA_S_CL_PROFIL_SITE=="CLIN-GCD-EDS" || def_site.SP_AA_S_CL_PROFIL_SITE=="CLIN-GCD-MWR" || def_site.SP_AA_S_CL_PROFIL_SITE=="CLIN-GCD-TRA")))
	{
		/*in the above for loop, we hardcode the value of resources(CLIN-GCD-EDS,CLIN-GCD-MWR,CLIN-GCD-TRA) previously it was "MW"*/
		if (hash_site.get(def_site.SP_AA_S_CL_ID_ACT_FIELD) instanceof STRING)
		{
			def_res_site=hash_site.get(def_site.SP_AA_S_CL_ID_ACT_FIELD)+","+def_site.SP_AA_S_CL_SITE_DEF;
			hash_site.set(def_site.SP_AA_S_CL_ID_ACT_FIELD,def_res_site);
		}
		else
		{
			hash_site.set(def_site.SP_AA_S_CL_ID_ACT_FIELD,def_site.SP_AA_S_CL_SITE_DEF)
		}
	}
		
}
else
{
	for (var def_site in "OpxSP_PT_CL_RES_SITE" where ( def_site.SP_AA_S_CL_INIT_TYPE=="NonTrial" &&
	(def_site.SP_AA_S_CL_RS_WBS_TYPE !="") &&
	(act.wbs_type instanceof OpxWBS_TYPE) &&
	(def_site.SP_AA_S_CL_RS_WBS_TYPE.parsevector().position(act.wbs_type.name) instanceof NUMBER) &&
	act.project.SP_AA_S_PJT_LEADER_SITE==def_site.SP_AA_S_CL_PRJ_SITE &&
	act.get(def_site.SP_AA_S_CL_ID_ACT_FIELD)=="" && 
	(def_site.SP_AA_S_CL_SITE_DEF instanceof STRING && def_site.SP_AA_S_CL_SITE_DEF!="")	) )
	{
		if (hash_site.get(def_site.SP_AA_S_CL_ID_ACT_FIELD) instanceof STRING)
		{
			def_res_site=hash_site.get(def_site.SP_AA_S_CL_ID_ACT_FIELD)+","+def_site.SP_AA_S_CL_SITE_DEF;
			hash_site.set(def_site.SP_AA_S_CL_ID_ACT_FIELD,def_res_site);
		}
		else
		{
			hash_site.set(def_site.SP_AA_S_CL_ID_ACT_FIELD,def_site.SP_AA_S_CL_SITE_DEF)
		}
	}		
}	

//resource site fields initiate	
withoutlocking
{
for (var hs in hash_site)
{
act.set(hs,hash_site.get(hs).parsevector().removeduplicates().join(","));
}	
}


}
return true;
}
	
withoutlocking
{
sp_cl_default_res_sites.exportfunction();
}


//function for clinical cost

function sp_calc_CRA_IN_DAY(unused)
{
	var result=0;
	var res_f="OpxResource".get("CLIN-GRTM-LCRA");
	var list_eq;
	var vec_act=new vector();
	var trial_Id=this.sp_get_trial_id("");
	var trial="OpxActivity".get(trial_Id);
	if (trial instanceOf OpxActivity)
	{
		if (res_f instanceof OpxResource)
		{
			list_eq=res_f.get("r._PE_RA_EQUA_RES._PE_PT_EQUA_EQUATION");
			for (var eq in list_eq where eq.get("_PE_AA_EQUA_ACTIVE"))
			{
				vec_act.push(eq.get("_PE_DA_EQUA_FILTERFIELD1"));
			}
			fromobject(trial)
			{
				for (var each in "OpxActivity".findclass() where (vec_act.position(each.wbs_type.name) instanceof NUMBER) )
				{
					for (var eq_eval in list_eq where (eq_eval.get("_PE_DA_EQUA_FILTERFIELD1")==each.WBS_TYPE.NAME && each.CallBooleanFormula(eq_eval._PE_AA_EQUA_BASEFILTER) ))
					{
						if (each.get(eq_eval.get("_PE_DA_EQUA_FIELD4")+"_IN") instanceof NUMBER)
						{
							result=result+each.get(eq_eval.get("_PE_DA_EQUA_FIELD4")+"_IN");
						}
					}
				}
			}
		}	
	}
	
	return result;
}

withoutlocking
{
	sp_calc_CRA_IN_DAY.exportfunction({"STRING"},"NUMBER");
}

//Trial control 

var slot;
var size_slot;

function ClinicalCountryNotEmpty(oV, nV)
{
	var ctl=nV;
	if (ctl=="" || ctl==undefined)
	{
		alert("Country (Clin Trial) field cannot be empty");
		CancelCurrentTransaction();
	}

}


function Size_cl_scienceNotEmpty(oV, nV)
{
	var ctl=nV;
	if (ctl=="" || ctl==undefined)
	{
		alert("Size (Clinical Sciences) field cannot be empty");
		CancelCurrentTransaction();
	}

}

function ClInitialyzeResSite(oV, nV)
{
var ctl=nV;
var old_v=oV;
var cmpt=0;

	if ((old_v=="" && ctl!="" && (this Instanceof OpxActivity) && this.SP_NF_CL_TRIAL))
	{
		
		fromObject(this)
		{
			for (var act in "OpxActivity".findclass() where (act.wbs_type Instanceof OpxWBS_TYPE) )
			{
				cmpt=cmpt+1;
				act.sp_cl_default_res_sites();
			}
		}
	if (cmpt>0)
	{
	alert("Clinical Resourse sites by default are initialized within Trial :"+this.SP_NF_CL_TRIAL_CODE);
	}	
	}

}

slot ="OpxActivity".findClass().getSlot("SP_RING_CL_COUNTRY");
if ( slot Instanceof objectattribute)
{
	slot.modifybeforeMethod = ClinicalCountryNotEmpty;
	slot.modifyafterMethod = ClInitialyzeResSite;
}

size_slot="OpxActivity".findClass().getSlot("SP_AA_S_ACT_CL_SIZE");

if ( size_slot Instanceof objectattribute)
{
	size_slot.modifybeforeMethod = Size_cl_scienceNotEmpty;
}


function sp_lag_during_not_allow(oV, nV)
{
	var ctl=nV;
	if ((oV=="Extendible" || oV=="Fixed dates")&& ctl=="Lag-during" && ((this instanceOf OpxFORECAST_EXPENDITURE) && this.ACTIVITY.SP_NF_B_CLIN_ACT) )
	{
		alert("Lag-during value in Duration Computation field is not allowed for the manual cost");
		CancelCurrentTransaction();
	}

}

var dur_com_slot="OpxFORECAST_EXPENDITURE".findClass().getSlot("DURATION_COMPUTATION");

if ( dur_com_slot Instanceof objectattribute)
{
	dur_com_slot.modifybeforeMethod = sp_lag_during_not_allow;
}

function sp_cl_color_ring_at_gantt(slot)
{
var yellow = Color(245,245,220);
var arg_stat ="OpxActivity".findClass().getSlot("SP_RING_CL_STATISTICIAN");
var arg_prog ="OpxActivity".findClass().getSlot("SP_RING_CL_PROGRAMMER");
var arg_cs ="OpxActivity".findClass().getSlot("SP_RING_CL_CTL_CS");
var arg_cpm ="OpxActivity".findClass().getSlot("SP_RING_CL_CPM");
var arg_cc ="OpxActivity".findClass().getSlot("SP_RING_CL_CPM_CC");
var arg_dm ="OpxActivity".findClass().getSlot("SP_RING_CL_DATA_MANAGER"); 
var arg_cdl ="OpxActivity".findClass().getSlot("SP_RING_CL_CDL"); 
var arg_ta ="OpxActivity".findClass().getSlot("SP_RING_CL_TRIAL_ANALYST");
var arg_mw ="OpxActivity".findClass().getSlot("SP_RING_CL_MED_WRITER");
var arg_cd ="OpxActivity".findClass().getSlot("SP_RING_CL_CLINDOC");
var arg_tr ="OpxActivity".findClass().getSlot("SP_RING_CL_TRANSLATOR");
var arg_edoc ="OpxActivity".findClass().getSlot("SP_RING_CL_EDOC");
var arg_ctm ="OpxActivity".findClass().getSlot("SP_RING_CL_CTM");
var arg_cra ="OpxActivity".findClass().getSlot("SP_RING_CL_CRA");
var arg_lc ="OpxActivity".findClass().getSlot("SP_RING_CL_LOG_COORD");
var arg_copm ="OpxActivity".findClass().getSlot("SP_RING_CL_COPM");
var arg_mtl ="OpxActivity".findClass().getSlot("SP_RING_CL_GMA_MTL");
var arg_pmsl ="OpxActivity".findClass().getSlot("SP_RING_CL_PMSL");
var arg_mgr ="OpxActivity".findClass().getSlot("SP_RING_CL_REC_MGR");
// clinical re-org new profiles:
var arg_cpc_cpl ="OpxActivity".findClass().getSlot("SP_RING_CL_CPC_CPL");
var arg_gto_gtom ="OpxActivity".findClass().getSlot("SP_RING_CL_GTO_GTOM");
var arg_grtm_rtm ="OpxActivity".findClass().getSlot("SP_RING_CL_GRTM_RTM");
var arg_gto_log ="OpxActivity".findClass().getSlot("SP_RING_CL_GTO_LOG");
var arg_CPMO_CC ="OpxActivity".findClass().getSlot("SP_RING_CL_CPMO_CC");
var arg_grtm_lcra ="OpxActivity".findClass().getSlot("SP_RING_CL_GRTM_LCRA");
var arg_mwd="OpxActivity".findClass().getSlot("SP_RING_CL_MWD");

if (slot Instanceof objectattribute)
{
	if ( slot.descriptor.Name==arg_stat.descriptor.Name && this.SP_NF_B_CL_IS_STAT)
	{
		return yellow;
	}
	if ( slot.descriptor.Name==arg_cdl.descriptor.Name && this.SP_NF_B_CL_IS_CDL)
	{
		return yellow;
	}
	if ( slot.descriptor.Name==arg_prog.descriptor.Name && this.SP_NF_B_CL_IS_PROG)
	{
		return yellow;
	}
	if ( slot.descriptor.Name==arg_cs.descriptor.Name && this.SP_NF_B_CL_IS_CTL)
	{
		return yellow;
	}
		if ( slot.descriptor.Name==arg_cpm.descriptor.Name && this.SP_NF_B_CL_IS_CPM)
	{
		return yellow;
	}
		if ( slot.descriptor.Name==arg_cc.descriptor.Name && this.SP_NF_B_CL_IS_C_COORD)
	{
		return yellow;
	}
		if ( slot.descriptor.Name==arg_dm.descriptor.Name && this.SP_NF_B_CL_IS_DATA_MGR)
	{
		return yellow;
	}
		if ( slot.descriptor.Name==arg_ta.descriptor.Name && this.SP_NF_B_CL_IS_ANALYST)
	{
		return yellow;
	}
		if ( slot.descriptor.Name==arg_mw.descriptor.Name && this.SP_NF_B_CL_IS_LOG_MED_WRT)
	{
		return yellow;
	}
		if ( slot.descriptor.Name==arg_cd.descriptor.Name && this.SP_NF_B_CL_IS_DOCC)
	{
		return yellow;
	}
		if ( slot.descriptor.Name==arg_tr.descriptor.Name && this.SP_NF_B_CL_IS_TRANSLAT)
	{
		return yellow;
	}
		if ( slot.descriptor.Name==arg_edoc.descriptor.Name && this.SP_NF_B_CL_IS_EDOC)
	{
		return yellow;
	}
		if ( slot.descriptor.Name==arg_ctm.descriptor.Name && this.SP_NF_B_CL_IS_CTM)
	{
		return yellow;
	}
		if ( slot.descriptor.Name==arg_cra.descriptor.Name && this.SP_NF_B_CL_IS_CRA)
	{
		return yellow;
	}
		if ( slot.descriptor.Name==arg_lc.descriptor.Name && this.SP_NF_B_CL_IS_LOG_COORD)
	{
		return yellow;
	}
		if ( slot.descriptor.Name==arg_copm.descriptor.Name && this.SP_NF_B_CL_IS_PPO_COPM)
	{
		return yellow;
	}
		if ( slot.descriptor.Name==arg_mtl.descriptor.Name && this.SP_NF_B_CL_IS_GMA_MTL)
	{
		return yellow;
	}
		if ( slot.descriptor.Name==arg_pmsl.descriptor.Name && this.SP_NF_B_CL_IS_PMSL)
	{
		return yellow;
	}
		if ( slot.descriptor.Name==arg_mgr.descriptor.Name && this.SP_NF_B_CL_IS_REC_MGR)
	{
		return yellow;
	}
	
	if ( slot.descriptor.Name==arg_cpc_cpl.descriptor.Name && this.SP_NF_B_CL_IS_CPCCPL)
	{
		return yellow;
	}
	if ( slot.descriptor.Name==arg_gto_gtom.descriptor.Name && this.SP_NF_B_CL_IS_GTOGTOM)
	{
		return yellow;
	}
	if ( slot.descriptor.Name==arg_grtm_rtm.descriptor.Name && this.SP_NF_B_CL_IS_GRTMRTM)
	{
		return yellow;
	}
	if ( slot.descriptor.Name==arg_gto_log.descriptor.Name && this.SP_NF_B_CL_IS_GTOLOG)
	{
		return yellow;
	}
	if ( slot.descriptor.Name==arg_CPMO_CC.descriptor.Name && this.SP_NF_B_CL_IS_CPMOCC)
	{
		return yellow;
	}
	if ( slot.descriptor.Name==arg_grtm_lcra.descriptor.Name && this.SP_NF_B_CL_IS_GRTMLCRA)
	{
		return yellow;
	}
	if ( slot.descriptor.Name==arg_mwd.descriptor.Name && this.SP_NF_B_CL_IS_MWD)
	{
		return yellow;
	}
}	


}

function sp_get_outsourced_profile_desc()
{
	var cur_act=this;
	var profile_desc=new vector();
	var result="";
	if (cur_act instanceof Opxactivity && cur_act.SP_NF_B_OBS_CLIN_ACT)
	{
		fromobject(cur_act)
		{
			for (var act in "OpxActivity".findclass() where act.SP_NF_B_OBS_CLIN_ACT)
			{
				for (var ph in act.ALLOCATIONS where ((ph.resource instanceof OpxRESOURCE ) && (ph.COST_ACCOUNT.NAME=="FTE_METRICS" || ph.COST_ACCOUNT.NAME=="FTE_ESTIMATED")))
				{	
					if (ph.SP_NF_CL_OUTSOURCED_PH && !(profile_desc.position(ph.resource.description) instanceof NUMBER))
					{
						profile_desc.push(ph.resource.description);
					}
				}
			}
		}
		

	}
	profile_desc=profile_desc.sort("<");
	if (profile_desc.length>0)
	{
	result=profile_desc.JOIN(",");
	}
	
	return result;
}
sp_get_outsourced_profile_desc.exportfunction("","STRING");


function sp_clinical_outsourced_reader()
{
	var o_ph = this
	var o_act = o_ph.ACTIVITY;
	var o_res = o_ph.RES;
	var field_name = SP_CLIN_MAP_RES_INFO(o_res);
	var field_res = o_act.get(field_name);
	// Default return is false
	var result = false;

	if (field_res!="" && field_res!=undefined) 
	{
		for (var each in field_res.parselist())
		{
			// If at least one resource is outsourced return true
			if (each == "Outsourced")
			{
				result = true;
				break;
			}
		}
	}
	return result;
}

function sp_clinical_outsourced_modifier(new)
{
	var o_ph = this
	var o_act = o_ph.ACTIVITY;
	var o_res = o_ph.RES;
	var field_name = SP_CLIN_MAP_RES_INFO(o_res);
	var field_res = o_act.get(field_name);
	var vresult = new vector();
	var vbool = false;
	var result;

	if ( (field_name!="" && field_name!=undefined) &&   (o_ph !=undefined && o_ph!="" && ((o_ph Instanceof OpxHoursAndExpendituresSummary) || (o_ph Instanceof OpxAllocation))) && o_act instanceof OpxActivity && (field_res!="" && field_res!=undefined))
	{
		if (field_res!="" && field_res!=undefined) 
		{
			for (var each in field_res.parselist())
			{
				if (each == "Outsourced")
				{
					vbool = true;
				}
			}
			vresult = field_res.parselist();
		}
		// If there is already outsourced we remove this value
		if (vbool)
		{
			var newresult = vresult.parsevector();		
			vresult = newresult.remove("Outsourced").parselist();
			vresult = vresult.removeduplicates();
			result = vresult.join(",");
		}
		// If not we add it
		else
		{
			vresult.push("Outsourced");
			vresult = vresult.removeduplicates();
			result = vresult.join(",");
		}
		withoutlocking
		{
			o_act.set(field_name,result);
		}
	}
}

var outsourced_clin = new objectAttribute("OpxAllocation","SP_DA_CLIN_OUTSOURCED","BOOLEAN");
outsourced_clin.comment = "Outsourced (Clin)";
outsourced_clin.reader = sp_clinical_outsourced_reader;
outsourced_clin.modifier = sp_clinical_outsourced_modifier;

function f_test(SIT,s_equation,vect_ph,obj,vect_met_field,total_load_cal,tr_ratio,tr_o,tr_id,hash_cl,v_cl)
{
if (v_cl.length >0)
{
	for (var e in v_cl where ((v_cl.position(e) instanceof NUMBER) && (v_cl.position(e)%2==0)) )
	{
	hash_cl.set(e,v_cl.get(e));
	}
}
for (var cl in hash_cl)
{
	tr_id=hash_cl.get(cl).parseint();
	tr_o="OpxSP_PT_CL_TRANSLATION_FTE".findclass().get(tr_id);
	if (tr_o instanceof OpxSP_PT_CL_TRANSLATION_FTE)
	{
		tr_ratio=100;
		//((o_act.SP_NF_CL_NB_SITES_TRANS instanceof NUMBER) && (o_act.SP_NF_CL_NB_SITES_TRANS>1)) )
		
		if ((tr_o.SP_AA_N_CL_TRANS_PERCENT instanceof NUMBER) && (tr_o.SP_AA_N_CL_TRANS_PERCENT>=0))
		{
			tr_ratio=tr_o.SP_AA_N_CL_TRANS_PERCENT;
		}
	//update allocations
		//total_load_cal=tr_o.get(vect_met_field.get(obj.SP_RA_METRIC.name))/o_act.SP_NF_CL_NB_SITES_TRANS;
		total_load_cal=tr_o.get(vect_met_field.get(obj.SP_RA_METRIC.name)) * (tr_ratio /100);
		if (total_load_cal instanceof NUMBER )
		{
			
			if (vect_ph.get(cl) instanceof OpxPlannedHours)
			{
				if (vect_ph.get(cl).COST_ACCOUNT.name=="FTE_METRICS")
				{
					context.SP_AA_B_AL_LO_ACTIVE=true;
					vect_ph.get(cl).TOTAL_LOAD=total_load_cal;
					vect_ph.get(cl).SP_AA_S_PH_CL_LANGUAGE=tr_o.SP_AA_CL_LANGUAGES;
					vect_ph.get(cl).SP_AA_S_PH_CL_COUNTRY=tr_o.Name;
					context.SP_AA_B_AL_LO_ACTIVE=false;
				}
				else
				{
					if ((!vect_ph.get(cl).EQUATION_OVERRIDE) && (vect_ph.get(cl).COST_ACCOUNT.NAME=="FTE_ESTIMATED"))
					{
						context.SP_AA_B_AL_LO_ACTIVE=true;
						vect_ph.get(cl).TOTAL_LOAD=total_load_cal;
						vect_ph.get(cl).COST_ACCOUNT=obj.COST_ACCOUNT;
						vect_ph.get(cl).SP_AA_S_PH_CL_LANGUAGE=tr_o.SP_AA_CL_LANGUAGES;
						vect_ph.get(cl).SP_AA_S_PH_CL_COUNTRY=tr_o.Name;
						context.SP_AA_B_AL_LO_ACTIVE=false;	
					}
				}	
				if (vect_ph.get(cl).SP_AA_S_PH_CL_EQU_ORI!=s_equation) 
					vect_ph.get(cl).SP_AA_S_PH_CL_EQU_ORI=s_equation;
			}
			// Create allocations
			else
			{
				context.SP_AA_B_AL_LO_ACTIVE=true;
				new OpxPlannedHours
					("TotalLoad",total_load_cal,
					"TaskOrWbsElement",obj.TaskOrWbsElement,
					"Site",sit,
					"Resource",obj.Resource,
					"COMMENT",obj.COMMENT,
					"SP_AA_S_PH_CL_LANGUAGE",tr_o.SP_AA_CL_LANGUAGES,
					"SP_AA_S_PH_CL_COUNTRY",tr_o.Name,
					"FixedRate",FALSE,
					"DurationComputation","Extendible",
					"CostAccount","FTE_METRICS",
					"SP_AA_S_PH_CL_EQU_ORI",s_equation);
				context.SP_AA_B_AL_LO_ACTIVE=false;
			}
		}
	}

}
}

writetolog("Script SP_JS_CL_FTE_METRICS loaded with version ~a ", revision_number);

 
var vect=new vector("SP_NF_CL_TRIAL","SP_NF_B_ACT_IS_CDPR","SP_NF_B_ACT_IS_PARTNERSHIP_MGT");
var vect_type_cat=new vector("SP_NF_CL_TRIAL","SP_NF_B_CA_TRIAL_COST_CATEGORY","SP_NF_B_ACT_IS_CDPR","SP_NF_B_CA_CDPR_COST_CATEGORY","SP_NF_B_ACT_IS_PARTNERSHIP_MGT","SP_NF_B_CA_PARTNERSHIP_COST_CATEGORY");
var cat;
var info;
var act=this;
var sInfo_ID;
var oInfo ;

if (act instanceof OpxActivity )
{
	for (var v in vect where act.get(v))
	{
		cat=vect_type_cat.get(v);
	
	}
	if (cat instanceof STRING)
	{
		for (var cc in "OpxCOST_ACCOUNT".findclass() where ((cc.get(cat) instanceof BOOLEAN) && (cc.get(cat))) )
		{
			
			sInfo_ID = SP_get_TCCI_identifier(act,cc.name);
			oInfo = "OpxSP_PT_TRIAL_CAT_COST_INFO".get(sInfo_ID);
			if (oInfo instanceof OpxSP_PT_TRIAL_CAT_COST_INFO)
			{
				break;
			}
			else
			{
				info=act.SP_checkExistenceOfCategoryInformation(cc.name);
			}
		}
		
	}
}
var vect=new vector("SP_NF_CL_TRIAL","SP_NF_B_ACT_IS_CDPR","SP_NF_B_ACT_IS_PARTNERSHIP_MGT");
var vect_type_cat=new vector("SP_NF_CL_TRIAL","SP_NF_B_CA_TRIAL_COST_CATEGORY","SP_NF_B_ACT_IS_CDPR","SP_NF_B_CA_CDPR_COST_CATEGORY","SP_NF_B_ACT_IS_PARTNERSHIP_MGT","SP_NF_B_CA_PARTNERSHIP_COST_CATEGORY");
var cat;
var info;
var act=this;
var sInfo_ID;
var oInfo ;

if (act instanceof OpxActivity )
{
	for (var v in vect where act.get(v))
	{
		cat=vect_type_cat.get(v);
	
	}
	if (cat instanceof STRING)
	{
		for (var cc in "OpxCOST_ACCOUNT".findclass() where ((cc.get(cat) instanceof BOOLEAN) && (cc.get(cat))) )
		{
			
			sInfo_ID = SP_get_TCCI_identifier(act,cc.name);
			oInfo = "OpxSP_PT_TRIAL_CAT_COST_INFO".get(sInfo_ID);
			if (oInfo instanceof OpxSP_PT_TRIAL_CAT_COST_INFO)
			{
				break;
			}
			else
			{
				info=act.SP_checkExistenceOfCategoryInformation(cc.name);
			}
		}
		
	}
}
 
//  AUTHOR  : YSA
//  VERSION : 1.7
//  SP_JS_CL_INIT_FIELDS.ojs
//  PURPOSE : Initialize filter fields to use in clinical fte sites

// HISTORY :
var revision_number ="1.9";
//
// Revision 1.9 2020/06/12 MBL
// CLIN-CDV-CTL/CS replaced by CLIN-GCS-CTL
//
// Revision 1.8 2020/06/12 KSH
// CLIN-GCD-MWD has been created to wbs per profils filter fof clinical
//
// Revision 1.7 2020/02/18 ASP
// CLIN-DOC-RM,CLIN-DOC-CDC,CLIN-MW-EDS,CLIN-MW-MWR and CLIN-MW-TRA removed from this scripts and replaced by CLIN-GCD-RM,CLIN-GCD-CDC,CLIN-GCD-EDS,CLIN-GCD-MWR and CLIN-GCD-TRA
//
//

// Revision 1.6 2019/09/12 CKE
//  CLIN-BS-PROG
 and 
CLIN-BS-STAT
 removed from these scripts and replaced by "GBS-CLIN-PROG" & "GBS-CLIN-STAT"
//
//Revision 1.5 2019/11/05 SKJ
// Additing of  SP_GS_S_FILTER_CDL and comment of SP_GS_S_FILTER_DMG & CTA for RITM1369584 TEMPO - Review of CDM profiles and adjustments of FTE cost metrics
// Revision 1.4 2019/09/12 bcordel
// CLIN-CDV-CTL/CS replaced by CLIN-GCS-CTL and CLIN-CPC-CPL replaced by CLIN-CPL-CPL
//------- OLD history ---------
//  Created  by ysa 11:16 30-12-2016
//  Modified  by ysa 17:32 24-05-2017 
//	Modified by mrochas 17:41 07-09-2018 : Clinical re-org : set of settings linked to new profiles + add new profils in vec_res_profile
// Revision 1.3 2018/09/19 mrochas
// CPMO-FIN-CC changes into CLIN-CPMO-CC



function sp_act_filter_atc_type(file,template)
{
	var f="OpxCOMMON_FILE".get(file);
	var vec_tmp;
	var ht = new hashtable("string");
	var list_act_type="";
	if (f instanceof OpxCOMMON_FILE)
	{
		fromobject(f)
		{
			for (var eq in "opx_PE_PT_EQUA_EQUATION".findclass() where (eq.get("_PE_AA_EQUA_ACTIVE") instanceof BOOLEAN && 
			eq.get("_PE_AA_EQUA_ACTIVE")  && 
			eq._PE_RA_EQUA_EQET instanceof Opx_PE_PT_EQUA_EQUATEMP && 
			eq._PE_RA_EQUA_EQET.name==template ) )
			{
				if ( (eq._PE_RA_EQUA_RES instanceof OpxRESOURCE) && (eq._PE_DA_EQUA_FILTERFIELD1 instanceof STRING) && (eq._PE_DA_EQUA_FILTERFIELD1!=""))
				{
					if (ht.get(eq._PE_RA_EQUA_RES.name) instanceof VECTOR)
					{
						
						vec_tmp=ht.get(eq._PE_RA_EQUA_RES.name);
						if (! (vec_tmp.position(eq._PE_DA_EQUA_FILTERFIELD1) instanceof NUMBER))
						{
							vec_tmp.push(eq._PE_DA_EQUA_FILTERFIELD1);
							ht.set(eq._PE_RA_EQUA_RES.name,vec_tmp);
						}
							
					}
					else{
						
						ht.set(eq._PE_RA_EQUA_RES.name,new vector(eq._PE_DA_EQUA_FILTERFIELD1));	
					}
					
				}
			}
		}
		
	}

	return ht;
}

function sp_list_atc_type_by_profile(profile)
{
	var result="";
	var ht=sp_act_filter_atc_type("EQUATION_CLIN_FTE","SP_CL_EQ_TEMPLATE");
	var list_act=new vector();

	list_act=ht.get(profile);

	if (list_act instanceof VECTOR && list_act.length>0)
	{
		result=list_act.join(",");
	}

	return result;
}

// init settings: wbs per profils filter fof clinical

context.SP_GS_S_FILTER_PROG=sp_list_atc_type_by_profile("GBS-CLIN-PROG");
context.SP_GS_S_FILTER_TRANSL=sp_list_atc_type_by_profile("CLIN-GCD-TRA");
context.SP_GS_S_FILTER_STAT=sp_list_atc_type_by_profile("GBS-CLIN-STAT")
context.SP_GS_S_FILTER_REC_MGR=sp_list_atc_type_by_profile("CLIN-GCD-RM");
context.SP_GS_S_FILTER_RCTM=sp_list_atc_type_by_profile("CLIN-SML-RCTM");
context.SP_GS_S_FILTER_PPO_COPM=sp_list_atc_type_by_profile("PPO-COPM");
context.SP_GS_S_FILTER_PMSL=sp_list_atc_type_by_profile("PPO-PMSL");
context.SP_GS_S_FILTER_MED=sp_list_atc_type_by_profile("CLIN-GCD-MWR");
context.SP_GS_S_FILTER_LOGC=sp_list_atc_type_by_profile("CLIN-SML-LOG");
context.SP_GS_S_FILTER_GMA_MTL=sp_list_atc_type_by_profile("GMA-MTL");
context.SP_GS_S_FILTER_EDOC=sp_list_atc_type_by_profile("CLIN-GCD-EDS");
context.SP_GS_S_FILTER_DOCC=sp_list_atc_type_by_profile("CLIN-GCD-CDC");
//context.SP_GS_S_FILTER_DATA_MGR=sp_list_atc_type_by_profile("CLIN-CDM-DMG");
context.SP_GS_S_FILTER_CTM=sp_list_atc_type_by_profile("CLIN-SML-CTM");
context.SP_GS_S_FILTER_CTL=sp_list_atc_type_by_profile("CLIN-GCS-CTL");
context.SP_GS_S_FILTER_CRA=sp_list_atc_type_by_profile("CLIN-SML-LCRA");
context.SP_GS_S_FILTER_CPM=sp_list_atc_type_by_profile("CLIN-CPM-CPM");
context.SP_GS_S_FILTER_COORD=sp_list_atc_type_by_profile("CLIN-CPM-CC");
//context.SP_GS_S_FILTER_ANALYST=sp_list_atc_type_by_profile("CLIN-CDM-CTA"); 
context.SP_GS_S_FILTER_CDL=sp_list_atc_type_by_profile("CLIN-CDM-CDL");
// Clinical re-org : set of settings linked to new profiles
context.SP_GS_S_FILTER_CPCCPL=sp_list_atc_type_by_profile("CLIN-CPL-CPL");
context.SP_GS_S_FILTER_GTOGTOM=sp_list_atc_type_by_profile("CLIN-GTO-GTOM");
context.SP_GS_S_FILTER_GRTMRTM=sp_list_atc_type_by_profile("CLIN-GRTM-RTM");
context.SP_GS_S_FILTER_GTOLOG=sp_list_atc_type_by_profile("CLIN-GTO-LOG");
context.SP_GS_S_FILTER_CPMOCC=sp_list_atc_type_by_profile("CLIN-CPMO-CC");
context.SP_GS_S_FILTER_GRTMLCRA=sp_list_atc_type_by_profile("CLIN-GRTM-LCRA");
context.SP_GS_S_FILTER_MWD=sp_list_atc_type_by_profile("CLIN-GCD-MWD");

//init wbs type field in clinical default resouce site table

var vec_res_profile=new vector (
"GBS-CLIN-PROG","SP_GS_S_FILTER_PROG",
"CLIN-GCD-TRA","SP_GS_S_FILTER_TRANSL",
"GBS-CLIN-STAT","SP_GS_S_FILTER_STAT",
"CLIN-GCD-RM","SP_GS_S_FILTER_REC_MGR",
"CLIN-SML-RCTM","SP_GS_S_FILTER_RCTM",
"PPO-COPM","SP_GS_S_FILTER_PPO_COPM",
"PPO-PMSL","SP_GS_S_FILTER_PMSL",
"CLIN-GCD-MWR","SP_GS_S_FILTER_MED",
"CLIN-SML-LOG","SP_GS_S_FILTER_LOGC",
"GMA-MTL","SP_GS_S_FILTER_GMA_MTL",
"CLIN-GCD-EDS","SP_GS_S_FILTER_EDOC",
"CLIN-GCD-CDC","SP_GS_S_FILTER_DOCC",
"CLIN-CDM-DMG","SP_GS_S_FILTER_DATA_MGR",
"CLIN-SML-CTM","SP_GS_S_FILTER_CTM",
"CLIN-GCS-CTL","SP_GS_S_FILTER_CTL",
"CLIN-SML-LCRA","SP_GS_S_FILTER_CRA",
"CLIN-CPM-CPM","SP_GS_S_FILTER_CPM",
"CLIN-CPM-CC","SP_GS_S_FILTER_COORD",
"CLIN-CDM-CTA","SP_GS_S_FILTER_ANALYST",
"CLIN-CPC-CPL","SP_GS_S_FILTER_CPCCPL",
"CLIN-GTO-GTOM","SP_GS_S_FILTER_GTOGTOM",
"CLIN-GRTM-RTM","SP_GS_S_FILTER_GRTMRTM",
"CLIN-GTO-LOG","SP_GS_S_FILTER_GTOLOG",
"CLIN-CPMO-CC","SP_GS_S_FILTER_CPMOCC",
"CLIN-GRTM-LCRA","SP_GS_S_FILTER_GRTMLCRA",
"CLIN-CDM-CDL","SP_GS_S_FILTER_CDL",
"CLIN-GCD-MWD","SP_GS_S_FILTER_MWD");

for (var def_site in "OpxSP_PT_CL_RES_SITE".findclass() where (vec_res_profile.get(def_site.SP_AA_S_CL_PROFIL_SITE) instanceof STRING))
{
if (context.get(vec_res_profile.get(def_site.SP_AA_S_CL_PROFIL_SITE))!="")
{
def_site.SP_AA_S_CL_RS_WBS_TYPE=context.get(vec_res_profile.get(def_site.SP_AA_S_CL_PROFIL_SITE));	
}
else
{
def_site.SP_AA_S_CL_RS_WBS_TYPE="";	
}	
}



writetolog("Script SP_JS_CL_INIT_FIELDS loaded with version ~a ", revision_number);


//  AUTHOR  : YSA
//  VERSION : 1.7
//  SP_JS_CL_INIT_FIELDS.ojs
//  PURPOSE : Initialize filter fields to use in clinical fte sites

// HISTORY :
var revision_number ="1.9";
//
// Revision 1.9 2020/06/12 MBL
// CLIN-CDV-CTL/CS replaced by CLIN-GCS-CTL
//
// Revision 1.8 2020/06/12 KSH
// CLIN-GCD-MWD has been created to wbs per profils filter fof clinical
//
// Revision 1.7 2020/02/18 ASP
// CLIN-DOC-RM,CLIN-DOC-CDC,CLIN-MW-EDS,CLIN-MW-MWR and CLIN-MW-TRA removed from this scripts and replaced by CLIN-GCD-RM,CLIN-GCD-CDC,CLIN-GCD-EDS,CLIN-GCD-MWR and CLIN-GCD-TRA
//
//

// Revision 1.6 2019/09/12 CKE
//  CLIN-BS-PROG
 and 
CLIN-BS-STAT
 removed from these scripts and replaced by "GBS-CLIN-PROG" & "GBS-CLIN-STAT"
//
//Revision 1.5 2019/11/05 SKJ
// Additing of  SP_GS_S_FILTER_CDL and comment of SP_GS_S_FILTER_DMG & CTA for RITM1369584 TEMPO - Review of CDM profiles and adjustments of FTE cost metrics
// Revision 1.4 2019/09/12 bcordel
// CLIN-CDV-CTL/CS replaced by CLIN-GCS-CTL and CLIN-CPC-CPL replaced by CLIN-CPL-CPL
//------- OLD history ---------
//  Created  by ysa 11:16 30-12-2016
//  Modified  by ysa 17:32 24-05-2017 
//	Modified by mrochas 17:41 07-09-2018 : Clinical re-org : set of settings linked to new profiles + add new profils in vec_res_profile
// Revision 1.3 2018/09/19 mrochas
// CPMO-FIN-CC changes into CLIN-CPMO-CC



function sp_act_filter_atc_type(file,template)
{
	var f="OpxCOMMON_FILE".get(file);
	var vec_tmp;
	var ht = new hashtable("string");
	var list_act_type="";
	if (f instanceof OpxCOMMON_FILE)
	{
		fromobject(f)
		{
			for (var eq in "opx_PE_PT_EQUA_EQUATION".findclass() where (eq.get("_PE_AA_EQUA_ACTIVE") instanceof BOOLEAN && 
			eq.get("_PE_AA_EQUA_ACTIVE")  && 
			eq._PE_RA_EQUA_EQET instanceof Opx_PE_PT_EQUA_EQUATEMP && 
			eq._PE_RA_EQUA_EQET.name==template ) )
			{
				if ( (eq._PE_RA_EQUA_RES instanceof OpxRESOURCE) && (eq._PE_DA_EQUA_FILTERFIELD1 instanceof STRING) && (eq._PE_DA_EQUA_FILTERFIELD1!=""))
				{
					if (ht.get(eq._PE_RA_EQUA_RES.name) instanceof VECTOR)
					{
						
						vec_tmp=ht.get(eq._PE_RA_EQUA_RES.name);
						if (! (vec_tmp.position(eq._PE_DA_EQUA_FILTERFIELD1) instanceof NUMBER))
						{
							vec_tmp.push(eq._PE_DA_EQUA_FILTERFIELD1);
							ht.set(eq._PE_RA_EQUA_RES.name,vec_tmp);
						}
							
					}
					else{
						
						ht.set(eq._PE_RA_EQUA_RES.name,new vector(eq._PE_DA_EQUA_FILTERFIELD1));	
					}
					
				}
			}
		}
		
	}

	return ht;
}

function sp_list_atc_type_by_profile(profile)
{
	var result="";
	var ht=sp_act_filter_atc_type("EQUATION_CLIN_FTE","SP_CL_EQ_TEMPLATE");
	var list_act=new vector();

	list_act=ht.get(profile);

	if (list_act instanceof VECTOR && list_act.length>0)
	{
		result=list_act.join(",");
	}

	return result;
}

// init settings: wbs per profils filter fof clinical

context.SP_GS_S_FILTER_PROG=sp_list_atc_type_by_profile("GBS-CLIN-PROG");
context.SP_GS_S_FILTER_TRANSL=sp_list_atc_type_by_profile("CLIN-GCD-TRA");
context.SP_GS_S_FILTER_STAT=sp_list_atc_type_by_profile("GBS-CLIN-STAT")
context.SP_GS_S_FILTER_REC_MGR=sp_list_atc_type_by_profile("CLIN-GCD-RM");
context.SP_GS_S_FILTER_RCTM=sp_list_atc_type_by_profile("CLIN-SML-RCTM");
context.SP_GS_S_FILTER_PPO_COPM=sp_list_atc_type_by_profile("PPO-COPM");
context.SP_GS_S_FILTER_PMSL=sp_list_atc_type_by_profile("PPO-PMSL");
context.SP_GS_S_FILTER_MED=sp_list_atc_type_by_profile("CLIN-GCD-MWR");
context.SP_GS_S_FILTER_LOGC=sp_list_atc_type_by_profile("CLIN-SML-LOG");
context.SP_GS_S_FILTER_GMA_MTL=sp_list_atc_type_by_profile("GMA-MTL");
context.SP_GS_S_FILTER_EDOC=sp_list_atc_type_by_profile("CLIN-GCD-EDS");
context.SP_GS_S_FILTER_DOCC=sp_list_atc_type_by_profile("CLIN-GCD-CDC");
//context.SP_GS_S_FILTER_DATA_MGR=sp_list_atc_type_by_profile("CLIN-CDM-DMG");
context.SP_GS_S_FILTER_CTM=sp_list_atc_type_by_profile("CLIN-SML-CTM");
context.SP_GS_S_FILTER_CTL=sp_list_atc_type_by_profile("CLIN-GCS-CTL");
context.SP_GS_S_FILTER_CRA=sp_list_atc_type_by_profile("CLIN-SML-LCRA");
context.SP_GS_S_FILTER_CPM=sp_list_atc_type_by_profile("CLIN-CPM-CPM");
context.SP_GS_S_FILTER_COORD=sp_list_atc_type_by_profile("CLIN-CPM-CC");
//context.SP_GS_S_FILTER_ANALYST=sp_list_atc_type_by_profile("CLIN-CDM-CTA"); 
context.SP_GS_S_FILTER_CDL=sp_list_atc_type_by_profile("CLIN-CDM-CDL");
// Clinical re-org : set of settings linked to new profiles
context.SP_GS_S_FILTER_CPCCPL=sp_list_atc_type_by_profile("CLIN-CPL-CPL");
context.SP_GS_S_FILTER_GTOGTOM=sp_list_atc_type_by_profile("CLIN-GTO-GTOM");
context.SP_GS_S_FILTER_GRTMRTM=sp_list_atc_type_by_profile("CLIN-GRTM-RTM");
context.SP_GS_S_FILTER_GTOLOG=sp_list_atc_type_by_profile("CLIN-GTO-LOG");
context.SP_GS_S_FILTER_CPMOCC=sp_list_atc_type_by_profile("CLIN-CPMO-CC");
context.SP_GS_S_FILTER_GRTMLCRA=sp_list_atc_type_by_profile("CLIN-GRTM-LCRA");
context.SP_GS_S_FILTER_MWD=sp_list_atc_type_by_profile("CLIN-GCD-MWD");

//init wbs type field in clinical default resouce site table

var vec_res_profile=new vector (
"GBS-CLIN-PROG","SP_GS_S_FILTER_PROG",
"CLIN-GCD-TRA","SP_GS_S_FILTER_TRANSL",
"GBS-CLIN-STAT","SP_GS_S_FILTER_STAT",
"CLIN-GCD-RM","SP_GS_S_FILTER_REC_MGR",
"CLIN-SML-RCTM","SP_GS_S_FILTER_RCTM",
"PPO-COPM","SP_GS_S_FILTER_PPO_COPM",
"PPO-PMSL","SP_GS_S_FILTER_PMSL",
"CLIN-GCD-MWR","SP_GS_S_FILTER_MED",
"CLIN-SML-LOG","SP_GS_S_FILTER_LOGC",
"GMA-MTL","SP_GS_S_FILTER_GMA_MTL",
"CLIN-GCD-EDS","SP_GS_S_FILTER_EDOC",
"CLIN-GCD-CDC","SP_GS_S_FILTER_DOCC",
"CLIN-CDM-DMG","SP_GS_S_FILTER_DATA_MGR",
"CLIN-SML-CTM","SP_GS_S_FILTER_CTM",
"CLIN-GCS-CTL","SP_GS_S_FILTER_CTL",
"CLIN-SML-LCRA","SP_GS_S_FILTER_CRA",
"CLIN-CPM-CPM","SP_GS_S_FILTER_CPM",
"CLIN-CPM-CC","SP_GS_S_FILTER_COORD",
"CLIN-CDM-CTA","SP_GS_S_FILTER_ANALYST",
"CLIN-CPC-CPL","SP_GS_S_FILTER_CPCCPL",
"CLIN-GTO-GTOM","SP_GS_S_FILTER_GTOGTOM",
"CLIN-GRTM-RTM","SP_GS_S_FILTER_GRTMRTM",
"CLIN-GTO-LOG","SP_GS_S_FILTER_GTOLOG",
"CLIN-CPMO-CC","SP_GS_S_FILTER_CPMOCC",
"CLIN-GRTM-LCRA","SP_GS_S_FILTER_GRTMLCRA",
"CLIN-CDM-CDL","SP_GS_S_FILTER_CDL",
"CLIN-GCD-MWD","SP_GS_S_FILTER_MWD");

for (var def_site in "OpxSP_PT_CL_RES_SITE".findclass() where (vec_res_profile.get(def_site.SP_AA_S_CL_PROFIL_SITE) instanceof STRING))
{
if (context.get(vec_res_profile.get(def_site.SP_AA_S_CL_PROFIL_SITE))!="")
{
def_site.SP_AA_S_CL_RS_WBS_TYPE=context.get(vec_res_profile.get(def_site.SP_AA_S_CL_PROFIL_SITE));	
}
else
{
def_site.SP_AA_S_CL_RS_WBS_TYPE="";	
}	
}



writetolog("Script SP_JS_CL_INIT_FIELDS loaded with version ~a ", revision_number);


 
//  AUTHOR  : YSA
//  VERSION : 1.0
//  PURPOSE : COMPASS v6 , Object relation used on Reporting Clinical KTI spreadsheet and tracking
//  Created  by YSA 18:08 09/11/2017
//  NAME JS : SP_JS_CL_RELATION_OBJECT_REPORTING


function sp_cl_slect_trial_only(f)
{
	var vect_trial=new vector("CLI0","CLI1","CLI2","CLI4","CLI3","EPI1","EPI2");
	var trial_wbs;
	
	for (var v in vect_trial)
	{
		trial_wbs="OpxWBS_TYPE".get(v);
		if(trial_wbs instanceof OpxWBS_TYPE)
		{
			fromObject(trial_wbs)
			{
				for(var act in "OpxActivity".findclass() where act.wbs_type==trial_wbs)
				{
					f.call(act);
				}
						
			}
		}	
	}
}
	
var sp_kti_spreadsheet = new ObjectRelation("Opxopx2context","SP_REL_CL_KTI_SPREADSHEET");
sp_kti_spreadsheet.MapMethod = "sp_cl_slect_trial_only";
sp_kti_spreadsheet.ConnectedToClass = "OpxActivity";
sp_kti_spreadsheet.comment = "Clinical Activity - KTI SPREADSHEET";

//  AUTHOR  : YSA
//  VERSION : 1.0
//  PURPOSE : COMPASS v6 , Object relation used on Reporting Clinical KTI spreadsheet and tracking
//  Created  by YSA 18:08 09/11/2017
//  NAME JS : SP_JS_CL_RELATION_OBJECT_REPORTING


function sp_cl_slect_trial_only(f)
{
	var vect_trial=new vector("CLI0","CLI1","CLI2","CLI4","CLI3","EPI1","EPI2");
	var trial_wbs;
	
	for (var v in vect_trial)
	{
		trial_wbs="OpxWBS_TYPE".get(v);
		if(trial_wbs instanceof OpxWBS_TYPE)
		{
			fromObject(trial_wbs)
			{
				for(var act in "OpxActivity".findclass() where act.wbs_type==trial_wbs)
				{
					f.call(act);
				}
						
			}
		}	
	}
}
	
var sp_kti_spreadsheet = new ObjectRelation("Opxopx2context","SP_REL_CL_KTI_SPREADSHEET");
sp_kti_spreadsheet.MapMethod = "sp_cl_slect_trial_only";
sp_kti_spreadsheet.ConnectedToClass = "OpxActivity";
sp_kti_spreadsheet.comment = "Clinical Activity - KTI SPREADSHEET";

 
//Script to retrieve the Clinical trial information on activities of the trial
//  Date 2020/02/18 #2045 - Merge of CDOC and MW -- CLIN-MW-TRA removed from this scripts and replaced by CLIN-GCD-TRA
// MF 19-AVR-07: Change Trial Code to take into account activities with Activity type Clin
// MF 17-APR-07 : performance improvement : add function Sp_get_act_type
// MF 17-APR-07: performance improvement : add function Sp_get_trial_ID
// MF 6-MAR-07: update functions Sp_get_activity_step_extraction, Sp_get_activity_step and Sp_get_trial_info in order to work on activities that have an OBS Element Clin (instead of Activity type Clin)
// MF 10-JAN-07 : add function for remove of clinical re-estimations
// MF 10-JAN-07: correct function is_fte_reestimated to take into account Metric BS
// MF 9-JAN-07: remove functions for FTE In and Out
// MF 8-JAN-07: ADd function to retrieve Step for FTE Extraction (include Prepare Study)
// MF 21-DEC-06: Add function to calculate load for Translator
// MF 21-DEC-06: Change function sp_is_fte_reestimated() to take into account the fact that we remove Planned hours when re-estimating
// EP 18-DEC-06: add Hashtable implementation to store the named formula references.
// MF 18-DEC-06: add function to retrieve the first step in chronological order
// MF 15-DEC-06: performance improvement of functions Sp_get_trial_info and Sp_get_activity_step
// MF 12-DEC-06: correction in function Sp_get_activity_step()
// EP 07-DEC-06: script update ; Adding the Sp_get_activity_step() function returning the step name of the current activity
// MF 29-NOV-06: script update to be able to use Sp_get_trial_info on activity or Hours and exp summary
// MF 5-OCT-06: script update for function sp_get_act_date_out which did not work when CONDUCT was under LTFUP
// MF 29-SEP-06: script update to add a function to get metrics value from estimated : sp_fte_metrics_from_estimate
// MF 30-AUG-06: script update to retrieve the date of DBCLIN inside another WBS Element
// MF 7-AUG-06: script update to retrieve dates from another activity in the same WBS
// MF 28-JUL-06: script update (add function to see if FTE has been re-estimated)
// MF 24-JUL-06 : script creation
//YS 17-03-14: Optimization of Sp_cl_calculate_trans_load function SP3 migration Project
//YS 09/12/2014: Add sp_is_stat_bsprep_out function, STAT Clin metric calculation (S_BSPREP)
//YS 11/30/2015 452 Clinical sciences fte: Add Sp_get_CDPR_PFUYRX_ID function
//YS 06/08/2016 COMPASS planisware V6 Project
// Modified by YSA 16:22 24 May 2017
//SP_JS_CL_TRIAL_INFO
//YSA 03/11/2017 update sp_js_get_act_date_by_wbs_type_on_gci function
//MAG 24/08/2018 -ITS-INC1092092-Added sp_js_get_act_date_by_wbs_type_UBL_STAT_DBL_on_trial function for calculating First,Middle & last Planned finish for UBL,STAT&DBL activity type
//MBL 23/05/2019 - ITS-INC2520796 - Modification of Sp_Cl_Complexity_Factor to add a control on CF existence
//ckeita 20/12/2019 RITM1410622 modified function spSetCRFDefaultValues(act)

//--------------------------------
// 2016-08-01 : import MPA pour S2
//--------------------------------
function Sp_get_trial_ID(field)
{
	var result = "";
	var cur_act;
	if (this InstanceOf OpxActivity)
	{
		cur_act = this;
	}
	else
	{
		cur_act = this.ACTIVITY;
	}
	if (cur_act != undefined && cur_act Instanceof OpxActivity)
	{
		if (cur_act != undefined && cur_act Instanceof OpxActivity)
		{
			var act_level = cur_act.LEVEL;
			var exit=0;
			while (act_level >= 1 && (cur_act.SP_NF_B_OBS_CLIN_ACT || cur_act.SP_NF_B_CLIN_ACT) && exit == 0)
			{
				if (cur_act.SP_NF_CL_TRIAL)
				{
					if (field != "")
					{
						result = cur_act.get(field);
					}
					else
					{
						result = cur_act.CallStringFormula("ID");

					}
					exit = 1;
				}
				else
				{
					cur_act   = cur_act.WBS_ELEMENT;
					act_level = cur_act.LEVEL;
				}
			}
		}
	}
	return result;
}

withoutlocking {
	Sp_get_trial_ID.exportfunction({"STRING"},"STRING");
}


//--------------------------------
// 2016-08-01 : import MPA pour S2
//--------------------------------
function Sp_get_act_type(formula)
{
	var result = "";
	var cur_act;
	if (this InstanceOf OpxActivity)
	cur_act= this;
	else
	cur_act=this.ACTIVITY;

	if (cur_act!=undefined && cur_act Instanceof OpxActivity)
	{
		if (cur_act != undefined && cur_act Instanceof OpxActivity)
		{
			var act_level = cur_act.LEVEL;
			var exit = 0;
			while (act_level >= 1 && (cur_act.SP_NF_B_OBS_CLIN_ACT || cur_act.SP_NF_B_CLIN_ACT) && exit == 0)
			{
				if (cur_act.CallBooleanFormula(formula))
				{
					result = cur_act.CallStringFormula("ID");
					exit = 1;
				}
				else
				{
					cur_act = cur_act.WBS_ELEMENT;
					act_level = cur_act.LEVEL;
				}
			}
		}
	}
	return result;
}
withoutlocking {
	Sp_get_act_type.exportfunction({"STRING"},"STRING");
}


//--------------------------------
// 2016-08-01 : import MPA pour S2
//--------------------------------
function Sp_Cl_Complexity_Factor(platform,metric)
{
	var result = 1;
	var IndexCF = platform + "_" + metric;
	var trial = "OpxActivity".get(This.SP_GET_TRIAL_ID(""));
	if (trial != undefined && trial Instanceof OpxActivity)
	{
		var level=trial.CallStringFormula("SP_AA_CL_CF_" + platform);
		if (level!="")
		{
			var CF = "OpxClinicalComplexityFactor".get(IndexCF);
			if (CF != undefined && CF Instanceof OpxClinicalComplexityFactor) 
				result = CF.CallNumberFormula("SP_AA_CL_CF_CF" + level);
		}
	}
	return result;
}
withoutlocking {
	Sp_Cl_Complexity_Factor.exportfunction({"STRING","STRING"},"NUMBER");
}


//--------------------------------
// 2016-08-01 : import MPA pour S2
//--------------------------------
function Sp_get_activity_step_extraction(test)
{
	var result = "";
	var current_activity;
	var curr_project = this.project;

	current_activity = (this InstanceOf OpxActivity) ? this : this.ACTIVITY;

	var trial_index = current_activity.CallStringFormula("SP_NF_CL_TRIAL_ID");
	var trial = "OpxActivity".get(trial_index);

	if ( current_activity != undefined && current_activity Instanceof OpxActivity && trial != undefined && trial Instanceof OpxActivity ) {
		fromobject(trial) {
			if (current_activity != undefined && current_activity Instanceof OpxActivity) {
				var act_level = current_activity.LEVEL;
				var exit = 0;
				while (act_level >= 1 && current_activity.SP_NF_B_OBS_CLIN_ACT && exit == 0) {
					if (current_activity.SP_NF_CL_STEP_REP) {
						result = current_activity.CallStringFormula("ID");
						exit = 1;
					}
					else {
						current_activity = current_activity.WBS_ELEMENT;
						act_level = current_activity.LEVEL;
					}
				}
			}
		}
	}
	return result;
}
withoutlocking {
	Sp_get_activity_step_extraction.exportfunction({"STRING"},"STRING");
}


//--------------------------------
// 2016-08-01 : import MPA pour S2
//--------------------------------
function Sp_get_info_trial_attribute(field)
{
	var result  = "";
	var cur_act = ((this InstanceOf OpxActivity) ? this:this.ACTIVITY);

	if (cur_act != undefined && cur_act Instanceof OpxActivity) {
		var act_level = cur_act.LEVEL;
		var exit = 0;
		if (cur_act.SP_NF_B_OBS_CLIN_ACT || cur_act.SP_NF_B_CLIN_ACT) {
			while (act_level >= 1 && (cur_act.SP_NF_B_OBS_CLIN_ACT || cur_act.SP_NF_B_CLIN_ACT) && exit == 0) {
				if (cur_act.SP_NF_CL_TRIAL) {
					result = (field == "") ? cur_act.Identifier : cur_act.get(field);
					exit = 1;
				}
				else {
					cur_act   = cur_act.WBS_ELEMENT;
					act_level = cur_act.LEVEL;
				}
			}
		}
		else {
			while (act_level >= 1 && exit == 0) {
				if (cur_act.SP_NF_CL_TRIAL) {
					result = (field == "") ? cur_act.Identifier : cur_act.get(field);
					exit = 1;
				}
				else {
					cur_act   = cur_act.WBS_ELEMENT;
					act_level = cur_act.LEVEL;
				}
			}
		}
	}
	return result;
}
withoutlocking {
	Sp_get_info_trial_attribute.exportfunction({"STRING"},"STRING");
}


//--------------------------------
// 2016-08-01 : import MPA pour S2
//--------------------------------
function sp_cl_calculate_TBD(siteList)
{
	var result = "";
	var isPharma = false;
	var isPharmaChina = false;

	if (siteList != "") {
		var siteListTab = siteList.split(",");

		for (var i = 0; i < siteListTab.length; i++)
		if (siteListTab[i].trim(" ") == "Pharma")
		isPharma = true;
		else
		if (siteListTab[i].trim(" ") == "Pharma-China")
		isPharmaChina = true;

		if (isPharma == true && isPharmaChina == false)
		result = "Pharma";
		else
		if (isPharma == false && isPharmaChina == true)
		result = "Pharma-China";
		else
		if (isPharma == true && isPharmaChina == true)
		result = "Pharma,Pharma-China";
	}
	return result;
}
withoutlocking {
	sp_cl_calculate_TBD.exportfunction({"STRING"},"STRING");
}


//---------------------------------------
// sp_ojs_impact_interface_functions.ojs (2016-08-01 : import MPA pour S2)
//---------------------------------------
//Script used to create functions for IMPACT Interface
//MF 8-DEC-06 : script update following change of Step definition for Impact interface
// MF 29-NOV-06: script creation
function Sp_get_first_step_info(unused)
{
	var result  = "";
	var cur_act = this;
	var count   = 0;

	if (cur_act!=undefined && cur_act Instanceof OpxActivity) {
		fromobject(cur_act) {
			for (var act in "OpxActivity" where act.SP_NF_CL_STEP_PRIMARY_IMPACT order by {"PS"}) {
				count=1;
				result= act.index;
				break;
			}

			if (count==0) {
				for (var act in "OpxActivity" where act.SP_NF_CL_STEP_IMPACT order by {"PS"}) {
					result = act.index;
					break;
				}
			}
		}
	}
	return result;
}
withoutlocking {
	Sp_get_first_step_info.exportfunction({"STRING"},"STRING");
}


//-----------------------------------
// sp_ojs_cl_reporting_functions.ojs (2016-08-01 : import MPA pour S2)
//-----------------------------------
function SP_get_act_date_under_step(date_field,act_type)
{
	var cur_act = this;
	var result;
	var orderList = new Vector();
	orderList.push(date_field);

	if (cur_act != undefined && cur_act Instanceof OpxActivity) {
		fromobject(cur_act) {
			for (var act in "OpxActivity"
			where act.CallBooleanFormula("BELONGS(\"WBS_TYPE\",\"" + act_type + "\")") && act.get(date_field) != undefined order by orderList) {
				result = act.get(date_field);
				break;
			}
		}
	}
	return result;
}

withoutlocking {
	SP_get_act_date_under_step.exportfunction({"STRING","STRING"},"DATE");
}


//-----------------------------------
// sp_ojs_impact_interface_functions.ojs (2016-08-01 : import MPA pour S2)
//-----------------------------------
function SP_get_act_type_in_last_step(date_field, act_type1, act_type2)
{
	var cur_act = this;
	var result = -1;
	var ok = 0;
	var step_act;

	if (cur_act != undefined && cur_act Instanceof OpxActivity)
	fromobject(cur_act)
	for (var act in "OpxActivity" where act.WBS_TYPE.index == act_type1 order by {{"INVERSE","PF"}}) {
		if (ok == 0) {
			step_act = OpxActivity.get(act.SP_GET_ACTIVITY_STEP_IMPACT(""));
			fromobject(step_act)
			for (var act2 in "OpxActivity" where act2.WBS_TYPE.index == act_type2) {
				result = act2.get(date_field);
				ok = 1;
			}
		}
	}


	return result;
}
withoutlocking {
	SP_get_act_type_in_last_step.exportfunction({"STRING","STRING","STRING"}, "DATE");
}


//-----------------------------------
// sp_ojs_impact_interface_functions_ii.ojs (2016-08-01 : import MPA pour S2)
//-----------------------------------
function sp_get_date_on_step(date_field, act_type)
{
	var step = this;
	var date = -1;

	if (step!=undefined && step Instanceof OpxActivity)
	fromobject (step)
	for (var act in "OpxActivity" where act.WBS_TYPE.index == act_type order by {"PS"}) {
		date= act.get(date_field);
		break;
	}

	return date;
}

withoutlocking {
	sp_get_date_on_step.exportfunction({"STRING","STRING"}, "DATE");
}


//-----------------------------------
// sp_ojs_impact_interface_functions.ojs (2016-08-01 : import MPA pour S2)
//-----------------------------------
function Sp_get_activity_step_impact(unused)
{
	var result = "";
	var curr_project = this.project;
	var current_activity = (this InstanceOf OpxActivity) ? this : this.ACTIVITY;

	var trial_index = current_activity.CallStringFormula("SP_NF_CL_TRIAL_ID");
	var trial = "OpxActivity".get(trial_index);

	if ( current_activity != undefined && current_activity Instanceof OpxActivity && trial != undefined && trial Instanceof OpxActivity )
	fromobject(trial)
	if (current_activity != undefined && current_activity Instanceof OpxActivity) {
		var act_level = current_activity.LEVEL;
		var exit = 0;
		while (act_level >= 1 && current_activity.SP_NF_B_OBS_CLIN_ACT && exit == 0) {
			if (current_activity.SP_NF_CL_STEP_IMPACT) {
				result = current_activity.index;
				exit = 1;
			}
			else {
				current_activity = current_activity.WBS_ELEMENT;
				act_level = current_activity.LEVEL;
			}
		}
	}

	return result;
}
withoutlocking {
	Sp_get_activity_step_impact.exportfunction({"STRING"},"STRING");
}


//-----------------------------------
// sp_ojs_clin_res_functions.ojs (2016-08-02 : import MPA pour S2)
//-----------------------------------
function Sp_get_prrep_act_ID(field)
{
	var result = "";
	var cur_act = (this InstanceOf OpxActivity) ? this : this.ACTIVITY;

	if (cur_act != undefined && cur_act Instanceof OpxActivity)
	if (cur_act != undefined && cur_act Instanceof OpxActivity) {
		var act_level = cur_act.LEVEL;
		var exit = 0;
		while (act_level >= 1 && (cur_act.SP_NF_B_OBS_CLIN_ACT || cur_act.SP_NF_B_CLIN_ACT) && exit == 0)
		if (cur_act.Wbs_Type.name=="S_PRREP") {
			result = (field == "") ? cur_act.CallStringFormula("ID") : cur_act.get(field);
			exit = 1;
		}
		else {
			cur_act   = cur_act.WBS_ELEMENT;
			act_level = cur_act.LEVEL;
		}
	}
	return result;
}
withoutlocking {
	Sp_get_prrep_act_ID.exportfunction({"STRING"},"STRING");
}




//-----------------------------------
// sp_ojs_impact_interface_functions_ii.ojs (2016-08-02 : import MPA pour S2)
//-----------------------------------
function sp_get_date_on_step_by_ps_desc(date_field, act_type)
{
	var step = this;
	var date = -1;

	if (step != undefined && step Instanceof OpxActivity)
	fromobject (step)
	for (var act in "OpxActivity" where act.WBS_TYPE.index == act_type order by {{"INVERSE","PS"}}) {
		date = act.get(date_field);
		break;
	}

	return date;
}

withoutlocking {
	sp_get_date_on_step_by_ps_desc.exportfunction({"STRING", "STRING"}, "DATE");
}


//-----------------------------------
// sp_ojs_impact_interface_functions.ojs (2016-08-02 : import MPA pour S2)
//-----------------------------------
function Sp_get_act_date_first_protocol(date_field,act_type)
{
	var result = -1;
	var cur_act =this;

	if (cur_act!=undefined && cur_act Instanceof OpxActivity)
	fromobject(cur_act)
	for (var act in "OpxActivity" where act.WBS_TYPE.index == act_type order by {"PF"})
	{
		result = act.get(date_field);
		break;
	}

	return result;
}
withoutlocking {
	Sp_get_act_date_first_protocol.exportfunction({"STRING","STRING"},"DATE");
}


//-----------------------------------
// sp_ojs_cl_get_study_info.ojs (2016-08-02 : import MPA pour S2)
//-----------------------------------
function Sp_get_activity_step(test)
{
	var result = "";
	var curr_project = this.project;
	var current_activity = (this InstanceOf OpxActivity) ? this : this.ACTIVITY;

	var trial_index = current_activity.CallStringFormula("SP_NF_CL_TRIAL_ID");
	var trial = "OpxActivity".get(trial_index);

	if ( current_activity != undefined && current_activity Instanceof OpxActivity && trial != undefined && trial Instanceof OpxActivity )
	fromobject(trial)
	if (current_activity != undefined && current_activity Instanceof OpxActivity) {
		var act_level = current_activity.LEVEL;
		var exit=0;
		while (act_level >= 1 && (current_activity.SP_NF_B_OBS_CLIN_ACT || current_activity.SP_NF_B_CLIN_ACT) && exit == 0)
		if (current_activity.SP_NF_CL_STEP) {
			result = current_activity.CallStringFormula("ID");
			exit = 1;
		}
		else {
			current_activity = current_activity.WBS_ELEMENT;
			act_level = current_activity.LEVEL;
		}

	}

	return result;
}
withoutlocking {
	Sp_get_activity_step.exportfunction({"STRING"},"STRING");
}


//-----------------------------------
// sp_ojs_cl_cost_ext.ojs (2016-08-02 : import MPA pour S2)
//-----------------------------------
function Sp_get_act_type_ID(actType)
{
	var result = "";
	var cur_act = (this InstanceOf OpxActivity) ? this : this.ACTIVITY;

	if (cur_act!=undefined && cur_act Instanceof OpxActivity)
	if (cur_act != undefined && cur_act Instanceof OpxActivity) {
		var act_level = cur_act.LEVEL;
		var exit = 0;
		while (act_level >= 1 && (cur_act.SP_NF_B_OBS_CLIN_ACT || cur_act.SP_NF_B_CLIN_ACT) && exit == 0)
		if (cur_act.Wbs_Type.name == actType)
		{
			result = cur_act.CallStringFormula("ID");
			exit   = 1;
		}
		else
		{
			cur_act   = cur_act.WBS_ELEMENT;
			act_level = cur_act.LEVEL;
		}
	}
	return result;
}
withoutlocking {
	Sp_get_act_type_ID.exportfunction({"STRING"},"STRING");
}



//-----------------------------------
// sp_ojs_cl_reporting_functions.ojs (2016-08-02 : import MPA pour S2)
//-----------------------------------
function SP_get_act_inv_date_under_step(date_field,act_type)
{
	var cur_act = this;
	var result;
	var orderList = new Vector();
	orderList.push( new vector("INVERSE",date_field));

	if (cur_act != undefined && cur_act Instanceof OpxActivity)
	fromobject(cur_act)
	for (var act in "OpxActivity" where act.CallBooleanFormula("BELONGS(\"WBS_TYPE\",\""+ act_type +"\")")
	&& act.get(date_field) != undefined order by orderList )
	{
		result = act.get(date_field);
		break;
	}

	return result;
}
withoutlocking {
	SP_get_act_inv_date_under_step.exportfunction({"STRING", "STRING"}, "DATE");
}


//-----------------------------------
// sp_ojs_cl_reporting_functions.ojs (2016-08-02 : import MPA pour S2)
//-----------------------------------
function SP_get_act_finished_date_under_step(date_field, act_type)
{
	var cur_act = this;
	var result;
	var orderList = new Vector();
	orderList.push(date_field);

	if (cur_act != undefined && cur_act Instanceof OpxActivity)
	fromobject(cur_act)
	for (var act in "OpxActivity" where act.CallBooleanFormula("ELAPSED_TIME = 100 and BELONGS(\"WBS_TYPE\",\"" + act_type + "\")") && act.get(date_field) != undefined order by orderList) {
		result = act.get(date_field);
		break;
	}

	return result;
}
withoutlocking {
	SP_get_act_finished_date_under_step.exportfunction({"STRING", "STRING"}, "DATE");
}


//-----------------------------------
// sp_ojs_impact_interface_functions_ii.ojs (2016-08-03 : import MPA pour S2)
//-----------------------------------
function sp_get_date_lvls_on_step(date_field, act_type)
{
	var step = this;
	var date = -1;

	if (step != undefined && step Instanceof OpxActivity)
	fromobject (step)
	for (var act in "OpxActivity" where act.WBS_TYPE.index == act_type order by {{"INVERSE","PF"}}) {
		date = act.get(date_field);
		break;
	}

	return date;
}

withoutlocking {
	sp_get_date_lvls_on_step.exportfunction({"STRING", "STRING"}, "DATE");
}


//The count of the countries in this region: used for KTI trial

function sp_cl_nb_count_reg(region)
{
	var vect_region=new vector();	
	vect_region=Region.parsevector();
	vect_region=vect_region.removeduplicates();
	var result=0;

	for (var c in "OpxSP_PT_CL_COUNTRY" where ((c.SP_RA_CL_GEO_AREA instanceof OpxSP_PT_CL_GEO_AREA) && (vect_region.position(c.SP_RA_CL_GEO_AREA.name) instanceof NUMBER)) )
	{
		result=result+1;
	}
	return result;
}
sp_cl_nb_count_reg.exportfunction({"STRING"},"NUMBER");


//List the countries in this region - calculate from counties

function sp_cl_list_count_reg(field,Region)
{
	var cur_act = ((this InstanceOf OpxActivity) ? this:this.ACTIVITY);
	var list_countries=cur_act.get(field);
	var vect_country=new vector();
	var vect_region=new vector();
	var cl_country="";
	var result=0;
	if (list_countries instanceof STRING)
	{
		vect_country = list_countries.parsevector();
		vect_country = vect_country.removeduplicates();
		if (Region instanceof STRING && Region!="")
		{
			vect_region=Region.parsevector();
			vect_region=vect_region.removeduplicates();
		}
		
		if (vect_country.length>0 && vect_region.length>0)
		{
			for (var v in vect_country)
			{
				cl_country="OpxSP_PT_CL_COUNTRY".get(v);

				if ((cl_country instanceof OpxSP_PT_CL_COUNTRY) && (cl_country.SP_RA_CL_GEO_AREA instanceof OpxSP_PT_CL_GEO_AREA) && 
						(vect_region.position(cl_country.SP_RA_CL_GEO_AREA.name) instanceof NUMBER))
				{
					result=result+1;
					
				}
				
			}
		}
	}
	return result;
}
sp_cl_list_count_reg.exportfunction({"STRING","STRING"},"NUMBER");


//find list geographic area

function sp_clin_list_geo(field)
{
	
	var cur_act = ((this InstanceOf OpxActivity) ? this:this.ACTIVITY);
	var result="";
	var list_countries=cur_act.get(field);
	var vect_country=new vector();
	var vect_geo=new vector();
	var cl_country="";
	if (list_countries instanceof STRING)
	{
		vect_country = list_countries.parsevector();
		vect_country = vect_country.removeduplicates();
		for (var v in vect_country)
		{
			cl_country="OpxSP_PT_CL_COUNTRY".get(v);
			if ((cl_country instanceof OpxSP_PT_CL_COUNTRY) && (cl_country.SP_RA_CL_GEO_AREA instanceof OpxSP_PT_CL_GEO_AREA))
			{
				vect_geo.push(cl_country.SP_RA_CL_GEO_AREA.name);
			}
			
		}
		
		if (vect_geo.length>0)
		{
			vect_geo=vect_geo.removeduplicates();
			result=vect_geo.join(",");
		}
	}
return result;	
}
sp_clin_list_geo.exportfunction({"STRING"},"STRING");



function sp_cl_contries_in_reg(field,Region)
{
	var cur_act = ((this InstanceOf OpxActivity) ? this:this.ACTIVITY);
	var list_countries=cur_act.get(field);
	var result="";
	var vect_country=new vector();
	var vect_region=new vector();
	var vect_ctry_reg=new vector();
	var cl_country="";
	if (list_countries instanceof STRING)
	{
		vect_country = list_countries.parsevector();
		vect_country = vect_country.removeduplicates();
		vect_region=Region.parsevector();
		vect_region=vect_region.removeduplicates();


		if (vect_country.length>0 && vect_region.length>0)
		{

			for (var v in vect_country)
			{
				cl_country="OpxSP_PT_CL_COUNTRY".get(v);

				if ((cl_country instanceof OpxSP_PT_CL_COUNTRY) && (cl_country.SP_RA_CL_GEO_AREA instanceof OpxSP_PT_CL_GEO_AREA) && 
						(vect_region.position(cl_country.SP_RA_CL_GEO_AREA.name) instanceof NUMBER))
				{
					vect_ctry_reg.push(v);
					
				}
				
			}

			
			if (vect_ctry_reg.length>0)
			{
				vect_ctry_reg=vect_ctry_reg.removeduplicates();
				result=vect_ctry_reg.join(",");
			}
		}
	}
return result;
}
sp_cl_contries_in_reg.exportfunction({"STRING","STRING"},"STRING");



// NÒâ¬aÃ° Subjects expected (step) : max SP_DA_N_CL_SUB_EXP_VISIT

function sp_cl_max_field_step(field)
{
	var step=this;
	var max=0;
	if ((step instanceof OpxActivity) && (step.SP_NF_B_IS_STEP))
	{
		fromobject(step)
		{	
			for (var act in "OpxActivity" where ((act.wbs_type instanceof OpxWBS_TYPE) && (act.wbs_type.name=="S_INCL" || act.wbs_type.name=="S_FOL" || act.wbs_type.name=="S_VISIT") ) )
			{
				if ((act.get(field) instanceof NUMBER) && (act.get(field)>max) )
				{
					max=act.get(field);
				}
				
			}
		}
	}
	return max;
}
sp_cl_max_field_step.exportfunction({"STRING"},"NUMBER");


function SP_FIRST_STEP_TRIAL(act_type3) {
	var Ind="";
	fromObject(This)
	{
		for (var act in "OpxActivity" where act.WBS_TYPE.name==act_type3 order by {"PS"})
		{
			Ind=act.CallStringFormula("ID");
			Break;
		}
		if (Ind==undefined)
		{
			Ind="";
		}
		Return Ind;
	}
}

withoutlocking
{
	SP_FIRST_STEP_TRIAL.exportfunction({"STRING"},"STRING");
}

function SP_FIRST_STEP(act_type4) {
	var trial_Id=This.sp_get_trial_id("");
	var Ind_final="";
	var trial="";
	if (trial_Id !="" || trial_Id !=undefined)
	{
		trial="OpxActivity".get(trial_Id);
		
		if (trial!=undefined && trial instanceof OpxActivity)
		{
			Ind_final=trial.SP_FIRST_STEP_TRIAL(act_type4);
			
			if (Ind_final==undefined)
			{
				Ind_final="";
			}
		}
		
	}
	Return Ind_final;
}
withoutlocking
{
	SP_FIRST_STEP.exportfunction({"STRING"},"STRING");
}


//CRF Pages Defaults

function spSetCRFDefaultValues(act) {
	if(act.SP_AA_CL_UNIQUE_CRF_PAGES == 0) {
		if(act.SP_RA_CL_CLIN_PHASE == "N/A") {
			act.SP_AA_CL_UNIQUE_CRF_PAGES = 20;
		}
		else if(act.SP_RA_CL_CLIN_PHASE == "I") {
			act.SP_AA_CL_UNIQUE_CRF_PAGES = 30;
		}
		else if(act.SP_RA_CL_CLIN_PHASE == "IIa") {
			act.SP_AA_CL_UNIQUE_CRF_PAGES = 35;
		}
		else if(act.SP_RA_CL_CLIN_PHASE == "IIb") {
			act.SP_AA_CL_UNIQUE_CRF_PAGES = 40;
		}
		else if((act.SP_RA_CL_CLIN_PHASE == "III") || (act.SP_RA_CL_CLIN_PHASE == "IIIb") ){
			act.SP_AA_CL_UNIQUE_CRF_PAGES = 40;
		}
		else if(act.SP_RA_CL_CLIN_PHASE == "IV") {
			act.SP_AA_CL_UNIQUE_CRF_PAGES = 25;
		}
		else {
			act.SP_AA_CL_UNIQUE_CRF_PAGES = 0;
		}
	}
	if(act.SP_AA_CL_CRF_PAGES == 0) {
		if(act.SP_RA_CL_CLIN_PHASE == "N/A") {
			act.SP_AA_CL_CRF_PAGES = 25;
		}
		else if(act.SP_RA_CL_CLIN_PHASE == "I") {
			act.SP_AA_CL_CRF_PAGES = 45;
		}
		else if(act.SP_RA_CL_CLIN_PHASE == "IIa") {
			if(act.SP_NF_S_PJT_CODE == "SP0143" || act.SP_NF_S_PJT_CODE == "SP0056") {
				act.SP_AA_CL_CRF_PAGES = 85;
			}
			else {
				act.SP_AA_CL_CRF_PAGES = 65;
			}
		}
		else if(act.SP_RA_CL_CLIN_PHASE == "IIb") {
			if(act.SP_NF_S_PJT_CODE == "SP0143" || act.SP_NF_S_PJT_CODE == "SP0056") {
				act.SP_AA_CL_CRF_PAGES = 100;
			}
			else {
				act.SP_AA_CL_CRF_PAGES = 75;
			}
		}
		else if(act.SP_RA_CL_CLIN_PHASE == "III,IIIb") {
			if(act.SP_NF_S_PJT_CODE == "SP0143" || act.SP_NF_S_PJT_CODE == "SP0056") {
				act.SP_AA_CL_CRF_PAGES = 100;
			}
			else {
				act.SP_AA_CL_CRF_PAGES = 65;
			}
		}
		else if(act.SP_RA_CL_CLIN_PHASE == "IV") {
			act.SP_AA_CL_CRF_PAGES = 45;
		}
		else {
			act.SP_AA_CL_CRF_PAGES = 0;
		}
	}
}



//KSK 14:30 02/12/2015: 452 2015 FTE metrics update new CDPR

function sp_step_num_order(id_act)
{
	var o_act = "opxActivity".get(id_act);
	var num = 0;
	var num2 = 0;

	if (o_act instanceof OpxActivity && o_act !=undefined)
	{
		var trial = o_act.Sp_get_trial_ID("ID");
		if (trial instanceof OpxActivity && trial !=undefined)
		{
			fromobject(trial) 
			{
				for (var act in "OpxActivity" where act.WBS_TYPE==o_act.WBS_TYPE order by {"PS","_PM_DA_S_LINE_ID"})
				{
					num++;
					if (act == o_act)
					{
						num2 = num;
					}
				}
			}
		}
		else if (o_act.SP_NF_B_CL_NEW_CDPR)
		{
			fromobject(o_act.PROJECT)
			{
				for (var act in "OpxActivity" where act.WBS_TYPE==o_act.WBS_TYPE order by {"PS","_PM_DA_S_LINE_ID"})
				{
					num++;
					if (act == o_act)
					{
						num2 = num;
					}
				}
			}
		}
		return num2;
	}
	
}
sp_step_num_order.exportfunction({"STRING"},"NUMBER");

function Sp_get_general_step_id(uselessParameter) {
	var result = "";
	var current_activity;
	var curr_project = this.project;

	if (this InstanceOf OpxActivity) {
		current_activity= this;
	}
	else { 
		current_activity= this.ACTIVITY;
	}
	
	var trial_index = current_activity.CallStringFormula("SP_NF_CL_TRIAL_ID");
	var trial = "OpxActivity".get(trial_index);
	if ( current_activity != undefined && current_activity Instanceof OpxActivity && trial!=undefined && trial Instanceof OpxActivity ) {
		fromobject(trial) {
			if (current_activity!=undefined && current_activity Instanceof OpxActivity) {
				var act_level=current_activity.LEVEL;
				var exit=0;
				while (act_level>=1 && (current_activity.SP_NF_B_OBS_CLIN_ACT || current_activity.SP_NF_B_CLIN_ACT) && exit==0) {
					if (current_activity.SP_NF_B_IS_STEP_FOR_STEP_ORDER) {
						result=current_activity.CallStringFormula("ID");
						exit=1;
					}
					else {
						current_activity=current_activity.WBS_ELEMENT;
						act_level=current_activity.LEVEL;
					}
				}
			}
		}
	}
	return result;
}

withoutlocking
{
	Sp_get_general_step_id.exportfunction({"STRING"},"STRING");
}

function Sp_get_CDPR_PFUYRX_ID(field)
{
var result = "";
var cur_act;
if (this InstanceOf OpxActivity)
{
cur_act= this;
}
else
{
cur_act=this.ACTIVITY;
}
	if (cur_act!=undefined && cur_act Instanceof OpxActivity)
	{
		if (cur_act != undefined && cur_act Instanceof OpxActivity)
		{
		var act_level=cur_act.LEVEL;
		var exit=0;
			while (act_level>=1 && (cur_act.SP_NF_B_OBS_CLIN_ACT || cur_act.SP_NF_B_CLIN_ACT) && exit==0)
			{
				if (cur_act.SP_NF_CL_CTLCS_ACT)
				{
					if (field!="")
					{
					result=cur_act.get(field);
					}
					else
					{
					result=cur_act.CallStringFormula("ID");
					}
					exit=1;
				}
				else
				{
					cur_act=cur_act.WBS_ELEMENT;
					act_level=cur_act.LEVEL;
				}
			}
		}
	}
return result;
}

withoutlocking
{
Sp_get_CDPR_PFUYRX_ID.exportfunction({"STRING"},"STRING");
}

// Find a first step in Trial (S_PR, S_BO, S_FU, S_SF)


function Sp_activity_is_first_step(list_act_type)
{
	var result = "";
	var current_activity;
	var vect_wbs=list_act_type.parsevector();
	
	current_activity = (this InstanceOf OpxActivity) ? this : this.ACTIVITY;

	var trial_index = current_activity.CallStringFormula("SP_NF_CL_TRIAL_ID");
	var trial = "OpxActivity".get(trial_index);
	if (trial instanceof OpxActivity)
	{
		fromobject(trial) {
			
			for (var act in "OpxActivity" where (vect_wbs.position(act.wbs_type.name) instanceof NUMBER)  order by {"PS","_PM_DA_S_LINE_ID"})
			{
				
				result=act.id.printattribute();
				break;	
			}
			
		}	
	}
	return result;
}
Sp_activity_is_first_step.exportfunction({"STRING"},"STRING");





//-----------------------------------
// sp_js_type_of_tests_act.ojs (2016-08-02 : import MPA pour S2)
//-----------------------------------
function _sp_ojs_type_of_tests_act (id_act)
{
	var o_act = "opxActivity".get(id_act);
	var v_typeOfTests = new Vector();

	if (o_act instanceof OpxActivity) {
		fromobject(o_act)
			for (var act in "OpxActivity")
				for (var idx = 1; idx <= 25; idx++) {
					var val = act.get("SP_DA_ACT_GCI_ASSAY_" + idx);
					var obj = "Opx_SP_PT_CL_TEST".get(val);
					if (obj != undefined && obj != "")
						v_typeOfTests.push(val);
				}

		v_typeOfTests = v_typeOfTests.removeduplicates();
	}

	var s_typeOfTests = v_typeOfTests.join(",");

	return s_typeOfTests;
}
_sp_ojs_type_of_tests_act.exportfunction({"STRING"}, "STRING", "Type of tests (activity) field calculation");



function  sp_js_filter_activity_has_alloc_res(sResList) {
	var vResList = sResList.parselist();
		var oActivity = this;
		if (oActivity.sp_nf_cl_trial){return true}
		for (var each in oActivity.ALLOCATIONS ){
			for (var res in vResList){
				if (res == each.RESOURCE.NAME  ){
					return true;
				}
			}
		}
	return false;
}


SP_JS_FILTER_ACTIVITY_HAS_ALLOC_RES.exportfunction({"STRING"},"BOOLEAN");


function sp_cl_get_get_languages (field)
{
                var result="";
                var lanugages=new vector();

                for (var ph in this.ACTIVITY.ALLOCATIONS where ( (ph.cost_account.name==this.cost_account.name) &&
                (ph.resource.name=="CLIN-GCD-TRA") && (this.SPAS_RA_SITE.name==ph.SPAS_RA_SITE.name) ))
                               {
                                               lanugages.push(ph.get("SP_AA_S_PH_CL_LANGUAGE"));
                               }

if (lanugages.length>0)
{
result= lanugages.join(",");
}
                
return result;
}
withoutlocking
{
sp_cl_get_get_languages.exportfunction({"STRING"},"STRING");
}


function sp_js_get_act_date_by_wbs_type_on_trial(sFirstOrLast,sWbsType,sDateField)
{
var Result ="";
var oTrial = "opxactivity".get(this.SP_NF_CL_TRIAL_ID)
if (this.SP_NF_CL_TRIAL){
if (oTrial != undefined && oTrial Instanceof OpxActivity) {
fromobject(oTrial){
	if(sFirstOrLast == "First"){
		for (var act in "OpxActivity" where act.WBS_TYPE.NAME==sWbsType order by {"PS"}){
			Result = act.get(sDateField);
			Break;
		}
	}else if(sFirstOrLast == "Last"){
		for (var act in "OpxActivity" where act.WBS_TYPE.NAME==sWbsType order by {{"INVERSE","PF"}}){
			Result = act.get(sDateField);
			Break;
		}
	}
}
}
}
else
	result = oTrial.sp_js_get_act_date_by_wbs_type_on_trial(sFirstOrLast,sWbsType,sDateField)
return Result
}
sp_js_get_act_date_by_wbs_type_on_trial.exportfunction({"STRING","STRING","STRING"},"DATE");

function sp_js_get_act_date_by_wbs_type_on_STEP(sFirstOrLast,sWbsType,sDateField)
{
var Result ="";
var oStep = "opxactivity".get(this.SP_GET_ACTIVITY_STEP(""))
if (this.SP_NF_B_IS_STEP){
if (oStep != undefined && oStep Instanceof OpxActivity) {
fromobject(oStep){
	if(sFirstOrLast == "First"){
		for (var act in "OpxActivity" where act.WBS_TYPE.NAME==sWbsType order by {"PS"}){
			Result = act.get(sDateField);
			Break;
		}
	}else if(sFirstOrLast == "Last"){
		for (var act in "OpxActivity" where act.WBS_TYPE.NAME==sWbsType order by {{"INVERSE","PF"}}){
			Result = act.get(sDateField);
			Break;
		}
	}
}
}
}
else
	result = oStep.sp_js_get_act_date_by_wbs_type_on_STEP(sFirstOrLast,sWbsType,sDateField)
return Result
}
sp_js_get_act_date_by_wbs_type_on_STEP.exportfunction({"STRING","STRING","STRING"},"DATE");

function sp_js_get_act_date_by_wbs_type_on_gci(sFirstOrLast,sWbsType,sDateField)
{
var result=-1;
var trial_Id;
var Trial;
var act_cur=this;
if (act_cur.SP_CL_S_GCI_RELEASE=="" && act_cur.WBS_ELEMENT.WBS_TYPE.name==sWbsType)
{
	act_cur=act_cur.WBS_ELEMENT;
}

if (act_cur.SP_CL_S_GCI_RELEASE!="")
{
trial_Id=this.sp_get_trial_id("");	
Trial="OpxActivity".get(trial_Id);
	
if(Trial instanceof OpxActivity)
{
	fromobject(Trial)
	{
		if(sFirstOrLast == "First")
		{
			for (var act in "OpxActivity".findclass() where act.WBS_TYPE.NAME==sWbsType && act.SP_CL_S_GCI_RELEASE==act_cur.SP_CL_S_GCI_RELEASE order by {"PS"})
			{
				Result = act.get(sDateField);
				Break;
			}
		}
		else 
		{
			if(sFirstOrLast == "Last")
			{
				for (var act in "OpxActivity".findclass() where act.WBS_TYPE.NAME==sWbsType && act.SP_CL_S_GCI_RELEASE==act_cur.SP_CL_S_GCI_RELEASE order by {{"INVERSE","PF"}})
				{
					Result = act.get(sDateField);
					Break;
				}
			}	
		}
		
	}		
}
}
	
return result;	
}
sp_js_get_act_date_by_wbs_type_on_gci.exportfunction({"STRING","STRING","STRING"},"DATE");

function sp_js_get_gci_level_id(oAct){
	if( oAct.SP_NF_B_IS_GCI && oAct.SP_NF_GCI_REL_CODE!="") return oAct.callstringformula("ID")
	else if (oAct.level>1 && (oAct.SP_NF_B_IS_GCI==false)){return sp_js_get_gci_level_id(oAct.WBS_ELEMENT)}
	
}sp_js_get_gci_level_id.exportfunction({"STRING"},"STRING")

function SP_get_act_date_under_step_last(date_field,act_type)
{
	var cur_act = this;
	var result=-1;
	var orderList = new Vector();
	orderList.push(date_field);

	if (cur_act != undefined && cur_act Instanceof OpxActivity) {
		fromobject(cur_act) {
			for (var act in "OpxActivity"
			where act.CallBooleanFormula("BELONGS(\"WBS_TYPE\",\"" + act_type + "\")") && act.get(date_field) != undefined order  by {{"INVERSE","PF"}}) {
				result = act.get(date_field);
				break;
			}
		}
	}
	return result;
}

withoutlocking {
	SP_get_act_date_under_step_last.exportfunction({"STRING","STRING"},"DATE");
}
//Added new function for calculating First,Middle & last Planned finish for UBL,STAT&DBL activity type
function sp_js_get_act_date_by_wbs_type_UBL_STAT_DBL_on_trial(sFirstOrLastOrMiddle,sWbsType,sDateField)
{
var Result ="";
var Cnt_Act=0;
var cur_Act_cnt=0;
var Cnt_Act_Mid=0;
var oTrial = "opxactivity".get(this.SP_NF_CL_TRIAL_ID)
if (this.SP_NF_CL_TRIAL){

if (oTrial != undefined && oTrial Instanceof OpxActivity) {
fromobject(oTrial){

for (var a in "OpxActivity" where a.WBS_TYPE.NAME==sWbsType)
{Cnt_Act++;}

Cnt_Act_Mid=math.round(Cnt_Act/2);

if(sFirstOrLastOrMiddle == "First"){
                                for (var act in "OpxActivity" where act.WBS_TYPE.NAME==sWbsType order by {"PF"}){
                                                Result = act.get(sDateField);
                                                Break;
                                }
                }else if(Cnt_Act>1&&sFirstOrLastOrMiddle == "Last"){
                                for (var act in "OpxActivity" where act.WBS_TYPE.NAME==sWbsType order by {{"INVERSE","PF"}}){
                                                Result = act.get(sDateField);
                                                Break;
                                }
                                
                }
                else if(Cnt_Act>2&&sFirstOrLastOrMiddle == "Middle"){
                                                for (var act in "OpxActivity" where act.WBS_TYPE.NAME==sWbsType order by {"PF"}){
                                                cur_Act_cnt++;
                                                if (cur_Act_cnt == Cnt_Act_Mid){
                                                Result = act.get(sDateField);
                                                Break;
                                                }
                                                }
                                }
}
}
}
else
                result = oTrial.sp_js_get_act_date_by_wbs_type_UBL_STAT_DBL_on_trial(sFirstOrLastOrMiddle,sWbsType,sDateField)
return Result
}
sp_js_get_act_date_by_wbs_type_UBL_STAT_DBL_on_trial.exportfunction({"STRING","STRING","STRING"},"DATE");

//Script to retrieve the Clinical trial information on activities of the trial
//  Date 2020/02/18 #2045 - Merge of CDOC and MW -- CLIN-MW-TRA removed from this scripts and replaced by CLIN-GCD-TRA
// MF 19-AVR-07: Change Trial Code to take into account activities with Activity type Clin
// MF 17-APR-07 : performance improvement : add function Sp_get_act_type
// MF 17-APR-07: performance improvement : add function Sp_get_trial_ID
// MF 6-MAR-07: update functions Sp_get_activity_step_extraction, Sp_get_activity_step and Sp_get_trial_info in order to work on activities that have an OBS Element Clin (instead of Activity type Clin)
// MF 10-JAN-07 : add function for remove of clinical re-estimations
// MF 10-JAN-07: correct function is_fte_reestimated to take into account Metric BS
// MF 9-JAN-07: remove functions for FTE In and Out
// MF 8-JAN-07: ADd function to retrieve Step for FTE Extraction (include Prepare Study)
// MF 21-DEC-06: Add function to calculate load for Translator
// MF 21-DEC-06: Change function sp_is_fte_reestimated() to take into account the fact that we remove Planned hours when re-estimating
// EP 18-DEC-06: add Hashtable implementation to store the named formula references.
// MF 18-DEC-06: add function to retrieve the first step in chronological order
// MF 15-DEC-06: performance improvement of functions Sp_get_trial_info and Sp_get_activity_step
// MF 12-DEC-06: correction in function Sp_get_activity_step()
// EP 07-DEC-06: script update ; Adding the Sp_get_activity_step() function returning the step name of the current activity
// MF 29-NOV-06: script update to be able to use Sp_get_trial_info on activity or Hours and exp summary
// MF 5-OCT-06: script update for function sp_get_act_date_out which did not work when CONDUCT was under LTFUP
// MF 29-SEP-06: script update to add a function to get metrics value from estimated : sp_fte_metrics_from_estimate
// MF 30-AUG-06: script update to retrieve the date of DBCLIN inside another WBS Element
// MF 7-AUG-06: script update to retrieve dates from another activity in the same WBS
// MF 28-JUL-06: script update (add function to see if FTE has been re-estimated)
// MF 24-JUL-06 : script creation
//YS 17-03-14: Optimization of Sp_cl_calculate_trans_load function SP3 migration Project
//YS 09/12/2014: Add sp_is_stat_bsprep_out function, STAT Clin metric calculation (S_BSPREP)
//YS 11/30/2015 452 Clinical sciences fte: Add Sp_get_CDPR_PFUYRX_ID function
//YS 06/08/2016 COMPASS planisware V6 Project
// Modified by YSA 16:22 24 May 2017
//SP_JS_CL_TRIAL_INFO
//YSA 03/11/2017 update sp_js_get_act_date_by_wbs_type_on_gci function
//MAG 24/08/2018 -ITS-INC1092092-Added sp_js_get_act_date_by_wbs_type_UBL_STAT_DBL_on_trial function for calculating First,Middle & last Planned finish for UBL,STAT&DBL activity type
//MBL 23/05/2019 - ITS-INC2520796 - Modification of Sp_Cl_Complexity_Factor to add a control on CF existence
//ckeita 20/12/2019 RITM1410622 modified function spSetCRFDefaultValues(act)

//--------------------------------
// 2016-08-01 : import MPA pour S2
//--------------------------------
function Sp_get_trial_ID(field)
{
	var result = "";
	var cur_act;
	if (this InstanceOf OpxActivity)
	{
		cur_act = this;
	}
	else
	{
		cur_act = this.ACTIVITY;
	}
	if (cur_act != undefined && cur_act Instanceof OpxActivity)
	{
		if (cur_act != undefined && cur_act Instanceof OpxActivity)
		{
			var act_level = cur_act.LEVEL;
			var exit=0;
			while (act_level >= 1 && (cur_act.SP_NF_B_OBS_CLIN_ACT || cur_act.SP_NF_B_CLIN_ACT) && exit == 0)
			{
				if (cur_act.SP_NF_CL_TRIAL)
				{
					if (field != "")
					{
						result = cur_act.get(field);
					}
					else
					{
						result = cur_act.CallStringFormula("ID");

					}
					exit = 1;
				}
				else
				{
					cur_act   = cur_act.WBS_ELEMENT;
					act_level = cur_act.LEVEL;
				}
			}
		}
	}
	return result;
}

withoutlocking {
	Sp_get_trial_ID.exportfunction({"STRING"},"STRING");
}


//--------------------------------
// 2016-08-01 : import MPA pour S2
//--------------------------------
function Sp_get_act_type(formula)
{
	var result = "";
	var cur_act;
	if (this InstanceOf OpxActivity)
	cur_act= this;
	else
	cur_act=this.ACTIVITY;

	if (cur_act!=undefined && cur_act Instanceof OpxActivity)
	{
		if (cur_act != undefined && cur_act Instanceof OpxActivity)
		{
			var act_level = cur_act.LEVEL;
			var exit = 0;
			while (act_level >= 1 && (cur_act.SP_NF_B_OBS_CLIN_ACT || cur_act.SP_NF_B_CLIN_ACT) && exit == 0)
			{
				if (cur_act.CallBooleanFormula(formula))
				{
					result = cur_act.CallStringFormula("ID");
					exit = 1;
				}
				else
				{
					cur_act = cur_act.WBS_ELEMENT;
					act_level = cur_act.LEVEL;
				}
			}
		}
	}
	return result;
}
withoutlocking {
	Sp_get_act_type.exportfunction({"STRING"},"STRING");
}


//--------------------------------
// 2016-08-01 : import MPA pour S2
//--------------------------------
function Sp_Cl_Complexity_Factor(platform,metric)
{
	var result = 1;
	var IndexCF = platform + "_" + metric;
	var trial = "OpxActivity".get(This.SP_GET_TRIAL_ID(""));
	if (trial != undefined && trial Instanceof OpxActivity)
	{
		var level=trial.CallStringFormula("SP_AA_CL_CF_" + platform);
		if (level!="")
		{
			var CF = "OpxClinicalComplexityFactor".get(IndexCF);
			if (CF != undefined && CF Instanceof OpxClinicalComplexityFactor) 
				result = CF.CallNumberFormula("SP_AA_CL_CF_CF" + level);
		}
	}
	return result;
}
withoutlocking {
	Sp_Cl_Complexity_Factor.exportfunction({"STRING","STRING"},"NUMBER");
}


//--------------------------------
// 2016-08-01 : import MPA pour S2
//--------------------------------
function Sp_get_activity_step_extraction(test)
{
	var result = "";
	var current_activity;
	var curr_project = this.project;

	current_activity = (this InstanceOf OpxActivity) ? this : this.ACTIVITY;

	var trial_index = current_activity.CallStringFormula("SP_NF_CL_TRIAL_ID");
	var trial = "OpxActivity".get(trial_index);

	if ( current_activity != undefined && current_activity Instanceof OpxActivity && trial != undefined && trial Instanceof OpxActivity ) {
		fromobject(trial) {
			if (current_activity != undefined && current_activity Instanceof OpxActivity) {
				var act_level = current_activity.LEVEL;
				var exit = 0;
				while (act_level >= 1 && current_activity.SP_NF_B_OBS_CLIN_ACT && exit == 0) {
					if (current_activity.SP_NF_CL_STEP_REP) {
						result = current_activity.CallStringFormula("ID");
						exit = 1;
					}
					else {
						current_activity = current_activity.WBS_ELEMENT;
						act_level = current_activity.LEVEL;
					}
				}
			}
		}
	}
	return result;
}
withoutlocking {
	Sp_get_activity_step_extraction.exportfunction({"STRING"},"STRING");
}


//--------------------------------
// 2016-08-01 : import MPA pour S2
//--------------------------------
function Sp_get_info_trial_attribute(field)
{
	var result  = "";
	var cur_act = ((this InstanceOf OpxActivity) ? this:this.ACTIVITY);

	if (cur_act != undefined && cur_act Instanceof OpxActivity) {
		var act_level = cur_act.LEVEL;
		var exit = 0;
		if (cur_act.SP_NF_B_OBS_CLIN_ACT || cur_act.SP_NF_B_CLIN_ACT) {
			while (act_level >= 1 && (cur_act.SP_NF_B_OBS_CLIN_ACT || cur_act.SP_NF_B_CLIN_ACT) && exit == 0) {
				if (cur_act.SP_NF_CL_TRIAL) {
					result = (field == "") ? cur_act.Identifier : cur_act.get(field);
					exit = 1;
				}
				else {
					cur_act   = cur_act.WBS_ELEMENT;
					act_level = cur_act.LEVEL;
				}
			}
		}
		else {
			while (act_level >= 1 && exit == 0) {
				if (cur_act.SP_NF_CL_TRIAL) {
					result = (field == "") ? cur_act.Identifier : cur_act.get(field);
					exit = 1;
				}
				else {
					cur_act   = cur_act.WBS_ELEMENT;
					act_level = cur_act.LEVEL;
				}
			}
		}
	}
	return result;
}
withoutlocking {
	Sp_get_info_trial_attribute.exportfunction({"STRING"},"STRING");
}


//--------------------------------
// 2016-08-01 : import MPA pour S2
//--------------------------------
function sp_cl_calculate_TBD(siteList)
{
	var result = "";
	var isPharma = false;
	var isPharmaChina = false;

	if (siteList != "") {
		var siteListTab = siteList.split(",");

		for (var i = 0; i < siteListTab.length; i++)
		if (siteListTab[i].trim(" ") == "Pharma")
		isPharma = true;
		else
		if (siteListTab[i].trim(" ") == "Pharma-China")
		isPharmaChina = true;

		if (isPharma == true && isPharmaChina == false)
		result = "Pharma";
		else
		if (isPharma == false && isPharmaChina == true)
		result = "Pharma-China";
		else
		if (isPharma == true && isPharmaChina == true)
		result = "Pharma,Pharma-China";
	}
	return result;
}
withoutlocking {
	sp_cl_calculate_TBD.exportfunction({"STRING"},"STRING");
}


//---------------------------------------
// sp_ojs_impact_interface_functions.ojs (2016-08-01 : import MPA pour S2)
//---------------------------------------
//Script used to create functions for IMPACT Interface
//MF 8-DEC-06 : script update following change of Step definition for Impact interface
// MF 29-NOV-06: script creation
function Sp_get_first_step_info(unused)
{
	var result  = "";
	var cur_act = this;
	var count   = 0;

	if (cur_act!=undefined && cur_act Instanceof OpxActivity) {
		fromobject(cur_act) {
			for (var act in "OpxActivity" where act.SP_NF_CL_STEP_PRIMARY_IMPACT order by {"PS"}) {
				count=1;
				result= act.index;
				break;
			}

			if (count==0) {
				for (var act in "OpxActivity" where act.SP_NF_CL_STEP_IMPACT order by {"PS"}) {
					result = act.index;
					break;
				}
			}
		}
	}
	return result;
}
withoutlocking {
	Sp_get_first_step_info.exportfunction({"STRING"},"STRING");
}


//-----------------------------------
// sp_ojs_cl_reporting_functions.ojs (2016-08-01 : import MPA pour S2)
//-----------------------------------
function SP_get_act_date_under_step(date_field,act_type)
{
	var cur_act = this;
	var result;
	var orderList = new Vector();
	orderList.push(date_field);

	if (cur_act != undefined && cur_act Instanceof OpxActivity) {
		fromobject(cur_act) {
			for (var act in "OpxActivity"
			where act.CallBooleanFormula("BELONGS(\"WBS_TYPE\",\"" + act_type + "\")") && act.get(date_field) != undefined order by orderList) {
				result = act.get(date_field);
				break;
			}
		}
	}
	return result;
}

withoutlocking {
	SP_get_act_date_under_step.exportfunction({"STRING","STRING"},"DATE");
}


//-----------------------------------
// sp_ojs_impact_interface_functions.ojs (2016-08-01 : import MPA pour S2)
//-----------------------------------
function SP_get_act_type_in_last_step(date_field, act_type1, act_type2)
{
	var cur_act = this;
	var result = -1;
	var ok = 0;
	var step_act;

	if (cur_act != undefined && cur_act Instanceof OpxActivity)
	fromobject(cur_act)
	for (var act in "OpxActivity" where act.WBS_TYPE.index == act_type1 order by {{"INVERSE","PF"}}) {
		if (ok == 0) {
			step_act = OpxActivity.get(act.SP_GET_ACTIVITY_STEP_IMPACT(""));
			fromobject(step_act)
			for (var act2 in "OpxActivity" where act2.WBS_TYPE.index == act_type2) {
				result = act2.get(date_field);
				ok = 1;
			}
		}
	}


	return result;
}
withoutlocking {
	SP_get_act_type_in_last_step.exportfunction({"STRING","STRING","STRING"}, "DATE");
}


//-----------------------------------
// sp_ojs_impact_interface_functions_ii.ojs (2016-08-01 : import MPA pour S2)
//-----------------------------------
function sp_get_date_on_step(date_field, act_type)
{
	var step = this;
	var date = -1;

	if (step!=undefined && step Instanceof OpxActivity)
	fromobject (step)
	for (var act in "OpxActivity" where act.WBS_TYPE.index == act_type order by {"PS"}) {
		date= act.get(date_field);
		break;
	}

	return date;
}

withoutlocking {
	sp_get_date_on_step.exportfunction({"STRING","STRING"}, "DATE");
}


//-----------------------------------
// sp_ojs_impact_interface_functions.ojs (2016-08-01 : import MPA pour S2)
//-----------------------------------
function Sp_get_activity_step_impact(unused)
{
	var result = "";
	var curr_project = this.project;
	var current_activity = (this InstanceOf OpxActivity) ? this : this.ACTIVITY;

	var trial_index = current_activity.CallStringFormula("SP_NF_CL_TRIAL_ID");
	var trial = "OpxActivity".get(trial_index);

	if ( current_activity != undefined && current_activity Instanceof OpxActivity && trial != undefined && trial Instanceof OpxActivity )
	fromobject(trial)
	if (current_activity != undefined && current_activity Instanceof OpxActivity) {
		var act_level = current_activity.LEVEL;
		var exit = 0;
		while (act_level >= 1 && current_activity.SP_NF_B_OBS_CLIN_ACT && exit == 0) {
			if (current_activity.SP_NF_CL_STEP_IMPACT) {
				result = current_activity.index;
				exit = 1;
			}
			else {
				current_activity = current_activity.WBS_ELEMENT;
				act_level = current_activity.LEVEL;
			}
		}
	}

	return result;
}
withoutlocking {
	Sp_get_activity_step_impact.exportfunction({"STRING"},"STRING");
}


//-----------------------------------
// sp_ojs_clin_res_functions.ojs (2016-08-02 : import MPA pour S2)
//-----------------------------------
function Sp_get_prrep_act_ID(field)
{
	var result = "";
	var cur_act = (this InstanceOf OpxActivity) ? this : this.ACTIVITY;

	if (cur_act != undefined && cur_act Instanceof OpxActivity)
	if (cur_act != undefined && cur_act Instanceof OpxActivity) {
		var act_level = cur_act.LEVEL;
		var exit = 0;
		while (act_level >= 1 && (cur_act.SP_NF_B_OBS_CLIN_ACT || cur_act.SP_NF_B_CLIN_ACT) && exit == 0)
		if (cur_act.Wbs_Type.name=="S_PRREP") {
			result = (field == "") ? cur_act.CallStringFormula("ID") : cur_act.get(field);
			exit = 1;
		}
		else {
			cur_act   = cur_act.WBS_ELEMENT;
			act_level = cur_act.LEVEL;
		}
	}
	return result;
}
withoutlocking {
	Sp_get_prrep_act_ID.exportfunction({"STRING"},"STRING");
}




//-----------------------------------
// sp_ojs_impact_interface_functions_ii.ojs (2016-08-02 : import MPA pour S2)
//-----------------------------------
function sp_get_date_on_step_by_ps_desc(date_field, act_type)
{
	var step = this;
	var date = -1;

	if (step != undefined && step Instanceof OpxActivity)
	fromobject (step)
	for (var act in "OpxActivity" where act.WBS_TYPE.index == act_type order by {{"INVERSE","PS"}}) {
		date = act.get(date_field);
		break;
	}

	return date;
}

withoutlocking {
	sp_get_date_on_step_by_ps_desc.exportfunction({"STRING", "STRING"}, "DATE");
}


//-----------------------------------
// sp_ojs_impact_interface_functions.ojs (2016-08-02 : import MPA pour S2)
//-----------------------------------
function Sp_get_act_date_first_protocol(date_field,act_type)
{
	var result = -1;
	var cur_act =this;

	if (cur_act!=undefined && cur_act Instanceof OpxActivity)
	fromobject(cur_act)
	for (var act in "OpxActivity" where act.WBS_TYPE.index == act_type order by {"PF"})
	{
		result = act.get(date_field);
		break;
	}

	return result;
}
withoutlocking {
	Sp_get_act_date_first_protocol.exportfunction({"STRING","STRING"},"DATE");
}


//-----------------------------------
// sp_ojs_cl_get_study_info.ojs (2016-08-02 : import MPA pour S2)
//-----------------------------------
function Sp_get_activity_step(test)
{
	var result = "";
	var curr_project = this.project;
	var current_activity = (this InstanceOf OpxActivity) ? this : this.ACTIVITY;

	var trial_index = current_activity.CallStringFormula("SP_NF_CL_TRIAL_ID");
	var trial = "OpxActivity".get(trial_index);

	if ( current_activity != undefined && current_activity Instanceof OpxActivity && trial != undefined && trial Instanceof OpxActivity )
	fromobject(trial)
	if (current_activity != undefined && current_activity Instanceof OpxActivity) {
		var act_level = current_activity.LEVEL;
		var exit=0;
		while (act_level >= 1 && (current_activity.SP_NF_B_OBS_CLIN_ACT || current_activity.SP_NF_B_CLIN_ACT) && exit == 0)
		if (current_activity.SP_NF_CL_STEP) {
			result = current_activity.CallStringFormula("ID");
			exit = 1;
		}
		else {
			current_activity = current_activity.WBS_ELEMENT;
			act_level = current_activity.LEVEL;
		}

	}

	return result;
}
withoutlocking {
	Sp_get_activity_step.exportfunction({"STRING"},"STRING");
}


//-----------------------------------
// sp_ojs_cl_cost_ext.ojs (2016-08-02 : import MPA pour S2)
//-----------------------------------
function Sp_get_act_type_ID(actType)
{
	var result = "";
	var cur_act = (this InstanceOf OpxActivity) ? this : this.ACTIVITY;

	if (cur_act!=undefined && cur_act Instanceof OpxActivity)
	if (cur_act != undefined && cur_act Instanceof OpxActivity) {
		var act_level = cur_act.LEVEL;
		var exit = 0;
		while (act_level >= 1 && (cur_act.SP_NF_B_OBS_CLIN_ACT || cur_act.SP_NF_B_CLIN_ACT) && exit == 0)
		if (cur_act.Wbs_Type.name == actType)
		{
			result = cur_act.CallStringFormula("ID");
			exit   = 1;
		}
		else
		{
			cur_act   = cur_act.WBS_ELEMENT;
			act_level = cur_act.LEVEL;
		}
	}
	return result;
}
withoutlocking {
	Sp_get_act_type_ID.exportfunction({"STRING"},"STRING");
}



//-----------------------------------
// sp_ojs_cl_reporting_functions.ojs (2016-08-02 : import MPA pour S2)
//-----------------------------------
function SP_get_act_inv_date_under_step(date_field,act_type)
{
	var cur_act = this;
	var result;
	var orderList = new Vector();
	orderList.push( new vector("INVERSE",date_field));

	if (cur_act != undefined && cur_act Instanceof OpxActivity)
	fromobject(cur_act)
	for (var act in "OpxActivity" where act.CallBooleanFormula("BELONGS(\"WBS_TYPE\",\""+ act_type +"\")")
	&& act.get(date_field) != undefined order by orderList )
	{
		result = act.get(date_field);
		break;
	}

	return result;
}
withoutlocking {
	SP_get_act_inv_date_under_step.exportfunction({"STRING", "STRING"}, "DATE");
}


//-----------------------------------
// sp_ojs_cl_reporting_functions.ojs (2016-08-02 : import MPA pour S2)
//-----------------------------------
function SP_get_act_finished_date_under_step(date_field, act_type)
{
	var cur_act = this;
	var result;
	var orderList = new Vector();
	orderList.push(date_field);

	if (cur_act != undefined && cur_act Instanceof OpxActivity)
	fromobject(cur_act)
	for (var act in "OpxActivity" where act.CallBooleanFormula("ELAPSED_TIME = 100 and BELONGS(\"WBS_TYPE\",\"" + act_type + "\")") && act.get(date_field) != undefined order by orderList) {
		result = act.get(date_field);
		break;
	}

	return result;
}
withoutlocking {
	SP_get_act_finished_date_under_step.exportfunction({"STRING", "STRING"}, "DATE");
}


//-----------------------------------
// sp_ojs_impact_interface_functions_ii.ojs (2016-08-03 : import MPA pour S2)
//-----------------------------------
function sp_get_date_lvls_on_step(date_field, act_type)
{
	var step = this;
	var date = -1;

	if (step != undefined && step Instanceof OpxActivity)
	fromobject (step)
	for (var act in "OpxActivity" where act.WBS_TYPE.index == act_type order by {{"INVERSE","PF"}}) {
		date = act.get(date_field);
		break;
	}

	return date;
}

withoutlocking {
	sp_get_date_lvls_on_step.exportfunction({"STRING", "STRING"}, "DATE");
}


//The count of the countries in this region: used for KTI trial

function sp_cl_nb_count_reg(region)
{
	var vect_region=new vector();	
	vect_region=Region.parsevector();
	vect_region=vect_region.removeduplicates();
	var result=0;

	for (var c in "OpxSP_PT_CL_COUNTRY" where ((c.SP_RA_CL_GEO_AREA instanceof OpxSP_PT_CL_GEO_AREA) && (vect_region.position(c.SP_RA_CL_GEO_AREA.name) instanceof NUMBER)) )
	{
		result=result+1;
	}
	return result;
}
sp_cl_nb_count_reg.exportfunction({"STRING"},"NUMBER");


//List the countries in this region - calculate from counties

function sp_cl_list_count_reg(field,Region)
{
	var cur_act = ((this InstanceOf OpxActivity) ? this:this.ACTIVITY);
	var list_countries=cur_act.get(field);
	var vect_country=new vector();
	var vect_region=new vector();
	var cl_country="";
	var result=0;
	if (list_countries instanceof STRING)
	{
		vect_country = list_countries.parsevector();
		vect_country = vect_country.removeduplicates();
		if (Region instanceof STRING && Region!="")
		{
			vect_region=Region.parsevector();
			vect_region=vect_region.removeduplicates();
		}
		
		if (vect_country.length>0 && vect_region.length>0)
		{
			for (var v in vect_country)
			{
				cl_country="OpxSP_PT_CL_COUNTRY".get(v);

				if ((cl_country instanceof OpxSP_PT_CL_COUNTRY) && (cl_country.SP_RA_CL_GEO_AREA instanceof OpxSP_PT_CL_GEO_AREA) && 
						(vect_region.position(cl_country.SP_RA_CL_GEO_AREA.name) instanceof NUMBER))
				{
					result=result+1;
					
				}
				
			}
		}
	}
	return result;
}
sp_cl_list_count_reg.exportfunction({"STRING","STRING"},"NUMBER");


//find list geographic area

function sp_clin_list_geo(field)
{
	
	var cur_act = ((this InstanceOf OpxActivity) ? this:this.ACTIVITY);
	var result="";
	var list_countries=cur_act.get(field);
	var vect_country=new vector();
	var vect_geo=new vector();
	var cl_country="";
	if (list_countries instanceof STRING)
	{
		vect_country = list_countries.parsevector();
		vect_country = vect_country.removeduplicates();
		for (var v in vect_country)
		{
			cl_country="OpxSP_PT_CL_COUNTRY".get(v);
			if ((cl_country instanceof OpxSP_PT_CL_COUNTRY) && (cl_country.SP_RA_CL_GEO_AREA instanceof OpxSP_PT_CL_GEO_AREA))
			{
				vect_geo.push(cl_country.SP_RA_CL_GEO_AREA.name);
			}
			
		}
		
		if (vect_geo.length>0)
		{
			vect_geo=vect_geo.removeduplicates();
			result=vect_geo.join(",");
		}
	}
return result;	
}
sp_clin_list_geo.exportfunction({"STRING"},"STRING");



function sp_cl_contries_in_reg(field,Region)
{
	var cur_act = ((this InstanceOf OpxActivity) ? this:this.ACTIVITY);
	var list_countries=cur_act.get(field);
	var result="";
	var vect_country=new vector();
	var vect_region=new vector();
	var vect_ctry_reg=new vector();
	var cl_country="";
	if (list_countries instanceof STRING)
	{
		vect_country = list_countries.parsevector();
		vect_country = vect_country.removeduplicates();
		vect_region=Region.parsevector();
		vect_region=vect_region.removeduplicates();


		if (vect_country.length>0 && vect_region.length>0)
		{

			for (var v in vect_country)
			{
				cl_country="OpxSP_PT_CL_COUNTRY".get(v);

				if ((cl_country instanceof OpxSP_PT_CL_COUNTRY) && (cl_country.SP_RA_CL_GEO_AREA instanceof OpxSP_PT_CL_GEO_AREA) && 
						(vect_region.position(cl_country.SP_RA_CL_GEO_AREA.name) instanceof NUMBER))
				{
					vect_ctry_reg.push(v);
					
				}
				
			}

			
			if (vect_ctry_reg.length>0)
			{
				vect_ctry_reg=vect_ctry_reg.removeduplicates();
				result=vect_ctry_reg.join(",");
			}
		}
	}
return result;
}
sp_cl_contries_in_reg.exportfunction({"STRING","STRING"},"STRING");



// NÒâ¬aÃ° Subjects expected (step) : max SP_DA_N_CL_SUB_EXP_VISIT

function sp_cl_max_field_step(field)
{
	var step=this;
	var max=0;
	if ((step instanceof OpxActivity) && (step.SP_NF_B_IS_STEP))
	{
		fromobject(step)
		{	
			for (var act in "OpxActivity" where ((act.wbs_type instanceof OpxWBS_TYPE) && (act.wbs_type.name=="S_INCL" || act.wbs_type.name=="S_FOL" || act.wbs_type.name=="S_VISIT") ) )
			{
				if ((act.get(field) instanceof NUMBER) && (act.get(field)>max) )
				{
					max=act.get(field);
				}
				
			}
		}
	}
	return max;
}
sp_cl_max_field_step.exportfunction({"STRING"},"NUMBER");


function SP_FIRST_STEP_TRIAL(act_type3) {
	var Ind="";
	fromObject(This)
	{
		for (var act in "OpxActivity" where act.WBS_TYPE.name==act_type3 order by {"PS"})
		{
			Ind=act.CallStringFormula("ID");
			Break;
		}
		if (Ind==undefined)
		{
			Ind="";
		}
		Return Ind;
	}
}

withoutlocking
{
	SP_FIRST_STEP_TRIAL.exportfunction({"STRING"},"STRING");
}

function SP_FIRST_STEP(act_type4) {
	var trial_Id=This.sp_get_trial_id("");
	var Ind_final="";
	var trial="";
	if (trial_Id !="" || trial_Id !=undefined)
	{
		trial="OpxActivity".get(trial_Id);
		
		if (trial!=undefined && trial instanceof OpxActivity)
		{
			Ind_final=trial.SP_FIRST_STEP_TRIAL(act_type4);
			
			if (Ind_final==undefined)
			{
				Ind_final="";
			}
		}
		
	}
	Return Ind_final;
}
withoutlocking
{
	SP_FIRST_STEP.exportfunction({"STRING"},"STRING");
}


//CRF Pages Defaults

function spSetCRFDefaultValues(act) {
	if(act.SP_AA_CL_UNIQUE_CRF_PAGES == 0) {
		if(act.SP_RA_CL_CLIN_PHASE == "N/A") {
			act.SP_AA_CL_UNIQUE_CRF_PAGES = 20;
		}
		else if(act.SP_RA_CL_CLIN_PHASE == "I") {
			act.SP_AA_CL_UNIQUE_CRF_PAGES = 30;
		}
		else if(act.SP_RA_CL_CLIN_PHASE == "IIa") {
			act.SP_AA_CL_UNIQUE_CRF_PAGES = 35;
		}
		else if(act.SP_RA_CL_CLIN_PHASE == "IIb") {
			act.SP_AA_CL_UNIQUE_CRF_PAGES = 40;
		}
		else if((act.SP_RA_CL_CLIN_PHASE == "III") || (act.SP_RA_CL_CLIN_PHASE == "IIIb") ){
			act.SP_AA_CL_UNIQUE_CRF_PAGES = 40;
		}
		else if(act.SP_RA_CL_CLIN_PHASE == "IV") {
			act.SP_AA_CL_UNIQUE_CRF_PAGES = 25;
		}
		else {
			act.SP_AA_CL_UNIQUE_CRF_PAGES = 0;
		}
	}
	if(act.SP_AA_CL_CRF_PAGES == 0) {
		if(act.SP_RA_CL_CLIN_PHASE == "N/A") {
			act.SP_AA_CL_CRF_PAGES = 25;
		}
		else if(act.SP_RA_CL_CLIN_PHASE == "I") {
			act.SP_AA_CL_CRF_PAGES = 45;
		}
		else if(act.SP_RA_CL_CLIN_PHASE == "IIa") {
			if(act.SP_NF_S_PJT_CODE == "SP0143" || act.SP_NF_S_PJT_CODE == "SP0056") {
				act.SP_AA_CL_CRF_PAGES = 85;
			}
			else {
				act.SP_AA_CL_CRF_PAGES = 65;
			}
		}
		else if(act.SP_RA_CL_CLIN_PHASE == "IIb") {
			if(act.SP_NF_S_PJT_CODE == "SP0143" || act.SP_NF_S_PJT_CODE == "SP0056") {
				act.SP_AA_CL_CRF_PAGES = 100;
			}
			else {
				act.SP_AA_CL_CRF_PAGES = 75;
			}
		}
		else if(act.SP_RA_CL_CLIN_PHASE == "III,IIIb") {
			if(act.SP_NF_S_PJT_CODE == "SP0143" || act.SP_NF_S_PJT_CODE == "SP0056") {
				act.SP_AA_CL_CRF_PAGES = 100;
			}
			else {
				act.SP_AA_CL_CRF_PAGES = 65;
			}
		}
		else if(act.SP_RA_CL_CLIN_PHASE == "IV") {
			act.SP_AA_CL_CRF_PAGES = 45;
		}
		else {
			act.SP_AA_CL_CRF_PAGES = 0;
		}
	}
}



//KSK 14:30 02/12/2015: 452 2015 FTE metrics update new CDPR

function sp_step_num_order(id_act)
{
	var o_act = "opxActivity".get(id_act);
	var num = 0;
	var num2 = 0;

	if (o_act instanceof OpxActivity && o_act !=undefined)
	{
		var trial = o_act.Sp_get_trial_ID("ID");
		if (trial instanceof OpxActivity && trial !=undefined)
		{
			fromobject(trial) 
			{
				for (var act in "OpxActivity" where act.WBS_TYPE==o_act.WBS_TYPE order by {"PS","_PM_DA_S_LINE_ID"})
				{
					num++;
					if (act == o_act)
					{
						num2 = num;
					}
				}
			}
		}
		else if (o_act.SP_NF_B_CL_NEW_CDPR)
		{
			fromobject(o_act.PROJECT)
			{
				for (var act in "OpxActivity" where act.WBS_TYPE==o_act.WBS_TYPE order by {"PS","_PM_DA_S_LINE_ID"})
				{
					num++;
					if (act == o_act)
					{
						num2 = num;
					}
				}
			}
		}
		return num2;
	}
	
}
sp_step_num_order.exportfunction({"STRING"},"NUMBER");

function Sp_get_general_step_id(uselessParameter) {
	var result = "";
	var current_activity;
	var curr_project = this.project;

	if (this InstanceOf OpxActivity) {
		current_activity= this;
	}
	else { 
		current_activity= this.ACTIVITY;
	}
	
	var trial_index = current_activity.CallStringFormula("SP_NF_CL_TRIAL_ID");
	var trial = "OpxActivity".get(trial_index);
	if ( current_activity != undefined && current_activity Instanceof OpxActivity && trial!=undefined && trial Instanceof OpxActivity ) {
		fromobject(trial) {
			if (current_activity!=undefined && current_activity Instanceof OpxActivity) {
				var act_level=current_activity.LEVEL;
				var exit=0;
				while (act_level>=1 && (current_activity.SP_NF_B_OBS_CLIN_ACT || current_activity.SP_NF_B_CLIN_ACT) && exit==0) {
					if (current_activity.SP_NF_B_IS_STEP_FOR_STEP_ORDER) {
						result=current_activity.CallStringFormula("ID");
						exit=1;
					}
					else {
						current_activity=current_activity.WBS_ELEMENT;
						act_level=current_activity.LEVEL;
					}
				}
			}
		}
	}
	return result;
}

withoutlocking
{
	Sp_get_general_step_id.exportfunction({"STRING"},"STRING");
}

function Sp_get_CDPR_PFUYRX_ID(field)
{
var result = "";
var cur_act;
if (this InstanceOf OpxActivity)
{
cur_act= this;
}
else
{
cur_act=this.ACTIVITY;
}
	if (cur_act!=undefined && cur_act Instanceof OpxActivity)
	{
		if (cur_act != undefined && cur_act Instanceof OpxActivity)
		{
		var act_level=cur_act.LEVEL;
		var exit=0;
			while (act_level>=1 && (cur_act.SP_NF_B_OBS_CLIN_ACT || cur_act.SP_NF_B_CLIN_ACT) && exit==0)
			{
				if (cur_act.SP_NF_CL_CTLCS_ACT)
				{
					if (field!="")
					{
					result=cur_act.get(field);
					}
					else
					{
					result=cur_act.CallStringFormula("ID");
					}
					exit=1;
				}
				else
				{
					cur_act=cur_act.WBS_ELEMENT;
					act_level=cur_act.LEVEL;
				}
			}
		}
	}
return result;
}

withoutlocking
{
Sp_get_CDPR_PFUYRX_ID.exportfunction({"STRING"},"STRING");
}

// Find a first step in Trial (S_PR, S_BO, S_FU, S_SF)


function Sp_activity_is_first_step(list_act_type)
{
	var result = "";
	var current_activity;
	var vect_wbs=list_act_type.parsevector();
	
	current_activity = (this InstanceOf OpxActivity) ? this : this.ACTIVITY;

	var trial_index = current_activity.CallStringFormula("SP_NF_CL_TRIAL_ID");
	var trial = "OpxActivity".get(trial_index);
	if (trial instanceof OpxActivity)
	{
		fromobject(trial) {
			
			for (var act in "OpxActivity" where (vect_wbs.position(act.wbs_type.name) instanceof NUMBER)  order by {"PS","_PM_DA_S_LINE_ID"})
			{
				
				result=act.id.printattribute();
				break;	
			}
			
		}	
	}
	return result;
}
Sp_activity_is_first_step.exportfunction({"STRING"},"STRING");





//-----------------------------------
// sp_js_type_of_tests_act.ojs (2016-08-02 : import MPA pour S2)
//-----------------------------------
function _sp_ojs_type_of_tests_act (id_act)
{
	var o_act = "opxActivity".get(id_act);
	var v_typeOfTests = new Vector();

	if (o_act instanceof OpxActivity) {
		fromobject(o_act)
			for (var act in "OpxActivity")
				for (var idx = 1; idx <= 25; idx++) {
					var val = act.get("SP_DA_ACT_GCI_ASSAY_" + idx);
					var obj = "Opx_SP_PT_CL_TEST".get(val);
					if (obj != undefined && obj != "")
						v_typeOfTests.push(val);
				}

		v_typeOfTests = v_typeOfTests.removeduplicates();
	}

	var s_typeOfTests = v_typeOfTests.join(",");

	return s_typeOfTests;
}
_sp_ojs_type_of_tests_act.exportfunction({"STRING"}, "STRING", "Type of tests (activity) field calculation");



function  sp_js_filter_activity_has_alloc_res(sResList) {
	var vResList = sResList.parselist();
		var oActivity = this;
		if (oActivity.sp_nf_cl_trial){return true}
		for (var each in oActivity.ALLOCATIONS ){
			for (var res in vResList){
				if (res == each.RESOURCE.NAME  ){
					return true;
				}
			}
		}
	return false;
}


SP_JS_FILTER_ACTIVITY_HAS_ALLOC_RES.exportfunction({"STRING"},"BOOLEAN");


function sp_cl_get_get_languages (field)
{
                var result="";
                var lanugages=new vector();

                for (var ph in this.ACTIVITY.ALLOCATIONS where ( (ph.cost_account.name==this.cost_account.name) &&
                (ph.resource.name=="CLIN-GCD-TRA") && (this.SPAS_RA_SITE.name==ph.SPAS_RA_SITE.name) ))
                               {
                                               lanugages.push(ph.get("SP_AA_S_PH_CL_LANGUAGE"));
                               }

if (lanugages.length>0)
{
result= lanugages.join(",");
}
                
return result;
}
withoutlocking
{
sp_cl_get_get_languages.exportfunction({"STRING"},"STRING");
}


function sp_js_get_act_date_by_wbs_type_on_trial(sFirstOrLast,sWbsType,sDateField)
{
var Result ="";
var oTrial = "opxactivity".get(this.SP_NF_CL_TRIAL_ID)
if (this.SP_NF_CL_TRIAL){
if (oTrial != undefined && oTrial Instanceof OpxActivity) {
fromobject(oTrial){
	if(sFirstOrLast == "First"){
		for (var act in "OpxActivity" where act.WBS_TYPE.NAME==sWbsType order by {"PS"}){
			Result = act.get(sDateField);
			Break;
		}
	}else if(sFirstOrLast == "Last"){
		for (var act in "OpxActivity" where act.WBS_TYPE.NAME==sWbsType order by {{"INVERSE","PF"}}){
			Result = act.get(sDateField);
			Break;
		}
	}
}
}
}
else
	result = oTrial.sp_js_get_act_date_by_wbs_type_on_trial(sFirstOrLast,sWbsType,sDateField)
return Result
}
sp_js_get_act_date_by_wbs_type_on_trial.exportfunction({"STRING","STRING","STRING"},"DATE");

function sp_js_get_act_date_by_wbs_type_on_STEP(sFirstOrLast,sWbsType,sDateField)
{
var Result ="";
var oStep = "opxactivity".get(this.SP_GET_ACTIVITY_STEP(""))
if (this.SP_NF_B_IS_STEP){
if (oStep != undefined && oStep Instanceof OpxActivity) {
fromobject(oStep){
	if(sFirstOrLast == "First"){
		for (var act in "OpxActivity" where act.WBS_TYPE.NAME==sWbsType order by {"PS"}){
			Result = act.get(sDateField);
			Break;
		}
	}else if(sFirstOrLast == "Last"){
		for (var act in "OpxActivity" where act.WBS_TYPE.NAME==sWbsType order by {{"INVERSE","PF"}}){
			Result = act.get(sDateField);
			Break;
		}
	}
}
}
}
else
	result = oStep.sp_js_get_act_date_by_wbs_type_on_STEP(sFirstOrLast,sWbsType,sDateField)
return Result
}
sp_js_get_act_date_by_wbs_type_on_STEP.exportfunction({"STRING","STRING","STRING"},"DATE");

function sp_js_get_act_date_by_wbs_type_on_gci(sFirstOrLast,sWbsType,sDateField)
{
var result=-1;
var trial_Id;
var Trial;
var act_cur=this;
if (act_cur.SP_CL_S_GCI_RELEASE=="" && act_cur.WBS_ELEMENT.WBS_TYPE.name==sWbsType)
{
	act_cur=act_cur.WBS_ELEMENT;
}

if (act_cur.SP_CL_S_GCI_RELEASE!="")
{
trial_Id=this.sp_get_trial_id("");	
Trial="OpxActivity".get(trial_Id);
	
if(Trial instanceof OpxActivity)
{
	fromobject(Trial)
	{
		if(sFirstOrLast == "First")
		{
			for (var act in "OpxActivity".findclass() where act.WBS_TYPE.NAME==sWbsType && act.SP_CL_S_GCI_RELEASE==act_cur.SP_CL_S_GCI_RELEASE order by {"PS"})
			{
				Result = act.get(sDateField);
				Break;
			}
		}
		else 
		{
			if(sFirstOrLast == "Last")
			{
				for (var act in "OpxActivity".findclass() where act.WBS_TYPE.NAME==sWbsType && act.SP_CL_S_GCI_RELEASE==act_cur.SP_CL_S_GCI_RELEASE order by {{"INVERSE","PF"}})
				{
					Result = act.get(sDateField);
					Break;
				}
			}	
		}
		
	}		
}
}
	
return result;	
}
sp_js_get_act_date_by_wbs_type_on_gci.exportfunction({"STRING","STRING","STRING"},"DATE");

function sp_js_get_gci_level_id(oAct){
	if( oAct.SP_NF_B_IS_GCI && oAct.SP_NF_GCI_REL_CODE!="") return oAct.callstringformula("ID")
	else if (oAct.level>1 && (oAct.SP_NF_B_IS_GCI==false)){return sp_js_get_gci_level_id(oAct.WBS_ELEMENT)}
	
}sp_js_get_gci_level_id.exportfunction({"STRING"},"STRING")

function SP_get_act_date_under_step_last(date_field,act_type)
{
	var cur_act = this;
	var result=-1;
	var orderList = new Vector();
	orderList.push(date_field);

	if (cur_act != undefined && cur_act Instanceof OpxActivity) {
		fromobject(cur_act) {
			for (var act in "OpxActivity"
			where act.CallBooleanFormula("BELONGS(\"WBS_TYPE\",\"" + act_type + "\")") && act.get(date_field) != undefined order  by {{"INVERSE","PF"}}) {
				result = act.get(date_field);
				break;
			}
		}
	}
	return result;
}

withoutlocking {
	SP_get_act_date_under_step_last.exportfunction({"STRING","STRING"},"DATE");
}
//Added new function for calculating First,Middle & last Planned finish for UBL,STAT&DBL activity type
function sp_js_get_act_date_by_wbs_type_UBL_STAT_DBL_on_trial(sFirstOrLastOrMiddle,sWbsType,sDateField)
{
var Result ="";
var Cnt_Act=0;
var cur_Act_cnt=0;
var Cnt_Act_Mid=0;
var oTrial = "opxactivity".get(this.SP_NF_CL_TRIAL_ID)
if (this.SP_NF_CL_TRIAL){

if (oTrial != undefined && oTrial Instanceof OpxActivity) {
fromobject(oTrial){

for (var a in "OpxActivity" where a.WBS_TYPE.NAME==sWbsType)
{Cnt_Act++;}

Cnt_Act_Mid=math.round(Cnt_Act/2);

if(sFirstOrLastOrMiddle == "First"){
                                for (var act in "OpxActivity" where act.WBS_TYPE.NAME==sWbsType order by {"PF"}){
                                                Result = act.get(sDateField);
                                                Break;
                                }
                }else if(Cnt_Act>1&&sFirstOrLastOrMiddle == "Last"){
                                for (var act in "OpxActivity" where act.WBS_TYPE.NAME==sWbsType order by {{"INVERSE","PF"}}){
                                                Result = act.get(sDateField);
                                                Break;
                                }
                                
                }
                else if(Cnt_Act>2&&sFirstOrLastOrMiddle == "Middle"){
                                                for (var act in "OpxActivity" where act.WBS_TYPE.NAME==sWbsType order by {"PF"}){
                                                cur_Act_cnt++;
                                                if (cur_Act_cnt == Cnt_Act_Mid){
                                                Result = act.get(sDateField);
                                                Break;
                                                }
                                                }
                                }
}
}
}
else
                result = oTrial.sp_js_get_act_date_by_wbs_type_UBL_STAT_DBL_on_trial(sFirstOrLastOrMiddle,sWbsType,sDateField)
return Result
}
sp_js_get_act_date_by_wbs_type_UBL_STAT_DBL_on_trial.exportfunction({"STRING","STRING","STRING"},"DATE");

 
//	NAME	: SP_JS_CONSOLIDATED_GANTT_FUNCTIONS
//	AUTHOR  : bcordel
//  PURPOSE : COMPASS v6 , function for the consolidated Gantt
//  
//  HISTORY :
var revision_number ="1.03";
//  Revision 1.03 2020/04/24 KSH
//  RITM1823039 modifying sp_js_conso_gantt_get_act_vector function to filter activity based on PROJECT and TRIAL CODE 
//
//	Revision 1.02 2019/09/05 bcordel
//	ITS-INC3097658 modifying sp_js_conso_gantt_get_act_vector to allow opening all project template without any other filter than state.
//
//	Revision 1.01 2019/07/22 bcordel
//	ITS-INC2884445 removed the use of reverse relation between OBS and activities in sp_js_conso_gantt_get_act_vector because it is not returning all activities.
//
//	Revision 1.00 2019/04/26 bcordel
//	ITS-INC2356163 rework on gantt consolidated.
//
//
//	Revision 0.03 ,optimisation 2
//	Revision 0.02 ,optimisation
//	Revision 0.01 ,Creation of the script

function sp_js_conso_gantt_get_act_vector()
{
	var v_list_act_final = new vector();
	var n_counter_final_act=0;
	
	//code to know which filter to lock in the toolbar
	var s_filter_code="";
	
	//taking the project status filter
	var s_project_status_filter = "OPEN and STATE = \"Active\"";
	if (context.SP_AA_OC_S_REP_STATE_FILTER!="")
	{
		var s_project_status = context.SP_AA_OC_S_REP_STATE_FILTER;
		var v_project_status = s_project_status.split(",");
		s_project_status_filter = "";
		for (var s_filter in v_project_status)
		{
			if (s_project_status_filter=="")
			{
				s_project_status_filter="\""+s_filter+"\"";
			}else{
				s_project_status_filter=s_project_status_filter+",\""+s_filter+"\"";
			}
		}
		s_project_status_filter="OPEN and STATE in ("+s_project_status_filter+")";
	}
	// alert("s_project_status_filter : "+s_project_status_filter);
	
	// checking in what case we are for the secondary filters other than portfolio and study lead. OBS not empty = 1. trial status not empty = 2. clinical not empty =4.
	var n_filter_status = 0;
	var Projectvect=new vector();
	
	if (context.SP_AA_S_CO_62A_OBS_ELEMENT != ""){n_filter_status=n_filter_status+1;s_filter_code=s_filter_code+"O";}
	if (context.SP_AA_S_CO_62A_TRIAL_STATUS != ""){n_filter_status=n_filter_status+2;s_filter_code=s_filter_code+"T";}
	if (context.SP_AA_CLINIC_FILTER){n_filter_status=n_filter_status+4;s_filter_code=s_filter_code+"C";}
	// case for Trial code filter
	if (context.SP_AA_S_CO_62A_TRIAL_CODE != "")
	{
		n_filter_status=n_filter_status+8;
		s_filter_code=s_filter_code+"R";
		
		var Tcvect=context.SP_AA_S_CO_62A_TRIAL_CODE.split(",");
		for (var i=0;i<Tcvect.length;i++)
		{
			for (var tc in "opxSP_PT_CL_TRIAL_CODE" where tc.name==Tcvect[i])
			{
				Projectvect.push(tc.Project.name);
				
			}
			
		}
		var prj="";
		
		for (var s_filter in Projectvect)
		{
			if (prj=="")
			{
				prj="\""+s_filter+"\"";
			}else{
				prj=prj+",\""+s_filter+"\"";
			}
		}
		
		s_project_status_filter=s_project_status_filter+" and Name in ("+prj+")";
		}
	
	//Code to know in which case we are
	var n_code = 0;// 0 all filters empty; 1 portfolio not empty; 2 study leadership filter not empty; 3 Project filter not empty ; 4 trial status/obs/clinical not empty; 
	
	if (context.SP_AA_OC_S_REP_BS2_FILTER != ""){n_code=n_code+1;s_filter_code=s_filter_code+"P";}
	if (context.SP_AA_S_CO_62A_STUDY_LEAD != ""){n_code=n_code+2;s_filter_code=s_filter_code+"S";}
	if (context.SP_AA_OC_S_REP_PRJ_FILTER != ""){n_code=n_code+4;s_filter_code=s_filter_code+"Z";}
	if (n_filter_status>0){n_code=n_code+8;}
	
	//creating a filter for secondary fields depending of the case. 
	//updated the case form 8 to 15 for trial code filter 
	var s_filter_secondary ="";
	switch (n_filter_status)
	{
		case 0 : s_filter_secondary="TRUE";
		case 1 : s_filter_secondary="SP_NF_B_BELONGS_OBS_FILTER";
		case 2 : s_filter_secondary="LIST_FIND(SP_NF_CL_TRIAL_STATUS_GLOBAL, oc.SP_AA_S_CO_62A_TRIAL_STATUS)";
		case 3 : s_filter_secondary="SP_NF_B_BELONGS_OBS_FILTER and LIST_FIND(SP_NF_CL_TRIAL_STATUS_GLOBAL, oc.SP_AA_S_CO_62A_TRIAL_STATUS)";
		case 4 : s_filter_secondary="SP_NF_B_OBS_CLIN_ACT";
		case 5 : s_filter_secondary="SP_NF_B_OBS_CLIN_ACT and SP_NF_B_BELONGS_OBS_FILTER";
		case 6 : s_filter_secondary="SP_NF_B_OBS_CLIN_ACT and LIST_FIND(SP_NF_CL_TRIAL_STATUS_GLOBAL, oc.SP_AA_S_CO_62A_TRIAL_STATUS)";
		case 7 : s_filter_secondary="SP_NF_B_OBS_CLIN_ACT and SP_NF_B_BELONGS_OBS_FILTER and LIST_FIND(SP_NF_CL_TRIAL_STATUS_GLOBAL, oc.SP_AA_S_CO_62A_TRIAL_STATUS)";
		case 8 : s_filter_secondary="LIST_FIND(SP_NF_CL_TRIAL_CODE,OC.SP_AA_S_CO_62A_TRIAL_CODE)";
		case 9 : s_filter_secondary="LIST_FIND(SP_NF_CL_TRIAL_CODE,OC.SP_AA_S_CO_62A_TRIAL_CODE) and SP_NF_B_BELONGS_OBS_FILTER";
		case 10 : s_filter_secondary="LIST_FIND(SP_NF_CL_TRIAL_CODE,OC.SP_AA_S_CO_62A_TRIAL_CODE) and LIST_FIND(SP_NF_CL_TRIAL_STATUS_GLOBAL, oc.SP_AA_S_CO_62A_TRIAL_STATUS)";
		case 11 : s_filter_secondary="LIST_FIND(SP_NF_CL_TRIAL_CODE,OC.SP_AA_S_CO_62A_TRIAL_CODE) and LIST_FIND(SP_NF_CL_TRIAL_STATUS_GLOBAL, oc.SP_AA_S_CO_62A_TRIAL_STATUS) and SP_NF_B_BELONGS_OBS_FILTER";
		case 12 : s_filter_secondary="LIST_FIND(SP_NF_CL_TRIAL_CODE,OC.SP_AA_S_CO_62A_TRIAL_CODE) and SP_NF_B_OBS_CLIN_ACT";
		case 13 : s_filter_secondary="LIST_FIND(SP_NF_CL_TRIAL_CODE,OC.SP_AA_S_CO_62A_TRIAL_CODE) and SP_NF_B_OBS_CLIN_ACT and SP_NF_B_BELONGS_OBS_FILTER";
		case 14 : s_filter_secondary="LIST_FIND(SP_NF_CL_TRIAL_CODE,OC.SP_AA_S_CO_62A_TRIAL_CODE) and SP_NF_B_OBS_CLIN_ACT and LIST_FIND(SP_NF_CL_TRIAL_STATUS_GLOBAL, oc.SP_AA_S_CO_62A_TRIAL_STATUS)";
		case 15 : s_filter_secondary="LIST_FIND(SP_NF_CL_TRIAL_CODE,OC.SP_AA_S_CO_62A_TRIAL_CODE) and SP_NF_B_OBS_CLIN_ACT and LIST_FIND(SP_NF_CL_TRIAL_STATUS_GLOBAL, oc.SP_AA_S_CO_62A_TRIAL_STATUS) and SP_NF_B_BELONGS_OBS_FILTER";
	} 
	
	// No filter selected except State
	if (n_code==0)
	{
		if (context.SP_AA_OC_S_REP_STATE_FILTER=="Project template")
		{
			var n_monitoring_project_temp=0;
			for (var o_project_temp in "OpxProject" where o_project_temp.STATE==context.SP_AA_OC_S_REP_STATE_FILTER)
			{
				n_monitoring_project_temp++;
			}
			withmonitoring(n_monitoring_project_temp)
			{
				for (var o_project_temp in "OpxProject" where o_project_temp.STATE==context.SP_AA_OC_S_REP_STATE_FILTER)
				{
					fromobject(o_project_temp)
					{
						for (var o_act in "OpxActivity" where o_act.LEVEL==1)
						{
							v_list_act_final.push(o_act);
							n_counter_final_act++;
						}
					}
					"Generating the virtual dataset...".monitor(n_monitoring_project_temp,1,1);
				}
			}
		}
		else {
			alert("Please set up another filter in order to be able to display the report. To display templates select \"Project template\" in \"State\" with no other filter.");
			return 0;
		}
	}

	// First case, the study leadership as we can use reverse relation it is better for performances
	if (context.SP_AA_S_CO_62A_STUDY_LEAD != "")
	{
		var v_study_lead = context.SP_AA_S_CO_62A_STUDY_LEAD.split(",");
		//Monitoring to not get timeouted
		var n_monitoring_study_lead=0;
		for (var s_study in v_study_lead)
		{
			n_monitoring_study_lead++;
		}
		withmonitoring(n_monitoring_study_lead)
		{
			for (var s_study in v_study_lead)
			{
				var o_current_study = "OpxSP_PT_CL_STD_LEADERSHIP".get(s_study);
				if (o_current_study instanceof SP_PT_CL_STD_LEADERSHIP)
				{
					if (context.SP_AA_OC_S_REP_BS2_FILTER != "" && context.SP_AA_OC_S_REP_PRJ_FILTER == "")
					{
						for (var o_act in o_current_study.get("r.SP_RA_CL_STUDY_LEADERSHIP.WORK-STRUCTURE") where o_act.PROJECT.CallBooleanFormula(s_project_status_filter+" and SP_NF_B_PRJ_TYPE_FILTER"))
						{
							if(o_act instanceof OpxActivity &&  o_act.CallBooleanFormula(s_filter_secondary))
							{
								v_list_act_final.push(o_act);
								n_counter_final_act++;
							}
						}
					}
					// Checking project filter 
					else if (context.SP_AA_OC_S_REP_PRJ_FILTER != "")
					{
						for (var o_act in o_current_study.get("r.SP_RA_CL_STUDY_LEADERSHIP.WORK-STRUCTURE") where o_act.PROJECT.CallBooleanFormula(s_project_status_filter+" and LIST_FIND(NAME, oc.SP_AA_OC_S_REP_PRJ_FILTER)"))
						{
							if(o_act instanceof OpxActivity &&  o_act.CallBooleanFormula(s_filter_secondary))
							{
								v_list_act_final.push(o_act);
								n_counter_final_act++;
							}
						}
					}
					else
					{
						for (var o_act in o_current_study.get("r.SP_RA_CL_STUDY_LEADERSHIP.WORK-STRUCTURE") where o_act.PROJECT.CallBooleanFormula(s_project_status_filter))
						{
							if(o_act instanceof OpxActivity &&  o_act.CallBooleanFormula(s_filter_secondary))
							{
								v_list_act_final.push(o_act);
								n_counter_final_act++;
							}
						}
					}
				}
				"Generating the virtual dataset...".monitor(n_monitoring_study_lead,1,1);
			}
		}
	}
	
	// Second case, checking the portfolio filter
	if ((context.SP_AA_OC_S_REP_BS2_FILTER!="" || context.SP_AA_OC_S_REP_PRJ_FILTER!="") && context.SP_AA_S_CO_62A_STUDY_LEAD =="")
	{
		//Monitoring to not get timeouted
		var n_monitoring_project=0;
		if(context.SP_AA_OC_S_REP_BS2_FILTER!="" && context.SP_AA_OC_S_REP_PRJ_FILTER =="")
		{
			for (var o_project in "OpxProject" where o_project.CallBooleanFormula(s_project_status_filter+" and SP_NF_B_PRJ_TYPE_FILTER") )
			{
				n_monitoring_project++;
			}
			withmonitoring(n_monitoring_project)
			{
				for (var o_project in "OpxProject" where o_project.CallBooleanFormula(s_project_status_filter+" and SP_NF_B_PRJ_TYPE_FILTER") )
				{
					fromobject(o_project)
					{
						if (n_filter_status>0)
						{
							for (var o_act in "OpxActivity" where o_act.callbooleanformula(s_filter_secondary))
							{
								v_list_act_final.push(o_act);
								n_counter_final_act++;
							}
						}else{
							for (var o_act in "OpxActivity" where o_act.LEVEL==1)
							{
								v_list_act_final.push(o_act);
								n_counter_final_act++;
							}
						}
						
						"Generating the virtual dataset...".monitor(n_monitoring_project,1,1);
					}
				}
			}
	    }
		//Filter for Project
		else
		{
			for (var o_project in "OpxProject" where o_project.CallBooleanFormula(s_project_status_filter+" and LIST_FIND(NAME, oc.SP_AA_OC_S_REP_PRJ_FILTER)") )
			{
				n_monitoring_project++;
			}
			withmonitoring(n_monitoring_project)
			{
				for (var o_project in "OpxProject" where o_project.CallBooleanFormula(s_project_status_filter+" and LIST_FIND(NAME, oc.SP_AA_OC_S_REP_PRJ_FILTER)") )
				{
					fromobject(o_project)
					{
						if (n_filter_status>0)
						{
							for (var o_act in "OpxActivity" where o_act.callbooleanformula(s_filter_secondary))
							{
								v_list_act_final.push(o_act);
								n_counter_final_act++;
							}
						}else{
							for (var o_act in "OpxActivity" where o_act.LEVEL==1)
							{
								v_list_act_final.push(o_act);
								n_counter_final_act++;
							}
						}
						
						"Generating the virtual dataset...".monitor(n_monitoring_project,1,1);
					}
				}
			}
	    }
	}
			
	// Ending it with the three last filters 
	if (n_filter_status>0 && n_code==8)
	{
		// then depending of what we have already done we are constructing the final vector using different list.
		//Monitoring to not get timeouted
		var n_monitoring_project=0;
		for (var o_project in "OpxProject" where o_Project.CallBooleanFormula(s_project_status_filter))
		{
			n_monitoring_project++;
		}
		withmonitoring(n_monitoring_project)
		{
			for (var o_project in "OpxProject" where o_project.CallBooleanFormula(s_project_status_filter))
			{
				fromobject(o_project)
				{
					for (var o_act in "OpxActivity" where o_act.CallBooleanFormula(s_filter_secondary))
					{
						v_list_act_final.push(o_act);
						n_counter_final_act++;
					}
				}
				"Generating the virtual dataset...".monitor(n_monitoring_project,1,1);
			}
		}
	}
	
	// alert("n_filter_status : "+n_filter_status);
	 // alert("s_filter_secondary : "+s_filter_secondary);
	
	// alert ("number of activities for obs : "+v_list_act_obs.length);
	// alert ("number of activities for portfolio : "+v_list_act_port.length);
	// alert ("number of activities for other filter : "+n_counter_final_act);
	// alert ("number of activities : "+v_list_act_final.length);
	 
	//Setting the field used to lock the filters
	context.SP_AA_S_CTX_TEMPORARY_FIELD=s_filter_code;
	
	return v_list_act_final;
}



function sp_js_open_conso_gantt()
{
	//creating the virtualdataset and adding activities in it.
	var o_virtualDataset = new OpxVirtualDataset();
	var v_activities = sp_js_conso_gantt_get_act_vector();
	if (v_activities != 0)
	{
		o_virtualDataset.selectedActivities = v_activities;
		o_virtualDataset.comment = "Selected activities";
		
		var link =
		new HyperLink("Fvalue",
			"Attribute", "id",
			"EditorType", "SP_RE_REP_CONSO_GANTT_TABLE_HOME",
			"PopUp", false
		);
		Link.go(o_virtualDataset);
	}
}

////////////////////////////////////
////// Functions used to reconstruct the toolbar on consolidated gantt
////// SP_IhmTbAddToolBar_consogantt;
///////////////////////////////////

method SP_IhmTbAddToolBar_consogantt on Graphics(){
  this.widget.SetReportAndObject("opxReport".report_getreplace("SP_IHM_TB_REP_TOOLBAR_CONSO_GANTT"),Context);
  this.widget.fittopage = true;
}

writetolog("Script SP_JS_CONSOLIDATED_GANTT_FUNCTIONS loaded with version ~a ", revision_number);

//	NAME	: SP_JS_CONSOLIDATED_GANTT_FUNCTIONS
//	AUTHOR  : bcordel
//  PURPOSE : COMPASS v6 , function for the consolidated Gantt
//  
//  HISTORY :
var revision_number ="1.03";
//  Revision 1.03 2020/04/24 KSH
//  RITM1823039 modifying sp_js_conso_gantt_get_act_vector function to filter activity based on PROJECT and TRIAL CODE 
//
//	Revision 1.02 2019/09/05 bcordel
//	ITS-INC3097658 modifying sp_js_conso_gantt_get_act_vector to allow opening all project template without any other filter than state.
//
//	Revision 1.01 2019/07/22 bcordel
//	ITS-INC2884445 removed the use of reverse relation between OBS and activities in sp_js_conso_gantt_get_act_vector because it is not returning all activities.
//
//	Revision 1.00 2019/04/26 bcordel
//	ITS-INC2356163 rework on gantt consolidated.
//
//
//	Revision 0.03 ,optimisation 2
//	Revision 0.02 ,optimisation
//	Revision 0.01 ,Creation of the script

function sp_js_conso_gantt_get_act_vector()
{
	var v_list_act_final = new vector();
	var n_counter_final_act=0;
	
	//code to know which filter to lock in the toolbar
	var s_filter_code="";
	
	//taking the project status filter
	var s_project_status_filter = "OPEN and STATE = \"Active\"";
	if (context.SP_AA_OC_S_REP_STATE_FILTER!="")
	{
		var s_project_status = context.SP_AA_OC_S_REP_STATE_FILTER;
		var v_project_status = s_project_status.split(",");
		s_project_status_filter = "";
		for (var s_filter in v_project_status)
		{
			if (s_project_status_filter=="")
			{
				s_project_status_filter="\""+s_filter+"\"";
			}else{
				s_project_status_filter=s_project_status_filter+",\""+s_filter+"\"";
			}
		}
		s_project_status_filter="OPEN and STATE in ("+s_project_status_filter+")";
	}
	// alert("s_project_status_filter : "+s_project_status_filter);
	
	// checking in what case we are for the secondary filters other than portfolio and study lead. OBS not empty = 1. trial status not empty = 2. clinical not empty =4.
	var n_filter_status = 0;
	var Projectvect=new vector();
	
	if (context.SP_AA_S_CO_62A_OBS_ELEMENT != ""){n_filter_status=n_filter_status+1;s_filter_code=s_filter_code+"O";}
	if (context.SP_AA_S_CO_62A_TRIAL_STATUS != ""){n_filter_status=n_filter_status+2;s_filter_code=s_filter_code+"T";}
	if (context.SP_AA_CLINIC_FILTER){n_filter_status=n_filter_status+4;s_filter_code=s_filter_code+"C";}
	// case for Trial code filter
	if (context.SP_AA_S_CO_62A_TRIAL_CODE != "")
	{
		n_filter_status=n_filter_status+8;
		s_filter_code=s_filter_code+"R";
		
		var Tcvect=context.SP_AA_S_CO_62A_TRIAL_CODE.split(",");
		for (var i=0;i<Tcvect.length;i++)
		{
			for (var tc in "opxSP_PT_CL_TRIAL_CODE" where tc.name==Tcvect[i])
			{
				Projectvect.push(tc.Project.name);
				
			}
			
		}
		var prj="";
		
		for (var s_filter in Projectvect)
		{
			if (prj=="")
			{
				prj="\""+s_filter+"\"";
			}else{
				prj=prj+",\""+s_filter+"\"";
			}
		}
		
		s_project_status_filter=s_project_status_filter+" and Name in ("+prj+")";
		}
	
	//Code to know in which case we are
	var n_code = 0;// 0 all filters empty; 1 portfolio not empty; 2 study leadership filter not empty; 3 Project filter not empty ; 4 trial status/obs/clinical not empty; 
	
	if (context.SP_AA_OC_S_REP_BS2_FILTER != ""){n_code=n_code+1;s_filter_code=s_filter_code+"P";}
	if (context.SP_AA_S_CO_62A_STUDY_LEAD != ""){n_code=n_code+2;s_filter_code=s_filter_code+"S";}
	if (context.SP_AA_OC_S_REP_PRJ_FILTER != ""){n_code=n_code+4;s_filter_code=s_filter_code+"Z";}
	if (n_filter_status>0){n_code=n_code+8;}
	
	//creating a filter for secondary fields depending of the case. 
	//updated the case form 8 to 15 for trial code filter 
	var s_filter_secondary ="";
	switch (n_filter_status)
	{
		case 0 : s_filter_secondary="TRUE";
		case 1 : s_filter_secondary="SP_NF_B_BELONGS_OBS_FILTER";
		case 2 : s_filter_secondary="LIST_FIND(SP_NF_CL_TRIAL_STATUS_GLOBAL, oc.SP_AA_S_CO_62A_TRIAL_STATUS)";
		case 3 : s_filter_secondary="SP_NF_B_BELONGS_OBS_FILTER and LIST_FIND(SP_NF_CL_TRIAL_STATUS_GLOBAL, oc.SP_AA_S_CO_62A_TRIAL_STATUS)";
		case 4 : s_filter_secondary="SP_NF_B_OBS_CLIN_ACT";
		case 5 : s_filter_secondary="SP_NF_B_OBS_CLIN_ACT and SP_NF_B_BELONGS_OBS_FILTER";
		case 6 : s_filter_secondary="SP_NF_B_OBS_CLIN_ACT and LIST_FIND(SP_NF_CL_TRIAL_STATUS_GLOBAL, oc.SP_AA_S_CO_62A_TRIAL_STATUS)";
		case 7 : s_filter_secondary="SP_NF_B_OBS_CLIN_ACT and SP_NF_B_BELONGS_OBS_FILTER and LIST_FIND(SP_NF_CL_TRIAL_STATUS_GLOBAL, oc.SP_AA_S_CO_62A_TRIAL_STATUS)";
		case 8 : s_filter_secondary="LIST_FIND(SP_NF_CL_TRIAL_CODE,OC.SP_AA_S_CO_62A_TRIAL_CODE)";
		case 9 : s_filter_secondary="LIST_FIND(SP_NF_CL_TRIAL_CODE,OC.SP_AA_S_CO_62A_TRIAL_CODE) and SP_NF_B_BELONGS_OBS_FILTER";
		case 10 : s_filter_secondary="LIST_FIND(SP_NF_CL_TRIAL_CODE,OC.SP_AA_S_CO_62A_TRIAL_CODE) and LIST_FIND(SP_NF_CL_TRIAL_STATUS_GLOBAL, oc.SP_AA_S_CO_62A_TRIAL_STATUS)";
		case 11 : s_filter_secondary="LIST_FIND(SP_NF_CL_TRIAL_CODE,OC.SP_AA_S_CO_62A_TRIAL_CODE) and LIST_FIND(SP_NF_CL_TRIAL_STATUS_GLOBAL, oc.SP_AA_S_CO_62A_TRIAL_STATUS) and SP_NF_B_BELONGS_OBS_FILTER";
		case 12 : s_filter_secondary="LIST_FIND(SP_NF_CL_TRIAL_CODE,OC.SP_AA_S_CO_62A_TRIAL_CODE) and SP_NF_B_OBS_CLIN_ACT";
		case 13 : s_filter_secondary="LIST_FIND(SP_NF_CL_TRIAL_CODE,OC.SP_AA_S_CO_62A_TRIAL_CODE) and SP_NF_B_OBS_CLIN_ACT and SP_NF_B_BELONGS_OBS_FILTER";
		case 14 : s_filter_secondary="LIST_FIND(SP_NF_CL_TRIAL_CODE,OC.SP_AA_S_CO_62A_TRIAL_CODE) and SP_NF_B_OBS_CLIN_ACT and LIST_FIND(SP_NF_CL_TRIAL_STATUS_GLOBAL, oc.SP_AA_S_CO_62A_TRIAL_STATUS)";
		case 15 : s_filter_secondary="LIST_FIND(SP_NF_CL_TRIAL_CODE,OC.SP_AA_S_CO_62A_TRIAL_CODE) and SP_NF_B_OBS_CLIN_ACT and LIST_FIND(SP_NF_CL_TRIAL_STATUS_GLOBAL, oc.SP_AA_S_CO_62A_TRIAL_STATUS) and SP_NF_B_BELONGS_OBS_FILTER";
	} 
	
	// No filter selected except State
	if (n_code==0)
	{
		if (context.SP_AA_OC_S_REP_STATE_FILTER=="Project template")
		{
			var n_monitoring_project_temp=0;
			for (var o_project_temp in "OpxProject" where o_project_temp.STATE==context.SP_AA_OC_S_REP_STATE_FILTER)
			{
				n_monitoring_project_temp++;
			}
			withmonitoring(n_monitoring_project_temp)
			{
				for (var o_project_temp in "OpxProject" where o_project_temp.STATE==context.SP_AA_OC_S_REP_STATE_FILTER)
				{
					fromobject(o_project_temp)
					{
						for (var o_act in "OpxActivity" where o_act.LEVEL==1)
						{
							v_list_act_final.push(o_act);
							n_counter_final_act++;
						}
					}
					"Generating the virtual dataset...".monitor(n_monitoring_project_temp,1,1);
				}
			}
		}
		else {
			alert("Please set up another filter in order to be able to display the report. To display templates select \"Project template\" in \"State\" with no other filter.");
			return 0;
		}
	}

	// First case, the study leadership as we can use reverse relation it is better for performances
	if (context.SP_AA_S_CO_62A_STUDY_LEAD != "")
	{
		var v_study_lead = context.SP_AA_S_CO_62A_STUDY_LEAD.split(",");
		//Monitoring to not get timeouted
		var n_monitoring_study_lead=0;
		for (var s_study in v_study_lead)
		{
			n_monitoring_study_lead++;
		}
		withmonitoring(n_monitoring_study_lead)
		{
			for (var s_study in v_study_lead)
			{
				var o_current_study = "OpxSP_PT_CL_STD_LEADERSHIP".get(s_study);
				if (o_current_study instanceof SP_PT_CL_STD_LEADERSHIP)
				{
					if (context.SP_AA_OC_S_REP_BS2_FILTER != "" && context.SP_AA_OC_S_REP_PRJ_FILTER == "")
					{
						for (var o_act in o_current_study.get("r.SP_RA_CL_STUDY_LEADERSHIP.WORK-STRUCTURE") where o_act.PROJECT.CallBooleanFormula(s_project_status_filter+" and SP_NF_B_PRJ_TYPE_FILTER"))
						{
							if(o_act instanceof OpxActivity &&  o_act.CallBooleanFormula(s_filter_secondary))
							{
								v_list_act_final.push(o_act);
								n_counter_final_act++;
							}
						}
					}
					// Checking project filter 
					else if (context.SP_AA_OC_S_REP_PRJ_FILTER != "")
					{
						for (var o_act in o_current_study.get("r.SP_RA_CL_STUDY_LEADERSHIP.WORK-STRUCTURE") where o_act.PROJECT.CallBooleanFormula(s_project_status_filter+" and LIST_FIND(NAME, oc.SP_AA_OC_S_REP_PRJ_FILTER)"))
						{
							if(o_act instanceof OpxActivity &&  o_act.CallBooleanFormula(s_filter_secondary))
							{
								v_list_act_final.push(o_act);
								n_counter_final_act++;
							}
						}
					}
					else
					{
						for (var o_act in o_current_study.get("r.SP_RA_CL_STUDY_LEADERSHIP.WORK-STRUCTURE") where o_act.PROJECT.CallBooleanFormula(s_project_status_filter))
						{
							if(o_act instanceof OpxActivity &&  o_act.CallBooleanFormula(s_filter_secondary))
							{
								v_list_act_final.push(o_act);
								n_counter_final_act++;
							}
						}
					}
				}
				"Generating the virtual dataset...".monitor(n_monitoring_study_lead,1,1);
			}
		}
	}
	
	// Second case, checking the portfolio filter
	if ((context.SP_AA_OC_S_REP_BS2_FILTER!="" || context.SP_AA_OC_S_REP_PRJ_FILTER!="") && context.SP_AA_S_CO_62A_STUDY_LEAD =="")
	{
		//Monitoring to not get timeouted
		var n_monitoring_project=0;
		if(context.SP_AA_OC_S_REP_BS2_FILTER!="" && context.SP_AA_OC_S_REP_PRJ_FILTER =="")
		{
			for (var o_project in "OpxProject" where o_project.CallBooleanFormula(s_project_status_filter+" and SP_NF_B_PRJ_TYPE_FILTER") )
			{
				n_monitoring_project++;
			}
			withmonitoring(n_monitoring_project)
			{
				for (var o_project in "OpxProject" where o_project.CallBooleanFormula(s_project_status_filter+" and SP_NF_B_PRJ_TYPE_FILTER") )
				{
					fromobject(o_project)
					{
						if (n_filter_status>0)
						{
							for (var o_act in "OpxActivity" where o_act.callbooleanformula(s_filter_secondary))
							{
								v_list_act_final.push(o_act);
								n_counter_final_act++;
							}
						}else{
							for (var o_act in "OpxActivity" where o_act.LEVEL==1)
							{
								v_list_act_final.push(o_act);
								n_counter_final_act++;
							}
						}
						
						"Generating the virtual dataset...".monitor(n_monitoring_project,1,1);
					}
				}
			}
	    }
		//Filter for Project
		else
		{
			for (var o_project in "OpxProject" where o_project.CallBooleanFormula(s_project_status_filter+" and LIST_FIND(NAME, oc.SP_AA_OC_S_REP_PRJ_FILTER)") )
			{
				n_monitoring_project++;
			}
			withmonitoring(n_monitoring_project)
			{
				for (var o_project in "OpxProject" where o_project.CallBooleanFormula(s_project_status_filter+" and LIST_FIND(NAME, oc.SP_AA_OC_S_REP_PRJ_FILTER)") )
				{
					fromobject(o_project)
					{
						if (n_filter_status>0)
						{
							for (var o_act in "OpxActivity" where o_act.callbooleanformula(s_filter_secondary))
							{
								v_list_act_final.push(o_act);
								n_counter_final_act++;
							}
						}else{
							for (var o_act in "OpxActivity" where o_act.LEVEL==1)
							{
								v_list_act_final.push(o_act);
								n_counter_final_act++;
							}
						}
						
						"Generating the virtual dataset...".monitor(n_monitoring_project,1,1);
					}
				}
			}
	    }
	}
			
	// Ending it with the three last filters 
	if (n_filter_status>0 && n_code==8)
	{
		// then depending of what we have already done we are constructing the final vector using different list.
		//Monitoring to not get timeouted
		var n_monitoring_project=0;
		for (var o_project in "OpxProject" where o_Project.CallBooleanFormula(s_project_status_filter))
		{
			n_monitoring_project++;
		}
		withmonitoring(n_monitoring_project)
		{
			for (var o_project in "OpxProject" where o_project.CallBooleanFormula(s_project_status_filter))
			{
				fromobject(o_project)
				{
					for (var o_act in "OpxActivity" where o_act.CallBooleanFormula(s_filter_secondary))
					{
						v_list_act_final.push(o_act);
						n_counter_final_act++;
					}
				}
				"Generating the virtual dataset...".monitor(n_monitoring_project,1,1);
			}
		}
	}
	
	// alert("n_filter_status : "+n_filter_status);
	 // alert("s_filter_secondary : "+s_filter_secondary);
	
	// alert ("number of activities for obs : "+v_list_act_obs.length);
	// alert ("number of activities for portfolio : "+v_list_act_port.length);
	// alert ("number of activities for other filter : "+n_counter_final_act);
	// alert ("number of activities : "+v_list_act_final.length);
	 
	//Setting the field used to lock the filters
	context.SP_AA_S_CTX_TEMPORARY_FIELD=s_filter_code;
	
	return v_list_act_final;
}



function sp_js_open_conso_gantt()
{
	//creating the virtualdataset and adding activities in it.
	var o_virtualDataset = new OpxVirtualDataset();
	var v_activities = sp_js_conso_gantt_get_act_vector();
	if (v_activities != 0)
	{
		o_virtualDataset.selectedActivities = v_activities;
		o_virtualDataset.comment = "Selected activities";
		
		var link =
		new HyperLink("Fvalue",
			"Attribute", "id",
			"EditorType", "SP_RE_REP_CONSO_GANTT_TABLE_HOME",
			"PopUp", false
		);
		Link.go(o_virtualDataset);
	}
}

////////////////////////////////////
////// Functions used to reconstruct the toolbar on consolidated gantt
////// SP_IhmTbAddToolBar_consogantt;
///////////////////////////////////

method SP_IhmTbAddToolBar_consogantt on Graphics(){
  this.widget.SetReportAndObject("opxReport".report_getreplace("SP_IHM_TB_REP_TOOLBAR_CONSO_GANTT"),Context);
  this.widget.fittopage = true;
}

writetolog("Script SP_JS_CONSOLIDATED_GANTT_FUNCTIONS loaded with version ~a ", revision_number);

 
//
//  PURPOSE : Script used in Clinical Cost metrics data recovery
//
//	SCRIPT NAME : SP_JS_COST_INFO_RDD
//
//Script created by CFN 
//	VERSION HISTORY :
//		21/08/17 - YSA : sp_js_data_rec_clinical_cost functions correction
//ysa Last update date is : 17:02 11/10/2017



//Get cost account corresponding to metric
function sp_js_map_metrics_to_cost_account(sMetric){
var result;
var met_values=new vector
("EXTERNAL_COSTS","Clinical_Cost",
"CRO","CRO",
"BIOSTATISTICS","CRO_Biostatistics",
"CONT_AMEND3","Contract_Amendment_BS",
"CRO_FEES3","CRO_Fees_BS",
"MISC4","Miscellaneous_BS",
"SA_RES3","SA_Resources_BS",
"CLIN_DOC","CRO_Clin_Doc",
"CRO_FEES6","CRO_Fees_CD",
"DATA_MANAGEMENT","CRO_Data_Mgt",
"CONT_AMEND2","Contract_Amendment_DMG",
"CRO_FEES2","CRO_Fees_DMG",
"EDC_STD_SM","EDC_Fees_DMG",
"MISC3","Miscellaneous_DMG",
"SA_RES2","SA_Resources_DMG",
"IVRS","CRO_IVRS",
"CONT_AMEND5","Contract_Amendment_IVRS",
"CRO_FEES5","CRO_Fees_IVRS",
"IVRS_CRO_ACT","CRO_Activity_IVRS",
"MISC6","Miscellaneous_IVRS",
"MED_WRITING","CRO_Medical_Writing",
"CONC_PROT","Concept_Protocol_MW",
"CRO_FEES4","ICSR_Fees_MW",
"GHOST_REP","Ghost_report_MW",
"MISC5","Miscellaneous_MW",
"MW_CRO_ACT","CRO_Activity_MW",
"PROT_FEES","Protocol_Fees_MW",
"SA_RES4","SA_Resources_MW",
"STDY_MANAGEMENT","CRO_Study_Mgt",
"CONT_AMEND","Contract_Amendment_SML",
"CRO_FEES","CRO_Fees_SML",
"FEAS_RECRUT","Feasibility_Recruitment_SML",
"MISC","Miscellaneous_SML",
"PT_COST","Pass_Through_Cost_SML",
"SA_RES","SA_Resources_SML",
"SM_CRO_ACT","CRO_Activity_SML",
"IF","IF",
"24_7_ALERT","24_7_Alert_IF",
"GRANT_MGT","Grant_Mgt_IF",
"IDMC_DSMB","IDMC_DSMB_IF",
"IF_PER_DATE","IF_per_date_IF",
"INFRA_COST","Infrastructure_costs_IF",
"INV_FEES","Investigator_fees_IF",
"INV_MEET","Investigator_meeting_IF",
"IRB_FEES","IRB_IF",
"MISC2","Miscellaneous_IF",
"SA_RES_IF","SA_Resources_IF",
"LOGISTICS","Logistics",
"EXT_LAB","GMA_External_Lab_LOG",
"LOG_OUT_FEES","Logistics_Outsourcing_Fees_LOG",
"LOG_OUT_PTC","Logistics_Outsourcing_PTC_LOG",
"MISC8","Miscellaneous_LOG",
"SA_RES5","SA_Resources_LOG",
"VAC_PURCH","Vaccine_purchase_LOG",
"PARTNERSHIP COSTS","Partnership_Cost",
"PARTNERSHIP_EU","Partnership_Europe",
"EU_BS_OT","EU_Biostatistics_Others",
"EU_BS_PM","EU_Biostatistics_PM",
"EU_CD_OT","EU_ClinDoc_Others",
"EU_CD_PM","EU_ClinDoc_PM",
"EU_DM_OT","EU_Data_Mgt_Others",
"EU_DM_PM","EU_Data_Mgt_PM",
"EU_MW_OT","EU_Med_Writing_Others",
"EU_MW_PM","EU_Med_Writing_PM",
"EU_SM_OT","EU_Study Mgt Others",
"EU_SM_PM","EU_Study_Mgt_PM",
"PARTNERSHIP_NA","Partnership_North_America",
"NA_BS_OT","NA_Biostatistics_Others",
"NA_BS_PM","NA_Biostatistics_PM",
"NA_CD_OT","NA_ClinDoc_Others",
"NA_CD_PM","NA_ClinDoc_PM",
"NA_DM_OT","NA_Data_Mgt_Others",
"NA_DM_PM","NA_Data_Mgt_PM",
"NA_MW_OT","NA_Med_Writing_Others",
"NA_MW_PM","NA_Med_Writing_PM",
"NA_SM_OT","NA_Study_Mgt_Others",
"NA_SM_PM","NA_Study_Mgt_PM",
"PROJECTS_COSTS","Project_Cost",
"CRO_P_COSTS","CRO_Project_Cost",
"BIOSTAT_CPC","CRO_Biostatistics_Project_Cost",
"MISC_BS_A","Biostatistics_Miscellaneous_A",
"MISC_BS_B","Biostatistics_Miscellaneous_B",
"CLIN_DOC_CPC","CRO_Clin_Doc_Project_Cost",
"MISC_CD_A","ClinDoc_Miscellaneous_A",
"MISC_CD_B","ClinDoc_Miscellaneous_B",
"DATA_MGT_CPC","CRO_Data_Mgt_Project_Cost",
"MISC_DM_A","Data_Mgt_Miscellaneous_A",
"MED_WTG_CPC","CRO_Medical_Writing_Project_Cost",
"DSUR_MW","Med_Writing_DSUR",
"IBUPD_MW","Med_Writing_IB_Update",
"MISC_MW_A","Med_Writing_Miscellaneous_A",
"STUDY_MGT_CPC","CRO_Study_Mgt_Project_Cost",
"MISC_SM_A","Study_Mgt_Miscellaneous_A",
"MISC_SM_B","Study_Mgt_Miscellaneous_B",
"IF_P_COSTS","IF_Project_Cost",
"IFPC_MISC","Miscellaneous_IF_Project_Cost",
"TRANSLATION","Translation",
"MISC9","Miscellaneous_TRA",
"TRANS","Translation_TRA");
if(met_values.get(sMetric) instanceof STRING)
{
result = "OpxCOST_ACCOUNT".get(met_values.get(sMetric));
}

return result;
}

//Update cost account field
function SP_update_planned_expenditures()
{

	var vec_header=new vector("Project","Activity","Trial code","Category","Comment");
	var vec_tra=new vector();
	var pathnames = "/compassv6/data_recovery/output";
	var dir = mkdir(pathnames);
	if (dir instanceof Boolean && dir)
	{
		alert("Directory ~a has been created".format(pathnames));
	}
	var log = new fileoutputstream(pathnames+"/cl_cost_not_recovered.csv","APPEND");
	if (! log instanceof fileoutputstream)
	{
		return 1;
	}
	  
	log.writeln(vec_header.join(";"));

	var met_cst="OpxCOST_ACCOUNT".get("COST_METRICS");
	var man_cst="OpxCOST_ACCOUNT".get("COST_MANUAL");
	var met_cmpt=0;
	var man_cmpt=0;
	var sMetric;
	var oCostAcc;
		
	fromobject(met_cst)
	{
		for (var each in "opxExpenditure".findclass() where each.SP_RA_METRIC_COST_EXT instanceof OpxSP_METRIC && 
		each.cost_account instanceof OpxCOST_ACCOUNT && 
		each.cost_account.name=="COST_METRICS" &&
		each.project.state=="Active" )
		{
			withoutlocking
			{
				withoutalerts
				{
					each.delete();
				}
			}
			met_cmpt++;
		}	
	}

	fromobject(man_cst)
	{
		for (var each in "opxexpenditure".findclass() where each.SP_RA_METRIC_COST_EXT instanceof OpxSP_METRIC && 
		each.cost_account instanceof OpxCOST_ACCOUNT && 
		each.cost_account.name=="COST_MANUAL" &&
		each.project.state=="Active")
		{
			sMetric=each.SP_RA_METRIC_COST_EXT.NAME;
			oCostAcc= sp_js_map_metrics_to_cost_account(sMetric);
			each.EQUATION_OVERRIDE = true;
			if (oCostAcc instanceof OpxCOST_ACCOUNT)
			{
				each.COST_ACCOUNT = oCostAcc;
				man_cmpt++;
			}
			else
			{
				vec_tra=new vector(each.ACTIVITY.project.name,each.ACTIVITY.printattribute("ID"),each.ACTIVITY.SP_NF_CL_TRIAL_CODE,sMetric,"Mapping metric/cost account is not found");
				log.writeln(vec_tra.JOIN(";"));
			}

		}	
	}	
	WriteToLog("Number of planned expenditure [COST_METRICS] updated are ~a",met_cmpt);
	WriteToLog("Number of planned expenditure [COST_MANUAL] updated are ~a",man_cmpt);
	log.close();
}


//-- FILL IN TRIAL-CATEGORY COST INFORMATION FROM P5 METRIC DATA ------------------------------------------------- 

//Import data from Metric table to temporary table

function sp_js_import_cost_info_to_TT(){
	for (var each in "opxSP_TT_TRIAL_INFO".findclass() ){
		each.delete();
	}
	
	Context.callmacro("IMPORT-DB-SP_IMPORT_COSTS_INFO_DB0");
	
	for (var each in "opxSP_TT_TRIAL_INFO" where each.SP_AA_EXT_COST_STCK_NBR != 16)
	{
		each.delete();
	}
}

//Remove Trial - Category cost information if some have been created for tests
function SP_remove_all_TCCI(){
	var deleted_TCCI_nb = 0;
	for (var TCCI in "opxSP_PT_TRIAL_CAT_COST_INFO".findclass()){
		withoutlocking
		{
			withoutalerts
			{
				TCCI.delete();
			}
		}
		
		deleted_TCCI_nb++;
	}
	return deleted_TCCI_nb;
}

//Create Trial-Category Cost Information elements from temporary table
//function sp_js_populate_pt_costs_information(useless){
function sp_js_populate_pt_costs_information()
{
	var prj=this;
	var oFile;
	var oActivity;
	var budget_site;
	var oMetric;
	var oCategory;
	var dLastUpdate;
	var oLast_update_field;
	var inCostPerSubject=0;
	var sVendor;
	var oObject;
	var result;
	var count=0;
	var vec_b_site=new vector ("Asia Pacific - Unspecified","Asia - TBD",
	"Columbia","Colombia",
	"International","",
	"Korea","Korea Republic of",
	"Latin America - Unspecified","South America - TBD",
	"Taiwan","Taiwan Province of China",
	"USA","United States",
	"Vietnam","Viet Nam");
	
	var vec_bs=new vector("KEuros","France","KCAD","Canada","KUSD","United States");
	if (prj instanceof OpxProject)
	{	
	fromobject(prj)
	{
		for (var each in "opxSP_TT_TRIAL_INFO".findclass() where each.SP_AA_EXT_COST_STCK_NBR == 16 && each.DATASET_RDD==prj.ONB.tostring())
		{
			oFile="OpxFile".get(each.DATASET_RDD.parseint("####"));
			
			if (oFile instanceof OpxFile && oFile.OPEN){
				
				//Activity
				oActivity="opxactivity".get(each.SP_RA_EXT_COST_STCK_ACT_ID.parseint("####"));
				if(oActivity instanceof opxactivity){
					
					inCostPerSubject=0;	
					//Cost category
					oMetric = "OpxSP_METRIC".get(each.SP_RA_EXT_COST_STCK_METRIC);
					if (oMetric instanceof OpxSP_METRIC)
					{
						oCategory = sp_js_map_metrics_to_cost_account(oMetric.name);
						if (oCategory instanceof OpxCOST_ACCOUNT)
						{
							oLast_update_field = oActivity.getslot("SP_AA_LST_UP_"+ oMetric.METRIC.NAME);
							if(oLast_update_field == undefined || oLast_update_field == ""){
								writeln("SP_AA_LST_UP_" + oMetric.METRIC.NAME + " undefined (for " + each.index + " - " + oMetric.name);
							}
							else
							{
								dLastUpdate = oActivity.calldateformula("SP_AA_LST_UP_"+ oMetric.METRIC.NAME);
							}
							
							//Cost per subject
							if (oCategory.name=="Investigator_fees_IF" && oActivity.SP_AA_EXT_COST_PER_SUBJECT>0)
							{
								inCostPerSubject=oActivity.SP_AA_EXT_COST_PER_SUBJECT;
							}
							
							//inCostPerSubject = (oActivity.SP_AA_EXT_COST_PER_SUBJECT == "" || oActivity.SP_AA_EXT_COST_PER_SUBJECT == undefined) ? 0 : each.SP_AA_EXT_COST_PER_SUBJECT.parseint();
							
							//Vendor
							sVendor = each.SP_AA_EXT_COST_STCK_CRO_VDNAME;
							if(sVendor == "") sVendor = "1-UNSPECIFIED";
							
							//Budget site
							budget_site = each.SP_AA_EXT_COST_STCK_BDGT_SITE;
							if (vec_b_site.get(budget_site) instanceof STRING)
							{
								budget_site = vec_b_site.get(budget_site);
							}
							
							if (budget_site=="")
							{
								if ( oCategory.COST_ACCOUNT.name=="IF" && oActivity.SP_AA_CL_STUDY_LEADERSHIP=="Clin. Dev." && (vec_bs.get(each.SP_AA_EXT_COST_STCK_CURRENCY) instanceof STRING))
								{
									budget_site=vec_bs.get(each.SP_AA_EXT_COST_STCK_CURRENCY);
								}
								if (
								( oCategory.COST_ACCOUNT.name=="Translation" 
									||
									( oCategory.COST_ACCOUNT.name=="IF" && (oActivity.SP_AA_CL_STUDY_LEADERSHIP=="GMA central" || oActivity.SP_AA_CL_STUDY_LEADERSHIP=="GMA local"|| oActivity.SP_AA_CL_STUDY_LEADERSHIP=="Epi" 
									|| oActivity.SP_AA_CL_STUDY_LEADERSHIP=="Pharmacoepi"))
									||
									( oCategory.COST_ACCOUNT.name!="Translation" && oCategory.COST_ACCOUNT.name!="IF" && oActivity.SP_NF_S_ACT_CL_GEO_AREA!=""))
								)
								{
									budget_site="France";
								}
								
								if 
								(( oCategory.COST_ACCOUNT.name=="IF" && oActivity.SP_AA_CL_STUDY_LEADERSHIP=="Med. Aff." )
								||
								( oCategory.COST_ACCOUNT.name!="Translation" && oCategory.COST_ACCOUNT.name!="IF" && oActivity.CallBooleanFormula("SP_NF_S_ACT_CL_GEO_AREA IN (\"*North America*\") ")))
								{
									budget_site="United States";
								}
							}
							
							
							budget_site="opxSP_PT_CL_COUNTRY".get(budget_site);
							if (!(budget_site instanceof opxSP_PT_CL_COUNTRY))
							{
								budget_site="";
							}
							//Create new TCCI element
							oObject=new "opxSP_PT_TRIAL_CAT_COST_INFO" ("SP_AA_N_TCCI_REV_AMT",each.SP_AA_EXT_COST_STCK_REV_AMT,
							"SP_RA_TCCI_CLINICAL_COUNTRIES",budget_site,
							"SP_AA_AT_TCCI_CONTRA_STAT",each.SP_AA_EXT_COST_STCK_CONT_STAT,
							"SP_AA_S_TCCI_CRO_VENDOR",sVendor,
							"SP_AA_NP_TCCI_COMMENT",each.SP_AA_EXT_COST_STCK_COMMENT,
							"SP_RA_TCCI_ACT_TRIAL",oActivity,
							"SP_AA_S_TCCI_CURRENCY",each.SP_AA_EXT_COST_STCK_CURRENCY,
							"SP_RA_TCCI_COSTS_ACCOUNT",oCategory,
							"SP_AA_D_TCCI_LAST_UPDATE",dLastUpdate,
							"SP_AA_N_TCCI_COST_PER_SUBJECT",inCostPerSubject,
							"File",oFile
							)
							count++;
							
						}
						else
						{
							WriteToLog("Error v6 cost acount is not found ~a",each);
							WriteToLog("P5 cost metric name is ~a",oMetric);
						}
					}
					else
					{
						WriteToLog("Error Metrics [SP_RA_EXT_COST_STCK_METRIC] is not found for ~a",each);
					}
				}
				else
				{
					WriteToLog("Error Activity [SP_RA_EXT_COST_STCK_ACT_ID] is not found for ~a",each);
				}
			}		
		}
	}
	}

	return count;
}


//-- UPDATE COST ACCOUNT ON PLANNED EXPENDITURES WITH COST CATEGORY “INVESTIGATOR FEES” AND “CRO COSTS” ----------- 
function sp_js_if_cro_recovery()
{
	var prj=this;
	var cpt_trial=0;
	var cpt_cc=0;
	var tmp_cc_o;
	var tmp_cc_t;
	var trial_act;
	var cat_t;
	var total_quantity=0;
	var vec_pe;
	var vec_pe_a;
	var vec_pe_b;
	var cost_ac_t;
	var vec_cost_cat_o=new vector();
	var vec_cost_cat_t=new vector(
	"Investigator_fees_IF",
	"Grant_Mgt_IF",
	"CRO_Fees_IVRS",
	"ICSR_Fees_MW",
	"CRO_Fees_SML",
	"CRO_Fees_BS",
	"CRO_Fees_DMG");
	var hash_cl=new hashtable("String");
	hash_cl.set("Investigator_fees_IF","IF_per_date_IF");
	hash_cl.set("Grant_Mgt_IF","SA_Resources_IF");
	hash_cl.set("CRO_Fees_IVRS","CRO_Activity_IVRS");
	hash_cl.set("ICSR_Fees_MW","CRO_Activity_MW");
	hash_cl.set("CRO_Fees_SML","CRO_Activity_SML,SA_Resources_SML");
	hash_cl.set("CRO_Fees_BS","SA_Resources_BS");
	hash_cl.set("CRO_Fees_DMG","SA_Resources_DMG");
	var cost_ac_a="OpxCOST_ACCOUNT".get("CRO_Activity_SML");
	var cost_ac_b="OpxCOST_ACCOUNT".get("SA_Resources_SML");
	var vec_header=new vector("Project","Activity","Trial code","Category","Comment");
	var vec_trace=new vector();
	var pathname = "/compassv6/data_recovery/output";
	var dir = mkdir(pathname);
	var cost_inf_id;
	var cost_inf;
	if (dir instanceof Boolean && dir)
	{
	alert("Directory ~a has been created".format(pathname));
	}

	//var log = new fileoutputstream(pathname+"/Clinical_data_recovery.CSV","APPEND");
	var log = new fileoutputstream(pathname+"/clinical_cost_data_recovery.csv","APPEND");
	if (! log instanceof fileoutputstream)
	{
	return 1;
	}
	  
	log.writeln(vec_header.JOIN(";"));
		
if (prj instanceof OpxProject)
{	
fromobject(prj)
{
	for (var cc in "OpxSP_PT_TRIAL_CAT_COST_INFO".findclass() where (cc.FILE==prj && (vec_cost_cat_t.position(cc.SP_RA_TCCI_COSTS_ACCOUNT.name) instanceof NUMBER)) )
	{
		cat_t=vec_cost_cat_t[vec_cost_cat_t.position(cc.SP_RA_TCCI_COSTS_ACCOUNT.name)];
		cost_ac_t="OpxCOST_ACCOUNT".get(cat_t);
		vec_cost_cat_o=hash_cl.get(cat_t).parsevector();
		trial_act=cc.SP_RA_TCCI_ACT_TRIAL;

		if(trial_act instanceof OpxActivity)
		{
			fromobject(trial_act)
			{
				cpt_trial++;
				vec_pe=new vector();
				vec_pe_a=new vector();
				vec_pe_b=new vector();
				total_quantity=0
				for (var pe in "OpxFORECAST_EXPENDITURE".findclass() )
				{
					if (pe.cost_account.name==cat_t)
					{
						total_quantity=total_quantity+pe.QUANTITY;
					}
					if (vec_cost_cat_o.length==1 && (vec_cost_cat_o.position(pe.cost_account.name) instanceof NUMBER))
					{
						vec_pe.push(pe);
					}
					else
					{
						if (vec_cost_cat_o.length==2 && (vec_cost_cat_o.position(pe.cost_account.name) instanceof NUMBER))
						{
							if (pe.cost_account.name==cost_ac_a.name)
							{
								vec_pe_a.push(pe);
							}
							else
							{
								vec_pe_b.push(pe);
							}
						}	
					}
				}
				if (total_quantity<=0.02)
				{
					if(vec_cost_cat_o.length==1 && vec_pe.length>0)
					{
						for (var p in vec_pe)
						{
							p.cost_account=cost_ac_t;
						}
						cost_inf_id=SP_get_TCCI_identifier(trial_act,vec_cost_cat_o[0]);
						cost_inf="opxSP_PT_TRIAL_CAT_COST_INFO".get(cost_inf_id);				
						
						if (cost_inf instanceof opxSP_PT_TRIAL_CAT_COST_INFO)
						{
							cc.SP_AA_N_TCCI_REV_AMT=cost_inf.SP_AA_N_TCCI_REV_AMT;
							cc.SP_RA_TCCI_CLINICAL_COUNTRIES=cost_inf.SP_RA_TCCI_CLINICAL_COUNTRIES;
							cc.SP_AA_AT_TCCI_CONTRA_STAT=cost_inf.SP_AA_AT_TCCI_CONTRA_STAT;
							cc.SP_AA_S_TCCI_CRO_VENDOR=cost_inf.SP_AA_S_TCCI_CRO_VENDOR;
							cc.SP_AA_NP_TCCI_COMMENT=cost_inf.SP_AA_NP_TCCI_COMMENT;
							cc.SP_AA_S_TCCI_CURRENCY=cost_inf.SP_AA_S_TCCI_CURRENCY;
							cc.SP_AA_D_TCCI_LAST_UPDATE=cost_inf.SP_AA_D_TCCI_LAST_UPDATE;
							//cc.SP_AA_N_TCCI_COST_PER_SUBJECT=cost_inf.SP_AA_N_TCCI_COST_PER_SUBJECT;	
						}

					}
					else
					{
						if (vec_pe_a.length>0 && vec_pe_b.length>0)
						{
							vec_trace=new vector(prj.name,trial_act.printattribute("ID"),trial_act.SP_NF_CL_TRIAL_CODE,cost_ac_t.name,"Planned expenditures are found in CRO_Activity_SML and SA_Resources_SML");
							log.writeln(vec_trace.JOIN(";"));
						
						}
						else
						{
							if (vec_pe_a.length>0)
							{
								for (var p in vec_pe_a)
								{
									p.cost_account=cost_ac_t;
								}
								cost_inf_id=SP_get_TCCI_identifier(trial_act,cost_ac_a.name);						
								cost_inf="opxSP_PT_TRIAL_CAT_COST_INFO".get(cost_inf_id);
								
								if (cost_inf instanceof opxSP_PT_TRIAL_CAT_COST_INFO)
								{
									cc.SP_AA_N_TCCI_REV_AMT=cost_inf.SP_AA_N_TCCI_REV_AMT;
									cc.SP_RA_TCCI_CLINICAL_COUNTRIES=cost_inf.SP_RA_TCCI_CLINICAL_COUNTRIES;
									cc.SP_AA_AT_TCCI_CONTRA_STAT=cost_inf.SP_AA_AT_TCCI_CONTRA_STAT;
									cc.SP_AA_S_TCCI_CRO_VENDOR=cost_inf.SP_AA_S_TCCI_CRO_VENDOR;
									cc.SP_AA_NP_TCCI_COMMENT=cost_inf.SP_AA_NP_TCCI_COMMENT;
									cc.SP_AA_S_TCCI_CURRENCY=cost_inf.SP_AA_S_TCCI_CURRENCY;
									cc.SP_AA_D_TCCI_LAST_UPDATE=cost_inf.SP_AA_D_TCCI_LAST_UPDATE;
									//cc.SP_AA_N_TCCI_COST_PER_SUBJECT=cost_inf.SP_AA_N_TCCI_COST_PER_SUBJECT;	
								}
							}
							else
							{
								if (vec_pe_b.length>0)
								{
									for (var p in vec_pe_b)
									{
										p.cost_account=cost_ac_t;
									}
									cost_inf_id=SP_get_TCCI_identifier(trial_act,cost_ac_b.name);	
									cost_inf="opxSP_PT_TRIAL_CAT_COST_INFO".get(cost_inf_id);
									if (cost_inf instanceof opxSP_PT_TRIAL_CAT_COST_INFO)
									{
										cc.SP_AA_N_TCCI_REV_AMT=cost_inf.SP_AA_N_TCCI_REV_AMT;
										cc.SP_RA_TCCI_CLINICAL_COUNTRIES=cost_inf.SP_RA_TCCI_CLINICAL_COUNTRIES;
										cc.SP_AA_AT_TCCI_CONTRA_STAT=cost_inf.SP_AA_AT_TCCI_CONTRA_STAT;
										cc.SP_AA_S_TCCI_CRO_VENDOR=cost_inf.SP_AA_S_TCCI_CRO_VENDOR;
										cc.SP_AA_NP_TCCI_COMMENT=cost_inf.SP_AA_NP_TCCI_COMMENT;
										cc.SP_AA_S_TCCI_CURRENCY=cost_inf.SP_AA_S_TCCI_CURRENCY;
										cc.SP_AA_D_TCCI_LAST_UPDATE=cost_inf.SP_AA_D_TCCI_LAST_UPDATE;
										//cc.SP_AA_N_TCCI_COST_PER_SUBJECT=cost_inf.SP_AA_N_TCCI_COST_PER_SUBJECT;	
									}
								}
								
							}
							
						}	
					}
				}
				else
				{
					vec_trace=new vector(prj.name,trial_act.printattribute("ID"),trial_act.SP_NF_CL_TRIAL_CODE,cost_ac_t.name,"Planned expenditures > 0.02 in this category");
					log.writeln(vec_trace.JOIN(";"));	
				}
			}	
		}

	}
	
}
}
log.close();
return cpt_trial;
//WriteToLog("Number of cost information [INVESTIGATOR FEES AND CRO COSTS] updated  is ~a",cpt_cc);
}



//-- CLINICAL COST DATA RECOVERY ------------------------------------------------------------------------------------
function sp_js_data_rec_clinical_cost()
{
	writetolog("Start data recovery for clinical costs using 'sp_js_data_rec_clinical_cost' function");
	var cpt_inf_del=0;
	var cpt_inf_add=0;
	var cpt_nb_trial=0;

	// Planned expenditure updating
	SP_update_planned_expenditures();
	// Empty cost information table
	cpt_inf_del=SP_remove_all_TCCI();
	// Load P5 cost information in SP_TT_TRIAL_INFO temp table
	sp_js_import_cost_info_to_TT();

	WriteToLog("sp_js_data_rec_clinical_cost : number of cost information deleted is ~a",cpt_inf_del);
	for (var prj in "OpxProject".findclass() where prj.OPEN && prj.state=="Active")
	{
		WriteToLog("sp_js_data_rec_clinical_cost : start cost data recovery on ~a",prj);

		//Create v6 cost information
		cpt_inf_add = prj.sp_js_populate_pt_costs_information();
		cpt_nb_trial = prj.sp_js_if_cro_recovery();
		WriteToLog("Number of cost information created is ~a",cpt_inf_add);
		WriteToLog("End cost data recovery ~a",prj);
		WriteToLog("Nb trial updated is ~a",cpt_nb_trial);
	}

	writetolog("End of data recovery for clinical costs using 'sp_js_data_rec_clinical_cost' function");
	return true;
}

//
//  PURPOSE : Script used in Clinical Cost metrics data recovery
//
//	SCRIPT NAME : SP_JS_COST_INFO_RDD
//
//Script created by CFN 
//	VERSION HISTORY :
//		21/08/17 - YSA : sp_js_data_rec_clinical_cost functions correction
//ysa Last update date is : 17:02 11/10/2017



//Get cost account corresponding to metric
function sp_js_map_metrics_to_cost_account(sMetric){
var result;
var met_values=new vector
("EXTERNAL_COSTS","Clinical_Cost",
"CRO","CRO",
"BIOSTATISTICS","CRO_Biostatistics",
"CONT_AMEND3","Contract_Amendment_BS",
"CRO_FEES3","CRO_Fees_BS",
"MISC4","Miscellaneous_BS",
"SA_RES3","SA_Resources_BS",
"CLIN_DOC","CRO_Clin_Doc",
"CRO_FEES6","CRO_Fees_CD",
"DATA_MANAGEMENT","CRO_Data_Mgt",
"CONT_AMEND2","Contract_Amendment_DMG",
"CRO_FEES2","CRO_Fees_DMG",
"EDC_STD_SM","EDC_Fees_DMG",
"MISC3","Miscellaneous_DMG",
"SA_RES2","SA_Resources_DMG",
"IVRS","CRO_IVRS",
"CONT_AMEND5","Contract_Amendment_IVRS",
"CRO_FEES5","CRO_Fees_IVRS",
"IVRS_CRO_ACT","CRO_Activity_IVRS",
"MISC6","Miscellaneous_IVRS",
"MED_WRITING","CRO_Medical_Writing",
"CONC_PROT","Concept_Protocol_MW",
"CRO_FEES4","ICSR_Fees_MW",
"GHOST_REP","Ghost_report_MW",
"MISC5","Miscellaneous_MW",
"MW_CRO_ACT","CRO_Activity_MW",
"PROT_FEES","Protocol_Fees_MW",
"SA_RES4","SA_Resources_MW",
"STDY_MANAGEMENT","CRO_Study_Mgt",
"CONT_AMEND","Contract_Amendment_SML",
"CRO_FEES","CRO_Fees_SML",
"FEAS_RECRUT","Feasibility_Recruitment_SML",
"MISC","Miscellaneous_SML",
"PT_COST","Pass_Through_Cost_SML",
"SA_RES","SA_Resources_SML",
"SM_CRO_ACT","CRO_Activity_SML",
"IF","IF",
"24_7_ALERT","24_7_Alert_IF",
"GRANT_MGT","Grant_Mgt_IF",
"IDMC_DSMB","IDMC_DSMB_IF",
"IF_PER_DATE","IF_per_date_IF",
"INFRA_COST","Infrastructure_costs_IF",
"INV_FEES","Investigator_fees_IF",
"INV_MEET","Investigator_meeting_IF",
"IRB_FEES","IRB_IF",
"MISC2","Miscellaneous_IF",
"SA_RES_IF","SA_Resources_IF",
"LOGISTICS","Logistics",
"EXT_LAB","GMA_External_Lab_LOG",
"LOG_OUT_FEES","Logistics_Outsourcing_Fees_LOG",
"LOG_OUT_PTC","Logistics_Outsourcing_PTC_LOG",
"MISC8","Miscellaneous_LOG",
"SA_RES5","SA_Resources_LOG",
"VAC_PURCH","Vaccine_purchase_LOG",
"PARTNERSHIP COSTS","Partnership_Cost",
"PARTNERSHIP_EU","Partnership_Europe",
"EU_BS_OT","EU_Biostatistics_Others",
"EU_BS_PM","EU_Biostatistics_PM",
"EU_CD_OT","EU_ClinDoc_Others",
"EU_CD_PM","EU_ClinDoc_PM",
"EU_DM_OT","EU_Data_Mgt_Others",
"EU_DM_PM","EU_Data_Mgt_PM",
"EU_MW_OT","EU_Med_Writing_Others",
"EU_MW_PM","EU_Med_Writing_PM",
"EU_SM_OT","EU_Study Mgt Others",
"EU_SM_PM","EU_Study_Mgt_PM",
"PARTNERSHIP_NA","Partnership_North_America",
"NA_BS_OT","NA_Biostatistics_Others",
"NA_BS_PM","NA_Biostatistics_PM",
"NA_CD_OT","NA_ClinDoc_Others",
"NA_CD_PM","NA_ClinDoc_PM",
"NA_DM_OT","NA_Data_Mgt_Others",
"NA_DM_PM","NA_Data_Mgt_PM",
"NA_MW_OT","NA_Med_Writing_Others",
"NA_MW_PM","NA_Med_Writing_PM",
"NA_SM_OT","NA_Study_Mgt_Others",
"NA_SM_PM","NA_Study_Mgt_PM",
"PROJECTS_COSTS","Project_Cost",
"CRO_P_COSTS","CRO_Project_Cost",
"BIOSTAT_CPC","CRO_Biostatistics_Project_Cost",
"MISC_BS_A","Biostatistics_Miscellaneous_A",
"MISC_BS_B","Biostatistics_Miscellaneous_B",
"CLIN_DOC_CPC","CRO_Clin_Doc_Project_Cost",
"MISC_CD_A","ClinDoc_Miscellaneous_A",
"MISC_CD_B","ClinDoc_Miscellaneous_B",
"DATA_MGT_CPC","CRO_Data_Mgt_Project_Cost",
"MISC_DM_A","Data_Mgt_Miscellaneous_A",
"MED_WTG_CPC","CRO_Medical_Writing_Project_Cost",
"DSUR_MW","Med_Writing_DSUR",
"IBUPD_MW","Med_Writing_IB_Update",
"MISC_MW_A","Med_Writing_Miscellaneous_A",
"STUDY_MGT_CPC","CRO_Study_Mgt_Project_Cost",
"MISC_SM_A","Study_Mgt_Miscellaneous_A",
"MISC_SM_B","Study_Mgt_Miscellaneous_B",
"IF_P_COSTS","IF_Project_Cost",
"IFPC_MISC","Miscellaneous_IF_Project_Cost",
"TRANSLATION","Translation",
"MISC9","Miscellaneous_TRA",
"TRANS","Translation_TRA");
if(met_values.get(sMetric) instanceof STRING)
{
result = "OpxCOST_ACCOUNT".get(met_values.get(sMetric));
}

return result;
}

//Update cost account field
function SP_update_planned_expenditures()
{

	var vec_header=new vector("Project","Activity","Trial code","Category","Comment");
	var vec_tra=new vector();
	var pathnames = "/compassv6/data_recovery/output";
	var dir = mkdir(pathnames);
	if (dir instanceof Boolean && dir)
	{
		alert("Directory ~a has been created".format(pathnames));
	}
	var log = new fileoutputstream(pathnames+"/cl_cost_not_recovered.csv","APPEND");
	if (! log instanceof fileoutputstream)
	{
		return 1;
	}
	  
	log.writeln(vec_header.join(";"));

	var met_cst="OpxCOST_ACCOUNT".get("COST_METRICS");
	var man_cst="OpxCOST_ACCOUNT".get("COST_MANUAL");
	var met_cmpt=0;
	var man_cmpt=0;
	var sMetric;
	var oCostAcc;
		
	fromobject(met_cst)
	{
		for (var each in "opxExpenditure".findclass() where each.SP_RA_METRIC_COST_EXT instanceof OpxSP_METRIC && 
		each.cost_account instanceof OpxCOST_ACCOUNT && 
		each.cost_account.name=="COST_METRICS" &&
		each.project.state=="Active" )
		{
			withoutlocking
			{
				withoutalerts
				{
					each.delete();
				}
			}
			met_cmpt++;
		}	
	}

	fromobject(man_cst)
	{
		for (var each in "opxexpenditure".findclass() where each.SP_RA_METRIC_COST_EXT instanceof OpxSP_METRIC && 
		each.cost_account instanceof OpxCOST_ACCOUNT && 
		each.cost_account.name=="COST_MANUAL" &&
		each.project.state=="Active")
		{
			sMetric=each.SP_RA_METRIC_COST_EXT.NAME;
			oCostAcc= sp_js_map_metrics_to_cost_account(sMetric);
			each.EQUATION_OVERRIDE = true;
			if (oCostAcc instanceof OpxCOST_ACCOUNT)
			{
				each.COST_ACCOUNT = oCostAcc;
				man_cmpt++;
			}
			else
			{
				vec_tra=new vector(each.ACTIVITY.project.name,each.ACTIVITY.printattribute("ID"),each.ACTIVITY.SP_NF_CL_TRIAL_CODE,sMetric,"Mapping metric/cost account is not found");
				log.writeln(vec_tra.JOIN(";"));
			}

		}	
	}	
	WriteToLog("Number of planned expenditure [COST_METRICS] updated are ~a",met_cmpt);
	WriteToLog("Number of planned expenditure [COST_MANUAL] updated are ~a",man_cmpt);
	log.close();
}


//-- FILL IN TRIAL-CATEGORY COST INFORMATION FROM P5 METRIC DATA ------------------------------------------------- 

//Import data from Metric table to temporary table

function sp_js_import_cost_info_to_TT(){
	for (var each in "opxSP_TT_TRIAL_INFO".findclass() ){
		each.delete();
	}
	
	Context.callmacro("IMPORT-DB-SP_IMPORT_COSTS_INFO_DB0");
	
	for (var each in "opxSP_TT_TRIAL_INFO" where each.SP_AA_EXT_COST_STCK_NBR != 16)
	{
		each.delete();
	}
}

//Remove Trial - Category cost information if some have been created for tests
function SP_remove_all_TCCI(){
	var deleted_TCCI_nb = 0;
	for (var TCCI in "opxSP_PT_TRIAL_CAT_COST_INFO".findclass()){
		withoutlocking
		{
			withoutalerts
			{
				TCCI.delete();
			}
		}
		
		deleted_TCCI_nb++;
	}
	return deleted_TCCI_nb;
}

//Create Trial-Category Cost Information elements from temporary table
//function sp_js_populate_pt_costs_information(useless){
function sp_js_populate_pt_costs_information()
{
	var prj=this;
	var oFile;
	var oActivity;
	var budget_site;
	var oMetric;
	var oCategory;
	var dLastUpdate;
	var oLast_update_field;
	var inCostPerSubject=0;
	var sVendor;
	var oObject;
	var result;
	var count=0;
	var vec_b_site=new vector ("Asia Pacific - Unspecified","Asia - TBD",
	"Columbia","Colombia",
	"International","",
	"Korea","Korea Republic of",
	"Latin America - Unspecified","South America - TBD",
	"Taiwan","Taiwan Province of China",
	"USA","United States",
	"Vietnam","Viet Nam");
	
	var vec_bs=new vector("KEuros","France","KCAD","Canada","KUSD","United States");
	if (prj instanceof OpxProject)
	{	
	fromobject(prj)
	{
		for (var each in "opxSP_TT_TRIAL_INFO".findclass() where each.SP_AA_EXT_COST_STCK_NBR == 16 && each.DATASET_RDD==prj.ONB.tostring())
		{
			oFile="OpxFile".get(each.DATASET_RDD.parseint("####"));
			
			if (oFile instanceof OpxFile && oFile.OPEN){
				
				//Activity
				oActivity="opxactivity".get(each.SP_RA_EXT_COST_STCK_ACT_ID.parseint("####"));
				if(oActivity instanceof opxactivity){
					
					inCostPerSubject=0;	
					//Cost category
					oMetric = "OpxSP_METRIC".get(each.SP_RA_EXT_COST_STCK_METRIC);
					if (oMetric instanceof OpxSP_METRIC)
					{
						oCategory = sp_js_map_metrics_to_cost_account(oMetric.name);
						if (oCategory instanceof OpxCOST_ACCOUNT)
						{
							oLast_update_field = oActivity.getslot("SP_AA_LST_UP_"+ oMetric.METRIC.NAME);
							if(oLast_update_field == undefined || oLast_update_field == ""){
								writeln("SP_AA_LST_UP_" + oMetric.METRIC.NAME + " undefined (for " + each.index + " - " + oMetric.name);
							}
							else
							{
								dLastUpdate = oActivity.calldateformula("SP_AA_LST_UP_"+ oMetric.METRIC.NAME);
							}
							
							//Cost per subject
							if (oCategory.name=="Investigator_fees_IF" && oActivity.SP_AA_EXT_COST_PER_SUBJECT>0)
							{
								inCostPerSubject=oActivity.SP_AA_EXT_COST_PER_SUBJECT;
							}
							
							//inCostPerSubject = (oActivity.SP_AA_EXT_COST_PER_SUBJECT == "" || oActivity.SP_AA_EXT_COST_PER_SUBJECT == undefined) ? 0 : each.SP_AA_EXT_COST_PER_SUBJECT.parseint();
							
							//Vendor
							sVendor = each.SP_AA_EXT_COST_STCK_CRO_VDNAME;
							if(sVendor == "") sVendor = "1-UNSPECIFIED";
							
							//Budget site
							budget_site = each.SP_AA_EXT_COST_STCK_BDGT_SITE;
							if (vec_b_site.get(budget_site) instanceof STRING)
							{
								budget_site = vec_b_site.get(budget_site);
							}
							
							if (budget_site=="")
							{
								if ( oCategory.COST_ACCOUNT.name=="IF" && oActivity.SP_AA_CL_STUDY_LEADERSHIP=="Clin. Dev." && (vec_bs.get(each.SP_AA_EXT_COST_STCK_CURRENCY) instanceof STRING))
								{
									budget_site=vec_bs.get(each.SP_AA_EXT_COST_STCK_CURRENCY);
								}
								if (
								( oCategory.COST_ACCOUNT.name=="Translation" 
									||
									( oCategory.COST_ACCOUNT.name=="IF" && (oActivity.SP_AA_CL_STUDY_LEADERSHIP=="GMA central" || oActivity.SP_AA_CL_STUDY_LEADERSHIP=="GMA local"|| oActivity.SP_AA_CL_STUDY_LEADERSHIP=="Epi" 
									|| oActivity.SP_AA_CL_STUDY_LEADERSHIP=="Pharmacoepi"))
									||
									( oCategory.COST_ACCOUNT.name!="Translation" && oCategory.COST_ACCOUNT.name!="IF" && oActivity.SP_NF_S_ACT_CL_GEO_AREA!=""))
								)
								{
									budget_site="France";
								}
								
								if 
								(( oCategory.COST_ACCOUNT.name=="IF" && oActivity.SP_AA_CL_STUDY_LEADERSHIP=="Med. Aff." )
								||
								( oCategory.COST_ACCOUNT.name!="Translation" && oCategory.COST_ACCOUNT.name!="IF" && oActivity.CallBooleanFormula("SP_NF_S_ACT_CL_GEO_AREA IN (\"*North America*\") ")))
								{
									budget_site="United States";
								}
							}
							
							
							budget_site="opxSP_PT_CL_COUNTRY".get(budget_site);
							if (!(budget_site instanceof opxSP_PT_CL_COUNTRY))
							{
								budget_site="";
							}
							//Create new TCCI element
							oObject=new "opxSP_PT_TRIAL_CAT_COST_INFO" ("SP_AA_N_TCCI_REV_AMT",each.SP_AA_EXT_COST_STCK_REV_AMT,
							"SP_RA_TCCI_CLINICAL_COUNTRIES",budget_site,
							"SP_AA_AT_TCCI_CONTRA_STAT",each.SP_AA_EXT_COST_STCK_CONT_STAT,
							"SP_AA_S_TCCI_CRO_VENDOR",sVendor,
							"SP_AA_NP_TCCI_COMMENT",each.SP_AA_EXT_COST_STCK_COMMENT,
							"SP_RA_TCCI_ACT_TRIAL",oActivity,
							"SP_AA_S_TCCI_CURRENCY",each.SP_AA_EXT_COST_STCK_CURRENCY,
							"SP_RA_TCCI_COSTS_ACCOUNT",oCategory,
							"SP_AA_D_TCCI_LAST_UPDATE",dLastUpdate,
							"SP_AA_N_TCCI_COST_PER_SUBJECT",inCostPerSubject,
							"File",oFile
							)
							count++;
							
						}
						else
						{
							WriteToLog("Error v6 cost acount is not found ~a",each);
							WriteToLog("P5 cost metric name is ~a",oMetric);
						}
					}
					else
					{
						WriteToLog("Error Metrics [SP_RA_EXT_COST_STCK_METRIC] is not found for ~a",each);
					}
				}
				else
				{
					WriteToLog("Error Activity [SP_RA_EXT_COST_STCK_ACT_ID] is not found for ~a",each);
				}
			}		
		}
	}
	}

	return count;
}


//-- UPDATE COST ACCOUNT ON PLANNED EXPENDITURES WITH COST CATEGORY “INVESTIGATOR FEES” AND “CRO COSTS” ----------- 
function sp_js_if_cro_recovery()
{
	var prj=this;
	var cpt_trial=0;
	var cpt_cc=0;
	var tmp_cc_o;
	var tmp_cc_t;
	var trial_act;
	var cat_t;
	var total_quantity=0;
	var vec_pe;
	var vec_pe_a;
	var vec_pe_b;
	var cost_ac_t;
	var vec_cost_cat_o=new vector();
	var vec_cost_cat_t=new vector(
	"Investigator_fees_IF",
	"Grant_Mgt_IF",
	"CRO_Fees_IVRS",
	"ICSR_Fees_MW",
	"CRO_Fees_SML",
	"CRO_Fees_BS",
	"CRO_Fees_DMG");
	var hash_cl=new hashtable("String");
	hash_cl.set("Investigator_fees_IF","IF_per_date_IF");
	hash_cl.set("Grant_Mgt_IF","SA_Resources_IF");
	hash_cl.set("CRO_Fees_IVRS","CRO_Activity_IVRS");
	hash_cl.set("ICSR_Fees_MW","CRO_Activity_MW");
	hash_cl.set("CRO_Fees_SML","CRO_Activity_SML,SA_Resources_SML");
	hash_cl.set("CRO_Fees_BS","SA_Resources_BS");
	hash_cl.set("CRO_Fees_DMG","SA_Resources_DMG");
	var cost_ac_a="OpxCOST_ACCOUNT".get("CRO_Activity_SML");
	var cost_ac_b="OpxCOST_ACCOUNT".get("SA_Resources_SML");
	var vec_header=new vector("Project","Activity","Trial code","Category","Comment");
	var vec_trace=new vector();
	var pathname = "/compassv6/data_recovery/output";
	var dir = mkdir(pathname);
	var cost_inf_id;
	var cost_inf;
	if (dir instanceof Boolean && dir)
	{
	alert("Directory ~a has been created".format(pathname));
	}

	//var log = new fileoutputstream(pathname+"/Clinical_data_recovery.CSV","APPEND");
	var log = new fileoutputstream(pathname+"/clinical_cost_data_recovery.csv","APPEND");
	if (! log instanceof fileoutputstream)
	{
	return 1;
	}
	  
	log.writeln(vec_header.JOIN(";"));
		
if (prj instanceof OpxProject)
{	
fromobject(prj)
{
	for (var cc in "OpxSP_PT_TRIAL_CAT_COST_INFO".findclass() where (cc.FILE==prj && (vec_cost_cat_t.position(cc.SP_RA_TCCI_COSTS_ACCOUNT.name) instanceof NUMBER)) )
	{
		cat_t=vec_cost_cat_t[vec_cost_cat_t.position(cc.SP_RA_TCCI_COSTS_ACCOUNT.name)];
		cost_ac_t="OpxCOST_ACCOUNT".get(cat_t);
		vec_cost_cat_o=hash_cl.get(cat_t).parsevector();
		trial_act=cc.SP_RA_TCCI_ACT_TRIAL;

		if(trial_act instanceof OpxActivity)
		{
			fromobject(trial_act)
			{
				cpt_trial++;
				vec_pe=new vector();
				vec_pe_a=new vector();
				vec_pe_b=new vector();
				total_quantity=0
				for (var pe in "OpxFORECAST_EXPENDITURE".findclass() )
				{
					if (pe.cost_account.name==cat_t)
					{
						total_quantity=total_quantity+pe.QUANTITY;
					}
					if (vec_cost_cat_o.length==1 && (vec_cost_cat_o.position(pe.cost_account.name) instanceof NUMBER))
					{
						vec_pe.push(pe);
					}
					else
					{
						if (vec_cost_cat_o.length==2 && (vec_cost_cat_o.position(pe.cost_account.name) instanceof NUMBER))
						{
							if (pe.cost_account.name==cost_ac_a.name)
							{
								vec_pe_a.push(pe);
							}
							else
							{
								vec_pe_b.push(pe);
							}
						}	
					}
				}
				if (total_quantity<=0.02)
				{
					if(vec_cost_cat_o.length==1 && vec_pe.length>0)
					{
						for (var p in vec_pe)
						{
							p.cost_account=cost_ac_t;
						}
						cost_inf_id=SP_get_TCCI_identifier(trial_act,vec_cost_cat_o[0]);
						cost_inf="opxSP_PT_TRIAL_CAT_COST_INFO".get(cost_inf_id);				
						
						if (cost_inf instanceof opxSP_PT_TRIAL_CAT_COST_INFO)
						{
							cc.SP_AA_N_TCCI_REV_AMT=cost_inf.SP_AA_N_TCCI_REV_AMT;
							cc.SP_RA_TCCI_CLINICAL_COUNTRIES=cost_inf.SP_RA_TCCI_CLINICAL_COUNTRIES;
							cc.SP_AA_AT_TCCI_CONTRA_STAT=cost_inf.SP_AA_AT_TCCI_CONTRA_STAT;
							cc.SP_AA_S_TCCI_CRO_VENDOR=cost_inf.SP_AA_S_TCCI_CRO_VENDOR;
							cc.SP_AA_NP_TCCI_COMMENT=cost_inf.SP_AA_NP_TCCI_COMMENT;
							cc.SP_AA_S_TCCI_CURRENCY=cost_inf.SP_AA_S_TCCI_CURRENCY;
							cc.SP_AA_D_TCCI_LAST_UPDATE=cost_inf.SP_AA_D_TCCI_LAST_UPDATE;
							//cc.SP_AA_N_TCCI_COST_PER_SUBJECT=cost_inf.SP_AA_N_TCCI_COST_PER_SUBJECT;	
						}

					}
					else
					{
						if (vec_pe_a.length>0 && vec_pe_b.length>0)
						{
							vec_trace=new vector(prj.name,trial_act.printattribute("ID"),trial_act.SP_NF_CL_TRIAL_CODE,cost_ac_t.name,"Planned expenditures are found in CRO_Activity_SML and SA_Resources_SML");
							log.writeln(vec_trace.JOIN(";"));
						
						}
						else
						{
							if (vec_pe_a.length>0)
							{
								for (var p in vec_pe_a)
								{
									p.cost_account=cost_ac_t;
								}
								cost_inf_id=SP_get_TCCI_identifier(trial_act,cost_ac_a.name);						
								cost_inf="opxSP_PT_TRIAL_CAT_COST_INFO".get(cost_inf_id);
								
								if (cost_inf instanceof opxSP_PT_TRIAL_CAT_COST_INFO)
								{
									cc.SP_AA_N_TCCI_REV_AMT=cost_inf.SP_AA_N_TCCI_REV_AMT;
									cc.SP_RA_TCCI_CLINICAL_COUNTRIES=cost_inf.SP_RA_TCCI_CLINICAL_COUNTRIES;
									cc.SP_AA_AT_TCCI_CONTRA_STAT=cost_inf.SP_AA_AT_TCCI_CONTRA_STAT;
									cc.SP_AA_S_TCCI_CRO_VENDOR=cost_inf.SP_AA_S_TCCI_CRO_VENDOR;
									cc.SP_AA_NP_TCCI_COMMENT=cost_inf.SP_AA_NP_TCCI_COMMENT;
									cc.SP_AA_S_TCCI_CURRENCY=cost_inf.SP_AA_S_TCCI_CURRENCY;
									cc.SP_AA_D_TCCI_LAST_UPDATE=cost_inf.SP_AA_D_TCCI_LAST_UPDATE;
									//cc.SP_AA_N_TCCI_COST_PER_SUBJECT=cost_inf.SP_AA_N_TCCI_COST_PER_SUBJECT;	
								}
							}
							else
							{
								if (vec_pe_b.length>0)
								{
									for (var p in vec_pe_b)
									{
										p.cost_account=cost_ac_t;
									}
									cost_inf_id=SP_get_TCCI_identifier(trial_act,cost_ac_b.name);	
									cost_inf="opxSP_PT_TRIAL_CAT_COST_INFO".get(cost_inf_id);
									if (cost_inf instanceof opxSP_PT_TRIAL_CAT_COST_INFO)
									{
										cc.SP_AA_N_TCCI_REV_AMT=cost_inf.SP_AA_N_TCCI_REV_AMT;
										cc.SP_RA_TCCI_CLINICAL_COUNTRIES=cost_inf.SP_RA_TCCI_CLINICAL_COUNTRIES;
										cc.SP_AA_AT_TCCI_CONTRA_STAT=cost_inf.SP_AA_AT_TCCI_CONTRA_STAT;
										cc.SP_AA_S_TCCI_CRO_VENDOR=cost_inf.SP_AA_S_TCCI_CRO_VENDOR;
										cc.SP_AA_NP_TCCI_COMMENT=cost_inf.SP_AA_NP_TCCI_COMMENT;
										cc.SP_AA_S_TCCI_CURRENCY=cost_inf.SP_AA_S_TCCI_CURRENCY;
										cc.SP_AA_D_TCCI_LAST_UPDATE=cost_inf.SP_AA_D_TCCI_LAST_UPDATE;
										//cc.SP_AA_N_TCCI_COST_PER_SUBJECT=cost_inf.SP_AA_N_TCCI_COST_PER_SUBJECT;	
									}
								}
								
							}
							
						}	
					}
				}
				else
				{
					vec_trace=new vector(prj.name,trial_act.printattribute("ID"),trial_act.SP_NF_CL_TRIAL_CODE,cost_ac_t.name,"Planned expenditures > 0.02 in this category");
					log.writeln(vec_trace.JOIN(";"));	
				}
			}	
		}

	}
	
}
}
log.close();
return cpt_trial;
//WriteToLog("Number of cost information [INVESTIGATOR FEES AND CRO COSTS] updated  is ~a",cpt_cc);
}



//-- CLINICAL COST DATA RECOVERY ------------------------------------------------------------------------------------
function sp_js_data_rec_clinical_cost()
{
	writetolog("Start data recovery for clinical costs using 'sp_js_data_rec_clinical_cost' function");
	var cpt_inf_del=0;
	var cpt_inf_add=0;
	var cpt_nb_trial=0;

	// Planned expenditure updating
	SP_update_planned_expenditures();
	// Empty cost information table
	cpt_inf_del=SP_remove_all_TCCI();
	// Load P5 cost information in SP_TT_TRIAL_INFO temp table
	sp_js_import_cost_info_to_TT();

	WriteToLog("sp_js_data_rec_clinical_cost : number of cost information deleted is ~a",cpt_inf_del);
	for (var prj in "OpxProject".findclass() where prj.OPEN && prj.state=="Active")
	{
		WriteToLog("sp_js_data_rec_clinical_cost : start cost data recovery on ~a",prj);

		//Create v6 cost information
		cpt_inf_add = prj.sp_js_populate_pt_costs_information();
		cpt_nb_trial = prj.sp_js_if_cro_recovery();
		WriteToLog("Number of cost information created is ~a",cpt_inf_add);
		WriteToLog("End cost data recovery ~a",prj);
		WriteToLog("Nb trial updated is ~a",cpt_nb_trial);
	}

	writetolog("End of data recovery for clinical costs using 'sp_js_data_rec_clinical_cost' function");
	return true;
}

 
//	NAME	: SP_JS_CPL_EQUATION_FUNCTION
//	AUTHOR  : SPG
//  PURPOSE : COMPASS v6 , Function for CPL equations
//
//  HISTORY :
var revision_number ="1.0";
var revision_number ="1.1";
var revision_number ="1.2";
var revision_number ="1.3";
// WST - 10FEB21 => update of functions sp_js_CPL_get_line ITS-INC5334437
// 12SEP19 => update of functions such that they considers empty SIZE field in clinical programs lead report

////////////////////////////////////////////////////////
// 12JUN19: sp_js_CPL_get_line
//	Method on Activity class that allows to get the CPL metrics line corresponding.
// 12AUG19: sp_js_CPL_get_line
// Adding control to relational attribute 
////////////////////////////////////////////////////////
function sp_js_CPL_get_line ()
{
	// variables
	var act = this;  
	//var act="opxactivity".get(onb);
	var o_act_name = act.name;   
	var o_act_type = act.SP_NF_S_ACT_WBS_TYPE_NAME; 
	var o_act_prj_category = "";
	if (act.SP_RA_ACT_CL_PRG_PRJ_CAT_CP instanceof OpxSP_PT_CL_PRG_PRJ_CAT )
	{
	 o_act_prj_category =act.SP_RA_ACT_CL_PRG_PRJ_CAT_CP.name; 
	}
	var o_act_Complexity = act.SP_AA_S_ACT_CL_COMPLEXITY_CP;  
	var o_act_size = act.SP_AA_S_ACT_CL_SIZE_CP; 

	for (var o_line in "OpxSP_PT_CL_PRG_LEAD_FTE"   where o_line.SP_RA_CL_PRG_LEAD_ACT_TYPE instanceof OpxWBS_TYPE 
	 && o_line.SP_RA_PT_CL_PRG_LEAD_PRJ_CAT instanceof OpxSP_PT_CL_PRG_PRJ_CAT 
	&& o_line.SP_RA_CL_PRG_LEAD_ACT_TYPE.name == o_act_type && 
	o_line.SP_RA_PT_CL_PRG_LEAD_PRJ_CAT.name == o_act_prj_category  && o_line.SP_RA_PT_CL_PRG_LEAD_PRJ_CAT.name != ""	&& o_line.SP_AA_CL_PRG_LEAD_COMPL_FTE == o_act_Complexity && (o_line.SP_AA_CL_PRG_LEAD_SIZE_FTE == ""  ||o_line.SP_AA_CL_PRG_LEAD_SIZE_FTE == o_act_size))
		{

		return true;
									
		}
	return false;
}
sp_js_CPL_get_line.exportfunction("","BOOLEAN","Function checking if an activity has a CPL line matching in parameter");

////////////////////////////////////////////////////////
//	12JUN19:  sp_js_CPL_return_FTE
//	Method on Activity class that return the FTE for CPL metrics
// 12AUG19: sp_js_CPL_get_line
// Adding control to relational attribute 
////////////////////////////////////////////////////////
function sp_js_CPL_return_FTE ()
{
	var i_act = this;
	var i_act_name = i_act.name;   
	var i_act_type = i_act.SP_NF_S_ACT_WBS_TYPE_NAME; 
	var i_act_prj_category ="";
	If (i_act.SP_RA_ACT_CL_PRG_PRJ_CAT_CP instanceof OpxSP_PT_CL_PRG_PRJ_CAT )
	{
	i_act_prj_category =i_act.SP_RA_ACT_CL_PRG_PRJ_CAT_CP.name; 
	}
	var i_act_Complexity = i_act.SP_AA_S_ACT_CL_COMPLEXITY_CP;  
	var i_act_size =i_act.SP_AA_S_ACT_CL_SIZE_CP; 
	
	var o_CPL_metric = i_act.sp_js_CPL_get_line();

	if (o_CPL_metric)
	{
		for (var i_line in "OpxSP_PT_CL_PRG_LEAD_FTE"  where  i_line.SP_RA_CL_PRG_LEAD_ACT_TYPE instanceof  OpxWBS_TYPE
		&& i_line.SP_RA_PT_CL_PRG_LEAD_PRJ_CAT instanceof OpxSP_PT_CL_PRG_PRJ_CAT
		&& i_line.SP_RA_CL_PRG_LEAD_ACT_TYPE.name == i_act_type && 
		i_line.SP_RA_PT_CL_PRG_LEAD_PRJ_CAT.name == i_act_prj_category  && 	i_line.SP_RA_PT_CL_PRG_LEAD_PRJ_CAT.name != "" &&
                i_line.SP_AA_CL_PRG_LEAD_COMPL_FTE == i_act_Complexity && ( i_line.SP_AA_CL_PRG_LEAD_SIZE_FTE == "" || i_line.SP_AA_CL_PRG_LEAD_SIZE_FTE == i_act_size))
		{
		 return i_line.SP_AA_CL_PRG_FTE_METRIC;
		}
	}
	else
	{
		writetolog("Issue returning workload for line ");	
	}		
}
sp_js_CPL_return_FTE.exportfunction("", "Number");




////////////////////////////////////////////////////////
//	17JUN19:  sp_js_CPL_return_Desc
//	Method on Activity class that return the Description for CPL metrics 
////////////////////////////////////////////////////////
function sp_js_CPL_return_Desc ()
{
	var j_act = this;
	var j_act_name = j_act.name;   
	var j_act_type = j_act.SP_NF_S_ACT_WBS_TYPE_NAME; 
	var j_act_prj_category = "";
	if (j_act.SP_RA_ACT_CL_PRG_PRJ_CAT_CP instanceof OpxSP_PT_CL_PRG_PRJ_CAT )
	{
	j_act_prj_category =j_act.SP_RA_ACT_CL_PRG_PRJ_CAT_CP.name; 
	}
	var j_act_Complexity = j_act.SP_AA_S_ACT_CL_COMPLEXITY_CP;  
	var j_act_size =j_act.SP_AA_S_ACT_CL_SIZE_CP; 
	var o_CPL_metric = j_act.sp_js_CPL_get_line();

	if (o_CPL_metric)
	{
		for (var j_line in "OpxSP_PT_CL_PRG_LEAD_FTE" where j_line.SP_RA_CL_PRG_LEAD_ACT_TYPE instanceof  OpxWBS_TYPE
		&&  j_line.SP_RA_PT_CL_PRG_LEAD_PRJ_CAT instanceof OpxSP_PT_CL_PRG_PRJ_CAT
		&& j_line.SP_RA_CL_PRG_LEAD_ACT_TYPE.name == j_act_type && 
		j_line.SP_RA_PT_CL_PRG_LEAD_PRJ_CAT.name ==j_act_prj_category  && j_line.SP_RA_PT_CL_PRG_LEAD_PRJ_CAT.name != "" &&
               j_line.SP_AA_CL_PRG_LEAD_COMPL_FTE == j_act_Complexity &&(j_line.SP_AA_CL_PRG_LEAD_SIZE_FTE =="" || j_line.SP_AA_CL_PRG_LEAD_SIZE_FTE == j_act_size))
		{
		 return j_line.SP_AA_CL_PRG_LEAD_DESC;
		}
	}
	else
	{
		writetolog("Issue returning Description for line ");	
	}		
}
sp_js_CPL_return_Desc.exportfunction("", "String");



//	NAME	: SP_JS_CPL_EQUATION_FUNCTION
//	AUTHOR  : SPG
//  PURPOSE : COMPASS v6 , Function for CPL equations
//
//  HISTORY :
var revision_number ="1.0";
var revision_number ="1.1";
var revision_number ="1.2";
var revision_number ="1.3";
// WST - 10FEB21 => update of functions sp_js_CPL_get_line ITS-INC5334437
// 12SEP19 => update of functions such that they considers empty SIZE field in clinical programs lead report

////////////////////////////////////////////////////////
// 12JUN19: sp_js_CPL_get_line
//	Method on Activity class that allows to get the CPL metrics line corresponding.
// 12AUG19: sp_js_CPL_get_line
// Adding control to relational attribute 
////////////////////////////////////////////////////////
function sp_js_CPL_get_line ()
{
	// variables
	var act = this;  
	//var act="opxactivity".get(onb);
	var o_act_name = act.name;   
	var o_act_type = act.SP_NF_S_ACT_WBS_TYPE_NAME; 
	var o_act_prj_category = "";
	if (act.SP_RA_ACT_CL_PRG_PRJ_CAT_CP instanceof OpxSP_PT_CL_PRG_PRJ_CAT )
	{
	 o_act_prj_category =act.SP_RA_ACT_CL_PRG_PRJ_CAT_CP.name; 
	}
	var o_act_Complexity = act.SP_AA_S_ACT_CL_COMPLEXITY_CP;  
	var o_act_size = act.SP_AA_S_ACT_CL_SIZE_CP; 

	for (var o_line in "OpxSP_PT_CL_PRG_LEAD_FTE"   where o_line.SP_RA_CL_PRG_LEAD_ACT_TYPE instanceof OpxWBS_TYPE 
	 && o_line.SP_RA_PT_CL_PRG_LEAD_PRJ_CAT instanceof OpxSP_PT_CL_PRG_PRJ_CAT 
	&& o_line.SP_RA_CL_PRG_LEAD_ACT_TYPE.name == o_act_type && 
	o_line.SP_RA_PT_CL_PRG_LEAD_PRJ_CAT.name == o_act_prj_category  && o_line.SP_RA_PT_CL_PRG_LEAD_PRJ_CAT.name != ""	&& o_line.SP_AA_CL_PRG_LEAD_COMPL_FTE == o_act_Complexity && (o_line.SP_AA_CL_PRG_LEAD_SIZE_FTE == ""  ||o_line.SP_AA_CL_PRG_LEAD_SIZE_FTE == o_act_size))
		{

		return true;
									
		}
	return false;
}
sp_js_CPL_get_line.exportfunction("","BOOLEAN","Function checking if an activity has a CPL line matching in parameter");

////////////////////////////////////////////////////////
//	12JUN19:  sp_js_CPL_return_FTE
//	Method on Activity class that return the FTE for CPL metrics
// 12AUG19: sp_js_CPL_get_line
// Adding control to relational attribute 
////////////////////////////////////////////////////////
function sp_js_CPL_return_FTE ()
{
	var i_act = this;
	var i_act_name = i_act.name;   
	var i_act_type = i_act.SP_NF_S_ACT_WBS_TYPE_NAME; 
	var i_act_prj_category ="";
	If (i_act.SP_RA_ACT_CL_PRG_PRJ_CAT_CP instanceof OpxSP_PT_CL_PRG_PRJ_CAT )
	{
	i_act_prj_category =i_act.SP_RA_ACT_CL_PRG_PRJ_CAT_CP.name; 
	}
	var i_act_Complexity = i_act.SP_AA_S_ACT_CL_COMPLEXITY_CP;  
	var i_act_size =i_act.SP_AA_S_ACT_CL_SIZE_CP; 
	
	var o_CPL_metric = i_act.sp_js_CPL_get_line();

	if (o_CPL_metric)
	{
		for (var i_line in "OpxSP_PT_CL_PRG_LEAD_FTE"  where  i_line.SP_RA_CL_PRG_LEAD_ACT_TYPE instanceof  OpxWBS_TYPE
		&& i_line.SP_RA_PT_CL_PRG_LEAD_PRJ_CAT instanceof OpxSP_PT_CL_PRG_PRJ_CAT
		&& i_line.SP_RA_CL_PRG_LEAD_ACT_TYPE.name == i_act_type && 
		i_line.SP_RA_PT_CL_PRG_LEAD_PRJ_CAT.name == i_act_prj_category  && 	i_line.SP_RA_PT_CL_PRG_LEAD_PRJ_CAT.name != "" &&
                i_line.SP_AA_CL_PRG_LEAD_COMPL_FTE == i_act_Complexity && ( i_line.SP_AA_CL_PRG_LEAD_SIZE_FTE == "" || i_line.SP_AA_CL_PRG_LEAD_SIZE_FTE == i_act_size))
		{
		 return i_line.SP_AA_CL_PRG_FTE_METRIC;
		}
	}
	else
	{
		writetolog("Issue returning workload for line ");	
	}		
}
sp_js_CPL_return_FTE.exportfunction("", "Number");




////////////////////////////////////////////////////////
//	17JUN19:  sp_js_CPL_return_Desc
//	Method on Activity class that return the Description for CPL metrics 
////////////////////////////////////////////////////////
function sp_js_CPL_return_Desc ()
{
	var j_act = this;
	var j_act_name = j_act.name;   
	var j_act_type = j_act.SP_NF_S_ACT_WBS_TYPE_NAME; 
	var j_act_prj_category = "";
	if (j_act.SP_RA_ACT_CL_PRG_PRJ_CAT_CP instanceof OpxSP_PT_CL_PRG_PRJ_CAT )
	{
	j_act_prj_category =j_act.SP_RA_ACT_CL_PRG_PRJ_CAT_CP.name; 
	}
	var j_act_Complexity = j_act.SP_AA_S_ACT_CL_COMPLEXITY_CP;  
	var j_act_size =j_act.SP_AA_S_ACT_CL_SIZE_CP; 
	var o_CPL_metric = j_act.sp_js_CPL_get_line();

	if (o_CPL_metric)
	{
		for (var j_line in "OpxSP_PT_CL_PRG_LEAD_FTE" where j_line.SP_RA_CL_PRG_LEAD_ACT_TYPE instanceof  OpxWBS_TYPE
		&&  j_line.SP_RA_PT_CL_PRG_LEAD_PRJ_CAT instanceof OpxSP_PT_CL_PRG_PRJ_CAT
		&& j_line.SP_RA_CL_PRG_LEAD_ACT_TYPE.name == j_act_type && 
		j_line.SP_RA_PT_CL_PRG_LEAD_PRJ_CAT.name ==j_act_prj_category  && j_line.SP_RA_PT_CL_PRG_LEAD_PRJ_CAT.name != "" &&
               j_line.SP_AA_CL_PRG_LEAD_COMPL_FTE == j_act_Complexity &&(j_line.SP_AA_CL_PRG_LEAD_SIZE_FTE =="" || j_line.SP_AA_CL_PRG_LEAD_SIZE_FTE == j_act_size))
		{
		 return j_line.SP_AA_CL_PRG_LEAD_DESC;
		}
	}
	else
	{
		writetolog("Issue returning Description for line ");	
	}		
}
sp_js_CPL_return_Desc.exportfunction("", "String");



 
//	NAME	: SP_JS_CSC_EQUATION_FUNCTION
//	AUTHOR  : bcordel
//  PURPOSE : COMPASS v6 , Function for CSC equations
//
//  HISTORY :
var revision_number ="1.0";
//
//  Revision 1.0  2019/01/14 bcordel
//  RITM0780557 1799 CSC Metrics ( needed for Baseline) : creation of the script

////////////////////////////////////////////////////////
//	sp_js_csc_check_existing_line
//	Method on Activity class that allows to check if the activity is answering to a line in the CSC metrics table.
////////////////////////////////////////////////////////
method sp_js_csc_check_existing_line on opxActivity(s_resource)
{
	// variables
	var o_act = this;
	var o_act_type = o_act.WBS_TYPE;
	var o_res = "OpxResource".get(s_resource);
	var b_existing_line = false;
	var o_trial = "opxActivity".get(o_act.SP_NF_CL_TRIAL_ID);
	
	// If resource is non existing aborting the whole thing
	if ( !(o_res instanceof OpxResource))
	{
		writetolog("Attempt to check a CSC line on a non existing resource. Aborting.");
		return false;
	}
	// Checking if a line is linked to the activity. Checking first on the indexed fields.
	for (var o_line in "OpxSP_PT_CSC_METRICS" where o_line.SP_RA_CSC_WBS_TYPE == o_act_type && o_line.SP_RA_CSC_RESOURCE == o_res)
	{	
		//checking the site (if site empty, any site is good)
		if ( o_line.SP_RA_CSC_ACT_SITE.NAME=="" || o_line.SP_RA_CSC_ACT_SITE == o_act.BREAKDOWN_3)
		{
			// checking the field "Production Request" is in the same state
			if (o_line.SP_AA_B_CSC_PRODUCT_REQ == o_trial.SP_NF_B_WBS_PROD_REQUESTED)
			{
				// checking the filter for KTI number of subject
				if (o_line.SP_AA_S_CSC_KTI_SUBJECT_FILTER=="" || o_act.CallBooleanFormula(o_act.SP_NF_CL_N_TRIAL_EXP_SUB+o_line.SP_AA_S_CSC_KTI_SUBJECT_FILTER))
				{
					// checking the filter for KTI number of countries
					if (o_line.SP_AA_S_CSC_KTI_COUNTRY_FILTER == "" || o_act.CallBooleanFormula("SP_NF_N_ACT_CL_COUNTRY_NB "+o_line.SP_AA_S_CSC_KTI_COUNTRY_FILTER+""))
					{
						// alert("check : "+o_line.SP_AA_S_CSC_ALLOC_DESC);
						return true;
					}
				}			
			}
		}
	}
	return false;
}
sp_js_csc_check_existing_line.exportfunction({"STRING"},"BOOLEAN","Function checking if an activity has a CSC metrics line matching for the resource in parameter");


////////////////////////////////////////////////////////
//	sp_js_csc_get_line
//	Method on Activity class that allows to get the csc metrics line corresponding.
////////////////////////////////////////////////////////
method sp_js_csc_get_line on opxActivity(s_resource)
{
	// variables
	var o_act = this;
	var o_act_type = o_act.WBS_TYPE;
	var o_res = "OpxResource".get(s_resource);
	var b_existing_line = false;
	var o_trial = "opxActivity".get(o_act.SP_NF_CL_TRIAL_ID);
	
	// If resource is non existing aborting the whole thing
	if ( !(o_res instanceof OpxResource))
	{
		writetolog("Attempt to get a CSC line on a non existing resource. Aborting.");
		return false;
	}
	// Checking if a line is linked to the activity. Checking first on the indexed fields.
	for (var o_line in "OpxSP_PT_CSC_METRICS" where o_line.SP_RA_CSC_WBS_TYPE == o_act_type && o_line.SP_RA_CSC_RESOURCE == o_res)
	{	
		//checking the site (if site empty, any site is good)
		if ( o_line.SP_RA_CSC_ACT_SITE.NAME=="" || o_line.SP_RA_CSC_ACT_SITE == o_act.BREAKDOWN_3)
		{
			// checking the field "Production Request" is in the same state
			if (o_line.SP_AA_B_CSC_PRODUCT_REQ == o_trial.SP_NF_B_WBS_PROD_REQUESTED)
			{
				// checking the filter for KTI number of subject
				if (o_line.SP_AA_S_CSC_KTI_SUBJECT_FILTER=="" || o_act.CallBooleanFormula(o_act.SP_NF_CL_N_TRIAL_EXP_SUB+o_line.SP_AA_S_CSC_KTI_SUBJECT_FILTER))
				{
					// checking the filter for KTI number of countries
					if (o_line.SP_AA_S_CSC_KTI_COUNTRY_FILTER == "" || o_act.CallBooleanFormula("SP_NF_N_ACT_CL_COUNTRY_NB "+o_line.SP_AA_S_CSC_KTI_COUNTRY_FILTER+""))
					{
						// alert("get : "+o_line.SP_AA_S_CSC_ALLOC_DESC);
						return o_line;
					}
				}			
			}
		}
	}
	return false;
}

////////////////////////////////////////////////////////
//	sp_js_csc_return_desc
//	Method on Activity class that return the allocation description of the CSC metrics with ONB stored in the field SP_AA_ACT_ONB_CSC_METRICS.
////////////////////////////////////////////////////////
method sp_js_csc_return_desc on opxActivity(resource)
{
	var o_act = this;
	var o_csc_metric = o_act.sp_js_csc_get_line(resource);
	if (o_csc_metric.SP_AA_S_CSC_ALLOC_DESC != "")
	{
		return o_csc_metric.SP_AA_S_CSC_ALLOC_DESC;
	}else{
		return o_act.DESC;
	}	
}
sp_js_csc_return_desc.exportfunction({"STRING"},"STRING","Function returning the allocation description for CSC metrics");

////////////////////////////////////////////////////////
//	sp_js_csc_return_workload
//	Method on Activity class that return the workload of the CSC metrics with ONB stored in the field SP_AA_ACT_ONB_CSC_METRICS.
////////////////////////////////////////////////////////
method sp_js_csc_return_workload on opxActivity (resource)
{
	var o_act = this;
	var o_csc_metric = o_act.sp_js_csc_get_line(resource);
	var workload = 0;
	
	if (o_csc_metric.SP_AA_N_CSC_WORKLOAD != 0)
	{
		workload=o_csc_metric.SP_AA_N_CSC_WORKLOAD;
		if (workload!=undefined)
		{return workload;}
		else
		{writetolog("Issue returning workload for line ~a for ~a.",o_csc_metric,o_act);return 0;}	
	}else{
		var n_DU = o_act.SP_NF_CL_GET_ACTIVITY_DURATION;
		workload = o_csc_metric.SP_AA_N_CSC_LOAD_PER_MONTH;
		workload = workload*n_DU;
		if (workload!=undefined)
		{return workload;}
		else
		{writetolog("Issue returning workload for line ~a for ~a.",o_csc_metric,o_act);return 0;}	
	}	
}
sp_js_csc_return_workload.exportfunction({"STRING"},"NUMBER","Function returning the allocation workload for CSC metrics");

////////////////////////////////////////////////////////
//	sp_js_csc_return_site
//	Method on Activity class that return the site of the CSC metrics with ONB stored in the field SP_AA_ACT_ONB_CSC_METRICS.
////////////////////////////////////////////////////////
method sp_js_csc_return_site on opxActivity(resource)
{
	var o_act = this;
	var o_csc_metric = o_act.sp_js_csc_get_line(resource);
	if (o_csc_metric.SP_RA_CSC_ALLOC_SITE.NAME != "")
	{
		return o_csc_metric.SP_RA_CSC_ALLOC_SITE.printattribute("ID");
	}else{
		return o_act.PROJECT.BREAKDOWN_3.printattribute("ID");
	}	
}
sp_js_csc_return_site.exportfunction({"STRING"},"STRING","Function returning the site for CSC metrics");


writetolog("Loading script SP_JS_CSC_EQUATION_FUNCTION in revision ~a.",revision_number);

//	NAME	: SP_JS_CSC_EQUATION_FUNCTION
//	AUTHOR  : bcordel
//  PURPOSE : COMPASS v6 , Function for CSC equations
//
//  HISTORY :
var revision_number ="1.0";
//
//  Revision 1.0  2019/01/14 bcordel
//  RITM0780557 1799 CSC Metrics ( needed for Baseline) : creation of the script

////////////////////////////////////////////////////////
//	sp_js_csc_check_existing_line
//	Method on Activity class that allows to check if the activity is answering to a line in the CSC metrics table.
////////////////////////////////////////////////////////
method sp_js_csc_check_existing_line on opxActivity(s_resource)
{
	// variables
	var o_act = this;
	var o_act_type = o_act.WBS_TYPE;
	var o_res = "OpxResource".get(s_resource);
	var b_existing_line = false;
	var o_trial = "opxActivity".get(o_act.SP_NF_CL_TRIAL_ID);
	
	// If resource is non existing aborting the whole thing
	if ( !(o_res instanceof OpxResource))
	{
		writetolog("Attempt to check a CSC line on a non existing resource. Aborting.");
		return false;
	}
	// Checking if a line is linked to the activity. Checking first on the indexed fields.
	for (var o_line in "OpxSP_PT_CSC_METRICS" where o_line.SP_RA_CSC_WBS_TYPE == o_act_type && o_line.SP_RA_CSC_RESOURCE == o_res)
	{	
		//checking the site (if site empty, any site is good)
		if ( o_line.SP_RA_CSC_ACT_SITE.NAME=="" || o_line.SP_RA_CSC_ACT_SITE == o_act.BREAKDOWN_3)
		{
			// checking the field "Production Request" is in the same state
			if (o_line.SP_AA_B_CSC_PRODUCT_REQ == o_trial.SP_NF_B_WBS_PROD_REQUESTED)
			{
				// checking the filter for KTI number of subject
				if (o_line.SP_AA_S_CSC_KTI_SUBJECT_FILTER=="" || o_act.CallBooleanFormula(o_act.SP_NF_CL_N_TRIAL_EXP_SUB+o_line.SP_AA_S_CSC_KTI_SUBJECT_FILTER))
				{
					// checking the filter for KTI number of countries
					if (o_line.SP_AA_S_CSC_KTI_COUNTRY_FILTER == "" || o_act.CallBooleanFormula("SP_NF_N_ACT_CL_COUNTRY_NB "+o_line.SP_AA_S_CSC_KTI_COUNTRY_FILTER+""))
					{
						// alert("check : "+o_line.SP_AA_S_CSC_ALLOC_DESC);
						return true;
					}
				}			
			}
		}
	}
	return false;
}
sp_js_csc_check_existing_line.exportfunction({"STRING"},"BOOLEAN","Function checking if an activity has a CSC metrics line matching for the resource in parameter");


////////////////////////////////////////////////////////
//	sp_js_csc_get_line
//	Method on Activity class that allows to get the csc metrics line corresponding.
////////////////////////////////////////////////////////
method sp_js_csc_get_line on opxActivity(s_resource)
{
	// variables
	var o_act = this;
	var o_act_type = o_act.WBS_TYPE;
	var o_res = "OpxResource".get(s_resource);
	var b_existing_line = false;
	var o_trial = "opxActivity".get(o_act.SP_NF_CL_TRIAL_ID);
	
	// If resource is non existing aborting the whole thing
	if ( !(o_res instanceof OpxResource))
	{
		writetolog("Attempt to get a CSC line on a non existing resource. Aborting.");
		return false;
	}
	// Checking if a line is linked to the activity. Checking first on the indexed fields.
	for (var o_line in "OpxSP_PT_CSC_METRICS" where o_line.SP_RA_CSC_WBS_TYPE == o_act_type && o_line.SP_RA_CSC_RESOURCE == o_res)
	{	
		//checking the site (if site empty, any site is good)
		if ( o_line.SP_RA_CSC_ACT_SITE.NAME=="" || o_line.SP_RA_CSC_ACT_SITE == o_act.BREAKDOWN_3)
		{
			// checking the field "Production Request" is in the same state
			if (o_line.SP_AA_B_CSC_PRODUCT_REQ == o_trial.SP_NF_B_WBS_PROD_REQUESTED)
			{
				// checking the filter for KTI number of subject
				if (o_line.SP_AA_S_CSC_KTI_SUBJECT_FILTER=="" || o_act.CallBooleanFormula(o_act.SP_NF_CL_N_TRIAL_EXP_SUB+o_line.SP_AA_S_CSC_KTI_SUBJECT_FILTER))
				{
					// checking the filter for KTI number of countries
					if (o_line.SP_AA_S_CSC_KTI_COUNTRY_FILTER == "" || o_act.CallBooleanFormula("SP_NF_N_ACT_CL_COUNTRY_NB "+o_line.SP_AA_S_CSC_KTI_COUNTRY_FILTER+""))
					{
						// alert("get : "+o_line.SP_AA_S_CSC_ALLOC_DESC);
						return o_line;
					}
				}			
			}
		}
	}
	return false;
}

////////////////////////////////////////////////////////
//	sp_js_csc_return_desc
//	Method on Activity class that return the allocation description of the CSC metrics with ONB stored in the field SP_AA_ACT_ONB_CSC_METRICS.
////////////////////////////////////////////////////////
method sp_js_csc_return_desc on opxActivity(resource)
{
	var o_act = this;
	var o_csc_metric = o_act.sp_js_csc_get_line(resource);
	if (o_csc_metric.SP_AA_S_CSC_ALLOC_DESC != "")
	{
		return o_csc_metric.SP_AA_S_CSC_ALLOC_DESC;
	}else{
		return o_act.DESC;
	}	
}
sp_js_csc_return_desc.exportfunction({"STRING"},"STRING","Function returning the allocation description for CSC metrics");

////////////////////////////////////////////////////////
//	sp_js_csc_return_workload
//	Method on Activity class that return the workload of the CSC metrics with ONB stored in the field SP_AA_ACT_ONB_CSC_METRICS.
////////////////////////////////////////////////////////
method sp_js_csc_return_workload on opxActivity (resource)
{
	var o_act = this;
	var o_csc_metric = o_act.sp_js_csc_get_line(resource);
	var workload = 0;
	
	if (o_csc_metric.SP_AA_N_CSC_WORKLOAD != 0)
	{
		workload=o_csc_metric.SP_AA_N_CSC_WORKLOAD;
		if (workload!=undefined)
		{return workload;}
		else
		{writetolog("Issue returning workload for line ~a for ~a.",o_csc_metric,o_act);return 0;}	
	}else{
		var n_DU = o_act.SP_NF_CL_GET_ACTIVITY_DURATION;
		workload = o_csc_metric.SP_AA_N_CSC_LOAD_PER_MONTH;
		workload = workload*n_DU;
		if (workload!=undefined)
		{return workload;}
		else
		{writetolog("Issue returning workload for line ~a for ~a.",o_csc_metric,o_act);return 0;}	
	}	
}
sp_js_csc_return_workload.exportfunction({"STRING"},"NUMBER","Function returning the allocation workload for CSC metrics");

////////////////////////////////////////////////////////
//	sp_js_csc_return_site
//	Method on Activity class that return the site of the CSC metrics with ONB stored in the field SP_AA_ACT_ONB_CSC_METRICS.
////////////////////////////////////////////////////////
method sp_js_csc_return_site on opxActivity(resource)
{
	var o_act = this;
	var o_csc_metric = o_act.sp_js_csc_get_line(resource);
	if (o_csc_metric.SP_RA_CSC_ALLOC_SITE.NAME != "")
	{
		return o_csc_metric.SP_RA_CSC_ALLOC_SITE.printattribute("ID");
	}else{
		return o_act.PROJECT.BREAKDOWN_3.printattribute("ID");
	}	
}
sp_js_csc_return_site.exportfunction({"STRING"},"STRING","Function returning the site for CSC metrics");


writetolog("Loading script SP_JS_CSC_EQUATION_FUNCTION in revision ~a.",revision_number);

 
//
//  PURPOSE : Script used for Data Recovery of DKM Activity Information in V1.10.0.0 (RITM0926292)
//
//            SCRIPT NAME : SP_JS_DKM_ACT_DATA_REC
//
//            VERSION HISTORY :
//
//                            
//                            12/03/19 - MAG : creation of SP_OJS_DKM_data_recovery_update function
//
//

Function SP_OJS_DKM_data_recovery_update()
{
		// Deletion of records in DKM Activity Info Temp table
	for (var each in "OPXSP_TT_DKM_ACT_UPD".findclass() )
	{
		each.delete();
	}
	// Inserting the DKM info from the EXCEL into Temp Table
	withoutalerts withoutlocking 
	{
	  context.callmacro("SP_IEFD_IMP_DKM_RDD_ACT_UPDATE");
	}
	//opening non-loaded Project
	
	context.callmacro("SP_MA_DKM_RDD_OPEN_PROJECT");
	
	/*Var prj_list=new vector();
	var o_project="";
	for (var prj in "OPXSP_TT_DKM_ACT_UPD")
	{
		prj_list.push(prj.SP_TA_S_DKM_PROJECT);
	}
	var prj_to_open=prj_list.removeduplicates();
	for (var vPrj in Prj_to_open)
	{
		o_project="OpxProject".get(vPrj);
		if (o_project instanceof OpxProject)
		{
			if(!o_project.open)
			{
				o_project.open()
			}
		}
	}*/
	//Data Recovery
	writeln("START OF DATA RECOVERY of DKM :");
	var vErrors = new vector();
	var vNumAct=0;
	var o_act = "";
	var o_obs = "";
	var o_dkm_fun="";
	for (var o_entry in "OPXSP_TT_DKM_ACT_UPD")
	{
		o_entry.SP_TA_S_REJECT_MESSAGE="";
		try
		{
			withoutalerts withoutlocking 
			{
				o_act="Opxactivity".get(o_entry.SP_TA_N_DKM_ONB);
				if (o_act instanceof Opxactivity)
				{
						//Deviation Root Cause Field Update
					try
					{
						o_act.SP_AA_DKM_VARIANCE_CAT = o_entry.SP_TA_S_DKM_VAR_CAT;
					}
					catch (error e)
					{
						o_entry.SP_TA_S_REJECT_MESSAGE = "Impossible to update the activity "+o_entry.SP_TA_N_DKM_ONB+" because " +e;
						continue;
					}
					//Delay Actor Field Value update
					try
					{
						o_act.SP_AA_S_EVAL_STATUS = o_entry.SP_TA_S_DKM_EVAL_STAT;
					}
					catch (error e)
					{
						o_entry.SP_TA_S_REJECT_MESSAGE = "Impossible to update the activity "+o_entry.SP_TA_N_DKM_ONB+" because " +e;
						continue;
					}
					//DKM Platform value update
					if (o_entry.SP_TA_S_DKM_PLATF instanceof string)
					{
						o_act.SP_AA_DKM_ASS_PLATF=o_entry.SP_TA_S_DKM_PLATF;
					}
					else
					{
						o_entry.SP_TA_S_REJECT_MESSAGE = "Impossible to update the activity "+o_entry.SP_TA_N_DKM_ONB+" because DKM Platform is not of type string";
						continue;
					}
					//Is DKM value update
					if (o_entry.SP_TA_S_IS_DKM=="true" || o_entry.SP_TA_S_IS_DKM=="TRUE")
					{
						o_act.SP_AA_ACT_IS_A_DKM=true;
					}
					Else
					{
						o_entry.SP_TA_S_REJECT_MESSAGE = "Impossible to update the activity "+o_entry.SP_TA_N_DKM_ONB+" because IS DKM is not of expected type";
						continue;
					}
					//OBS Element value update
					o_obs="OpxObsElement".get(o_entry.SP_TA_S_DKM_OBS);
					
					if (o_obs instanceof OpxObsElement)
					{
						o_act.OBS_ELEMENT=o_entry.SP_TA_S_DKM_OBS;
						
					}
					else
					{
						
						o_entry.SP_TA_S_REJECT_MESSAGE = "Impossible to update the activity "+o_entry.SP_TA_N_DKM_ONB+" because OBS_ELEMENT can't be blank or value doesn't exist";
						continue;
					}
					
					//DKM Function Value Update
					if (o_entry.SP_TA_S_DKM_FUNC=="")
					{
						o_act.SP_AA_DKM_ASS_FUNC=o_entry.SP_TA_S_DKM_FUNC;
					}
					else
					{
						o_dkm_fun="opxresource".get(o_entry.SP_TA_S_DKM_FUNC);
						if (o_dkm_fun instanceof opxresource)
						{
							if (o_dkm_fun.CallBooleanFormula("FROM(\"R&D\") and LEVEL = 3 and SP_NF_RES_DEPT_GROUPING<>\"NOT USED\""))
							{
								o_act.SP_AA_DKM_ASS_FUNC=o_entry.SP_TA_S_DKM_FUNC;
							}
							else
							{
								o_entry.SP_TA_S_REJECT_MESSAGE = "Impossible to update the activity "+o_entry.SP_TA_N_DKM_ONB+" because DKM Function Value doesn't exist in the list";
								continue;
							}
										
						}
						else
						{
							o_entry.SP_TA_S_REJECT_MESSAGE = "Impossible to update the activity "+o_entry.SP_TA_N_DKM_ONB+" because DKM Function Value doesn't exist in the list";
							continue;
						}
					}
				}
				else
				{
					o_entry.SP_TA_S_REJECT_MESSAGE ="No activity with this ONB in the application";
					continue;
				}
			}
		}
		catch(error e)
		{
			vErrors.push("Error while updating "+o_entry+" : "+e);
		}
		vNumAct++;
	}

	
	if (vErrors.length>0)
	{
		writeln("DATA RECOVERY of DKM :");
		for (var error in vErrors) 
		{
			writeln(error);
		}
		writeln("END OF DKM DATA RECOVERY with "+vErrors.length+" errors ");
	}
	else 
	{
		writeln("END OF DKM DATA RECOVERY : " +vNumAct +" Activity Updated");
	}

	//exporting the output of the DKM Data Recovery
					
               
	var vFileName="DKM_RDD_ACT_OUTPUT.csv";
	var filepath = new PathName("/compassv6/data_recovery/output/"+vFileName);

	if (filepath.ProbeFile() != false)
	{
		filepath.DeleteFile();
		writeln("file '"+vFileName+"' removed from server");
	}
	var myFile = new fileOutputStream(filepath,"overwrite");
	var vCount = 0;

	myFile.writeln("PROJECT;ONB;DESC;BREAKDOWN_3;NAME;OBS_ELEMENT;SP_AA_ACT_IS_A_DKM;SP_AA_B_CRITICAL;SP_AA_DKM_ASS_FUNC;SP_AA_DKM_ASS_PLATF;SP_AA_DKM_NUMBER;SP_AA_DKM_VARIANCE_CAT;SP_AA_S_EVAL_STATUS;REJECT-MESSAGE");
					
					for (var dkm_out in "OPXSP_TT_DKM_ACT_UPD")
					{
						vCount++;
						var vLineValue = dkm_out.SP_TA_S_DKM_PROJECT+";"+dkm_out.callnumberformula("SP_TA_N_DKM_ONB")+";"+dkm_out.SP_TA_S_DKM_ACT_DESC+";"+dkm_out.SP_TA_S_DKM_DREAKDOWN_3+";"+dkm_out.SP_TA_S_DKM_ACT_NAME+";"+dkm_out.SP_TA_S_DKM_OBS+";"+dkm_out.SP_TA_S_IS_DKM+";"+dkm_out.SP_TA_S_DKM_IS_CRITICAL+";"+dkm_out.SP_TA_S_DKM_FUNC+";"+dkm_out.SP_TA_S_DKM_PLATF+";"+dkm_out.SP_TA_S_DKM_NUMB+";"+dkm_out.SP_TA_S_DKM_VAR_CAT+";"+dkm_out.SP_TA_S_DKM_EVAL_STAT+";"+dkm_out.SP_TA_S_REJECT_MESSAGE+"";
						myFile.writeln(vLineValue);
					}              
					myFile.close();
					
	var newline = Context.callStringFormula("get_char(10)");
	writeln("End of Excel export "+newline+vCount+" objects exported in file "+vFileName);
}
SP_OJS_DKM_data_recovery_update.exportfunction();

//
//  PURPOSE : Script used for Data Recovery of DKM Activity Information in V1.10.0.0 (RITM0926292)
//
//            SCRIPT NAME : SP_JS_DKM_ACT_DATA_REC
//
//            VERSION HISTORY :
//
//                            
//                            12/03/19 - MAG : creation of SP_OJS_DKM_data_recovery_update function
//
//

Function SP_OJS_DKM_data_recovery_update()
{
		// Deletion of records in DKM Activity Info Temp table
	for (var each in "OPXSP_TT_DKM_ACT_UPD".findclass() )
	{
		each.delete();
	}
	// Inserting the DKM info from the EXCEL into Temp Table
	withoutalerts withoutlocking 
	{
	  context.callmacro("SP_IEFD_IMP_DKM_RDD_ACT_UPDATE");
	}
	//opening non-loaded Project
	
	context.callmacro("SP_MA_DKM_RDD_OPEN_PROJECT");
	
	/*Var prj_list=new vector();
	var o_project="";
	for (var prj in "OPXSP_TT_DKM_ACT_UPD")
	{
		prj_list.push(prj.SP_TA_S_DKM_PROJECT);
	}
	var prj_to_open=prj_list.removeduplicates();
	for (var vPrj in Prj_to_open)
	{
		o_project="OpxProject".get(vPrj);
		if (o_project instanceof OpxProject)
		{
			if(!o_project.open)
			{
				o_project.open()
			}
		}
	}*/
	//Data Recovery
	writeln("START OF DATA RECOVERY of DKM :");
	var vErrors = new vector();
	var vNumAct=0;
	var o_act = "";
	var o_obs = "";
	var o_dkm_fun="";
	for (var o_entry in "OPXSP_TT_DKM_ACT_UPD")
	{
		o_entry.SP_TA_S_REJECT_MESSAGE="";
		try
		{
			withoutalerts withoutlocking 
			{
				o_act="Opxactivity".get(o_entry.SP_TA_N_DKM_ONB);
				if (o_act instanceof Opxactivity)
				{
						//Deviation Root Cause Field Update
					try
					{
						o_act.SP_AA_DKM_VARIANCE_CAT = o_entry.SP_TA_S_DKM_VAR_CAT;
					}
					catch (error e)
					{
						o_entry.SP_TA_S_REJECT_MESSAGE = "Impossible to update the activity "+o_entry.SP_TA_N_DKM_ONB+" because " +e;
						continue;
					}
					//Delay Actor Field Value update
					try
					{
						o_act.SP_AA_S_EVAL_STATUS = o_entry.SP_TA_S_DKM_EVAL_STAT;
					}
					catch (error e)
					{
						o_entry.SP_TA_S_REJECT_MESSAGE = "Impossible to update the activity "+o_entry.SP_TA_N_DKM_ONB+" because " +e;
						continue;
					}
					//DKM Platform value update
					if (o_entry.SP_TA_S_DKM_PLATF instanceof string)
					{
						o_act.SP_AA_DKM_ASS_PLATF=o_entry.SP_TA_S_DKM_PLATF;
					}
					else
					{
						o_entry.SP_TA_S_REJECT_MESSAGE = "Impossible to update the activity "+o_entry.SP_TA_N_DKM_ONB+" because DKM Platform is not of type string";
						continue;
					}
					//Is DKM value update
					if (o_entry.SP_TA_S_IS_DKM=="true" || o_entry.SP_TA_S_IS_DKM=="TRUE")
					{
						o_act.SP_AA_ACT_IS_A_DKM=true;
					}
					Else
					{
						o_entry.SP_TA_S_REJECT_MESSAGE = "Impossible to update the activity "+o_entry.SP_TA_N_DKM_ONB+" because IS DKM is not of expected type";
						continue;
					}
					//OBS Element value update
					o_obs="OpxObsElement".get(o_entry.SP_TA_S_DKM_OBS);
					
					if (o_obs instanceof OpxObsElement)
					{
						o_act.OBS_ELEMENT=o_entry.SP_TA_S_DKM_OBS;
						
					}
					else
					{
						
						o_entry.SP_TA_S_REJECT_MESSAGE = "Impossible to update the activity "+o_entry.SP_TA_N_DKM_ONB+" because OBS_ELEMENT can't be blank or value doesn't exist";
						continue;
					}
					
					//DKM Function Value Update
					if (o_entry.SP_TA_S_DKM_FUNC=="")
					{
						o_act.SP_AA_DKM_ASS_FUNC=o_entry.SP_TA_S_DKM_FUNC;
					}
					else
					{
						o_dkm_fun="opxresource".get(o_entry.SP_TA_S_DKM_FUNC);
						if (o_dkm_fun instanceof opxresource)
						{
							if (o_dkm_fun.CallBooleanFormula("FROM(\"R&D\") and LEVEL = 3 and SP_NF_RES_DEPT_GROUPING<>\"NOT USED\""))
							{
								o_act.SP_AA_DKM_ASS_FUNC=o_entry.SP_TA_S_DKM_FUNC;
							}
							else
							{
								o_entry.SP_TA_S_REJECT_MESSAGE = "Impossible to update the activity "+o_entry.SP_TA_N_DKM_ONB+" because DKM Function Value doesn't exist in the list";
								continue;
							}
										
						}
						else
						{
							o_entry.SP_TA_S_REJECT_MESSAGE = "Impossible to update the activity "+o_entry.SP_TA_N_DKM_ONB+" because DKM Function Value doesn't exist in the list";
							continue;
						}
					}
				}
				else
				{
					o_entry.SP_TA_S_REJECT_MESSAGE ="No activity with this ONB in the application";
					continue;
				}
			}
		}
		catch(error e)
		{
			vErrors.push("Error while updating "+o_entry+" : "+e);
		}
		vNumAct++;
	}

	
	if (vErrors.length>0)
	{
		writeln("DATA RECOVERY of DKM :");
		for (var error in vErrors) 
		{
			writeln(error);
		}
		writeln("END OF DKM DATA RECOVERY with "+vErrors.length+" errors ");
	}
	else 
	{
		writeln("END OF DKM DATA RECOVERY : " +vNumAct +" Activity Updated");
	}

	//exporting the output of the DKM Data Recovery
					
               
	var vFileName="DKM_RDD_ACT_OUTPUT.csv";
	var filepath = new PathName("/compassv6/data_recovery/output/"+vFileName);

	if (filepath.ProbeFile() != false)
	{
		filepath.DeleteFile();
		writeln("file '"+vFileName+"' removed from server");
	}
	var myFile = new fileOutputStream(filepath,"overwrite");
	var vCount = 0;

	myFile.writeln("PROJECT;ONB;DESC;BREAKDOWN_3;NAME;OBS_ELEMENT;SP_AA_ACT_IS_A_DKM;SP_AA_B_CRITICAL;SP_AA_DKM_ASS_FUNC;SP_AA_DKM_ASS_PLATF;SP_AA_DKM_NUMBER;SP_AA_DKM_VARIANCE_CAT;SP_AA_S_EVAL_STATUS;REJECT-MESSAGE");
					
					for (var dkm_out in "OPXSP_TT_DKM_ACT_UPD")
					{
						vCount++;
						var vLineValue = dkm_out.SP_TA_S_DKM_PROJECT+";"+dkm_out.callnumberformula("SP_TA_N_DKM_ONB")+";"+dkm_out.SP_TA_S_DKM_ACT_DESC+";"+dkm_out.SP_TA_S_DKM_DREAKDOWN_3+";"+dkm_out.SP_TA_S_DKM_ACT_NAME+";"+dkm_out.SP_TA_S_DKM_OBS+";"+dkm_out.SP_TA_S_IS_DKM+";"+dkm_out.SP_TA_S_DKM_IS_CRITICAL+";"+dkm_out.SP_TA_S_DKM_FUNC+";"+dkm_out.SP_TA_S_DKM_PLATF+";"+dkm_out.SP_TA_S_DKM_NUMB+";"+dkm_out.SP_TA_S_DKM_VAR_CAT+";"+dkm_out.SP_TA_S_DKM_EVAL_STAT+";"+dkm_out.SP_TA_S_REJECT_MESSAGE+"";
						myFile.writeln(vLineValue);
					}              
					myFile.close();
					
	var newline = Context.callStringFormula("get_char(10)");
	writeln("End of Excel export "+newline+vCount+" objects exported in file "+vFileName);
}
SP_OJS_DKM_data_recovery_update.exportfunction();

 
//	NAME	: SP_JS_DR_ARD_REORG
//	AUTHOR  : bcordel
//  PURPOSE : COMPASS v6 , script containing data recovery functions for ARD reorganization.
//  
//  HISTORY :
var revision_number ="1.2";
//
//  Revision 1.2  2018/11/29 bcordel
//	adding logs and alert
//  Revision 1.1  2018/11/27 bcordel
//	Corrections
//  Revision 1.0  2018/11/13 bcordel
//  creation of the macro-script with the function sp_js_dr_french_drivers.

function sp_js_dr_french_drivers()
{
	withoutlocking{withoutalerts{
		writetolog("ARD Reorg -------- Starting data recovery on french drivers values. ------");
		var n_act_ctr = 0;
		var v_act = new vector();
		var d_start019 = new date("01-JAN-19","DD-MMM-YY");
		//Listing all activities and counting them for monitoring.
		for (var o_project in "opxProject" where o_project.open && o_project.getinternalvalue("STATE").ToString()=="ACTIVE")
		{
			fromobject(o_project)
			{
				// Activities finishing after 01/01/19
				for (var o_act_ctr in "OpxActivity" where o_act_ctr.Project==o_project && o_act_ctr.PF>d_start019)
				{
					if (o_act_ctr.SP_AA_AS_FTE_AMOUNT_BBC!=0 || o_act_ctr.SP_AA_AS_FTE_AMOUNT_PHY!=0 || o_act_ctr.SP_AA_AS_FTE_AMOUNT_CIMMI!=0 || o_act_ctr.SP_AA_AS_FTE_AMOUNT_MICBIO!=0 ||  o_act_ctr.SP_AA_AS_FTE_AMOUNT_VIM!=0 || o_act_ctr.SP_AA_AS_FTE_AMOUNT_IMM!=0 || o_act_ctr.SP_AA_AS_FTE_AMOUNT_VIRO!=0)
					{
						n_act_ctr++;
						v_act.push(o_act_ctr);
					}
				}
			}
		}
		writetolog("ARD REORG ---- ~a activities to update.",n_act_ctr);
		var n_act_ctr_done =0;
		withmonitoring(n_act_ctr)
		{
			For (var o_act in v_act)
			{
				//update of the drivers values.
				o_act.SP_AA_AS_FTE_AMOUNT_BBC = o_act.SP_AA_AS_FTE_AMOUNT_BBC + o_act.SP_AA_AS_FTE_AMOUNT_PHY;
				o_act.SP_AA_AS_FTE_AMOUNT_IMM = o_act.SP_AA_AS_FTE_AMOUNT_CIMMI;
				o_act.SP_AA_AS_FTE_AMOUNT_VIRO = o_act.SP_AA_AS_FTE_AMOUNT_MICBIO + o_act.SP_AA_AS_FTE_AMOUNT_VIM;
				n_act_ctr_done++;
			}
			"Updating French drivers on activities...".monitor(n_act_ctr,1,1);
		}
		alert("ARD REORG ---- "+n_act_ctr+" activities with driver to update.");
		alert("ARD REORG ---- "+n_act_ctr_done+" activities with driver updated.");
		writetolog("ARD REORG ---- ~a activities with driver to update.",n_act_ctr);
		writetolog("ARD REORG ---- ~a activities with driver updated.",n_act_ctr_done);
		writetolog("ARD Reorg -------- End of data recovery on french drivers values. -----");
	}}
}

function sp_js_dr_ard_update_planned_hours()
{
	writetolog("ARD Reorg -------- Starting data recovery on planned hours. ------");
	// counter and vector for planned hour to put as "EQUATION_OVERRIDE" for them not to be updated by equation anymore.
	var n_ctr_past_ph_to_lock = 0;
	var v_past_ph_to_lock = new vector();
	
	// counter and vector for planned hour to change resource.
	var n_ctr_ph_res_to_move = 0;
	var v_ph_res_to_move = new vector();
	
	// counter and vector for planned hour to delete.
	var n_ctr_ph_to_delete = 0;
	var v_ph_to_delete = new vector();
	
	// filter for WBS_type of canadian equation for resource AS-RTAP
	var s_actype_CA_filter="WBS_TYPE in (\"TSBULK1\",\"TSFBP1\",\"TSFBP3\",\"DAS2\",\"DAS1\",\"DASA3\",\"DS2\",\"TSBULK2\",\"TSFBP2\",\"TSFSL\",\"DAS3\",\"DASA1\",\"DS1\",\"TSBULK3\",\"DAS\",\"ARDIB\",\"DASA2\",\"DS\",\"DS3\",\"TSFCB\")";
	
	// filter for resource of french equation
	var s_res_FR_filter = "RES in (\"ARD-BBC-BBC\",\"ARD-BIOC-BIOC\",\"ARD-CIMMI-CIMMI\",\"ARD-MICBIO-MICBIO\",\"ARD-SUPOP-SUPOP\",\"ARD-VIM-VIM\")";
	
	var d_start019 = new date("01-JAN-19","DD-MMM-YY");
	
	writetolog("ARD REORG ----  generating vectors of planned hours.");
	for (var o_project in "opxProject" where o_project.open && o_project.getinternalvalue("STATE").ToString()=="ACTIVE")
	{
		fromobject(o_project)
		{
			for (var o_ph in "OpxAllocation" where (o_ph.SPAS_RA_SITE.NAME==o_ph.ACTIVITY.SP_NF_CL_FR) || (o_ph.SPAS_RA_SITE.NAME==o_ph.ACTIVITY.SP_NF_CL_CA))
			{	
				//Some planned hours seem to have undefined FD that crash the script.
				if (o_ph.FD != undefined)
				{
					if (o_ph.CallBooleanFormula("COST_ACCOUNT=\"FTE_METRICS\"") && o_ph.FD <= d_start019 && ((o_ph.SPAS_RA_SITE.NAME==o_ph.ACTIVITY.SP_NF_CL_FR && o_ph.callBooleanFormula(s_res_FR_filter)) || (o_ph.ACTIVITY.CallBooleanFormula(s_actype_CA_filter) && o_ph.RES.NAME=="ARD-OS")))
					{
						//Planned hours created equations, ending before 1 january (<= because it is a end date) and having a resource linked to french equation.
						//Planned hours on canadian site, on resource ARD-OS, on activity with type linked to equation and ending before 1 january
						n_ctr_past_ph_to_lock++;
						v_past_ph_to_lock.push(o_ph);
						continue;
					}else if ((o_ph.CallBooleanFormula("COST_ACCOUNT=\"FTE\"") && o_ph.FD > d_start019 && o_ph.SPAS_RA_SITE.NAME==o_ph.ACTIVITY.SP_NF_CL_FR && o_ph.callBooleanFormula(s_res_FR_filter)) || (o_ph.SPAS_RA_SITE.NAME==o_ph.ACTIVITY.SP_NF_CL_CA && (o_ph.CallBooleanFormula("COST_ACCOUNT=\"FTE\"") && o_ph.FD > d_start019 && o_ph.ACTIVITY.CallBooleanFormula(s_actype_CA_filter) && o_ph.RES.NAME=="ARD-OS")))
					{
						//Planned hours created by hand on french site but on resource used for equation and ending after 1 january.
						//Planned hours created by hand on canadian site, on resource ARD-OS, on activity with type linked to equation and ending after 1 january.
						if (o_ph.res.NAME != "ARD-BBC-BBC")
						{
							n_ctr_ph_res_to_move++;
							v_ph_res_to_move.push(o_ph);
						}
						continue;
					}else if (o_ph.CallBooleanFormula("COST_ACCOUNT in (\"FTE_METRICS\",\"FTE_ESTIMATED\")") && o_ph.FD > d_start019 && ((o_ph.SPAS_RA_SITE.NAME==o_ph.ACTIVITY.SP_NF_CL_FR && o_ph.callBooleanFormula(s_res_FR_filter)) || (o_ph.ACTIVITY.CallBooleanFormula(s_actype_CA_filter) && o_ph.RES.NAME=="ARD-OS")))
					{
						//planned hours created by equation and ending after 1 january.
						n_ctr_ph_to_delete++;
						v_ph_to_delete.push(o_ph);
						continue;
					}
				}
			}
		}
	}
	alert("ARD REORG ---- "+n_ctr_ph_res_to_move+" planned hours to move.");
	alert("ARD REORG ---- "+n_ctr_past_ph_to_lock+" planned hours to lock.");
	alert("ARD REORG ---- "+n_ctr_ph_to_delete+" planned hours to delete.");
	writetolog("ARD REORG ---- ~a planned hours to change resource.",n_ctr_ph_res_to_move);
	writetolog("ARD REORG ---- ~a planned hours to lock.",n_ctr_past_ph_to_lock);
	writetolog("ARD REORG ---- ~a planned hours to delete.",n_ctr_ph_to_delete);
	var n_ctr_ph_deleted = 0;
	var n_ctr_ph_moved=0;
	var n_ctr_ph_locked=0;
	writetolog("ARD REORG ----  starting planned hours update.");
	withoutlocking{withoutalerts{
	withmonitoring(n_ctr_ph_to_delete)
	{
		for (var o_ph_to_delete in v_ph_to_delete)
		{
			o_ph_to_delete.delete();
			n_ctr_ph_deleted++;
		}
		"Deleting planned hours for ard re-org...".monitor(n_ctr_ph_to_delete,1,1);
	}
	withmonitoring(n_ctr_past_ph_to_lock)
	{
		for (var o_ph_to_lock in v_past_ph_to_lock)
		{
			o_ph_to_lock.EQUATION_OVERRIDE=true;
			n_ctr_ph_locked++;
		}
		"Locking planned hours for ard re-org...".monitor(n_ctr_past_ph_to_lock,1,1);
	}
	withmonitoring(n_ctr_ph_res_to_move)
	{
		for (var o_ph_to_move in v_ph_res_to_move)
		{
			if(o_ph_to_move.RES.NAME=="ARD-OS"){o_ph_to_move.RES="OpxResource".get("AS-RTAP");n_ctr_ph_moved++;continue;}
			if(o_ph_to_move.RES.NAME=="ARD-BIOC-BIOC"){o_ph_to_move.RES="OpxResource".get("ARD-BBC-BBC");n_ctr_ph_moved++;continue;}
			if(o_ph_to_move.RES.NAME=="ARD-CIMMI-CIMMI"){o_ph_to_move.RES="OpxResource".get("ARD-IMM-IMM");n_ctr_ph_moved++;continue;}
			if(o_ph_to_move.RES.NAME=="ARD-MICBIO-MICBIO"){o_ph_to_move.RES="OpxResource".get("ARD-MICVIRO");n_ctr_ph_moved++;continue;}
			if(o_ph_to_move.RES.NAME=="ARD-SUPOP-SUPOP"){o_ph_to_move.RES="OpxResource".get("ARD-OS");n_ctr_ph_moved++;continue;}
			if(o_ph_to_move.RES.NAME=="ARD-VIM-VIM"){o_ph_to_move.RES="OpxResource".get("ARD-MICVIRO");n_ctr_ph_moved++;continue;}
		}
		"Locking planned hours for ard re-org...".monitor(n_ctr_ph_res_to_move,1,1);
	}}}
	alert("ARD REORG ---- "+n_ctr_ph_moved+" planned hours moved.");
	alert("ARD REORG ---- "+n_ctr_ph_locked+" planned hours locked.");
	alert("ARD REORG ---- "+n_ctr_ph_deleted+" planned hours deleted.");
	writetolog("ARD REORG ---- ~a planned hours moved.",n_ctr_ph_moved);
	writetolog("ARD REORG ---- ~a planned hours locked.",n_ctr_ph_locked);
	writetolog("ARD REORG ---- ~a planned hours deleted.",n_ctr_ph_deleted);
	writetolog("ARD Reorg -------- End of data recovery on planned hours. ------");
}



writetolog("Script SP_JS_DR_ARD_REORG loaded with version ~a ", revision_number);

//	NAME	: SP_JS_DR_ARD_REORG
//	AUTHOR  : bcordel
//  PURPOSE : COMPASS v6 , script containing data recovery functions for ARD reorganization.
//  
//  HISTORY :
var revision_number ="1.2";
//
//  Revision 1.2  2018/11/29 bcordel
//	adding logs and alert
//  Revision 1.1  2018/11/27 bcordel
//	Corrections
//  Revision 1.0  2018/11/13 bcordel
//  creation of the macro-script with the function sp_js_dr_french_drivers.

function sp_js_dr_french_drivers()
{
	withoutlocking{withoutalerts{
		writetolog("ARD Reorg -------- Starting data recovery on french drivers values. ------");
		var n_act_ctr = 0;
		var v_act = new vector();
		var d_start019 = new date("01-JAN-19","DD-MMM-YY");
		//Listing all activities and counting them for monitoring.
		for (var o_project in "opxProject" where o_project.open && o_project.getinternalvalue("STATE").ToString()=="ACTIVE")
		{
			fromobject(o_project)
			{
				// Activities finishing after 01/01/19
				for (var o_act_ctr in "OpxActivity" where o_act_ctr.Project==o_project && o_act_ctr.PF>d_start019)
				{
					if (o_act_ctr.SP_AA_AS_FTE_AMOUNT_BBC!=0 || o_act_ctr.SP_AA_AS_FTE_AMOUNT_PHY!=0 || o_act_ctr.SP_AA_AS_FTE_AMOUNT_CIMMI!=0 || o_act_ctr.SP_AA_AS_FTE_AMOUNT_MICBIO!=0 ||  o_act_ctr.SP_AA_AS_FTE_AMOUNT_VIM!=0 || o_act_ctr.SP_AA_AS_FTE_AMOUNT_IMM!=0 || o_act_ctr.SP_AA_AS_FTE_AMOUNT_VIRO!=0)
					{
						n_act_ctr++;
						v_act.push(o_act_ctr);
					}
				}
			}
		}
		writetolog("ARD REORG ---- ~a activities to update.",n_act_ctr);
		var n_act_ctr_done =0;
		withmonitoring(n_act_ctr)
		{
			For (var o_act in v_act)
			{
				//update of the drivers values.
				o_act.SP_AA_AS_FTE_AMOUNT_BBC = o_act.SP_AA_AS_FTE_AMOUNT_BBC + o_act.SP_AA_AS_FTE_AMOUNT_PHY;
				o_act.SP_AA_AS_FTE_AMOUNT_IMM = o_act.SP_AA_AS_FTE_AMOUNT_CIMMI;
				o_act.SP_AA_AS_FTE_AMOUNT_VIRO = o_act.SP_AA_AS_FTE_AMOUNT_MICBIO + o_act.SP_AA_AS_FTE_AMOUNT_VIM;
				n_act_ctr_done++;
			}
			"Updating French drivers on activities...".monitor(n_act_ctr,1,1);
		}
		alert("ARD REORG ---- "+n_act_ctr+" activities with driver to update.");
		alert("ARD REORG ---- "+n_act_ctr_done+" activities with driver updated.");
		writetolog("ARD REORG ---- ~a activities with driver to update.",n_act_ctr);
		writetolog("ARD REORG ---- ~a activities with driver updated.",n_act_ctr_done);
		writetolog("ARD Reorg -------- End of data recovery on french drivers values. -----");
	}}
}

function sp_js_dr_ard_update_planned_hours()
{
	writetolog("ARD Reorg -------- Starting data recovery on planned hours. ------");
	// counter and vector for planned hour to put as "EQUATION_OVERRIDE" for them not to be updated by equation anymore.
	var n_ctr_past_ph_to_lock = 0;
	var v_past_ph_to_lock = new vector();
	
	// counter and vector for planned hour to change resource.
	var n_ctr_ph_res_to_move = 0;
	var v_ph_res_to_move = new vector();
	
	// counter and vector for planned hour to delete.
	var n_ctr_ph_to_delete = 0;
	var v_ph_to_delete = new vector();
	
	// filter for WBS_type of canadian equation for resource AS-RTAP
	var s_actype_CA_filter="WBS_TYPE in (\"TSBULK1\",\"TSFBP1\",\"TSFBP3\",\"DAS2\",\"DAS1\",\"DASA3\",\"DS2\",\"TSBULK2\",\"TSFBP2\",\"TSFSL\",\"DAS3\",\"DASA1\",\"DS1\",\"TSBULK3\",\"DAS\",\"ARDIB\",\"DASA2\",\"DS\",\"DS3\",\"TSFCB\")";
	
	// filter for resource of french equation
	var s_res_FR_filter = "RES in (\"ARD-BBC-BBC\",\"ARD-BIOC-BIOC\",\"ARD-CIMMI-CIMMI\",\"ARD-MICBIO-MICBIO\",\"ARD-SUPOP-SUPOP\",\"ARD-VIM-VIM\")";
	
	var d_start019 = new date("01-JAN-19","DD-MMM-YY");
	
	writetolog("ARD REORG ----  generating vectors of planned hours.");
	for (var o_project in "opxProject" where o_project.open && o_project.getinternalvalue("STATE").ToString()=="ACTIVE")
	{
		fromobject(o_project)
		{
			for (var o_ph in "OpxAllocation" where (o_ph.SPAS_RA_SITE.NAME==o_ph.ACTIVITY.SP_NF_CL_FR) || (o_ph.SPAS_RA_SITE.NAME==o_ph.ACTIVITY.SP_NF_CL_CA))
			{	
				//Some planned hours seem to have undefined FD that crash the script.
				if (o_ph.FD != undefined)
				{
					if (o_ph.CallBooleanFormula("COST_ACCOUNT=\"FTE_METRICS\"") && o_ph.FD <= d_start019 && ((o_ph.SPAS_RA_SITE.NAME==o_ph.ACTIVITY.SP_NF_CL_FR && o_ph.callBooleanFormula(s_res_FR_filter)) || (o_ph.ACTIVITY.CallBooleanFormula(s_actype_CA_filter) && o_ph.RES.NAME=="ARD-OS")))
					{
						//Planned hours created equations, ending before 1 january (<= because it is a end date) and having a resource linked to french equation.
						//Planned hours on canadian site, on resource ARD-OS, on activity with type linked to equation and ending before 1 january
						n_ctr_past_ph_to_lock++;
						v_past_ph_to_lock.push(o_ph);
						continue;
					}else if ((o_ph.CallBooleanFormula("COST_ACCOUNT=\"FTE\"") && o_ph.FD > d_start019 && o_ph.SPAS_RA_SITE.NAME==o_ph.ACTIVITY.SP_NF_CL_FR && o_ph.callBooleanFormula(s_res_FR_filter)) || (o_ph.SPAS_RA_SITE.NAME==o_ph.ACTIVITY.SP_NF_CL_CA && (o_ph.CallBooleanFormula("COST_ACCOUNT=\"FTE\"") && o_ph.FD > d_start019 && o_ph.ACTIVITY.CallBooleanFormula(s_actype_CA_filter) && o_ph.RES.NAME=="ARD-OS")))
					{
						//Planned hours created by hand on french site but on resource used for equation and ending after 1 january.
						//Planned hours created by hand on canadian site, on resource ARD-OS, on activity with type linked to equation and ending after 1 january.
						if (o_ph.res.NAME != "ARD-BBC-BBC")
						{
							n_ctr_ph_res_to_move++;
							v_ph_res_to_move.push(o_ph);
						}
						continue;
					}else if (o_ph.CallBooleanFormula("COST_ACCOUNT in (\"FTE_METRICS\",\"FTE_ESTIMATED\")") && o_ph.FD > d_start019 && ((o_ph.SPAS_RA_SITE.NAME==o_ph.ACTIVITY.SP_NF_CL_FR && o_ph.callBooleanFormula(s_res_FR_filter)) || (o_ph.ACTIVITY.CallBooleanFormula(s_actype_CA_filter) && o_ph.RES.NAME=="ARD-OS")))
					{
						//planned hours created by equation and ending after 1 january.
						n_ctr_ph_to_delete++;
						v_ph_to_delete.push(o_ph);
						continue;
					}
				}
			}
		}
	}
	alert("ARD REORG ---- "+n_ctr_ph_res_to_move+" planned hours to move.");
	alert("ARD REORG ---- "+n_ctr_past_ph_to_lock+" planned hours to lock.");
	alert("ARD REORG ---- "+n_ctr_ph_to_delete+" planned hours to delete.");
	writetolog("ARD REORG ---- ~a planned hours to change resource.",n_ctr_ph_res_to_move);
	writetolog("ARD REORG ---- ~a planned hours to lock.",n_ctr_past_ph_to_lock);
	writetolog("ARD REORG ---- ~a planned hours to delete.",n_ctr_ph_to_delete);
	var n_ctr_ph_deleted = 0;
	var n_ctr_ph_moved=0;
	var n_ctr_ph_locked=0;
	writetolog("ARD REORG ----  starting planned hours update.");
	withoutlocking{withoutalerts{
	withmonitoring(n_ctr_ph_to_delete)
	{
		for (var o_ph_to_delete in v_ph_to_delete)
		{
			o_ph_to_delete.delete();
			n_ctr_ph_deleted++;
		}
		"Deleting planned hours for ard re-org...".monitor(n_ctr_ph_to_delete,1,1);
	}
	withmonitoring(n_ctr_past_ph_to_lock)
	{
		for (var o_ph_to_lock in v_past_ph_to_lock)
		{
			o_ph_to_lock.EQUATION_OVERRIDE=true;
			n_ctr_ph_locked++;
		}
		"Locking planned hours for ard re-org...".monitor(n_ctr_past_ph_to_lock,1,1);
	}
	withmonitoring(n_ctr_ph_res_to_move)
	{
		for (var o_ph_to_move in v_ph_res_to_move)
		{
			if(o_ph_to_move.RES.NAME=="ARD-OS"){o_ph_to_move.RES="OpxResource".get("AS-RTAP");n_ctr_ph_moved++;continue;}
			if(o_ph_to_move.RES.NAME=="ARD-BIOC-BIOC"){o_ph_to_move.RES="OpxResource".get("ARD-BBC-BBC");n_ctr_ph_moved++;continue;}
			if(o_ph_to_move.RES.NAME=="ARD-CIMMI-CIMMI"){o_ph_to_move.RES="OpxResource".get("ARD-IMM-IMM");n_ctr_ph_moved++;continue;}
			if(o_ph_to_move.RES.NAME=="ARD-MICBIO-MICBIO"){o_ph_to_move.RES="OpxResource".get("ARD-MICVIRO");n_ctr_ph_moved++;continue;}
			if(o_ph_to_move.RES.NAME=="ARD-SUPOP-SUPOP"){o_ph_to_move.RES="OpxResource".get("ARD-OS");n_ctr_ph_moved++;continue;}
			if(o_ph_to_move.RES.NAME=="ARD-VIM-VIM"){o_ph_to_move.RES="OpxResource".get("ARD-MICVIRO");n_ctr_ph_moved++;continue;}
		}
		"Locking planned hours for ard re-org...".monitor(n_ctr_ph_res_to_move,1,1);
	}}}
	alert("ARD REORG ---- "+n_ctr_ph_moved+" planned hours moved.");
	alert("ARD REORG ---- "+n_ctr_ph_locked+" planned hours locked.");
	alert("ARD REORG ---- "+n_ctr_ph_deleted+" planned hours deleted.");
	writetolog("ARD REORG ---- ~a planned hours moved.",n_ctr_ph_moved);
	writetolog("ARD REORG ---- ~a planned hours locked.",n_ctr_ph_locked);
	writetolog("ARD REORG ---- ~a planned hours deleted.",n_ctr_ph_deleted);
	writetolog("ARD Reorg -------- End of data recovery on planned hours. ------");
}



writetolog("Script SP_JS_DR_ARD_REORG loaded with version ~a ", revision_number);

 
//	
//  HISTORY :
//
var revision_number ="1.30";
//
// Revision 1.30  2020/07/22 - SSK
// Creation of functions Data_Recovery and  Data_Recovery_Project
//
//
// 
// Revision 1.29  2020/06/10 - ASP
// Creation o of function sp_js_res_PH_equation_override_GRTM_LCRA
//
//
// 
// Revision 1.28  2020/06/10 - MBL
// Update of function of function sp_js_res_PH_equation_override_GCD_FTE and creation of sp_js_res_PH_delete_fte
//
// Revision 1.27  2020/05/28 - KSH
// creation of function of function sp_js_res_PH_equation_override_GCD_FTE and sp_js_res_PH_move_equation_override_fte
//
//	Revision 1.26  2020/02/20 - ASP
//  creation of function of function sp_js_res_PH_move_equation_override,sp_js_res_PH_upd_res_move_by_cost_account and sp_js_res_PH_equation_override_GCD .
//
//
//	Revision 1.25  2019/11/28 - 2ckeita
//  modification of function sp_js_rdd_PH_upd_res_by_cost_account .
//
//
//
//  Revision 1.24  2019/10/24 G Sivanagapavan
//  RITM1265091 creation of function  SP_JS_DKM_FUNCTION_PLATFORM_UPD
//  RITM1265091 creation of function  SP_RING_DKM_ACT_PLATFORM_RBS_FCT
//
//	Revision 1.23  2019/05/29 ckeita
//  creation of function sp_js_rdd_PH_equation_override and sp_js_rdd_PH_upd_res_fte_estimated which will update the planned hours based on given date and resource.
//	For Resource & Date specific function sp_js_rdd_PH_equation_override_CDL & sp_js_rdd_PH_equation_override_GBS created.
//
//	Revision 1.22  2019/05/29 mblaise
//  ITS-INC2661340 Modification of sp_js_rdd_clean_multi_lang_activity_desc to change multilingual detection condition and add monitoring
//
//	Revision 1.21  2019/05/28 mblaise
//  ITS-INC2264257  Modification of sp_js_rdd_related_pkm to use SP_NF_B_ELIGIBLE_REL_PKM
//
//	Revision 1.20  2019/05/23 mblaise
//  ITS-INC2520796  modification of sp_js_rdd_recovery_RA_metric_PH to  add monitoring
//
//	Revision 1.19  2019/05/03 mblaise
//  ITS-INC2520796  Creation of sp_js_rdd_recovery_RA_metric_PH to link planned hours to its creator metric (its comment is equal to creator metric name)
//
//	Revision 1.18  2019/04/24 mblaise
//  ITS-INC2264257  Creation of sp_js_rdd_related_pkm to change the format of the field "related PKM" (PKMdesc -> PKMname_PKMdesc)
//
//	Revision 1.17  2019/02/21 mblaise
//  ITS-INC2140296  Creation of sp_js_rdd_clean_multi_lang_activity_desc to transform activities multilanguage Description in monolanguage
//
//	Revision 1.16  2018/05/23 lfavre
//  ITS-INC0865825  Creation of sp_res_managers_missing_groups to get the list of mandatory groups missing for field MANAGERS on resources
//                  Creation of function sp_rdd_res_managers to correct MANAGERS field values on resources
//
//	Revision 1.15  2018/01/16 flecanut
//	Modification of sp_tempo_v1_data_recovery : call to sp_js_rdd_rights_reset

//	Revision 1.14  2018/01/10 flecanut
//	Modification of sp_res_rdd_managers : modify the order of data recovery
//  Modification of sp_dr_init_v6_processes_parameters to set the right value for _WT_AA_N_OC_DEF_SYM_TSK and _WT_AA_N_OC_DEF_SYM_MIL
//  Modification of sp_js_rdd_project_rights to add project templates
//
//	Revision 1.13  2018/01/05 flecanut
//	Modification of sp_dr_init_v6_processes_parameters
//		Init default shapes for Gantt representation
//
//	Revision 1.12  2017/12/13 YSA
//	Corrections on functions
//  sp_tempo_v1_data_recovery : CallMacro loading project
//  sp_all_data_rec_fte_allocations: Adding
//
//	Revision 1.11  2017/12/08 flecanut
//	Corrections on functions
//		sp_tempo_v1_data_recovery : loading unopened projects
//		sp_import_user_groups_list : import only in super user mode
//		sp_dr_init_v6_processes_parameters : disable hour cost unit creation
//		sp_export_user_groups_list : do not export template user
//	Revision 1.11  2017/12/06 bcordel
//	adding g_adm and g_RBS to sp_res_rdd_managers
//
//	Revision 1.10  2017/11/27 flecanut
//	Corrections on sp_js_dr_gci_info
//
//	Revision 1.9  2017/11/23 flecanut
//	Add sp_js_dr_gci_info
//	Revision 1.9 2017/11/23 mrochas
//	function sp_js_read_acces_team_members : set of SP_DYN_TEAM_MEMBERS
//	function sp_dr_init_v6_processes_parameters : var vGA = OpxSPAS_PT_GEOGRAPHIC_AREA.get("France"); remplac  par var vGA = "OpxSPAS_PT_GEOGRAPHIC_AREA".get("France");
//
//	Revision 1.8  2017/11/11 flecanut
//	Add sp_dr_res_timecard_offenders_alert
//	Add sp_init_gs_metrics to sp_tempo_v1_data_recovery
//  
//	Revision 1.7  2017/11/11 flecanut
//	Modifying all datarecovery functions to normalize input/output
//  
//	Revision 1.6  2017/10/26 bcordel
//	adding sp_js_read_acces_team_members for team member read only access on projects
//	Modifying sp_tempo_v1_data_recovery to add sp_js_read_acces_team_members
//
//	Revision 1.5  2017/10/17 ahasni
//	added of sp_js_rdd_project_geo_area to include data recovery for geo areas
//
//	Revision 1.4  2017/09/27 flecanut
//	modification of sp_res_rdd_managers to include data recovery on controller only
//
//	Revision 1.3  2017/09/11 flecanut
//	adding sp_dr_init_default_groups
//  modification of sp_wpm_reset_delegate_to_on_all_project
//
//	Revision 1.2  2017/09/11 flecanut
//	adding sp_import_user_groups_list
//
//	Revision 1.1  2017/08/07 bcordel
//	adding _pex_js_gaugeTypeInitialization
//
//	Revision 1.0  ahasni
//	creation

// Global function for data recovery
function sp_tempo_v1_data_recovery()
{
	writetolog("Start global data recovery using 'sp_tempo_v1_data_recovery' function");
	writetolog("TEMPO V"+context.SP_NF_CTX_INTE_WEEK);
	withoutlocking{
		
		// Creation of data recovery directories
		var input_pathname = "/compassv6/data_recovery/input";
		var dir = mkdir(input_pathname);
		if (dir instanceof Boolean && dir)
		{
			writetolog("sp_tempo_v1_data_recovery : directory ~a has been created".format(input_pathname));
		}
		var output_pathname = "/compassv6/data_recovery/output";
		var dir = mkdir(output_pathname);
		if (dir instanceof Boolean && dir)
		{
			writetolog("sp_tempo_v1_data_recovery : directory ~a has been created".format(output_pathname));
		}
		
		writetolog("sp_tempo_v1_data_recovery : start loading ACTIVE projects");
		context.CallMacro("SP_MA_OPEN_PROJECT_REC");
		/*
		for (var vProject in opxProject where vProject.STATE=="Active" && !vProject.open)
		{
			vProject.open();
		}
		*/
		writetolog("sp_tempo_v1_data_recovery : end of loading ACTIVE projects");
		
		// Data recovery
		
		writetolog("sp_tempo_v1_data_recovery : call to sp_dr_init_v6_processes_parameters");
		sp_dr_init_v6_processes_parameters();
		writetolog("sp_tempo_v1_data_recovery : call to sp_js_rdd_project_rights");
		sp_js_rdd_project_rights();
		writetolog("sp_tempo_v1_data_recovery : call to sp_js_set_portfolios");
		sp_js_set_portfolios();
		writetolog("sp_tempo_v1_data_recovery : call to sp_wpm_reset_delegate_to_on_all_project");
		sp_wpm_reset_delegate_to_on_all_project();
		writetolog("sp_tempo_v1_data_recovery : call to sp_js_rdd_resource_manager");
		sp_js_rdd_resource_manager();
		writetolog("sp_tempo_v1_data_recovery : call to sp_res_rdd_managers");
		sp_res_rdd_managers();
		writetolog("sp_tempo_v1_data_recovery : call to sp_dr_res_timecard_offenders_alert");
		sp_dr_res_timecard_offenders_alert()
		writetolog("sp_tempo_v1_data_recovery : call to sp_js_read_acces_team_members");
		sp_js_read_acces_team_members();
		writetolog("sp_tempo_v1_data_recovery : call to sp_js_rdd_project_geo_area");
		sp_js_rdd_project_geo_area();
		writetolog("sp_tempo_v1_data_recovery : call to sp_brd_init_platform");
		sp_brd_init_platform();
		writetolog("sp_tempo_v1_data_recovery : call to sp_import_cl_country_ravl_zone_europe");
		sp_import_cl_country_ravl_zone_europe();
		writetolog("sp_tempo_v1_data_recovery : call to ravl_recovery_main");
		ravl_recovery_main();
		writetolog("sp_tempo_v1_data_recovery : call to sp_clinical_data_recovery");
		sp_clinical_data_recovery();
		writetolog("sp_tempo_v1_data_recovery : call to sp_js_data_rec_clinical_cost");
		sp_js_data_rec_clinical_cost(); 
		writetolog("sp_tempo_v1_data_recovery : call to sp_clinical_set_code");
		sp_clinical_set_code();
		writetolog("sp_tempo_v1_data_recovery : call to sp_js_dr_gci_info");
		sp_js_dr_gci_info();
		writetolog("sp_tempo_v1_data_recovery : call to sp_clinical_adm_deleted");
		sp_clinical_adm_deleted();
		writetolog("sp_tempo_v1_data_recovery : call to sp_import_user_groups_list");
		sp_import_user_groups_list(true);
		writetolog("sp_tempo_v1_data_recovery : call to sp_init_gs_metrics");
		sp_init_gs_metrics();
		writetolog("sp_tempo_v1_data_recovery : call to sp_all_data_rec_fte_allocations");
		sp_all_data_rec_fte_allocations();
		writetolog("sp_tempo_v1_data_recovery : call to sp_js_rdd_rights_reset");
		sp_js_rdd_rights_reset();
	}
	writetolog("End of global data recovery using 'sp_tempo_v1_data_recovery' function");
	return false;
}
sp_tempo_v1_data_recovery.exportfunction("","BOOLEAN","Data recovery for TEMPO V1.0");

// Function for data recovery of delegation
function sp_wpm_reset_delegate_to_on_all_project()
{
	writetolog("Start data recovery for automatic delegation using 'sp_wpm_reset_delegate_to_on_all_project' function");
	
	var count = 0;
	for(var vProject in opxProject where vProject.open && vProject.STATE=="Active")
	{
		count++;
	}
	
	withmonitoring(count)
	{
		
		for(var vProject in opxProject where vProject.open && vProject.STATE=="Active")
		{
			writetolog("sp_wpm_reset_delegate_to_on_all_project : update project "+vProject.NAME);
			vProject.sp_wpm_set_delegate_to();
		}
		"Set workpackage manager delegation on projects...".monitor(count,1,1);
	}
	
	writetolog("End of data recovery for automatic delegation using 'sp_wpm_reset_delegate_to_on_all_project' function");
}


// Function to add "Under evaluation" Availability Type
function sp_dr_init_v6_processes_parameters()
{
	writetolog("Start data recovery for processes parameters using 'sp_dr_init_v6_processes_parameters' function");
	withoutlocking
	{
		// Add "Under evaluation" Availability Type
		var vAT = OpxAvailabilityType.get("Under evaluation");
		if(vAT == undefined)
		{
			writetolog("sp_dr_init_v6_processes_parameters : creation of 'Under evaluation' Availability Type");
			new OpxAvailabilityType("Name","Under evaluation","File","COM_XBS");
		}
		
		// Add "France" Greographic Area
		var vGA = "OpxSPAS_PT_GEOGRAPHIC_AREA".get("France");
		if(vGA == undefined)
		{
			writetolog("sp_dr_init_v6_processes_parameters : creation of 'France' Greographic Area");
			new OpxSPAS_PT_GEOGRAPHIC_AREA("Name","France","File","COM_XBS");
		}
		
		// Disable _RM_WF_RES_MANAGER workflow
		writetolog("sp_dr_init_v6_processes_parameters : Disable _RM_WF_RES_MANAGER workflow");
		var vWorkflow = "opxWorkflow".get("_RM_WF_RES_MANAGER");
		vWorkflow.FILTER="false";
		
		// Set default files
		writetolog("sp_dr_init_v6_processes_parameters : det default files for OBS, RESOURCE, COST_ACCOUNT");
		context.OBS_DEFAULT_FILE = "COM_OBS";
		context.RESOURCES_DEFAULT_FILE = "COM_RBS";
		context.COST_ACCOUNT_DEFAULT_FILE = "COM_CBS";
		
		// Add "hour" Cost Unit
		// var vCU = "OpxCostUnit".get("Hours");
		// if(vCU == undefined)
		// {
			// writetolog("sp_dr_init_v6_processes_parameters : creation of 'Hours' Cost Unit");
			// var ArgList = new vector("NAME", "Hours", "UNIT", "Days", "DESC", get_text_key_message_string("hour.plural"), "?MONETARY_UNIT", true, "VALUE", 0.125);
			// var o_CostUnit = "OpxCostUnit".makeopx2objectwithplist(Arglist);
		// }
		
		// Set parameter for email sending
		writetolog("sp_dr_init_v6_processes_parameters : set parameter for email sending");
		var DatabaseString = context.CallStringFormula("$DATABASE_NAME").ToUpperCase();
		if(DatabaseString.search("PROD")!=false || DatabaseString.search("UAT")!=false || DatabaseString.search("TRA")!=false)
		{
			context.SP_GS_B_ENABLE_MAIL_ALERTS = true;
		} else {
			context.SP_GS_B_ENABLE_MAIL_ALERTS = false;
		}
		
		// Settings for access rights data recovery on projects settings and OBS
		writetolog("sp_dr_init_v6_processes_parameters : set parameters for data recovery on projects and OBS");
		
		context.SP_GS_S_PRJ_DEFAULT_WRITE_GROUPS = "G_ADM,G_PORTADM,G_PMHEADS,G_FP,G_RBM,G_RPPM";
		context.SP_GS_S_PRJ_DEFAULT_READ_GROUPS = "G_RBS,G_TC,G_TTA";
		
		var vOBSClin = opxOBSElement.get("R&D - CLIN");
		if(vOBSClin != undefined)
		{
			vOBSClin.SP_AA_S_WPM_PRJ_DEFAULT_GROUPS = "G_CLINSU,G_CLINPTH,G_OSM,G_FIN";
			vOBSClin.SP_AA_S_WPM_PRJ_DEFAULT_USERS = "G_CPM,G_COPM";
			vOBSClin.SP_AA_S_PRJ_DEFAULT_READ_GR = "G_CLINCO";
		}
		
		var vOBSBRD = opxOBSElement.get("R&D - BRD");
		if(vOBSBRD != undefined)
		{
			vOBSBRD.SP_AA_S_WPM_PRJ_DEFAULT_GROUPS = "G_BRDPTH";
		}
		
		// Init default shapes for Gantt representation
		context._WT_AA_N_OC_DEF_SYM_MIL="3";
		context._WT_AA_N_OC_DEF_SYM_WBS="0";
		context._WT_AA_N_OC_DEF_SYM_TSK="1";
	}
	writetolog("End of data recovery for processes parameters using 'sp_dr_init_v6_processes_parameters' function");
}

// Function used to export user in group definition prior to User DPM restauration
function sp_export_user_groups_list()
{
	var vFileName="sp_user_list.csv";
	var filepath = new PathName("/compassv6/data_recovery/input/"+vFileName);
	
	if (filepath.ProbeFile() != false) 
	{
		filepath.DeleteFile();
		alert("file '"+vFileName+"' removed from server");
	}
	
	var myFile = new fileOutputStream(filepath,"overwrite");

	var vCount = 0;

	myFile.writeln("NAME;DESC;GROUPS_LIST");
	
	for (var vUser in OpxUser where vUser!=undefined && !_inf_js_is_template_user(vUser))
	{
		vCount++;
		var vLineValue = vUser.NAME+";"+vUser.DESC.trim("\"")+";"+vUser.GROUPS_LIST+"";
		myFile.writeln(vLineValue);
	}	
	myFile.close();
	
	// if (filepath.ProbeFile() != false) 
	// {
		// "(defun atos-send-csv-file (localname servername) (INTRANET::SEND-FILE-TO-CLIENT localname servername :TYPE :EXCEL-FILE :PREFERRED-METHOD :DOWNLOAD-AND-EXECUTE))".lispeval();
		// lispcall "atos-send-csv-file" (vFileName, filepath);
	// }
	var newline = Context.callStringFormula("get_char(10)");
	alert("End of export batch"+newline+vCount+" objects exported in file "+vFileName);
}

// input variable : vMode -> true for deletion of existing user in group, false for delta update
function sp_import_user_groups_list(vMode)
{
	writetolog("Start data recovery for user in groups using 'sp_import_user_groups_list' function");
	if(vMode)
	{
		writetolog("sp_import_user_groups_list : MODE = deletion of existing user in group");
	} else {
		writetolog("sp_import_user_groups_list : MODE = keep existing user in group");
	}
	
	if(context._INF_NF_B_SUPERUSER_MODE)
	{
		var vSlotLit = new vector("NAME","DESC","GROUPS_LIST");
		
		//var filepath = _Utils_chooseFileAndUploadOnServer();
		var vFileName="sp_user_list.csv";
		var filepath = new PathName("/compassv6/data_recovery/input/"+vFileName);

		var vCount = 0;
		var vCountUpdatedGroups = 0;
		
		if (filepath.probefile())
		{
			var v_inputFileStream = new FileInputStream(filepath);
			var vTotal = 0;
			for (var line = v_inputFileStream.readline(); line != undefined; line = v_inputFileStream.readline())
			{
				vTotal++;
				if (vTotal>1 && line.search(";")!=false)
				{
					var element = line.split(";");

					var vNAME = element[0];
					var vDESC = element[1];
					var vGROUPS_LIST = element[2];
					
					var vUser = OpxUser.get(vNAME.toString());
					
					if (vUser instanceof OpxUser && vUser != undefined)
					{
						vCount++;
						withoutlocking
						{
							vUser.DESC=vDESC;
							
							if(vMode)
							{
								for(var vUIG in OpxUserInGroup where vUIG.User==vUser)
								{
									vUIG.delete();
								}
							}
							
							for (var vUG in vGROUPS_LIST.parsevector())
							{
								var vUserGroup = OpxUserGroups.get(vUG.toString());
								if(vUserGroup instanceof opxUserGroups && vUserGroup != undefined)
								{
									for(var vUIG in OpxUserInGroup where vUIG.User==vUser && vUIG.Groupe==vUserGroup)
									{
										vUIG.delete();
									}
									var plist = new vector();
									plist.push("DATASET"); plist.push(opxFile.get("@@@SITE"));
									plist.push("USER-GROUP"); plist.push(vUserGroup);
									plist.push("OPX2-USER"); plist.push(vUser);
									var vUIG = OpxUserInGroup.Makeopx2objectwithplist(plist);
									if(vUIG != undefined)
									{
										vCountUpdatedGroups++;
									}
								} else {
									writetolog("sp_import_user_groups_list : user group ~a is undefined, please check EOL of input file (must be UNIX) !",vUG);
								}
							}
						}
					} else {
						writetolog("sp_import_user_groups_list : user ~a not found !",vNAME);
					}
				}
			}
			
			context.CallMacro("SAVE-DATASETS");
			
			v_inputFileStream.close();
			
			writetolog("sp_import_user_groups_list : end of data recovery for user groups : "+vCount+" user updated from file "+filepath+", "+vCountUpdatedGroups+" groups updated");
		} else {
			writetolog("sp_import_user_groups_list : file ~a does not exist on server, no import !",filepath);
		}
	} else {
		writetolog("sp_import_user_groups_list : no import, SUPER USER mode is required !");
	}
	writetolog("End of data recovery for user in groups using 'sp_import_user_groups_list' function");
}

function sp_js_rdd_files(){
	writetolog(" *** D but du traitement des droit object_types *** ");
		withoutlocking{
			for (var each in "opx_ADM_PT_DATA_CLASS"){
				each._adm_aa_s_data_rw_rights="G_ADM"
			}
		}	
		
		
		writetolog(" *** D but du traitement des droit sur les fichier commun *** ");

		// Fichier d'entr e
		var vBatchDirIn = "/compassv6/data_recovery/input"
		var InFilePath = new PathName(vBatchDirIn+"/files rights.csv");

		// D finition des variables
		var vTotal = 0;
		var vObjMaj = 0;

		//V rification que le fichier existe
		if (InFilePath.ProbeFile() != false)
		{
			// Ouverture du fichier d'entr e
			var InFile = new fileInputStream(InFilePath);
			//On parcours le fichier d'entr e
			for (var line = InFile.readline(); line != undefined; line = InFile.readline())
			{
				// on ne prend pas en compte la premi re ligne et on verifie qu'il y a bien le separateur ;
				vTotal++;
				if (vTotal>1 && line.search(";")!=false)
				{	  
					var element = line.split(";");

					var Col1 = element[0];
					var Col2 = element[1];
					var Col3 = element[2];
					var Col4 = element[3];
					
					
					var o_file = OpxFile.get(Col1)
					//alert(o_file)
					var s_write_rights = Col2;
					var s_read_rights = Col3;
					var owner = Col4;
					o_file.READ_WRITE_GROUPS =s_write_rights
					o_file.READ_ONLY_GROUPS =s_read_rights
					o_file.Owner =owner
					
					
				}
			}
			// Enregistrement des modifications
			context.CallMacro("SAVE-DATASETS");			
			
			// Fermeture des fichiers
			InFile.close();
		}	
		else writetolog("Pas de fichier d'entr e! ");

		// Bilan de l'import
		var newline=Context.callStringFormula("get_char(10)");
		//alert(newline+vObjMaj+" files modifi s"+newline+vTotal);

}
function sp_js_rdd_modules(){
	writetolog(" *** D but du traitement des droit sur les modules *** ");

		// Fichier d'entr e
		var vBatchDirIn = "/compassv6/data_recovery/input"
		var InFilePath = new PathName(vBatchDirIn+"/module rights.csv");
		
		//alert(vBatchDirIn +"   "+InFilePath)

		// D finition des variables
		var vTotal = 0;
		var vObjMaj = 0;

		//V rification que le fichier existe
		if (InFilePath.ProbeFile() != false)
		{
			// Ouverture du fichier d'entr e
			var InFile = new fileInputStream(InFilePath);
			//On parcours le fichier d'entr e
			for (var line = InFile.readline(); line != undefined; line = InFile.readline())
			{
				// on ne prend pas en compte la premi re ligne et on verifie qu'il y a bien le separateur ;
				vTotal++;
				if (vTotal>1 && line.search(";")!=false)
				{	  
					var element = line.split(";");

					var Col1 = element[0];
					var Col2 = element[1];
					
					
					var o_module = "OPX_GUI_PT_MODULES".get(Col1)
					var s_rights = Col2;
					o_module._GUI_AA_S_USER_GROUP =s_rights
					
					
				}
			}
			// Enregistrement des modifications
			context.CallMacro("SAVE-DATASETS");			
			
			// Fermeture des fichiers
			InFile.close();
		}	
		else writetolog("Pas de fichier d'entr e! ");

		// Bilan de l'import
		var newline=Context.callStringFormula("get_char(10)");
		//alert(newline+vObjMaj+" module modifi s"+newline+vTotal);


}
function sp_js_rdd_reporting(){
	writetolog(" *** D but du traitement des droit sur les reporting *** ");

		// Fichier d'entr e
		var vBatchDirIn = "/compassv6/data_recovery/input"
		var InFilePath = new PathName(vBatchDirIn+"/Reporting rights.csv");
		
		//alert(vBatchDirIn +"   "+InFilePath)

		// D finition des variables
		var vTotal = 0;
		var vObjMaj = 0;
		for (var each in "opx_SC_PT_REPORTING" ){
		each.set("_RE_AA_S_GROUP_READ","P_ADM")
		}
		//V rification que le fichier existe
		if (InFilePath.ProbeFile() != false)
		{
			// Ouverture du fichier d'entr e
			var InFile = new fileInputStream(InFilePath);
			//On parcours le fichier d'entr e
			for (var line = InFile.readline(); line != undefined; line = InFile.readline())
			{
				// on ne prend pas en compte la premi re ligne et on verifie qu'il y a bien le separateur ;
				vTotal++;
				if (vTotal>1 && line.search(";")!=false)
				{	  
					var element = line.split(";");

					var Col1 = element[0];
					var Col2 = element[1];
					
					var o_reporting = "opx_SC_PT_REPORTING".get(Col1)
					var s_rights = Col2;
					if (o_reporting !="" && o_reporting!= undefined && s_rights!=""){
						o_reporting.set("_RE_AA_S_GROUP_READ",s_rights)
					}
					
					
				}
			}
			// Enregistrement des modifications
			context.CallMacro("SAVE-DATASETS");			
			
			// Fermeture des fichiers
			InFile.close();
		}	
		else writetolog("Pas de fichier d'entr e! ");

		// Bilan de l'import
		var newline=Context.callStringFormula("get_char(10)");
		//alert(newline+vObjMaj+" reporting modifi s"+newline+vTotal);

}
function sp_js_rdd_profiles() {
	writetolog(" *** D but du traitement fonctionalit  des profiles *** ");

		// Fichier d'entr e
		var vBatchDirIn = "/compassv6/data_recovery/input"
		var InFilePath = new PathName(vBatchDirIn+"/Profiles Functions.csv");
		
		//alert(vBatchDirIn +"   "+InFilePath)

		// D finition des variables
		var vTotal = 0;
		var vObjMaj = 0;
		for (var each in "opx_GUI_PT_PRF_FEAT_MAP"){
			each.delete();
		}
		//V rification que le fichier existe
		if (InFilePath.ProbeFile() != false)
		{
			// Ouverture du fichier d'entr e
			var InFile = new fileInputStream(InFilePath);
			//On parcours le fichier d'entr e
			for (var line = InFile.readline(); line != undefined; line = InFile.readline())
			{
				// on ne prend pas en compte la premi re ligne et on verifie qu'il y a bien le separateur ;
				vTotal++;
				if (vTotal>1 && line.search(";")!=false)
				{	  
					var element = line.split(";");

					var Col1 = element[0];
					var Col2 = element[1];
					var Col3 = element[2];
					var Col4 = element[3];
					var Col5 = element[4];
					
					new opx_GUI_PT_PRF_FEAT_MAP("_GUI_RA_FEATURE",Col1,"_GUI_RA_PROFILE",Col2,"_GUI_AA_B_DISABLE",Col3,"_GUI_AA_B_ENABLE",Col4,"FILE", "GLOBALSETTINGS")

					
					
				}
			}
			// Enregistrement des modifications
			context.CallMacro("SAVE-DATASETS");			
			
			// Fermeture des fichiers
			InFile.close();
		}	
		else writetolog("Pas de fichier d'entr e! ");

		// Bilan de l'import
		var newline=Context.callStringFormula("get_char(10)");
		//alert(newline+vObjMaj+" fonctionalit  mise a jour"+newline+vTotal);
}
function sp_js_rdd_rights_reset(){
	withoutlocking{
		//sp_js_rdd_files();
		sp_js_rdd_profiles()
		sp_js_rdd_modules()
		sp_js_rdd_reporting()
		
	}
}

function sp_js_rdd_project_rights()
{
	writetolog("Start data recovery for project access rights update using 'sp_js_rdd_project_rights' function");
	
	var count = 0;
	for(var vProject in opxProject where vProject.open && vProject.STATE=="Active")
	{
		count++;
	}
	
	withmonitoring(count)
	{
		
		for(var vProject in opxProject where vProject.open && vProject.STATE=="Active")
		{
					writetolog("sp_js_rdd_project_rights : update ~a ",vProject);
			withoutlocking
			{
				vProject.sp_pm_set_default_access_rights();
			}
		}
		"Set project access rights...".monitor(count,1,1);
	}
	
	// Templates
	for(var vProject in opxProject where vProject.open && vProject.STATE=="Project template")
	{
		writetolog("sp_js_rdd_project_rights : update ~a ",vProject);
		withoutlocking
		{
			var vReadOnlyGroups = new vector();
			if(vProject.name.search("Z_CoR") || vProject.name.search("RAVL_ACTIVITY_LIBRARY"))
			{
				vReadOnlyGroups.push("G_PMRAVL");
				vReadOnlyGroups.push("G_RPPM");
			} else if (vProject.name.search("Z_RAVL")) {
				// nothing to do
			} else {
				vReadOnlyGroups.push("G_PORTADM");
				vReadOnlyGroups.push("G_PMHEADS");
				vReadOnlyGroups.push("G_FP");
				vReadOnlyGroups.push("G_RBM");
				vReadOnlyGroups.push("G_RPPM");
				vReadOnlyGroups.push("G_PM");
				vReadOnlyGroups.push("G_CPM");
				vReadOnlyGroups.push("G_COPM");
				vReadOnlyGroups.push("G_PMSL");
				vReadOnlyGroups.push("G_CLINSU");
				vReadOnlyGroups.push("G_OSM");
				vReadOnlyGroups.push("G_CLINSU");
				vReadOnlyGroups.push("G_CLINPTH");
				vReadOnlyGroups.push("G_BRDPTH");
				vReadOnlyGroups.push("G_CLINCO");
			}
			vReadOnlyGroups = vReadOnlyGroups.removeduplicates();
			vProject.READ_ONLY_GROUPS = vReadOnlyGroups.join(",");
			
			// Read/Write groups
			var vReadWriteGroups = new vector();
			vReadWriteGroups.push("G_ADM");
			for(var UserOrGroup in vProject.READ_WRITE_GROUPS.parselist()) {
				if(opxUser.get(UserOrGroup)!=undefined)
				{
					vReadWriteGroups.push(UserOrGroup);
				}
			}
			vReadWriteGroups = vReadWriteGroups.removeduplicates();
			vProject.READ_WRITE_GROUPS = vReadWriteGroups.join(",");
		}
	}
	
	writetolog("End of data recovery for project access rights update using 'sp_js_rdd_project_rights' function");
}

function sp_js_set_portfolios(){
	writetolog("Start data recovery for user portfolio initialization using 'sp_js_set_portfolios' function");
	withoutlocking{
		writetolog("sp_js_set_portfolios : deletion of existing user defined portfolios");
		for (var each in "opx_FF_PT_FAVOR_FILTERS" where each.name!="NV_PORTFOLIO_REPORTING" && each.name!="NV_PORTFOLIO_SELECTION"){
			each.delete()
		}

		var newport = new vector("GRP","BPSW","INF","KITE","CPP","NPA","NV","PPP","PPI","RAVL","PLC");

		for (var each in newport)
		{
			var id = "ALL."+each;
			var users = "G_ADM,G_BRDPTH,G_CFLCTL,G_CLINCO,G_CLINPTH,G_CLINSU,G_COPM,G_CPM,G_FIN,G_FP,G_OSM,G_PM,G_PMHEADS,G_PMRAVL,G_PMSL,G_PORTADM,G_PORTFULL,G_PORTLIM,G_PTMPL,G_RBM,G_RBS,G_RPPM,G_TC,G_TTA";
			var port = new Opx_FF_PT_FAVOR_FILTERS("NAME",each,"DESC","opxBREAKDOWN_2".get(id).DESC,_FF_RA_USER_FF,"INTRANET","FILE","PREFERENCES","_FF_AA_S_GROUP_READ",users,"_FF_AA_S_GROUP_WRITE",users,"_FF_AA_B_EXPORTED",true,"_FF_AA_T_FORMULA","BELONGS(\"BREAKDOWN_2\",\""+"opxBREAKDOWN_2".get(id).Printattribute()+"\")");
			writetolog("sp_js_set_portfolios : creation of ~a", port);
		}
	}
	writetolog("End of data recovery for user portfolio initialization using 'sp_js_set_portfolios' function");
}

function sp_js_rdd_resource_manager()
{
	writetolog("Start data recovery for Resource Manager field using 'sp_js_rdd_resource_manager' function");
	
	var vCount = 0;
	for(var vRes in "OpxResource" where vRes.RES_MANAGER.toString().search("G_RBS")==false)
	{
		vCount++;
	}
	
	var vCountUpdatedResource = 0;
	withmonitoring(vCount)
	{
		for (var vRes in "OpxResource" where vRes.RES_MANAGER.toString().search("G_RBS")==false)
		{
			var res_man = "G_RBS,"+vRes.RES_MANAGER;
			res_man = res_man.split(",");
			res_man = res_man.removeduplicates();
			res_man = res_man.join(",");
			
			if(vRes.RES_MANAGER.toString()!=res_man)
			{
				vCountUpdatedResource++;
			}
			
			withoutalerts{
			withoutlocking{
				vRes.RES_MANAGER = res_man;
			}
			}
		}
		"Update Resource Manager...".monitor(vCount,1,1);
	}
	writetolog("sp_js_rdd_resource_manager : end of data recovery. "+vCount+" Resources to update, "+vCountUpdatedResource+" resources updated");
	writetolog("End of data recovery for Resource Manager field using 'sp_js_rdd_resource_manager' function");
}

// 08.09.17 LBS 
// update MANAGERS field by added in CONTROLLER field value
function sp_res_rdd_managers()
{
	writetolog("Start data recovery for TimeCard Managers using 'sp_res_rdd_managers' function");
	
	var vCount = 0;
	for(var vRes in OpxResource where vRes.MANAGER!=undefined && vRes.MANAGERS!=undefined && vRes.CONTROLLER!=undefined && vRes.MANAGER!="" && vRes.MANAGERS!="" && vRes.CONTROLLER!="")
	{
		vCount++;
	}
	
	var vCountResModified = 0;
	withmonitoring(vCount)
	{
		for (var vRes in OpxResource){
			//
			var vVect = new vector();
			//add MANAGER value
			if(vRes.MANAGER!=undefined && vRes.MANAGER!="")
			{
				vVect.push(vRes.MANAGER.NAME);
			}
			//add default value
			vVect.push("G_ADM");
			vVect.push("G_RBS");
			//add CONTROLLER value
			if(vRes.CONTROLLER!=undefined && vRes.CONTROLLER!="")
			{
				vVect.push(vRes.CONTROLLER.NAME);
			}
			withoutlocking
			{
				vVect=vVect.removeduplicates();
				vRes.MANAGERS = vVect.join(",");//update MANAGERS field
			}
			vCountResModified++;
		}
	"Update TimeCard Managers...".monitor(vCount,1,1);
	}
	
	writetolog("sp_js_rdd_resource_manager : end of data recovery. "+vCount+" Resources to update, "+vCountResModified+" resources updated");
	writetolog("End of data recovery for TimeCard Managers using 'sp_res_rdd_managers' function");
}


function sp_js_rdd_project_geo_area()
{
	writetolog("Start data recovery for project geo area/trial using 'sp_js_rdd_project_geo_area' function");
	
	var count = 0;
	for(var vProject in opxProject where vProject.open && vProject.STATE=="Active")
	{
		count++;
	}
	
	withmonitoring(count)
	{
		
		for(var vProject in opxProject where vProject.open && vProject.STATE=="Active")
		{
			fromobject(vProject)
			{
				for (var each in "opxactivity" where each.SP_NF_CL_TRIAL){
					each.sp_js_create_geo_area()
				}
			}
		}
		"Set Geo areas/trial...".monitor(count,1,1);
	}
	
	writetolog("End of data recovery for project geo area/trial using 'sp_js_rdd_project_geo_area' function");
}

function sp_js_read_acces_team_members()
{
	writetolog("Starting data recovery to give read acces to team members and to create not rejected users as a team member of the project using 'sp_js_read_acces_team_members' function");
	var count = 0;
	//Preparing file for rejection
	var s_FileName="sp_team_member_rejection.csv";
	var o_filepath = new PathName("/compassv6/data_recovery/output/"+s_FileName);
	var o_reject_file = new fileoutputstream(o_filepath,"APPEND");
	o_reject_file.writetolog("Project;Team member;Rejection");
	
	//Creating hashtable of descriptive/user to research user by descriptive/user
	var ht_users = new hashtable ("STRING");
	for (var o_user in "OpxUser")
	{
			ht_users.set(o_user.DESC,o_user);
	}
	
	// count of the number of project for monitoring
	for(var o_Project in opxProject where o_Project.open && o_Project.STATE=="Active")
	{
		count++;
	}
	withmonitoring(count)
	{
		withoutlocking
		{
			// If the team member has no resource linked or if her resource has no manager, it is put in the rejection file. Else the manager is put in read only on the project.
			for(var o_Project in opxProject where o_Project.open && o_Project.STATE=="Active")
			{
				var v_tm_of_prj_to_create = new vector();
				writetolog(" sp_js_read_acces_team_members : updating project ~a ",o_Project.NAME);
				var v_team_members = o_Project.SP_AA_S_PJT_TEAM.split(",");
				for (var s_res_team_member in v_team_members)
				{
					var o_res_team_member= "Opxresource".get(s_res_team_member);
					if (o_res_team_member instanceof Opxresource)
					{
						if (o_res_team_member.MANAGER != "")
						{
							if (o_Project.READ_ONLY_GROUPS != "")
							{
								// Checking that the user is not already in the read only list
								if (o_Project.READ_ONLY_GROUPS.indexOf(o_res_team_member.MANAGER.printattribute()) == undefined)
								{
									o_Project.READ_ONLY_GROUPS=o_Project.READ_ONLY_GROUPS+","+o_res_team_member.MANAGER.printattribute();
									v_tm_of_prj_to_create.push(o_res_team_member.MANAGER.printattribute());
								}
							}
							else{
								o_Project.READ_ONLY_GROUPS=o_res_team_member.MANAGER.printattribute();
								v_tm_of_prj_to_create.push(o_res_team_member.MANAGER.printattribute());
							}
						}else{
							o_reject_file.writetolog(o_Project.printattribute()+";"+s_res_team_member+";No user linked to the resource");
						}
					}else{
						if (ht_users.get(s_res_team_member) instanceof Opxuser)
						{
							if (o_Project.READ_ONLY_GROUPS != "")
							{
								// Checking that the user is not already in the read only list
								if (o_Project.READ_ONLY_GROUPS.indexOf(ht_users.get(s_res_team_member).printattribute()) == undefined)
								{
									o_Project.READ_ONLY_GROUPS=o_Project.READ_ONLY_GROUPS+","+ht_users.get(s_res_team_member).printattribute();
									v_tm_of_prj_to_create.push(ht_users.get(s_res_team_member).printattribute());
								}
							}
							else{
								o_Project.READ_ONLY_GROUPS=ht_users.get(s_res_team_member).printattribute();
								v_tm_of_prj_to_create.push(ht_users.get(s_res_team_member).printattribute());
							}
						}else{
							o_reject_file.writetolog(o_Project.printattribute()+";"+s_res_team_member+";No resource or user found");
						}
					}
				}
				var s_init_val = o_Project.SP_DYN_TEAM_MEMBERS;
				o_Project.SP_DYN_TEAM_MEMBERS = v_tm_of_prj_to_create.join(",");
				writetolog("Setting SP_DYN_TEAM_MEMBERS from \""+s_init_val+"\"to \""+ v_tm_of_prj_to_create.join(",")+"\"");
			}
		}
		"Set project read access rights...".monitor(count,1,1);
	}
	o_reject_file.close();
	writetolog("End of data recovery to give read acces to team members and to create not rejected users as a team member of the project using 'sp_js_read_acces_team_members' function");
}

function sp_brd_init_platform()
{
	writetolog("Start data recovery for BRD platform using 'sp_brd_init_platform' function");
	if("OpxSP_PT_BRD_PLATFORM".findclass().numberofinstances == 0)
	{

		var data = new vector(
		"Upstream","ACC,BCESS,BCPM,EFQP,EOP,SGOPE,USPPD1,USPPO2"
		,"Downstream","ACP,BPESS,DSPPD1,DSPPO2"
		,"Formulation","ES,FPD1,FPD2,SPO2,SSM1,SSM2,TLF,VSF"
		,"Lot manufacturing","APS,APSD,APSP,BBPR,BDD,BDDSP,BDP,BDSP,BDUSP,BMD,BP,BUSP,DSL,DSLD,DSLP,FBP,FBPBPR,FBPD,FBPDP,FBPMD,FBPP,FP,FPBPR,FPD,FPDD,FPDP,FPMD,FPP,FPVI,LP1,LP2,LP3,MSL,PTCSU,SLBPR,SLMD,SLP,WSL"
		,"Regulatory","BRDAMEND,BRDAR,BRDCTD,BRDCTDA,BRDIB,BRDREG"
		,"Cross-platform","BTR,PDR1,PDR2,PTCBM,PTP,RMSQ,SPT,TLMB"
		,"Other",""
		);
		
		var platforms = new vector("Upstream"
		,"Downstream"
		,"Formulation"
		,"Lot manufacturing"
		,"Regulatory"
		,"Cross-platform"
		,"Other"
		);
		
		var plist = new vector();
		var at;
		var targetFile = "OpxCommonDataset".get("COM_WBS_TYPE");
		var obj;
		var nb = 0;
		
		for (var c in platforms where data.get(c) instanceof String)
		{
			at = data.get(c);
			plist.push("NAME"); plist.push(c);
			plist.push("SP_RING_BRD_PLATFORM_WBS_TYPE"); plist.push(at);
			plist.push("FILE"); plist.push(targetFile);

			obj = "OpxSP_PT_BRD_PLATFORM".findclass().Makeopx2objectwithplist(plist);
			plist.clear();

			if (obj instanceof OpxSP_PT_BRD_PLATFORM)
			{
			nb ++;
			writetolog("sp_brd_init_platform : "+obj.name+" created");
			}
		}
		writetolog("sp_brd_init_platform : "+nb+ " platforms have been created");
	} else {
		writetolog("No data recovery for BRD platform : table SP_PT_BRD_PLATFORM is already initialized");
	}
	writetolog("End of data recovery for BRD platform using 'sp_brd_init_platform' function");
}

function sp_import_cl_country_ravl_zone_europe()
{
	writetolog("Start data recovery for Clinical country RAVL zone / Europe update using 'sp_import_cl_country_ravl_zone_europe' function");
	// Construct hashtable
	var ht_cl_country = new hashtable("String");
	for(var vClC in "opxSP_PT_CL_COUNTRY")
	{
		if(vClC.SP_AA_S_CL_COUNTRY_CODE != "")
		{
			ht_cl_country.set(vClC.SP_AA_S_CL_COUNTRY_CODE,vClC);
		}
	}

	// var filepath = _Utils_chooseFileAndUploadOnServer();
	
	var vFileName="cl_country_ravl_zone_europe.csv";
	var filepath = new PathName("/compassv6/data_recovery/input/"+vFileName);
	
	var vCount = 0;
	
	if (filepath.probefile())
	{
		var v_inputFileStream = new FileInputStream(filepath);
		var vTotal = 0;
		for (var line = v_inputFileStream.readline(); line != undefined; line = v_inputFileStream.readline())
		{
			vTotal++;
			if (vTotal>1 && line.search(";")!=false)
			{
				var element = line.split(";");
				// Country code	Name	Description	RAVLSub AREA	File	Zone	Europe?
				var vCountryCode = element[0]; // SP_AA_S_CL_COUNTRY_CODE
				var vName = element[1];
				var vDescription = element[2];
				var vRAVLSubAREA = element[3]; // SP_RA_RAVL_SUB_AREA, table SP_PT_RAVL_GEO_AREA
				var vFile = element[4]; // FILE
				var vZone = element[5]; // SP_AA_N_RAVL_ZONE
				var vEurope = element[6]; // SP_AA_RAVL_IS_SPMSD
				
				var vObj = ht_cl_country.get(vCountryCode);
				
				if (vObj instanceof opxSP_PT_CL_COUNTRY && vObj != undefined)
				{
					withoutlocking
					{
						vCount++;
						writetolog("Clinical country "+vCountryCode+" updated");
						vObj.SP_AA_N_RAVL_ZONE = vZone;
						if(vEurope == "yes")
						{
							vObj.SP_AA_RAVL_IS_SPMSD = true;
						}
						if(vEurope == "no")
						{
							vObj.SP_AA_RAVL_IS_SPMSD = false;
						}
					}
				} else {
					writetolog("Clinical country "+vCountryCode+", Name = \""+vName+"\" not found !");
				}
			}
		}
		
		context.CallMacro("SAVE-DATASETS");
		
		v_inputFileStream.close();
		
		writetolog("sp_import_cl_country_ravl_zone_europe : "+vCount+" objects imported from file "+filepath);
		
		//filepath.DeleteFile();
		
	} else {
		writetolog("sp_import_cl_country_ravl_zone_europe : file '"+filepath+"' does not exist on server, no import !");
	}
	
	ht_cl_country.clear();
	writetolog("End of data recovery for Clinical country RAVL zone / Europe update using 'sp_import_cl_country_ravl_zone_europe' function");
}

// Data recovery for SP_PT_AT_PLATEFORM to RESOURCE
function sp_dr_res_timecard_offenders_alert()
{
	writetolog("Start data recovery for TimeCard Offenders Alert using 'sp_dr_res_timecard_offenders_alert' function");
	var sql_result = sqlselect("SP_PT_AT_PLATEFORM",new vector("NAME"),new vector("STRING"),"SP_AA_B_TCD_ACTIVE=1 and DATASET > 0");
	for (var result_entry in sql_result){
		var vRes = opxResource.get(result_entry[0]);
		if(vRes != undefined)
		{
			vRes.SP_AA_B_TCD_ACTIVE = true;
		}
	}
	
	// Truncate table 'SP_PT_AT_PLATEFORM'
	SqlwithDatabaseTransaction
	{
		var vResult = SqlExecuteImmediate("TRUNCATE TABLE SP_PT_AT_PLATEFORM");
		if (vResult)
		{
			SqlCommit();
		}
		else
		{
			Sqlrollback();
		}
	}
	writetolog("End of data recovery for TimeCard Offenders Alert using 'sp_dr_res_timecard_offenders_alert' function");
}

// Data recovery for GCI Assays. Use CLIN_TYPE_TEST and CLIN_NB_SAMPLE fields on Activity table to create GCI Info entries (link Activity / GCI Assays)
function sp_js_dr_gci_info()
{
	writetolog("Starting data recovery for GCI Info using 'sp_js_dr_gci_info' function");
	var vCountRecovered = 0;
	var vCountNotRecovered = 0;
	var vect_sql_result = new vector();
	
	for(var i=1; i<=20; i++)
	{
		var sql_result = sqlselect("TASK",new vector("ONB","SP_AT_ACT_CLIN_TYPE_TEST_"+i,"SP_AA_ACT_CLIN_NB_SAMPLE_"+padleft(i,2)),new vector("STRING","STRING","STRING"),"SP_AT_ACT_CLIN_TYPE_TEST_"+i+" is not null");
		vect_sql_result = vect_sql_result+sql_result;
		var sql_result = sqlselect("NETWORK",new vector("ONB","SP_AT_ACT_CLIN_TYPE_TEST_"+i,"SP_AA_ACT_CLIN_NB_SAMPLE_"+padleft(i,2)),new vector("STRING","STRING","STRING"),"SP_AT_ACT_CLIN_TYPE_TEST_"+i+" is not null");
		vect_sql_result = vect_sql_result+sql_result;
	}
	for (var result_entry in vect_sql_result){
		var vAct = opxActivity.get(result_entry[0].parseint("####"));
		var vClTest = "OpxSP_PT_CL_TEST".get(result_entry[1].parseint("####"));
		var vSampleNb = result_entry[2].parseint("####");
		if(vClTest != undefined)
		{
			if(vAct != undefined)
			{
				if (vSampleNb == undefined)
				{
					vSampleNb=0;
				}
				vCountRecovered++;
				var plist = new vector();
				plist.push("DATASET"); plist.push(vAct.file);
				plist.push("SP_RA_ACTIVITY"); plist.push(vAct);
				plist.push("SP_RA_TEST_TYPE"); plist.push(vClTest);
				plist.push("SP_AA_N_SAMPLE_NB"); plist.push(vSampleNb);
				var vGCIINFO = "opxSP_PT_GCI_INFO".makeopx2Objectwithplist(plist);
			} else {
				writetolog("sp_js_dr_gci_info : activity "+result_entry[0]+" not loaded, no data recovery !");
				vCountNotRecovered++;
			}
		} else {
			writetolog("sp_js_dr_gci_info : GCI Assay "+result_entry[1]+" not found !");
			vCountNotRecovered++;
		}
	}
	writetolog("sp_js_dr_gci_info : end of gci info initialization, "+vCountRecovered+" recovered activities, "+vCountNotRecovered+" unrecovered activities.");
	
	
	for(var i=1; i<=20; i++)
	{
		var sql_result = sqlselect("TASK",new vector("ONB","SP_AT_ACT_CLIN_TYPE_TEST_"+i,"SP_AA_ACT_CLIN_NB_SAMPLE_"+padleft(i,2)),new vector("STRING","STRING","STRING"),"SP_AT_ACT_CLIN_TYPE_TEST_"+i+" is not null");
		vect_sql_result = vect_sql_result+sql_result;
		var sql_result = sqlselect("NETWORK",new vector("ONB","SP_AT_ACT_CLIN_TYPE_TEST_"+i,"SP_AA_ACT_CLIN_NB_SAMPLE_"+padleft(i,2)),new vector("STRING","STRING","STRING"),"SP_AT_ACT_CLIN_TYPE_TEST_"+i+" is not null");
		vect_sql_result = vect_sql_result+sql_result;
	}
	var sql_request1 = "update TASK set SP_AA_ACT_CLIN_NB_SAMPLE_01=null, SP_AA_ACT_CLIN_NB_SAMPLE_02=null, SP_AA_ACT_CLIN_NB_SAMPLE_03=null, SP_AA_ACT_CLIN_NB_SAMPLE_04=null, SP_AA_ACT_CLIN_NB_SAMPLE_05=null, SP_AA_ACT_CLIN_NB_SAMPLE_06=null, SP_AA_ACT_CLIN_NB_SAMPLE_07=null, SP_AA_ACT_CLIN_NB_SAMPLE_08=null, SP_AA_ACT_CLIN_NB_SAMPLE_09=null, SP_AA_ACT_CLIN_NB_SAMPLE_10=null, SP_AA_ACT_CLIN_NB_SAMPLE_11=null, SP_AA_ACT_CLIN_NB_SAMPLE_12=null, SP_AA_ACT_CLIN_NB_SAMPLE_13=null, SP_AA_ACT_CLIN_NB_SAMPLE_14=null, SP_AA_ACT_CLIN_NB_SAMPLE_15=null, SP_AA_ACT_CLIN_NB_SAMPLE_16=null, SP_AA_ACT_CLIN_NB_SAMPLE_17=null, SP_AA_ACT_CLIN_NB_SAMPLE_18=null, SP_AA_ACT_CLIN_NB_SAMPLE_19=null, SP_AA_ACT_CLIN_NB_SAMPLE_20=null, SP_AT_ACT_CLIN_TYPE_TEST_1=null, SP_AT_ACT_CLIN_TYPE_TEST_2=null, SP_AT_ACT_CLIN_TYPE_TEST_3=null, SP_AT_ACT_CLIN_TYPE_TEST_4=null, SP_AT_ACT_CLIN_TYPE_TEST_5=null, SP_AT_ACT_CLIN_TYPE_TEST_6=null, SP_AT_ACT_CLIN_TYPE_TEST_7=null, SP_AT_ACT_CLIN_TYPE_TEST_8=null, SP_AT_ACT_CLIN_TYPE_TEST_9=null, SP_AT_ACT_CLIN_TYPE_TEST_10=null, SP_AT_ACT_CLIN_TYPE_TEST_11=null, SP_AT_ACT_CLIN_TYPE_TEST_12=null, SP_AT_ACT_CLIN_TYPE_TEST_13=null, SP_AT_ACT_CLIN_TYPE_TEST_14=null, SP_AT_ACT_CLIN_TYPE_TEST_15=null, SP_AT_ACT_CLIN_TYPE_TEST_16=null, SP_AT_ACT_CLIN_TYPE_TEST_17=null, SP_AT_ACT_CLIN_TYPE_TEST_18=null, SP_AT_ACT_CLIN_TYPE_TEST_19=null, SP_AT_ACT_CLIN_TYPE_TEST_20=null";
	var sql_request2 = "update NETWORK set SP_AA_ACT_CLIN_NB_SAMPLE_01=null, SP_AA_ACT_CLIN_NB_SAMPLE_02=null, SP_AA_ACT_CLIN_NB_SAMPLE_03=null, SP_AA_ACT_CLIN_NB_SAMPLE_04=null, SP_AA_ACT_CLIN_NB_SAMPLE_05=null, SP_AA_ACT_CLIN_NB_SAMPLE_06=null, SP_AA_ACT_CLIN_NB_SAMPLE_07=null, SP_AA_ACT_CLIN_NB_SAMPLE_08=null, SP_AA_ACT_CLIN_NB_SAMPLE_09=null, SP_AA_ACT_CLIN_NB_SAMPLE_10=null, SP_AA_ACT_CLIN_NB_SAMPLE_11=null, SP_AA_ACT_CLIN_NB_SAMPLE_12=null, SP_AA_ACT_CLIN_NB_SAMPLE_13=null, SP_AA_ACT_CLIN_NB_SAMPLE_14=null, SP_AA_ACT_CLIN_NB_SAMPLE_15=null, SP_AA_ACT_CLIN_NB_SAMPLE_16=null, SP_AA_ACT_CLIN_NB_SAMPLE_17=null, SP_AA_ACT_CLIN_NB_SAMPLE_18=null, SP_AA_ACT_CLIN_NB_SAMPLE_19=null, SP_AA_ACT_CLIN_NB_SAMPLE_20=null, SP_AT_ACT_CLIN_TYPE_TEST_1=null, SP_AT_ACT_CLIN_TYPE_TEST_2=null, SP_AT_ACT_CLIN_TYPE_TEST_3=null, SP_AT_ACT_CLIN_TYPE_TEST_4=null, SP_AT_ACT_CLIN_TYPE_TEST_5=null, SP_AT_ACT_CLIN_TYPE_TEST_6=null, SP_AT_ACT_CLIN_TYPE_TEST_7=null, SP_AT_ACT_CLIN_TYPE_TEST_8=null, SP_AT_ACT_CLIN_TYPE_TEST_9=null, SP_AT_ACT_CLIN_TYPE_TEST_10=null, SP_AT_ACT_CLIN_TYPE_TEST_11=null, SP_AT_ACT_CLIN_TYPE_TEST_12=null, SP_AT_ACT_CLIN_TYPE_TEST_13=null, SP_AT_ACT_CLIN_TYPE_TEST_14=null, SP_AT_ACT_CLIN_TYPE_TEST_15=null, SP_AT_ACT_CLIN_TYPE_TEST_16=null, SP_AT_ACT_CLIN_TYPE_TEST_17=null, SP_AT_ACT_CLIN_TYPE_TEST_18=null, SP_AT_ACT_CLIN_TYPE_TEST_19=null, SP_AT_ACT_CLIN_TYPE_TEST_20=null";
	SqlwithDatabasetransaction 
	{
		SQLExecuteImmediate(sql_request1);
		SQLExecuteImmediate(sql_request2);
		SqlCommit();
	}
	writetolog("End of data recovery for GCI Info using 'sp_js_dr_gci_info' function");
}

// Data Recovery for incident ITS-INC0696218 - Tempo v6: Field 'Timecard Managers' automatic update does not work properly
function sp_res_managers_missing_groups(vRes_ID)
{
	// Get the resource
	var vRes = "OpxResource".get(vRes_ID);
	// Create list of mandatory values
	var mandatory_values="";
	var vec=new vector();
	// Resource Manager
	if (vRes.MANAGER!=undefined && vRes.MANAGER!="")
	{
		vec.push(vRes.MANAGER.printattribute());
	}
	// Add "G_ADM,G_RBS"
	vec.push("G_ADM");
	vec.push("G_RBS");
	// Resource controler
	if (vRes.CONTROLLER!=undefined && vRes.CONTROLLER!="")
	{
		vec.push(vRes.CONTROLLER.printattribute());
	}
	//Convert vector to list
	mandatory_values=vec.join(",");

	// Check if some mandatory values are missing
	var missing_mandatory_values="";
	missing_mandatory_values="LIST_DIFFERENCE".call(mandatory_values,vRes.MANAGERS);
	
	return missing_mandatory_values;
}
sp_res_managers_missing_groups.exportfunction({"string"},"string");

function sp_rdd_res_managers()
{
	var count=0;
	
	for (var vRes in "OpxResource" where sp_res_managers_missing_groups(vRes.printattribute())!="")
	{		
		withoutalerts{
		
			var vec = new vector();

			// Manager must be the first item of the list
			if (vRes.MANAGER!=undefined && vRes.MANAGER!="")
			{
				vec.push(vRes.MANAGER.printattribute());
			}
			
			// Add "G_ADM,G_RBS"
			vec.push("G_ADM");
			vec.push("G_RBS");
			
			// Add Extra values
			// We get the value that were entered by user
			var input_value="";
			if (vRes.MANAGERS!=undefined && vRes.MANAGERS!="")
				input_value= vRes.MANAGERS;
			
			// We get the list of mandatory value
			var vec_to_compare=vec;
			if (vRes.CONTROLLER!=undefined && vRes.CONTROLLER!="")
			{
				vec_to_compare.push(vRes.CONTROLLER.printattribute());
			}	

			// We get the non mandatory extra vallues entered by user
			var extra_value="";
			if (input_value!="")
				extra_value="LIST_DIFFERENCE".call(input_value,vec_to_compare.join(","));
			
			// Add extra value to vector
			for (var Obj in extra_value.parselist())
			{
				vec.push(Obj);
			}	
			
			// Add controler (Last item)
			if (vRes.CONTROLLER!=undefined && vRes.CONTROLLER!="")
			{
				vec.push(vRes.CONTROLLER.printattribute());
			}
				
			vec = vec.removeduplicates();
			
			vRes.MANAGERS=vec.join(",");
			
			count++;
		}
	}
	alert(Count + " resources updated.")
}

function sp_js_rdd_clean_multi_lang_activity_desc()
{
	var v_Errors = new vector();
	var n_NumClean=0;
	var s_descENG="";
	var s_descFR="";
	var s_Table="";
	var n_count_monitor=0;
	
	writeln(char(10)+"DATA RECOVERY (Cleaning Multi-language Activities) - Start of sp_js_rdd_clean_multi_lang_activity_desc");
	
	var diroutput = "/compassv6/data_recovery/output";
	var dir = mkdir(diroutput);
	var s_filename="DR_RENAMED_ACTIVITIES.csv";
	var o_filepath = new PathName(diroutput+"/"+s_filename); 
	var o_File = new fileOutputStream(o_filepath,"OVERWRITE");	
	
	o_File.writeln("ONB Activity;ID Activity;Description;Old French DESC");
	
	for(var o_Project in opxProject where o_Project.open && o_Project.getinternalvalue("STATE").ToString()=="ACTIVE")
	{
		fromobject(o_Project)
		{
			for (var o_Act in "opxactivity" where  o_Act.getinternalvalue("DESC").ToString().search("#/")==0) 
			{	
				n_count_monitor++;
			}
		}
	}
	
	withmonitoring(n_count_monitor)
	{
		for(var o_Project in opxProject where o_Project.open && o_Project.getinternalvalue("STATE").ToString()=="ACTIVE")
		{
			fromobject(o_Project)
			{
				for (var o_Act in "opxactivity" where  o_Act.getinternalvalue("DESC").ToString().search("#/")==0)
				{
					try
					{
						s_descENG = o_Act.callstringformula("IN_LANGUAGE(\"ENGLISH\",\"DESC\")");
						s_descFR = o_Act.callstringformula("IN_LANGUAGE(\"FRENCH\",\"DESC\")");
						if (s_descENG instanceof string) 
						{	
							
							SqlwithDatabasetransaction 
							{
								s_Table = (o_Act.get("?TASK") ? "TASK":"NETWORK");
								SQLExecuteImmediate("update "+s_Table+" set OPX2_COMMENT='"+s_descENG.replaceregexp("'","''").replaceregexp("~","~~")+"' where ONB="+o_Act.ONB.toString("####"));
								SqlCommit();
							}
							n_NumClean++;
							o_File.writeln(o_Act.ONB.toString("####")+";"+o_Act.printattribute()+";"+s_descENG+";"+s_descFR);
							writeln("---> Activity "+o_Act.printattribute()+" cleaned (new desc = "+s_descENG+")");
							"Data recovery on DKM...".monitor(n_count_monitor,1,1);
						}
					}
					catch(error e)
					{
						v_Errors.push("Error while cleaning multiligual type of Activity desc"+o_Act.printattribute()+" : "+e);
					}
				}
			}
		} 
	}
		
	if (v_Errors.length>0)
	{
		
		writeln("DATA RECOVERY (Cleaning Multi-language Activities) - End of sp_js_rdd_clean_multi_lang_activity_desc with errors :");
		for (var s_error in v_Errors) 
		{
			writeln(s_error);
		}
		o_File.writeln("END OF DATA RECOVERY with "+v_Errors.length+" errors out of "+n_NumClean);
		alert("END OF DATA RECOVERY with "+v_Errors.length+" errors out of "+n_NumClean);
	}
	else 
	{
		writeln("DATA RECOVERY (Cleaning Multi-language Activities) - End of sp_js_rdd_clean_multi_lang_activity_desc with no error : " +n_NumClean +" Planned Hours cleaned");
		o_File.writeln("END OF DATA RECOVERY : " +n_NumClean +" Activities cleaned");
		alert("END OF DATA RECOVERY : " +n_NumClean +" Activities cleaned");
	}
	
	o_File.close();
}

function sp_js_rdd_related_pkm()
{
	writeln(char(10)+" ->  DATA RECOVERY (formating related PKM) - Start of sp_js_rdd_related_pkm");
	
	var v_Errors = new vector();
	var n_clean=0;
	var n_unclean=0;
	var b_clean=false;
	var diroutput = "/compassv6/data_recovery/output";
	var dir = mkdir(diroutput);
	
	var s_filename1="DR_new_related_PKM.csv";
	var o_filepath1 = new PathName(diroutput+"/"+s_filename1); 
	var o_File1 = new fileOutputStream(o_filepath1,"OVERWRITE");	
	o_File1.writeln("Project;Project State;DKM Name;DKM Desc;DKM ID ;OLD Related PKM;NEW Related PKM");
	
	var s_filename2="DR_related_PKM_emptied.csv";
	var o_filepath2 = new PathName(diroutput+"/"+s_filename2); 
	var o_File2 = new fileOutputStream(o_filepath2,"OVERWRITE");	
	o_File2.writeln("Project;Project State;DKM Name;DKM Desc;DKM ID ;OLD Related PKM");
	

	for (var o_project in opxProject where o_project.open && o_project.getinternalvalue("STATE").ToString()=="ACTIVE")
	{
		fromobject(o_project)
		{
			for (var act_dkm in "OpxActivity" where act_dkm.SP_AA_RELATED_PKMS!="")
			{
				try
				{
					var s_rel_pkm=act_dkm.SP_AA_RELATED_PKMS;
					
					// if the activity is a DKM we modify the Related PKM value
					if (act_dkm.SP_AA_ACT_IS_A_DKM || act_dkm.SP_AA_DKM_NUMBER!="" || act_dkm.WBS_TYPE.name == "DKM")
					{
						
						var b_clean=false;	
						
						// cleaning of related pkm equal to no or non
						if (s_rel_pkm.ToUpperCase()=="NO" || s_rel_pkm.ToUpperCase()=="NON") 
						{
							b_clean=true;
							withoutlocking act_dkm.SP_AA_RELATED_PKMS="";
						}
						// change of the Related PKM value : we search the pkms with a description equal to related PKM value (to replace it by PKMname_PKMdescrition)
						else 
						{					
							for (var act_pkm in "OpxActivity" where act_pkm.SP_NF_B_ELIGIBLE_REL_PKM && act_pkm.DESC==s_rel_pkm)
							{
								b_clean=true;
								withoutlocking act_dkm.SP_AA_RELATED_PKMS=act_pkm.NAME+"_"+act_pkm.DESC;
								break;
							}
						}
						
						if (b_clean)
						{
							n_clean++;
							o_File1.writeln(o_project.name+";"+o_project.getinternalvalue("STATE").ToString()+";"+act_dkm.NAME+";"+act_dkm.DESC.replaceregexp(";"," ").replaceregexp(","," ").replaceregexp("\"","")+";"+act_dkm.printattribute()+";"+s_rel_pkm+";"+act_dkm.SP_AA_RELATED_PKMS);
							writeln(" ->  DR related PKM (OK) : "+act_dkm.printattribute()+" - Related PKM replaced - old value :  "+s_rel_pkm+"  replaced by : "+act_dkm.SP_AA_RELATED_PKMS);
						} 
						else if (s_rel_pkm.search("_")==false)
						{
							n_unclean++;
							writeln(" ->  DR related PKM (KO) : "+act_dkm.printattribute()+" - Impossible to clean Related PKM - old value  : "+s_rel_pkm);
						}
					}
					// if the activity is not a DKM we clean the field related PKM
					else 
					{
						withoutlocking act_dkm.SP_AA_RELATED_PKMS="";
						o_File2.writeln(o_project.name+";"+o_project.getinternalvalue("STATE").ToString()+";"+act_dkm.NAME+";"+act_dkm.DESC.replaceregexp(";"," ").replaceregexp(","," ").replaceregexp("\"","")+";"+act_dkm.printattribute()+";"+s_rel_pkm);
						writeln(" ->  DR related PKM (OK) : "+act_dkm.printattribute()+" - Related PKM emptied out - old value :  "+s_rel_pkm);
					}
				}
				catch(error e)
				{
					v_errors.push("Error while cleaning Activity  "+act_dkm.printattribute()+" : "+e);
				}
			}
		}
	}
	
	
	if (v_errors.length>0)
	{
		
		writeln(" ->  DATA RECOVERY (formating related PKM) - End of sp_js_rdd_related_pkm with errors :");
		for (var error in v_errors) 
		{
			writeln(error);
		}
		alert("END OF DATA RECOVERY with "+v_errors.length+" errors ");
	}
	else 
	{
		writeln(" ->  DATA RECOVERY (formating related PKM) - end of sp_js_rdd_related_pkm : 		" +n_clean +" related PKM formated 		/	 "+n_unclean+" impossible to format");
		alert("DATA RECOVERY (formating related PKM) - end of sp_js_rdd_related_pkm : 		" +n_clean +" related PKM formated 		/	 "+n_unclean+" impossible to format");
	}
	
	o_File1.close();
	o_File2.close();
	// Download of the files 
	"(defun sp-send-csv-file (localname servername) (INTRANET::SEND-FILE-TO-CLIENT localname servername :TYPE :EXCEL-FILE :PREFERRED-METHOD :DOWNLOAD-AND-EXECUTE))".lispeval();
	lispcall "sp-send-csv-file" (s_filename1, o_filepath1);
	lispcall "sp-send-csv-file" (s_filename2, o_filepath2);
}

function sp_js_rdd_recovery_RA_metric_PH()
{
	writeln(char(10)+"DATA RECOVERY (Planned Hours RA metric) - Start of sp_js_rdd_recovery_RA_metric_PH");
	var vErrors = new vector();
	var NumClean=0;
	var NumTotal=0;
	var o_metric;
	var n_count_monitoring=0;
	
	for(var vProject in opxProject where vProject.open && vProject.STATE=="Active")
	{
	   fromobject(vProject)
	   {
		   for (var o_PlannedHour in "OpxALLOCATION" where o_PlannedHour.COST_ACCOUNT.NAME == "FTE_ESTIMATED") 
		   {
				n_count_monitoring++;
		   }
	   }
	}
	withmonitoring(n_count_monitoring)
	{
	   for(var vProject in opxProject where vProject.open && vProject.STATE=="Active")
	   {
		   fromobject(vProject)
		   {
			   for (var o_PlannedHour in "OpxALLOCATION" where o_PlannedHour.COST_ACCOUNT.NAME == "FTE_ESTIMATED") 
			   {
				   try
				   {
					  withoutalerts withoutlocking 
					  {
						  o_metric="OpxSP_METRIC".get(o_PlannedHour.COMMENT);
						  if (o_metric instanceof OpxSP_METRIC)
						  {
							  writeln("---> Planned Hour "+o_PlannedHour.COMMENT+" recovered ("+o_PlannedHour.ACTIVITY.printattribute()+")");
							  o_PlannedHour.SP_RA_METRIC=o_metric; 
							  
							  if (o_PlannedHour.CallBooleanFormula("BELONGS(\"RESOURCE\",\"CMO - GMA,R&D - Clinical,CMO - PPO\")"))
							  {
								  if (o_PlannedHour.SP_DA_CLIN_OUTSOURCED) o_PlannedHour.SP_AA_N_METRIC_VALUE=o_PlannedHour.SP_NF_CL_VALUE_OUTSOURCED_PH;
								  else o_PlannedHour.SP_AA_N_METRIC_VALUE=o_PlannedHour.SP_NF_CL_VALUE_NOT_OUTSOURCED_PH;
							  }
							  "Data recovery on PH...".monitor(n_count_monitoring,1,1);
							  NumClean++;
						  }
						  NumTotal++;
					  }
				   }
				   catch(error e)
				   {
						vErrors.push("Error with allocation "+o_PlannedHour+" : "+e);
				   }
			   }
		   }
	   }

	}
	if (vErrors.length>0)
	{
	   
	   writeln("DATA RECOVERY (Planned Hours RA metric) - End of sp_js_rdd_recovery_RA_metric_PH with errors :");
	   for (var s_error in vErrors) 
	   {
					   writeln(s_error);
	   }
	   alert("END OF DATA RECOVERY with "+vErrors.length+" errors ");
	}
	else 
	{
	   writeln("DATA RECOVERY (Planned Hours RA metric) - End of sp_js_rdd_recovery_RA_metric_PH with no error : " +NumClean +" Planned Hours recovered out of "+NumTotal);
	   alert("END OF DATA RECOVERY : " +NumClean +" Planned Hours recovered out of "+NumTotal);
	}
}

function sp_js_rdd_PH_equation_override(v_resource,d_limit_date)
{

writetolog("Data Recovery on Planned Hours (equation override)");
writetolog("TEMPO V"+context.SP_NF_CTX_INTE_WEEK);
var n_compteur =0;
var i = 0;
var o_resourceList = new vector();
for(var o_resource in v_resource where o_resource instanceof opxResource)
{
	fromObject(o_resource)
	{
		for (var o_PlannedHour in "opxALLOCATION" where  o_PlannedHour.COST_ACCOUNT.NAME == "FTE_METRICS" && o_PlannedHour.PROJET.getinternalvalue("STATE").ToString()=="ACTIVE" 
		&& o_PlannedHour.RES == o_resource && o_PlannedHour.SP_NF_D_FPRM_PLANNED_FINISH instanceof date)
		{
				var n_diff = 0;
				n_diff= d_limit_date.getTime() - o_PlannedHour.SP_NF_D_FPRM_PLANNED_FINISH.getTime();
				if(n_diff>0)
				{	
					n_compteur++;
				}
		}

		WithMonitoring (n_compteur) 
		{
			for (var o_PlannedHour in "opxALLOCATION" where  o_PlannedHour.COST_ACCOUNT.NAME == "FTE_METRICS" && o_PlannedHour.PROJET.getinternalvalue("STATE").ToString()=="ACTIVE" 
			&& o_PlannedHour.RES == o_resource && o_PlannedHour.SP_NF_D_FPRM_PLANNED_FINISH instanceof date)
			{
				var n_diff = 0;
				n_diff= d_limit_date.getTime() - o_PlannedHour.SP_NF_D_FPRM_PLANNED_FINISH.getTime();
				if(n_diff>=0)
				{				
					writetolog("modification of allocation " + o_PlannedHour.onb );
					withoutlocking { withoutalerts { o_PlannedHour.EQUATION_OVERRIDE = true;}}
					i++;
				}
				"modification of planned hours (equation override)".Monitor(n_compteur);
			}
		}
        
	}
}
alert("END OF DATA RECOVERY : " +i +" Planned Hours upated (equation override)");

writetolog("END of data recovery on Planned Hours (equation override)");
	
}


function sp_js_rdd_PH_equation_override_CDL()
{
	var v_resource= new vector();
	v_resource.push(opxResource.get("CLIN-CDM-CTA"));
	v_resource.push(opxResource.get("CLIN-CDM-DMG"));
	var d_limit_date = new date(2020,01,01);
	
	writetolog("Start of Data Recovery for CLIN-CDM-CTA & CLIN-CDM-DMG");
	sp_js_rdd_PH_equation_override(v_resource,d_limit_date);
	writetolog("End of Data Recovery for CLIN-CDM-CTA & CLIN-CDM-DMG");
	
}

function sp_js_rdd_PH_upd_res_by_cost_account(h_resource,d_limit_date,s_cost_account)
{

	writetolog("Data Recovery on Planned Hours (Change resource "+s_cost_account+")");
	writetolog("TEMPO V"+context.SP_NF_CTX_INTE_WEEK);
	var n_compteur =0;
	var i = 0;
	var s_monitor="modification of planned hours (Change resource "+s_cost_account+")";

	for(var o_resource in h_resource where o_resource instanceof opxResource && h_resource.get(o_resource) instanceof opxResource )
	{
		var o_new_res=h_resource.get(o_resource);
		fromObject(o_resource)
		{
			for (var o_PlannedHour in "opxALLOCATION" where  o_PlannedHour.COST_ACCOUNT.NAME == s_cost_account && o_PlannedHour.PROJET.getinternalvalue("STATE").ToString()=="ACTIVE" 
			&& o_PlannedHour.RES == o_resource && o_PlannedHour.SP_NF_D_FPRM_PLANNED_FINISH instanceof date)
			{
				var n_diff = 0;
				n_diff= d_limit_date.getTime() - o_PlannedHour.SP_NF_D_FPRM_PLANNED_FINISH.getTime();
				if(n_diff<0)
				{
					n_compteur++;
				}
			}

			WithMonitoring (n_compteur) 
			{
				for (var o_PlannedHour in "opxALLOCATION" where  o_PlannedHour.COST_ACCOUNT.NAME == s_cost_account && o_PlannedHour.PROJET.getinternalvalue("STATE").ToString()=="ACTIVE" 
				&& o_PlannedHour.RES == o_resource && o_PlannedHour.SP_NF_D_FPRM_PLANNED_FINISH instanceof date) 
				{
					
					var n_diff = 0;
					n_diff= d_limit_date.getTime() - o_PlannedHour.SP_NF_D_FPRM_PLANNED_FINISH.getTime();
					if(n_diff<0)
					{					
						writetolog("modification of allocation " + o_PlannedHour.onb );
						o_PlannedHour.res = o_new_res;
						 o_PlannedHour._RM_AA_S_PL_HRS_COMMENT = "data_recovery";
						i++;
					}
						s_monitor.Monitor(n_compteur);
				}
			}
		}
	}
	alert("END OF DATA RECOVERY : " +i +" Planned Hours upated (Change resource "+s_cost_account+")");
	writetolog("END of data recovery on Planned Hours(Change resource "+s_cost_account+")");
}

function sp_js_rdd_PH_equation_override_GBS()
{
	var v_resource= new vector();
	v_resource.push(opxResource.get("CLIN-BS-PROG"));
	v_resource.push(opxResource.get("CLIN-BS-STAT"));
	var h_resource= new hashtable();
	h_resource.set(opxResource.get("CLIN-BS-PROG"),opxResource.get("GBS-CLIN-PROG"));
	h_resource.set(opxResource.get("CLIN-BS-STAT"),opxResource.get("GBS-CLIN-STAT"));
	var d_limit_date = new date(2020,01,01);
	
	writetolog("Start of Data Recovery for CLIN-BS-PROG & CLIN-BS-STAT");
	sp_js_rdd_PH_equation_override(v_resource,d_limit_date);
	sp_js_rdd_PH_upd_res_by_cost_account(h_resource,d_limit_date,"FTE_ESTIMATED");
	sp_js_rdd_PH_upd_res_by_cost_account(h_resource,d_limit_date,"FTE");
	sp_js_rdd_PH_upd_res_by_cost_account(h_resource,d_limit_date,"FTE_METRICS");
	writetolog("End of Data Recovery for CLIN-BS-PROG & CLIN-BS-STAT");
}

function  SP_JS_DKM_FUNCTION_PLATFORM_UPD()
{
	var v_Errors = new vector();
	var n_NumClean=0;
	var s_id= "";
	var s_ONB_Activity= "";
	var s_Project_Name = "";
	var s_DKM_FUNCTION="";
	var s_DKM_PLATFORM="";
	var s_Table="";
	var n_count_monitor=0;
	var Obj_DKM_Fun_Res; 
	var Obj_DKM_Platf_Res; 
	var h_dkm_old= new hashtable("STRING");
	h_dkm_old.set("R&D - ARD","R&D - AS");
	h_dkm_old.set("R&D - PD","R&D - PD_OLD");
	h_dkm_old.set("R&D - AS&AD","R&D - AS");
	h_dkm_old.set("R&D - PTR","R&D - PTR_OLD");
	h_dkm_old.set("R&D - ESBD","R&D - ESBD_OLD");
	h_dkm_old.set("R&D - Non clinical safety","R&D - Non clinical safety_OLD");
	h_dkm_old.set("R&D - Clinical","R&D - GCS");
	h_dkm_old.set("R&D - NCPP","R&D - NCPP_OLD");
	h_dkm_old.set("R&D - Research","R&D - Research_OLD");
	h_dkm_old.set("R&D - Discovery","R&D - Discovery_OLD"); 
	
	
	writeln(char(10)+"DATA RECOVERY (updating DKM ACTIVITIES FUNCTION AND PLATFORM) - Start of SP_JS_DKM_FUNCTION_PLATFORM_UPD");
	
	var diroutput = "/compassv6/data_recovery/output";
	var dir = mkdir(diroutput);
	var s_filename="DKM_FIELD_UPD_ACTIVITIES.csv";
	var o_filepath = new PathName(diroutput+"/"+s_filename); 
	var o_File = new fileOutputStream(o_filepath,"OVERWRITE");	
	
	o_File.writeln("ONB Activity;PROJECT_NAME;DKM_FUNCTION;SP_RA_DKM_ASS_FUNCTION;DKM_PLATFORM;SP_RING_DKM_ACT_PLATFORM_RBS;IDENTIFIER");
	
	for(var o_Project in opxProject where o_Project.open )
	{
		fromobject(o_Project)
		{
			for (var o_Act in "opxactivity" where o_act.sp_aa_act_is_a_dkm && (o_act.sp_aa_dkm_ass_func != ""  || o_act.sp_aa_dkm_ass_platf != "" ) )
			{	
				n_count_monitor++;
			}
		}
	}
	
	withmonitoring(n_count_monitor)
	{
		withoutalerts withoutlocking
		{
			for(var o_Project in opxProject where o_Project.open )
			{
				fromobject(o_Project)
				{
					for (var o_Act in "opxactivity" where o_act.sp_aa_act_is_a_dkm && (o_act.sp_aa_dkm_ass_func != ""  || o_act.sp_aa_dkm_ass_platf != "" ) )
					{
							s_id= o_Act.printattribute();
							s_ONB_ACTIVITY = o_Act.ONB;
							s_Project_Name = o_Act.SP_NF_S_PROJECT_NAME;
							s_DKM_FUNCTION = o_act.sp_aa_dkm_ass_func;
							
							var o_dkm_fun = h_dkm_old.get(s_DKM_FUNCTION);
							if (o_dkm_fun instanceof String && o_dkm_fun != "")
							{ 
								s_DKM_FUNCTION = h_dkm_old.get(s_DKM_FUNCTION);
							}
							
							
							s_DKM_PLATFORM = o_act.sp_aa_dkm_ass_platf.replaceregexp(" ",",");
							 
							Obj_DKM_Fun_Res="opxResource".get(s_DKM_FUNCTION); 
							
							var dkm_Platform_vect=new vector();
							for ( var  i  in s_DKM_PLATFORM.parselist()) 
							{  
							 var Res = "opxResource".get(i);
								if ( Res instanceOf OpxResource)
								{
									dkm_Platform_vect.push(Res.name);
								}
							}
												
							o_act.SP_RING_DKM_ACT_PLATFORM_RBS=dkm_Platform_vect.removeduplicates().JOIN(",");
							var  Platform_Result=o_act.SP_RING_DKM_ACT_PLATFORM_RBS;
							
							var Function_Result="";
							If (Obj_DKM_Fun_Res instanceof OpxResource)
							{
							o_act.SP_RA_DKM_ASS_FUNCTION=Obj_DKM_Fun_Res;
							Function_Result=o_act.SP_RA_DKM_ASS_FUNCTION.printattribute();
							}
							 
								o_File.writeln(o_Act.ONB.toString("####")+";"+s_Project_Name+";"+s_DKM_FUNCTION+";"+Function_Result+";"+s_DKM_PLATFORM+";"+Platform_Result+";"+s_id );
								n_NumClean++;
								writeln("---> Activity "+o_Act.printattribute()+" identified_updated (new desc = "+s_ONB_ACTIVITY+")");
								"Data recovery on DKM...".monitor(n_count_monitor,1,1);
							
							
					}
				}
			}
		}			
	}
		writeln("DATA RECOVERY (Updating DKM activities Function and Platform) - End of SP_JS_DKM_FUNCTION_PLATFORM_UPD with no error : " +n_NumClean +" activities DKM list");
		o_File.writeln("END OF DATA RECOVERY : " +n_NumClean +" Activities DKM updated");
		alert("END OF DATA RECOVERY : " +n_NumClean +" Activities updated");
	o_File.close();
}

function sp_js_res_PH_move_equation_override(v_resource,d_limit_date)
{

	writetolog("Data Recovery on Planned Hours (equation override)");
	writetolog("TEMPO V"+context.SP_NF_CTX_INTE_WEEK);
	var n_compteur =0;
	var i = 0;
	var o_resourceList = new vector();
	for(var o_resource in v_resource where o_resource instanceof opxResource)
	{
		fromObject(o_resource)
		{
			for (var o_PlannedHour in "opxALLOCATION" where  o_PlannedHour.COST_ACCOUNT.NAME == "FTE_METRICS" && o_PlannedHour.PROJET.getinternalvalue("STATE").ToString()=="ACTIVE" 
			&& o_PlannedHour.RES == o_resource && o_PlannedHour.FD instanceof date)
			{
					var n_diff = 0;
					n_diff= d_limit_date.getTime() - o_PlannedHour.FD.getTime();
					if(n_diff>0)
					{	
						n_compteur++;
					}
			}

			WithMonitoring (n_compteur) 
			{
				for (var o_PlannedHour in "opxALLOCATION" where  o_PlannedHour.COST_ACCOUNT.NAME == "FTE_METRICS" && o_PlannedHour.PROJET.getinternalvalue("STATE").ToString()=="ACTIVE" 
				&& o_PlannedHour.RES == o_resource && o_PlannedHour.FD instanceof date)
				{
					var n_diff = 0;
					n_diff= d_limit_date.getTime() - o_PlannedHour.FD.getTime();
					if(n_diff>0)
					{				
						writetolog("modification of allocation " + o_PlannedHour.onb );
						
						withoutlocking { 
						// case of normal planned hours
						if (o_PlannedHour.EQUATION_OBJECT!=""){  withoutalerts { o_PlannedHour.EQUATION_OVERRIDE = true;}}
						//case of PH created by SP_CL_LAUNCH_SITES_INT 
						else {o_PlannedHour.EQUATION_OVERRIDE = true;}
						}
						
						i++;
					}
					"modification of planned hours (equation override)".Monitor(n_compteur);
				}
			}
			
		}
	}
	alert("END OF DATA RECOVERY : " +i +" Planned Hours upated (equation override)");

	writetolog("END of data recovery on Planned Hours (equation override)");

}

function sp_js_res_PH_upd_res_move_by_cost_account(h_resource,d_limit_date,s_cost_account)
{

	writetolog("Data Recovery on Planned Hours (Change resource "+s_cost_account+")");
	writetolog("TEMPO V"+context.SP_NF_CTX_INTE_WEEK);
	var n_compteur =0;
	var i = 0;
	var s_monitor="modification of planned hours (Change resource "+s_cost_account+")";

	for(var o_resource in h_resource where o_resource instanceof opxResource && h_resource.get(o_resource) instanceof opxResource )
	{
		var o_new_res=h_resource.get(o_resource);
		fromObject(o_resource)
		{
			
			for (var o_PlannedHour in "opxALLOCATION" where  o_PlannedHour.COST_ACCOUNT.NAME == s_cost_account && o_PlannedHour.PROJET.getinternalvalue("STATE").ToString()=="ACTIVE" 
			&& o_PlannedHour.RES == o_resource && o_PlannedHour.FD instanceof date)
			{
				var n_diff = 0;
				n_diff= d_limit_date.getTime() - o_PlannedHour.FD.getTime();
				if(n_diff<=0)
				{
					n_compteur++;
				}
			}

			WithMonitoring (n_compteur) 
			{
				for (var o_PlannedHour in "opxALLOCATION" where  o_PlannedHour.COST_ACCOUNT.NAME == s_cost_account && o_PlannedHour.PROJET.getinternalvalue("STATE").ToString()=="ACTIVE" 
				&& o_PlannedHour.RES == o_resource && o_PlannedHour.FD instanceof date) 
				{
					
					var n_diff = 0;
					n_diff= d_limit_date.getTime() - o_PlannedHour.FD.getTime();
					if(n_diff<=0)
					{					
						writetolog("modification of allocation " + o_PlannedHour.onb );
						o_PlannedHour.res = o_new_res;
						 o_PlannedHour._RM_AA_S_PL_HRS_COMMENT = "data_recovery";
						i++;
					}
						s_monitor.Monitor(n_compteur);
				}
			}
		}
	}
	alert("END OF DATA RECOVERY : " +i +" Planned Hours upated (Change resource "+s_cost_account+")");
	writetolog("END of data recovery on Planned Hours(Change resource "+s_cost_account+")");
}

function sp_js_res_PH_equation_override_GCD()
{
	var v_resource= new vector();
	v_resource.push(opxResource.get("CLIN-DOC-RM"));
	v_resource.push(opxResource.get("CLIN-DOC-CDC"));
	v_resource.push(opxResource.get("CLIN-MW-EDS"));
	v_resource.push(opxResource.get("CLIN-MW-MWR"));
	v_resource.push(opxResource.get("CLIN-MW-TRA"));
	
	var h_resource= new hashtable();
	h_resource.set(opxResource.get("CLIN-DOC-RM"),opxResource.get("CLIN-GCD-RM"));
	h_resource.set(opxResource.get("CLIN-DOC-CDC"),opxResource.get("CLIN-GCD-CDC"));
	h_resource.set(opxResource.get("CLIN-MW-EDS"),opxResource.get("CLIN-GCD-EDS"));
	h_resource.set(opxResource.get("CLIN-MW-MWR"),opxResource.get("CLIN-GCD-MWR"));
	h_resource.set(opxResource.get("CLIN-MW-TRA"),opxResource.get("CLIN-GCD-TRA"));
	
	var d_limit_date = new date(2020,01,01);
	
	writetolog("Start of Data Recovery for CLIN-DOC-RM,CLIN-DOC-CDC,CLIN-MW-EDS,CLIN-MW-MWR & CLIN-MW-TRA");
	sp_js_res_PH_move_equation_override(v_resource,d_limit_date);
	sp_js_res_PH_upd_res_move_by_cost_account(h_resource,d_limit_date,"FTE_ESTIMATED");
	sp_js_res_PH_upd_res_move_by_cost_account(h_resource,d_limit_date,"FTE");
	sp_js_res_PH_upd_res_move_by_cost_account(h_resource,d_limit_date,"FTE_METRICS");
	writetolog("End of Data Recovery for CLIN-DOC-RM,CLIN-DOC-CDC,CLIN-MW-EDS,CLIN-MW-MWR & CLIN-MW-TRA");
}


function SP_RING_DKM_ACT_PLATFORM_RBS_FCT(o_resFunc,o_res)
{
    var i =0;   
                var o_ResourcePlatform = "opxresource".get(o_resFunc);
                var v_resourceDb = new vector();
                // get all resource from dkm function
                fromobject(o_ResourcePlatform)
                {
                                //get all the resources which belongs to the DKM_Function and which are at level 4
								for (var o_resourceDb in "opxresource" where o_resourceDb.NAME.search("_OLD")==false && o_resourceDb!=o_ResourcePlatform)
                                {
                                    if(o_resourceDb.level==4)
									{
										v_resourceDb.push(o_resourceDb.name);
									}
                                }
                }
                                // get split dkm platform to a list 
                                var s_list = o_res.split(",");
                                for (var s_resource in  s_list )                      
                                {
                                                var o_resource = "opxresource".get(s_resource);
                                                if(o_resource!= undefined && o_resource != "")
                                                {
                                                                
																for(var act_res in v_resourceDb where act_res==o_resource.NAME)
																{
																	i++;
																}
																
																//if dkm platform is not from dkm function,  return true 
                                                                if( i==0)
                                                                {
                                                                                                                                
																	return true;
                                                                }
																i=0;
                                                                //if dkm platform is an old resource, return true                                               
                                                                if(o_resource.NAME.search("_OLD")!=false )
                                                                {
                                                                     return true;
                                                                }

                                                                
                                                }  
                                }                                              
                
	return false; 
                                
}

SP_RING_DKM_ACT_PLATFORM_RBS_FCT.exportfunction({"STRING","STRING"}, "BOOLEAN");

function sp_js_res_PH_move_equation_override_fte(o_resource,vecActype,d_limit_date)
{

	writetolog("Data Recovery on Planned Hours (equation override)");
	writetolog("TEMPO V"+context.SP_NF_CTX_INTE_WEEK);
	var n_compteur =0;
	var i = 0;
	var s_monitor=o_resource.printattribute()+" - Modification of planned hours (equation override)";
	//var o_resourceList = new vector();
	//condition to check the  activity type and mark the equation override is true
	for (var o_PlannedHour in "opxALLOCATION" where  o_PlannedHour.COST_ACCOUNT.NAME == "FTE_METRICS" && o_PlannedHour.PROJET.getinternalvalue("STATE").ToString()=="ACTIVE" 
			&& o_PlannedHour.RES == o_resource && o_PlannedHour.FD instanceof date && ((vecActype.length == 0) || (o_PlannedHour.activity instanceof opxActivity && vecActype.position(o_PlannedHour.activity.WBS_TYPE) instanceof Number)))
			{
					var n_diff = 0;
					n_diff= d_limit_date.getTime() - o_PlannedHour.FD.getTime();
					if(n_diff>0)
					{	
						n_compteur++;
					}
			}

			WithMonitoring (n_compteur) 
			{
				for (var o_PlannedHour in "opxALLOCATION" where  o_PlannedHour.COST_ACCOUNT.NAME == "FTE_METRICS" && o_PlannedHour.PROJET.getinternalvalue("STATE").ToString()=="ACTIVE" 
				&& o_PlannedHour.RES == o_resource && o_PlannedHour.FD instanceof date && ((vecActype.length == 0) || (o_PlannedHour.activity instanceof opxActivity && vecActype.position(o_PlannedHour.activity.WBS_TYPE) instanceof Number)))
				{
					var n_diff = 0;
					n_diff= d_limit_date.getTime() - o_PlannedHour.FD.getTime();
					if(n_diff>0)
					{				
						writetolog("modification of allocation " + o_PlannedHour.onb );
						
						withoutlocking { 
						 withoutalerts { 
						 o_PlannedHour.EQUATION_OVERRIDE = true;
						}
						}
											
						i++;
					}
					s_monitor.Monitor(n_compteur);
				}
			}
			
	alert(o_resource.printattribute()+" : " +i +" Planned Hours updated (equation override)");

	writetolog("END of data recovery on Planned Hours (equation override)");

}

function sp_js_res_PH_delete_fte(o_resource,vecActype,s_limit_type,d_limit_date,s_cost_account)
{

	writetolog("Data Recovery on Planned Hours (deletion of "+s_cost_account+")");
	writetolog("TEMPO V"+context.SP_NF_CTX_INTE_WEEK);
	var n_compteur =0;
	var i = 0;
	var s_monitor=o_resource.printattribute()+" - Deletion of planned hours "+s_cost_account;
	//var o_resourceList = new vector();
	//condition to check the  activity type and mark the equation override is true
	for (var o_PlannedHour in "opxALLOCATION" where  o_PlannedHour.COST_ACCOUNT.NAME == s_cost_account && o_PlannedHour.PROJET.getinternalvalue("STATE").ToString()=="ACTIVE" 
			&& o_PlannedHour.RES == o_resource && o_PlannedHour.FD instanceof date && ((vecActype.length == 0) || (o_PlannedHour.activity instanceof opxActivity && vecActype.position(o_PlannedHour.activity.WBS_TYPE) instanceof Number)))
			{
					var n_diff = (s_limit_type == "Higher") ? d_limit_date.getTime() - o_PlannedHour.FD.getTime() :  o_PlannedHour.FD.getTime() - d_limit_date.getTime();
					if(n_diff<0)
					{	
						n_compteur++;
					}
			}

			WithMonitoring (n_compteur) 
			{
				for (var o_PlannedHour in "opxALLOCATION" where  o_PlannedHour.COST_ACCOUNT.NAME == s_cost_account && o_PlannedHour.PROJET.getinternalvalue("STATE").ToString()=="ACTIVE" 
				&& o_PlannedHour.RES == o_resource && o_PlannedHour.FD instanceof date && ((vecActype.length == 0) || (o_PlannedHour.activity instanceof opxActivity && vecActype.position(o_PlannedHour.activity.WBS_TYPE) instanceof Number)))
				{
					var n_diff = (s_limit_type == "Higher") ? d_limit_date.getTime() - o_PlannedHour.FD.getTime() :  o_PlannedHour.FD.getTime() - d_limit_date.getTime();
					if(n_diff<0)
					{				
						writetolog("Deletion of allocation " + o_PlannedHour.onb );
						
						withoutlocking { 
						 withoutalerts { 
						 o_PlannedHour.delete();
						 }
						 }
											
						i++;
					}
					s_monitor.Monitor(n_compteur);
				}
			}
			
	alert(o_resource.printattribute()+" : " +i +" Planned Hours "+s_cost_account+" deleted");

	writetolog("END of data recovery on Planned Hours (deletion of "+s_cost_account+")");

}

function sp_js_res_PH_equation_override_GCD_FTE()
{
	alert("START OF DATA RECOVERY");
	writetolog("Start of Data Recovery for CLIN-GRTM-RTM,CLIN-GCD-MWR,CLIN-GCD-EDS,CLIN-GRTM-LCRA");
	//Data recovery for resource CLIN-GRTM-RTM
	writetolog("Start of Data Recovery for CLIN-GRTM-RTM"); 
	var o_resource=opxResource.get("CLIN-GRTM-RTM");
	var vecActype = new vector();
	var d_limit_date = context.SP_GS_D_FTE_METRIC_DATE;
	vecActype.push(opxWBS_TYPE.get("S_CONC"));
	vecActype.push(opxWBS_TYPE.get("S_PRCOND"));
	vecActype.push(opxWBS_TYPE.get("S_PREP"));
	sp_js_res_PH_move_equation_override_fte(o_resource,vecActype,d_limit_date);
	sp_js_res_PH_delete_fte(o_resource,vecActype,"Higher",d_limit_date,"FTE_METRICS");
	//Data recovery for resource CLIN-GCD-MWR
	writetolog("Start of Data Recovery for CLIN-GCD-MWR"); 
	vecActype.clear();
	var o_resource=opxResource.get("CLIN-GCD-MWR");
	vecActype.push(opxWBS_TYPE.get("S_PROT"));
	vecActype.push(opxWBS_TYPE.get("S_PRREPW"));
	sp_js_res_PH_move_equation_override_fte(o_resource,vecActype,d_limit_date);
	sp_js_res_PH_delete_fte(o_resource,vecActype,"Higher",d_limit_date,"FTE_METRICS");	
	//Data recovery for resource CLIN-GCD-EDS
	writetolog("Start of Data Recovery for CLIN-GCD-EDS");
	o_resource=opxResource.get("CLIN-GCD-EDS");
	vecActype.clear();
	vecActype.push(opxWBS_TYPE.get("IBRO-PROD"));
	vecActype.push(opxWBS_TYPE.get("IBRO-UPD"));
	sp_js_res_PH_move_equation_override_fte(o_resource,vecActype,d_limit_date);
	sp_js_res_PH_delete_fte(o_resource,vecActype,"Higher",d_limit_date,"FTE_ESTIMATED");
	sp_js_res_PH_delete_fte(o_resource,vecActype,"Higher",d_limit_date,"FTE_METRICS");
	//Data recovery for resource CLIN-GRTM-LCRA
	writetolog("Start of Data Recovery for CLIN-GRTM-LCRA");
	o_resource=opxResource.get("CLIN-GRTM-LCRA");
	vecActype.clear();
	sp_js_res_PH_move_equation_override_fte(o_resource,vecActype,d_limit_date); 
	sp_js_res_PH_delete_fte(o_resource,vecActype,"Higher",d_limit_date,"FTE_ESTIMATED");
	sp_js_res_PH_delete_fte(o_resource,vecActype,"Higher",d_limit_date,"FTE_METRICS");
	sp_js_res_PH_delete_fte(o_resource,vecActype,"Higher",d_limit_date,"FTE");
	writetolog("End of Data Recovery for CLIN-GRTM-RTM,CLIN-GCD-MWR,CLIN-GCD-EDS,CLIN-GRTM-LCRA");
	alert("END OF DATA RECOVERY");
}

function sp_js_res_PH_equation_override_GRTM_LCRA()
{	
	writetolog("Start of Data Recovery for CLIN-GRTM-LCRA");
	var o_resource=opxResource.get("CLIN-GRTM-LCRA");
	var vecActype = new vector();
	var d_limit_date = new date();
	sp_js_res_PH_move_equation_override_fte(o_resource,vecActype,d_limit_date); 
	sp_js_res_PH_delete_fte(o_resource,vecActype,"Higher",d_limit_date,"FTE_ESTIMATED");
	sp_js_res_PH_delete_fte(o_resource,vecActype,"Higher",d_limit_date,"FTE_METRICS");
	sp_js_res_PH_delete_fte(o_resource,vecActype,"Higher",d_limit_date,"FTE");
	writetolog("End of Data Recovery for CLIN-GRTM-LCRA");
	alert("END OF DATA RECOVERY");
}

function Data_Recovery(ResCond,ProjCond,WpCond,Fname,ToDelete)
{
	
	var diroutput = Context.CallStringFormula("$TEMPORARY_FILES_DIRECTORY");
	//output is stored at /software/plw/v6.2.1/DEV7/tmp/plw/
	
	var filename="";
	if (Fname=="" || Fname==undefined)
	{
	filename="Data_Recovery_Actuals.csv";
	}
	else
	{
		filename="Data_Recovery_Actuals_"+Fname+".csv";
		
	}
	var filepath = new PathName(diroutput+"/"+filename); 
	var file = new fileOutputStream(filepath,"OVERWRITE");
	file.writeln("Resource;Portfolio;Project Name;Project State;Activity Description;Activity Type;Activity Onb;Department;Platform;Profile;Resource Site;Activity Site;Hours;Start Date;Finish Date;Cost Account;Actual Onb");
	
	var vectwp=new vector();
	var totalvect=new vector();
	var closedvect=new vector();
	var n_monitoring=0;
	
	//Initialising the arguements to True if no value is parsed
	
	if (ResCond=="" || ResCond==undefined)
	{
		ResCond="true";
		
	}
	
	if (ProjCond=="" || ProjCond==undefined)
	{
		ProjCond="true";
		
	}
	
	if (WpCond=="" || WpCond==undefined)
	{
		WpCond="true";
		
	}
	
	
	
	for (var res in "opxResource" where res.callbooleanformula(ResCond))
	{
		
		fromObject(res)
		{	
		
			
		for (var wp in "opxwork_performed" where wp.project instanceof opxProject && wp.project.callbooleanformula(ProjCond) && wp.callbooleanformula(WpCond))
		{
			vectwp.push(wp);
			totalvect.push(wp.project.onb);
			
			n_monitoring++;
			
		}
		

		}
		
	}
	
	
	
	
	withmonitoring(n_monitoring)
	{
		for (var wp in vectwp)
		{
			file.writeln(wp.res.name+";"+wp.SP_NF_S_REP_PORT_MAIN+";"+wp.project.name+";"+wp.project.state+";"+wp.SP_NF_S_AH_ACT_DESC+";"+wp.SP_NF_S_ACT_TYPE+";"+wp.Activity.onb+";"+wp.SP_NF_CL_DEPARTMENT_AH+";"+wp.SP_NF_RES_PLATFORM_DESC+";"+wp.SP_NF_S_PROFILE+";"+wp.SP_NF_S_AH_CL_Resource_Site+";"+wp.SP_AA_S_ACT_SITE+";"+wp.Total_load+";"+wp.SD+";"+wp.ED+";"+wp.Cost_Account.name+";"+wp.onb);
			
			if (ToDelete=="Yes")
			{
			withoutlocking
			{
				withoutalerts
				{
					wp.delete();
					
				}
				
			}
		}
			
			writetolog("Data Recovery Actuals Performed for "+wp.Project.Name+" and Work Performed "+wp.onb+" for the resource "+wp.res.name);

			"DR Processing...".monitor(n_monitoring,1,1);
		}
		
	}
	
	totalvect=totalvect.removeduplicates();
		
		alert("Data Recovery Completed !!");
		alert("Total Number of Projects: "+totalvect.length);
		alert("Total Work performed Records: "+vectwp.length);
		if (ToDelete=="Yes")
		{
			alert("Records are deleted");
		}
		else
		{
			alert("Records are not deleted. Please pass the last arguement as Yes to delete the records");
		}
		
		
	 file.close();
	 "(defun tempo-dr-send-csv-file (localname servername) (INTRANET::SEND-FILE-TO-CLIENT localname servername :TYPE :EXCEL-FILE :PREFERRED-METHOD :DOWNLOAD-AND-EXECUTE))".lispeval();
                               lispcall "tempo-dr-send-csv-file" (filename, filepath);
	 
	
}

function Data_Recovery_Project(ProjCond,WpCond,ToDelete)
{
	
	var diroutput = Context.CallStringFormula("$TEMPORARY_FILES_DIRECTORY");
	//output is stored at /software/plw/v6.2.1/DEV6/tmp/plw/
	var filename="Data_Recovery_Actuals_Project.csv";
	var filepath = new PathName(diroutput+"/"+filename); 
	var file = new fileOutputStream(filepath,"OVERWRITE");
	
	file.writeln("Resource;Portfolio;Project Name;Project State;Activity Description;Activity Type;Activity Onb;Department;Platform;Profile;Resource Site;Activity Site;Hours;Start Date;Finish Date;Cost Account;Actual Onb");
	
	var vectwp=new vector();
	var totalvect=new vector();
	var n_monitoring=0;
	
	//Initialising the arguements to True if no value is parsed
	
	if (ProjCond=="" || ProjCond==undefined)
	{
		ProjCond="true";
	}
	
	if (WpCond=="" || WpCond==undefined)
	{
		WpCond="true";
		
	}
					
	for (var proj in "opxProject" where proj.callbooleanformula(ProjCond))
	{
		fromObject(proj)
		{	
			for (var wp in "opxwork_performed" where wp.callbooleanformula(WpCond))
			{
				
				n_monitoring++;
				vectwp.push(wp);
				totalvect.push(wp.project.onb);
			}
		}
	}
				
	withmonitoring(n_monitoring)
	{
		for (var wp in vectwp)
		{
			file.writeln(wp.res.name+";"+wp.SP_NF_S_REP_PORT_MAIN+";"+wp.project.name+";"+wp.project.state+";"+wp.SP_NF_S_AH_ACT_DESC+";"+wp.SP_NF_S_ACT_TYPE+";"+wp.Activity.onb+";"+wp.SP_NF_CL_DEPARTMENT_AH+";"+wp.SP_NF_RES_PLATFORM_DESC+";"+wp.SP_NF_S_PROFILE+";"+wp.SP_NF_S_AH_CL_Resource_Site+";"+wp.SP_AA_S_ACT_SITE+";"+wp.Total_load+";"+wp.SD+";"+wp.ED+";"+wp.Cost_Account.name+";"+wp.onb);
			
			if (ToDelete=="Yes")
			{
			withoutlocking
			{
				withoutalerts
				{
					wp.delete();
					
				}
				
			}
		}
			
			writetolog("Data Recovery Actuals Performed for "+wp.Project.Name+" and Work Performed "+wp.onb+" for the resource "+wp.res.name);

			"DR Processing...".monitor(n_monitoring,1,1);
		}
		
	}
	
	totalvect=totalvect.removeduplicates();
		
	alert("Data Recovery Completed !!");
	alert("Total Number of Projects: "+totalvect.length);
	alert("Total Records: "+vectwp.length);
	if (ToDelete=="Yes")
		{
			alert("Records are deleted");
		}
		else
		{
			alert("Records are not deleted. Please pass the last arguement as Yes to delete the records");
		}
		
	file.close();
	"(defun tempo-dr-send-csv-file (localname servername) (INTRANET::SEND-FILE-TO-CLIENT localname servername :TYPE :EXCEL-FILE :PREFERRED-METHOD :DOWNLOAD-AND-EXECUTE))".lispeval();
                               lispcall "tempo-dr-send-csv-file" (filename, filepath);



}


writetolog("Script SP_JS_DR_V6 loaded with version ~a ", revision_number);

//	
//  HISTORY :
//
var revision_number ="1.30";
//
// Revision 1.30  2020/07/22 - SSK
// Creation of functions Data_Recovery and  Data_Recovery_Project
//
//
// 
// Revision 1.29  2020/06/10 - ASP
// Creation o of function sp_js_res_PH_equation_override_GRTM_LCRA
//
//
// 
// Revision 1.28  2020/06/10 - MBL
// Update of function of function sp_js_res_PH_equation_override_GCD_FTE and creation of sp_js_res_PH_delete_fte
//
// Revision 1.27  2020/05/28 - KSH
// creation of function of function sp_js_res_PH_equation_override_GCD_FTE and sp_js_res_PH_move_equation_override_fte
//
//	Revision 1.26  2020/02/20 - ASP
//  creation of function of function sp_js_res_PH_move_equation_override,sp_js_res_PH_upd_res_move_by_cost_account and sp_js_res_PH_equation_override_GCD .
//
//
//	Revision 1.25  2019/11/28 - 2ckeita
//  modification of function sp_js_rdd_PH_upd_res_by_cost_account .
//
//
//
//  Revision 1.24  2019/10/24 G Sivanagapavan
//  RITM1265091 creation of function  SP_JS_DKM_FUNCTION_PLATFORM_UPD
//  RITM1265091 creation of function  SP_RING_DKM_ACT_PLATFORM_RBS_FCT
//
//	Revision 1.23  2019/05/29 ckeita
//  creation of function sp_js_rdd_PH_equation_override and sp_js_rdd_PH_upd_res_fte_estimated which will update the planned hours based on given date and resource.
//	For Resource & Date specific function sp_js_rdd_PH_equation_override_CDL & sp_js_rdd_PH_equation_override_GBS created.
//
//	Revision 1.22  2019/05/29 mblaise
//  ITS-INC2661340 Modification of sp_js_rdd_clean_multi_lang_activity_desc to change multilingual detection condition and add monitoring
//
//	Revision 1.21  2019/05/28 mblaise
//  ITS-INC2264257  Modification of sp_js_rdd_related_pkm to use SP_NF_B_ELIGIBLE_REL_PKM
//
//	Revision 1.20  2019/05/23 mblaise
//  ITS-INC2520796  modification of sp_js_rdd_recovery_RA_metric_PH to  add monitoring
//
//	Revision 1.19  2019/05/03 mblaise
//  ITS-INC2520796  Creation of sp_js_rdd_recovery_RA_metric_PH to link planned hours to its creator metric (its comment is equal to creator metric name)
//
//	Revision 1.18  2019/04/24 mblaise
//  ITS-INC2264257  Creation of sp_js_rdd_related_pkm to change the format of the field "related PKM" (PKMdesc -> PKMname_PKMdesc)
//
//	Revision 1.17  2019/02/21 mblaise
//  ITS-INC2140296  Creation of sp_js_rdd_clean_multi_lang_activity_desc to transform activities multilanguage Description in monolanguage
//
//	Revision 1.16  2018/05/23 lfavre
//  ITS-INC0865825  Creation of sp_res_managers_missing_groups to get the list of mandatory groups missing for field MANAGERS on resources
//                  Creation of function sp_rdd_res_managers to correct MANAGERS field values on resources
//
//	Revision 1.15  2018/01/16 flecanut
//	Modification of sp_tempo_v1_data_recovery : call to sp_js_rdd_rights_reset

//	Revision 1.14  2018/01/10 flecanut
//	Modification of sp_res_rdd_managers : modify the order of data recovery
//  Modification of sp_dr_init_v6_processes_parameters to set the right value for _WT_AA_N_OC_DEF_SYM_TSK and _WT_AA_N_OC_DEF_SYM_MIL
//  Modification of sp_js_rdd_project_rights to add project templates
//
//	Revision 1.13  2018/01/05 flecanut
//	Modification of sp_dr_init_v6_processes_parameters
//		Init default shapes for Gantt representation
//
//	Revision 1.12  2017/12/13 YSA
//	Corrections on functions
//  sp_tempo_v1_data_recovery : CallMacro loading project
//  sp_all_data_rec_fte_allocations: Adding
//
//	Revision 1.11  2017/12/08 flecanut
//	Corrections on functions
//		sp_tempo_v1_data_recovery : loading unopened projects
//		sp_import_user_groups_list : import only in super user mode
//		sp_dr_init_v6_processes_parameters : disable hour cost unit creation
//		sp_export_user_groups_list : do not export template user
//	Revision 1.11  2017/12/06 bcordel
//	adding g_adm and g_RBS to sp_res_rdd_managers
//
//	Revision 1.10  2017/11/27 flecanut
//	Corrections on sp_js_dr_gci_info
//
//	Revision 1.9  2017/11/23 flecanut
//	Add sp_js_dr_gci_info
//	Revision 1.9 2017/11/23 mrochas
//	function sp_js_read_acces_team_members : set of SP_DYN_TEAM_MEMBERS
//	function sp_dr_init_v6_processes_parameters : var vGA = OpxSPAS_PT_GEOGRAPHIC_AREA.get("France"); remplac  par var vGA = "OpxSPAS_PT_GEOGRAPHIC_AREA".get("France");
//
//	Revision 1.8  2017/11/11 flecanut
//	Add sp_dr_res_timecard_offenders_alert
//	Add sp_init_gs_metrics to sp_tempo_v1_data_recovery
//  
//	Revision 1.7  2017/11/11 flecanut
//	Modifying all datarecovery functions to normalize input/output
//  
//	Revision 1.6  2017/10/26 bcordel
//	adding sp_js_read_acces_team_members for team member read only access on projects
//	Modifying sp_tempo_v1_data_recovery to add sp_js_read_acces_team_members
//
//	Revision 1.5  2017/10/17 ahasni
//	added of sp_js_rdd_project_geo_area to include data recovery for geo areas
//
//	Revision 1.4  2017/09/27 flecanut
//	modification of sp_res_rdd_managers to include data recovery on controller only
//
//	Revision 1.3  2017/09/11 flecanut
//	adding sp_dr_init_default_groups
//  modification of sp_wpm_reset_delegate_to_on_all_project
//
//	Revision 1.2  2017/09/11 flecanut
//	adding sp_import_user_groups_list
//
//	Revision 1.1  2017/08/07 bcordel
//	adding _pex_js_gaugeTypeInitialization
//
//	Revision 1.0  ahasni
//	creation

// Global function for data recovery
function sp_tempo_v1_data_recovery()
{
	writetolog("Start global data recovery using 'sp_tempo_v1_data_recovery' function");
	writetolog("TEMPO V"+context.SP_NF_CTX_INTE_WEEK);
	withoutlocking{
		
		// Creation of data recovery directories
		var input_pathname = "/compassv6/data_recovery/input";
		var dir = mkdir(input_pathname);
		if (dir instanceof Boolean && dir)
		{
			writetolog("sp_tempo_v1_data_recovery : directory ~a has been created".format(input_pathname));
		}
		var output_pathname = "/compassv6/data_recovery/output";
		var dir = mkdir(output_pathname);
		if (dir instanceof Boolean && dir)
		{
			writetolog("sp_tempo_v1_data_recovery : directory ~a has been created".format(output_pathname));
		}
		
		writetolog("sp_tempo_v1_data_recovery : start loading ACTIVE projects");
		context.CallMacro("SP_MA_OPEN_PROJECT_REC");
		/*
		for (var vProject in opxProject where vProject.STATE=="Active" && !vProject.open)
		{
			vProject.open();
		}
		*/
		writetolog("sp_tempo_v1_data_recovery : end of loading ACTIVE projects");
		
		// Data recovery
		
		writetolog("sp_tempo_v1_data_recovery : call to sp_dr_init_v6_processes_parameters");
		sp_dr_init_v6_processes_parameters();
		writetolog("sp_tempo_v1_data_recovery : call to sp_js_rdd_project_rights");
		sp_js_rdd_project_rights();
		writetolog("sp_tempo_v1_data_recovery : call to sp_js_set_portfolios");
		sp_js_set_portfolios();
		writetolog("sp_tempo_v1_data_recovery : call to sp_wpm_reset_delegate_to_on_all_project");
		sp_wpm_reset_delegate_to_on_all_project();
		writetolog("sp_tempo_v1_data_recovery : call to sp_js_rdd_resource_manager");
		sp_js_rdd_resource_manager();
		writetolog("sp_tempo_v1_data_recovery : call to sp_res_rdd_managers");
		sp_res_rdd_managers();
		writetolog("sp_tempo_v1_data_recovery : call to sp_dr_res_timecard_offenders_alert");
		sp_dr_res_timecard_offenders_alert()
		writetolog("sp_tempo_v1_data_recovery : call to sp_js_read_acces_team_members");
		sp_js_read_acces_team_members();
		writetolog("sp_tempo_v1_data_recovery : call to sp_js_rdd_project_geo_area");
		sp_js_rdd_project_geo_area();
		writetolog("sp_tempo_v1_data_recovery : call to sp_brd_init_platform");
		sp_brd_init_platform();
		writetolog("sp_tempo_v1_data_recovery : call to sp_import_cl_country_ravl_zone_europe");
		sp_import_cl_country_ravl_zone_europe();
		writetolog("sp_tempo_v1_data_recovery : call to ravl_recovery_main");
		ravl_recovery_main();
		writetolog("sp_tempo_v1_data_recovery : call to sp_clinical_data_recovery");
		sp_clinical_data_recovery();
		writetolog("sp_tempo_v1_data_recovery : call to sp_js_data_rec_clinical_cost");
		sp_js_data_rec_clinical_cost(); 
		writetolog("sp_tempo_v1_data_recovery : call to sp_clinical_set_code");
		sp_clinical_set_code();
		writetolog("sp_tempo_v1_data_recovery : call to sp_js_dr_gci_info");
		sp_js_dr_gci_info();
		writetolog("sp_tempo_v1_data_recovery : call to sp_clinical_adm_deleted");
		sp_clinical_adm_deleted();
		writetolog("sp_tempo_v1_data_recovery : call to sp_import_user_groups_list");
		sp_import_user_groups_list(true);
		writetolog("sp_tempo_v1_data_recovery : call to sp_init_gs_metrics");
		sp_init_gs_metrics();
		writetolog("sp_tempo_v1_data_recovery : call to sp_all_data_rec_fte_allocations");
		sp_all_data_rec_fte_allocations();
		writetolog("sp_tempo_v1_data_recovery : call to sp_js_rdd_rights_reset");
		sp_js_rdd_rights_reset();
	}
	writetolog("End of global data recovery using 'sp_tempo_v1_data_recovery' function");
	return false;
}
sp_tempo_v1_data_recovery.exportfunction("","BOOLEAN","Data recovery for TEMPO V1.0");

// Function for data recovery of delegation
function sp_wpm_reset_delegate_to_on_all_project()
{
	writetolog("Start data recovery for automatic delegation using 'sp_wpm_reset_delegate_to_on_all_project' function");
	
	var count = 0;
	for(var vProject in opxProject where vProject.open && vProject.STATE=="Active")
	{
		count++;
	}
	
	withmonitoring(count)
	{
		
		for(var vProject in opxProject where vProject.open && vProject.STATE=="Active")
		{
			writetolog("sp_wpm_reset_delegate_to_on_all_project : update project "+vProject.NAME);
			vProject.sp_wpm_set_delegate_to();
		}
		"Set workpackage manager delegation on projects...".monitor(count,1,1);
	}
	
	writetolog("End of data recovery for automatic delegation using 'sp_wpm_reset_delegate_to_on_all_project' function");
}


// Function to add "Under evaluation" Availability Type
function sp_dr_init_v6_processes_parameters()
{
	writetolog("Start data recovery for processes parameters using 'sp_dr_init_v6_processes_parameters' function");
	withoutlocking
	{
		// Add "Under evaluation" Availability Type
		var vAT = OpxAvailabilityType.get("Under evaluation");
		if(vAT == undefined)
		{
			writetolog("sp_dr_init_v6_processes_parameters : creation of 'Under evaluation' Availability Type");
			new OpxAvailabilityType("Name","Under evaluation","File","COM_XBS");
		}
		
		// Add "France" Greographic Area
		var vGA = "OpxSPAS_PT_GEOGRAPHIC_AREA".get("France");
		if(vGA == undefined)
		{
			writetolog("sp_dr_init_v6_processes_parameters : creation of 'France' Greographic Area");
			new OpxSPAS_PT_GEOGRAPHIC_AREA("Name","France","File","COM_XBS");
		}
		
		// Disable _RM_WF_RES_MANAGER workflow
		writetolog("sp_dr_init_v6_processes_parameters : Disable _RM_WF_RES_MANAGER workflow");
		var vWorkflow = "opxWorkflow".get("_RM_WF_RES_MANAGER");
		vWorkflow.FILTER="false";
		
		// Set default files
		writetolog("sp_dr_init_v6_processes_parameters : det default files for OBS, RESOURCE, COST_ACCOUNT");
		context.OBS_DEFAULT_FILE = "COM_OBS";
		context.RESOURCES_DEFAULT_FILE = "COM_RBS";
		context.COST_ACCOUNT_DEFAULT_FILE = "COM_CBS";
		
		// Add "hour" Cost Unit
		// var vCU = "OpxCostUnit".get("Hours");
		// if(vCU == undefined)
		// {
			// writetolog("sp_dr_init_v6_processes_parameters : creation of 'Hours' Cost Unit");
			// var ArgList = new vector("NAME", "Hours", "UNIT", "Days", "DESC", get_text_key_message_string("hour.plural"), "?MONETARY_UNIT", true, "VALUE", 0.125);
			// var o_CostUnit = "OpxCostUnit".makeopx2objectwithplist(Arglist);
		// }
		
		// Set parameter for email sending
		writetolog("sp_dr_init_v6_processes_parameters : set parameter for email sending");
		var DatabaseString = context.CallStringFormula("$DATABASE_NAME").ToUpperCase();
		if(DatabaseString.search("PROD")!=false || DatabaseString.search("UAT")!=false || DatabaseString.search("TRA")!=false)
		{
			context.SP_GS_B_ENABLE_MAIL_ALERTS = true;
		} else {
			context.SP_GS_B_ENABLE_MAIL_ALERTS = false;
		}
		
		// Settings for access rights data recovery on projects settings and OBS
		writetolog("sp_dr_init_v6_processes_parameters : set parameters for data recovery on projects and OBS");
		
		context.SP_GS_S_PRJ_DEFAULT_WRITE_GROUPS = "G_ADM,G_PORTADM,G_PMHEADS,G_FP,G_RBM,G_RPPM";
		context.SP_GS_S_PRJ_DEFAULT_READ_GROUPS = "G_RBS,G_TC,G_TTA";
		
		var vOBSClin = opxOBSElement.get("R&D - CLIN");
		if(vOBSClin != undefined)
		{
			vOBSClin.SP_AA_S_WPM_PRJ_DEFAULT_GROUPS = "G_CLINSU,G_CLINPTH,G_OSM,G_FIN";
			vOBSClin.SP_AA_S_WPM_PRJ_DEFAULT_USERS = "G_CPM,G_COPM";
			vOBSClin.SP_AA_S_PRJ_DEFAULT_READ_GR = "G_CLINCO";
		}
		
		var vOBSBRD = opxOBSElement.get("R&D - BRD");
		if(vOBSBRD != undefined)
		{
			vOBSBRD.SP_AA_S_WPM_PRJ_DEFAULT_GROUPS = "G_BRDPTH";
		}
		
		// Init default shapes for Gantt representation
		context._WT_AA_N_OC_DEF_SYM_MIL="3";
		context._WT_AA_N_OC_DEF_SYM_WBS="0";
		context._WT_AA_N_OC_DEF_SYM_TSK="1";
	}
	writetolog("End of data recovery for processes parameters using 'sp_dr_init_v6_processes_parameters' function");
}

// Function used to export user in group definition prior to User DPM restauration
function sp_export_user_groups_list()
{
	var vFileName="sp_user_list.csv";
	var filepath = new PathName("/compassv6/data_recovery/input/"+vFileName);
	
	if (filepath.ProbeFile() != false) 
	{
		filepath.DeleteFile();
		alert("file '"+vFileName+"' removed from server");
	}
	
	var myFile = new fileOutputStream(filepath,"overwrite");

	var vCount = 0;

	myFile.writeln("NAME;DESC;GROUPS_LIST");
	
	for (var vUser in OpxUser where vUser!=undefined && !_inf_js_is_template_user(vUser))
	{
		vCount++;
		var vLineValue = vUser.NAME+";"+vUser.DESC.trim("\"")+";"+vUser.GROUPS_LIST+"";
		myFile.writeln(vLineValue);
	}	
	myFile.close();
	
	// if (filepath.ProbeFile() != false) 
	// {
		// "(defun atos-send-csv-file (localname servername) (INTRANET::SEND-FILE-TO-CLIENT localname servername :TYPE :EXCEL-FILE :PREFERRED-METHOD :DOWNLOAD-AND-EXECUTE))".lispeval();
		// lispcall "atos-send-csv-file" (vFileName, filepath);
	// }
	var newline = Context.callStringFormula("get_char(10)");
	alert("End of export batch"+newline+vCount+" objects exported in file "+vFileName);
}

// input variable : vMode -> true for deletion of existing user in group, false for delta update
function sp_import_user_groups_list(vMode)
{
	writetolog("Start data recovery for user in groups using 'sp_import_user_groups_list' function");
	if(vMode)
	{
		writetolog("sp_import_user_groups_list : MODE = deletion of existing user in group");
	} else {
		writetolog("sp_import_user_groups_list : MODE = keep existing user in group");
	}
	
	if(context._INF_NF_B_SUPERUSER_MODE)
	{
		var vSlotLit = new vector("NAME","DESC","GROUPS_LIST");
		
		//var filepath = _Utils_chooseFileAndUploadOnServer();
		var vFileName="sp_user_list.csv";
		var filepath = new PathName("/compassv6/data_recovery/input/"+vFileName);

		var vCount = 0;
		var vCountUpdatedGroups = 0;
		
		if (filepath.probefile())
		{
			var v_inputFileStream = new FileInputStream(filepath);
			var vTotal = 0;
			for (var line = v_inputFileStream.readline(); line != undefined; line = v_inputFileStream.readline())
			{
				vTotal++;
				if (vTotal>1 && line.search(";")!=false)
				{
					var element = line.split(";");

					var vNAME = element[0];
					var vDESC = element[1];
					var vGROUPS_LIST = element[2];
					
					var vUser = OpxUser.get(vNAME.toString());
					
					if (vUser instanceof OpxUser && vUser != undefined)
					{
						vCount++;
						withoutlocking
						{
							vUser.DESC=vDESC;
							
							if(vMode)
							{
								for(var vUIG in OpxUserInGroup where vUIG.User==vUser)
								{
									vUIG.delete();
								}
							}
							
							for (var vUG in vGROUPS_LIST.parsevector())
							{
								var vUserGroup = OpxUserGroups.get(vUG.toString());
								if(vUserGroup instanceof opxUserGroups && vUserGroup != undefined)
								{
									for(var vUIG in OpxUserInGroup where vUIG.User==vUser && vUIG.Groupe==vUserGroup)
									{
										vUIG.delete();
									}
									var plist = new vector();
									plist.push("DATASET"); plist.push(opxFile.get("@@@SITE"));
									plist.push("USER-GROUP"); plist.push(vUserGroup);
									plist.push("OPX2-USER"); plist.push(vUser);
									var vUIG = OpxUserInGroup.Makeopx2objectwithplist(plist);
									if(vUIG != undefined)
									{
										vCountUpdatedGroups++;
									}
								} else {
									writetolog("sp_import_user_groups_list : user group ~a is undefined, please check EOL of input file (must be UNIX) !",vUG);
								}
							}
						}
					} else {
						writetolog("sp_import_user_groups_list : user ~a not found !",vNAME);
					}
				}
			}
			
			context.CallMacro("SAVE-DATASETS");
			
			v_inputFileStream.close();
			
			writetolog("sp_import_user_groups_list : end of data recovery for user groups : "+vCount+" user updated from file "+filepath+", "+vCountUpdatedGroups+" groups updated");
		} else {
			writetolog("sp_import_user_groups_list : file ~a does not exist on server, no import !",filepath);
		}
	} else {
		writetolog("sp_import_user_groups_list : no import, SUPER USER mode is required !");
	}
	writetolog("End of data recovery for user in groups using 'sp_import_user_groups_list' function");
}

function sp_js_rdd_files(){
	writetolog(" *** D but du traitement des droit object_types *** ");
		withoutlocking{
			for (var each in "opx_ADM_PT_DATA_CLASS"){
				each._adm_aa_s_data_rw_rights="G_ADM"
			}
		}	
		
		
		writetolog(" *** D but du traitement des droit sur les fichier commun *** ");

		// Fichier d'entr e
		var vBatchDirIn = "/compassv6/data_recovery/input"
		var InFilePath = new PathName(vBatchDirIn+"/files rights.csv");

		// D finition des variables
		var vTotal = 0;
		var vObjMaj = 0;

		//V rification que le fichier existe
		if (InFilePath.ProbeFile() != false)
		{
			// Ouverture du fichier d'entr e
			var InFile = new fileInputStream(InFilePath);
			//On parcours le fichier d'entr e
			for (var line = InFile.readline(); line != undefined; line = InFile.readline())
			{
				// on ne prend pas en compte la premi re ligne et on verifie qu'il y a bien le separateur ;
				vTotal++;
				if (vTotal>1 && line.search(";")!=false)
				{	  
					var element = line.split(";");

					var Col1 = element[0];
					var Col2 = element[1];
					var Col3 = element[2];
					var Col4 = element[3];
					
					
					var o_file = OpxFile.get(Col1)
					//alert(o_file)
					var s_write_rights = Col2;
					var s_read_rights = Col3;
					var owner = Col4;
					o_file.READ_WRITE_GROUPS =s_write_rights
					o_file.READ_ONLY_GROUPS =s_read_rights
					o_file.Owner =owner
					
					
				}
			}
			// Enregistrement des modifications
			context.CallMacro("SAVE-DATASETS");			
			
			// Fermeture des fichiers
			InFile.close();
		}	
		else writetolog("Pas de fichier d'entr e! ");

		// Bilan de l'import
		var newline=Context.callStringFormula("get_char(10)");
		//alert(newline+vObjMaj+" files modifi s"+newline+vTotal);

}
function sp_js_rdd_modules(){
	writetolog(" *** D but du traitement des droit sur les modules *** ");

		// Fichier d'entr e
		var vBatchDirIn = "/compassv6/data_recovery/input"
		var InFilePath = new PathName(vBatchDirIn+"/module rights.csv");
		
		//alert(vBatchDirIn +"   "+InFilePath)

		// D finition des variables
		var vTotal = 0;
		var vObjMaj = 0;

		//V rification que le fichier existe
		if (InFilePath.ProbeFile() != false)
		{
			// Ouverture du fichier d'entr e
			var InFile = new fileInputStream(InFilePath);
			//On parcours le fichier d'entr e
			for (var line = InFile.readline(); line != undefined; line = InFile.readline())
			{
				// on ne prend pas en compte la premi re ligne et on verifie qu'il y a bien le separateur ;
				vTotal++;
				if (vTotal>1 && line.search(";")!=false)
				{	  
					var element = line.split(";");

					var Col1 = element[0];
					var Col2 = element[1];
					
					
					var o_module = "OPX_GUI_PT_MODULES".get(Col1)
					var s_rights = Col2;
					o_module._GUI_AA_S_USER_GROUP =s_rights
					
					
				}
			}
			// Enregistrement des modifications
			context.CallMacro("SAVE-DATASETS");			
			
			// Fermeture des fichiers
			InFile.close();
		}	
		else writetolog("Pas de fichier d'entr e! ");

		// Bilan de l'import
		var newline=Context.callStringFormula("get_char(10)");
		//alert(newline+vObjMaj+" module modifi s"+newline+vTotal);


}
function sp_js_rdd_reporting(){
	writetolog(" *** D but du traitement des droit sur les reporting *** ");

		// Fichier d'entr e
		var vBatchDirIn = "/compassv6/data_recovery/input"
		var InFilePath = new PathName(vBatchDirIn+"/Reporting rights.csv");
		
		//alert(vBatchDirIn +"   "+InFilePath)

		// D finition des variables
		var vTotal = 0;
		var vObjMaj = 0;
		for (var each in "opx_SC_PT_REPORTING" ){
		each.set("_RE_AA_S_GROUP_READ","P_ADM")
		}
		//V rification que le fichier existe
		if (InFilePath.ProbeFile() != false)
		{
			// Ouverture du fichier d'entr e
			var InFile = new fileInputStream(InFilePath);
			//On parcours le fichier d'entr e
			for (var line = InFile.readline(); line != undefined; line = InFile.readline())
			{
				// on ne prend pas en compte la premi re ligne et on verifie qu'il y a bien le separateur ;
				vTotal++;
				if (vTotal>1 && line.search(";")!=false)
				{	  
					var element = line.split(";");

					var Col1 = element[0];
					var Col2 = element[1];
					
					var o_reporting = "opx_SC_PT_REPORTING".get(Col1)
					var s_rights = Col2;
					if (o_reporting !="" && o_reporting!= undefined && s_rights!=""){
						o_reporting.set("_RE_AA_S_GROUP_READ",s_rights)
					}
					
					
				}
			}
			// Enregistrement des modifications
			context.CallMacro("SAVE-DATASETS");			
			
			// Fermeture des fichiers
			InFile.close();
		}	
		else writetolog("Pas de fichier d'entr e! ");

		// Bilan de l'import
		var newline=Context.callStringFormula("get_char(10)");
		//alert(newline+vObjMaj+" reporting modifi s"+newline+vTotal);

}
function sp_js_rdd_profiles() {
	writetolog(" *** D but du traitement fonctionalit  des profiles *** ");

		// Fichier d'entr e
		var vBatchDirIn = "/compassv6/data_recovery/input"
		var InFilePath = new PathName(vBatchDirIn+"/Profiles Functions.csv");
		
		//alert(vBatchDirIn +"   "+InFilePath)

		// D finition des variables
		var vTotal = 0;
		var vObjMaj = 0;
		for (var each in "opx_GUI_PT_PRF_FEAT_MAP"){
			each.delete();
		}
		//V rification que le fichier existe
		if (InFilePath.ProbeFile() != false)
		{
			// Ouverture du fichier d'entr e
			var InFile = new fileInputStream(InFilePath);
			//On parcours le fichier d'entr e
			for (var line = InFile.readline(); line != undefined; line = InFile.readline())
			{
				// on ne prend pas en compte la premi re ligne et on verifie qu'il y a bien le separateur ;
				vTotal++;
				if (vTotal>1 && line.search(";")!=false)
				{	  
					var element = line.split(";");

					var Col1 = element[0];
					var Col2 = element[1];
					var Col3 = element[2];
					var Col4 = element[3];
					var Col5 = element[4];
					
					new opx_GUI_PT_PRF_FEAT_MAP("_GUI_RA_FEATURE",Col1,"_GUI_RA_PROFILE",Col2,"_GUI_AA_B_DISABLE",Col3,"_GUI_AA_B_ENABLE",Col4,"FILE", "GLOBALSETTINGS")

					
					
				}
			}
			// Enregistrement des modifications
			context.CallMacro("SAVE-DATASETS");			
			
			// Fermeture des fichiers
			InFile.close();
		}	
		else writetolog("Pas de fichier d'entr e! ");

		// Bilan de l'import
		var newline=Context.callStringFormula("get_char(10)");
		//alert(newline+vObjMaj+" fonctionalit  mise a jour"+newline+vTotal);
}
function sp_js_rdd_rights_reset(){
	withoutlocking{
		//sp_js_rdd_files();
		sp_js_rdd_profiles()
		sp_js_rdd_modules()
		sp_js_rdd_reporting()
		
	}
}

function sp_js_rdd_project_rights()
{
	writetolog("Start data recovery for project access rights update using 'sp_js_rdd_project_rights' function");
	
	var count = 0;
	for(var vProject in opxProject where vProject.open && vProject.STATE=="Active")
	{
		count++;
	}
	
	withmonitoring(count)
	{
		
		for(var vProject in opxProject where vProject.open && vProject.STATE=="Active")
		{
					writetolog("sp_js_rdd_project_rights : update ~a ",vProject);
			withoutlocking
			{
				vProject.sp_pm_set_default_access_rights();
			}
		}
		"Set project access rights...".monitor(count,1,1);
	}
	
	// Templates
	for(var vProject in opxProject where vProject.open && vProject.STATE=="Project template")
	{
		writetolog("sp_js_rdd_project_rights : update ~a ",vProject);
		withoutlocking
		{
			var vReadOnlyGroups = new vector();
			if(vProject.name.search("Z_CoR") || vProject.name.search("RAVL_ACTIVITY_LIBRARY"))
			{
				vReadOnlyGroups.push("G_PMRAVL");
				vReadOnlyGroups.push("G_RPPM");
			} else if (vProject.name.search("Z_RAVL")) {
				// nothing to do
			} else {
				vReadOnlyGroups.push("G_PORTADM");
				vReadOnlyGroups.push("G_PMHEADS");
				vReadOnlyGroups.push("G_FP");
				vReadOnlyGroups.push("G_RBM");
				vReadOnlyGroups.push("G_RPPM");
				vReadOnlyGroups.push("G_PM");
				vReadOnlyGroups.push("G_CPM");
				vReadOnlyGroups.push("G_COPM");
				vReadOnlyGroups.push("G_PMSL");
				vReadOnlyGroups.push("G_CLINSU");
				vReadOnlyGroups.push("G_OSM");
				vReadOnlyGroups.push("G_CLINSU");
				vReadOnlyGroups.push("G_CLINPTH");
				vReadOnlyGroups.push("G_BRDPTH");
				vReadOnlyGroups.push("G_CLINCO");
			}
			vReadOnlyGroups = vReadOnlyGroups.removeduplicates();
			vProject.READ_ONLY_GROUPS = vReadOnlyGroups.join(",");
			
			// Read/Write groups
			var vReadWriteGroups = new vector();
			vReadWriteGroups.push("G_ADM");
			for(var UserOrGroup in vProject.READ_WRITE_GROUPS.parselist()) {
				if(opxUser.get(UserOrGroup)!=undefined)
				{
					vReadWriteGroups.push(UserOrGroup);
				}
			}
			vReadWriteGroups = vReadWriteGroups.removeduplicates();
			vProject.READ_WRITE_GROUPS = vReadWriteGroups.join(",");
		}
	}
	
	writetolog("End of data recovery for project access rights update using 'sp_js_rdd_project_rights' function");
}

function sp_js_set_portfolios(){
	writetolog("Start data recovery for user portfolio initialization using 'sp_js_set_portfolios' function");
	withoutlocking{
		writetolog("sp_js_set_portfolios : deletion of existing user defined portfolios");
		for (var each in "opx_FF_PT_FAVOR_FILTERS" where each.name!="NV_PORTFOLIO_REPORTING" && each.name!="NV_PORTFOLIO_SELECTION"){
			each.delete()
		}

		var newport = new vector("GRP","BPSW","INF","KITE","CPP","NPA","NV","PPP","PPI","RAVL","PLC");

		for (var each in newport)
		{
			var id = "ALL."+each;
			var users = "G_ADM,G_BRDPTH,G_CFLCTL,G_CLINCO,G_CLINPTH,G_CLINSU,G_COPM,G_CPM,G_FIN,G_FP,G_OSM,G_PM,G_PMHEADS,G_PMRAVL,G_PMSL,G_PORTADM,G_PORTFULL,G_PORTLIM,G_PTMPL,G_RBM,G_RBS,G_RPPM,G_TC,G_TTA";
			var port = new Opx_FF_PT_FAVOR_FILTERS("NAME",each,"DESC","opxBREAKDOWN_2".get(id).DESC,_FF_RA_USER_FF,"INTRANET","FILE","PREFERENCES","_FF_AA_S_GROUP_READ",users,"_FF_AA_S_GROUP_WRITE",users,"_FF_AA_B_EXPORTED",true,"_FF_AA_T_FORMULA","BELONGS(\"BREAKDOWN_2\",\""+"opxBREAKDOWN_2".get(id).Printattribute()+"\")");
			writetolog("sp_js_set_portfolios : creation of ~a", port);
		}
	}
	writetolog("End of data recovery for user portfolio initialization using 'sp_js_set_portfolios' function");
}

function sp_js_rdd_resource_manager()
{
	writetolog("Start data recovery for Resource Manager field using 'sp_js_rdd_resource_manager' function");
	
	var vCount = 0;
	for(var vRes in "OpxResource" where vRes.RES_MANAGER.toString().search("G_RBS")==false)
	{
		vCount++;
	}
	
	var vCountUpdatedResource = 0;
	withmonitoring(vCount)
	{
		for (var vRes in "OpxResource" where vRes.RES_MANAGER.toString().search("G_RBS")==false)
		{
			var res_man = "G_RBS,"+vRes.RES_MANAGER;
			res_man = res_man.split(",");
			res_man = res_man.removeduplicates();
			res_man = res_man.join(",");
			
			if(vRes.RES_MANAGER.toString()!=res_man)
			{
				vCountUpdatedResource++;
			}
			
			withoutalerts{
			withoutlocking{
				vRes.RES_MANAGER = res_man;
			}
			}
		}
		"Update Resource Manager...".monitor(vCount,1,1);
	}
	writetolog("sp_js_rdd_resource_manager : end of data recovery. "+vCount+" Resources to update, "+vCountUpdatedResource+" resources updated");
	writetolog("End of data recovery for Resource Manager field using 'sp_js_rdd_resource_manager' function");
}

// 08.09.17 LBS 
// update MANAGERS field by added in CONTROLLER field value
function sp_res_rdd_managers()
{
	writetolog("Start data recovery for TimeCard Managers using 'sp_res_rdd_managers' function");
	
	var vCount = 0;
	for(var vRes in OpxResource where vRes.MANAGER!=undefined && vRes.MANAGERS!=undefined && vRes.CONTROLLER!=undefined && vRes.MANAGER!="" && vRes.MANAGERS!="" && vRes.CONTROLLER!="")
	{
		vCount++;
	}
	
	var vCountResModified = 0;
	withmonitoring(vCount)
	{
		for (var vRes in OpxResource){
			//
			var vVect = new vector();
			//add MANAGER value
			if(vRes.MANAGER!=undefined && vRes.MANAGER!="")
			{
				vVect.push(vRes.MANAGER.NAME);
			}
			//add default value
			vVect.push("G_ADM");
			vVect.push("G_RBS");
			//add CONTROLLER value
			if(vRes.CONTROLLER!=undefined && vRes.CONTROLLER!="")
			{
				vVect.push(vRes.CONTROLLER.NAME);
			}
			withoutlocking
			{
				vVect=vVect.removeduplicates();
				vRes.MANAGERS = vVect.join(",");//update MANAGERS field
			}
			vCountResModified++;
		}
	"Update TimeCard Managers...".monitor(vCount,1,1);
	}
	
	writetolog("sp_js_rdd_resource_manager : end of data recovery. "+vCount+" Resources to update, "+vCountResModified+" resources updated");
	writetolog("End of data recovery for TimeCard Managers using 'sp_res_rdd_managers' function");
}


function sp_js_rdd_project_geo_area()
{
	writetolog("Start data recovery for project geo area/trial using 'sp_js_rdd_project_geo_area' function");
	
	var count = 0;
	for(var vProject in opxProject where vProject.open && vProject.STATE=="Active")
	{
		count++;
	}
	
	withmonitoring(count)
	{
		
		for(var vProject in opxProject where vProject.open && vProject.STATE=="Active")
		{
			fromobject(vProject)
			{
				for (var each in "opxactivity" where each.SP_NF_CL_TRIAL){
					each.sp_js_create_geo_area()
				}
			}
		}
		"Set Geo areas/trial...".monitor(count,1,1);
	}
	
	writetolog("End of data recovery for project geo area/trial using 'sp_js_rdd_project_geo_area' function");
}

function sp_js_read_acces_team_members()
{
	writetolog("Starting data recovery to give read acces to team members and to create not rejected users as a team member of the project using 'sp_js_read_acces_team_members' function");
	var count = 0;
	//Preparing file for rejection
	var s_FileName="sp_team_member_rejection.csv";
	var o_filepath = new PathName("/compassv6/data_recovery/output/"+s_FileName);
	var o_reject_file = new fileoutputstream(o_filepath,"APPEND");
	o_reject_file.writetolog("Project;Team member;Rejection");
	
	//Creating hashtable of descriptive/user to research user by descriptive/user
	var ht_users = new hashtable ("STRING");
	for (var o_user in "OpxUser")
	{
			ht_users.set(o_user.DESC,o_user);
	}
	
	// count of the number of project for monitoring
	for(var o_Project in opxProject where o_Project.open && o_Project.STATE=="Active")
	{
		count++;
	}
	withmonitoring(count)
	{
		withoutlocking
		{
			// If the team member has no resource linked or if her resource has no manager, it is put in the rejection file. Else the manager is put in read only on the project.
			for(var o_Project in opxProject where o_Project.open && o_Project.STATE=="Active")
			{
				var v_tm_of_prj_to_create = new vector();
				writetolog(" sp_js_read_acces_team_members : updating project ~a ",o_Project.NAME);
				var v_team_members = o_Project.SP_AA_S_PJT_TEAM.split(",");
				for (var s_res_team_member in v_team_members)
				{
					var o_res_team_member= "Opxresource".get(s_res_team_member);
					if (o_res_team_member instanceof Opxresource)
					{
						if (o_res_team_member.MANAGER != "")
						{
							if (o_Project.READ_ONLY_GROUPS != "")
							{
								// Checking that the user is not already in the read only list
								if (o_Project.READ_ONLY_GROUPS.indexOf(o_res_team_member.MANAGER.printattribute()) == undefined)
								{
									o_Project.READ_ONLY_GROUPS=o_Project.READ_ONLY_GROUPS+","+o_res_team_member.MANAGER.printattribute();
									v_tm_of_prj_to_create.push(o_res_team_member.MANAGER.printattribute());
								}
							}
							else{
								o_Project.READ_ONLY_GROUPS=o_res_team_member.MANAGER.printattribute();
								v_tm_of_prj_to_create.push(o_res_team_member.MANAGER.printattribute());
							}
						}else{
							o_reject_file.writetolog(o_Project.printattribute()+";"+s_res_team_member+";No user linked to the resource");
						}
					}else{
						if (ht_users.get(s_res_team_member) instanceof Opxuser)
						{
							if (o_Project.READ_ONLY_GROUPS != "")
							{
								// Checking that the user is not already in the read only list
								if (o_Project.READ_ONLY_GROUPS.indexOf(ht_users.get(s_res_team_member).printattribute()) == undefined)
								{
									o_Project.READ_ONLY_GROUPS=o_Project.READ_ONLY_GROUPS+","+ht_users.get(s_res_team_member).printattribute();
									v_tm_of_prj_to_create.push(ht_users.get(s_res_team_member).printattribute());
								}
							}
							else{
								o_Project.READ_ONLY_GROUPS=ht_users.get(s_res_team_member).printattribute();
								v_tm_of_prj_to_create.push(ht_users.get(s_res_team_member).printattribute());
							}
						}else{
							o_reject_file.writetolog(o_Project.printattribute()+";"+s_res_team_member+";No resource or user found");
						}
					}
				}
				var s_init_val = o_Project.SP_DYN_TEAM_MEMBERS;
				o_Project.SP_DYN_TEAM_MEMBERS = v_tm_of_prj_to_create.join(",");
				writetolog("Setting SP_DYN_TEAM_MEMBERS from \""+s_init_val+"\"to \""+ v_tm_of_prj_to_create.join(",")+"\"");
			}
		}
		"Set project read access rights...".monitor(count,1,1);
	}
	o_reject_file.close();
	writetolog("End of data recovery to give read acces to team members and to create not rejected users as a team member of the project using 'sp_js_read_acces_team_members' function");
}

function sp_brd_init_platform()
{
	writetolog("Start data recovery for BRD platform using 'sp_brd_init_platform' function");
	if("OpxSP_PT_BRD_PLATFORM".findclass().numberofinstances == 0)
	{

		var data = new vector(
		"Upstream","ACC,BCESS,BCPM,EFQP,EOP,SGOPE,USPPD1,USPPO2"
		,"Downstream","ACP,BPESS,DSPPD1,DSPPO2"
		,"Formulation","ES,FPD1,FPD2,SPO2,SSM1,SSM2,TLF,VSF"
		,"Lot manufacturing","APS,APSD,APSP,BBPR,BDD,BDDSP,BDP,BDSP,BDUSP,BMD,BP,BUSP,DSL,DSLD,DSLP,FBP,FBPBPR,FBPD,FBPDP,FBPMD,FBPP,FP,FPBPR,FPD,FPDD,FPDP,FPMD,FPP,FPVI,LP1,LP2,LP3,MSL,PTCSU,SLBPR,SLMD,SLP,WSL"
		,"Regulatory","BRDAMEND,BRDAR,BRDCTD,BRDCTDA,BRDIB,BRDREG"
		,"Cross-platform","BTR,PDR1,PDR2,PTCBM,PTP,RMSQ,SPT,TLMB"
		,"Other",""
		);
		
		var platforms = new vector("Upstream"
		,"Downstream"
		,"Formulation"
		,"Lot manufacturing"
		,"Regulatory"
		,"Cross-platform"
		,"Other"
		);
		
		var plist = new vector();
		var at;
		var targetFile = "OpxCommonDataset".get("COM_WBS_TYPE");
		var obj;
		var nb = 0;
		
		for (var c in platforms where data.get(c) instanceof String)
		{
			at = data.get(c);
			plist.push("NAME"); plist.push(c);
			plist.push("SP_RING_BRD_PLATFORM_WBS_TYPE"); plist.push(at);
			plist.push("FILE"); plist.push(targetFile);

			obj = "OpxSP_PT_BRD_PLATFORM".findclass().Makeopx2objectwithplist(plist);
			plist.clear();

			if (obj instanceof OpxSP_PT_BRD_PLATFORM)
			{
			nb ++;
			writetolog("sp_brd_init_platform : "+obj.name+" created");
			}
		}
		writetolog("sp_brd_init_platform : "+nb+ " platforms have been created");
	} else {
		writetolog("No data recovery for BRD platform : table SP_PT_BRD_PLATFORM is already initialized");
	}
	writetolog("End of data recovery for BRD platform using 'sp_brd_init_platform' function");
}

function sp_import_cl_country_ravl_zone_europe()
{
	writetolog("Start data recovery for Clinical country RAVL zone / Europe update using 'sp_import_cl_country_ravl_zone_europe' function");
	// Construct hashtable
	var ht_cl_country = new hashtable("String");
	for(var vClC in "opxSP_PT_CL_COUNTRY")
	{
		if(vClC.SP_AA_S_CL_COUNTRY_CODE != "")
		{
			ht_cl_country.set(vClC.SP_AA_S_CL_COUNTRY_CODE,vClC);
		}
	}

	// var filepath = _Utils_chooseFileAndUploadOnServer();
	
	var vFileName="cl_country_ravl_zone_europe.csv";
	var filepath = new PathName("/compassv6/data_recovery/input/"+vFileName);
	
	var vCount = 0;
	
	if (filepath.probefile())
	{
		var v_inputFileStream = new FileInputStream(filepath);
		var vTotal = 0;
		for (var line = v_inputFileStream.readline(); line != undefined; line = v_inputFileStream.readline())
		{
			vTotal++;
			if (vTotal>1 && line.search(";")!=false)
			{
				var element = line.split(";");
				// Country code	Name	Description	RAVLSub AREA	File	Zone	Europe?
				var vCountryCode = element[0]; // SP_AA_S_CL_COUNTRY_CODE
				var vName = element[1];
				var vDescription = element[2];
				var vRAVLSubAREA = element[3]; // SP_RA_RAVL_SUB_AREA, table SP_PT_RAVL_GEO_AREA
				var vFile = element[4]; // FILE
				var vZone = element[5]; // SP_AA_N_RAVL_ZONE
				var vEurope = element[6]; // SP_AA_RAVL_IS_SPMSD
				
				var vObj = ht_cl_country.get(vCountryCode);
				
				if (vObj instanceof opxSP_PT_CL_COUNTRY && vObj != undefined)
				{
					withoutlocking
					{
						vCount++;
						writetolog("Clinical country "+vCountryCode+" updated");
						vObj.SP_AA_N_RAVL_ZONE = vZone;
						if(vEurope == "yes")
						{
							vObj.SP_AA_RAVL_IS_SPMSD = true;
						}
						if(vEurope == "no")
						{
							vObj.SP_AA_RAVL_IS_SPMSD = false;
						}
					}
				} else {
					writetolog("Clinical country "+vCountryCode+", Name = \""+vName+"\" not found !");
				}
			}
		}
		
		context.CallMacro("SAVE-DATASETS");
		
		v_inputFileStream.close();
		
		writetolog("sp_import_cl_country_ravl_zone_europe : "+vCount+" objects imported from file "+filepath);
		
		//filepath.DeleteFile();
		
	} else {
		writetolog("sp_import_cl_country_ravl_zone_europe : file '"+filepath+"' does not exist on server, no import !");
	}
	
	ht_cl_country.clear();
	writetolog("End of data recovery for Clinical country RAVL zone / Europe update using 'sp_import_cl_country_ravl_zone_europe' function");
}

// Data recovery for SP_PT_AT_PLATEFORM to RESOURCE
function sp_dr_res_timecard_offenders_alert()
{
	writetolog("Start data recovery for TimeCard Offenders Alert using 'sp_dr_res_timecard_offenders_alert' function");
	var sql_result = sqlselect("SP_PT_AT_PLATEFORM",new vector("NAME"),new vector("STRING"),"SP_AA_B_TCD_ACTIVE=1 and DATASET > 0");
	for (var result_entry in sql_result){
		var vRes = opxResource.get(result_entry[0]);
		if(vRes != undefined)
		{
			vRes.SP_AA_B_TCD_ACTIVE = true;
		}
	}
	
	// Truncate table 'SP_PT_AT_PLATEFORM'
	SqlwithDatabaseTransaction
	{
		var vResult = SqlExecuteImmediate("TRUNCATE TABLE SP_PT_AT_PLATEFORM");
		if (vResult)
		{
			SqlCommit();
		}
		else
		{
			Sqlrollback();
		}
	}
	writetolog("End of data recovery for TimeCard Offenders Alert using 'sp_dr_res_timecard_offenders_alert' function");
}

// Data recovery for GCI Assays. Use CLIN_TYPE_TEST and CLIN_NB_SAMPLE fields on Activity table to create GCI Info entries (link Activity / GCI Assays)
function sp_js_dr_gci_info()
{
	writetolog("Starting data recovery for GCI Info using 'sp_js_dr_gci_info' function");
	var vCountRecovered = 0;
	var vCountNotRecovered = 0;
	var vect_sql_result = new vector();
	
	for(var i=1; i<=20; i++)
	{
		var sql_result = sqlselect("TASK",new vector("ONB","SP_AT_ACT_CLIN_TYPE_TEST_"+i,"SP_AA_ACT_CLIN_NB_SAMPLE_"+padleft(i,2)),new vector("STRING","STRING","STRING"),"SP_AT_ACT_CLIN_TYPE_TEST_"+i+" is not null");
		vect_sql_result = vect_sql_result+sql_result;
		var sql_result = sqlselect("NETWORK",new vector("ONB","SP_AT_ACT_CLIN_TYPE_TEST_"+i,"SP_AA_ACT_CLIN_NB_SAMPLE_"+padleft(i,2)),new vector("STRING","STRING","STRING"),"SP_AT_ACT_CLIN_TYPE_TEST_"+i+" is not null");
		vect_sql_result = vect_sql_result+sql_result;
	}
	for (var result_entry in vect_sql_result){
		var vAct = opxActivity.get(result_entry[0].parseint("####"));
		var vClTest = "OpxSP_PT_CL_TEST".get(result_entry[1].parseint("####"));
		var vSampleNb = result_entry[2].parseint("####");
		if(vClTest != undefined)
		{
			if(vAct != undefined)
			{
				if (vSampleNb == undefined)
				{
					vSampleNb=0;
				}
				vCountRecovered++;
				var plist = new vector();
				plist.push("DATASET"); plist.push(vAct.file);
				plist.push("SP_RA_ACTIVITY"); plist.push(vAct);
				plist.push("SP_RA_TEST_TYPE"); plist.push(vClTest);
				plist.push("SP_AA_N_SAMPLE_NB"); plist.push(vSampleNb);
				var vGCIINFO = "opxSP_PT_GCI_INFO".makeopx2Objectwithplist(plist);
			} else {
				writetolog("sp_js_dr_gci_info : activity "+result_entry[0]+" not loaded, no data recovery !");
				vCountNotRecovered++;
			}
		} else {
			writetolog("sp_js_dr_gci_info : GCI Assay "+result_entry[1]+" not found !");
			vCountNotRecovered++;
		}
	}
	writetolog("sp_js_dr_gci_info : end of gci info initialization, "+vCountRecovered+" recovered activities, "+vCountNotRecovered+" unrecovered activities.");
	
	
	for(var i=1; i<=20; i++)
	{
		var sql_result = sqlselect("TASK",new vector("ONB","SP_AT_ACT_CLIN_TYPE_TEST_"+i,"SP_AA_ACT_CLIN_NB_SAMPLE_"+padleft(i,2)),new vector("STRING","STRING","STRING"),"SP_AT_ACT_CLIN_TYPE_TEST_"+i+" is not null");
		vect_sql_result = vect_sql_result+sql_result;
		var sql_result = sqlselect("NETWORK",new vector("ONB","SP_AT_ACT_CLIN_TYPE_TEST_"+i,"SP_AA_ACT_CLIN_NB_SAMPLE_"+padleft(i,2)),new vector("STRING","STRING","STRING"),"SP_AT_ACT_CLIN_TYPE_TEST_"+i+" is not null");
		vect_sql_result = vect_sql_result+sql_result;
	}
	var sql_request1 = "update TASK set SP_AA_ACT_CLIN_NB_SAMPLE_01=null, SP_AA_ACT_CLIN_NB_SAMPLE_02=null, SP_AA_ACT_CLIN_NB_SAMPLE_03=null, SP_AA_ACT_CLIN_NB_SAMPLE_04=null, SP_AA_ACT_CLIN_NB_SAMPLE_05=null, SP_AA_ACT_CLIN_NB_SAMPLE_06=null, SP_AA_ACT_CLIN_NB_SAMPLE_07=null, SP_AA_ACT_CLIN_NB_SAMPLE_08=null, SP_AA_ACT_CLIN_NB_SAMPLE_09=null, SP_AA_ACT_CLIN_NB_SAMPLE_10=null, SP_AA_ACT_CLIN_NB_SAMPLE_11=null, SP_AA_ACT_CLIN_NB_SAMPLE_12=null, SP_AA_ACT_CLIN_NB_SAMPLE_13=null, SP_AA_ACT_CLIN_NB_SAMPLE_14=null, SP_AA_ACT_CLIN_NB_SAMPLE_15=null, SP_AA_ACT_CLIN_NB_SAMPLE_16=null, SP_AA_ACT_CLIN_NB_SAMPLE_17=null, SP_AA_ACT_CLIN_NB_SAMPLE_18=null, SP_AA_ACT_CLIN_NB_SAMPLE_19=null, SP_AA_ACT_CLIN_NB_SAMPLE_20=null, SP_AT_ACT_CLIN_TYPE_TEST_1=null, SP_AT_ACT_CLIN_TYPE_TEST_2=null, SP_AT_ACT_CLIN_TYPE_TEST_3=null, SP_AT_ACT_CLIN_TYPE_TEST_4=null, SP_AT_ACT_CLIN_TYPE_TEST_5=null, SP_AT_ACT_CLIN_TYPE_TEST_6=null, SP_AT_ACT_CLIN_TYPE_TEST_7=null, SP_AT_ACT_CLIN_TYPE_TEST_8=null, SP_AT_ACT_CLIN_TYPE_TEST_9=null, SP_AT_ACT_CLIN_TYPE_TEST_10=null, SP_AT_ACT_CLIN_TYPE_TEST_11=null, SP_AT_ACT_CLIN_TYPE_TEST_12=null, SP_AT_ACT_CLIN_TYPE_TEST_13=null, SP_AT_ACT_CLIN_TYPE_TEST_14=null, SP_AT_ACT_CLIN_TYPE_TEST_15=null, SP_AT_ACT_CLIN_TYPE_TEST_16=null, SP_AT_ACT_CLIN_TYPE_TEST_17=null, SP_AT_ACT_CLIN_TYPE_TEST_18=null, SP_AT_ACT_CLIN_TYPE_TEST_19=null, SP_AT_ACT_CLIN_TYPE_TEST_20=null";
	var sql_request2 = "update NETWORK set SP_AA_ACT_CLIN_NB_SAMPLE_01=null, SP_AA_ACT_CLIN_NB_SAMPLE_02=null, SP_AA_ACT_CLIN_NB_SAMPLE_03=null, SP_AA_ACT_CLIN_NB_SAMPLE_04=null, SP_AA_ACT_CLIN_NB_SAMPLE_05=null, SP_AA_ACT_CLIN_NB_SAMPLE_06=null, SP_AA_ACT_CLIN_NB_SAMPLE_07=null, SP_AA_ACT_CLIN_NB_SAMPLE_08=null, SP_AA_ACT_CLIN_NB_SAMPLE_09=null, SP_AA_ACT_CLIN_NB_SAMPLE_10=null, SP_AA_ACT_CLIN_NB_SAMPLE_11=null, SP_AA_ACT_CLIN_NB_SAMPLE_12=null, SP_AA_ACT_CLIN_NB_SAMPLE_13=null, SP_AA_ACT_CLIN_NB_SAMPLE_14=null, SP_AA_ACT_CLIN_NB_SAMPLE_15=null, SP_AA_ACT_CLIN_NB_SAMPLE_16=null, SP_AA_ACT_CLIN_NB_SAMPLE_17=null, SP_AA_ACT_CLIN_NB_SAMPLE_18=null, SP_AA_ACT_CLIN_NB_SAMPLE_19=null, SP_AA_ACT_CLIN_NB_SAMPLE_20=null, SP_AT_ACT_CLIN_TYPE_TEST_1=null, SP_AT_ACT_CLIN_TYPE_TEST_2=null, SP_AT_ACT_CLIN_TYPE_TEST_3=null, SP_AT_ACT_CLIN_TYPE_TEST_4=null, SP_AT_ACT_CLIN_TYPE_TEST_5=null, SP_AT_ACT_CLIN_TYPE_TEST_6=null, SP_AT_ACT_CLIN_TYPE_TEST_7=null, SP_AT_ACT_CLIN_TYPE_TEST_8=null, SP_AT_ACT_CLIN_TYPE_TEST_9=null, SP_AT_ACT_CLIN_TYPE_TEST_10=null, SP_AT_ACT_CLIN_TYPE_TEST_11=null, SP_AT_ACT_CLIN_TYPE_TEST_12=null, SP_AT_ACT_CLIN_TYPE_TEST_13=null, SP_AT_ACT_CLIN_TYPE_TEST_14=null, SP_AT_ACT_CLIN_TYPE_TEST_15=null, SP_AT_ACT_CLIN_TYPE_TEST_16=null, SP_AT_ACT_CLIN_TYPE_TEST_17=null, SP_AT_ACT_CLIN_TYPE_TEST_18=null, SP_AT_ACT_CLIN_TYPE_TEST_19=null, SP_AT_ACT_CLIN_TYPE_TEST_20=null";
	SqlwithDatabasetransaction 
	{
		SQLExecuteImmediate(sql_request1);
		SQLExecuteImmediate(sql_request2);
		SqlCommit();
	}
	writetolog("End of data recovery for GCI Info using 'sp_js_dr_gci_info' function");
}

// Data Recovery for incident ITS-INC0696218 - Tempo v6: Field 'Timecard Managers' automatic update does not work properly
function sp_res_managers_missing_groups(vRes_ID)
{
	// Get the resource
	var vRes = "OpxResource".get(vRes_ID);
	// Create list of mandatory values
	var mandatory_values="";
	var vec=new vector();
	// Resource Manager
	if (vRes.MANAGER!=undefined && vRes.MANAGER!="")
	{
		vec.push(vRes.MANAGER.printattribute());
	}
	// Add "G_ADM,G_RBS"
	vec.push("G_ADM");
	vec.push("G_RBS");
	// Resource controler
	if (vRes.CONTROLLER!=undefined && vRes.CONTROLLER!="")
	{
		vec.push(vRes.CONTROLLER.printattribute());
	}
	//Convert vector to list
	mandatory_values=vec.join(",");

	// Check if some mandatory values are missing
	var missing_mandatory_values="";
	missing_mandatory_values="LIST_DIFFERENCE".call(mandatory_values,vRes.MANAGERS);
	
	return missing_mandatory_values;
}
sp_res_managers_missing_groups.exportfunction({"string"},"string");

function sp_rdd_res_managers()
{
	var count=0;
	
	for (var vRes in "OpxResource" where sp_res_managers_missing_groups(vRes.printattribute())!="")
	{		
		withoutalerts{
		
			var vec = new vector();

			// Manager must be the first item of the list
			if (vRes.MANAGER!=undefined && vRes.MANAGER!="")
			{
				vec.push(vRes.MANAGER.printattribute());
			}
			
			// Add "G_ADM,G_RBS"
			vec.push("G_ADM");
			vec.push("G_RBS");
			
			// Add Extra values
			// We get the value that were entered by user
			var input_value="";
			if (vRes.MANAGERS!=undefined && vRes.MANAGERS!="")
				input_value= vRes.MANAGERS;
			
			// We get the list of mandatory value
			var vec_to_compare=vec;
			if (vRes.CONTROLLER!=undefined && vRes.CONTROLLER!="")
			{
				vec_to_compare.push(vRes.CONTROLLER.printattribute());
			}	

			// We get the non mandatory extra vallues entered by user
			var extra_value="";
			if (input_value!="")
				extra_value="LIST_DIFFERENCE".call(input_value,vec_to_compare.join(","));
			
			// Add extra value to vector
			for (var Obj in extra_value.parselist())
			{
				vec.push(Obj);
			}	
			
			// Add controler (Last item)
			if (vRes.CONTROLLER!=undefined && vRes.CONTROLLER!="")
			{
				vec.push(vRes.CONTROLLER.printattribute());
			}
				
			vec = vec.removeduplicates();
			
			vRes.MANAGERS=vec.join(",");
			
			count++;
		}
	}
	alert(Count + " resources updated.")
}

function sp_js_rdd_clean_multi_lang_activity_desc()
{
	var v_Errors = new vector();
	var n_NumClean=0;
	var s_descENG="";
	var s_descFR="";
	var s_Table="";
	var n_count_monitor=0;
	
	writeln(char(10)+"DATA RECOVERY (Cleaning Multi-language Activities) - Start of sp_js_rdd_clean_multi_lang_activity_desc");
	
	var diroutput = "/compassv6/data_recovery/output";
	var dir = mkdir(diroutput);
	var s_filename="DR_RENAMED_ACTIVITIES.csv";
	var o_filepath = new PathName(diroutput+"/"+s_filename); 
	var o_File = new fileOutputStream(o_filepath,"OVERWRITE");	
	
	o_File.writeln("ONB Activity;ID Activity;Description;Old French DESC");
	
	for(var o_Project in opxProject where o_Project.open && o_Project.getinternalvalue("STATE").ToString()=="ACTIVE")
	{
		fromobject(o_Project)
		{
			for (var o_Act in "opxactivity" where  o_Act.getinternalvalue("DESC").ToString().search("#/")==0) 
			{	
				n_count_monitor++;
			}
		}
	}
	
	withmonitoring(n_count_monitor)
	{
		for(var o_Project in opxProject where o_Project.open && o_Project.getinternalvalue("STATE").ToString()=="ACTIVE")
		{
			fromobject(o_Project)
			{
				for (var o_Act in "opxactivity" where  o_Act.getinternalvalue("DESC").ToString().search("#/")==0)
				{
					try
					{
						s_descENG = o_Act.callstringformula("IN_LANGUAGE(\"ENGLISH\",\"DESC\")");
						s_descFR = o_Act.callstringformula("IN_LANGUAGE(\"FRENCH\",\"DESC\")");
						if (s_descENG instanceof string) 
						{	
							
							SqlwithDatabasetransaction 
							{
								s_Table = (o_Act.get("?TASK") ? "TASK":"NETWORK");
								SQLExecuteImmediate("update "+s_Table+" set OPX2_COMMENT='"+s_descENG.replaceregexp("'","''").replaceregexp("~","~~")+"' where ONB="+o_Act.ONB.toString("####"));
								SqlCommit();
							}
							n_NumClean++;
							o_File.writeln(o_Act.ONB.toString("####")+";"+o_Act.printattribute()+";"+s_descENG+";"+s_descFR);
							writeln("---> Activity "+o_Act.printattribute()+" cleaned (new desc = "+s_descENG+")");
							"Data recovery on DKM...".monitor(n_count_monitor,1,1);
						}
					}
					catch(error e)
					{
						v_Errors.push("Error while cleaning multiligual type of Activity desc"+o_Act.printattribute()+" : "+e);
					}
				}
			}
		} 
	}
		
	if (v_Errors.length>0)
	{
		
		writeln("DATA RECOVERY (Cleaning Multi-language Activities) - End of sp_js_rdd_clean_multi_lang_activity_desc with errors :");
		for (var s_error in v_Errors) 
		{
			writeln(s_error);
		}
		o_File.writeln("END OF DATA RECOVERY with "+v_Errors.length+" errors out of "+n_NumClean);
		alert("END OF DATA RECOVERY with "+v_Errors.length+" errors out of "+n_NumClean);
	}
	else 
	{
		writeln("DATA RECOVERY (Cleaning Multi-language Activities) - End of sp_js_rdd_clean_multi_lang_activity_desc with no error : " +n_NumClean +" Planned Hours cleaned");
		o_File.writeln("END OF DATA RECOVERY : " +n_NumClean +" Activities cleaned");
		alert("END OF DATA RECOVERY : " +n_NumClean +" Activities cleaned");
	}
	
	o_File.close();
}

function sp_js_rdd_related_pkm()
{
	writeln(char(10)+" ->  DATA RECOVERY (formating related PKM) - Start of sp_js_rdd_related_pkm");
	
	var v_Errors = new vector();
	var n_clean=0;
	var n_unclean=0;
	var b_clean=false;
	var diroutput = "/compassv6/data_recovery/output";
	var dir = mkdir(diroutput);
	
	var s_filename1="DR_new_related_PKM.csv";
	var o_filepath1 = new PathName(diroutput+"/"+s_filename1); 
	var o_File1 = new fileOutputStream(o_filepath1,"OVERWRITE");	
	o_File1.writeln("Project;Project State;DKM Name;DKM Desc;DKM ID ;OLD Related PKM;NEW Related PKM");
	
	var s_filename2="DR_related_PKM_emptied.csv";
	var o_filepath2 = new PathName(diroutput+"/"+s_filename2); 
	var o_File2 = new fileOutputStream(o_filepath2,"OVERWRITE");	
	o_File2.writeln("Project;Project State;DKM Name;DKM Desc;DKM ID ;OLD Related PKM");
	

	for (var o_project in opxProject where o_project.open && o_project.getinternalvalue("STATE").ToString()=="ACTIVE")
	{
		fromobject(o_project)
		{
			for (var act_dkm in "OpxActivity" where act_dkm.SP_AA_RELATED_PKMS!="")
			{
				try
				{
					var s_rel_pkm=act_dkm.SP_AA_RELATED_PKMS;
					
					// if the activity is a DKM we modify the Related PKM value
					if (act_dkm.SP_AA_ACT_IS_A_DKM || act_dkm.SP_AA_DKM_NUMBER!="" || act_dkm.WBS_TYPE.name == "DKM")
					{
						
						var b_clean=false;	
						
						// cleaning of related pkm equal to no or non
						if (s_rel_pkm.ToUpperCase()=="NO" || s_rel_pkm.ToUpperCase()=="NON") 
						{
							b_clean=true;
							withoutlocking act_dkm.SP_AA_RELATED_PKMS="";
						}
						// change of the Related PKM value : we search the pkms with a description equal to related PKM value (to replace it by PKMname_PKMdescrition)
						else 
						{					
							for (var act_pkm in "OpxActivity" where act_pkm.SP_NF_B_ELIGIBLE_REL_PKM && act_pkm.DESC==s_rel_pkm)
							{
								b_clean=true;
								withoutlocking act_dkm.SP_AA_RELATED_PKMS=act_pkm.NAME+"_"+act_pkm.DESC;
								break;
							}
						}
						
						if (b_clean)
						{
							n_clean++;
							o_File1.writeln(o_project.name+";"+o_project.getinternalvalue("STATE").ToString()+";"+act_dkm.NAME+";"+act_dkm.DESC.replaceregexp(";"," ").replaceregexp(","," ").replaceregexp("\"","")+";"+act_dkm.printattribute()+";"+s_rel_pkm+";"+act_dkm.SP_AA_RELATED_PKMS);
							writeln(" ->  DR related PKM (OK) : "+act_dkm.printattribute()+" - Related PKM replaced - old value :  "+s_rel_pkm+"  replaced by : "+act_dkm.SP_AA_RELATED_PKMS);
						} 
						else if (s_rel_pkm.search("_")==false)
						{
							n_unclean++;
							writeln(" ->  DR related PKM (KO) : "+act_dkm.printattribute()+" - Impossible to clean Related PKM - old value  : "+s_rel_pkm);
						}
					}
					// if the activity is not a DKM we clean the field related PKM
					else 
					{
						withoutlocking act_dkm.SP_AA_RELATED_PKMS="";
						o_File2.writeln(o_project.name+";"+o_project.getinternalvalue("STATE").ToString()+";"+act_dkm.NAME+";"+act_dkm.DESC.replaceregexp(";"," ").replaceregexp(","," ").replaceregexp("\"","")+";"+act_dkm.printattribute()+";"+s_rel_pkm);
						writeln(" ->  DR related PKM (OK) : "+act_dkm.printattribute()+" - Related PKM emptied out - old value :  "+s_rel_pkm);
					}
				}
				catch(error e)
				{
					v_errors.push("Error while cleaning Activity  "+act_dkm.printattribute()+" : "+e);
				}
			}
		}
	}
	
	
	if (v_errors.length>0)
	{
		
		writeln(" ->  DATA RECOVERY (formating related PKM) - End of sp_js_rdd_related_pkm with errors :");
		for (var error in v_errors) 
		{
			writeln(error);
		}
		alert("END OF DATA RECOVERY with "+v_errors.length+" errors ");
	}
	else 
	{
		writeln(" ->  DATA RECOVERY (formating related PKM) - end of sp_js_rdd_related_pkm : 		" +n_clean +" related PKM formated 		/	 "+n_unclean+" impossible to format");
		alert("DATA RECOVERY (formating related PKM) - end of sp_js_rdd_related_pkm : 		" +n_clean +" related PKM formated 		/	 "+n_unclean+" impossible to format");
	}
	
	o_File1.close();
	o_File2.close();
	// Download of the files 
	"(defun sp-send-csv-file (localname servername) (INTRANET::SEND-FILE-TO-CLIENT localname servername :TYPE :EXCEL-FILE :PREFERRED-METHOD :DOWNLOAD-AND-EXECUTE))".lispeval();
	lispcall "sp-send-csv-file" (s_filename1, o_filepath1);
	lispcall "sp-send-csv-file" (s_filename2, o_filepath2);
}

function sp_js_rdd_recovery_RA_metric_PH()
{
	writeln(char(10)+"DATA RECOVERY (Planned Hours RA metric) - Start of sp_js_rdd_recovery_RA_metric_PH");
	var vErrors = new vector();
	var NumClean=0;
	var NumTotal=0;
	var o_metric;
	var n_count_monitoring=0;
	
	for(var vProject in opxProject where vProject.open && vProject.STATE=="Active")
	{
	   fromobject(vProject)
	   {
		   for (var o_PlannedHour in "OpxALLOCATION" where o_PlannedHour.COST_ACCOUNT.NAME == "FTE_ESTIMATED") 
		   {
				n_count_monitoring++;
		   }
	   }
	}
	withmonitoring(n_count_monitoring)
	{
	   for(var vProject in opxProject where vProject.open && vProject.STATE=="Active")
	   {
		   fromobject(vProject)
		   {
			   for (var o_PlannedHour in "OpxALLOCATION" where o_PlannedHour.COST_ACCOUNT.NAME == "FTE_ESTIMATED") 
			   {
				   try
				   {
					  withoutalerts withoutlocking 
					  {
						  o_metric="OpxSP_METRIC".get(o_PlannedHour.COMMENT);
						  if (o_metric instanceof OpxSP_METRIC)
						  {
							  writeln("---> Planned Hour "+o_PlannedHour.COMMENT+" recovered ("+o_PlannedHour.ACTIVITY.printattribute()+")");
							  o_PlannedHour.SP_RA_METRIC=o_metric; 
							  
							  if (o_PlannedHour.CallBooleanFormula("BELONGS(\"RESOURCE\",\"CMO - GMA,R&D - Clinical,CMO - PPO\")"))
							  {
								  if (o_PlannedHour.SP_DA_CLIN_OUTSOURCED) o_PlannedHour.SP_AA_N_METRIC_VALUE=o_PlannedHour.SP_NF_CL_VALUE_OUTSOURCED_PH;
								  else o_PlannedHour.SP_AA_N_METRIC_VALUE=o_PlannedHour.SP_NF_CL_VALUE_NOT_OUTSOURCED_PH;
							  }
							  "Data recovery on PH...".monitor(n_count_monitoring,1,1);
							  NumClean++;
						  }
						  NumTotal++;
					  }
				   }
				   catch(error e)
				   {
						vErrors.push("Error with allocation "+o_PlannedHour+" : "+e);
				   }
			   }
		   }
	   }

	}
	if (vErrors.length>0)
	{
	   
	   writeln("DATA RECOVERY (Planned Hours RA metric) - End of sp_js_rdd_recovery_RA_metric_PH with errors :");
	   for (var s_error in vErrors) 
	   {
					   writeln(s_error);
	   }
	   alert("END OF DATA RECOVERY with "+vErrors.length+" errors ");
	}
	else 
	{
	   writeln("DATA RECOVERY (Planned Hours RA metric) - End of sp_js_rdd_recovery_RA_metric_PH with no error : " +NumClean +" Planned Hours recovered out of "+NumTotal);
	   alert("END OF DATA RECOVERY : " +NumClean +" Planned Hours recovered out of "+NumTotal);
	}
}

function sp_js_rdd_PH_equation_override(v_resource,d_limit_date)
{

writetolog("Data Recovery on Planned Hours (equation override)");
writetolog("TEMPO V"+context.SP_NF_CTX_INTE_WEEK);
var n_compteur =0;
var i = 0;
var o_resourceList = new vector();
for(var o_resource in v_resource where o_resource instanceof opxResource)
{
	fromObject(o_resource)
	{
		for (var o_PlannedHour in "opxALLOCATION" where  o_PlannedHour.COST_ACCOUNT.NAME == "FTE_METRICS" && o_PlannedHour.PROJET.getinternalvalue("STATE").ToString()=="ACTIVE" 
		&& o_PlannedHour.RES == o_resource && o_PlannedHour.SP_NF_D_FPRM_PLANNED_FINISH instanceof date)
		{
				var n_diff = 0;
				n_diff= d_limit_date.getTime() - o_PlannedHour.SP_NF_D_FPRM_PLANNED_FINISH.getTime();
				if(n_diff>0)
				{	
					n_compteur++;
				}
		}

		WithMonitoring (n_compteur) 
		{
			for (var o_PlannedHour in "opxALLOCATION" where  o_PlannedHour.COST_ACCOUNT.NAME == "FTE_METRICS" && o_PlannedHour.PROJET.getinternalvalue("STATE").ToString()=="ACTIVE" 
			&& o_PlannedHour.RES == o_resource && o_PlannedHour.SP_NF_D_FPRM_PLANNED_FINISH instanceof date)
			{
				var n_diff = 0;
				n_diff= d_limit_date.getTime() - o_PlannedHour.SP_NF_D_FPRM_PLANNED_FINISH.getTime();
				if(n_diff>=0)
				{				
					writetolog("modification of allocation " + o_PlannedHour.onb );
					withoutlocking { withoutalerts { o_PlannedHour.EQUATION_OVERRIDE = true;}}
					i++;
				}
				"modification of planned hours (equation override)".Monitor(n_compteur);
			}
		}
        
	}
}
alert("END OF DATA RECOVERY : " +i +" Planned Hours upated (equation override)");

writetolog("END of data recovery on Planned Hours (equation override)");
	
}


function sp_js_rdd_PH_equation_override_CDL()
{
	var v_resource= new vector();
	v_resource.push(opxResource.get("CLIN-CDM-CTA"));
	v_resource.push(opxResource.get("CLIN-CDM-DMG"));
	var d_limit_date = new date(2020,01,01);
	
	writetolog("Start of Data Recovery for CLIN-CDM-CTA & CLIN-CDM-DMG");
	sp_js_rdd_PH_equation_override(v_resource,d_limit_date);
	writetolog("End of Data Recovery for CLIN-CDM-CTA & CLIN-CDM-DMG");
	
}

function sp_js_rdd_PH_upd_res_by_cost_account(h_resource,d_limit_date,s_cost_account)
{

	writetolog("Data Recovery on Planned Hours (Change resource "+s_cost_account+")");
	writetolog("TEMPO V"+context.SP_NF_CTX_INTE_WEEK);
	var n_compteur =0;
	var i = 0;
	var s_monitor="modification of planned hours (Change resource "+s_cost_account+")";

	for(var o_resource in h_resource where o_resource instanceof opxResource && h_resource.get(o_resource) instanceof opxResource )
	{
		var o_new_res=h_resource.get(o_resource);
		fromObject(o_resource)
		{
			for (var o_PlannedHour in "opxALLOCATION" where  o_PlannedHour.COST_ACCOUNT.NAME == s_cost_account && o_PlannedHour.PROJET.getinternalvalue("STATE").ToString()=="ACTIVE" 
			&& o_PlannedHour.RES == o_resource && o_PlannedHour.SP_NF_D_FPRM_PLANNED_FINISH instanceof date)
			{
				var n_diff = 0;
				n_diff= d_limit_date.getTime() - o_PlannedHour.SP_NF_D_FPRM_PLANNED_FINISH.getTime();
				if(n_diff<0)
				{
					n_compteur++;
				}
			}

			WithMonitoring (n_compteur) 
			{
				for (var o_PlannedHour in "opxALLOCATION" where  o_PlannedHour.COST_ACCOUNT.NAME == s_cost_account && o_PlannedHour.PROJET.getinternalvalue("STATE").ToString()=="ACTIVE" 
				&& o_PlannedHour.RES == o_resource && o_PlannedHour.SP_NF_D_FPRM_PLANNED_FINISH instanceof date) 
				{
					
					var n_diff = 0;
					n_diff= d_limit_date.getTime() - o_PlannedHour.SP_NF_D_FPRM_PLANNED_FINISH.getTime();
					if(n_diff<0)
					{					
						writetolog("modification of allocation " + o_PlannedHour.onb );
						o_PlannedHour.res = o_new_res;
						 o_PlannedHour._RM_AA_S_PL_HRS_COMMENT = "data_recovery";
						i++;
					}
						s_monitor.Monitor(n_compteur);
				}
			}
		}
	}
	alert("END OF DATA RECOVERY : " +i +" Planned Hours upated (Change resource "+s_cost_account+")");
	writetolog("END of data recovery on Planned Hours(Change resource "+s_cost_account+")");
}

function sp_js_rdd_PH_equation_override_GBS()
{
	var v_resource= new vector();
	v_resource.push(opxResource.get("CLIN-BS-PROG"));
	v_resource.push(opxResource.get("CLIN-BS-STAT"));
	var h_resource= new hashtable();
	h_resource.set(opxResource.get("CLIN-BS-PROG"),opxResource.get("GBS-CLIN-PROG"));
	h_resource.set(opxResource.get("CLIN-BS-STAT"),opxResource.get("GBS-CLIN-STAT"));
	var d_limit_date = new date(2020,01,01);
	
	writetolog("Start of Data Recovery for CLIN-BS-PROG & CLIN-BS-STAT");
	sp_js_rdd_PH_equation_override(v_resource,d_limit_date);
	sp_js_rdd_PH_upd_res_by_cost_account(h_resource,d_limit_date,"FTE_ESTIMATED");
	sp_js_rdd_PH_upd_res_by_cost_account(h_resource,d_limit_date,"FTE");
	sp_js_rdd_PH_upd_res_by_cost_account(h_resource,d_limit_date,"FTE_METRICS");
	writetolog("End of Data Recovery for CLIN-BS-PROG & CLIN-BS-STAT");
}

function  SP_JS_DKM_FUNCTION_PLATFORM_UPD()
{
	var v_Errors = new vector();
	var n_NumClean=0;
	var s_id= "";
	var s_ONB_Activity= "";
	var s_Project_Name = "";
	var s_DKM_FUNCTION="";
	var s_DKM_PLATFORM="";
	var s_Table="";
	var n_count_monitor=0;
	var Obj_DKM_Fun_Res; 
	var Obj_DKM_Platf_Res; 
	var h_dkm_old= new hashtable("STRING");
	h_dkm_old.set("R&D - ARD","R&D - AS");
	h_dkm_old.set("R&D - PD","R&D - PD_OLD");
	h_dkm_old.set("R&D - AS&AD","R&D - AS");
	h_dkm_old.set("R&D - PTR","R&D - PTR_OLD");
	h_dkm_old.set("R&D - ESBD","R&D - ESBD_OLD");
	h_dkm_old.set("R&D - Non clinical safety","R&D - Non clinical safety_OLD");
	h_dkm_old.set("R&D - Clinical","R&D - GCS");
	h_dkm_old.set("R&D - NCPP","R&D - NCPP_OLD");
	h_dkm_old.set("R&D - Research","R&D - Research_OLD");
	h_dkm_old.set("R&D - Discovery","R&D - Discovery_OLD"); 
	
	
	writeln(char(10)+"DATA RECOVERY (updating DKM ACTIVITIES FUNCTION AND PLATFORM) - Start of SP_JS_DKM_FUNCTION_PLATFORM_UPD");
	
	var diroutput = "/compassv6/data_recovery/output";
	var dir = mkdir(diroutput);
	var s_filename="DKM_FIELD_UPD_ACTIVITIES.csv";
	var o_filepath = new PathName(diroutput+"/"+s_filename); 
	var o_File = new fileOutputStream(o_filepath,"OVERWRITE");	
	
	o_File.writeln("ONB Activity;PROJECT_NAME;DKM_FUNCTION;SP_RA_DKM_ASS_FUNCTION;DKM_PLATFORM;SP_RING_DKM_ACT_PLATFORM_RBS;IDENTIFIER");
	
	for(var o_Project in opxProject where o_Project.open )
	{
		fromobject(o_Project)
		{
			for (var o_Act in "opxactivity" where o_act.sp_aa_act_is_a_dkm && (o_act.sp_aa_dkm_ass_func != ""  || o_act.sp_aa_dkm_ass_platf != "" ) )
			{	
				n_count_monitor++;
			}
		}
	}
	
	withmonitoring(n_count_monitor)
	{
		withoutalerts withoutlocking
		{
			for(var o_Project in opxProject where o_Project.open )
			{
				fromobject(o_Project)
				{
					for (var o_Act in "opxactivity" where o_act.sp_aa_act_is_a_dkm && (o_act.sp_aa_dkm_ass_func != ""  || o_act.sp_aa_dkm_ass_platf != "" ) )
					{
							s_id= o_Act.printattribute();
							s_ONB_ACTIVITY = o_Act.ONB;
							s_Project_Name = o_Act.SP_NF_S_PROJECT_NAME;
							s_DKM_FUNCTION = o_act.sp_aa_dkm_ass_func;
							
							var o_dkm_fun = h_dkm_old.get(s_DKM_FUNCTION);
							if (o_dkm_fun instanceof String && o_dkm_fun != "")
							{ 
								s_DKM_FUNCTION = h_dkm_old.get(s_DKM_FUNCTION);
							}
							
							
							s_DKM_PLATFORM = o_act.sp_aa_dkm_ass_platf.replaceregexp(" ",",");
							 
							Obj_DKM_Fun_Res="opxResource".get(s_DKM_FUNCTION); 
							
							var dkm_Platform_vect=new vector();
							for ( var  i  in s_DKM_PLATFORM.parselist()) 
							{  
							 var Res = "opxResource".get(i);
								if ( Res instanceOf OpxResource)
								{
									dkm_Platform_vect.push(Res.name);
								}
							}
												
							o_act.SP_RING_DKM_ACT_PLATFORM_RBS=dkm_Platform_vect.removeduplicates().JOIN(",");
							var  Platform_Result=o_act.SP_RING_DKM_ACT_PLATFORM_RBS;
							
							var Function_Result="";
							If (Obj_DKM_Fun_Res instanceof OpxResource)
							{
							o_act.SP_RA_DKM_ASS_FUNCTION=Obj_DKM_Fun_Res;
							Function_Result=o_act.SP_RA_DKM_ASS_FUNCTION.printattribute();
							}
							 
								o_File.writeln(o_Act.ONB.toString("####")+";"+s_Project_Name+";"+s_DKM_FUNCTION+";"+Function_Result+";"+s_DKM_PLATFORM+";"+Platform_Result+";"+s_id );
								n_NumClean++;
								writeln("---> Activity "+o_Act.printattribute()+" identified_updated (new desc = "+s_ONB_ACTIVITY+")");
								"Data recovery on DKM...".monitor(n_count_monitor,1,1);
							
							
					}
				}
			}
		}			
	}
		writeln("DATA RECOVERY (Updating DKM activities Function and Platform) - End of SP_JS_DKM_FUNCTION_PLATFORM_UPD with no error : " +n_NumClean +" activities DKM list");
		o_File.writeln("END OF DATA RECOVERY : " +n_NumClean +" Activities DKM updated");
		alert("END OF DATA RECOVERY : " +n_NumClean +" Activities updated");
	o_File.close();
}

function sp_js_res_PH_move_equation_override(v_resource,d_limit_date)
{

	writetolog("Data Recovery on Planned Hours (equation override)");
	writetolog("TEMPO V"+context.SP_NF_CTX_INTE_WEEK);
	var n_compteur =0;
	var i = 0;
	var o_resourceList = new vector();
	for(var o_resource in v_resource where o_resource instanceof opxResource)
	{
		fromObject(o_resource)
		{
			for (var o_PlannedHour in "opxALLOCATION" where  o_PlannedHour.COST_ACCOUNT.NAME == "FTE_METRICS" && o_PlannedHour.PROJET.getinternalvalue("STATE").ToString()=="ACTIVE" 
			&& o_PlannedHour.RES == o_resource && o_PlannedHour.FD instanceof date)
			{
					var n_diff = 0;
					n_diff= d_limit_date.getTime() - o_PlannedHour.FD.getTime();
					if(n_diff>0)
					{	
						n_compteur++;
					}
			}

			WithMonitoring (n_compteur) 
			{
				for (var o_PlannedHour in "opxALLOCATION" where  o_PlannedHour.COST_ACCOUNT.NAME == "FTE_METRICS" && o_PlannedHour.PROJET.getinternalvalue("STATE").ToString()=="ACTIVE" 
				&& o_PlannedHour.RES == o_resource && o_PlannedHour.FD instanceof date)
				{
					var n_diff = 0;
					n_diff= d_limit_date.getTime() - o_PlannedHour.FD.getTime();
					if(n_diff>0)
					{				
						writetolog("modification of allocation " + o_PlannedHour.onb );
						
						withoutlocking { 
						// case of normal planned hours
						if (o_PlannedHour.EQUATION_OBJECT!=""){  withoutalerts { o_PlannedHour.EQUATION_OVERRIDE = true;}}
						//case of PH created by SP_CL_LAUNCH_SITES_INT 
						else {o_PlannedHour.EQUATION_OVERRIDE = true;}
						}
						
						i++;
					}
					"modification of planned hours (equation override)".Monitor(n_compteur);
				}
			}
			
		}
	}
	alert("END OF DATA RECOVERY : " +i +" Planned Hours upated (equation override)");

	writetolog("END of data recovery on Planned Hours (equation override)");

}

function sp_js_res_PH_upd_res_move_by_cost_account(h_resource,d_limit_date,s_cost_account)
{

	writetolog("Data Recovery on Planned Hours (Change resource "+s_cost_account+")");
	writetolog("TEMPO V"+context.SP_NF_CTX_INTE_WEEK);
	var n_compteur =0;
	var i = 0;
	var s_monitor="modification of planned hours (Change resource "+s_cost_account+")";

	for(var o_resource in h_resource where o_resource instanceof opxResource && h_resource.get(o_resource) instanceof opxResource )
	{
		var o_new_res=h_resource.get(o_resource);
		fromObject(o_resource)
		{
			
			for (var o_PlannedHour in "opxALLOCATION" where  o_PlannedHour.COST_ACCOUNT.NAME == s_cost_account && o_PlannedHour.PROJET.getinternalvalue("STATE").ToString()=="ACTIVE" 
			&& o_PlannedHour.RES == o_resource && o_PlannedHour.FD instanceof date)
			{
				var n_diff = 0;
				n_diff= d_limit_date.getTime() - o_PlannedHour.FD.getTime();
				if(n_diff<=0)
				{
					n_compteur++;
				}
			}

			WithMonitoring (n_compteur) 
			{
				for (var o_PlannedHour in "opxALLOCATION" where  o_PlannedHour.COST_ACCOUNT.NAME == s_cost_account && o_PlannedHour.PROJET.getinternalvalue("STATE").ToString()=="ACTIVE" 
				&& o_PlannedHour.RES == o_resource && o_PlannedHour.FD instanceof date) 
				{
					
					var n_diff = 0;
					n_diff= d_limit_date.getTime() - o_PlannedHour.FD.getTime();
					if(n_diff<=0)
					{					
						writetolog("modification of allocation " + o_PlannedHour.onb );
						o_PlannedHour.res = o_new_res;
						 o_PlannedHour._RM_AA_S_PL_HRS_COMMENT = "data_recovery";
						i++;
					}
						s_monitor.Monitor(n_compteur);
				}
			}
		}
	}
	alert("END OF DATA RECOVERY : " +i +" Planned Hours upated (Change resource "+s_cost_account+")");
	writetolog("END of data recovery on Planned Hours(Change resource "+s_cost_account+")");
}

function sp_js_res_PH_equation_override_GCD()
{
	var v_resource= new vector();
	v_resource.push(opxResource.get("CLIN-DOC-RM"));
	v_resource.push(opxResource.get("CLIN-DOC-CDC"));
	v_resource.push(opxResource.get("CLIN-MW-EDS"));
	v_resource.push(opxResource.get("CLIN-MW-MWR"));
	v_resource.push(opxResource.get("CLIN-MW-TRA"));
	
	var h_resource= new hashtable();
	h_resource.set(opxResource.get("CLIN-DOC-RM"),opxResource.get("CLIN-GCD-RM"));
	h_resource.set(opxResource.get("CLIN-DOC-CDC"),opxResource.get("CLIN-GCD-CDC"));
	h_resource.set(opxResource.get("CLIN-MW-EDS"),opxResource.get("CLIN-GCD-EDS"));
	h_resource.set(opxResource.get("CLIN-MW-MWR"),opxResource.get("CLIN-GCD-MWR"));
	h_resource.set(opxResource.get("CLIN-MW-TRA"),opxResource.get("CLIN-GCD-TRA"));
	
	var d_limit_date = new date(2020,01,01);
	
	writetolog("Start of Data Recovery for CLIN-DOC-RM,CLIN-DOC-CDC,CLIN-MW-EDS,CLIN-MW-MWR & CLIN-MW-TRA");
	sp_js_res_PH_move_equation_override(v_resource,d_limit_date);
	sp_js_res_PH_upd_res_move_by_cost_account(h_resource,d_limit_date,"FTE_ESTIMATED");
	sp_js_res_PH_upd_res_move_by_cost_account(h_resource,d_limit_date,"FTE");
	sp_js_res_PH_upd_res_move_by_cost_account(h_resource,d_limit_date,"FTE_METRICS");
	writetolog("End of Data Recovery for CLIN-DOC-RM,CLIN-DOC-CDC,CLIN-MW-EDS,CLIN-MW-MWR & CLIN-MW-TRA");
}


function SP_RING_DKM_ACT_PLATFORM_RBS_FCT(o_resFunc,o_res)
{
    var i =0;   
                var o_ResourcePlatform = "opxresource".get(o_resFunc);
                var v_resourceDb = new vector();
                // get all resource from dkm function
                fromobject(o_ResourcePlatform)
                {
                                //get all the resources which belongs to the DKM_Function and which are at level 4
								for (var o_resourceDb in "opxresource" where o_resourceDb.NAME.search("_OLD")==false && o_resourceDb!=o_ResourcePlatform)
                                {
                                    if(o_resourceDb.level==4)
									{
										v_resourceDb.push(o_resourceDb.name);
									}
                                }
                }
                                // get split dkm platform to a list 
                                var s_list = o_res.split(",");
                                for (var s_resource in  s_list )                      
                                {
                                                var o_resource = "opxresource".get(s_resource);
                                                if(o_resource!= undefined && o_resource != "")
                                                {
                                                                
																for(var act_res in v_resourceDb where act_res==o_resource.NAME)
																{
																	i++;
																}
																
																//if dkm platform is not from dkm function,  return true 
                                                                if( i==0)
                                                                {
                                                                                                                                
																	return true;
                                                                }
																i=0;
                                                                //if dkm platform is an old resource, return true                                               
                                                                if(o_resource.NAME.search("_OLD")!=false )
                                                                {
                                                                     return true;
                                                                }

                                                                
                                                }  
                                }                                              
                
	return false; 
                                
}

SP_RING_DKM_ACT_PLATFORM_RBS_FCT.exportfunction({"STRING","STRING"}, "BOOLEAN");

function sp_js_res_PH_move_equation_override_fte(o_resource,vecActype,d_limit_date)
{

	writetolog("Data Recovery on Planned Hours (equation override)");
	writetolog("TEMPO V"+context.SP_NF_CTX_INTE_WEEK);
	var n_compteur =0;
	var i = 0;
	var s_monitor=o_resource.printattribute()+" - Modification of planned hours (equation override)";
	//var o_resourceList = new vector();
	//condition to check the  activity type and mark the equation override is true
	for (var o_PlannedHour in "opxALLOCATION" where  o_PlannedHour.COST_ACCOUNT.NAME == "FTE_METRICS" && o_PlannedHour.PROJET.getinternalvalue("STATE").ToString()=="ACTIVE" 
			&& o_PlannedHour.RES == o_resource && o_PlannedHour.FD instanceof date && ((vecActype.length == 0) || (o_PlannedHour.activity instanceof opxActivity && vecActype.position(o_PlannedHour.activity.WBS_TYPE) instanceof Number)))
			{
					var n_diff = 0;
					n_diff= d_limit_date.getTime() - o_PlannedHour.FD.getTime();
					if(n_diff>0)
					{	
						n_compteur++;
					}
			}

			WithMonitoring (n_compteur) 
			{
				for (var o_PlannedHour in "opxALLOCATION" where  o_PlannedHour.COST_ACCOUNT.NAME == "FTE_METRICS" && o_PlannedHour.PROJET.getinternalvalue("STATE").ToString()=="ACTIVE" 
				&& o_PlannedHour.RES == o_resource && o_PlannedHour.FD instanceof date && ((vecActype.length == 0) || (o_PlannedHour.activity instanceof opxActivity && vecActype.position(o_PlannedHour.activity.WBS_TYPE) instanceof Number)))
				{
					var n_diff = 0;
					n_diff= d_limit_date.getTime() - o_PlannedHour.FD.getTime();
					if(n_diff>0)
					{				
						writetolog("modification of allocation " + o_PlannedHour.onb );
						
						withoutlocking { 
						 withoutalerts { 
						 o_PlannedHour.EQUATION_OVERRIDE = true;
						}
						}
											
						i++;
					}
					s_monitor.Monitor(n_compteur);
				}
			}
			
	alert(o_resource.printattribute()+" : " +i +" Planned Hours updated (equation override)");

	writetolog("END of data recovery on Planned Hours (equation override)");

}

function sp_js_res_PH_delete_fte(o_resource,vecActype,s_limit_type,d_limit_date,s_cost_account)
{

	writetolog("Data Recovery on Planned Hours (deletion of "+s_cost_account+")");
	writetolog("TEMPO V"+context.SP_NF_CTX_INTE_WEEK);
	var n_compteur =0;
	var i = 0;
	var s_monitor=o_resource.printattribute()+" - Deletion of planned hours "+s_cost_account;
	//var o_resourceList = new vector();
	//condition to check the  activity type and mark the equation override is true
	for (var o_PlannedHour in "opxALLOCATION" where  o_PlannedHour.COST_ACCOUNT.NAME == s_cost_account && o_PlannedHour.PROJET.getinternalvalue("STATE").ToString()=="ACTIVE" 
			&& o_PlannedHour.RES == o_resource && o_PlannedHour.FD instanceof date && ((vecActype.length == 0) || (o_PlannedHour.activity instanceof opxActivity && vecActype.position(o_PlannedHour.activity.WBS_TYPE) instanceof Number)))
			{
					var n_diff = (s_limit_type == "Higher") ? d_limit_date.getTime() - o_PlannedHour.FD.getTime() :  o_PlannedHour.FD.getTime() - d_limit_date.getTime();
					if(n_diff<0)
					{	
						n_compteur++;
					}
			}

			WithMonitoring (n_compteur) 
			{
				for (var o_PlannedHour in "opxALLOCATION" where  o_PlannedHour.COST_ACCOUNT.NAME == s_cost_account && o_PlannedHour.PROJET.getinternalvalue("STATE").ToString()=="ACTIVE" 
				&& o_PlannedHour.RES == o_resource && o_PlannedHour.FD instanceof date && ((vecActype.length == 0) || (o_PlannedHour.activity instanceof opxActivity && vecActype.position(o_PlannedHour.activity.WBS_TYPE) instanceof Number)))
				{
					var n_diff = (s_limit_type == "Higher") ? d_limit_date.getTime() - o_PlannedHour.FD.getTime() :  o_PlannedHour.FD.getTime() - d_limit_date.getTime();
					if(n_diff<0)
					{				
						writetolog("Deletion of allocation " + o_PlannedHour.onb );
						
						withoutlocking { 
						 withoutalerts { 
						 o_PlannedHour.delete();
						 }
						 }
											
						i++;
					}
					s_monitor.Monitor(n_compteur);
				}
			}
			
	alert(o_resource.printattribute()+" : " +i +" Planned Hours "+s_cost_account+" deleted");

	writetolog("END of data recovery on Planned Hours (deletion of "+s_cost_account+")");

}

function sp_js_res_PH_equation_override_GCD_FTE()
{
	alert("START OF DATA RECOVERY");
	writetolog("Start of Data Recovery for CLIN-GRTM-RTM,CLIN-GCD-MWR,CLIN-GCD-EDS,CLIN-GRTM-LCRA");
	//Data recovery for resource CLIN-GRTM-RTM
	writetolog("Start of Data Recovery for CLIN-GRTM-RTM"); 
	var o_resource=opxResource.get("CLIN-GRTM-RTM");
	var vecActype = new vector();
	var d_limit_date = context.SP_GS_D_FTE_METRIC_DATE;
	vecActype.push(opxWBS_TYPE.get("S_CONC"));
	vecActype.push(opxWBS_TYPE.get("S_PRCOND"));
	vecActype.push(opxWBS_TYPE.get("S_PREP"));
	sp_js_res_PH_move_equation_override_fte(o_resource,vecActype,d_limit_date);
	sp_js_res_PH_delete_fte(o_resource,vecActype,"Higher",d_limit_date,"FTE_METRICS");
	//Data recovery for resource CLIN-GCD-MWR
	writetolog("Start of Data Recovery for CLIN-GCD-MWR"); 
	vecActype.clear();
	var o_resource=opxResource.get("CLIN-GCD-MWR");
	vecActype.push(opxWBS_TYPE.get("S_PROT"));
	vecActype.push(opxWBS_TYPE.get("S_PRREPW"));
	sp_js_res_PH_move_equation_override_fte(o_resource,vecActype,d_limit_date);
	sp_js_res_PH_delete_fte(o_resource,vecActype,"Higher",d_limit_date,"FTE_METRICS");	
	//Data recovery for resource CLIN-GCD-EDS
	writetolog("Start of Data Recovery for CLIN-GCD-EDS");
	o_resource=opxResource.get("CLIN-GCD-EDS");
	vecActype.clear();
	vecActype.push(opxWBS_TYPE.get("IBRO-PROD"));
	vecActype.push(opxWBS_TYPE.get("IBRO-UPD"));
	sp_js_res_PH_move_equation_override_fte(o_resource,vecActype,d_limit_date);
	sp_js_res_PH_delete_fte(o_resource,vecActype,"Higher",d_limit_date,"FTE_ESTIMATED");
	sp_js_res_PH_delete_fte(o_resource,vecActype,"Higher",d_limit_date,"FTE_METRICS");
	//Data recovery for resource CLIN-GRTM-LCRA
	writetolog("Start of Data Recovery for CLIN-GRTM-LCRA");
	o_resource=opxResource.get("CLIN-GRTM-LCRA");
	vecActype.clear();
	sp_js_res_PH_move_equation_override_fte(o_resource,vecActype,d_limit_date); 
	sp_js_res_PH_delete_fte(o_resource,vecActype,"Higher",d_limit_date,"FTE_ESTIMATED");
	sp_js_res_PH_delete_fte(o_resource,vecActype,"Higher",d_limit_date,"FTE_METRICS");
	sp_js_res_PH_delete_fte(o_resource,vecActype,"Higher",d_limit_date,"FTE");
	writetolog("End of Data Recovery for CLIN-GRTM-RTM,CLIN-GCD-MWR,CLIN-GCD-EDS,CLIN-GRTM-LCRA");
	alert("END OF DATA RECOVERY");
}

function sp_js_res_PH_equation_override_GRTM_LCRA()
{	
	writetolog("Start of Data Recovery for CLIN-GRTM-LCRA");
	var o_resource=opxResource.get("CLIN-GRTM-LCRA");
	var vecActype = new vector();
	var d_limit_date = new date();
	sp_js_res_PH_move_equation_override_fte(o_resource,vecActype,d_limit_date); 
	sp_js_res_PH_delete_fte(o_resource,vecActype,"Higher",d_limit_date,"FTE_ESTIMATED");
	sp_js_res_PH_delete_fte(o_resource,vecActype,"Higher",d_limit_date,"FTE_METRICS");
	sp_js_res_PH_delete_fte(o_resource,vecActype,"Higher",d_limit_date,"FTE");
	writetolog("End of Data Recovery for CLIN-GRTM-LCRA");
	alert("END OF DATA RECOVERY");
}

function Data_Recovery(ResCond,ProjCond,WpCond,Fname,ToDelete)
{
	
	var diroutput = Context.CallStringFormula("$TEMPORARY_FILES_DIRECTORY");
	//output is stored at /software/plw/v6.2.1/DEV7/tmp/plw/
	
	var filename="";
	if (Fname=="" || Fname==undefined)
	{
	filename="Data_Recovery_Actuals.csv";
	}
	else
	{
		filename="Data_Recovery_Actuals_"+Fname+".csv";
		
	}
	var filepath = new PathName(diroutput+"/"+filename); 
	var file = new fileOutputStream(filepath,"OVERWRITE");
	file.writeln("Resource;Portfolio;Project Name;Project State;Activity Description;Activity Type;Activity Onb;Department;Platform;Profile;Resource Site;Activity Site;Hours;Start Date;Finish Date;Cost Account;Actual Onb");
	
	var vectwp=new vector();
	var totalvect=new vector();
	var closedvect=new vector();
	var n_monitoring=0;
	
	//Initialising the arguements to True if no value is parsed
	
	if (ResCond=="" || ResCond==undefined)
	{
		ResCond="true";
		
	}
	
	if (ProjCond=="" || ProjCond==undefined)
	{
		ProjCond="true";
		
	}
	
	if (WpCond=="" || WpCond==undefined)
	{
		WpCond="true";
		
	}
	
	
	
	for (var res in "opxResource" where res.callbooleanformula(ResCond))
	{
		
		fromObject(res)
		{	
		
			
		for (var wp in "opxwork_performed" where wp.project instanceof opxProject && wp.project.callbooleanformula(ProjCond) && wp.callbooleanformula(WpCond))
		{
			vectwp.push(wp);
			totalvect.push(wp.project.onb);
			
			n_monitoring++;
			
		}
		

		}
		
	}
	
	
	
	
	withmonitoring(n_monitoring)
	{
		for (var wp in vectwp)
		{
			file.writeln(wp.res.name+";"+wp.SP_NF_S_REP_PORT_MAIN+";"+wp.project.name+";"+wp.project.state+";"+wp.SP_NF_S_AH_ACT_DESC+";"+wp.SP_NF_S_ACT_TYPE+";"+wp.Activity.onb+";"+wp.SP_NF_CL_DEPARTMENT_AH+";"+wp.SP_NF_RES_PLATFORM_DESC+";"+wp.SP_NF_S_PROFILE+";"+wp.SP_NF_S_AH_CL_Resource_Site+";"+wp.SP_AA_S_ACT_SITE+";"+wp.Total_load+";"+wp.SD+";"+wp.ED+";"+wp.Cost_Account.name+";"+wp.onb);
			
			if (ToDelete=="Yes")
			{
			withoutlocking
			{
				withoutalerts
				{
					wp.delete();
					
				}
				
			}
		}
			
			writetolog("Data Recovery Actuals Performed for "+wp.Project.Name+" and Work Performed "+wp.onb+" for the resource "+wp.res.name);

			"DR Processing...".monitor(n_monitoring,1,1);
		}
		
	}
	
	totalvect=totalvect.removeduplicates();
		
		alert("Data Recovery Completed !!");
		alert("Total Number of Projects: "+totalvect.length);
		alert("Total Work performed Records: "+vectwp.length);
		if (ToDelete=="Yes")
		{
			alert("Records are deleted");
		}
		else
		{
			alert("Records are not deleted. Please pass the last arguement as Yes to delete the records");
		}
		
		
	 file.close();
	 "(defun tempo-dr-send-csv-file (localname servername) (INTRANET::SEND-FILE-TO-CLIENT localname servername :TYPE :EXCEL-FILE :PREFERRED-METHOD :DOWNLOAD-AND-EXECUTE))".lispeval();
                               lispcall "tempo-dr-send-csv-file" (filename, filepath);
	 
	
}

function Data_Recovery_Project(ProjCond,WpCond,ToDelete)
{
	
	var diroutput = Context.CallStringFormula("$TEMPORARY_FILES_DIRECTORY");
	//output is stored at /software/plw/v6.2.1/DEV6/tmp/plw/
	var filename="Data_Recovery_Actuals_Project.csv";
	var filepath = new PathName(diroutput+"/"+filename); 
	var file = new fileOutputStream(filepath,"OVERWRITE");
	
	file.writeln("Resource;Portfolio;Project Name;Project State;Activity Description;Activity Type;Activity Onb;Department;Platform;Profile;Resource Site;Activity Site;Hours;Start Date;Finish Date;Cost Account;Actual Onb");
	
	var vectwp=new vector();
	var totalvect=new vector();
	var n_monitoring=0;
	
	//Initialising the arguements to True if no value is parsed
	
	if (ProjCond=="" || ProjCond==undefined)
	{
		ProjCond="true";
	}
	
	if (WpCond=="" || WpCond==undefined)
	{
		WpCond="true";
		
	}
					
	for (var proj in "opxProject" where proj.callbooleanformula(ProjCond))
	{
		fromObject(proj)
		{	
			for (var wp in "opxwork_performed" where wp.callbooleanformula(WpCond))
			{
				
				n_monitoring++;
				vectwp.push(wp);
				totalvect.push(wp.project.onb);
			}
		}
	}
				
	withmonitoring(n_monitoring)
	{
		for (var wp in vectwp)
		{
			file.writeln(wp.res.name+";"+wp.SP_NF_S_REP_PORT_MAIN+";"+wp.project.name+";"+wp.project.state+";"+wp.SP_NF_S_AH_ACT_DESC+";"+wp.SP_NF_S_ACT_TYPE+";"+wp.Activity.onb+";"+wp.SP_NF_CL_DEPARTMENT_AH+";"+wp.SP_NF_RES_PLATFORM_DESC+";"+wp.SP_NF_S_PROFILE+";"+wp.SP_NF_S_AH_CL_Resource_Site+";"+wp.SP_AA_S_ACT_SITE+";"+wp.Total_load+";"+wp.SD+";"+wp.ED+";"+wp.Cost_Account.name+";"+wp.onb);
			
			if (ToDelete=="Yes")
			{
			withoutlocking
			{
				withoutalerts
				{
					wp.delete();
					
				}
				
			}
		}
			
			writetolog("Data Recovery Actuals Performed for "+wp.Project.Name+" and Work Performed "+wp.onb+" for the resource "+wp.res.name);

			"DR Processing...".monitor(n_monitoring,1,1);
		}
		
	}
	
	totalvect=totalvect.removeduplicates();
		
	alert("Data Recovery Completed !!");
	alert("Total Number of Projects: "+totalvect.length);
	alert("Total Records: "+vectwp.length);
	if (ToDelete=="Yes")
		{
			alert("Records are deleted");
		}
		else
		{
			alert("Records are not deleted. Please pass the last arguement as Yes to delete the records");
		}
		
	file.close();
	"(defun tempo-dr-send-csv-file (localname servername) (INTRANET::SEND-FILE-TO-CLIENT localname servername :TYPE :EXCEL-FILE :PREFERRED-METHOD :DOWNLOAD-AND-EXECUTE))".lispeval();
                               lispcall "tempo-dr-send-csv-file" (filename, filepath);



}


writetolog("Script SP_JS_DR_V6 loaded with version ~a ", revision_number);

 
//  NAME    : SP_JS_EQUA_GET_FLAT_VALUE
//  AUTHOR  : MPA
//  VERSION : 1.0
//  PURPOSE : V6 project: Flat values for equations
//
//  HISTORY :
var revision_number ="1.3";
//  Revision 1.3 2019/07/29 bcordel
//  RITM1166910 - TEMPO - Metrics platformprofile to link with RBS : replacing SP_AA_EQUA_PLATFORM by SP_RA_FTE_METRICS_RESOURCE
//
//  Revision 1.2 2014/02/23 MPA: removing "Site" and "WbsType" parameters to functions getFlatValue() and getFlatValueWithComplexity()
//  Revision 1.1 2017/02/16 YSA: adding sp_cl_get_*****_flat_value_field function
//=====================================================================================

// This function is used for equation to retrieve Total load flat value from the triplet (Activity type, Platform, Site)
//
//function getFlatValue(wbsType, platform, site)
function getFlatValue(platform)
{
	var wbsType = this.activityType.name;
	var site = this.BREAKDOWN_3.name;
	var o_resource = "OpxRESOURCE".get(platform);

	var attributes = new vector("SP_AA_EQUA_WBSTYPE", "SP_RA_FTE_METRICS_RESOURCE", "SP_AA_EQUA_SITE");
	var values     = new vector(wbsType,o_resource, site);
	var tableKey   = new KeyAttribute("opx_SP_PT_EQUA_FLAT_VALUES", attributes, values);

	fromObject (tableKey)
		for (var x in "opx_SP_PT_EQUA_FLAT_VALUES"
			where (x.SP_AA_EQUA_WBSTYPE == wbsType && x.SP_RA_FTE_METRICS_RESOURCE == o_resource && x.SP_AA_EQUA_SITE == site))
				return x.SP_AA_EQUA_TOTAL_LOAD;

	return 0.0;
}
getFlatValue.exportfunction({"STRING"}, "NUMBER", "Flat value for equation");

//
// This function is used for equation to retrieve Level1/2/3 flat value from the triplet (Activity type, Platform, Site)
//
//function getFlatValueWithComplexity(wbsType, platform, site, complexity)
function getFlatValueWithComplexity(platform, complexity)
{
	var wbsType = this.activityType.name;
	var site = this.BREAKDOWN_3.name;
	var o_resource = "OpxRESOURCE".get(platform);
	complexity = complexity.toLowercase().trim(" ");

	var attributes = new vector("SP_AA_EQUA_WBSTYPE", "SP_RA_FTE_METRICS_RESOURCE", "SP_AA_EQUA_SITE");
	var values     = new vector(wbsType, o_resource, site);
	var tableKey   = new KeyAttribute("opx_SP_PT_EQUA_FLAT_VALUES", attributes, values);

	fromObject (tableKey)
		for (var x in "opx_SP_PT_EQUA_FLAT_VALUES"
			where (x.SP_AA_EQUA_WBSTYPE == wbsType && x.SP_RA_FTE_METRICS_RESOURCE == o_resource && x.SP_AA_EQUA_SITE == site))
				if (complexity == "easy")
					return x.SP_AA_EQUA_LEVEL_1;
				else if (complexity == "medium")
					return x.SP_AA_EQUA_LEVEL_2;
				else if (complexity == "difficult")
					return x.SP_AA_EQUA_LEVEL_3;

	return 0.0;
}

getFlatValueWithComplexity.exportfunction({"STRING", "STRING"}, "NUMBER", "Flat value for equation with complexity");


//Get value from flat tableKey
// SP_AA_EQUA_LEVEL_1 SP_AA_EQUA_LEVEL_0

//SP_AA_EQUA_LOAD_IN
//SP_AA_EQUA_LOAD_OUT


function sp_cl_get_number_flat_value_field(wbsType, platform, site, field)
{
	var attributes = new vector();
	var values     = new vector();
	var tableKey;
	var result=0;
	var o_site="OpxBREAKDOWN_3".get(site);
	var o_wbsType="OpxWBS_TYPE".get(wbsType);
	var o_platform="OpxRESOURCE".get(platform);
	var vec_level=new vector("SP_AA_EQUA_LEVEL_0",true
	,"SP_AA_EQUA_LEVEL_1",true
	,"SP_AA_EQUA_LEVEL_2",true
	,"SP_AA_EQUA_LEVEL_3",true
	,"SP_AA_EQUA_LOAD_IN",false
	,"SP_AA_EQUA_LOAD_OUT",false
	);

	if (o_site instanceof OpxBREAKDOWN_3 && o_wbsType instanceof OpxWBS_TYPE && o_platform instanceof OpxRESOURCE)
	{

		attributes = new vector("SP_AA_EQUA_WBSTYPE", "SP_RA_FTE_METRICS_RESOURCE", "SP_AA_EQUA_SITE");
		values     = new vector(wbsType, o_platform, site);
		tableKey   = new KeyAttribute("opx_SP_PT_EQUA_FLAT_VALUES", attributes, values);

		fromObject (tableKey)
		{
			for (var x in "opx_SP_PT_EQUA_FLAT_VALUES"
			where (x.SP_AA_EQUA_WBSTYPE == wbsType && x.SP_RA_FTE_METRICS_RESOURCE == o_platform && x.SP_AA_EQUA_SITE == site))
			{

				if (x.get(field) instanceof NUMBER)
				{

					if (vec_level.get(field))
					{
						//fields related to complexity factor
						if (x.SP_AA_B_EQUA_COMPL_FACTOR)
						{
						result=x.get(field);
						}
						else
						{
						result=100;
						}
					}
					else
					{
						result=x.get(field);
					}
					break;
				}
			}
		}

	}
	else
	{
		if (o_wbsType instanceof OpxWBS_TYPE  && o_platform instanceof OpxRESOURCE)
		{
			attributes = new vector("SP_AA_EQUA_WBSTYPE", "SP_RA_FTE_METRICS_RESOURCE");
			values     = new vector(wbsType, o_platform);
			tableKey   = new KeyAttribute("opx_SP_PT_EQUA_FLAT_VALUES", attributes, values);

			fromObject (tableKey)
			{
				for (var x in "opx_SP_PT_EQUA_FLAT_VALUES"
				where (x.SP_AA_EQUA_WBSTYPE == wbsType && x.SP_RA_FTE_METRICS_RESOURCE == o_platform ))
				{
					if (x.get(field) instanceof NUMBER)
					{

						if (vec_level.get(field))
						{
							//fields related to complexity factor
							if (x.SP_AA_B_EQUA_COMPL_FACTOR)
							{
							result=x.get(field);
							}
							else
							{
							result=100;
							}
						}
						else
						{
							result=x.get(field);
						}
						break;
					}
				}

			}
		}

	}



	return result;
}

sp_cl_get_number_flat_value_field.exportfunction({"STRING", "STRING", "STRING", "STRING"},"NUMBER");




function sp_cl_get_string_flat_value_field(wbsType, platform, site, field)
{

	var attributes = new vector();
	var values     = new vector();
	var tableKey;
	var result="";
	var o_site="OpxBREAKDOWN_3".get(site);
	var o_wbsType="OpxWBS_TYPE".get(wbsType);
	var o_platform="OpxRESOURCE".get(platform);

	if (o_site instanceof OpxBREAKDOWN_3 && o_wbsType instanceof OpxWBS_TYPE && o_platform instanceof OpxRESOURCE)
	{

		attributes = new vector("SP_AA_EQUA_WBSTYPE", "SP_RA_FTE_METRICS_RESOURCE", "SP_AA_EQUA_SITE");
		values     = new vector(wbsType, o_platform, site);
		tableKey   = new KeyAttribute("opx_SP_PT_EQUA_FLAT_VALUES", attributes, values);

		fromObject (tableKey)
		{
			for (var x in "opx_SP_PT_EQUA_FLAT_VALUES"
			where (x.SP_AA_EQUA_WBSTYPE == wbsType && x.SP_RA_FTE_METRICS_RESOURCE == o_platform && x.SP_AA_EQUA_SITE == site))
			{

				if (x.get(field) instanceof STRING)
				{

					result=x.get(field);
					break;
				}
			}
		}

	}
	else
	{
		if (o_wbsType instanceof OpxWBS_TYPE  && o_platform instanceof OpxRESOURCE)
		{
			attributes = new vector("SP_AA_EQUA_WBSTYPE", "SP_RA_FTE_METRICS_RESOURCE");
			values     = new vector(wbsType, o_platform);
			tableKey   = new KeyAttribute("opx_SP_PT_EQUA_FLAT_VALUES", attributes, values);

			fromObject (tableKey)
			{
				for (var x in "opx_SP_PT_EQUA_FLAT_VALUES"
				where (x.SP_AA_EQUA_WBSTYPE == wbsType && x.SP_RA_FTE_METRICS_RESOURCE == o_platform ))
				{
					if (x.get(field) instanceof STRING)
					{
						result=x.get(field);
						break;
					}
				}

			}
		}

	}

	return result;
}

sp_cl_get_string_flat_value_field.exportfunction({"STRING", "STRING", "STRING", "STRING"},"STRING");

//
writetolog("Loading script SP_JS_EQUA_GET_FLAT_VALUE in revision ~a.",revision_number);

//  NAME    : SP_JS_EQUA_GET_FLAT_VALUE
//  AUTHOR  : MPA
//  VERSION : 1.0
//  PURPOSE : V6 project: Flat values for equations
//
//  HISTORY :
var revision_number ="1.3";
//  Revision 1.3 2019/07/29 bcordel
//  RITM1166910 - TEMPO - Metrics platformprofile to link with RBS : replacing SP_AA_EQUA_PLATFORM by SP_RA_FTE_METRICS_RESOURCE
//
//  Revision 1.2 2014/02/23 MPA: removing "Site" and "WbsType" parameters to functions getFlatValue() and getFlatValueWithComplexity()
//  Revision 1.1 2017/02/16 YSA: adding sp_cl_get_*****_flat_value_field function
//=====================================================================================

// This function is used for equation to retrieve Total load flat value from the triplet (Activity type, Platform, Site)
//
//function getFlatValue(wbsType, platform, site)
function getFlatValue(platform)
{
	var wbsType = this.activityType.name;
	var site = this.BREAKDOWN_3.name;
	var o_resource = "OpxRESOURCE".get(platform);

	var attributes = new vector("SP_AA_EQUA_WBSTYPE", "SP_RA_FTE_METRICS_RESOURCE", "SP_AA_EQUA_SITE");
	var values     = new vector(wbsType,o_resource, site);
	var tableKey   = new KeyAttribute("opx_SP_PT_EQUA_FLAT_VALUES", attributes, values);

	fromObject (tableKey)
		for (var x in "opx_SP_PT_EQUA_FLAT_VALUES"
			where (x.SP_AA_EQUA_WBSTYPE == wbsType && x.SP_RA_FTE_METRICS_RESOURCE == o_resource && x.SP_AA_EQUA_SITE == site))
				return x.SP_AA_EQUA_TOTAL_LOAD;

	return 0.0;
}
getFlatValue.exportfunction({"STRING"}, "NUMBER", "Flat value for equation");

//
// This function is used for equation to retrieve Level1/2/3 flat value from the triplet (Activity type, Platform, Site)
//
//function getFlatValueWithComplexity(wbsType, platform, site, complexity)
function getFlatValueWithComplexity(platform, complexity)
{
	var wbsType = this.activityType.name;
	var site = this.BREAKDOWN_3.name;
	var o_resource = "OpxRESOURCE".get(platform);
	complexity = complexity.toLowercase().trim(" ");

	var attributes = new vector("SP_AA_EQUA_WBSTYPE", "SP_RA_FTE_METRICS_RESOURCE", "SP_AA_EQUA_SITE");
	var values     = new vector(wbsType, o_resource, site);
	var tableKey   = new KeyAttribute("opx_SP_PT_EQUA_FLAT_VALUES", attributes, values);

	fromObject (tableKey)
		for (var x in "opx_SP_PT_EQUA_FLAT_VALUES"
			where (x.SP_AA_EQUA_WBSTYPE == wbsType && x.SP_RA_FTE_METRICS_RESOURCE == o_resource && x.SP_AA_EQUA_SITE == site))
				if (complexity == "easy")
					return x.SP_AA_EQUA_LEVEL_1;
				else if (complexity == "medium")
					return x.SP_AA_EQUA_LEVEL_2;
				else if (complexity == "difficult")
					return x.SP_AA_EQUA_LEVEL_3;

	return 0.0;
}

getFlatValueWithComplexity.exportfunction({"STRING", "STRING"}, "NUMBER", "Flat value for equation with complexity");


//Get value from flat tableKey
// SP_AA_EQUA_LEVEL_1 SP_AA_EQUA_LEVEL_0

//SP_AA_EQUA_LOAD_IN
//SP_AA_EQUA_LOAD_OUT


function sp_cl_get_number_flat_value_field(wbsType, platform, site, field)
{
	var attributes = new vector();
	var values     = new vector();
	var tableKey;
	var result=0;
	var o_site="OpxBREAKDOWN_3".get(site);
	var o_wbsType="OpxWBS_TYPE".get(wbsType);
	var o_platform="OpxRESOURCE".get(platform);
	var vec_level=new vector("SP_AA_EQUA_LEVEL_0",true
	,"SP_AA_EQUA_LEVEL_1",true
	,"SP_AA_EQUA_LEVEL_2",true
	,"SP_AA_EQUA_LEVEL_3",true
	,"SP_AA_EQUA_LOAD_IN",false
	,"SP_AA_EQUA_LOAD_OUT",false
	);

	if (o_site instanceof OpxBREAKDOWN_3 && o_wbsType instanceof OpxWBS_TYPE && o_platform instanceof OpxRESOURCE)
	{

		attributes = new vector("SP_AA_EQUA_WBSTYPE", "SP_RA_FTE_METRICS_RESOURCE", "SP_AA_EQUA_SITE");
		values     = new vector(wbsType, o_platform, site);
		tableKey   = new KeyAttribute("opx_SP_PT_EQUA_FLAT_VALUES", attributes, values);

		fromObject (tableKey)
		{
			for (var x in "opx_SP_PT_EQUA_FLAT_VALUES"
			where (x.SP_AA_EQUA_WBSTYPE == wbsType && x.SP_RA_FTE_METRICS_RESOURCE == o_platform && x.SP_AA_EQUA_SITE == site))
			{

				if (x.get(field) instanceof NUMBER)
				{

					if (vec_level.get(field))
					{
						//fields related to complexity factor
						if (x.SP_AA_B_EQUA_COMPL_FACTOR)
						{
						result=x.get(field);
						}
						else
						{
						result=100;
						}
					}
					else
					{
						result=x.get(field);
					}
					break;
				}
			}
		}

	}
	else
	{
		if (o_wbsType instanceof OpxWBS_TYPE  && o_platform instanceof OpxRESOURCE)
		{
			attributes = new vector("SP_AA_EQUA_WBSTYPE", "SP_RA_FTE_METRICS_RESOURCE");
			values     = new vector(wbsType, o_platform);
			tableKey   = new KeyAttribute("opx_SP_PT_EQUA_FLAT_VALUES", attributes, values);

			fromObject (tableKey)
			{
				for (var x in "opx_SP_PT_EQUA_FLAT_VALUES"
				where (x.SP_AA_EQUA_WBSTYPE == wbsType && x.SP_RA_FTE_METRICS_RESOURCE == o_platform ))
				{
					if (x.get(field) instanceof NUMBER)
					{

						if (vec_level.get(field))
						{
							//fields related to complexity factor
							if (x.SP_AA_B_EQUA_COMPL_FACTOR)
							{
							result=x.get(field);
							}
							else
							{
							result=100;
							}
						}
						else
						{
							result=x.get(field);
						}
						break;
					}
				}

			}
		}

	}



	return result;
}

sp_cl_get_number_flat_value_field.exportfunction({"STRING", "STRING", "STRING", "STRING"},"NUMBER");




function sp_cl_get_string_flat_value_field(wbsType, platform, site, field)
{

	var attributes = new vector();
	var values     = new vector();
	var tableKey;
	var result="";
	var o_site="OpxBREAKDOWN_3".get(site);
	var o_wbsType="OpxWBS_TYPE".get(wbsType);
	var o_platform="OpxRESOURCE".get(platform);

	if (o_site instanceof OpxBREAKDOWN_3 && o_wbsType instanceof OpxWBS_TYPE && o_platform instanceof OpxRESOURCE)
	{

		attributes = new vector("SP_AA_EQUA_WBSTYPE", "SP_RA_FTE_METRICS_RESOURCE", "SP_AA_EQUA_SITE");
		values     = new vector(wbsType, o_platform, site);
		tableKey   = new KeyAttribute("opx_SP_PT_EQUA_FLAT_VALUES", attributes, values);

		fromObject (tableKey)
		{
			for (var x in "opx_SP_PT_EQUA_FLAT_VALUES"
			where (x.SP_AA_EQUA_WBSTYPE == wbsType && x.SP_RA_FTE_METRICS_RESOURCE == o_platform && x.SP_AA_EQUA_SITE == site))
			{

				if (x.get(field) instanceof STRING)
				{

					result=x.get(field);
					break;
				}
			}
		}

	}
	else
	{
		if (o_wbsType instanceof OpxWBS_TYPE  && o_platform instanceof OpxRESOURCE)
		{
			attributes = new vector("SP_AA_EQUA_WBSTYPE", "SP_RA_FTE_METRICS_RESOURCE");
			values     = new vector(wbsType, o_platform);
			tableKey   = new KeyAttribute("opx_SP_PT_EQUA_FLAT_VALUES", attributes, values);

			fromObject (tableKey)
			{
				for (var x in "opx_SP_PT_EQUA_FLAT_VALUES"
				where (x.SP_AA_EQUA_WBSTYPE == wbsType && x.SP_RA_FTE_METRICS_RESOURCE == o_platform ))
				{
					if (x.get(field) instanceof STRING)
					{
						result=x.get(field);
						break;
					}
				}

			}
		}

	}

	return result;
}

sp_cl_get_string_flat_value_field.exportfunction({"STRING", "STRING", "STRING", "STRING"},"STRING");

//
writetolog("Loading script SP_JS_EQUA_GET_FLAT_VALUE in revision ~a.",revision_number);

 
//	NAME	: SP_JS_FP_DEPT_GROUPING
//	AUTHOR  : MPA (origin: KSK)
//  VERSION : 1.0
//  PURPOSE : COMPASS v6 , Functions for Reporting module
//  
//  HISTORY :
//  Created  by ksk 09:12 30/09/2015
//  Revision 1.0  2017-03-29 MPA: Import the script from Compass P5 to get the function sp_dept_grouping_set_dkm_filter() + commented the others
var revision_number ="1.0";
/*
function sp_dept_grouping_walk_tree(res)
{
  // this is a vector
  // alert(res); 
  res = res.get("CHILD_OF");
  if (res instanceof OpxResource && res.LEVEL>=1)
  {
    this.push(res.NAME);
    this.sp_dept_grouping_walk_tree(res);
  }
}

function sp_dept_grouping_define_res_entry()
{
  // this is a OpxSP_TT_DEPT_GROUPING
  var dlist = new vector();
  var res;
  var level = 1;
  var found = false;
  var parent = "";
  var cur = "";
  
  for (var d in this.SP_AA_S_DEPT_LIST.parsevector())
  {
    var path = new vector();
    res = "OpxResource".get(d);
    if (res instanceof OpxResource)
    {
      path.sp_dept_grouping_walk_tree(res);
    }
    dlist.push(path);
  }
  
  // seek first common parent
  while (level<6 && ! found)
  {
    // alert(level+">LIST>"+dlist);
    for (var v in dlist )
    {
      // alert(level+">>>"+v);
      if (v.length==0)
      {
        found = true;
        break;
      }
      else
      {
        if (cur == "")
        {
          cur = v.pop();        
        }
        else if (v.pop() != cur)
        {
          found = true;
          break;
        }
      }
    }
    level++;
    if (! found)
    {
      parent = cur;
    }
    cur = "";
  }
  parent = "OpxResource".get(parent);
  return parent;
}

function sp_dept_grouping_populate()
{
  // SP_TT_DEPT_GROUPING SP_AA_DEPT_GROUPING
  var dg;
  var dl;
  
  // reset table OpxSP_TT_DEPT_GROUPING
  for (var d in "OpxSP_TT_DEPT_GROUPING".findclass())
  {
    d.delete();
  }
  
  // populate
  for (var res in "OpxResource".findclass() where (res.LEVEL==3 || res.LEVEL==4) 
  && res.SP_AA_DEPT_GROUPING != "" )
  {
    dg = "OpxSP_TT_DEPT_GROUPING".findclass().get(res.SP_AA_DEPT_GROUPING);
    if (dg instanceof OpxSP_TT_DEPT_GROUPING)
    {
      dl = dg.SP_AA_S_DEPT_LIST.parsevector();
      dl.push(res.NAME);
      dg.SP_AA_S_DEPT_LIST = dl.join(",");
    }
    else
    {
      dg = new OpxSP_TT_DEPT_GROUPING("NAME",res.SP_AA_DEPT_GROUPING,"SP_AA_S_DEPT_LIST",res.NAME);
    }
  }
}
sp_dept_grouping_populate.exportfunction();
*/

// MPA: fonction utilisée dans le filtre "Dept grouping" du module "Reporting"
function sp_dept_grouping_set_dkm_filter()
{
	// this.SP_AA_S_CTX_REP_DEPT_GRP est le filtre "Dept Grouping" ("this" is an editor)
	// Récupère dans "dg" l'élement sélectionné dans le filtre (pourquoi ne pas faire directement dg = this.SP_AA_S_CTX_REP_DEPT_GRP ???)
	var dg = "OpxSP_TT_DEPT_GROUPING".findclass().get(this.SP_AA_S_CTX_REP_DEPT_GRP);

	if (dg instanceof OpxSP_TT_DEPT_GROUPING) {
		var level3 = new vector();
		var level4 = new vector();

		for (var rn in dg.SP_AA_S_DEPT_LIST.parsevector()) {
			var res = "OpxResource".get(rn);
			if (res instanceof OpxResource && res.LEVEL == 3)
				level3.push(res.NAME);
			else if (res instanceof OpxResource && res.LEVEL == 4)
				level4.push(res.NAME);
		}

		if (level3.length > 0)
			this.SP_AA_S_CTX_REP_DKM_FCT = level3.join(",");  // remplit le filtre "DKM Function"

		if (level4.length > 0)
			this.SP_AA_S_CTX_REP_DKM_FCT = "";   // vide le filtre "DKM Function"
	}
}
writetolog("Loading script SP_JS_FP_DEPT_GROUPING in revision ~a.",revision_number);

//	NAME	: SP_JS_FP_DEPT_GROUPING
//	AUTHOR  : MPA (origin: KSK)
//  VERSION : 1.0
//  PURPOSE : COMPASS v6 , Functions for Reporting module
//  
//  HISTORY :
//  Created  by ksk 09:12 30/09/2015
//  Revision 1.0  2017-03-29 MPA: Import the script from Compass P5 to get the function sp_dept_grouping_set_dkm_filter() + commented the others
var revision_number ="1.0";
/*
function sp_dept_grouping_walk_tree(res)
{
  // this is a vector
  // alert(res); 
  res = res.get("CHILD_OF");
  if (res instanceof OpxResource && res.LEVEL>=1)
  {
    this.push(res.NAME);
    this.sp_dept_grouping_walk_tree(res);
  }
}

function sp_dept_grouping_define_res_entry()
{
  // this is a OpxSP_TT_DEPT_GROUPING
  var dlist = new vector();
  var res;
  var level = 1;
  var found = false;
  var parent = "";
  var cur = "";
  
  for (var d in this.SP_AA_S_DEPT_LIST.parsevector())
  {
    var path = new vector();
    res = "OpxResource".get(d);
    if (res instanceof OpxResource)
    {
      path.sp_dept_grouping_walk_tree(res);
    }
    dlist.push(path);
  }
  
  // seek first common parent
  while (level<6 && ! found)
  {
    // alert(level+">LIST>"+dlist);
    for (var v in dlist )
    {
      // alert(level+">>>"+v);
      if (v.length==0)
      {
        found = true;
        break;
      }
      else
      {
        if (cur == "")
        {
          cur = v.pop();        
        }
        else if (v.pop() != cur)
        {
          found = true;
          break;
        }
      }
    }
    level++;
    if (! found)
    {
      parent = cur;
    }
    cur = "";
  }
  parent = "OpxResource".get(parent);
  return parent;
}

function sp_dept_grouping_populate()
{
  // SP_TT_DEPT_GROUPING SP_AA_DEPT_GROUPING
  var dg;
  var dl;
  
  // reset table OpxSP_TT_DEPT_GROUPING
  for (var d in "OpxSP_TT_DEPT_GROUPING".findclass())
  {
    d.delete();
  }
  
  // populate
  for (var res in "OpxResource".findclass() where (res.LEVEL==3 || res.LEVEL==4) 
  && res.SP_AA_DEPT_GROUPING != "" )
  {
    dg = "OpxSP_TT_DEPT_GROUPING".findclass().get(res.SP_AA_DEPT_GROUPING);
    if (dg instanceof OpxSP_TT_DEPT_GROUPING)
    {
      dl = dg.SP_AA_S_DEPT_LIST.parsevector();
      dl.push(res.NAME);
      dg.SP_AA_S_DEPT_LIST = dl.join(",");
    }
    else
    {
      dg = new OpxSP_TT_DEPT_GROUPING("NAME",res.SP_AA_DEPT_GROUPING,"SP_AA_S_DEPT_LIST",res.NAME);
    }
  }
}
sp_dept_grouping_populate.exportfunction();
*/

// MPA: fonction utilisée dans le filtre "Dept grouping" du module "Reporting"
function sp_dept_grouping_set_dkm_filter()
{
	// this.SP_AA_S_CTX_REP_DEPT_GRP est le filtre "Dept Grouping" ("this" is an editor)
	// Récupère dans "dg" l'élement sélectionné dans le filtre (pourquoi ne pas faire directement dg = this.SP_AA_S_CTX_REP_DEPT_GRP ???)
	var dg = "OpxSP_TT_DEPT_GROUPING".findclass().get(this.SP_AA_S_CTX_REP_DEPT_GRP);

	if (dg instanceof OpxSP_TT_DEPT_GROUPING) {
		var level3 = new vector();
		var level4 = new vector();

		for (var rn in dg.SP_AA_S_DEPT_LIST.parsevector()) {
			var res = "OpxResource".get(rn);
			if (res instanceof OpxResource && res.LEVEL == 3)
				level3.push(res.NAME);
			else if (res instanceof OpxResource && res.LEVEL == 4)
				level4.push(res.NAME);
		}

		if (level3.length > 0)
			this.SP_AA_S_CTX_REP_DKM_FCT = level3.join(",");  // remplit le filtre "DKM Function"

		if (level4.length > 0)
			this.SP_AA_S_CTX_REP_DKM_FCT = "";   // vide le filtre "DKM Function"
	}
}
writetolog("Loading script SP_JS_FP_DEPT_GROUPING in revision ~a.",revision_number);

 
//	NAME	: SP_JS_GCI_DYNAMIC_ATTRIBUTES
//	AUTHOR  : mpaganon
//  PURPOSE : COMPASS v6 , gci dynamic attributes
//  
//  HISTORY :
var revision_number ="1.1";
//  
//	Revision 1.1 10/25/2019 ckeita
//	Revision 1.1 2017/08/11 bcordel
//	Modification to add the order by
//  

//-------------------------------------------------------------------------------------------------------------------
// Création des attributs dynamiques pour récupérer au niveau de l'activité et pour chacune des 25 essais cliniques:
//  - le type de test (lien vers la table GCI assays (old: "Clinical type of tests") : SP_RA_TEST_TYPE
//  - le nombre d'échantillons : SP_AA_N_SAMPLE_NB
// Ces info se trouvent dans la table "GCI information table" (SP_PT_GCI_INFO) qui est remplie dans l'onglet "GCI information" d'une activité de type S_GCI-LAB
// Il y a donc 25 essais possibles par activité
//-------------------------------------------------------------------------------------------------------------------

function get_clinical_type_test_from_gci_info(num) {
	if ((typeOf num) == "string")
		num = num.parseInt("####");
	if (this instanceOf OpxActivity)
		fromObject(this) {
			var cpt = 0;
			for (var obj in "Opx_sp_pt_gci_info" where obj.sp_ra_activity == this order by {"ONB"}) {
				cpt++; //if (obj.SP_AA_N_ASSAY_NB == num)
				if (cpt == num)
					return obj.SP_RA_TEST_TYPE.printAttribute();
			}
		}
	return "";
}

function get_sample_number_from_gci_info(num) {
	if ((typeOf num) == "string")
		num = num.parseInt("####");
	if (this instanceOf OpxActivity)
		fromObject(this.project) {
			var cpt = 0;
			for (var obj in "Opx_sp_pt_gci_info" where obj.sp_ra_activity == this order by {"ONB"}) {
				cpt++;
				if (cpt == num)
					return obj.SP_AA_N_SAMPLE_NB;
			}
		}
	return 0;
}

function get_gci_lab_from_gci_info(num) {
	if ((typeOf num) == "string")
		num = num.parseInt("####");
	if (this instanceOf OpxActivity)
		fromObject(this.project) {
			var cpt = 0;
			for (var obj in "Opx_sp_pt_gci_info" where obj.sp_ra_activity == this order by {"ONB"}) {
				cpt++;
				if (cpt == num)
					if (obj.SP_RA_TEST_TYPE != undefined
						&& obj.SP_RA_TEST_TYPE instanceOf Opx_SP_PT_CL_TEST) 
						return obj.SP_RA_TEST_TYPE.SP_AA_S_GCI_LAB;
					else
						return "";
			}
		}
	return "";
}


function get_is_active_from_gci_info(num) {
	if ((typeOf num) == "string")
		num = num.parseInt("####");
	if (this instanceOf OpxActivity)
		fromObject(this.project) {
			var cpt = 0;
			for (var obj in "Opx_sp_pt_gci_info" where obj.sp_ra_activity == this order by {"ONB"}) {
				cpt++;
				if (cpt == num)
					if (obj.SP_RA_TEST_TYPE != undefined
						&& obj.SP_RA_TEST_TYPE instanceOf Opx_SP_PT_CL_TEST) 
						return obj.SP_RA_TEST_TYPE.SP_AA_B_ASSAY_ACTIVE;
					else
						return false;
			}
		}
	return false;
}

//
// Création des 4 fois 25 attributs dynamics pour récupérer:
//  . GCI Assay      : SP_RA_TEST_TYPE
//  . No Sample      : SP_AA_N_SAMPLE_NB##
//  . GCI Lab        : SP_RA_TEST_TYPE.SP_AA_S_GCI_LAB
//  . Assay Active ? : SP_RA_TEST_TYPE.SP_AA_B_ASSAY_ACTIVE

for (var i = 1; i <= 25; i++)
{	
	// création/évaluation des fonctions
	var fct_assay   = "function read_test_type_from_gci_information_table_" + i + "() return get_clinical_type_test_from_gci_info(\"" + i + "\");";
	fct_assay.eval();

	var fct_sample = "function read_assay_number_from_gci_information_table_" + i + "() return get_sample_number_from_gci_info(\"" + i + "\");";
	fct_sample.eval();

	var fct_lab = "function read_gci_lab_from_gci_information_table_" + i + "() return get_gci_lab_from_gci_info(\"" + i + "\");";
	fct_lab.eval();

	var fct_active = "function read_assay_active_from_gci_information_table_" + i + "() return get_is_active_from_gci_info(\"" + i + "\");";
	fct_active.eval();

	// attribut dynamique pour récupérer l'attribut "GCI Assay #xx" sur la table GCI information
	var o_type_of_test_attribute      = new ObjectAttribute("OpxActivity","SP_DA_ACT_GCI_ASSAY_" + i, "STRING");
	o_type_of_test_attribute.reader   = new function("read_test_type_from_gci_information_table_" + i);
	o_type_of_test_attribute.comment  = "GCI Assay  #" + (i < 10 ? "0":"") + i;
	o_type_of_test_attribute.modifier = undefined;
	o_type_of_test_attribute.locker   = undefined;
	o_type_of_test_attribute.hiddenInIntranetServer = false;
	
	// attribut dynamique pour récupérer l'attribut "No. of Samples xx" sur la table GCI information
	var o_sample_number_attribute      = new ObjectAttribute("OpxActivity","SP_DA_ACT_NO_SAMPLE_" + i, "NUMBER");
	o_sample_number_attribute.reader   = new function("read_assay_number_from_gci_information_table_" + i);
	o_sample_number_attribute.comment  = "#GCI Samples #" + (i < 10 ? "0":"") + i;
	o_sample_number_attribute.modifier = undefined;
	o_sample_number_attribute.locker   = undefined;
	o_sample_number_attribute.hiddenInIntranetServer = false;
	
	// attribut dynamique pour récupérer l'attribut "GCI Lab" sur la table "GCI Assays" à partir de la relation SP_RA_TEST_TYPE (GCI information)
	var o_gci_lab_attribute      = new ObjectAttribute("OpxActivity","SP_DA_ACT_GCI_LAB_" + i, "STRING");
	o_gci_lab_attribute.reader   = new function("read_gci_lab_from_gci_information_table_" + i);
	o_gci_lab_attribute.comment  = "GCI Lab Name #" + (i < 10 ? "0":"") + i;
	o_gci_lab_attribute.modifier = undefined;
	o_gci_lab_attribute.locker   = undefined;
	o_gci_lab_attribute.hiddenInIntranetServer = false;
	
	// attribut dynamique pour récupérer l'attribut "Assay active" à partir de la relation SP_RA_TEST_TYPE (GCI information)
	var o_assay_active_attribute      = new ObjectAttribute("OpxActivity","SP_DA_ACT_ASSAY_ACTIVE_" + i, "BOOLEAN");
	o_assay_active_attribute.reader   = new function("read_assay_active_from_gci_information_table_" + i);
	o_assay_active_attribute.comment  = "GCI Assay Active " + (i < 10 ? "0":"") + i;
	o_assay_active_attribute.modifier = undefined;
	o_assay_active_attribute.locker   = undefined;
	o_assay_active_attribute.hiddenInIntranetServer = false;
}

//----------------------------
// Champ dynamique "GCI Release description" (SP_DA_S_ACT_GCI_RELEASE_DESC) en remplacement de "GCI Release description" (SP_AA_S_ACT_GCI_RELEASE_DESC)
// que l'on rend dynamique en renvoyant le "Step code" (SP_NF_CL_STEP_CODE) si SP_AA_S_ACT_GCI_RELEASE_DESC est vide, ou bien la valeur de ce dernier sinon.
// Le champ actuel SP_AA_S_ACT_GCI_RELEASE_DESC est modifié pour le rendre invisible en Intranet.
//----------------------------
function gci_release_description_reader()
{
	return (this.SP_AA_S_ACT_GCI_RELEASE_DESC == "" ? this.SP_NF_CL_STEP_CODE:this.SP_AA_S_ACT_GCI_RELEASE_DESC);
}

function gci_release_description_modifier(str)
{
	this.SP_AA_S_ACT_GCI_RELEASE_DESC = str;
}

var o_gci_release_description      = new ObjectAttribute("OpxActivity", "SP_DA_S_ACT_GCI_RELEASE_DESC", "STRING");
o_gci_release_description.comment  = "GCI Release description";
o_gci_release_description.reader   = gci_release_description_reader;
o_gci_release_description.modifier = gci_release_description_modifier;
o_gci_release_description.locker   = undefined;
o_gci_release_description.hiddenInIntranetServer = false;





/*
2. BIOSTATISTICS REORGANIZATION
2.3.2. OBS update
*/
function IsClinicalObs_reader()
{
	return this.SP_AA_B_IS_CLINICAL_OBS;
}

function IsClinicalObs_modifier(bool)
{
	fromobject(this)
	{
		for (var o_Obs in  "opxobs_element" )
		{
			o_Obs.SP_AA_B_IS_CLINICAL_OBS = bool;
		}
	}
}

var o_IsClinicalObs     = new ObjectAttribute("opxobs_element", "SP_DA_B_IS_CLINICAL_OBS", "BOOLEAN");
o_IsClinicalObs.comment  = "Is a clincal OBS?";
o_IsClinicalObs.reader   = IsClinicalObs_reader;
o_IsClinicalObs.modifier = IsClinicalObs_modifier;
o_IsClinicalObs.locker   = undefined;
o_IsClinicalObs.hiddenInIntranetServer = false;

writetolog("Loading script SP_JS_GCI_DYNAMIC_ATTRIBUTES in revision ~a.",revision_number);

//	NAME	: SP_JS_GCI_DYNAMIC_ATTRIBUTES
//	AUTHOR  : mpaganon
//  PURPOSE : COMPASS v6 , gci dynamic attributes
//  
//  HISTORY :
var revision_number ="1.1";
//  
//	Revision 1.1 10/25/2019 ckeita
//	Revision 1.1 2017/08/11 bcordel
//	Modification to add the order by
//  

//-------------------------------------------------------------------------------------------------------------------
// Création des attributs dynamiques pour récupérer au niveau de l'activité et pour chacune des 25 essais cliniques:
//  - le type de test (lien vers la table GCI assays (old: "Clinical type of tests") : SP_RA_TEST_TYPE
//  - le nombre d'échantillons : SP_AA_N_SAMPLE_NB
// Ces info se trouvent dans la table "GCI information table" (SP_PT_GCI_INFO) qui est remplie dans l'onglet "GCI information" d'une activité de type S_GCI-LAB
// Il y a donc 25 essais possibles par activité
//-------------------------------------------------------------------------------------------------------------------

function get_clinical_type_test_from_gci_info(num) {
	if ((typeOf num) == "string")
		num = num.parseInt("####");
	if (this instanceOf OpxActivity)
		fromObject(this) {
			var cpt = 0;
			for (var obj in "Opx_sp_pt_gci_info" where obj.sp_ra_activity == this order by {"ONB"}) {
				cpt++; //if (obj.SP_AA_N_ASSAY_NB == num)
				if (cpt == num)
					return obj.SP_RA_TEST_TYPE.printAttribute();
			}
		}
	return "";
}

function get_sample_number_from_gci_info(num) {
	if ((typeOf num) == "string")
		num = num.parseInt("####");
	if (this instanceOf OpxActivity)
		fromObject(this.project) {
			var cpt = 0;
			for (var obj in "Opx_sp_pt_gci_info" where obj.sp_ra_activity == this order by {"ONB"}) {
				cpt++;
				if (cpt == num)
					return obj.SP_AA_N_SAMPLE_NB;
			}
		}
	return 0;
}

function get_gci_lab_from_gci_info(num) {
	if ((typeOf num) == "string")
		num = num.parseInt("####");
	if (this instanceOf OpxActivity)
		fromObject(this.project) {
			var cpt = 0;
			for (var obj in "Opx_sp_pt_gci_info" where obj.sp_ra_activity == this order by {"ONB"}) {
				cpt++;
				if (cpt == num)
					if (obj.SP_RA_TEST_TYPE != undefined
						&& obj.SP_RA_TEST_TYPE instanceOf Opx_SP_PT_CL_TEST) 
						return obj.SP_RA_TEST_TYPE.SP_AA_S_GCI_LAB;
					else
						return "";
			}
		}
	return "";
}


function get_is_active_from_gci_info(num) {
	if ((typeOf num) == "string")
		num = num.parseInt("####");
	if (this instanceOf OpxActivity)
		fromObject(this.project) {
			var cpt = 0;
			for (var obj in "Opx_sp_pt_gci_info" where obj.sp_ra_activity == this order by {"ONB"}) {
				cpt++;
				if (cpt == num)
					if (obj.SP_RA_TEST_TYPE != undefined
						&& obj.SP_RA_TEST_TYPE instanceOf Opx_SP_PT_CL_TEST) 
						return obj.SP_RA_TEST_TYPE.SP_AA_B_ASSAY_ACTIVE;
					else
						return false;
			}
		}
	return false;
}

//
// Création des 4 fois 25 attributs dynamics pour récupérer:
//  . GCI Assay      : SP_RA_TEST_TYPE
//  . No Sample      : SP_AA_N_SAMPLE_NB##
//  . GCI Lab        : SP_RA_TEST_TYPE.SP_AA_S_GCI_LAB
//  . Assay Active ? : SP_RA_TEST_TYPE.SP_AA_B_ASSAY_ACTIVE

for (var i = 1; i <= 25; i++)
{	
	// création/évaluation des fonctions
	var fct_assay   = "function read_test_type_from_gci_information_table_" + i + "() return get_clinical_type_test_from_gci_info(\"" + i + "\");";
	fct_assay.eval();

	var fct_sample = "function read_assay_number_from_gci_information_table_" + i + "() return get_sample_number_from_gci_info(\"" + i + "\");";
	fct_sample.eval();

	var fct_lab = "function read_gci_lab_from_gci_information_table_" + i + "() return get_gci_lab_from_gci_info(\"" + i + "\");";
	fct_lab.eval();

	var fct_active = "function read_assay_active_from_gci_information_table_" + i + "() return get_is_active_from_gci_info(\"" + i + "\");";
	fct_active.eval();

	// attribut dynamique pour récupérer l'attribut "GCI Assay #xx" sur la table GCI information
	var o_type_of_test_attribute      = new ObjectAttribute("OpxActivity","SP_DA_ACT_GCI_ASSAY_" + i, "STRING");
	o_type_of_test_attribute.reader   = new function("read_test_type_from_gci_information_table_" + i);
	o_type_of_test_attribute.comment  = "GCI Assay  #" + (i < 10 ? "0":"") + i;
	o_type_of_test_attribute.modifier = undefined;
	o_type_of_test_attribute.locker   = undefined;
	o_type_of_test_attribute.hiddenInIntranetServer = false;
	
	// attribut dynamique pour récupérer l'attribut "No. of Samples xx" sur la table GCI information
	var o_sample_number_attribute      = new ObjectAttribute("OpxActivity","SP_DA_ACT_NO_SAMPLE_" + i, "NUMBER");
	o_sample_number_attribute.reader   = new function("read_assay_number_from_gci_information_table_" + i);
	o_sample_number_attribute.comment  = "#GCI Samples #" + (i < 10 ? "0":"") + i;
	o_sample_number_attribute.modifier = undefined;
	o_sample_number_attribute.locker   = undefined;
	o_sample_number_attribute.hiddenInIntranetServer = false;
	
	// attribut dynamique pour récupérer l'attribut "GCI Lab" sur la table "GCI Assays" à partir de la relation SP_RA_TEST_TYPE (GCI information)
	var o_gci_lab_attribute      = new ObjectAttribute("OpxActivity","SP_DA_ACT_GCI_LAB_" + i, "STRING");
	o_gci_lab_attribute.reader   = new function("read_gci_lab_from_gci_information_table_" + i);
	o_gci_lab_attribute.comment  = "GCI Lab Name #" + (i < 10 ? "0":"") + i;
	o_gci_lab_attribute.modifier = undefined;
	o_gci_lab_attribute.locker   = undefined;
	o_gci_lab_attribute.hiddenInIntranetServer = false;
	
	// attribut dynamique pour récupérer l'attribut "Assay active" à partir de la relation SP_RA_TEST_TYPE (GCI information)
	var o_assay_active_attribute      = new ObjectAttribute("OpxActivity","SP_DA_ACT_ASSAY_ACTIVE_" + i, "BOOLEAN");
	o_assay_active_attribute.reader   = new function("read_assay_active_from_gci_information_table_" + i);
	o_assay_active_attribute.comment  = "GCI Assay Active " + (i < 10 ? "0":"") + i;
	o_assay_active_attribute.modifier = undefined;
	o_assay_active_attribute.locker   = undefined;
	o_assay_active_attribute.hiddenInIntranetServer = false;
}

//----------------------------
// Champ dynamique "GCI Release description" (SP_DA_S_ACT_GCI_RELEASE_DESC) en remplacement de "GCI Release description" (SP_AA_S_ACT_GCI_RELEASE_DESC)
// que l'on rend dynamique en renvoyant le "Step code" (SP_NF_CL_STEP_CODE) si SP_AA_S_ACT_GCI_RELEASE_DESC est vide, ou bien la valeur de ce dernier sinon.
// Le champ actuel SP_AA_S_ACT_GCI_RELEASE_DESC est modifié pour le rendre invisible en Intranet.
//----------------------------
function gci_release_description_reader()
{
	return (this.SP_AA_S_ACT_GCI_RELEASE_DESC == "" ? this.SP_NF_CL_STEP_CODE:this.SP_AA_S_ACT_GCI_RELEASE_DESC);
}

function gci_release_description_modifier(str)
{
	this.SP_AA_S_ACT_GCI_RELEASE_DESC = str;
}

var o_gci_release_description      = new ObjectAttribute("OpxActivity", "SP_DA_S_ACT_GCI_RELEASE_DESC", "STRING");
o_gci_release_description.comment  = "GCI Release description";
o_gci_release_description.reader   = gci_release_description_reader;
o_gci_release_description.modifier = gci_release_description_modifier;
o_gci_release_description.locker   = undefined;
o_gci_release_description.hiddenInIntranetServer = false;





/*
2. BIOSTATISTICS REORGANIZATION
2.3.2. OBS update
*/
function IsClinicalObs_reader()
{
	return this.SP_AA_B_IS_CLINICAL_OBS;
}

function IsClinicalObs_modifier(bool)
{
	fromobject(this)
	{
		for (var o_Obs in  "opxobs_element" )
		{
			o_Obs.SP_AA_B_IS_CLINICAL_OBS = bool;
		}
	}
}

var o_IsClinicalObs     = new ObjectAttribute("opxobs_element", "SP_DA_B_IS_CLINICAL_OBS", "BOOLEAN");
o_IsClinicalObs.comment  = "Is a clincal OBS?";
o_IsClinicalObs.reader   = IsClinicalObs_reader;
o_IsClinicalObs.modifier = IsClinicalObs_modifier;
o_IsClinicalObs.locker   = undefined;
o_IsClinicalObs.hiddenInIntranetServer = false;

writetolog("Loading script SP_JS_GCI_DYNAMIC_ATTRIBUTES in revision ~a.",revision_number);

 
//	NAME	: SP_JS_GENERATE_BVA_DATA
//	AUTHOR  : bcordel
//  PURPOSE : COMPASS v6 , generation of Budget Variance Analysis data
//  
//  HISTORY :
var revision_number ="1.23";
//  Revision 1.23  2020/02/18 SSK : Updated sp_js_take_BVA_baseline to remove the condition of Level1 activity to load references for Projects which has only L1 activity
//  Revision 1.22  2019/09/03 bcordel
//	modification of function : sp_js_take_BVA_baseline , adding a check of the yearly date to avoid the BVA not taking into account YEARLY informations when it has been modified the same dy. 
//
//	Revision 1.21 ,To add "FPRM Only" field in BVA Report -Release V1.10.0.0
//
//  Revision 1.20  2018/10/16 SJAIN
//	Adding three fields : Critical ?, Phase (Clin Act) and FVFS (First step) in the BVA as per RITM0573633 request

//  Revision 1.19  2017/03/12 bcordel
//	modification of function : sp_js_generate_BVA_summary , changing the "Get" to add the file part. 
//
//  Revision 1.18  2017/03/08 bcordel
//	modification of function : sp_js_generate_BVA_summary , changin the filter on headcount to only impact actuals. 
//
//  Revision 1.17  2017/03/06 bcordel
//	creation of function : SP_JS_EMPTY_BVA_COST_PT , used to suppress cost data for BVA => ITS-INC0578156 
//
//  Revision 1.16  2017/03/01 bcordel
//	Modification of function : sp_js_cleaning_BVA_baseline adding control on file
//	Modification of function : sp_js_convert_fte_into_bva_entry correcting ITS-INC0532392
//
//  Revision 1.15  2017/12/14 flecanut
//  Modification of function : sp_js_generate_BVA_summary to add filter on Headcount="Direct"
//
//  Revision 1.14  2017/12/14 flecanut
//  Modification of function : sp_js_take_BVA_baseline --> correct "Budget" object creation (ALM 1196)
// 
//  Revision 1.13  2017/12/06 bcordel
//  Modification of function : sp_js_cleaning_BVA_baseline --> changing algorythme and cleaning up logs to have less
//  
//  Revision 1.12  2017/11/24 flecanut
//  Modification of function : sp_js_cleaning_BVA_baseline --> add withoutlocking when deleting + deleting only project data (do not delete project version data)
//  
//  Revision 1.11  2017/10/20 lfavre
//  Modification of function : SP_JS_IMPORT_BVA_COST --> Add start date and end date
//
//	Revision 1.10  2017/10/20 bcordel
//	Modifying sp_js_generate_BVA_summary and sp_js_convert_fte_into_bva_entry to fill the relation attribute resource
//
//	Revision 1.9  2017/08/04 bcordel
//	Adding a withoutlocking to generate bva summary
//
//	Revision 1.8  2017/06/27 bcordel
//	Modifying sp_js_convert_fte_into_bva_entry to add two new field
//
//	Revision 1.7  2017/06/15 bcordel
//	Modifying sp_js_cut_bva_entry_year and sp_js_convert_fte_into_bva_entry to remove notion of calendar in diff_date calculation
//	Modifying sp_js_convert_fte_into_bva_entry to ensure divisor are not null
//
//	Revision 1.6  2017/06/07 bcordel
//	Modifying sp_js_monthly_timeline_prep correcting the field updated
//
//	Revision 1.5  2017/05/31 bcordel
//	Modifying SP_JS_IMPORT_BVA_COST to include modification of import format
//	Correcting FTE convertion in sp_js_convert_fte_into_bva_entry 
//
//	Revision 1.4  2017/04/24 bcordel
//	Modifying naming of project entry in bva fte data cause of too long name => using now project code
//
//	Revision 1.3  2017/03/24 bcordel
//	Merge
//
//  Revision 1.2  2017/03/24 bcordel
//  adding information of department name when creating a new bva entry for department
//	adding function sp_js_generate_BVA_summary for monthly report
//	adding function sp_js_monthly_timeline_prep for monthly timelin preparation
//	adding function sp_js_prepare_new_monthly to launch all monthly report preparation
//	Revision 1.2 2017/03/24 ahasni
//	adding SP_JS_IMPORT_BVA_COST and SP_JS_EMPTY_BVA_COST_TT for cost import
//
//  Revision 1.1  2017/03/01 bcordel
//  fixing some issue with date (added sp_js_cut_bva_entry_year)
//
//  Revision 1.0  2017/02/15 bcordel
//  creation of the macro-script 




function sp_js_cleaning_BVA_baseline ()
{
	var n_table_entries_N_1 = 0;
	var n_table_entries_suppressed = 0;

	for (var o_project in "OpxProject" where o_project.STATE == "Active" && o_project.OPEN)
	{
		fromobject(o_project)
		{
			
			// We first suppress older entries in the table
			writetolog("Emptying N-1 reference objects from table SP_PT_BVA_BASELINE_DATA for project ~a",o_project.printattribute());
			for ( var o_N_1_entry in "OpxSP_PT_BVA_BASELINE_DATA" where o_N_1_entry.FILE==o_project && o_N_1_entry.SP_AA_S_BVA_REFERENCE == "N-1")
			{
				withoutlocking {
					o_N_1_entry.delete();
				}
				n_table_entries_suppressed ++;
			}
			

			// Then we change the N entries to N-1 entries.
			writetolog("Moving N reference objects from table SP_PT_BVA_BASELINE_DATA to N-1 reference for project ~a",o_project.printattribute());
			for ( var o_N_entry in "OpxSP_PT_BVA_BASELINE_DATA" where o_N_entry.FILE==o_project && o_N_entry.SP_AA_S_BVA_REFERENCE == "N")
			{
				o_N_entry.SP_AA_S_BVA_REFERENCE="N-1";
				o_N_entry.NAME = o_N_entry.NAME + "_old";
				n_table_entries_N_1++;
			}
		}
	}
	writetolog("~a object suppressed from table SP_PT_BVA_BASELINE_DATA",n_table_entries_suppressed);
	writetolog("~a object moved from N reference to N-1 reference.",n_table_entries_N_1);
	
	return 1;

}

function sp_js_cut_bva_entry_year (o_bva_entry)
{
	var o_resource = "OpxResource".get(o_bva_entry.SP_AA_S_BVA_RESOURCE);
	var s_cal = o_resource.CAL.NAME;
	
	var d_year_start = context.CallDateFormula ("PERIOD_START($DATE_OF_THE_DAY,\"YEAR\",-1)");
	var d_year_end = context.CallDateFormula ("PERIOD_START($DATE_OF_THE_DAY,\"YEAR\",0)");
	
	var d_bva_start=o_bva_entry.SP_AA_D_BVA_ALLOC_SD;
	var d_bva_finish=o_bva_entry.SP_AA_D_BVA_ALLOC_FD;
		
	var n_ratio = 0;
	
	// cleaning of BVA entries that are not on the year.
	if (d_bva_start >= d_year_end || d_bva_finish <= d_year_start)
	{
		o_bva_entry.delete();
		return 0;
	}
	
	if (d_bva_start < d_year_start)
	{
		n_ratio = o_bva_entry.CallNumberFormula("DIFF_DATE('"+d_year_start+"',SP_AA_D_BVA_ALLOC_FD,'') / DIFF_DATE(SP_AA_D_BVA_ALLOC_SD,SP_AA_D_BVA_ALLOC_FD,'')");
		o_bva_entry.SP_AA_D_BVA_ALLOC_SD = d_year_start;
		o_bva_entry.SP_AA_N_BVA_TOT_LOAD_DAYS = o_bva_entry.SP_AA_N_BVA_TOT_LOAD_DAYS*n_ratio;
		o_bva_entry.SP_AA_N_BVA_TOT_LOAD_FTE = o_bva_entry.SP_AA_N_BVA_TOT_LOAD_FTE*n_ratio;
	}
	
	if (d_bva_finish >= d_year_end)
	{
		n_ratio = o_bva_entry.CallNumberFormula("DIFF_DATE(SP_AA_D_BVA_ALLOC_SD,'"+d_year_end+"','') / DIFF_DATE(SP_AA_D_BVA_ALLOC_SD,SP_AA_D_BVA_ALLOC_FD,'')");
		o_bva_entry.SP_AA_D_BVA_ALLOC_FD = d_year_end;
		o_bva_entry.SP_AA_N_BVA_TOT_LOAD_DAYS = o_bva_entry.SP_AA_N_BVA_TOT_LOAD_DAYS*n_ratio;
		o_bva_entry.SP_AA_N_BVA_TOT_LOAD_FTE = o_bva_entry.SP_AA_N_BVA_TOT_LOAD_FTE*n_ratio;
	}
	
	
}

function sp_js_convert_fte_into_bva_entry (s_fte_type,o_fte)
{
	
	var o_project = o_fte.PROJECT;
	var o_act = o_fte.ACTIVITY
	var o_res = o_fte.RES;
	var s_department_entry_name = o_res.SP_NF_CL_DEPARTMENT+"_"+o_project.SPAS_AA_PROJECT_CODE;
	var n_entry = 0;
	
	// ITS-INC0532392 - "Get" function can return version element so we add the project in the identifier.
	var o_project_entry = "OpxSP_PT_BVA_BASELINE_DATA".get(o_project.printattribute()+":"+o_project.SPAS_AA_PROJECT_CODE);

	// Creation of project line in case it does not exist.
	if ( o_project_entry == undefined || o_project_entry =="")
	{
		o_project_entry = new "OpxSP_PT_BVA_BASELINE_DATA" ("FILE",o_project,"NAME",o_project.SPAS_AA_PROJECT_CODE,"SP_AA_BVA_FTE_CATEGORY","Project","SP_AA_S_BVA_REFERENCE","N");
		// writetolog("Creation of BVA project entry for ~a",o_project);
	}
	
	var o_bva_dept_entry = "OpxSP_PT_BVA_BASELINE_DATA".get(o_project.printattribute()+":"+s_department_entry_name);
	// Creation of department line in case it does not exist.
	if ( o_bva_dept_entry == undefined || o_bva_dept_entry =="" )
	{
		var o_dept_res = o_res
		while (o_dept_res.LEVEL>3)
		{
			o_dept_res=o_dept_res.CHILD_OF;
		}
		o_bva_dept_entry = new "OpxSP_PT_BVA_BASELINE_DATA" ("FILE",o_project,"NAME",s_department_entry_name,"SP_AA_BVA_FTE_CATEGORY","Department","PARENT",o_project_entry,"SP_AA_S_BVA_REFERENCE","N","SP_AA_S_BVA_DEPT",o_res.SP_NF_CL_DEPARTMENT,"SP_RA_BVA_RESSOURCE",o_dept_res);
		// writetolog("Creation of BVA entry for department ~a in ~a",s_department_entry_name,o_project);
	} 
	///////////////////////////////////////
	// Vector for creation of the new entry
	/////////////////////////////////////////
	var v_BVA_DATA = new vector();
	
	//Technical element
	v_BVA_DATA.push("PARENT");v_BVA_DATA.push(o_bva_dept_entry);
	v_BVA_DATA.push("FILE");v_BVA_DATA.push(o_project);
	v_BVA_DATA.push("SP_AA_S_BVA_REFERENCE");v_BVA_DATA.push("N");
	
	// Project information
 	v_BVA_DATA.push("SP_AA_S_BVA_FRANCHISE");v_BVA_DATA.push(o_project.CallStringFormula("BREAKDOWN_1"));
	v_BVA_DATA.push("SP_AA_S_BVA_MAIN_PORTFOLIO");v_BVA_DATA.push(o_project.CallStringFormula("SP_NF_S_PRJ_MAIN_PORTFOLIO"));
	v_BVA_DATA.push("SP_AA_S_BVA_PORTFOLIO");v_BVA_DATA.push(o_project.BREAKDOWN_2.NAME);
	v_BVA_DATA.push("SP_AA_S_BVA_PRJ_CODE");v_BVA_DATA.push(o_project.SPAS_AA_PROJECT_CODE);
	v_BVA_DATA.push("SP_AA_S_BVA_PRJ_LEADER_SITE");v_BVA_DATA.push(o_project.SP_AA_S_PJT_LEADER_SITE);
	v_BVA_DATA.push("SP_AA_S_BVA_PRJ_NAME");v_BVA_DATA.push(o_project.NAME);
	v_BVA_DATA.push("SP_AA_S_BVA_SEGMENT");v_BVA_DATA.push(o_project.SP_AA_AT_PROJECT_SEGMENT);
	v_BVA_DATA.push("SP_AA_S_BVA_TIER");v_BVA_DATA.push(o_project.CallStringFormula("SP_AA_AT_PROJECT_TIER"));
	v_BVA_DATA.push("SP_AA_S_BVA_TIER_SEGMENT");v_BVA_DATA.push(o_project.CallStringFormula("SP_NF_S_TIER_SEGMENT"));
	
	// Activity information
	v_BVA_DATA.push("SP_AA_D_BVA_ACT_PF");v_BVA_DATA.push(o_act.PF);
	v_BVA_DATA.push("SP_AA_D_BVA_ACT_PS");v_BVA_DATA.push(o_act.PS);
	v_BVA_DATA.push("SP_AA_N_BVA_ONB_ACT");v_BVA_DATA.push(o_act.ONB);
	v_BVA_DATA.push("SP_AA_S_BVA_ACT_ID");v_BVA_DATA.push(o_act.CallStringFormula("ID"));
	v_BVA_DATA.push("SP_AA_S_BVA_ACT_NAME");v_BVA_DATA.push(o_act.NAME);
	v_BVA_DATA.push("SP_AA_S_BVA_ACT_SITE");v_BVA_DATA.push(o_act.CallStringFormula("BREAKDOWN_3"));
	v_BVA_DATA.push("SP_AA_S_BVA_ACT_TYPE");v_BVA_DATA.push(o_act.CallStringFormula("WBS_TYPE"));
	v_BVA_DATA.push("SP_AA_S_BVA_ACT_DESC");v_BVA_DATA.push(o_act.DESC);
	v_BVA_DATA.push("SP_AA_B_BVA_APAO_PRJ");v_BVA_DATA.push(o_act.SP_NF_B_ACT_APAO_PRJ);
	v_BVA_DATA.push("SP_AA_S_BVA_APAO_PRJ_LIST");v_BVA_DATA.push(o_act.SP_NF_S_ACT_APAO_PRJ_LIST);
	v_BVA_DATA.push("SP_AA_S_BVA_APPROACH");v_BVA_DATA.push(o_act.CallStringFormula("BREAKDOWN_0"));
	v_BVA_DATA.push("SP_AA_S_BVA_NCS_STUDY_CODE");v_BVA_DATA.push(o_act.SP_NF_S_NCS_STUDY_CODE);
	v_BVA_DATA.push("SP_AA_S_BVA_NCS_STUDY_STATUS");v_BVA_DATA.push(o_act.SP_NF_S_NCS_STUDY_STATUS_2);
	v_BVA_DATA.push("SP_AA_S_BVA_OBS_ELEMENT");v_BVA_DATA.push(o_act.CallStringFormula("OBS_ELEMENT"));
	v_BVA_DATA.push("SP_AA_S_BVA_STUDY_CAT");v_BVA_DATA.push(o_act.SP_AA_S_STUDY_CAT);
	v_BVA_DATA.push("SP_AA_S_BVA_TRIAL_CODE");v_BVA_DATA.push(o_act.SP_NF_CL_TRIAL_CODE);
	v_BVA_DATA.push("SP_AA_S_BVA_TRIAL_STATUS");v_BVA_DATA.push(o_act.SP_NF_CL_TRIAL_STATUS_GLOBAL);
	v_BVA_DATA.push("SP_AA_S_BVA_WORKPACKAGE");v_BVA_DATA.push(o_act.SP_AA_ACT_BRD_OUTPUT_CATEG);
	v_BVA_DATA.push("SP_AA_S_BVA_PRODUCT_MED");v_BVA_DATA.push(o_act.SP_AA_ACT_FP_PRODUCT_MED);
				//Revision 1.20, adding follwoing 3 fields.
	v_BVA_DATA.push("SP_AA_B_BVA_CRITICAL");v_BVA_DATA.push(o_act.SP_AA_B_CRITICAL);
	v_BVA_DATA.push("SP_AA_CL_BVA_TRIAL_PHASE");v_BVA_DATA.push(o_act.SP_NF_CL_TRIAL_PHASE);
	v_BVA_DATA.push("SP_AA_CL_BVA_FIRST_FVFS");v_BVA_DATA.push(o_act.SP_NF_CL_FIRST_FVFS);
				//Revision 1.21 ,To add "FPRM Only" field in BVA Report -Release V1.10.0.0
	v_BVA_DATA.push("SP_AA_BVA_S_FPRM_ONLY");v_BVA_DATA.push(o_act.SP_UA_S_FPRM);
	
	
	
	//Resource information
	v_BVA_DATA.push("SP_RA_BVA_RESSOURCE");v_BVA_DATA.push(o_res);
	v_BVA_DATA.push("SP_AA_S_BVA_COST_CENTER");v_BVA_DATA.push(o_res.CallStringFormula("OBS_ELEMENT"));
	v_BVA_DATA.push("SP_AA_S_BVA_DEPT");v_BVA_DATA.push(o_res.SP_NF_CL_DEPARTMENT);
	v_BVA_DATA.push("SP_AA_S_BVA_DEPT_GROUP");v_BVA_DATA.push(o_res.SP_NF_RES_DEPT_GROUPING);
	v_BVA_DATA.push("SP_AA_S_BVA_RES_ORGANIZATION");v_BVA_DATA.push(o_res.SP_NF_S_DEPT_RES);
	v_BVA_DATA.push("SP_AA_S_BVA_RES_REGION");v_BVA_DATA.push(o_res.SP_NF_S_FTE_RES_REGION);
	v_BVA_DATA.push("SP_AA_S_BVA_PROFILE");v_BVA_DATA.push(o_res.SP_NF_CL_PROFILE);
	v_BVA_DATA.push("SP_AA_S_BVA_RESOURCE");v_BVA_DATA.push(o_res.NAME); 
	v_BVA_DATA.push("SP_AA_S_BVA_HEADCOUNT");v_BVA_DATA.push(o_res._SP_AA_S_RES_HEADCOUNT);
	
	
	// FTE information
	v_BVA_DATA.push("SP_AA_N_BVA_ONB_ALLOC");v_BVA_DATA.push(o_fte.ONB);
	v_BVA_DATA.push("SP_AA_S_BVA_ACTIVITY");v_BVA_DATA.push(o_fte.CallStringFormula("ACTIVITY"));
	v_BVA_DATA.push("SP_AA_S_BVA_COST_ACCOUNT");v_BVA_DATA.push(o_fte.CallStringFormula("COST_ACCOUNT")); 
	
	if (s_fte_type == "Actual")
	{
		v_BVA_DATA.push("SP_AA_S_BVA_PLATFORM");v_BVA_DATA.push(o_res._SP_TT_NF_S_INDIV_RES_PLATFORM); 	
		
		v_BVA_DATA.push("SP_AA_D_BVA_ALLOC_SD");v_BVA_DATA.push(o_fte.SD);
		v_BVA_DATA.push("SP_AA_D_BVA_ALLOC_FD");v_BVA_DATA.push(o_fte.ED);
		
		v_BVA_DATA.push("SP_AA_BVA_FTE_CATEGORY");v_BVA_DATA.push(s_fte_type);
		
		v_BVA_DATA.push("SP_AA_N_BVA_TOT_LOAD_DAYS");v_BVA_DATA.push(o_fte.TOTAL_LOAD/o_fte.SP_NF_CONV_DAY);
		v_BVA_DATA.push("SP_AA_S_BVA_ALLOC_SITE");v_BVA_DATA.push(o_res.CallStringFormula("SP_RA_SITE"));
		
		if (o_fte.SP_NF_CONV_FTE != 0 || o_fte.SP_NF_CONV_DAY != 0)
		{
			v_BVA_DATA.push("SP_AA_N_BVA_TOT_LOAD_FTE");v_BVA_DATA.push(o_fte.TOTAL_LOAD/(o_fte.SP_NF_CONV_FTE*o_fte.SP_NF_CONV_DAY));
		}
		else 
		{
			writetolog("Error while creating a BVA Actual for activity ~a : one of the converter is null. Can't divide.", o_act.NAME);
			n_entry--;
		}
	}
	else if (s_fte_type == "Budget")
	{
		v_BVA_DATA.push("SP_AA_S_BVA_PLATFORM");v_BVA_DATA.push(o_res.CallStringFormula("CHILD_OF.DESC")); 	
		
		v_BVA_DATA.push("SP_AA_D_BVA_ALLOC_SD");v_BVA_DATA.push(o_fte.SD);
		v_BVA_DATA.push("SP_AA_D_BVA_ALLOC_FD");v_BVA_DATA.push(o_fte.ED);
		
		v_BVA_DATA.push("SP_AA_S_BVA_LABEL");v_BVA_DATA.push(o_fte.COMMENT);
		v_BVA_DATA.push("SP_AA_S_BVA_ALLOC_DESC");v_BVA_DATA.push(o_fte.SP_NF_PH_COMMENT);
		v_BVA_DATA.push("SP_AA_S_BVA_COMMENT");v_BVA_DATA.push(o_fte.SP_AA_S_PH_FTE_COMMENTS);
		
		v_BVA_DATA.push("SP_AA_N_BVA_TOT_LOAD_DAYS");v_BVA_DATA.push(o_fte.TOTAL_LOAD);
		v_BVA_DATA.push("SP_AA_S_BVA_ALLOC_SITE");v_BVA_DATA.push(o_fte.CallStringFormula("SPAS_RA_SITE"));
		
		var n_fte_converter = o_fte.SPAS_RA_SITE.CallNumberFormula("SP_NF_CONV_FTE");
		
		if (n_fte_converter != 0)
		{
			v_BVA_DATA.push("SP_AA_N_BVA_TOT_LOAD_FTE");v_BVA_DATA.push(o_fte.TOTAL_LOAD/n_fte_converter);
		}
		else 
		{
			writetolog("Error while creating a BVA Budget for activity ~a : one of the converter is null. Can't divide.", o_act.NAME);
			n_entry--;
		}
		
 		v_BVA_DATA.push("SP_AA_BVA_FTE_CATEGORY");v_BVA_DATA.push(s_fte_type);
	}
	else if (s_fte_type == "Planned")
	{
		v_BVA_DATA.push("SP_AA_S_BVA_PLATFORM");v_BVA_DATA.push(o_res.CallStringFormula("CHILD_OF.DESC")); 
		
		v_BVA_DATA.push("SP_AA_S_BVA_LABEL");v_BVA_DATA.push(o_fte.COMMENT);
		v_BVA_DATA.push("SP_AA_S_BVA_ALLOC_DESC");v_BVA_DATA.push(o_fte.SP_NF_PH_COMMENT);
		v_BVA_DATA.push("SP_AA_S_BVA_COMMENT");v_BVA_DATA.push(o_fte.SP_AA_S_PH_FTE_COMMENTS);
		
		v_BVA_DATA.push("SP_AA_S_BVA_ALLOC_SITE");v_BVA_DATA.push(o_fte.CallStringFormula("SPAS_RA_SITE"));
		
		
		if (o_fte.CallBooleanFormula("FD <= OC.SP_NF_D_CTX_LAST_INTEGRATION"))
		{
			s_fte_type = "Past Planned";
			v_BVA_DATA.push("SP_AA_D_BVA_ALLOC_SD");v_BVA_DATA.push(o_fte.SD);
			v_BVA_DATA.push("SP_AA_D_BVA_ALLOC_FD");v_BVA_DATA.push(o_fte.FD);
			v_BVA_DATA.push("SP_AA_N_BVA_TOT_LOAD_DAYS");v_BVA_DATA.push(o_fte.TOTAL_LOAD);
			if (o_fte.SP_NF_CONV_FTE != 0)
			{
				v_BVA_DATA.push("SP_AA_N_BVA_TOT_LOAD_FTE");v_BVA_DATA.push(o_fte.TOTAL_LOAD/o_fte.SP_NF_CONV_FTE);
			}
			else 
			{
				writetolog("Error while creating a BVA Past Planned for activity ~a : one of the converter is null. Can't divide.", o_act.NAME);
				n_entry--;
			}
			
			v_BVA_DATA.push("SP_AA_BVA_FTE_CATEGORY");v_BVA_DATA.push(s_fte_type);
			
			
		}
		else if (o_fte.CallBooleanFormula("SD >= OC.SP_NF_D_CTX_LAST_INTEGRATION"))
		{
			s_fte_type = "Planned";
			v_BVA_DATA.push("SP_AA_D_BVA_ALLOC_SD");v_BVA_DATA.push(o_fte.SD);
			v_BVA_DATA.push("SP_AA_D_BVA_ALLOC_FD");v_BVA_DATA.push(o_fte.FD);
			v_BVA_DATA.push("SP_AA_N_BVA_TOT_LOAD_DAYS");v_BVA_DATA.push(o_fte.TOTAL_LOAD);
			if (o_fte.SP_NF_CONV_FTE != 0)
			{
				v_BVA_DATA.push("SP_AA_N_BVA_TOT_LOAD_FTE");v_BVA_DATA.push(o_fte.TOTAL_LOAD/o_fte.SP_NF_CONV_FTE);
			}
			else 
			{
				writetolog("Error while creating a BVA Planned for activity ~a : one of the converter is null. Can't divide.", o_act.NAME);
				n_entry--;
			}
			
			v_BVA_DATA.push("SP_AA_BVA_FTE_CATEGORY");v_BVA_DATA.push(s_fte_type);
			
		}
		else
		{
			var n_ratio_past = 0;
			var n_ratio_planned = 0;
			n_ratio_past = o_fte.CallNumberFormula("evaluate_number(\"DIFF_DATE(SD,OC.SP_NF_D_CTX_LAST_INTEGRATION,'')\") / evaluate_number(\"DIFF_DATE(SD,FD,'')\")");
			n_ratio_planned = o_fte.CallNumberFormula("evaluate_number(\"DIFF_DATE(OC.SP_NF_D_CTX_LAST_INTEGRATION,FD,'')\") / evaluate_number(\"DIFF_DATE(SD,FD,'')\")");
			
			var v_BVA_DATA_planned = new vector ();
			v_BVA_DATA_planned = v_BVA_DATA.copy();
			
			s_fte_type = "Past Planned";
			v_BVA_DATA.push("SP_AA_D_BVA_ALLOC_FD");v_BVA_DATA.push(context.SP_NF_D_CTX_LAST_INTEGRATION);
			v_BVA_DATA.push("SP_AA_D_BVA_ALLOC_SD");v_BVA_DATA.push(o_fte.SD);
			v_BVA_DATA.push("SP_AA_N_BVA_TOT_LOAD_DAYS");v_BVA_DATA.push(o_fte.TOTAL_LOAD*n_ratio_past);
			if (o_fte.SP_NF_CONV_FTE != 0)
			{
				v_BVA_DATA.push("SP_AA_N_BVA_TOT_LOAD_FTE");v_BVA_DATA.push((o_fte.TOTAL_LOAD*n_ratio_past)/o_fte.SP_NF_CONV_FTE);
			}
			else 
			{
				writetolog("Error while creating a BVA Past Planned for activity ~a : one of the converter is null. Can't divide.", o_act.NAME);
				n_entry--;
			}
			v_BVA_DATA.push("SP_AA_BVA_FTE_CATEGORY");v_BVA_DATA.push(s_fte_type);
			
			v_BVA_DATA_planned.push("SP_AA_D_BVA_ALLOC_SD");v_BVA_DATA_planned.push(context.SP_NF_D_CTX_LAST_INTEGRATION);
			v_BVA_DATA_planned.push("SP_AA_D_BVA_ALLOC_FD");v_BVA_DATA_planned.push(o_fte.FD);
			v_BVA_DATA_planned.push("SP_AA_N_BVA_TOT_LOAD_DAYS");v_BVA_DATA_planned.push(o_fte.TOTAL_LOAD*n_ratio_planned);
			if (o_fte.SP_NF_CONV_FTE != 0)
			{
				v_BVA_DATA_planned.push("SP_AA_N_BVA_TOT_LOAD_FTE");v_BVA_DATA_planned.push((o_fte.TOTAL_LOAD*n_ratio_planned)/o_fte.SP_NF_CONV_FTE);
			}
			else 
			{
				writetolog("Error while creating a BVA Planned for activity ~a : one of the converter is null. Can't divide.", o_act.NAME);
				n_entry--;
			}
			v_BVA_DATA_planned.push("SP_AA_BVA_FTE_CATEGORY");v_BVA_DATA_planned.push("Planned");
			
			//Creation of the Planned allocation
			try{
				var name = "Planned" + o_fte.ONB;
				v_BVA_DATA_planned.push("NAME");v_BVA_DATA_planned.push(name);
				var o_bva_entry_planned = "OpxSP_PT_BVA_BASELINE_DATA".makeopx2ObjectWithPlist(v_BVA_DATA_planned);
				sp_js_cut_bva_entry_year(o_bva_entry_planned);
				n_entry++;
			} catch (error e){
				writetolog("Error while creating a planned BVA line for activity ~a : ~a", o_act.NAME,e);
			}
			v_BVA_DATA_planned.clear();
		}
	}
	//////////////////////////////////////////////////////////////

	
	try{
		var name = s_fte_type + o_fte.ONB;
		v_BVA_DATA.push("NAME");v_BVA_DATA.push(name);
		var o_bva_entry = "OpxSP_PT_BVA_BASELINE_DATA".makeopx2ObjectWithPlist(v_BVA_DATA);
		sp_js_cut_bva_entry_year(o_bva_entry);
		n_entry++;
	} catch (error e){
		writetolog("Error while creating a BVA line for activity ~a : ~a", o_act.NAME,e);
	}
	v_BVA_DATA.clear();
		
	return n_entry;
	
}

method sp_js_take_BVA_baseline on "OpxProject" ()
{
	/********* variables *************/
	var n_entries_created = 0;
	var n_entry = 0;
	var b_creation_error = false;
	var o_current_project = this;
	withoutlocking{
	
	//test act
	for (var o_act in "opxActivity" where o_act.PROJECT==o_current_project)
	{
		writetolog("activity ~a and its yearly date ~a",o_act,o_act.SD_YEARLY);
		break;
	}
	
	// NB : fromobject does not work on "OpxREFERENCED_TASK_ALLOC"
	for (var o_budget_fte in "OpxREFERENCED_TASK_ALLOC" where o_budget_fte.PROJECT==o_current_project )
	{
		
		if (o_budget_fte.REFERENCE.NAME=="YEARLY" || o_budget_fte.REFERENCE.NAME=="")
		{
			writetolog("Budget ~a",o_budget_fte.REFERENCE.NAME);
			n_entry = sp_js_convert_fte_into_bva_entry("Budget",o_budget_fte);
			if (n_entry==0)
			{
				b_creation_error = true;
			}
			n_entries_created+=n_entry;
		}
	}
	fromobject(o_current_project)
	{
		for (var o_planned_fte in "OpxTASK_ALLOC" where o_planned_fte.PROJECT==o_current_project && o_planned_fte.SP_NF_B_PH_IN_CUR_YEAR)
		{
			
			n_entry=sp_js_convert_fte_into_bva_entry("Planned",o_planned_fte);
			if (n_entry==0)
			{
				b_creation_error = true;
			}
			n_entries_created += n_entry ;
			//writetolog("Planned");
		}
		for (var o_actual in "OpxWORK_PERFORMED" where o_actual.PROJECT==o_current_project && o_actual.SP_NF_B_AH_IN_CUR_YEAR)
		{
			n_entry = sp_js_convert_fte_into_bva_entry("Actual",o_actual);
			if (n_entry<=0)
			{
				b_creation_error = true;
			}
			n_entries_created+=n_entry;
			
			//writetolog("Actual");
		}
	}
	
	}
	
	var v_return = new vector (n_entries_created,b_creation_error);
	
	return v_return;
}
	

function sp_js_process_BVA_baseline ()
{
writetolog("****************************************** Start of processing for Budget Variance Analysis ***************************************");

	// objects counter //
	var n_project_counter = 0;
	var n_total_project = 0;
	var n_table_entries_N = 0;
	var v_return = new vector("","");
	var n_entry_per_project = 0;
	var n_return_code = 0;
	var d_date_of_day = new date();
	
	//Cleaning of old entries and moving of previous from N to N-1
	sp_js_cleaning_BVA_baseline();
	
	//Writing data of BVA baseline in table SP_PT_BVA_BASELINE_DATA
	for (var prj in "OpxProject" where prj.STATE == "Active" && prj.OPEN)
	{
		n_total_project++;	
	}
	writetolog("total number of project : ~a ",n_total_project);

	for (var o_project in "OpxProject" where o_project.STATE == "Active" && o_project.OPEN )
	{
		n_project_counter++;
		writetolog("Processing of project number ~a on ~a : ~a",n_project_counter,n_total_project,o_project.NAME);	
		v_return = o_project.sp_js_take_BVA_baseline();
		n_entry_per_project = v_return[0];
		if ( v_return[1] == true) { n_return_code = 1; }
		n_table_entries_N += n_entry_per_project;
		o_project.SP_AA_D_PRJ_BVA_DATA_DATE= d_date_of_day;
		writetolog(" ~a entries written for project ~a ", n_entry_per_project, o_project.NAME);
	}
	
	writetolog("Number of entries written for ~a projects : ~a ", n_total_project,n_table_entries_N);
	
writetolog("****************************************** End of processing for Budget Variance Analysis ***************************************");

	return n_return_code;
}
sp_js_process_BVA_baseline.exportfunction();

function sp_js_generate_BVA_summary ()
{
writetolog("****************************************** Starting summary of BVA data ***************************************");
withoutlocking{
	var n_counter = 0;
	for (var o_project in "OpxProject" where o_project.STATE == "Active" && o_project.OPEN )
	{
		n_counter = 0;
		writetolog("Generating bva summary for ~a.",o_project);
		fromobject(o_project){
			//Cleaning of previous data
			writetolog("Cleaning bva summary.");
			for (var o_bva_sum in "OpxSP_PT_BVA_SUMMARY" where o_bva_sum.FILE==o_project)
			{
				o_bva_sum.SP_AA_N_BVA_SUM_ACTUAL = 0;
				o_bva_sum.SP_AA_N_BVA_SUM_BUDGET = 0;
				o_bva_sum.SP_AA_N_BVA_SUM_PLANNED = 0;
				o_bva_sum.SP_AA_N_BVA_SUM_VARIANCE_DAYS = 0;
				n_counter++;
			}
			writetolog("~a entries of bva summary cleaned.",n_counter);
			n_counter=0;
			writetolog("Creation and update of bva summary entries.");
			// we want one entry per department lvl of BVA data
			for (var o_bva_dept in "OpxSP_PT_BVA_BASELINE_DATA" where o_bva_dept.SP_AA_S_BVA_REFERENCE == "N" && o_bva_dept.getAttributeStringValue("SP_AA_BVA_FTE_CATEGORY") == "5")
			{
				n_counter++;
				var o_analysis_entry = "OpxSP_PT_BVA_SUMMARY".get(o_project.printattribute()+":"+o_bva_dept.name);
				//checking if dptmt entry exist, create it if not
				if ( o_analysis_entry Instanceof OpxSP_PT_BVA_SUMMARY && o_analysis_entry != undefined)
				{
					// writetolog("Entry ~a already existing.",o_analysis_entry);
				}else{
					var o_res=o_bva_dept.SP_RA_BVA_RESSOURCE;
					
					o_analysis_entry = new "OpxSP_PT_BVA_SUMMARY" ("FILE",o_project,"NAME",o_bva_dept.name,"SP_AA_S_BVA_SUM_DEPT",o_bva_dept.SP_AA_S_BVA_DEPT,"SP_RA_S_BVA_SUM_DEPT",o_res);
					// writetolog("Creating new entry ~a.",o_analysis_entry);
				}
				
				//addition of each bva entry under the department lvl to the summary.
				// ALM 1373 : Add filter on Headcount="Direct"
				fromobject(o_bva_dept){
					for (var o_bva_entry in "OpxSP_PT_BVA_BASELINE_DATA" where o_bva_entry.PARENT == o_bva_dept )
					{
						var s_category = o_bva_entry.getAttributeStringValue("SP_AA_BVA_FTE_CATEGORY");
						// writeln(o_bva_entry);
						// writeln(o_bva_entry.SP_AA_BVA_FTE_CATEGORY);
						switch(s_category.parsenumber()) {
							case 0 :if(o_bva_entry.SP_AA_S_BVA_HEADCOUNT=="Direct"){o_analysis_entry.SP_AA_N_BVA_SUM_ACTUAL = o_analysis_entry.SP_AA_N_BVA_SUM_ACTUAL + o_bva_entry.SP_AA_N_BVA_TOT_LOAD_FTE; //Actuals
							o_analysis_entry.SP_AA_N_BVA_SUM_VARIANCE_DAYS = o_analysis_entry.SP_AA_N_BVA_SUM_VARIANCE_DAYS + o_bva_entry.SP_AA_N_BVA_TOT_LOAD_DAYS;}
							case 1 : o_analysis_entry.SP_AA_N_BVA_SUM_PLANNED = o_analysis_entry.SP_AA_N_BVA_SUM_PLANNED + o_bva_entry.SP_AA_N_BVA_TOT_LOAD_FTE; //Planned
									o_analysis_entry.SP_AA_N_BVA_SUM_VARIANCE_DAYS = o_analysis_entry.SP_AA_N_BVA_SUM_VARIANCE_DAYS + o_bva_entry.SP_AA_N_BVA_TOT_LOAD_DAYS;
							case 3 : o_analysis_entry.SP_AA_N_BVA_SUM_BUDGET = o_analysis_entry.SP_AA_N_BVA_SUM_BUDGET + o_bva_entry.SP_AA_N_BVA_TOT_LOAD_FTE; //Budget
									o_analysis_entry.SP_AA_N_BVA_SUM_VARIANCE_DAYS = o_analysis_entry.SP_AA_N_BVA_SUM_VARIANCE_DAYS - o_bva_entry.SP_AA_N_BVA_TOT_LOAD_DAYS;
							// default : writeln (s_category);
						}
					}
				}
			}
			writetolog("~a bva summary entries updated.",n_counter);
		}
		o_project.SP_AA_D_PRJ_BVA_SUM_DATE = o_project.SP_AA_D_PRJ_BVA_DATA_DATE;
		writetolog("Ending bva summary generation for ~a.",o_project);
	}
}
writetolog("****************************************** Ending summary of BVA data ***************************************");
	return 0;
}
sp_js_generate_BVA_summary.exportfunction();

function sp_js_monthly_timeline_prep ()
{
writetolog("********************************** Starting preparation of monthly timeline *********************************");
	var n_counter = 0;
	withoutlocking{
		for (var o_project in "OpxProject" where o_project.STATE == "Active" && o_project.OPEN )
		{
		fromobject(o_project)
		{
			n_counter = 0;
			for ( var o_act in "OpxActivity" where o_act.PROJECT == o_project && o_act.SP_NF_B_ACT_IN_TIMELINE && !o_act._PM_AA_B_DISPLAY_IN_ROA)
			{
				o_act._PM_AA_B_DISPLAY_IN_ROA = true;
				n_counter++;
			}
			writetolog("~a activities added in timeline for ~a.",n_counter,o_project);
		}
		}
	}
	return 0;
writetolog("********************************** Ending preparation of monthly timeline *********************************");
}

function sp_js_prepare_new_monthly ()
{
writetolog("********************************** Starting update of monthly report *********************************");
	// generation of bva summary data
	sp_js_generate_BVA_summary();
	// preparation of monthly timeline
	sp_js_monthly_timeline_prep();
writetolog("********************************** Starting update of monthly report *********************************");	
}
sp_js_prepare_new_monthly.exportfunction();

function SP_JS_IMPORT_BVA_COST(){
	//hashtable association  project code  -  project name
	var htTable =  new hashtable("STRING")
	for (var each in opxProject where each.ORIGIN_PROJECT==undefined || each.ORIGIN_PROJECT==""){
		htTable.set(each.SPAS_AA_PROJECT_CODE,each.printattribute())
	}
	
	// Current Year to evaluate Start Date and End DATE_OF_THE_DAY
	var current_year=context.SP_NF_S_CUR_YEAR;
	var start_date_string="";
	var start_date;
	var end_date;
	
	for (var each in "opxSP_TT_BVA_COST_DATA"){
		var sProjID = htTable.get(each.SP_TA_S_PROJ_CODE)
		var oFile = "opxProject".get(sProjID);
		if (oFile != undefined && oFile!= "" && oFile instanceof Project && oFile.OPEN == true ){
			
				//Start Date
				start_date_string="01/"+"PRINT_NUMBER".call(each.SP_TA_N_PERIOD,"#####")+"/"+current_year;
				start_date=new date(start_date_string,"DD/MM/YYYY");
				//End date
				if start_date instanceof Date
					end_date="PERIOD_START".call(start_date,"MONTH",1);
			
				var oCost = new vector("SP_AA_S_PROJ_CODE",each.SP_TA_S_PROJ_CODE,
				"SP_AA_S_PROJ_NAME",each.SP_TA_S_PROJ_NAME,
				"SP_AA_S_TRIAL_CODE",each.SP_TA_S_TRIAL_CODE,
				"SP_AA_S_DEPT",each.SP_TA_S_DEPT,
				"SP_AA_S_NATURE_L1",each.SP_TA_S_NATURE_L1,
				"SP_AA_S_NATURE_L2",each.SP_TA_S_NATURE_L2,
				"SP_AA_N_ACTU_YTD",each.SP_TA_N_ACTU_YTD,
				"SP_AA_N_BUDG_FY",each.SP_TA_N_BUDG_FY,
				"SP_AA_N_BUDG_YTD",each.SP_TA_N_BUDG_YTD,
				"SP_AA_N_FORE_FY",each.SP_TA_N_FORC_FY,
				"SP_AA_N_PERIOD",each.SP_TA_N_PERIOD,
				"SP_AA_N_VARIANCE",each.SP_TA_N_VARIANCE,
				"SP_AA_D_START_DATE",start_date,
				"SP_AA_D_END_DATE",end_date,
				"NAME",each.printattribute())
				oCost.push("FILE")
				oCost.push(oFile.NAME)
			try{
				var msg = "opxSP_PT_BVA_COST_DATA".MakeOpx2ObjectWithPList(oCost);
				each.delete()
			} 
			catch(error error){
				each.SP_TA_REJECTION_MSG = error
			}
			}
		else if (oFile == undefined || oFile== "" ){
			each.SP_TA_REJECTION_MSG = "error: undefined file"}
			
		else if (oFile.OPEN==false){
			each.SP_TA_REJECTION_MSG = "error: Closed file"}
		
		else if (!(oFile instanceof Project) ){
		each.SP_TA_REJECTION_MSG = "error file is not a Project"}
		
	}
}
SP_JS_IMPORT_BVA_COST.exportfunction()





function SP_JS_EMPTY_BVA_COST_TT(){
for (var each in "opxSP_TT_BVA_COST_DATA"){

		each.delete()
	
}
}SP_JS_EMPTY_BVA_COST_TT.exportfunction()

function SP_JS_EMPTY_BVA_COST_PT(){
for (var each in "opxSP_PT_BVA_COST_DATA" where each.FILE.OPEN && each.FILE.STATE == "Active" ){

		each.delete()
	
}
}SP_JS_EMPTY_BVA_COST_PT.exportfunction()

writetolog("Script SP_JS_GENERATE_BVA_DATA loaded with version ~a ", revision_number);

//	NAME	: SP_JS_GENERATE_BVA_DATA
//	AUTHOR  : bcordel
//  PURPOSE : COMPASS v6 , generation of Budget Variance Analysis data
//  
//  HISTORY :
var revision_number ="1.23";
//  Revision 1.23  2020/02/18 SSK : Updated sp_js_take_BVA_baseline to remove the condition of Level1 activity to load references for Projects which has only L1 activity
//  Revision 1.22  2019/09/03 bcordel
//	modification of function : sp_js_take_BVA_baseline , adding a check of the yearly date to avoid the BVA not taking into account YEARLY informations when it has been modified the same dy. 
//
//	Revision 1.21 ,To add "FPRM Only" field in BVA Report -Release V1.10.0.0
//
//  Revision 1.20  2018/10/16 SJAIN
//	Adding three fields : Critical ?, Phase (Clin Act) and FVFS (First step) in the BVA as per RITM0573633 request

//  Revision 1.19  2017/03/12 bcordel
//	modification of function : sp_js_generate_BVA_summary , changing the "Get" to add the file part. 
//
//  Revision 1.18  2017/03/08 bcordel
//	modification of function : sp_js_generate_BVA_summary , changin the filter on headcount to only impact actuals. 
//
//  Revision 1.17  2017/03/06 bcordel
//	creation of function : SP_JS_EMPTY_BVA_COST_PT , used to suppress cost data for BVA => ITS-INC0578156 
//
//  Revision 1.16  2017/03/01 bcordel
//	Modification of function : sp_js_cleaning_BVA_baseline adding control on file
//	Modification of function : sp_js_convert_fte_into_bva_entry correcting ITS-INC0532392
//
//  Revision 1.15  2017/12/14 flecanut
//  Modification of function : sp_js_generate_BVA_summary to add filter on Headcount="Direct"
//
//  Revision 1.14  2017/12/14 flecanut
//  Modification of function : sp_js_take_BVA_baseline --> correct "Budget" object creation (ALM 1196)
// 
//  Revision 1.13  2017/12/06 bcordel
//  Modification of function : sp_js_cleaning_BVA_baseline --> changing algorythme and cleaning up logs to have less
//  
//  Revision 1.12  2017/11/24 flecanut
//  Modification of function : sp_js_cleaning_BVA_baseline --> add withoutlocking when deleting + deleting only project data (do not delete project version data)
//  
//  Revision 1.11  2017/10/20 lfavre
//  Modification of function : SP_JS_IMPORT_BVA_COST --> Add start date and end date
//
//	Revision 1.10  2017/10/20 bcordel
//	Modifying sp_js_generate_BVA_summary and sp_js_convert_fte_into_bva_entry to fill the relation attribute resource
//
//	Revision 1.9  2017/08/04 bcordel
//	Adding a withoutlocking to generate bva summary
//
//	Revision 1.8  2017/06/27 bcordel
//	Modifying sp_js_convert_fte_into_bva_entry to add two new field
//
//	Revision 1.7  2017/06/15 bcordel
//	Modifying sp_js_cut_bva_entry_year and sp_js_convert_fte_into_bva_entry to remove notion of calendar in diff_date calculation
//	Modifying sp_js_convert_fte_into_bva_entry to ensure divisor are not null
//
//	Revision 1.6  2017/06/07 bcordel
//	Modifying sp_js_monthly_timeline_prep correcting the field updated
//
//	Revision 1.5  2017/05/31 bcordel
//	Modifying SP_JS_IMPORT_BVA_COST to include modification of import format
//	Correcting FTE convertion in sp_js_convert_fte_into_bva_entry 
//
//	Revision 1.4  2017/04/24 bcordel
//	Modifying naming of project entry in bva fte data cause of too long name => using now project code
//
//	Revision 1.3  2017/03/24 bcordel
//	Merge
//
//  Revision 1.2  2017/03/24 bcordel
//  adding information of department name when creating a new bva entry for department
//	adding function sp_js_generate_BVA_summary for monthly report
//	adding function sp_js_monthly_timeline_prep for monthly timelin preparation
//	adding function sp_js_prepare_new_monthly to launch all monthly report preparation
//	Revision 1.2 2017/03/24 ahasni
//	adding SP_JS_IMPORT_BVA_COST and SP_JS_EMPTY_BVA_COST_TT for cost import
//
//  Revision 1.1  2017/03/01 bcordel
//  fixing some issue with date (added sp_js_cut_bva_entry_year)
//
//  Revision 1.0  2017/02/15 bcordel
//  creation of the macro-script 




function sp_js_cleaning_BVA_baseline ()
{
	var n_table_entries_N_1 = 0;
	var n_table_entries_suppressed = 0;

	for (var o_project in "OpxProject" where o_project.STATE == "Active" && o_project.OPEN)
	{
		fromobject(o_project)
		{
			
			// We first suppress older entries in the table
			writetolog("Emptying N-1 reference objects from table SP_PT_BVA_BASELINE_DATA for project ~a",o_project.printattribute());
			for ( var o_N_1_entry in "OpxSP_PT_BVA_BASELINE_DATA" where o_N_1_entry.FILE==o_project && o_N_1_entry.SP_AA_S_BVA_REFERENCE == "N-1")
			{
				withoutlocking {
					o_N_1_entry.delete();
				}
				n_table_entries_suppressed ++;
			}
			

			// Then we change the N entries to N-1 entries.
			writetolog("Moving N reference objects from table SP_PT_BVA_BASELINE_DATA to N-1 reference for project ~a",o_project.printattribute());
			for ( var o_N_entry in "OpxSP_PT_BVA_BASELINE_DATA" where o_N_entry.FILE==o_project && o_N_entry.SP_AA_S_BVA_REFERENCE == "N")
			{
				o_N_entry.SP_AA_S_BVA_REFERENCE="N-1";
				o_N_entry.NAME = o_N_entry.NAME + "_old";
				n_table_entries_N_1++;
			}
		}
	}
	writetolog("~a object suppressed from table SP_PT_BVA_BASELINE_DATA",n_table_entries_suppressed);
	writetolog("~a object moved from N reference to N-1 reference.",n_table_entries_N_1);
	
	return 1;

}

function sp_js_cut_bva_entry_year (o_bva_entry)
{
	var o_resource = "OpxResource".get(o_bva_entry.SP_AA_S_BVA_RESOURCE);
	var s_cal = o_resource.CAL.NAME;
	
	var d_year_start = context.CallDateFormula ("PERIOD_START($DATE_OF_THE_DAY,\"YEAR\",-1)");
	var d_year_end = context.CallDateFormula ("PERIOD_START($DATE_OF_THE_DAY,\"YEAR\",0)");
	
	var d_bva_start=o_bva_entry.SP_AA_D_BVA_ALLOC_SD;
	var d_bva_finish=o_bva_entry.SP_AA_D_BVA_ALLOC_FD;
		
	var n_ratio = 0;
	
	// cleaning of BVA entries that are not on the year.
	if (d_bva_start >= d_year_end || d_bva_finish <= d_year_start)
	{
		o_bva_entry.delete();
		return 0;
	}
	
	if (d_bva_start < d_year_start)
	{
		n_ratio = o_bva_entry.CallNumberFormula("DIFF_DATE('"+d_year_start+"',SP_AA_D_BVA_ALLOC_FD,'') / DIFF_DATE(SP_AA_D_BVA_ALLOC_SD,SP_AA_D_BVA_ALLOC_FD,'')");
		o_bva_entry.SP_AA_D_BVA_ALLOC_SD = d_year_start;
		o_bva_entry.SP_AA_N_BVA_TOT_LOAD_DAYS = o_bva_entry.SP_AA_N_BVA_TOT_LOAD_DAYS*n_ratio;
		o_bva_entry.SP_AA_N_BVA_TOT_LOAD_FTE = o_bva_entry.SP_AA_N_BVA_TOT_LOAD_FTE*n_ratio;
	}
	
	if (d_bva_finish >= d_year_end)
	{
		n_ratio = o_bva_entry.CallNumberFormula("DIFF_DATE(SP_AA_D_BVA_ALLOC_SD,'"+d_year_end+"','') / DIFF_DATE(SP_AA_D_BVA_ALLOC_SD,SP_AA_D_BVA_ALLOC_FD,'')");
		o_bva_entry.SP_AA_D_BVA_ALLOC_FD = d_year_end;
		o_bva_entry.SP_AA_N_BVA_TOT_LOAD_DAYS = o_bva_entry.SP_AA_N_BVA_TOT_LOAD_DAYS*n_ratio;
		o_bva_entry.SP_AA_N_BVA_TOT_LOAD_FTE = o_bva_entry.SP_AA_N_BVA_TOT_LOAD_FTE*n_ratio;
	}
	
	
}

function sp_js_convert_fte_into_bva_entry (s_fte_type,o_fte)
{
	
	var o_project = o_fte.PROJECT;
	var o_act = o_fte.ACTIVITY
	var o_res = o_fte.RES;
	var s_department_entry_name = o_res.SP_NF_CL_DEPARTMENT+"_"+o_project.SPAS_AA_PROJECT_CODE;
	var n_entry = 0;
	
	// ITS-INC0532392 - "Get" function can return version element so we add the project in the identifier.
	var o_project_entry = "OpxSP_PT_BVA_BASELINE_DATA".get(o_project.printattribute()+":"+o_project.SPAS_AA_PROJECT_CODE);

	// Creation of project line in case it does not exist.
	if ( o_project_entry == undefined || o_project_entry =="")
	{
		o_project_entry = new "OpxSP_PT_BVA_BASELINE_DATA" ("FILE",o_project,"NAME",o_project.SPAS_AA_PROJECT_CODE,"SP_AA_BVA_FTE_CATEGORY","Project","SP_AA_S_BVA_REFERENCE","N");
		// writetolog("Creation of BVA project entry for ~a",o_project);
	}
	
	var o_bva_dept_entry = "OpxSP_PT_BVA_BASELINE_DATA".get(o_project.printattribute()+":"+s_department_entry_name);
	// Creation of department line in case it does not exist.
	if ( o_bva_dept_entry == undefined || o_bva_dept_entry =="" )
	{
		var o_dept_res = o_res
		while (o_dept_res.LEVEL>3)
		{
			o_dept_res=o_dept_res.CHILD_OF;
		}
		o_bva_dept_entry = new "OpxSP_PT_BVA_BASELINE_DATA" ("FILE",o_project,"NAME",s_department_entry_name,"SP_AA_BVA_FTE_CATEGORY","Department","PARENT",o_project_entry,"SP_AA_S_BVA_REFERENCE","N","SP_AA_S_BVA_DEPT",o_res.SP_NF_CL_DEPARTMENT,"SP_RA_BVA_RESSOURCE",o_dept_res);
		// writetolog("Creation of BVA entry for department ~a in ~a",s_department_entry_name,o_project);
	} 
	///////////////////////////////////////
	// Vector for creation of the new entry
	/////////////////////////////////////////
	var v_BVA_DATA = new vector();
	
	//Technical element
	v_BVA_DATA.push("PARENT");v_BVA_DATA.push(o_bva_dept_entry);
	v_BVA_DATA.push("FILE");v_BVA_DATA.push(o_project);
	v_BVA_DATA.push("SP_AA_S_BVA_REFERENCE");v_BVA_DATA.push("N");
	
	// Project information
 	v_BVA_DATA.push("SP_AA_S_BVA_FRANCHISE");v_BVA_DATA.push(o_project.CallStringFormula("BREAKDOWN_1"));
	v_BVA_DATA.push("SP_AA_S_BVA_MAIN_PORTFOLIO");v_BVA_DATA.push(o_project.CallStringFormula("SP_NF_S_PRJ_MAIN_PORTFOLIO"));
	v_BVA_DATA.push("SP_AA_S_BVA_PORTFOLIO");v_BVA_DATA.push(o_project.BREAKDOWN_2.NAME);
	v_BVA_DATA.push("SP_AA_S_BVA_PRJ_CODE");v_BVA_DATA.push(o_project.SPAS_AA_PROJECT_CODE);
	v_BVA_DATA.push("SP_AA_S_BVA_PRJ_LEADER_SITE");v_BVA_DATA.push(o_project.SP_AA_S_PJT_LEADER_SITE);
	v_BVA_DATA.push("SP_AA_S_BVA_PRJ_NAME");v_BVA_DATA.push(o_project.NAME);
	v_BVA_DATA.push("SP_AA_S_BVA_SEGMENT");v_BVA_DATA.push(o_project.SP_AA_AT_PROJECT_SEGMENT);
	v_BVA_DATA.push("SP_AA_S_BVA_TIER");v_BVA_DATA.push(o_project.CallStringFormula("SP_AA_AT_PROJECT_TIER"));
	v_BVA_DATA.push("SP_AA_S_BVA_TIER_SEGMENT");v_BVA_DATA.push(o_project.CallStringFormula("SP_NF_S_TIER_SEGMENT"));
	
	// Activity information
	v_BVA_DATA.push("SP_AA_D_BVA_ACT_PF");v_BVA_DATA.push(o_act.PF);
	v_BVA_DATA.push("SP_AA_D_BVA_ACT_PS");v_BVA_DATA.push(o_act.PS);
	v_BVA_DATA.push("SP_AA_N_BVA_ONB_ACT");v_BVA_DATA.push(o_act.ONB);
	v_BVA_DATA.push("SP_AA_S_BVA_ACT_ID");v_BVA_DATA.push(o_act.CallStringFormula("ID"));
	v_BVA_DATA.push("SP_AA_S_BVA_ACT_NAME");v_BVA_DATA.push(o_act.NAME);
	v_BVA_DATA.push("SP_AA_S_BVA_ACT_SITE");v_BVA_DATA.push(o_act.CallStringFormula("BREAKDOWN_3"));
	v_BVA_DATA.push("SP_AA_S_BVA_ACT_TYPE");v_BVA_DATA.push(o_act.CallStringFormula("WBS_TYPE"));
	v_BVA_DATA.push("SP_AA_S_BVA_ACT_DESC");v_BVA_DATA.push(o_act.DESC);
	v_BVA_DATA.push("SP_AA_B_BVA_APAO_PRJ");v_BVA_DATA.push(o_act.SP_NF_B_ACT_APAO_PRJ);
	v_BVA_DATA.push("SP_AA_S_BVA_APAO_PRJ_LIST");v_BVA_DATA.push(o_act.SP_NF_S_ACT_APAO_PRJ_LIST);
	v_BVA_DATA.push("SP_AA_S_BVA_APPROACH");v_BVA_DATA.push(o_act.CallStringFormula("BREAKDOWN_0"));
	v_BVA_DATA.push("SP_AA_S_BVA_NCS_STUDY_CODE");v_BVA_DATA.push(o_act.SP_NF_S_NCS_STUDY_CODE);
	v_BVA_DATA.push("SP_AA_S_BVA_NCS_STUDY_STATUS");v_BVA_DATA.push(o_act.SP_NF_S_NCS_STUDY_STATUS_2);
	v_BVA_DATA.push("SP_AA_S_BVA_OBS_ELEMENT");v_BVA_DATA.push(o_act.CallStringFormula("OBS_ELEMENT"));
	v_BVA_DATA.push("SP_AA_S_BVA_STUDY_CAT");v_BVA_DATA.push(o_act.SP_AA_S_STUDY_CAT);
	v_BVA_DATA.push("SP_AA_S_BVA_TRIAL_CODE");v_BVA_DATA.push(o_act.SP_NF_CL_TRIAL_CODE);
	v_BVA_DATA.push("SP_AA_S_BVA_TRIAL_STATUS");v_BVA_DATA.push(o_act.SP_NF_CL_TRIAL_STATUS_GLOBAL);
	v_BVA_DATA.push("SP_AA_S_BVA_WORKPACKAGE");v_BVA_DATA.push(o_act.SP_AA_ACT_BRD_OUTPUT_CATEG);
	v_BVA_DATA.push("SP_AA_S_BVA_PRODUCT_MED");v_BVA_DATA.push(o_act.SP_AA_ACT_FP_PRODUCT_MED);
				//Revision 1.20, adding follwoing 3 fields.
	v_BVA_DATA.push("SP_AA_B_BVA_CRITICAL");v_BVA_DATA.push(o_act.SP_AA_B_CRITICAL);
	v_BVA_DATA.push("SP_AA_CL_BVA_TRIAL_PHASE");v_BVA_DATA.push(o_act.SP_NF_CL_TRIAL_PHASE);
	v_BVA_DATA.push("SP_AA_CL_BVA_FIRST_FVFS");v_BVA_DATA.push(o_act.SP_NF_CL_FIRST_FVFS);
				//Revision 1.21 ,To add "FPRM Only" field in BVA Report -Release V1.10.0.0
	v_BVA_DATA.push("SP_AA_BVA_S_FPRM_ONLY");v_BVA_DATA.push(o_act.SP_UA_S_FPRM);
	
	
	
	//Resource information
	v_BVA_DATA.push("SP_RA_BVA_RESSOURCE");v_BVA_DATA.push(o_res);
	v_BVA_DATA.push("SP_AA_S_BVA_COST_CENTER");v_BVA_DATA.push(o_res.CallStringFormula("OBS_ELEMENT"));
	v_BVA_DATA.push("SP_AA_S_BVA_DEPT");v_BVA_DATA.push(o_res.SP_NF_CL_DEPARTMENT);
	v_BVA_DATA.push("SP_AA_S_BVA_DEPT_GROUP");v_BVA_DATA.push(o_res.SP_NF_RES_DEPT_GROUPING);
	v_BVA_DATA.push("SP_AA_S_BVA_RES_ORGANIZATION");v_BVA_DATA.push(o_res.SP_NF_S_DEPT_RES);
	v_BVA_DATA.push("SP_AA_S_BVA_RES_REGION");v_BVA_DATA.push(o_res.SP_NF_S_FTE_RES_REGION);
	v_BVA_DATA.push("SP_AA_S_BVA_PROFILE");v_BVA_DATA.push(o_res.SP_NF_CL_PROFILE);
	v_BVA_DATA.push("SP_AA_S_BVA_RESOURCE");v_BVA_DATA.push(o_res.NAME); 
	v_BVA_DATA.push("SP_AA_S_BVA_HEADCOUNT");v_BVA_DATA.push(o_res._SP_AA_S_RES_HEADCOUNT);
	
	
	// FTE information
	v_BVA_DATA.push("SP_AA_N_BVA_ONB_ALLOC");v_BVA_DATA.push(o_fte.ONB);
	v_BVA_DATA.push("SP_AA_S_BVA_ACTIVITY");v_BVA_DATA.push(o_fte.CallStringFormula("ACTIVITY"));
	v_BVA_DATA.push("SP_AA_S_BVA_COST_ACCOUNT");v_BVA_DATA.push(o_fte.CallStringFormula("COST_ACCOUNT")); 
	
	if (s_fte_type == "Actual")
	{
		v_BVA_DATA.push("SP_AA_S_BVA_PLATFORM");v_BVA_DATA.push(o_res._SP_TT_NF_S_INDIV_RES_PLATFORM); 	
		
		v_BVA_DATA.push("SP_AA_D_BVA_ALLOC_SD");v_BVA_DATA.push(o_fte.SD);
		v_BVA_DATA.push("SP_AA_D_BVA_ALLOC_FD");v_BVA_DATA.push(o_fte.ED);
		
		v_BVA_DATA.push("SP_AA_BVA_FTE_CATEGORY");v_BVA_DATA.push(s_fte_type);
		
		v_BVA_DATA.push("SP_AA_N_BVA_TOT_LOAD_DAYS");v_BVA_DATA.push(o_fte.TOTAL_LOAD/o_fte.SP_NF_CONV_DAY);
		v_BVA_DATA.push("SP_AA_S_BVA_ALLOC_SITE");v_BVA_DATA.push(o_res.CallStringFormula("SP_RA_SITE"));
		
		if (o_fte.SP_NF_CONV_FTE != 0 || o_fte.SP_NF_CONV_DAY != 0)
		{
			v_BVA_DATA.push("SP_AA_N_BVA_TOT_LOAD_FTE");v_BVA_DATA.push(o_fte.TOTAL_LOAD/(o_fte.SP_NF_CONV_FTE*o_fte.SP_NF_CONV_DAY));
		}
		else 
		{
			writetolog("Error while creating a BVA Actual for activity ~a : one of the converter is null. Can't divide.", o_act.NAME);
			n_entry--;
		}
	}
	else if (s_fte_type == "Budget")
	{
		v_BVA_DATA.push("SP_AA_S_BVA_PLATFORM");v_BVA_DATA.push(o_res.CallStringFormula("CHILD_OF.DESC")); 	
		
		v_BVA_DATA.push("SP_AA_D_BVA_ALLOC_SD");v_BVA_DATA.push(o_fte.SD);
		v_BVA_DATA.push("SP_AA_D_BVA_ALLOC_FD");v_BVA_DATA.push(o_fte.ED);
		
		v_BVA_DATA.push("SP_AA_S_BVA_LABEL");v_BVA_DATA.push(o_fte.COMMENT);
		v_BVA_DATA.push("SP_AA_S_BVA_ALLOC_DESC");v_BVA_DATA.push(o_fte.SP_NF_PH_COMMENT);
		v_BVA_DATA.push("SP_AA_S_BVA_COMMENT");v_BVA_DATA.push(o_fte.SP_AA_S_PH_FTE_COMMENTS);
		
		v_BVA_DATA.push("SP_AA_N_BVA_TOT_LOAD_DAYS");v_BVA_DATA.push(o_fte.TOTAL_LOAD);
		v_BVA_DATA.push("SP_AA_S_BVA_ALLOC_SITE");v_BVA_DATA.push(o_fte.CallStringFormula("SPAS_RA_SITE"));
		
		var n_fte_converter = o_fte.SPAS_RA_SITE.CallNumberFormula("SP_NF_CONV_FTE");
		
		if (n_fte_converter != 0)
		{
			v_BVA_DATA.push("SP_AA_N_BVA_TOT_LOAD_FTE");v_BVA_DATA.push(o_fte.TOTAL_LOAD/n_fte_converter);
		}
		else 
		{
			writetolog("Error while creating a BVA Budget for activity ~a : one of the converter is null. Can't divide.", o_act.NAME);
			n_entry--;
		}
		
 		v_BVA_DATA.push("SP_AA_BVA_FTE_CATEGORY");v_BVA_DATA.push(s_fte_type);
	}
	else if (s_fte_type == "Planned")
	{
		v_BVA_DATA.push("SP_AA_S_BVA_PLATFORM");v_BVA_DATA.push(o_res.CallStringFormula("CHILD_OF.DESC")); 
		
		v_BVA_DATA.push("SP_AA_S_BVA_LABEL");v_BVA_DATA.push(o_fte.COMMENT);
		v_BVA_DATA.push("SP_AA_S_BVA_ALLOC_DESC");v_BVA_DATA.push(o_fte.SP_NF_PH_COMMENT);
		v_BVA_DATA.push("SP_AA_S_BVA_COMMENT");v_BVA_DATA.push(o_fte.SP_AA_S_PH_FTE_COMMENTS);
		
		v_BVA_DATA.push("SP_AA_S_BVA_ALLOC_SITE");v_BVA_DATA.push(o_fte.CallStringFormula("SPAS_RA_SITE"));
		
		
		if (o_fte.CallBooleanFormula("FD <= OC.SP_NF_D_CTX_LAST_INTEGRATION"))
		{
			s_fte_type = "Past Planned";
			v_BVA_DATA.push("SP_AA_D_BVA_ALLOC_SD");v_BVA_DATA.push(o_fte.SD);
			v_BVA_DATA.push("SP_AA_D_BVA_ALLOC_FD");v_BVA_DATA.push(o_fte.FD);
			v_BVA_DATA.push("SP_AA_N_BVA_TOT_LOAD_DAYS");v_BVA_DATA.push(o_fte.TOTAL_LOAD);
			if (o_fte.SP_NF_CONV_FTE != 0)
			{
				v_BVA_DATA.push("SP_AA_N_BVA_TOT_LOAD_FTE");v_BVA_DATA.push(o_fte.TOTAL_LOAD/o_fte.SP_NF_CONV_FTE);
			}
			else 
			{
				writetolog("Error while creating a BVA Past Planned for activity ~a : one of the converter is null. Can't divide.", o_act.NAME);
				n_entry--;
			}
			
			v_BVA_DATA.push("SP_AA_BVA_FTE_CATEGORY");v_BVA_DATA.push(s_fte_type);
			
			
		}
		else if (o_fte.CallBooleanFormula("SD >= OC.SP_NF_D_CTX_LAST_INTEGRATION"))
		{
			s_fte_type = "Planned";
			v_BVA_DATA.push("SP_AA_D_BVA_ALLOC_SD");v_BVA_DATA.push(o_fte.SD);
			v_BVA_DATA.push("SP_AA_D_BVA_ALLOC_FD");v_BVA_DATA.push(o_fte.FD);
			v_BVA_DATA.push("SP_AA_N_BVA_TOT_LOAD_DAYS");v_BVA_DATA.push(o_fte.TOTAL_LOAD);
			if (o_fte.SP_NF_CONV_FTE != 0)
			{
				v_BVA_DATA.push("SP_AA_N_BVA_TOT_LOAD_FTE");v_BVA_DATA.push(o_fte.TOTAL_LOAD/o_fte.SP_NF_CONV_FTE);
			}
			else 
			{
				writetolog("Error while creating a BVA Planned for activity ~a : one of the converter is null. Can't divide.", o_act.NAME);
				n_entry--;
			}
			
			v_BVA_DATA.push("SP_AA_BVA_FTE_CATEGORY");v_BVA_DATA.push(s_fte_type);
			
		}
		else
		{
			var n_ratio_past = 0;
			var n_ratio_planned = 0;
			n_ratio_past = o_fte.CallNumberFormula("evaluate_number(\"DIFF_DATE(SD,OC.SP_NF_D_CTX_LAST_INTEGRATION,'')\") / evaluate_number(\"DIFF_DATE(SD,FD,'')\")");
			n_ratio_planned = o_fte.CallNumberFormula("evaluate_number(\"DIFF_DATE(OC.SP_NF_D_CTX_LAST_INTEGRATION,FD,'')\") / evaluate_number(\"DIFF_DATE(SD,FD,'')\")");
			
			var v_BVA_DATA_planned = new vector ();
			v_BVA_DATA_planned = v_BVA_DATA.copy();
			
			s_fte_type = "Past Planned";
			v_BVA_DATA.push("SP_AA_D_BVA_ALLOC_FD");v_BVA_DATA.push(context.SP_NF_D_CTX_LAST_INTEGRATION);
			v_BVA_DATA.push("SP_AA_D_BVA_ALLOC_SD");v_BVA_DATA.push(o_fte.SD);
			v_BVA_DATA.push("SP_AA_N_BVA_TOT_LOAD_DAYS");v_BVA_DATA.push(o_fte.TOTAL_LOAD*n_ratio_past);
			if (o_fte.SP_NF_CONV_FTE != 0)
			{
				v_BVA_DATA.push("SP_AA_N_BVA_TOT_LOAD_FTE");v_BVA_DATA.push((o_fte.TOTAL_LOAD*n_ratio_past)/o_fte.SP_NF_CONV_FTE);
			}
			else 
			{
				writetolog("Error while creating a BVA Past Planned for activity ~a : one of the converter is null. Can't divide.", o_act.NAME);
				n_entry--;
			}
			v_BVA_DATA.push("SP_AA_BVA_FTE_CATEGORY");v_BVA_DATA.push(s_fte_type);
			
			v_BVA_DATA_planned.push("SP_AA_D_BVA_ALLOC_SD");v_BVA_DATA_planned.push(context.SP_NF_D_CTX_LAST_INTEGRATION);
			v_BVA_DATA_planned.push("SP_AA_D_BVA_ALLOC_FD");v_BVA_DATA_planned.push(o_fte.FD);
			v_BVA_DATA_planned.push("SP_AA_N_BVA_TOT_LOAD_DAYS");v_BVA_DATA_planned.push(o_fte.TOTAL_LOAD*n_ratio_planned);
			if (o_fte.SP_NF_CONV_FTE != 0)
			{
				v_BVA_DATA_planned.push("SP_AA_N_BVA_TOT_LOAD_FTE");v_BVA_DATA_planned.push((o_fte.TOTAL_LOAD*n_ratio_planned)/o_fte.SP_NF_CONV_FTE);
			}
			else 
			{
				writetolog("Error while creating a BVA Planned for activity ~a : one of the converter is null. Can't divide.", o_act.NAME);
				n_entry--;
			}
			v_BVA_DATA_planned.push("SP_AA_BVA_FTE_CATEGORY");v_BVA_DATA_planned.push("Planned");
			
			//Creation of the Planned allocation
			try{
				var name = "Planned" + o_fte.ONB;
				v_BVA_DATA_planned.push("NAME");v_BVA_DATA_planned.push(name);
				var o_bva_entry_planned = "OpxSP_PT_BVA_BASELINE_DATA".makeopx2ObjectWithPlist(v_BVA_DATA_planned);
				sp_js_cut_bva_entry_year(o_bva_entry_planned);
				n_entry++;
			} catch (error e){
				writetolog("Error while creating a planned BVA line for activity ~a : ~a", o_act.NAME,e);
			}
			v_BVA_DATA_planned.clear();
		}
	}
	//////////////////////////////////////////////////////////////

	
	try{
		var name = s_fte_type + o_fte.ONB;
		v_BVA_DATA.push("NAME");v_BVA_DATA.push(name);
		var o_bva_entry = "OpxSP_PT_BVA_BASELINE_DATA".makeopx2ObjectWithPlist(v_BVA_DATA);
		sp_js_cut_bva_entry_year(o_bva_entry);
		n_entry++;
	} catch (error e){
		writetolog("Error while creating a BVA line for activity ~a : ~a", o_act.NAME,e);
	}
	v_BVA_DATA.clear();
		
	return n_entry;
	
}

method sp_js_take_BVA_baseline on "OpxProject" ()
{
	/********* variables *************/
	var n_entries_created = 0;
	var n_entry = 0;
	var b_creation_error = false;
	var o_current_project = this;
	withoutlocking{
	
	//test act
	for (var o_act in "opxActivity" where o_act.PROJECT==o_current_project)
	{
		writetolog("activity ~a and its yearly date ~a",o_act,o_act.SD_YEARLY);
		break;
	}
	
	// NB : fromobject does not work on "OpxREFERENCED_TASK_ALLOC"
	for (var o_budget_fte in "OpxREFERENCED_TASK_ALLOC" where o_budget_fte.PROJECT==o_current_project )
	{
		
		if (o_budget_fte.REFERENCE.NAME=="YEARLY" || o_budget_fte.REFERENCE.NAME=="")
		{
			writetolog("Budget ~a",o_budget_fte.REFERENCE.NAME);
			n_entry = sp_js_convert_fte_into_bva_entry("Budget",o_budget_fte);
			if (n_entry==0)
			{
				b_creation_error = true;
			}
			n_entries_created+=n_entry;
		}
	}
	fromobject(o_current_project)
	{
		for (var o_planned_fte in "OpxTASK_ALLOC" where o_planned_fte.PROJECT==o_current_project && o_planned_fte.SP_NF_B_PH_IN_CUR_YEAR)
		{
			
			n_entry=sp_js_convert_fte_into_bva_entry("Planned",o_planned_fte);
			if (n_entry==0)
			{
				b_creation_error = true;
			}
			n_entries_created += n_entry ;
			//writetolog("Planned");
		}
		for (var o_actual in "OpxWORK_PERFORMED" where o_actual.PROJECT==o_current_project && o_actual.SP_NF_B_AH_IN_CUR_YEAR)
		{
			n_entry = sp_js_convert_fte_into_bva_entry("Actual",o_actual);
			if (n_entry<=0)
			{
				b_creation_error = true;
			}
			n_entries_created+=n_entry;
			
			//writetolog("Actual");
		}
	}
	
	}
	
	var v_return = new vector (n_entries_created,b_creation_error);
	
	return v_return;
}
	

function sp_js_process_BVA_baseline ()
{
writetolog("****************************************** Start of processing for Budget Variance Analysis ***************************************");

	// objects counter //
	var n_project_counter = 0;
	var n_total_project = 0;
	var n_table_entries_N = 0;
	var v_return = new vector("","");
	var n_entry_per_project = 0;
	var n_return_code = 0;
	var d_date_of_day = new date();
	
	//Cleaning of old entries and moving of previous from N to N-1
	sp_js_cleaning_BVA_baseline();
	
	//Writing data of BVA baseline in table SP_PT_BVA_BASELINE_DATA
	for (var prj in "OpxProject" where prj.STATE == "Active" && prj.OPEN)
	{
		n_total_project++;	
	}
	writetolog("total number of project : ~a ",n_total_project);

	for (var o_project in "OpxProject" where o_project.STATE == "Active" && o_project.OPEN )
	{
		n_project_counter++;
		writetolog("Processing of project number ~a on ~a : ~a",n_project_counter,n_total_project,o_project.NAME);	
		v_return = o_project.sp_js_take_BVA_baseline();
		n_entry_per_project = v_return[0];
		if ( v_return[1] == true) { n_return_code = 1; }
		n_table_entries_N += n_entry_per_project;
		o_project.SP_AA_D_PRJ_BVA_DATA_DATE= d_date_of_day;
		writetolog(" ~a entries written for project ~a ", n_entry_per_project, o_project.NAME);
	}
	
	writetolog("Number of entries written for ~a projects : ~a ", n_total_project,n_table_entries_N);
	
writetolog("****************************************** End of processing for Budget Variance Analysis ***************************************");

	return n_return_code;
}
sp_js_process_BVA_baseline.exportfunction();

function sp_js_generate_BVA_summary ()
{
writetolog("****************************************** Starting summary of BVA data ***************************************");
withoutlocking{
	var n_counter = 0;
	for (var o_project in "OpxProject" where o_project.STATE == "Active" && o_project.OPEN )
	{
		n_counter = 0;
		writetolog("Generating bva summary for ~a.",o_project);
		fromobject(o_project){
			//Cleaning of previous data
			writetolog("Cleaning bva summary.");
			for (var o_bva_sum in "OpxSP_PT_BVA_SUMMARY" where o_bva_sum.FILE==o_project)
			{
				o_bva_sum.SP_AA_N_BVA_SUM_ACTUAL = 0;
				o_bva_sum.SP_AA_N_BVA_SUM_BUDGET = 0;
				o_bva_sum.SP_AA_N_BVA_SUM_PLANNED = 0;
				o_bva_sum.SP_AA_N_BVA_SUM_VARIANCE_DAYS = 0;
				n_counter++;
			}
			writetolog("~a entries of bva summary cleaned.",n_counter);
			n_counter=0;
			writetolog("Creation and update of bva summary entries.");
			// we want one entry per department lvl of BVA data
			for (var o_bva_dept in "OpxSP_PT_BVA_BASELINE_DATA" where o_bva_dept.SP_AA_S_BVA_REFERENCE == "N" && o_bva_dept.getAttributeStringValue("SP_AA_BVA_FTE_CATEGORY") == "5")
			{
				n_counter++;
				var o_analysis_entry = "OpxSP_PT_BVA_SUMMARY".get(o_project.printattribute()+":"+o_bva_dept.name);
				//checking if dptmt entry exist, create it if not
				if ( o_analysis_entry Instanceof OpxSP_PT_BVA_SUMMARY && o_analysis_entry != undefined)
				{
					// writetolog("Entry ~a already existing.",o_analysis_entry);
				}else{
					var o_res=o_bva_dept.SP_RA_BVA_RESSOURCE;
					
					o_analysis_entry = new "OpxSP_PT_BVA_SUMMARY" ("FILE",o_project,"NAME",o_bva_dept.name,"SP_AA_S_BVA_SUM_DEPT",o_bva_dept.SP_AA_S_BVA_DEPT,"SP_RA_S_BVA_SUM_DEPT",o_res);
					// writetolog("Creating new entry ~a.",o_analysis_entry);
				}
				
				//addition of each bva entry under the department lvl to the summary.
				// ALM 1373 : Add filter on Headcount="Direct"
				fromobject(o_bva_dept){
					for (var o_bva_entry in "OpxSP_PT_BVA_BASELINE_DATA" where o_bva_entry.PARENT == o_bva_dept )
					{
						var s_category = o_bva_entry.getAttributeStringValue("SP_AA_BVA_FTE_CATEGORY");
						// writeln(o_bva_entry);
						// writeln(o_bva_entry.SP_AA_BVA_FTE_CATEGORY);
						switch(s_category.parsenumber()) {
							case 0 :if(o_bva_entry.SP_AA_S_BVA_HEADCOUNT=="Direct"){o_analysis_entry.SP_AA_N_BVA_SUM_ACTUAL = o_analysis_entry.SP_AA_N_BVA_SUM_ACTUAL + o_bva_entry.SP_AA_N_BVA_TOT_LOAD_FTE; //Actuals
							o_analysis_entry.SP_AA_N_BVA_SUM_VARIANCE_DAYS = o_analysis_entry.SP_AA_N_BVA_SUM_VARIANCE_DAYS + o_bva_entry.SP_AA_N_BVA_TOT_LOAD_DAYS;}
							case 1 : o_analysis_entry.SP_AA_N_BVA_SUM_PLANNED = o_analysis_entry.SP_AA_N_BVA_SUM_PLANNED + o_bva_entry.SP_AA_N_BVA_TOT_LOAD_FTE; //Planned
									o_analysis_entry.SP_AA_N_BVA_SUM_VARIANCE_DAYS = o_analysis_entry.SP_AA_N_BVA_SUM_VARIANCE_DAYS + o_bva_entry.SP_AA_N_BVA_TOT_LOAD_DAYS;
							case 3 : o_analysis_entry.SP_AA_N_BVA_SUM_BUDGET = o_analysis_entry.SP_AA_N_BVA_SUM_BUDGET + o_bva_entry.SP_AA_N_BVA_TOT_LOAD_FTE; //Budget
									o_analysis_entry.SP_AA_N_BVA_SUM_VARIANCE_DAYS = o_analysis_entry.SP_AA_N_BVA_SUM_VARIANCE_DAYS - o_bva_entry.SP_AA_N_BVA_TOT_LOAD_DAYS;
							// default : writeln (s_category);
						}
					}
				}
			}
			writetolog("~a bva summary entries updated.",n_counter);
		}
		o_project.SP_AA_D_PRJ_BVA_SUM_DATE = o_project.SP_AA_D_PRJ_BVA_DATA_DATE;
		writetolog("Ending bva summary generation for ~a.",o_project);
	}
}
writetolog("****************************************** Ending summary of BVA data ***************************************");
	return 0;
}
sp_js_generate_BVA_summary.exportfunction();

function sp_js_monthly_timeline_prep ()
{
writetolog("********************************** Starting preparation of monthly timeline *********************************");
	var n_counter = 0;
	withoutlocking{
		for (var o_project in "OpxProject" where o_project.STATE == "Active" && o_project.OPEN )
		{
		fromobject(o_project)
		{
			n_counter = 0;
			for ( var o_act in "OpxActivity" where o_act.PROJECT == o_project && o_act.SP_NF_B_ACT_IN_TIMELINE && !o_act._PM_AA_B_DISPLAY_IN_ROA)
			{
				o_act._PM_AA_B_DISPLAY_IN_ROA = true;
				n_counter++;
			}
			writetolog("~a activities added in timeline for ~a.",n_counter,o_project);
		}
		}
	}
	return 0;
writetolog("********************************** Ending preparation of monthly timeline *********************************");
}

function sp_js_prepare_new_monthly ()
{
writetolog("********************************** Starting update of monthly report *********************************");
	// generation of bva summary data
	sp_js_generate_BVA_summary();
	// preparation of monthly timeline
	sp_js_monthly_timeline_prep();
writetolog("********************************** Starting update of monthly report *********************************");	
}
sp_js_prepare_new_monthly.exportfunction();

function SP_JS_IMPORT_BVA_COST(){
	//hashtable association  project code  -  project name
	var htTable =  new hashtable("STRING")
	for (var each in opxProject where each.ORIGIN_PROJECT==undefined || each.ORIGIN_PROJECT==""){
		htTable.set(each.SPAS_AA_PROJECT_CODE,each.printattribute())
	}
	
	// Current Year to evaluate Start Date and End DATE_OF_THE_DAY
	var current_year=context.SP_NF_S_CUR_YEAR;
	var start_date_string="";
	var start_date;
	var end_date;
	
	for (var each in "opxSP_TT_BVA_COST_DATA"){
		var sProjID = htTable.get(each.SP_TA_S_PROJ_CODE)
		var oFile = "opxProject".get(sProjID);
		if (oFile != undefined && oFile!= "" && oFile instanceof Project && oFile.OPEN == true ){
			
				//Start Date
				start_date_string="01/"+"PRINT_NUMBER".call(each.SP_TA_N_PERIOD,"#####")+"/"+current_year;
				start_date=new date(start_date_string,"DD/MM/YYYY");
				//End date
				if start_date instanceof Date
					end_date="PERIOD_START".call(start_date,"MONTH",1);
			
				var oCost = new vector("SP_AA_S_PROJ_CODE",each.SP_TA_S_PROJ_CODE,
				"SP_AA_S_PROJ_NAME",each.SP_TA_S_PROJ_NAME,
				"SP_AA_S_TRIAL_CODE",each.SP_TA_S_TRIAL_CODE,
				"SP_AA_S_DEPT",each.SP_TA_S_DEPT,
				"SP_AA_S_NATURE_L1",each.SP_TA_S_NATURE_L1,
				"SP_AA_S_NATURE_L2",each.SP_TA_S_NATURE_L2,
				"SP_AA_N_ACTU_YTD",each.SP_TA_N_ACTU_YTD,
				"SP_AA_N_BUDG_FY",each.SP_TA_N_BUDG_FY,
				"SP_AA_N_BUDG_YTD",each.SP_TA_N_BUDG_YTD,
				"SP_AA_N_FORE_FY",each.SP_TA_N_FORC_FY,
				"SP_AA_N_PERIOD",each.SP_TA_N_PERIOD,
				"SP_AA_N_VARIANCE",each.SP_TA_N_VARIANCE,
				"SP_AA_D_START_DATE",start_date,
				"SP_AA_D_END_DATE",end_date,
				"NAME",each.printattribute())
				oCost.push("FILE")
				oCost.push(oFile.NAME)
			try{
				var msg = "opxSP_PT_BVA_COST_DATA".MakeOpx2ObjectWithPList(oCost);
				each.delete()
			} 
			catch(error error){
				each.SP_TA_REJECTION_MSG = error
			}
			}
		else if (oFile == undefined || oFile== "" ){
			each.SP_TA_REJECTION_MSG = "error: undefined file"}
			
		else if (oFile.OPEN==false){
			each.SP_TA_REJECTION_MSG = "error: Closed file"}
		
		else if (!(oFile instanceof Project) ){
		each.SP_TA_REJECTION_MSG = "error file is not a Project"}
		
	}
}
SP_JS_IMPORT_BVA_COST.exportfunction()





function SP_JS_EMPTY_BVA_COST_TT(){
for (var each in "opxSP_TT_BVA_COST_DATA"){

		each.delete()
	
}
}SP_JS_EMPTY_BVA_COST_TT.exportfunction()

function SP_JS_EMPTY_BVA_COST_PT(){
for (var each in "opxSP_PT_BVA_COST_DATA" where each.FILE.OPEN && each.FILE.STATE == "Active" ){

		each.delete()
	
}
}SP_JS_EMPTY_BVA_COST_PT.exportfunction()

writetolog("Script SP_JS_GENERATE_BVA_DATA loaded with version ~a ", revision_number);

 
// SP_JS_GRAPHICS_LIB.ojs

//verifie si un element est present dans une liste (element exact)
function CompareElementToGrid (listOfElement, stringtocompare)
{
	if (stringtocompare != "")
		for(var Each in listOfElement)
			if(Each == stringtocompare)
				return true;

	return false ;
}

// add an attribute at the end of the attributes list of a table
function AddAttributeToGrid (FieldName)
{
	if (this != undefined && FieldName != undefined) {
		var FieldSymbol = FieldName;
		var attributeList = this.attributeList;
		//var TableAttributes = this.getinternalvalue("tableattributes").parsevector();

		if (FieldSymbol instanceof string)
			FieldSymbol = new symbol(FieldName,"KEYWORD");

		if (CompareElementToGrid(attributeList, FieldSymbol) == false) {
			attributeList.push(FieldSymbol);
			this.attributeList = attributeList;
			//this.setinternalvalue("tableattributes", TableAttributes.parselist());
		}
	}
}

// remove an attribute from the attributes list of a table
function DeleteAttributeToGrid (FieldName)
{
	if (this != undefined && FieldName != "") {
		var FieldSymbol = FieldName;
		var attributeList = this.attributeList;
		//var TableAttributes = this.getinternalvalue("tableattributes").parsevector();

		if (FieldSymbol instanceof string)
			FieldSymbol = new symbol(FieldName,"KEYWORD");

		if (CompareElementToGrid(attributeList, FieldSymbol) == true){
			attributeList.remove(FieldSymbol);
			this.attributeList = attributeList;
			//this.setinternalvalue("tableattributes", TableAttributes.parselist());
		}
	}
}

function ComputeFieldToGrid (FieldPrefix)
{
	var returnvalue = "";
	var RefClass = "OpxReference".findclass();
	if (RefClass != undefined && this.instanceof(RefClass) && this != undefined && this != false && this != "") {
		returnvalue = FieldPrefix + this.Name;
		return ReturnValue.trim(":");
	}
	// on reset les champs dates du context au cas où le contenu ne soit pas une référence
	// sinon, il n'est plus possible de choisir de reference à comparer
	context.date1 = "";
	context.date2 = "";
	return undefined;
}


// add 
function AddRefenceToGrid (FieldList)
{
	var ArgList = AddRefenceToGrid.arguments;
	var ArgLength = AddRefenceToGrid.length;
	if (ArgLength == 0) return;

	for(var counter = 1; counter < ArgLength; counter = counter + 2) {
		var CurrentReference = ArgList[counter];
		var CurrentOldReference = ArgList[counter + 1];
		var CurrentFieldName = "";
		if (CurrentOldReference != undefined && CurrentOldReference != "")
		for (var EachField in FieldList) {
			CurrentFieldName = CurrentOldReference.ComputeFieldToGrid(EachField);
			this.DeleteAttributeToGrid(CurrentFieldName); //suppression des attributs de attributeslist
		}

		if (CurrentReference != undefined && CurrentReference != "")
			for (var EachField in FieldList) {
				CurrentFieldName = CurrentReference.ComputeFieldToGrid(EachField);
				this.AddAttributeToGrid(CurrentFieldName);
			}
	}
}

// SP_JS_GRAPHICS_LIB.ojs

//verifie si un element est present dans une liste (element exact)
function CompareElementToGrid (listOfElement, stringtocompare)
{
	if (stringtocompare != "")
		for(var Each in listOfElement)
			if(Each == stringtocompare)
				return true;

	return false ;
}

// add an attribute at the end of the attributes list of a table
function AddAttributeToGrid (FieldName)
{
	if (this != undefined && FieldName != undefined) {
		var FieldSymbol = FieldName;
		var attributeList = this.attributeList;
		//var TableAttributes = this.getinternalvalue("tableattributes").parsevector();

		if (FieldSymbol instanceof string)
			FieldSymbol = new symbol(FieldName,"KEYWORD");

		if (CompareElementToGrid(attributeList, FieldSymbol) == false) {
			attributeList.push(FieldSymbol);
			this.attributeList = attributeList;
			//this.setinternalvalue("tableattributes", TableAttributes.parselist());
		}
	}
}

// remove an attribute from the attributes list of a table
function DeleteAttributeToGrid (FieldName)
{
	if (this != undefined && FieldName != "") {
		var FieldSymbol = FieldName;
		var attributeList = this.attributeList;
		//var TableAttributes = this.getinternalvalue("tableattributes").parsevector();

		if (FieldSymbol instanceof string)
			FieldSymbol = new symbol(FieldName,"KEYWORD");

		if (CompareElementToGrid(attributeList, FieldSymbol) == true){
			attributeList.remove(FieldSymbol);
			this.attributeList = attributeList;
			//this.setinternalvalue("tableattributes", TableAttributes.parselist());
		}
	}
}

function ComputeFieldToGrid (FieldPrefix)
{
	var returnvalue = "";
	var RefClass = "OpxReference".findclass();
	if (RefClass != undefined && this.instanceof(RefClass) && this != undefined && this != false && this != "") {
		returnvalue = FieldPrefix + this.Name;
		return ReturnValue.trim(":");
	}
	// on reset les champs dates du context au cas où le contenu ne soit pas une référence
	// sinon, il n'est plus possible de choisir de reference à comparer
	context.date1 = "";
	context.date2 = "";
	return undefined;
}


// add 
function AddRefenceToGrid (FieldList)
{
	var ArgList = AddRefenceToGrid.arguments;
	var ArgLength = AddRefenceToGrid.length;
	if (ArgLength == 0) return;

	for(var counter = 1; counter < ArgLength; counter = counter + 2) {
		var CurrentReference = ArgList[counter];
		var CurrentOldReference = ArgList[counter + 1];
		var CurrentFieldName = "";
		if (CurrentOldReference != undefined && CurrentOldReference != "")
		for (var EachField in FieldList) {
			CurrentFieldName = CurrentOldReference.ComputeFieldToGrid(EachField);
			this.DeleteAttributeToGrid(CurrentFieldName); //suppression des attributs de attributeslist
		}

		if (CurrentReference != undefined && CurrentReference != "")
			for (var EachField in FieldList) {
				CurrentFieldName = CurrentReference.ComputeFieldToGrid(EachField);
				this.AddAttributeToGrid(CurrentFieldName);
			}
	}
}

 
//  FILE    : SP_JS_INIT_SPECIFIC_GLOBALSETTINGS.ojs
// 
//  AUTHOR  : Atos team
// 
//  VERSION : 1.10
// 
//  PURPOSE : Functions for globalsettings initialization
//
//  HISTORY :
//
var revision_number ="1.12";
// Revision 1.12 2020/06/02 KSH
// Addition of settings for "SP_GS_D_FTE_METRIC_DATE" for future launch metrics and "SP_GS_S_FILTER_MWD" for Medical Writer Developer
//
//	Revision 1.11 2020/01/15 CKE
//	Addition of settings for "SP_GS_D_LAST_PRIME_IMP_DATE"
//
//	Revision 1.10 2019/11/05 SKJ
//	Addition of New settings SP_GS_S_FILTER_CDL for RITM1369584 TEMPO - Review of CDM profiles and adjustments of FTE cost metrics
//	Revision 1.9 2018/10/18 CDU
//	Addition of settings for "Monthly report date"
//
//	Revision 1.8 2018/09/19 mrochas
//	CPMO-FIN-CC changes into CLIN-CPMO-CC
//
//	Revision 1.7 2018/09/07 mrochas
//	Addition of settings for "Clinical re-org : settings linked to new profiles"
//
//	Revision 1.6  2018/06/27 Maghesh
//	Adding settings 'SP_GS_S_OFF_BAT_DB'
//	Revision 1.5  2018/04/17 lfavre
//	Adding settings 'SP_GS_S_NV_PIP_COMMENT' and 'SP_GS_S_NV_PIP_PROJ_COMMENT'
//
//	Revision 1.4  2018/02/20 lfavre
//	Adding setting 'SP_GS_S_PATH_MERGE_SCRIPT'
//
//	Revision 1.3  2017/12/06 bcordel
//	Adding setting 'SP_GS_S_TM_CONTACTS_DOC_NAME'
//
//	Revision 1.2  2017/11/14 bcordel & ysaradouni & mrochas
//	Add of settings 'SP_GS_S_REGFAST_TARGET_DIRECTORY'
//	Add of settings SP_GS_D_*_LAUNCH_METRICS
//	Add of settings SP_SET_MODULES_OTHER_DEFAULT_PRINTING_HEADER and SP_SET_MODULES_OTHER_DEFAULT_PRINTING_FOOTER
//
// FLC : Last modification 15:19 20/Sept/2017
//  1.1 Add of settings 'SP_GS_S_PRJ_DEFAULT_WRITE_GROUPS' and 'SP_GS_S_PRJ_DEFAULT_READ_GROUPS'

withoutalerts
{
new setting("SP_GS_S_PRJ_DEFAULT_WRITE_GROUPS",
		"Project default read/write user groups",
		"",
		"string",
		"Setting used to set the default user groups for a project after project creation");
}

withoutalerts
{
	new setting("SP_GS_S_PRJ_DEFAULT_READ_GROUPS",
		"Project default read only user groups",
		"",
		"string",
		"Setting used to set the default user groups for a project after project creation");
}

// Filters based on wbs type for clinical FTE sites

withoutalerts
{
new setting ("SP_GS_S_FILTER_ANALYST",
"Trial Analyst Filter",
"",
"STRING",
"This setting is used to store Trial Analyst filter");
}

withoutalerts
{
new setting ("SP_GS_S_FILTER_CDL",
"Clin. Data Mgt Lead filter",
"",
"STRING",
"This setting is used to store Clinical Datamanagement Lead Filter");
}


withoutalerts
{
new setting ("SP_GS_S_FILTER_COORD",
"Contract Coord Filter",
"",
"STRING",
"This setting is used to store Contract Coord Filter");
}

withoutalerts
{
new setting ("SP_GS_S_FILTER_CPM",
"CPM filter",
"",
"STRING",
"This setting is used to store CPM filter");
}

withoutalerts
{
new setting ("SP_GS_S_FILTER_CRA",
"Local CRA Filter",
"",
"STRING",
"This setting is used to store Local CRA Filter");
}


withoutalerts
{
new setting ("SP_GS_S_FILTER_CTL",
"CTL Filter",
"",
"STRING",
"This setting is used to store CTL Filter");
}

withoutalerts
{
new setting ("SP_GS_S_FILTER_CTM",
"CTM Filter",
"",
"STRING",
"This setting is used to store CTM Filter");
}

withoutalerts
{
new setting ("SP_GS_S_FILTER_DATA_MGR",
"Data Manager Filter",
"",
"STRING",
"This setting is used to store Data Manager Filter");
}

withoutalerts
{
new setting ("SP_GS_S_FILTER_DOCC",
"Doc Coord Filter",
"",
"STRING",
"This setting is used to store Doc Coord Filter");
}

withoutalerts
{
new setting ("SP_GS_S_FILTER_EDOC",
"Electronic Doc Filter",
"",
"STRING",
"This setting is used to store Electronic Doc Filter");
}

withoutalerts
{
new setting ("SP_GS_S_FILTER_GMA_MTL",
"GMA MTL Filter",
"",
"STRING",
"This setting is used to store GMA MTL Filter");
}


withoutalerts
{
new setting ("SP_GS_S_FILTER_LOGC",
"Logistics Coord Filter",
"",
"STRING",
"This setting is used to store Logistics Coord Filter");
}

withoutalerts
{
new setting ("SP_GS_S_FILTER_MED",
"Logistics Coord Filter",
"",
"STRING",
"This setting is used to store Medical Writer Filter");
}

withoutalerts
{
new setting ("SP_GS_S_FILTER_PMSL",
"PMSL Filter",
"",
"STRING",
"This setting is used to store PMSL Filter");
}

withoutalerts
{
new setting ("SP_GS_S_FILTER_PPO_COPM",
"PPO COPM Filter",
"",
"STRING",
"This setting is used to store PPO COPM Filter");
}

withoutalerts
{
new setting ("SP_GS_S_FILTER_PROG",
"Programmer Filter",
"",
"STRING",
"This setting is used to store Programmer Filter");
}

withoutalerts
{
new setting ("SP_GS_S_FILTER_RCTM",
"Regional CTM Filter",
"",
"STRING",
"This setting is used to store Regional CTM Filter");
}


withoutalerts
{
new setting ("SP_GS_S_FILTER_REC_MGR",
"Records Manager Filter",
"",
"STRING",
"This setting is used to store Records Manager Filter");
}


withoutalerts
{
new setting ("SP_GS_S_FILTER_STAT",
"Statistician Filter",
"",
"STRING",
"This setting is used to store Statistician Filter");
}

withoutalerts
{
new setting ("SP_GS_S_FILTER_TRANSL",
"Translator Filter",
"",
"STRING",
"This setting is used to store Translator Filter");
}

// Clinical re-org : settings linked to new profiles
withoutalerts{new setting ("SP_GS_S_FILTER_CPCCPL","CPC-CPL Filter","","STRING","This setting is used to store CPC-CPL Filter");}
withoutalerts{new setting ("SP_GS_S_FILTER_GTOGTOM","GTO-GTOM Filter","","STRING","This setting is used to store GTO-GTOM Filter");}
withoutalerts{new setting ("SP_GS_S_FILTER_GRTMRTM","GRTM-RTM Filter","","STRING","This setting is used to store GRTM-RTM Filter");}
withoutalerts{new setting ("SP_GS_S_FILTER_GTOLOG","GTO-LOG Filter","","STRING","This setting is used to store GTO-LOG Filter");}
withoutalerts{new setting ("SP_GS_S_FILTER_CPMOCC","CPMO-CC Filter","","STRING","This setting is used to store CPMO-CC Filter");}
withoutalerts{new setting ("SP_GS_S_FILTER_GRTMLCRA","GRTM-LCRA Filter","","STRING","This setting is used to store GRTM-LCRA Filter");}

withoutalerts
{
new setting ("SP_GS_B_ENABLE_MAIL_ALERTS",
"Enable e-mail Alerts",
"",
"BOOLEAN",
"This setting is used to control the use of emails");
}

withoutalerts
{
new setting ("SP_GS_S_REGFAST_TARGET_DIRECTORY",
"Target directory for regfast",
"/software/plw/tempo/interfaces/regview/",
"STRING",
"This setting is used to control the target directory of regfast export");
}

withoutalerts
{
new setting ("SP_GS_S_OFF_BAT_DB",
"Offenders Batch Database",
"",
"STRING",
"This setting is used to restrict the batch to execute other than Current Database");
}

withoutalerts
{
new setting ("SP_GS_D_CL_LAUNCH_METRICS",
"Apply Clinical metrics only on Activities with PF >",
"",
"DATE",
"This setting is used to trigger Clinical metrics");
}
withoutalerts
{
new setting ("SP_GS_D_BRD_LAUNCH_METRICS",
"Apply BRD metrics only on Activities with PF >",
"",
"DATE",
"This setting is used to trigger BRD metrics");
}
withoutalerts
{
new setting ("SP_GS_D_ARD_LAUNCH_METRICS",
"Apply ARD metrics only on Activities with PF >",
"",
"DATE",
"This setting is used to trigger ARD metrics");
}

/*
 * Settings to manage default printing header and footer for different modules
 * these settings should be formed as plist "module_name,default_report_name, module_name,default_report_name"
 */
var setting = new setting("SP_SET_MODULES_OTHER_DEFAULT_PRINTING_HEADER",
                          multilingual_getTextKeyMessageString("globalSettings.SP_SET_MODULES_OTHER_DEFAULT_PRINTING_HEADER"),
                          "NV_PORTOFOLIO,SP_RE_REP_NV_HEADER_PRINT",
                          "String",
                          "these settings should be formed as plist \"module_name,default_report_name, module_name,default_report_name\"");
setting.IsGlobal = true;

var setting = new setting("SP_SET_MODULES_OTHER_DEFAULT_PRINTING_FOOTER",
                          multilingual_getTextKeyMessageString("globalSettings.SP_SET_MODULES_OTHER_DEFAULT_PRINTING_FOOTER"),
                          "NV_PORTOFOLIO,SP_RE_REP_NV_FOOTER_PRINT",
                          "String",
                          "these settings should be formed as plist \"module_name,default_report_name, module_name,default_report_name\"");
setting.IsGlobal = true;


withoutalerts
{
new setting("SP_GS_S_TM_CONTACTS_DOC_NAME",
		"TimeCard key contacts e-learning name",
		"Key contacts",
		"string",
		"Name of the e-learning for the timecard key contacts");
}

withoutalerts
{
new setting("SP_GS_S_PATH_MERGE_SCRIPT",
		"Path Merging Script",
		"",
		"string",
		"Path Merging Script");
}

writetolog("Script sp_js_init_specific_globalsettings loaded with version ~a ", revision_number);

/*
Settings for NV Portfolio - NV Pipeline reports - Comment field
*/

withoutalerts
{
new setting("SP_GS_S_NV_PIP_COMMENT",
		"NV Pipeline Comment",
		"",
		"NOTEPAD",
		"Setting used for comment field in NV Pipeline report");
}

withoutalerts
{
	new setting("SP_GS_S_NV_PIP_PROJ_COMMENT",
		"NV Pipeline Projection Comment",
		"",
		"NOTEPAD",
		"Setting used for comment field in NV Pipeline Projection report");
}

/*
Settings for Project - Monthly report - Date field
*/
withoutalerts
{
new setting ("SP_GS_D_MONTHLY_REPORT_DATE",
"Monthly report date",
"",
"DATE",
"This setting is used to initialize the date printed at the end of the monthly report");
}
/*
Settings for PRIME TEMPO Interface 
*/
withoutalerts
{
new setting ("SP_GS_D_LAST_PRIME_IMP_DATE",
"Last PRIME TEMPO Import Date",
"",
"DATE",
"This setting is used to store the last import date ");
}
/*
Settings for FTE Metrics 
*/
withoutalerts
{
new setting ("SP_GS_D_FTE_METRIC_DATE",
"Ongoing Future FTE Metric Date",
"",
"DATE",
"This setting is used to store the Metric launch date ");
}

withoutalerts
{
new setting ("SP_GS_S_FILTER_MWD",
"Medical Writer Developer",
"",
"STRING",
"This setting is used to store Medical Writer Developer Filter");
}
//  FILE    : SP_JS_INIT_SPECIFIC_GLOBALSETTINGS.ojs
// 
//  AUTHOR  : Atos team
// 
//  VERSION : 1.10
// 
//  PURPOSE : Functions for globalsettings initialization
//
//  HISTORY :
//
var revision_number ="1.12";
// Revision 1.12 2020/06/02 KSH
// Addition of settings for "SP_GS_D_FTE_METRIC_DATE" for future launch metrics and "SP_GS_S_FILTER_MWD" for Medical Writer Developer
//
//	Revision 1.11 2020/01/15 CKE
//	Addition of settings for "SP_GS_D_LAST_PRIME_IMP_DATE"
//
//	Revision 1.10 2019/11/05 SKJ
//	Addition of New settings SP_GS_S_FILTER_CDL for RITM1369584 TEMPO - Review of CDM profiles and adjustments of FTE cost metrics
//	Revision 1.9 2018/10/18 CDU
//	Addition of settings for "Monthly report date"
//
//	Revision 1.8 2018/09/19 mrochas
//	CPMO-FIN-CC changes into CLIN-CPMO-CC
//
//	Revision 1.7 2018/09/07 mrochas
//	Addition of settings for "Clinical re-org : settings linked to new profiles"
//
//	Revision 1.6  2018/06/27 Maghesh
//	Adding settings 'SP_GS_S_OFF_BAT_DB'
//	Revision 1.5  2018/04/17 lfavre
//	Adding settings 'SP_GS_S_NV_PIP_COMMENT' and 'SP_GS_S_NV_PIP_PROJ_COMMENT'
//
//	Revision 1.4  2018/02/20 lfavre
//	Adding setting 'SP_GS_S_PATH_MERGE_SCRIPT'
//
//	Revision 1.3  2017/12/06 bcordel
//	Adding setting 'SP_GS_S_TM_CONTACTS_DOC_NAME'
//
//	Revision 1.2  2017/11/14 bcordel & ysaradouni & mrochas
//	Add of settings 'SP_GS_S_REGFAST_TARGET_DIRECTORY'
//	Add of settings SP_GS_D_*_LAUNCH_METRICS
//	Add of settings SP_SET_MODULES_OTHER_DEFAULT_PRINTING_HEADER and SP_SET_MODULES_OTHER_DEFAULT_PRINTING_FOOTER
//
// FLC : Last modification 15:19 20/Sept/2017
//  1.1 Add of settings 'SP_GS_S_PRJ_DEFAULT_WRITE_GROUPS' and 'SP_GS_S_PRJ_DEFAULT_READ_GROUPS'

withoutalerts
{
new setting("SP_GS_S_PRJ_DEFAULT_WRITE_GROUPS",
		"Project default read/write user groups",
		"",
		"string",
		"Setting used to set the default user groups for a project after project creation");
}

withoutalerts
{
	new setting("SP_GS_S_PRJ_DEFAULT_READ_GROUPS",
		"Project default read only user groups",
		"",
		"string",
		"Setting used to set the default user groups for a project after project creation");
}

// Filters based on wbs type for clinical FTE sites

withoutalerts
{
new setting ("SP_GS_S_FILTER_ANALYST",
"Trial Analyst Filter",
"",
"STRING",
"This setting is used to store Trial Analyst filter");
}

withoutalerts
{
new setting ("SP_GS_S_FILTER_CDL",
"Clin. Data Mgt Lead filter",
"",
"STRING",
"This setting is used to store Clinical Datamanagement Lead Filter");
}


withoutalerts
{
new setting ("SP_GS_S_FILTER_COORD",
"Contract Coord Filter",
"",
"STRING",
"This setting is used to store Contract Coord Filter");
}

withoutalerts
{
new setting ("SP_GS_S_FILTER_CPM",
"CPM filter",
"",
"STRING",
"This setting is used to store CPM filter");
}

withoutalerts
{
new setting ("SP_GS_S_FILTER_CRA",
"Local CRA Filter",
"",
"STRING",
"This setting is used to store Local CRA Filter");
}


withoutalerts
{
new setting ("SP_GS_S_FILTER_CTL",
"CTL Filter",
"",
"STRING",
"This setting is used to store CTL Filter");
}

withoutalerts
{
new setting ("SP_GS_S_FILTER_CTM",
"CTM Filter",
"",
"STRING",
"This setting is used to store CTM Filter");
}

withoutalerts
{
new setting ("SP_GS_S_FILTER_DATA_MGR",
"Data Manager Filter",
"",
"STRING",
"This setting is used to store Data Manager Filter");
}

withoutalerts
{
new setting ("SP_GS_S_FILTER_DOCC",
"Doc Coord Filter",
"",
"STRING",
"This setting is used to store Doc Coord Filter");
}

withoutalerts
{
new setting ("SP_GS_S_FILTER_EDOC",
"Electronic Doc Filter",
"",
"STRING",
"This setting is used to store Electronic Doc Filter");
}

withoutalerts
{
new setting ("SP_GS_S_FILTER_GMA_MTL",
"GMA MTL Filter",
"",
"STRING",
"This setting is used to store GMA MTL Filter");
}


withoutalerts
{
new setting ("SP_GS_S_FILTER_LOGC",
"Logistics Coord Filter",
"",
"STRING",
"This setting is used to store Logistics Coord Filter");
}

withoutalerts
{
new setting ("SP_GS_S_FILTER_MED",
"Logistics Coord Filter",
"",
"STRING",
"This setting is used to store Medical Writer Filter");
}

withoutalerts
{
new setting ("SP_GS_S_FILTER_PMSL",
"PMSL Filter",
"",
"STRING",
"This setting is used to store PMSL Filter");
}

withoutalerts
{
new setting ("SP_GS_S_FILTER_PPO_COPM",
"PPO COPM Filter",
"",
"STRING",
"This setting is used to store PPO COPM Filter");
}

withoutalerts
{
new setting ("SP_GS_S_FILTER_PROG",
"Programmer Filter",
"",
"STRING",
"This setting is used to store Programmer Filter");
}

withoutalerts
{
new setting ("SP_GS_S_FILTER_RCTM",
"Regional CTM Filter",
"",
"STRING",
"This setting is used to store Regional CTM Filter");
}


withoutalerts
{
new setting ("SP_GS_S_FILTER_REC_MGR",
"Records Manager Filter",
"",
"STRING",
"This setting is used to store Records Manager Filter");
}


withoutalerts
{
new setting ("SP_GS_S_FILTER_STAT",
"Statistician Filter",
"",
"STRING",
"This setting is used to store Statistician Filter");
}

withoutalerts
{
new setting ("SP_GS_S_FILTER_TRANSL",
"Translator Filter",
"",
"STRING",
"This setting is used to store Translator Filter");
}

// Clinical re-org : settings linked to new profiles
withoutalerts{new setting ("SP_GS_S_FILTER_CPCCPL","CPC-CPL Filter","","STRING","This setting is used to store CPC-CPL Filter");}
withoutalerts{new setting ("SP_GS_S_FILTER_GTOGTOM","GTO-GTOM Filter","","STRING","This setting is used to store GTO-GTOM Filter");}
withoutalerts{new setting ("SP_GS_S_FILTER_GRTMRTM","GRTM-RTM Filter","","STRING","This setting is used to store GRTM-RTM Filter");}
withoutalerts{new setting ("SP_GS_S_FILTER_GTOLOG","GTO-LOG Filter","","STRING","This setting is used to store GTO-LOG Filter");}
withoutalerts{new setting ("SP_GS_S_FILTER_CPMOCC","CPMO-CC Filter","","STRING","This setting is used to store CPMO-CC Filter");}
withoutalerts{new setting ("SP_GS_S_FILTER_GRTMLCRA","GRTM-LCRA Filter","","STRING","This setting is used to store GRTM-LCRA Filter");}

withoutalerts
{
new setting ("SP_GS_B_ENABLE_MAIL_ALERTS",
"Enable e-mail Alerts",
"",
"BOOLEAN",
"This setting is used to control the use of emails");
}

withoutalerts
{
new setting ("SP_GS_S_REGFAST_TARGET_DIRECTORY",
"Target directory for regfast",
"/software/plw/tempo/interfaces/regview/",
"STRING",
"This setting is used to control the target directory of regfast export");
}

withoutalerts
{
new setting ("SP_GS_S_OFF_BAT_DB",
"Offenders Batch Database",
"",
"STRING",
"This setting is used to restrict the batch to execute other than Current Database");
}

withoutalerts
{
new setting ("SP_GS_D_CL_LAUNCH_METRICS",
"Apply Clinical metrics only on Activities with PF >",
"",
"DATE",
"This setting is used to trigger Clinical metrics");
}
withoutalerts
{
new setting ("SP_GS_D_BRD_LAUNCH_METRICS",
"Apply BRD metrics only on Activities with PF >",
"",
"DATE",
"This setting is used to trigger BRD metrics");
}
withoutalerts
{
new setting ("SP_GS_D_ARD_LAUNCH_METRICS",
"Apply ARD metrics only on Activities with PF >",
"",
"DATE",
"This setting is used to trigger ARD metrics");
}

/*
 * Settings to manage default printing header and footer for different modules
 * these settings should be formed as plist "module_name,default_report_name, module_name,default_report_name"
 */
var setting = new setting("SP_SET_MODULES_OTHER_DEFAULT_PRINTING_HEADER",
                          multilingual_getTextKeyMessageString("globalSettings.SP_SET_MODULES_OTHER_DEFAULT_PRINTING_HEADER"),
                          "NV_PORTOFOLIO,SP_RE_REP_NV_HEADER_PRINT",
                          "String",
                          "these settings should be formed as plist \"module_name,default_report_name, module_name,default_report_name\"");
setting.IsGlobal = true;

var setting = new setting("SP_SET_MODULES_OTHER_DEFAULT_PRINTING_FOOTER",
                          multilingual_getTextKeyMessageString("globalSettings.SP_SET_MODULES_OTHER_DEFAULT_PRINTING_FOOTER"),
                          "NV_PORTOFOLIO,SP_RE_REP_NV_FOOTER_PRINT",
                          "String",
                          "these settings should be formed as plist \"module_name,default_report_name, module_name,default_report_name\"");
setting.IsGlobal = true;


withoutalerts
{
new setting("SP_GS_S_TM_CONTACTS_DOC_NAME",
		"TimeCard key contacts e-learning name",
		"Key contacts",
		"string",
		"Name of the e-learning for the timecard key contacts");
}

withoutalerts
{
new setting("SP_GS_S_PATH_MERGE_SCRIPT",
		"Path Merging Script",
		"",
		"string",
		"Path Merging Script");
}

writetolog("Script sp_js_init_specific_globalsettings loaded with version ~a ", revision_number);

/*
Settings for NV Portfolio - NV Pipeline reports - Comment field
*/

withoutalerts
{
new setting("SP_GS_S_NV_PIP_COMMENT",
		"NV Pipeline Comment",
		"",
		"NOTEPAD",
		"Setting used for comment field in NV Pipeline report");
}

withoutalerts
{
	new setting("SP_GS_S_NV_PIP_PROJ_COMMENT",
		"NV Pipeline Projection Comment",
		"",
		"NOTEPAD",
		"Setting used for comment field in NV Pipeline Projection report");
}

/*
Settings for Project - Monthly report - Date field
*/
withoutalerts
{
new setting ("SP_GS_D_MONTHLY_REPORT_DATE",
"Monthly report date",
"",
"DATE",
"This setting is used to initialize the date printed at the end of the monthly report");
}
/*
Settings for PRIME TEMPO Interface 
*/
withoutalerts
{
new setting ("SP_GS_D_LAST_PRIME_IMP_DATE",
"Last PRIME TEMPO Import Date",
"",
"DATE",
"This setting is used to store the last import date ");
}
/*
Settings for FTE Metrics 
*/
withoutalerts
{
new setting ("SP_GS_D_FTE_METRIC_DATE",
"Ongoing Future FTE Metric Date",
"",
"DATE",
"This setting is used to store the Metric launch date ");
}

withoutalerts
{
new setting ("SP_GS_S_FILTER_MWD",
"Medical Writer Developer",
"",
"STRING",
"This setting is used to store Medical Writer Developer Filter");
}
 
//
//	NAME	: sp_js_ncs_get_study_info
//	AUTHOR  : mpa
//  VERSION : 1.0
//  PURPOSE : COMPASS v6 , RNCS and NCS
//  
//  HISTORY :
var revision_number ="1.1";
//
//	Revision 1.2  2017/11/17 mrochas : sp_ncs_tm_per_func is now based on OpxSP_PT_TEAM_MEMBER of the prj + patch sp_ncs_tm_per_func
//  Revision 1.1  2017/04/11 mpa: import of sp_ncs_tm_per_func() 
//  Revision 1.0  2017/02/16 : creation of the macro-script 

function Sp_get_NCS_Study_Code(field)
{
	var result = "";
	var cur_act = (this InstanceOf OpxActivity ? this:this.ACTIVITY);

	if (cur_act != undefined && cur_act Instanceof OpxActivity) {
		var act_level = cur_act.LEVEL;
		var exit = 0;
		while (act_level >= 1 && exit == 0)
			if (cur_act.SP_NF_S_NCS_STUDY) {
				result = (field == "" ? cur_act.index:cur_act.get(field));
				exit=1;
			}
			else {
				cur_act = cur_act.WBS_ELEMENT;
				act_level = cur_act.LEVEL;
			}
	}
	return result;
}
withoutlocking {
	Sp_get_NCS_Study_Code.exportfunction({"STRING"},"STRING");
}

function Sp_get_act_date_NCS(date_field, act_type)
{
	var result = -1;
	var cur_act = this;

	if (cur_act != undefined && cur_act.SP_NF_S_NCS_STUDY && cur_act Instanceof OpxActivity)
		fromobject(cur_act)
			for (var act in "OpxActivity" where act.WBS_TYPE.index == act_type order by {"PF"}) {
				result = act.get(date_field);	
				break;
			}

	return result;
}


withoutlocking {
	Sp_get_act_date_NCS.exportfunction({"STRING","STRING"},"DATE");
}


function Sp_get_propagate_string_field_under_NCS(string_field) {
	var result = -1;
	var cur_act = this;
	if(cur_act Instanceof OpxActivity) {
		while(cur_act.SP_NF_S_NCS_STUDY == false && cur_act.level != 1) {
			cur_act = cur_act.WBS_ELEMENT;
		}
		result = cur_act.get(string_field);
	}
	return result;
}
withoutlocking {
	Sp_get_propagate_string_field_under_NCS.exportfunction({"STRING"},"STRING");
}


//now based on OpxSP_PT_TEAM_MEMBER stored in the project
// for NCS Study key information dashboard reporting
/* function sp_ncs_tm_per_func(prj,fct)
{
	var project = "OpxProject".get(prj);
	var vec_fct = fct.parsevector();
	var vec_tm = project.SP_AA_S_PJT_TEAM.parsevector();
	var vec_tm_fct = new vector();
	var result = "";

	//Parcours R&D - ARD
	for (var f in vec_fct)
		//Parcours users Function = R&D - ARD
		for (var u in OpxUser where u.SP_AA_S_USER_FUNC == f order by {"SP_AA_S_USER_FUNC"}){
			//Parcours la liste des Project team members (resources)
			for(var tm in vec_tm)
			{
				var o = "OpxResource".get(tm);
				if(o.MANAGER == u) {
					vec_tm_fct.push(tm);
					break;
				}
			}
		}

	if (vec_tm_fct.length > 0)
		result = vec_tm_fct.join(",");

	return result;
} */
function sp_ncs_tm_per_func(prj,fct)
{
	try{
		var project = "OpxProject".get(prj);
		var vec_fct = fct.parsevector();
		var v_result = new vector();
		for (var s_fct in vec_fct){
			fromobject(project){
				for (var tm in "OpxSP_PT_TEAM_MEMBER" where tm.SP_RA_TEAM_MEMBER_USER.SP_AA_S_USER_FUNC == s_fct) v_result.push(tm.SP_RA_TEAM_MEMBER_USER.DESC);
			}
		}
		if (v_result.length>0) return v_result.removeduplicates().sort("<").join(",");
		return "";
	}catch(error e){
		writeln("ERROR in sp_ncs_tm_per_func : "+e);
		alert("ERROR in sp_ncs_tm_per_func : "+e);
		alert("Please, contact your admin to solve the problem");
		return "";
	}
}
withoutlocking {
	sp_ncs_tm_per_func.exportfunction({"STRING", "STRING"}, "STRING");
}

writetolog("Script sp_ojs_ncs_get_study_info loaded with version ~a ", revision_number);

//
//	NAME	: sp_js_ncs_get_study_info
//	AUTHOR  : mpa
//  VERSION : 1.0
//  PURPOSE : COMPASS v6 , RNCS and NCS
//  
//  HISTORY :
var revision_number ="1.1";
//
//	Revision 1.2  2017/11/17 mrochas : sp_ncs_tm_per_func is now based on OpxSP_PT_TEAM_MEMBER of the prj + patch sp_ncs_tm_per_func
//  Revision 1.1  2017/04/11 mpa: import of sp_ncs_tm_per_func() 
//  Revision 1.0  2017/02/16 : creation of the macro-script 

function Sp_get_NCS_Study_Code(field)
{
	var result = "";
	var cur_act = (this InstanceOf OpxActivity ? this:this.ACTIVITY);

	if (cur_act != undefined && cur_act Instanceof OpxActivity) {
		var act_level = cur_act.LEVEL;
		var exit = 0;
		while (act_level >= 1 && exit == 0)
			if (cur_act.SP_NF_S_NCS_STUDY) {
				result = (field == "" ? cur_act.index:cur_act.get(field));
				exit=1;
			}
			else {
				cur_act = cur_act.WBS_ELEMENT;
				act_level = cur_act.LEVEL;
			}
	}
	return result;
}
withoutlocking {
	Sp_get_NCS_Study_Code.exportfunction({"STRING"},"STRING");
}

function Sp_get_act_date_NCS(date_field, act_type)
{
	var result = -1;
	var cur_act = this;

	if (cur_act != undefined && cur_act.SP_NF_S_NCS_STUDY && cur_act Instanceof OpxActivity)
		fromobject(cur_act)
			for (var act in "OpxActivity" where act.WBS_TYPE.index == act_type order by {"PF"}) {
				result = act.get(date_field);	
				break;
			}

	return result;
}


withoutlocking {
	Sp_get_act_date_NCS.exportfunction({"STRING","STRING"},"DATE");
}


function Sp_get_propagate_string_field_under_NCS(string_field) {
	var result = -1;
	var cur_act = this;
	if(cur_act Instanceof OpxActivity) {
		while(cur_act.SP_NF_S_NCS_STUDY == false && cur_act.level != 1) {
			cur_act = cur_act.WBS_ELEMENT;
		}
		result = cur_act.get(string_field);
	}
	return result;
}
withoutlocking {
	Sp_get_propagate_string_field_under_NCS.exportfunction({"STRING"},"STRING");
}


//now based on OpxSP_PT_TEAM_MEMBER stored in the project
// for NCS Study key information dashboard reporting
/* function sp_ncs_tm_per_func(prj,fct)
{
	var project = "OpxProject".get(prj);
	var vec_fct = fct.parsevector();
	var vec_tm = project.SP_AA_S_PJT_TEAM.parsevector();
	var vec_tm_fct = new vector();
	var result = "";

	//Parcours R&D - ARD
	for (var f in vec_fct)
		//Parcours users Function = R&D - ARD
		for (var u in OpxUser where u.SP_AA_S_USER_FUNC == f order by {"SP_AA_S_USER_FUNC"}){
			//Parcours la liste des Project team members (resources)
			for(var tm in vec_tm)
			{
				var o = "OpxResource".get(tm);
				if(o.MANAGER == u) {
					vec_tm_fct.push(tm);
					break;
				}
			}
		}

	if (vec_tm_fct.length > 0)
		result = vec_tm_fct.join(",");

	return result;
} */
function sp_ncs_tm_per_func(prj,fct)
{
	try{
		var project = "OpxProject".get(prj);
		var vec_fct = fct.parsevector();
		var v_result = new vector();
		for (var s_fct in vec_fct){
			fromobject(project){
				for (var tm in "OpxSP_PT_TEAM_MEMBER" where tm.SP_RA_TEAM_MEMBER_USER.SP_AA_S_USER_FUNC == s_fct) v_result.push(tm.SP_RA_TEAM_MEMBER_USER.DESC);
			}
		}
		if (v_result.length>0) return v_result.removeduplicates().sort("<").join(",");
		return "";
	}catch(error e){
		writeln("ERROR in sp_ncs_tm_per_func : "+e);
		alert("ERROR in sp_ncs_tm_per_func : "+e);
		alert("Please, contact your admin to solve the problem");
		return "";
	}
}
withoutlocking {
	sp_ncs_tm_per_func.exportfunction({"STRING", "STRING"}, "STRING");
}

writetolog("Script sp_ojs_ncs_get_study_info loaded with version ~a ", revision_number);

 
//* -*- Mode: C++ -*- *****************************************************
//  COPYRIGHT (C) PLANISWARE Date: 2017/09/11 08:38:03                                             
//                                                                          
//  All Rights Reserved                                                     
// 
//  This program and the information contained herein are confidential to
//  and the property of PLANISWARE and are made available only to PLANISWARE
//  employees for the sole purpose of conducting PLANISWARE business.
// 
//  This program and copy therof and the information contained herein shall
//  be maintained in strictest confidence ; shall not be copied in whole or
//  in part except as authorized by the employee's manager ; and shall not
//  be disclosed or distributed (a) to persons who are not PLANISWARE employees,
//  or (b) to PLANISWARE employees for whom such information is not necessary in
//  connection with their assigned responsabilities.
// 
//  There shall be no exceptions to the terms and conditions set forth
//  herein except as authorized in writing by the responsible PLANISWARE General
//  Manager.
//
// 
//  FILE    : RCSfile: SP_JS_NV_PORTFOLIO.ojs,v 
// 
//  AUTHOR  : Author: mlakhal 
// 
//  VERSION : Id: SP_JS_NV_PORTFOLIO.ojs,v 4.18 2018/12/25 MAG Exp 
// 
//  PURPOSE :
// 
//  HISTORY :
//  Log: SP_JS_NV_PORTFOLIO.ojs,v 
//
var revision_number ="4.22";

//Revision 4.22 2020/02/19	 SSK
//ITS-INC3833644 : Updated SP_JS_RODMAP_GANT_HANDLER to add a block for Cancelled activities to display Grey disk icon
//
//Revision 4.21 2019/11/14	 KSH
//ITS-INC3124017 : Updated sp_ojs_print_nv_monthly_report to remove the projects pdf which are old and deleted NV_PORTFOLIO_SELECTION_PMR
//
//Revision 4.20 2019/01/04	 MAG
//ITS-INC2356166 : Updated sp_ojs_nv_print_pdf to provide the start and end date for "NV entry & exit" PDF
//
// Revision 4.19 2019/02/27	 MAG
// RITM0902445 : Updated sp_ojs_nv_print_pdf to generate "Monitoring-Stage Gate Timelines" PDF
//
// Revision 4.18 2018/12/25	 MAG
// RITM0736427 : Added atrtibute type with notepad SP_GS_S_ADD_COMM_MAJMS
//
// Revision 4.17 2019/01/11	 mblaise
// RITM0736427 : update of sp_ojs_nv_print_pdf to generate "Performance - All Major Milestones" and "Major Milestones status" PDF 
//				 update of SP_JS_RODMAP_GANT_HANDLER to display the good icon for "Ahead of Time and not completed"
//				Creation of sp_js_spot_draw_l_date_timeline_NV
//
// Revision 4.16 2018/12/18	 bcordel
// RITM0745108 : update of function sp_ojs_nv_print_pdf to change TPP file generation and adding sp_js_nv_tpp_generation
//
// Revision 4.15 2018/10/12	 bcordel
// ITS-INC1559331 : update of function sp_ojs_nv_print_pdf to add the time window definition
//
// Revision 4.14 2018/09/03 bcordel
// RITM0557509 : update of function sp_js_key_milestone_status_indicator_iconhandler to add the "not met" part
//
// Revision 4.13 2018/06/20 LFA - ITS-INC0750106
// Update of sp_ojs_nv_print_pdf : Add a conrol for generation of TPP compilation
//
// Revision 4.12 2018/06/11 LFA - ITS-INC0750105
// Update of sp_ojs_print_nv_monthly_report : Modification of number used for Franchise in PDF name + Use of new portfolio NV_PORTFOLIO_SELECTION_PMR
//
// Revision 4.11 2018/06/06 YSA
// update attribute type with notepad on the following fields SP_GS_S_ADD_COMM_KPI1 and SP_GS_S_ADD_COMM_PKMS 
//
// Revision 4.10 2018/03/15 JBE
// Update of sp_ojs_nv_print_pdf to generate TPP from portfolio SELECTION and to not remove files (issue with document in version)
// Update of sp_ojs_print_nv_monthly_report to not remove files 
//
// Revision 4.9 2018/03/14 lfavre
// Modification of sp_ojs_nv_print_pdf : use "NV" for "Entry & Exit"
//
// Revision 4.8 2018/03/01 lfavre
// Modification of sp_ojs_nv_print_pdf : use "NV PORT Selection" for "Entry & Exit"
// Creation of function sp_nv_show_predev_proj (used in report SP_PO_OVERVIEW_DASHBOARD_BY_FRANCHISE)
//
// Revision 4.7 2018/02/19 lfavre
// Update sp_ojs_nv_print_pdf --> Modification of formats + TPP
// Creation of function sp_ojs_print_nv_monthly_report for print of monthly report
//
// Revision 4.6 2018/02/13 lfavre
// Modification of function SP_JS_GET_LAST_MONTHLY_UPDATE_DATE to order reference by name
// Update sp_ojs_nv_print_pdf --> Add NV Entry & Exit
// 
// Revision 4.5 2018/02/05 lfavre
// Modification of function sp_js_get_mto_license_activity to get the next milestone after the last update date
// Fix function sp_ojs_nv_print_pdf
// Modification of function SP_JS_GET_LAST_MONTHLY_UPDATE_DATE to get return the start of the month of the monthly baseline
//
// Revision 4.4 2018/01/24 YSA
// sp_ojs_nv_print_pdf function correction
//
//	Revision 4.3 2017/12/07 lfavre
//	Modification function sp_ojs_nv_print_pdf to add print of NV Project Team Members List.pdf 
//
//	Revision 4.2 2017/11/30 lfavre
//	Creation of functions sp_ojs_nv_move_file and sp_ojs_nv_print_pdf for impression of NV Portfolio PDF
//
//	Revision 4.1 2017/11/20 mrochas
//	function sp_js_spot_draw_license_date_sf : remove test with SP_AA_B_CANCELLED (does not exist)
//
//	Revision 4.0 2017/11/15 mrochas
//	BS_TEAM_MEMBER is now based on OpxSP_PT_TEAM_MEMBER
//
//  Revision 3.9 2017/11/08 bcordel
//  Modifying sp_js_license_date_str to adapt return depending activity type.
//
//  Revision 3.8 2017/11/03 tgi
//  Team member by Func : remove version number in field "Project (Project code)"
//
//  Revision 3.7 2017/10/14 Ludovic
// 	Creation of 2 new settings SP_GS_NV_PORT_PDF_FULL and SP_GS_NV_PORT_PDF_LIM for NV Portfolio PDF Directories
// 	Modification of function SP_JS_RODMAP_GANT_HANDLER to change icone use new images and use stored value for "Progress Completion Status"
//  Creation of Setting SP_GS_D_NV_PERF_REPORT_LAST_UPDATE
//
//	Revision 3.6 2017/10/06 Ludovic
//	Modification of function sp_js_key_milestone_status_indicator_iconhandler to use new images
//
//  Revision 3.5  2017/09/11 08:38:03  mlakhal
//  - remove alerts
//
//  Revision 3.4  2017/09/06 09:11:33  mlakhal
//  - add sp_js_license_date_str
//
//  Revision 3.3  2017/09/05 16:00:16  mlakhal
//  *** empty log message ***
//
//  Revision 3.2  2017/09/05 15:57:04  mlakhal
//  *** empty log message ***
//
//  Revision 3.1  2017/09/05 15:51:20  mlakhal
//  -bsoftware script for NV portfolio
//   (header added automatically)
//
//**************************************************************************
// Version 1.1 Added pdf generation
// Version 1.0 Added sp_js_license_date()
// Version 0 created 10-05-2017 b-software


/************* Style for project team members ************/

/* function BS_TEAM_MEMBER(){
	var filter = false ;
	var id=context.SP_AA_S_OC_NV_PRJ_ID;
	var CurrentProject = "opxproject".get(id);
	if (CurrentProject instanceof opxproject)
	{
		var sTeamMember = CurrentProject.SP_AA_S_PJT_TEAM;
		var oline = this ;
		var vTeamMember=sTeamMember.split(",");
		for(var team in vTeamMember){
			if(team == oline.DESC)
				filter = true
		}
	}
	return filter ;
}BS_TEAM_MEMBER.exportfunction("","BOOLEAN"); */
function BS_TEAM_MEMBER(){
	var filter = false ;
	var id=context.SP_AA_S_OC_NV_PRJ_ID;
	var CurrentProject = "opxproject".get(id);
	if (CurrentProject instanceof opxproject){
		var oline = this ;
		fromobject(CurrentProject){
			for (var o_tm in "OpxSP_PT_TEAM_MEMBER"){
				if (o_tm.SP_RA_TEAM_MEMBER_USER == oline){
					filter = true;
					break;
				}
			}
		}
	}
	return filter ;
}BS_TEAM_MEMBER.exportfunction("","BOOLEAN");


/////******Licence Date********/////
function sp_js_get_mto_license_activity() {
	var oMTOActivity = undefined ;
	var oProj = this;
	var last_update = context.SP_NF_COMPASS_LAST_UPDATE;
	if (oProj instanceof OpxProject) {
		fromobject(oProj) {
			for (var oAct in "opxActivity" where(oAct.callbooleanformula("IF PROJECT.SP_NF_B_NV_DEV THEN WBS_TYPE in (\"MIDOBJ*\",\"MLIM*\") ELSE IF PROJECT.SP_NF_B_NV_PREDEV THEN WBS_TYPE in (\"MM1\",\"MM2\") FI FI") && /*oAct.AF == undefined*/oAct.PF>=last_update)order by {"PF"}) {
				oMTOActivity = oAct ;
				break ;
			}
		}
	} 
	return oMTOActivity ;
}


function sp_js_license_date() {
	var licence_date = "";	
	var oProj = this;
	if (oProj instanceof OpxProject) {
		var oMTOActivity = oProj.sp_js_get_mto_license_activity() ;
		if(oMTOActivity instanceof opxActivity){
			licence_date = oMTOActivity.PF ;	
			if(licence_date instanceof Date){
				licence_date = "add_duration".callmacro(licence_date, -1440, ""); 
			}
		}
	}
	
	return licence_date ;
}
sp_js_license_date.exportFunction("", "DATE");


function sp_js_license_date_str() {
	var licence_date = "";	
	var oProj = this;
	if (oProj instanceof OpxProject) {
		var oMTOActivity = oProj.sp_js_get_mto_license_activity() ;
		if(oMTOActivity instanceof opxActivity){
			
			var o_act_type=oMTOActivity.WBS_TYPE;
			licence_date = oMTOActivity.PF ;	
			if(licence_date instanceof Date){
				licence_date = "add_duration".callmacro(licence_date, -1440, ""); 
			}
			
			// different inscription depending of activity type
			if (o_act_type.CallBooleanFormula("BELONGS(\"WBS_TYPE\",\"DEC\")"))
			{
				if (oMTOActivity.NAME =="MM1")
				{
				licence_date = "M1 : " +  licence_date;
				}else{
					licence_date = "M2 : " +  licence_date;
				}
			}else if (o_act_type.CallBooleanFormula("BELONGS(\"WBS_TYPE\",\"MLIM\")")){
				licence_date = "License date : " +  licence_date;
			}else{
				licence_date = "MTO date : " +  licence_date;
			}
		}
	}
	
	return licence_date ;
}
sp_js_license_date_str.exportFunction("", "STRING");

/*
	called in cell in report SP_REP_PROJECT_TIMELINE_HEADBAND_422 to display 
	image for the MTO/License date
*/
 function sp_js_spot_draw_l_date_timeline_NV() {
	var sStatus = "";
	var oProj = "opxproject".get(context.SP_AA_S_OC_NV_PRJ_ID);

	var oImage = undefined ;
	try{
		if (oProj instanceof OpxProject) {
			var oMTOActivity = oProj.sp_js_get_mto_license_activity();
			if(oMTOActivity instanceof opxActivity){
				oImage=oMTOActivity.sp_js_key_milestone_status_indicator_iconhandler();
			}
			if(oImage instanceof opxImage){
				this.drawimage(oImage.printattribute(), 0, 0, false, false, false, true, 1, 1);
			}
		} 
	}
	catch(error err){
		writeln("[ERROR][sp_js_spot_draw_license_date_sf] :: " + err.toString());
	}	
}
sp_js_spot_draw_l_date_timeline_NV.exportfunction();

function sp_js_spot_draw_license_date_sf() {
	var sStatus = "";
	var oProj = this.object;
	var oImage = undefined ;
	try{
		if (oProj instanceof OpxProject) {
			var oMTOActivity = oProj.sp_js_get_mto_license_activity() ;
			if(oMTOActivity instanceof opxActivity){
				/* if(oMTOActivity.callbooleanformula("SP_AA_B_CANCELLED")){
					oImage = undefined ; // not specified
				}
				else  */if(oMTOActivity.callbooleanformula("IF SP_NF_S_LEADS_LAGS <> \"\" THEN IF SP_NF_D_YEARLY_REF_ED < PERIOD_START($DATE_OF_THE_DAY,\"YEAR\",1) " + 
														"THEN DURATION(SP_NF_S_LEADS_LAGS) > '28d' and (SP_NF_B_PKM or WBS_TYPE in (\"MLIM*\", \"MLAM*\", \"MM1\", \"MM2\", \"MPROC*\") " + 
														"or BELONGS(\"WBS_TYPE\", \"SPREC-I,SPREC-R,SPHA1-I,SPHA1-R,SPHA2A-I,SPHA2A-R,SPHA2B-I,SPHA2B-R,SPHA3-I,SPHA3-R,SREGU-I,SREGU-R\")) " +
														"ELSE DURATION(SP_NF_S_LEADS_LAGS) > '91,248d' and WBS_TYPE in (\"MIDOBJ*\", \"MLIM*\", \"MM1\", \"MM2\") FI FI")){
					oImage = opxImage.get("SP_IMG_RED_UNCHECKED") ;		
				}
				else if(oMTOActivity.callbooleanformula("IF SP_NF_S_LEADS_LAGS <> \"\" THEN IF SP_NF_D_YEARLY_REF_ED < PERIOD_START($DATE_OF_THE_DAY,\"YEAR\",1) THEN "+
														"DURATION(SP_NF_S_LEADS_LAGS) < '-28d' and (SP_NF_B_PKM or WBS_TYPE in (\"MLIM*\", \"MLAM*\", \"MM1\", \"MM2\", \"MPROC*\") " +
														"or BELONGS(\"WBS_TYPE\", \"SPREC-I,SPREC-R,SPHA1-I,SPHA1-R,SPHA2A-I,SPHA2A-R,SPHA2B-I,SPHA2B-R,SPHA3-I,SPHA3-R,SREGU-I,SREGU-R\")) " +
														"ELSE DURATION(SP_NF_S_LEADS_LAGS) < '-91,248d' and WBS_TYPE in (\"MIDOBJ*\", \"MLIM*\", \"MM1\", \"MM2\") FI FI")){
					oImage = opxImage.get("SP_IMG_GREEN_UNCHECKED") ;		
				}
				else if(oMTOActivity.callbooleanformula("IF SP_NF_S_LEADS_LAGS <> \"\" THEN IF SP_NF_D_YEARLY_REF_ED < PERIOD_START($DATE_OF_THE_DAY,\"YEAR\",1) THEN "+
														"DURATION(SP_NF_S_LEADS_LAGS) >= '-28d' AND DURATION(SP_NF_S_LEADS_LAGS) <= '28d' and (SP_NF_B_PKM or "+
														"WBS_TYPE in (\"MLIM*\", \"MLAM*\", \"MM1\", \"MM2\", \"MPROC*\") or "+
														"BELONGS(\"WBS_TYPE\", \"SPREC-I,SPREC-R,SPHA1-I,SPHA1-R,SPHA2A-I,SPHA2A-R,SPHA2B-I,SPHA2B-R,SPHA3-I,SPHA3-R,SREGU-I,SREGU-R\")) " +
														"ELSE DURATION(SP_NF_S_LEADS_LAGS) >= '-91,248d' AND DURATION(SP_NF_S_LEADS_LAGS) <= '91,248d' and WBS_TYPE in (\"MIDOBJ*\", \"MLIM*\", \"MM1\", \"MM2\") FI FI")){
					oImage = opxImage.get("SP_IMG_BLACK_UNCHECKED") ;					
				}
			}
			if(oImage instanceof opxImage){
				this.drawimage(oImage.printattribute(), 0, 0, false, false, false, true, 1, 1);
			}
		} 
	}
	catch(error err){
		writeln("[ERROR][sp_js_spot_draw_license_date_sf] :: " + err.toString());
	}	
}

function sp_js_key_milestone_status_indicator_iconhandler(){
	var size = 15;
	var oActivity = this;
	var sImage = "Progress_start3" ;
	if (oActivity instanceof opxActivity){
		var sProgressStatus = oActivity.SP_NF_S_PRG_STATUS ;
		if(sProgressStatus == "Cancelled"){
			sImage = "SP_IMG_DISC_GREY" ;
		}
		else if(sProgressStatus == "Not met"){
			sImage = "SP_IMG_DISC_RED" ;
		}
		else if(sProgressStatus == "Ahead of Time"){
			sImage = "SP_IMG_DISC_GREEN" ;
		}
		else if(sProgressStatus == "On Time"){
			sImage = "SP_IMG_DISC_BLACK" ;
		}
		else if(sProgressStatus.indexof("Delayed") instanceof number){
			sImage = "SP_IMG_DISC_RED" ;
		}
		if(oActivity.AF instanceof Date){
			sImage = sImage + "_CHECKED";
		}
		else{
			sImage = sImage ;
		}
		return "opxImage".get(sImage);
	}
	else{	
		return false;
	}
}

function sp_js_key_milestone_status_indicator_set_handler(){
	var oSfSlot = "opxSYMBOLIC_FIELD".get("Activity.SP_SF_STATUS_INDICATOR");
	if(oSfSlot != undefined && oSfSlot != ""){
		oSfSlot.addiconhandler(sp_js_key_milestone_status_indicator_iconhandler);
	}
}
AddWrapperFunction(InitializeIntranetAfterWrapper,"sp_js_key_milestone_status_indicator_set_handler");
/***** Progress Status  ****/

function sp_js_key_milestone_status_progress_set_handler(){
	var oSfSlot = "opxSYMBOLIC_FIELD".get("Activity.SP_SF_PROGRESS_STATUS");
	if(oSfSlot != undefined && oSfSlot != ""){
		oSfSlot.addiconhandler(sp_js_key_milestone_status_indicator_iconhandler);
	}
}
AddWrapperFunction(InitializeIntranetAfterWrapper,"sp_js_key_milestone_status_progress_set_handler");

/***** TPP FILE  ****/

var path_file = new setting("SP_GS_PATH_TPP",
                          "Path TPP File",
                          "/compassv6/PDF/TPP/",
                          "String",
                          ""); 
						  
						  
function path_for_file(useless)
{

var path=context.SP_GS_PATH_TPP + "/"+ this.SP_NF_S_TPP_FILE_NAME;

if( path.Probefile()== false)
	
	return false;
else
	return true;

}
path_for_file.Exportfunction({"STRING"},"Boolean");
/***** Open One TPP FILE  ****/

function Open_tpp_file()
{
    var sPdfName = "";
    if (this instanceof opxProject)
    {
        sPdfName = this.SP_NF_S_TPP_FILE_NAME;
    }
    else if (this.object instanceof opxProject)
    {
        sPdfName = this.object.SP_NF_S_TPP_FILE_NAME;
    }
        
    if (sPdfName != "")
    {
        var sPdfDirectory = context.SP_GS_PATH_TPP;
        var sPdfURL = context.SP_GS_PATH_TPP;
        var sPdfPath = new PathName(sPdfDirectory + "/" + sPdfName);
        var sGetPdfUrl = sPdfPath.filegeturl() ;
        var oLink = new hyperlink("URL","Page",sGetPdfUrl,"popup",True);
        if(oLink != undefined)
        {
         oLink.go();
        }
    }
}
Open_tpp_file.Exportfunction();

function bs_js_Func_resource_user(){
	var oUser= this;
	var vfunc=new vector();
	var sResource=this._tm_nf_s_managed_resources;
	var vResource=sResource.split(",");
	for(var res  in vResource)
	{
		
		vfunc.push("STRING_VALUE".callmacro("RESOURCE", res, "SP_NF_CL_FUNCTION"));

	}
	return vfunc.join(",");
}bs_js_Func_resource_user.exportfunction("","STRING");


function PopulateTempTMTable()
{
	writeln("Temp table going to be emptied");
	var ProjectList = new vector();

	var objects;
	var i = 0;
	for (var obj in "OpxTeamMemberListByProject"   ) 
	{
		objects[i] = obj;
		i++;
	}
	objects.CallMacro("Remove");
    writeln("Temp table empty");
	// for (var obj in "OpxUser" 
		// where obj.SP_NF_USER_LINKED_PROJECT_TEAM !="" && obj.DESC != "") 
	// {
		// ProjectList = obj.SP_NF_USER_LINKED_PROJECT_TEAM.parsevector();
	
	for (var Each in OPXProject where each.callbooleanformula("OPEN AND SP_AA_S_PJT_TEAM<>\"\" AND PM_PRJ_FILTER"))
	{	
		writeln("Project to be scanned : " + Each);
		for (var obj in "OpxUser")
		{
			if obj.callbooleanformula("LIST_FIND(DESC,\"" + each.SP_AA_S_PJT_TEAM + "\")")
			{
						new OpxTeamMemberListByProject 
						("NAME",obj.printattribute()+"-"+Each.printattribute(),
						"SP_AA_PROJECT",Each.breakdown_2.printattribute(),
						"SP_AA_LCS",Each.SP_AA_S_LC_STATUS,
						"SP_AA_PRJ",Each.printattribute(),
						"SP_AA_TEAM_MEMBER",obj.DESC,
						"SP_AA_TM_FUNCTION",obj.SP_AA_S_USER_FUNC,
						"SP_AA_PRJ_CODE",Each.SPAS_AA_PROJECT_CODE);
						//"SP_AA_PRJ_CODE",Context.CallStringFormula("STRING_VALUE(\"PROJECT\",\"" + Each + "\",\"SPAS_AA_PROJECT_CODE\")"));
			writeln("Associated user  : " + obj);
			}
		}
	}
	// }
}




function PopulateTempTMTable_ByFunc()
{
	writeln("Temp table ByFunc going to be emptied");
	
	var objects;
	var i = 0;
	for (var obj in "OpxTeamMemberListByFunction"   ) 
	{
		objects[i] = obj;
		i++;
	}
	objects.CallMacro("Remove");
    writeln("Temp table ByFunc empty");
	
	for (var Each in OPXProject where each.callbooleanformula("OPEN AND SP_AA_S_PJT_TEAM<>\"\" AND PM_PRJ_FILTER"))
	{	
		writeln("Project to be scanned for Temp Table By Function: " + Each);
		for (var obj in "OpxUser")
		{
			if obj.callbooleanformula("LIST_FIND(DESC,\"" + each.SP_AA_S_PJT_TEAM + "\")")
			{
				var Cur_temp_user = "OpxTeamMemberListByFunction".get(obj.printattribute());
				writeln("Cur_temp_user : " + Cur_temp_user);
				if (Cur_temp_user instanceof OPXSP_TT_TEAM_MEMBER_LIST_BY_FUNC && Cur_temp_user != undefined)
				{
					Cur_temp_user.SP_AA_PRJS = Cur_temp_user.SP_AA_PRJS + ", " + Each.printattribute();
					Cur_temp_user.SP_AA_PRJ_CODES = Cur_temp_user.SP_AA_PRJ_CODES + ", " + Each.SPAS_AA_PROJECT_CODE;
					Cur_temp_user.SP_AA_PRJS_CODES = Cur_temp_user.SP_AA_PRJS_CODES + ", " + Each.callStringFormula("SP_NF_S_PROJECT_NAME") + " (" + Each.SPAS_AA_PROJECT_CODE + ")";
				}
				else
				{
					new OpxTeamMemberListByFunction 
					(
						"NAME",obj.printattribute(),
						"DESC",obj.DESC,
						"SP_AA_PROJECT",Each.breakdown_2.printattribute(),
						"SP_AA_LCS",Each.SP_AA_S_LC_STATUS,
						"SP_AA_TM_FUNCTION",obj.SP_AA_S_USER_FUNC,
						"SP_AA_PRJS",Each.printattribute(),
						"SP_AA_PRJ_CODES",Each.SPAS_AA_PROJECT_CODE,
						"SP_AA_PRJS_CODES",Each.callStringFormula("SP_NF_S_PROJECT_NAME") + " (" + Each.SPAS_AA_PROJECT_CODE + ")"
					);
				}
			writeln("Associated user  : " + obj);
			}
		}
	}
}


 /************* Get Month (Monitoring group By month) ************/

function SP_JS_GET_MONTH(date){
	var month ="";
		
	if (date.getmonth() == 1)
		month = "01-January";
	else if(date.getmonth() == 2)
		month = "02-February";
	else if(date.getmonth() == 3)
		month = "03-March";
	else if(date.getmonth() == 4)
		month = "04-April";
	else if(date.getmonth() == 5)
		month = "05-May";
	else if(date.getmonth() == 6)
		month = "06-June";
	else if(date.getmonth() == 7)
		month = "07-July";
	else if(date.getmonth() == 8)
		month = "08-August";
	else if(date.getmonth() == 9)
		month = "09-September";
	else if(date.getmonth() == 10)
		month = "10-October";
	else if(date.getmonth() == 11)
		month = "11-November";
	else if(date.getmonth() == 12)
		month = "12-December";
	else
		month = date.getmonth().toString();
	return month;
}SP_JS_GET_MONTH.exportfunction({"DATE"},"STRING");

 /************* Get Year (Monitoring filter by year) ************/
function sp_js_get_year()
{
var oAct = this;
	var date = oAct.PS ;
	var year=date.getyear();
	

	return date.getyear();
	
}sp_js_get_year.exportfunction("","NUMBER");
 /************* Print PDF Template ************/

function SP_JS_GET_LAST_MONTHLY_UPDATE_DATE(useless){
for (var each in "opxREFERENCE" where each.callbooleanformula("NAME <> \"*YEARLY*\" and DESC=\"*Monthly*\"") Order by {{"INVERSE","NAME"}})
{
//return each.AD;
//LFA - The date should be the start of the month of the monthly baseline
return each.SP_NF_D_MONTHLY_SD;
break;}
}
SP_JS_GET_LAST_MONTHLY_UPDATE_DATE.exportfunction({"STRING"},"DATE");

 /************* Open PKM reference list excel file ************/
 
var pkm_list = new setting("SP_GS_PKM_REF_LIST_PATH",
                          "PKM reference list",
                          "/compassv6/PDF/PKM/",
                          "String",
                          ""); 
function Open_pkm_reference_list()
{
var sPdfName="pkm_reference_list.xls";
var sPdfDirectory = context.SP_GS_PKM_REF_LIST_PATH;
var sPdfPath = new PathName(sPdfDirectory + "/" + sPdfName);
var sGetPdfUrl = sPdfPath.filegeturl() ;
var oLink = new hyperlink("URL","Page",sGetPdfUrl,"popup",True);
if(oLink != undefined)
{
 oLink.go();
}}
Open_pkm_reference_list.Exportfunction();

 /************* PDF Generation ************/
 
 var Project_ID_Card = new setting("SP_GS_PROJECT_ID_CARD_PATH",
                          "Project ID Card Path",
                          "/compassv6/PDF/PDF_TEMPORARY/Project ID Card",
                          "String",
                          "");
var Project_Timelines = new setting("SP_GS_PROJECT_TIMELINES_PATH",
                          "Project Timelines Path",
                          "/compassv6/PDF/PDF_TEMPORARY/Project Timelines",
                          "String",
                          "");
var PROJECT_FINANCIAL_DATA = new setting("SP_GS_PROJECT_FINANCIAL_DATA_PATH",
                          "Project Financial Data Path",
                          "/compassv6/PDF/PDF_TEMPORARY/Project Financial Data",
                          "String",
                          "");						 
var Monthly_reports = new setting("SP_GS_MONTHLY_REPORTS_PATH",
                          "Monthly reports Path",
                          "/compassv6/PDF/PDF_TEMPORARY/Monthly_reports",
                          "String",
                          "");
var NV_Projects_list = new setting("SP_GS_NV_PROJECT_LIST_PATH",
                          "NV Project List Path",
                          "/compassv6/PDF/PDF_TEMPORARY/NV_Portfolio/Portfolio_ID",
                          "String",
                          "");
var NV_Project_Team_Members_List_By_Project = new setting("SP_GS_NV_PRJ_TM_PROJECT_PATH",
                          "NV Project Team Members List by Project Path",
                          "/compassv6/PDF/PDF_TEMPORARY/NV_Portfolio/Portfolio_ID",
                          "String",
                          "");
var NV_Project_Team_Members_List_By_Function = new setting("SP_GS_NV_PRJ_TM_FUNCTION_PATH",
                          "NV Project Team Members List by Function Path",
                          "/compassv6/PDF/PDF_TEMPORARY/NV_Portfolio/Portfolio_ID",
                          "String",
                          "");
var NV_Segmentation_grid_Dev = new setting("SP_GS_NV_SEGMENTATION_GRID_DEV_PATH",
                          "NV Segmentation Grid Dev Path",
                          "/compassv6/PDF/PDF_TEMPORARY/NV_Portfolio/Portfolio_ID",
                          "String",
                          "");
var NV_Segmentation_grid_PreDev = new setting("SP_GS_NV_SEGMENTATION_GRID_PREDEV_PATH",
                          "NV Segmentation Grid PreDev Path",
                          "/compassv6/PDF/PDF_TEMPORARY/NV_Portfolio/Portfolio_ID",
                          "String",
                          "");
var NV_Portfolio_Entry_Exit = new setting("SP_GS_NV_ENTRY_EXIT_PATH",
                          "NV Portfolio Entry and Exit Path",
                          "/compassv6/PDF/PDF_TEMPORARY/NV_Portfolio/Portfolio_ID",
                          "String",
                          "");
var Probability_Success = new setting("SP_GS_PROBABILITY_OF_SUCCESS_PATH",
                          "Probability of Sucess Path",
                          "/compassv6/PDF/PDF_TEMPORARY/NV_Portfolio/Portfolio_ID",
                          "String",
                          "");
var NV_Portfolio_Pipeline = new setting("SP_GS_NV_PORTFOLIO_PIPELINE_PATH",
                          "NV Portfolio Pipeline Path",
                          "/compassv6/PDF/PDF_TEMPORARY/NV_Portfolio/Portfolio overview",
                          "String",
                          "");
var Launch_Projections = new setting("SP_GS_LAUNCH_DATE_PROJECTION_PATH",
                          "Launch Date Projections Path",
                          "/compassv6/PDF/PDF_TEMPORARY/NV_Portfolio/Portfolio overview",
                          "String",
                          "");
var NV_Project_Stage_Progression = new setting("SP_GS_NV_PRJ_STAGE_PROGRESSION_PATH",
                          "NV Project Stage Progression Path",
                          "/compassv6/PDF/PDF_TEMPORARY/NV_Portfolio/Portfolio overview",
                          "String",
                          "");
var Portfolio_movements = new setting("SP_GS_PORTFOLIO_MOVEMENTS_PATH",
                          "Portfolio movements Path",
                          "/compassv6/PDF/PDF_TEMPORARY/NV_Portfolio/Performance",
                          "String",
                          "");
var Performance_All_PKMs = new setting("SP_GS_PERFORMANCE_ALL_PKM_PATH",
                          "Performance All PKMs Path",
                          "/compassv6/PDF/PDF_TEMPORARY/NV_Portfolio/Performance",
                          "String",
                          "");
var Monitoring = new setting("SP_GS_MONITORING_PATH",
                          "Monitoring Path",
                          "/compassv6/PDF/PDF_TEMPORARY/NV_Portfolio/Monitoring",
                          "String",
                          "");
var FTE = new setting("SP_GS_FTE_PATH",
                          "FTE Path",
                          "/compassv6/PDF/PDF_TEMPORARY/NV_Portfolio/FTE & Cost",
                          "String",
                          "");
var Cost = new setting("SP_GS_COST_PATH",
                          "Cost Path",
                          "/compassv6/PDF/PDF_TEMPORARY/NV_Portfolio/FTE & Cost",
                          "String",
                          "");	

//***PDF directory for links on HomePage***//

var PDF_FULL = new setting("SP_GS_NV_PORT_PDF_FULL",
                          "NV Portfolio PDF - FULL Directory",
                          "/compassv6/PDF/PDF_FULL",
                          "String",
                          "");	
						  
var PDF_LIM = new setting("SP_GS_NV_PORT_PDF_LIM",
                          "NV Portfolio PDF - LIMITED Directory",
                          "/compassv6/PDF/PDF_LIMITED",
                          "String",
                          "");	
						  
function sp_js_print_dashboard_pdf(Object,ReportName,oProject,report){

  var PrintingPath = "";
  var Path ="";
  if(Object InstanceOf OpxObject){
    //the name of the pdf is the name of the project
    var FileName = oProject.Name + ".pdf";
    // the prining report is the viewer report
    var ReportToPrint = "OpxReport".report_getreplace(ReportName);
    //in order to work on the client side we need to swith to local path
    context.set("?LOCAL_DOCUMENT_PATH", true);
    
    var tempDirectory = lispcall "merge-pathnames" ( "pdfprint/", lispcall "DATABASE-IO::DB-DIR" ());
    //we check that the dir exists, if not we create it
    if(tempDirectory.ProbeFile() == false){
      mkdir(LispCall "namestring"(tempDirectory));
    }

	
	if (report == "NV Projects list" || report == "NV Project Team Members List" || report == "NV Segmentation grid" || report == "Monitoring" || report == "FTE" || report == "Costs"){
		Path = "/CompassV6/PDF/PDF_TEMPORARY/Portfolio_ID/"+ report+ ".pdf";
	}else{
		
		Path = "/CompassV6/PDF/PDF_TEMPORARY/"+report+"/"+ FileName;

	}

    PrintingPath = new pathName(ReportToPrint.Print(Object,
                                                    "PDF-PRINTER", 
                                                    "A4", 
                                                    "PAYSAGE", 
                                                    Path));
    context.set("?LOCAL_DOCUMENT_PATH", false);
  }
  return PrintingPath;
}



method Print_CreateViewer on graphics(){
  var CurrentDashboard = "OpxDashboard".get(Print_GetCurrentDashboardId());
  this.Print_GenerateDashboard(CurrentDashboard,"CURRENT_VIEWER",false,true);
}

/*************************************************************************************/
function Print_GetCurrentDashboardId(){
  
	var DashboardId = "";
	var DashboardName = Context._DBB_AA_S_CURRENT_DASHBOARD;    
    if(DashboardName != undefined){
      DashboardId = DashboardName;
    }
	return Dashboardid;
} 
/******************************************************************************************************/

method Print_GenerateDashboard on Graphics(CurrentDashboard,viewerWidget,onObject,Drawpresentation){

  //Check if we need to apply a drill down from a link
  var Alreadydone = getTemporaryObject("_LINKS_OBJECT_FOR_DASHBOARD_FILTER");
  if(Alreadydone != undefined){
    if(Alreadydone InstanceOf vector){
      var FilterCLass = Alreadydone[0].Findclass();
      var Object = Alreadydone[0];
      var FilterObjectList = new vector(Object);
      Activate_Dashboard_DrillDown(CurrentDashboard.GetDashboard_To_Display(),FilterClass,FilterObjectList,false,false);
    }
  }
  this.Print_AddDashboardWidget(CurrentDashboard,ViewerWidget,onObject,Drawpresentation);
  
}

/*****************************************************************************************************/

method Print_AddDashboardWidget on graphics(CurrentDashboard,ViewerWidget,onobject,DrawPresentation){
  // var CurrentObject = CurrentPageObject();
  //we check if the dashboard display is triggered by a link
  //in this case we need to create a filter from the selected object in order to properly filter the dashboard
 
  var CurrentObject = "opxProject".get(context._DBB_AA_S_PREVIEW_OBJECT);
 
  var widgetClass = new symbol("DASHBOARD-VIEWER", "KEYWORD");
  if (this instanceof graphics) {
    var edit_mode_default = context._DBB_AA_B_EDIT_MODE;

    //It is possible to impose a minimum width and height in order to be able to display dashbaord with scrollbars
    var ImposedWidth = CurrentDashboard._DBB_AA_N_MINIMUM_WIDTH; if (! ImposedWidth instanceof number) {ImposedWidth = 0;}else {ImposedWidth = math.round(ImposedWidth);}
    var ImposedHeigth = CurrentDashboard._DBB_AA_N_MINIMUM_HEIGHT; if (! ImposedHeigth instanceof number) {ImposedHeigth = 0;}else {ImposedHeigth = math.round(ImposedHeigth);}
    if ( currentdashboard instanceof OpxDashboard) {
      currentdashboard.computebefore();
      currentdashboard.checkquickfiltersselections(); // need to remove obsolete quick filter selections
      var dashboardtodisplay = CurrentDashboard/*.GetDashboard_To_Display()*/;
      var widget = this.Widget;
      if ( DashboardTodisplay InstanceOf Opxdashboard) {
        if ( this.widget != undefined && (! (this.widget instanceof opxDashboardviewer))) {
          var widgetPlist = new vector("Dashboard",DashboardTodisplay,
                                  "object",CurrentObject,
                                  "ondoubleclick",DoubleClickItem,
                                  "edit-mode",edit_mode_default,
                                       "dropmask",2559,
                                  "Ondrop",CreateComponent,
                                  "OnDrag",DragItem,
                                  "Onselect",Selectitem,
                                  "OnDrawAfter", OnDrawAfterDashboard,
                                  "Show-grid",SetDisplayGridForViewer(),
                                  "use-grid", true,
                                       "grid-size", DashboardTodisplay.attribute_getWithDefault("_DBB_AA_N_GRID_HORIZ", 0),
                                       "grid-vertical-size", DashboardTodisplay.attribute_getWithDefault("_DBB_AA_N_GRID_VERTI", 0),
                                       "grid-horizontal-gutter", DashboardTodisplay.attribute_getWithDefault("_DBB_AA_N_GUTTER_HORIZ", 0),
                                       "grid-vertical-gutter", DashboardTodisplay.attribute_getWithDefault("_DBB_AA_N_GUTTER_VERTI", 0));
          var checkedPlist = new vector();
          for (var p = 0; p < widgetPlist.length; p=p+2) {
            if ( lispcall "javascript::get-resource-from-name"(widgetClass, widgetPlist[p]) != false) {
              checkedPlist.setPlist(widgetPlist[p],widgetPlist[p+1]);
            }
          }
          

          widget = this.addwidgetwithplist("DASHBOARD-VIEWER", checkedPlist);
          Context.CURRENT_VIEWER = this.widget;
          if ( ImposedWidth > 0) {
            this.Widget.width = ImposedWidth;
          }
          if ( ImposedHeigth > 0) {
            this.widget.height = ImposedHeigth;
          }
        }
        else if (! this.printing) {

          if ( this instanceof graphics && this.widget != undefined) {
            withoutlocking{
              this.widget.object = CurrentObject;
              this.widget.dashboard = DashboardTodisplay;
              this.widget.editmode = edit_mode_default;
              this.widget.x = this.x;
              this.widget.y = this.y;
              this.widget.width = (ImposedWidth > 0) ? ImposedWidth : this.width;
              this.widget.height = (ImposedHeigth > 0) ? ImposedHeigth : this.height;
              this.widget.showgrid = SetDisplayGridForViewer();
              this.widget.gridsize = DashboardTodisplay.attribute_getWithDefault("_DBB_AA_N_GRID_HORIZ", 0);
              if (lispcall "javascript::get-resource-from-name"(widgetClass, "grid-vertical-size")) {
                this.widget.gridverticalsize = DashboardTodisplay.attribute_getWithDefault("_DBB_AA_N_GRID_VERTI", 0);
                this.widget.gridhorizontalgutter = DashboardTodisplay.attribute_getWithDefault("_DBB_AA_N_GUTTER_HORIZ", 0);
                this.widget.gridverticalgutter = DashboardTodisplay.attribute_getWithDefault("_DBB_AA_N_GUTTER_VERTI", 0);
              }
              context.current_viewer = this.widget;
            }
          }
        }
      }
    }
  }
}



function sp_js_print_nv_portfolio_project (){
	
	var ip = "OpxIntranetPage".get("_MOD_DBB_IP_DASHBOARD_BUILDER_HOME");
	var portfolio = "Opx_FF_PT_FAVOR_FILTERS".get("NV_PORTFOLIO_SELECTION");
	var sDashbord = "INTRANET.SP_DB_PRJ_ID_CARD";
	var CurrentDashboard = "OpxDashboard".get(sDashbord);
	var PdfPath = "";
	var PdfPathString ="";
	context._DBB_AA_S_CURRENT_DASHBOARD = sDashbord;
	for (var oProject in portfolio){
		context._FF_AA_S_LIST_NAME = "NV_PORTFOLIO_SELECTION";
		context._DBB_AA_B_EDIT_MODE = false;
		context._DBB_AA_S_PREVIEW_OBJECT = oProject.printattribute();
		_Guilinktointranetpage(ip.onb);
		PdfPath = sp_js_print_dashboard_pdf(CurrentDashboard,"SP_REP_DASHBOARD_VIEWER_FOR_PRINT",oProject,"Project ID Card");
		PdfPathString = PdfPath.ToString();
	}
	
	var portfolio = "Opx_FF_PT_FAVOR_FILTERS".get("NV_PORTFOLIO_SELECTION");
	var sDashbord = "INTRANET.SP_DB_PRJ_TIMELINE";
	var CurrentDashboard = "OpxDashboard".get(sDashbord);
	var PdfPath = "";
	var PdfPathString ="";
	context._DBB_AA_S_CURRENT_DASHBOARD = sDashbord;
	for (var oProject in portfolio){
		context._FF_AA_S_LIST_NAME = "NV_PORTFOLIO_SELECTION";
		context._DBB_AA_B_EDIT_MODE = false;
		context._DBB_AA_S_PREVIEW_OBJECT = oProject.printattribute();
		_Guilinktointranetpage(ip.onb);
		PdfPath = sp_js_print_dashboard_pdf(CurrentDashboard,"SP_REP_DASHBOARD_VIEWER_FOR_PRINT",oProject,"Project Timelines");
		PdfPathString = PdfPath.ToString();
	}
	
	
	var sDashbord = "INTRANET.SP_DB_NV_PROJECTS_LIST";
	var CurrentDashboard = "OpxDashboard".get(sDashbord);
	var PdfPath = "";
	var PdfPathString ="";
	context._FF_AA_S_LIST_NAME = "NV_PORTFOLIO_SELECTION";
	context._DBB_AA_B_EDIT_MODE = false;
	// context._DBB_AA_S_PREVIEW_OBJECT = "";
	context._DBB_AA_S_CURRENT_DASHBOARD = sDashbord;
	PdfPath = sp_js_print_dashboard_pdf(CurrentDashboard,"SP_REP_DASHBOARD_VIEWER_FOR_PRINT",CurrentDashboard,"NV Projects list");
	PdfPathString = PdfPath.ToString();
	
	// var sDashbord = "INTRANET.SP_DB_TEAM_MEMBER_LIST";
	// var CurrentDashboard = "OpxDashboard".get(sDashbord);
	// var PdfPath = "";
	// var PdfPathString ="";
	// context._FF_AA_S_LIST_NAME = "port_nv";
	// context._DBB_AA_B_EDIT_MODE = false;
	// context._DBB_AA_S_CURRENT_DASHBOARD = sDashbord;
	// PdfPath = sp_js_print_dashboard_pdf(CurrentDashboard,"SP_REP_DASHBOARD_VIEWER_FOR_PRINT",CurrentDashboard,"NV Project Team Members List");
	// PdfPathString = PdfPath.ToString();
	
	var PrintingPath = "";
	var Path = "/CompassV6/PDF/PDF_TEMPORARY/NV_Portfolio/Portfolio_ID/"+ "Project Team Members List by Project.pdf";
	var ReportToPrint = "OpxReport".get("SP_REP_TEAM_MEMBER_BY_PROJECT");
	PrintingPath = new pathName(ReportToPrint.Print(ReportToPrint,
														"PDF-PRINTER", 
														"A4", 
														"PAYSAGE", 
														Path));
														
	var Path = "/CompassV6/PDF/PDF_TEMPORARY/NV_Portfolio/Portfolio_ID/"+ "Project Team Members List by Function.pdf";
	var ReportToPrint = "OpxReport".get("SP_REP_TEAM_MEMBER_BY_FUNCTION");
	PrintingPath = new pathName(ReportToPrint.Print(ReportToPrint,
														"PDF-PRINTER", 
														"A4", 
														"PAYSAGE", 
														Path));

	
	var sDashbord = "INTRANET.SP_DB_NV_SEGMENTATION_GRID";
	var CurrentDashboard = "OpxDashboard".get(sDashbord);
	var PdfPath = "";
	var PdfPathString ="";
	context._FF_AA_S_LIST_NAME = "NV_PORTFOLIO_SELECTION";
	context._DBB_AA_B_EDIT_MODE = false;
	// context._DBB_AA_S_PREVIEW_OBJECT = "";
	context._DBB_AA_S_CURRENT_DASHBOARD = sDashbord;
	PdfPath = sp_js_print_dashboard_pdf(CurrentDashboard,"SP_REP_DASHBOARD_VIEWER_FOR_PRINT",CurrentDashboard,"NV Segmentation grid");
	PdfPathString = PdfPath.ToString();
	
	var sDashbord = "INTRANET.SP_DB_MONITORING_PORT";
	var CurrentDashboard = "OpxDashboard".get(sDashbord);
	var PdfPath = "";
	var PdfPathString ="";
	context._FF_AA_S_LIST_NAME = "NV_PORTFOLIO_SELECTION";
	context._DBB_AA_B_EDIT_MODE = false;
	context._DBB_AA_S_CURRENT_DASHBOARD = sDashbord;
	PdfPath = sp_js_print_dashboard_pdf(CurrentDashboard,"SP_REP_DASHBOARD_VIEWER_FOR_PRINT",CurrentDashboard,"Monitoring");
	PdfPathString = PdfPath.ToString();
	
	
	var sDashbord = "INTRANET.SP_DB_FTE";
	var CurrentDashboard = "OpxDashboard".get(sDashbord);
	var PdfPath = "";
	var PdfPathString ="";
	context._FF_AA_S_LIST_NAME = "NV_PORTFOLIO_SELECTION";
	context._DBB_AA_B_EDIT_MODE = false;
	// context._DBB_AA_S_PREVIEW_OBJECT = "";
	context._DBB_AA_S_CURRENT_DASHBOARD = sDashbord;
	PdfPath = sp_js_print_dashboard_pdf(CurrentDashboard,"SP_REP_DASHBOARD_VIEWER_FOR_PRINT",CurrentDashboard,"FTE");
	PdfPathString = PdfPath.ToString();
	
	var sDashbord = "INTRANET.SP_DB_COST";
	var CurrentDashboard = "OpxDashboard".get(sDashbord);
	var PdfPath = "";
	var PdfPathString ="";
	context._FF_AA_S_LIST_NAME = "NV_PORTFOLIO_SELECTION";
	context._DBB_AA_B_EDIT_MODE = false;
	// context._DBB_AA_S_PREVIEW_OBJECT = "";
	context._DBB_AA_S_CURRENT_DASHBOARD = sDashbord;
	PdfPath = sp_js_print_dashboard_pdf(CurrentDashboard,"SP_REP_DASHBOARD_VIEWER_FOR_PRINT",CurrentDashboard,"Costs");
	PdfPathString = PdfPath.ToString();
	
}
sp_js_print_nv_portfolio_project.exportfunction();
/******* Dynamic attributes*****/

function sp_js_fte_budget_reader(){
  var oProj = this;
  var sReturnValue = "";
  if(oProj instanceof OpxProject && oProj.SP_NF_N_PRJ_MONTHLY_BUDGET != 0){
    sReturnValue = oProj.SP_NF_N_PRJ_MONTHLY_BUDGET;
  }
  return sReturnValue;
}

function sp_js_fte_budget_init(){
	var y =0;
	var yy=0;
	var syAttribute = new symbol("SP_DA_FTE_BUDGET","KEYWORD");
	var ASlot = new ObjectAttribute("opxproject",syAttribute,"NUMBER");
	var date = new date ();
	var year = date.getyear();
	var month = date.getmonth();
	if (month == 1){
		y = year - 1;
		yy = y%1000;
	}else{
		yy = year%1000;
	}
	ASlot.Comment = "Budget "+yy.tostring().maskregexp(".0d0");
	ASlot.Reader = sp_js_fte_budget_reader;
	ASlot.hiddenInIntranetServer = false;
}
AddWrapperFunction(InitializeIntranetAfterWrapper,"sp_js_fte_budget_init");

/*Actual*/
function sp_js_fte_actual_reader(){
  var oProj = this;
  var sReturnValue = "";
  if(oProj instanceof OpxProject && oProj.SP_NF_N_PRJ_MONTHLY_ACTUAL != 0){
    sReturnValue = oProj.SP_NF_N_PRJ_MONTHLY_ACTUAL;
  }
  return sReturnValue;
}

function sp_js_fte_actual_init(){
	var y =0;
	var yy=0;
	var syAttribute = new symbol("SP_DA_FTE_ACTUALS","KEYWORD");
	var ASlot = new ObjectAttribute("opxproject",syAttribute,"NUMBER");
	var date = new date ();
	var year = date.getyear();
	var month = date.getmonth();
	if (month == 1){
		y = year - 1;
		yy = y%1000;
	}else{
		yy = year%1000;
	}
	ASlot.Comment = "Actual "+yy.tostring().maskregexp(".0d0");
	ASlot.Reader = sp_js_fte_actual_reader;
	ASlot.hiddenInIntranetServer = false;
}
AddWrapperFunction(InitializeIntranetAfterWrapper,"sp_js_fte_actual_init");

/*Planned*/
function sp_js_fte_planned_reader(){
  var oProj = this;
  var sReturnValue = "";
  if(oProj instanceof OpxProject && oProj.SP_NF_N_PRJ_MONTHLY_PLANNED != 0){
    sReturnValue = oProj.SP_NF_N_PRJ_MONTHLY_PLANNED;
  }
  return sReturnValue;
}

function sp_js_fte_planned_init(){
	var y =0;
	var yy=0;
	var syAttribute = new symbol("SP_DA_FTE_PLANNED","KEYWORD");
	var ASlot = new ObjectAttribute("opxproject",syAttribute,"NUMBER");
	var date = new date ();
	var year = date.getyear();
	var month = date.getmonth();
	if (month == 1){
		y = year - 1;
		yy = y%1000;
	}else{
		yy = year%1000;
	}
	ASlot.Comment = "Planned "+yy.tostring().maskregexp(".0d0");
	ASlot.Reader = sp_js_fte_planned_reader;
	ASlot.hiddenInIntranetServer = false;
}
AddWrapperFunction(InitializeIntranetAfterWrapper,"sp_js_fte_planned_init");
/*Forecast*/
function sp_js_fte_forecast_reader(){
  var oProj = this;
  var sReturnValue = "";
  if(oProj instanceof OpxProject && oProj.SP_NF_N_PRJ_MONTHLY_FORECAST != 0){
    sReturnValue = oProj.SP_NF_N_PRJ_MONTHLY_FORECAST;
  }
  return sReturnValue;
}

function sp_js_fte_forecast_init(){
	var y =0;
	var yy=0;
	var syAttribute = new symbol("SP_DA_FTE_FORECAST","KEYWORD");
	var ASlot = new ObjectAttribute("opxproject",syAttribute,"NUMBER");
	var date = new date ();
	var year = date.getyear();
	var month = date.getmonth();
	if (month == 1){
		y = year - 1;
		yy = y%1000;
	}else{
		yy = year%1000;
	}
	ASlot.Comment = "Forecast "+yy.tostring().maskregexp(".0d0");
	ASlot.Reader = sp_js_fte_forecast_reader;
	ASlot.hiddenInIntranetServer = false;
}
AddWrapperFunction(InitializeIntranetAfterWrapper,"sp_js_fte_forecast_init");
/*Variance*/
function sp_js_fte_variance_reader(){
  var oProj = this;
  var sReturnValue = "";
  if(oProj instanceof OpxProject && oProj.SP_NF_N_PRJ_MONTHLY_VARIANCE != 0){
    sReturnValue = oProj.SP_NF_N_PRJ_MONTHLY_VARIANCE;
  }
  return sReturnValue;
}

function sp_js_fte_variance_init(){
	var y =0;
	var yy=0;
	var syAttribute = new symbol("SP_DA_FTE_VARIANCE","KEYWORD");
	var ASlot = new ObjectAttribute("opxproject",syAttribute,"NUMBER");
	var date = new date ();
	var year = date.getyear();
	var month = date.getmonth();
	if (month == 1){
		y = year - 1;
		yy = y%1000;
	}else{
		yy = year%1000;
	}
	ASlot.Comment = "Variance (PI+A)-B "+yy.tostring().maskregexp(".0d0");
	ASlot.Reader = sp_js_fte_variance_reader;
	ASlot.hiddenInIntranetServer = false;
}
AddWrapperFunction(InitializeIntranetAfterWrapper,"sp_js_fte_variance_init");
/*budget cost*/

function sp_js_cost_budget_reader(){
  var oProj = this;
  var sReturnValue = "";
  if(oProj instanceof OpxProject && oProj.SP_NF_N_PRJ_COST_BUDGET_YTD != 0){
    sReturnValue = oProj.SP_NF_N_PRJ_COST_BUDGET_YTD;
  }
  return sReturnValue;
}

function sp_js_cost_budget_init(){
	var y =0;
	var yy=0;
	var syAttribute = new symbol("SP_DA_COST_BUDGET","KEYWORD");
	var ASlot = new ObjectAttribute("opxproject",syAttribute,"NUMBER");
	var date = new date ();
	var year = date.getyear();
	var month = date.getmonth();
	if (month == 1){
		y = year - 1;
		yy = y%1000;
	}else{
		yy = year%1000;
	}
	ASlot.Comment = "Budget YTD "+yy.tostring().maskregexp(".0d0");
	ASlot.Reader = sp_js_cost_budget_reader;
	ASlot.hiddenInIntranetServer = false;
}
AddWrapperFunction(InitializeIntranetAfterWrapper,"sp_js_cost_budget_init");
/*ACtUAL cost*/

function sp_js_cost_actual_reader(){
  var oProj = this;
  var sReturnValue = "";
  if(oProj instanceof OpxProject && oProj.SP_NF_N_PRJ_COST_ACTUAL_YTD != 0){
    sReturnValue = oProj.SP_NF_N_PRJ_COST_ACTUAL_YTD;
  }
  return sReturnValue;
}

function sp_js_cost_actual_init(){
	var y =0;
	var yy=0;
	var syAttribute = new symbol("SP_DA_COST_ACTUAL","KEYWORD");
	var ASlot = new ObjectAttribute("opxproject",syAttribute,"NUMBER");
	var date = new date ();
	var year = date.getyear();
	var month = date.getmonth();
	if (month == 1){
		y = year - 1;
		yy = y%1000;
	}else{
		yy = year%1000;
	}
	ASlot.Comment = "Actual YTD "+yy.tostring().maskregexp(".0d0");
	ASlot.Reader = sp_js_cost_actual_reader;
	ASlot.hiddenInIntranetServer = false;
}
AddWrapperFunction(InitializeIntranetAfterWrapper,"sp_js_cost_actual_init");
/*variance cost */

function sp_js_cost_variance_reader(){
  var oProj = this;
  var sReturnValue = "";
  if(oProj instanceof OpxProject && oProj.SP_NF_N_PRJ_BVA_COST_VARIANCE != 0){
    sReturnValue = oProj.SP_NF_N_PRJ_BVA_COST_VARIANCE;
  }
  return sReturnValue;
}

function sp_js_cost_variance_init(){
	var y =0;
	var yy=0;
	var syAttribute = new symbol("SP_DA_COST_VARIANCE","KEYWORD");
	var ASlot = new ObjectAttribute("opxproject",syAttribute,"NUMBER");
	var date = new date ();
	var year = date.getyear();
	var month = date.getmonth();
	if (month == 1){
		y = year - 1;
		yy = y%1000;
	}else{
		yy = year%1000;
	}
	ASlot.Comment = "Variance(Act- Bud YTD) "+yy.tostring().maskregexp(".0d0");
	ASlot.Reader = sp_js_cost_variance_reader;
	ASlot.hiddenInIntranetServer = false;
}
AddWrapperFunction(InitializeIntranetAfterWrapper,"sp_js_cost_variance_init");
/*cost budget FY */

function sp_js_cost_budget_FY_reader(){
  var oProj = this;
  var sReturnValue = "";
  if(oProj instanceof OpxProject && oProj.SP_NF_N_PRJ_COST_BUDGET_YEAR != 0){
    sReturnValue = oProj.SP_NF_N_PRJ_COST_BUDGET_YEAR;
  }
  return sReturnValue;
}

function sp_js_cost_budget_FY_init(){
	var y =0;
	var yy=0;
	var syAttribute = new symbol("SP_DA_COST_BUDGET_FY","KEYWORD");
	var ASlot = new ObjectAttribute("opxproject",syAttribute,"NUMBER");
	var date = new date ();
	var year = date.getyear();
	var month = date.getmonth();
	if (month == 1){
		y = year - 1;
		yy = y%1000;
	}else{
		yy = year%1000;
	}
	ASlot.Comment = "Budget FY "+yy.tostring().maskregexp(".0d0");
	ASlot.Reader = sp_js_cost_budget_FY_reader;
	ASlot.hiddenInIntranetServer = false;
}
AddWrapperFunction(InitializeIntranetAfterWrapper,"sp_js_cost_budget_FY_init");
/*cost Forecast FY */

function sp_js_cost_forecast_FY_reader(){
  var oProj = this;
  var sReturnValue = "";
  if(oProj instanceof OpxProject && oProj.SP_NF_N_PRJ_COST_FORE_YEAR != 0){
    sReturnValue = oProj.SP_NF_N_PRJ_COST_FORE_YEAR;
  }
  return sReturnValue;
}

function sp_js_cost_forecast_FY_init(){
	var y =0;
	var yy=0;
	var syAttribute = new symbol("SP_DA_COST_FORECAST_FY","KEYWORD");
	var ASlot = new ObjectAttribute("opxproject",syAttribute,"NUMBER");
	var date = new date ();
	var year = date.getyear();
	var month = date.getmonth();
	if (month == 1){
		y = year - 1;
		yy = y%1000;
	}else{
		yy = year%1000;
	}
	ASlot.Comment = "Forecast FY "+yy.tostring().maskregexp(".0d0");
	ASlot.Reader = sp_js_cost_forecast_FY_reader;
	ASlot.hiddenInIntranetServer = false;
}
AddWrapperFunction(InitializeIntranetAfterWrapper,"sp_js_cost_forecast_FY_init");

//**** Filter Time **//
						  
 function SP_JS_OPEN_POPUP_FILTER_TIME() {
 var pLink = new hyperlink("Fvalue", "Attribute", "ID", "EDITORTYPE", "SP_REP_TIME_FILTER", "POPUP", true);
 if (pLink != undefined)
  pLink.go(context);
}
SP_JS_OPEN_POPUP_FILTER_TIME.exportfunction();

/* compare date to actual year */
function sp_js_compare_yb_to_cy(date){
	var yearb = date.getyear();
	var current_date = context.calldateformula("$date_of_the_day");
	var yearc=current_date.getyear();
	if(yearb==yearc)
		return true;
	else
		return false;
	
}sp_js_compare_yb_to_cy.exportfunction({"DATE"},"Boolean");
/***  Additional Comments **/
var Additional_comments_KPI1 = new setting("SP_GS_S_ADD_COMM_KPI1",
                          "Additional comments KPI1",
                          "",
                          "Notepad",
                          ""); 
						  
var Additional_comments_PKMS = new setting("SP_GS_S_ADD_COMM_PKMS",
                          "Additional comments PKMS",
                          "",
                          "Notepad",
                          ""); 
var Additional_comments_MAJMS = new setting("SP_GS_S_ADD_COMM_MAJMS",
                          "Additional comments MAJMS",
                          "",
                          "Notepad",
                          ""); 
/*** GANT chart KPI1 ***/
function SP_JS_DRAW_GANT_CHART() {
  var CurrentGantt=this.Gantt;
  Context.RoadmapGAntt = CurrentGantt;
  SP_JS_DISPLAY_RODMAP_GANT();
  this._roa_setTimeScale();  
}

function SP_JS_DISPLAY_RODMAP_GANT() {
  var currentGantt = this.Gantt;
  if (currentGantt Instanceof OpxGanttdelta){
    currentGantt.addbarAfterdrawinghandler(SP_JS_RODMAP_GANT_HANDLER);
  } 
}

// 2017-10-16 : Change of images / Use of stored value for field "Progress Completion Status"
function SP_JS_RODMAP_GANT_HANDLER(Activity){
  if (this.gantt instanceof OpxGantt){
    if (Activity instanceof OpxActivity){
		var Gantt = this.gantt;
		var pImage_onTime_Com = "opxImage".get("SP_IMG_DISC_BLACK_CHECKED");
		var pImage_onTime_UnComp = "opxImage".get("SP_IMG_DISC_BLACK");
		var pImage_Delayed_Comp = "opxImage".get("SP_IMG_DISC_RED_CHECKED");
		var pImage_Delayed_UnComp = "opxImage".get("SP_IMG_DISC_RED");
		var pImage_aHeadOfTime_Comp = "opxImage".get("SP_IMG_DISC_GREEN_CHECKED");
		var pImage_aHeadOfTime_UnComp = "opxImage".get("SP_IMG_DISC_GREEN");
		var pImage_Cancelled = "opxImage".get("SP_IMG_DISC_GREY");
		var BarX1 = this.datetox(Activity.FD_YEARLY);
		var BarX2 = this.datetox(Activity.PF);
		var Barwidth = BarX2-BarX1;

		if(Activity.get("SP_AA_S_PRG_COMPLETION_STATUS") == "On Time and completed")
		{
			this.drawImage(pImage_onTime_Com, Barwidth, 0, true, pImage_onTime_Com.WIDTH, pImage_onTime_Com.HEIGHT, true, 1, 1);
		}
		else if(Activity.get("SP_AA_S_PRG_COMPLETION_STATUS") == "On Time and not completed")
		{
			this.drawImage(pImage_onTime_UnComp, Barwidth, 0, true, pImage_onTime_UnComp.WIDTH, pImage_onTime_UnComp.HEIGHT, true, 1, 1);
		}                                     
                               
		else if(Activity.get("SP_AA_S_PRG_COMPLETION_STATUS") == "Delayed and completed") 
		{
			this.drawImage(pImage_Delayed_Comp, Barwidth, 0, true, pImage_Delayed_Comp.WIDTH, pImage_Delayed_Comp.HEIGHT, true, 1, 1);
		}	
		else if(Activity.get("SP_AA_S_PRG_COMPLETION_STATUS") == "Delayed and not completed")
		{
			this.drawImage(pImage_Delayed_UnComp, Barwidth, 0, true, pImage_Delayed_UnComp.WIDTH, pImage_Delayed_UnComp.HEIGHT, true, 1, 1);
		}                                       
                             
		else if(Activity.get("SP_AA_S_PRG_COMPLETION_STATUS") == "Ahead of Time and completed")
		{
			this.drawImage(pImage_aHeadOfTime_Comp, Barwidth, 0, true, pImage_aHeadOfTime_Comp.WIDTH, pImage_aHeadOfTime_Comp.HEIGHT, true, 1, 1);
		}
		else if(Activity.get("SP_AA_S_PRG_COMPLETION_STATUS") == "Ahead of Time and not completed")
		{
			this.drawImage(pImage_aHeadOfTime_UnComp, Barwidth, 0, true, pImage_aHeadOfTime_UnComp.WIDTH, pImage_aHeadOfTime_UnComp.HEIGHT, true, 1, 1);
		}
		else if(Activity.get("SP_AA_S_PRG_COMPLETION_STATUS") == "Cancelled")
		{
			this.drawImage(pImage_Cancelled, Barwidth, 0, true, pImage_Cancelled.WIDTH, pImage_Cancelled.HEIGHT, true, 1, 1);
		}
		return false;
		}
  } 
}
/***  Project Filter **/


function SP_JS_FILTER_PROJECT_MONITORING() {
 var activity= this;
if (activity instanceof OpxActivity){
 if (activity.PROJECT.SPV6_AA_B_NV_VERSION)
 return activity.PROJECT.Name;

}else 
return"";
}
SP_JS_FILTER_PROJECT_MONITORING.exportfunction("","STRING");

/** Setting for update date of performance report **/
var PERF_REPORT_UPDATE = new setting("SP_GS_S_NV_PERF_REPORT_LAST_UPDATE",
                          "Performance Report Last Update Date",
                          "",
                          "String",
                          "");	

//Function to move created file to destination directory
function sp_ojs_nv_move_file(path,DestPath)
{
	if (path.probefile())
		{
			if (DestPath.ProbeFile())
			{
				DestPath.delete();
			}
			path.copyfile(DestPath);		
		}
}

// Function to print NV Portfolio PDF
function sp_ojs_nv_print_pdf()
{
	//setting time window
	context.GEN_CHART_DD = sp_js_year_start(context.SP_NF_LATEST_YEARLY_BASELINE,0);
	context.GEN_CHART_ED = context.callDateFormula("ADD_DURATION(sp_js_year_start(OC.SP_NF_LATEST_YEARLY_BASELINE,1),'1d',\"\")");
	//Directory for NV Portfoli PDF
	var vDir_Full = context.SP_GS_NV_PORT_PDF_FULL;
	var vDir_Lim = context.SP_GS_NV_PORT_PDF_LIM;

	// NV Portfolio
	var vPort_Sel = "opx_FF_PT_FAVOR_FILTERS".get("NV_PORTFOLIO_SELECTION");
	var vPort_Rep = "opx_FF_PT_FAVOR_FILTERS".get("NV_PORTFOLIO_REPORTING");
	var vPort_NV = "opx_FF_PT_FAVOR_FILTERS".get("NV");
	
	// NV Footer and Header
	var Header="OpxReport".get("SP_RE_REP_NV_HEADER_PRINT");
	var Footer="OpxReport".get("SP_RE_REP_NV_FOOTER_PRINT");

	//Definition of varaible used to generate PDF
	var path;
	var DestPath;
	var Pres;

	// NV Project List PDF
	DestPath=vDir_Lim+"NV Projects list.pdf";
	if DestPath.probefile() DestPath.deletefile();
	pres = "opxPresentation".get("SP_PRES_NV_PROJ_LIST");
	pres.HeaderReport=Header;
	pres.FooterReport=Footer;
	path = pres.printPresentation(new vector(vPort_Rep),"#{POSTSCRIPT-SUPPORT::PDF-PRINTER@PDF-PRINTER}".lispeval(), ":FORMAT".lispeval(), ":A4".lispeval(),   ":ORIENTATION".lispeval(), ":LANDSCAPE".lispeval());
	sp_ojs_nv_move_file(path,DestPath);

	// New Vaccine Prioritization PDF
	DestPath=vDir_Lim+"New Vaccine Prioritization.pdf";
	if DestPath.probefile() DestPath.deletefile();
	pres = "opxPresentation".get("SP_PRES_NV_PRIO");
	pres.HeaderReport=Header;
	pres.FooterReport=Footer;
	path = pres.printPresentation(new vector(vPort_Rep),"#{POSTSCRIPT-SUPPORT::PDF-PRINTER@PDF-PRINTER}".lispeval(), ":FORMAT".lispeval(), ":A4".lispeval(),   ":ORIENTATION".lispeval(), ":LANDSCAPE".lispeval());
	sp_ojs_nv_move_file(path,DestPath);

	// NV Pipeline PDF
	DestPath=vDir_Full+"NV Pipeline.pdf";
	if DestPath.probefile() DestPath.deletefile();
	pres = "opxPresentation".get("SP_PRES_NV_PIPELINE");
	pres.HeaderReport=Header;
	pres.FooterReport=Footer;
	path = pres.printPresentation(new vector(vPort_Rep),"#{POSTSCRIPT-SUPPORT::PDF-PRINTER@PDF-PRINTER}".lispeval(), ":FORMAT".lispeval(), ":A4".lispeval(),   ":ORIENTATION".lispeval(), ":LANDSCAPE".lispeval());
	sp_ojs_nv_move_file(path,DestPath);

	// NV Project Stage Progression PDF
	Context.SP_AA_B_DISPLAY_EXPL = true;
	DestPath=vDir_Full+"NV Project Stage Progression.pdf";
	if DestPath.probefile() DestPath.deletefile();
	pres = "opxPresentation".get("SP_PRES_NV_PROG");
	pres.HeaderReport=Header;
	pres.FooterReport=Footer;
	path = pres.printPresentation(new vector(vPort_Rep),"#{POSTSCRIPT-SUPPORT::PDF-PRINTER@PDF-PRINTER}".lispeval(), ":FORMAT".lispeval(), ":A3".lispeval(),   ":ORIENTATION".lispeval(), ":LANDSCAPE".lispeval());
	sp_ojs_nv_move_file(path,DestPath);

	// NV Performance Portfolio Movments PDF
	DestPath=vDir_Full+"Performance Portfolio movments.pdf";
	if DestPath.probefile() DestPath.deletefile();
	pres = "opxPresentation".get("SP_PRES_NV_PERF_MOV");
	pres.HeaderReport=Header;
	pres.FooterReport=Footer;
	path = pres.printPresentation(new vector(vPort_Rep),"#{POSTSCRIPT-SUPPORT::PDF-PRINTER@PDF-PRINTER}".lispeval(), ":FORMAT".lispeval(), ":A4".lispeval(),   ":ORIENTATION".lispeval(), ":LANDSCAPE".lispeval());
	sp_ojs_nv_move_file(path,DestPath);

	// NV Performance All PKMs PDF
	DestPath=vDir_Full+"Performance All PKMs.pdf";
	if DestPath.probefile() DestPath.deletefile();
	pres = "opxPresentation".get("SP_PRES_NV_PERF_PKM");
	pres.HeaderReport=Header;
	pres.FooterReport=Footer;
	path = pres.printPresentation(new vector(vPort_Rep),"#{POSTSCRIPT-SUPPORT::PDF-PRINTER@PDF-PRINTER}".lispeval(), ":FORMAT".lispeval(), ":A4".lispeval(),   ":ORIENTATION".lispeval(), ":LANDSCAPE".lispeval());
	sp_ojs_nv_move_file(path,DestPath);
	
		// NV Performance All MAJM PDF
	DestPath=vDir_Full+"Performance All Major Milestones.pdf";
	if DestPath.probefile() DestPath.deletefile();
	pres = "opxPresentation".get("SP_PRES_NV_PERF_MAJM");
	pres.HeaderReport=Header;
	pres.FooterReport=Footer;
	path = pres.printPresentation(new vector(vPort_Rep),"#{POSTSCRIPT-SUPPORT::PDF-PRINTER@PDF-PRINTER}".lispeval(), ":FORMAT".lispeval(), ":A4".lispeval(),   ":ORIENTATION".lispeval(), ":LANDSCAPE".lispeval());
	sp_ojs_nv_move_file(path,DestPath);
	

	// NV Monitoring PKM Status PDF
	DestPath=vDir_Full+"Monitoring_Project Key Milestones Status.pdf";
	if DestPath.probefile() DestPath.deletefile();
	pres = "opxPresentation".get("SP_PRES_NV_MONIT_PKM");
	pres.HeaderReport=Header;
	pres.FooterReport=Footer;
	path = pres.printPresentation(new vector(vPort_Rep),"#{POSTSCRIPT-SUPPORT::PDF-PRINTER@PDF-PRINTER}".lispeval(), ":FORMAT".lispeval(), ":A4".lispeval(),   ":ORIENTATION".lispeval(), ":LANDSCAPE".lispeval());
	sp_ojs_nv_move_file(path,DestPath);

	// NV Monitoring MAJM Status PDF
	DestPath=vDir_Full+"Monitoring_Major Milestones Status.pdf";
	if DestPath.probefile() DestPath.deletefile();
	pres = "opxPresentation".get("SP_PRES_NV_MONIT_MAJ");
	pres.HeaderReport=Header;
	pres.FooterReport=Footer;
	path = pres.printPresentation(new vector(vPort_Rep),"#{POSTSCRIPT-SUPPORT::PDF-PRINTER@PDF-PRINTER}".lispeval(), ":FORMAT".lispeval(), ":A4".lispeval(),   ":ORIENTATION".lispeval(), ":LANDSCAPE".lispeval());
	sp_ojs_nv_move_file(path,DestPath);
	
	// NV Monitoring Milestones Status PDF
	DestPath=vDir_Full+"Monitoring_Milestones Status.pdf";
	if DestPath.probefile() DestPath.deletefile();
	pres = "opxPresentation".get("SP_PRES_NV_MONIT_MLS");
	pres.HeaderReport=Header;
	pres.FooterReport=Footer;
	path = pres.printPresentation(new vector(vPort_Rep),"#{POSTSCRIPT-SUPPORT::PDF-PRINTER@PDF-PRINTER}".lispeval(), ":FORMAT".lispeval(), ":A4".lispeval(),   ":ORIENTATION".lispeval(), ":LANDSCAPE".lispeval());
	sp_ojs_nv_move_file(path,DestPath);
	
		// NV Monitoring Stage Gate Timelines PDF
	DestPath=vDir_Full+"Monitoring_Stage Gate Timelines.pdf";
	if DestPath.probefile() DestPath.deletefile();
	pres = "opxPresentation".get("SP_PRES_NV_MONIT_STG");
	pres.HeaderReport=Header;
	pres.FooterReport=Footer;
	path = pres.printPresentation(new vector(vPort_Rep),"#{POSTSCRIPT-SUPPORT::PDF-PRINTER@PDF-PRINTER}".lispeval(), ":FORMAT".lispeval(), ":A4".lispeval(),   ":ORIENTATION".lispeval(), ":LANDSCAPE".lispeval());
	sp_ojs_nv_move_file(path,DestPath);
	

	// NV Project Team Members List.pdf
	DestPath=vDir_Lim+"NV Project Team Members List.pdf";
	if DestPath.probefile() DestPath.deletefile();
	pres = "opxPresentation".get("SP_PRES_NV_TM_LIST");
	pres.HeaderReport=Header;
	pres.FooterReport=Footer;
	path = pres.printPresentation(new vector(vPort_Rep),"#{POSTSCRIPT-SUPPORT::PDF-PRINTER@PDF-PRINTER}".lispeval(), ":FORMAT".lispeval(), ":A4".lispeval(),   ":ORIENTATION".lispeval(), ":LANDSCAPE".lispeval());
	sp_ojs_nv_move_file(path,DestPath);
	
	// NV Entry & Exit PDF
	//setting start date and end date for NV entry exit report
	 var entry_value=context.callNumberFormula("YEAR_NUMBER(PERIOD_START($DATE_OF_THE_DAY,\"Year\",-5))")
	context.SP_AA_S_NV_ENTRY_EXIT_FROM_YEAR_FILTER="print_number".call(entry_value,"####");
	var exit_value=context.callNumberFormula("YEAR_NUMBER($DATE_OF_THE_DAY)")
	context.SP_AA_S_NV_ENTRY_EXIT_TO_YEAR_FILTER="print_number".call(exit_value,"####");
	DestPath=vDir_Full+"NV Portfolio Entry and Exit.pdf";
	if DestPath.probefile() DestPath.deletefile();
	pres = "opxPresentation".get("SP_PRES_NV_ENTRY");
	pres.HeaderReport=Header;
	pres.FooterReport=Footer;
	path = pres.printPresentation(new vector(vPort_NV),"#{POSTSCRIPT-SUPPORT::PDF-PRINTER@PDF-PRINTER}".lispeval(), ":FORMAT".lispeval(), ":A3".lispeval(),   ":ORIENTATION".lispeval(), ":PORTRAIT".lispeval());
	sp_ojs_nv_move_file(path,DestPath);
	
	// TPP
	var PDF_Name=vDir_Full+"Target_Product_Profile.pdf";
	//deletion of the merge file
	if PDF_Name.probefile() PDF_Name.deletefile();
	//deletion then creation of the TPP folder
	var vDir=vDir_Full+"TPP/";
	if (vDir_Full != "")
	{
		var vReq_supp="rm -R "+vDir;
		vReq_supp.execute("",true);
		vDir.mkdir();
	}else{
		writetolog ("Error, parameter SP_GS_NV_PORT_PDF_FULL is empty.");
		alert("Error - please check the export parameters.");
		return 1;
	}
	// creation of temporary folder
	var vDir_Temp=vDir+"/TEMP";
	vDir_Temp.mkdir();
	var vec=new vector();

	// Export all TPP to TPP Dir, use of the portfolio NV_PORTFOLIO_SELECTION because documents are not in versions
	var nv_portfolio_name = "NV_PORTFOLIO_SELECTION";
	var portfolio = "Opx_FF_PT_FAVOR_FILTERS".get(nv_portfolio_name);
	if (portfolio instanceof Opx_FF_PT_FAVOR_FILTERS && portfolio.printAttribute("ID") != "")
	{
		for(var project in portfolio)
		{
			var vDoc;
			var vDocName;
			fromobject(project)
			{
				for (var vDocIni in "Opx_COL_PT_DOCUMENT_TABLE" where vDocIni.CallBooleanFormula("DESC=\"TPP_*\""))
				{ 
					vDoc = vDocIni.get("ISSUE-DOCUMENT");
					vDocName = project.name;
					
					if (vDoc!=undefined && vDoc!="")
					{
						var TargetFile = vDoc.LoadDocumentTo(Context.CallStringFormula("$TEMPORARY_FILES_DIRECTORY"));
						
						var Filename = vDocName + ".pdf";
						var PathToExportFile = vDir + Filename;
						vec.push(PathToExportFile);
						if PathToExportFile.probefile() PathToExportFile.deletefile();
						TargetFile.copyfile(PathToExportFile);
					}
					break;
				}
			}
		}
	}

	// Merge of PDF
	var vReq=context.SP_GS_S_PATH_MERGE_SCRIPT+"PDF_Merging.sh -I " +vDir+" -T "+vDir_Temp+" -O "+ PDF_Name;
	vReq.execute("",true);

	// Remove files
	//for (var vFile in vec)
	//{
	//	if vFile.probefile() vFile.deletefile();
	//}
	
}
sp_ojs_nv_print_pdf.exportfunction();

// Function for printing NV Monthly Reports
function sp_ojs_print_nv_monthly_report()
{
	//var exportname;
	var file;
	var report_object="opxReport".get("SP_RP_PRJ_MONTHLY_PRINT");
	var vDir_Lim = context.SP_GS_NV_PORT_PDF_LIM;
	var portfolio = "opx_FF_PT_FAVOR_FILTERS".get("NV_PORTFOLIO_SELECTION_PMR");
	var vProj_Filter=portfolio._FF_DA_S_FILTER_FORMULA;
	var PDF_Name=vDir_Lim+"Project_Monthly_Report.pdf";
	var vDir=vDir_Lim+"Monthly_Report/";
	if (vDir_Lim != "")
	{
		var vReq_supp="rm -R "+vDir;
		vReq_supp.execute("",true);
		vDir.mkdir();
	}else{
		writetolog ("Error, parameter SP_RP_PRJ_MONTHLY_PRINT is empty.");
		alert("Error - please check the export parameters.");
		return 1;
	}
	var vDir_Temp=vDir+"/TEMP";
	vDir_Temp.mkdir();

	// Remove previous file
	if PDF_Name.probefile() PDF_Name.deletefile();

	
	var vec = new vector();
	var Franchise_Code=1;
	var Previous_Franchise="";
	var Current_Franchise="";
	var file_name;
	
	// We get project of NV Portfolio
	for (var vProj in "OpxProject" where vProj.callbooleanformula(vProj_Filter) order by {"1BS","NAME"})
	{
		var end_date=Sp_get_last_act_pf(vProj.printattribute());
		var date_of_day=new date();	
		
		// We compare current franchise to previous franchise
		Current_Franchise=vProj.BREAKDOWN_1;
		if (Previous_Franchise!="" && Previous_Franchise!=Current_Franchise)
			Franchise_Code++;
		// We store the value of Current_Franchise in Previous_Franchise
		Previous_Franchise=Current_Franchise;
		
		file_name=Franchise_Code+"_"+vProj.name+"_"+vProj.SPAS_AA_PROJECT_CODE;
		
		context.GEN_CHART_DD="PERIOD_START".call(date_of_day,"YEAR",-1);
		context.GEN_CHART_ED="PERIOD_START".call(end_date,"YEAR",2);
		
		var exportname =vDir+file_name+".pdf";	
		vec.push(exportname);
		var file = report_object.print(vProj, "PDF-PRINTER", "A4", "LANDSCAPE", exportname);
	}

	// Merge of PDF
	var vReq=context.SP_GS_S_PATH_MERGE_SCRIPT+"PDF_Merging.sh -I " +vDir+" -T "+vDir_Temp+" -O "+ PDF_Name;
	vReq.execute("",true);

	// Remove files
	//for (var vFile in vec)
	//{
	//	if vFile.probefile() vFile.deletefile();
	//}
}

// Function used for "Macro called when displaying form" in report SP_PO_OVERVIEW_DASHBOARD_BY_FRANCHISE
function sp_nv_show_predev_proj()
{
	Context.SP_AA_B_DISPLAY_EXPL = true;
}
sp_nv_show_predev_proj.exportfunction();			

function sp_js_nv_tpp_generation()
{
	//Directory for NV Portfoli PDF
	var sDir_Full = context.SP_GS_NV_PORT_PDF_FULL;
	// TPP
	var PDF_Name=sDir_Full+"Target_Product_Profile.pdf";
	//deletion of the merge file
	if PDF_Name.probefile() PDF_Name.deletefile();
	//deletion then creation of the TPP folder to empty it
	var vDir=sDir_Full+"TPP/";
	if (sDir_Full != "")
	{
		var vReq_supp="rm -R "+vDir;
		vReq_supp.execute("",true);
		vDir.mkdir();
	}else{
		writetolog ("Error, parameter SP_GS_NV_PORT_PDF_FULL is empty.");
		alert("Error - please check the export parameters.");
		return 1;
	}
	
	// creation of temporary folder
	var vDir_Temp=vDir+"/TEMP";
	vDir_Temp.mkdir();
	var vec=new vector();

	// Export all TPP to TPP Dir, use of the portfolio NV_PORTFOLIO_SELECTION because documents are not in versions
	var nv_portfolio_name = "NV_PORTFOLIO_SELECTION";
	var portfolio = "Opx_FF_PT_FAVOR_FILTERS".get(nv_portfolio_name);
	if (portfolio instanceof Opx_FF_PT_FAVOR_FILTERS && portfolio.printAttribute("ID") != "")
	{
		for(var project in portfolio)
		{
			var vDoc;
			var vDocName;
			fromobject(project)
			{
				for (var vDocIni in "Opx_COL_PT_DOCUMENT_TABLE" where vDocIni.CallBooleanFormula("DESC=\"TPP_*\""))
				{ 
					vDoc = vDocIni.get("ISSUE-DOCUMENT");
					vDocName = project.name;
					
					if (vDoc!=undefined && vDoc!="")
					{
						var TargetFile = vDoc.LoadDocumentTo(Context.CallStringFormula("$TEMPORARY_FILES_DIRECTORY"));
						
						var Filename = vDocName + ".pdf";
						var PathToExportFile = vDir + Filename;
						vec.push(PathToExportFile);
						if PathToExportFile.probefile() PathToExportFile.deletefile();
						TargetFile.copyfile(PathToExportFile);
					}
					break;
				}
			}
		}
	}

	// Merge of PDF
	var vReq=context.SP_GS_S_PATH_MERGE_SCRIPT+"PDF_Merging.sh -I " +vDir+" -T "+vDir_Temp+" -O "+ PDF_Name;
	vReq.execute("",true);
}			  
						  
writetolog("Script SP_JS_NV_PORTFOLIO loaded with version ~a ", revision_number);

//* -*- Mode: C++ -*- *****************************************************
//  COPYRIGHT (C) PLANISWARE Date: 2017/09/11 08:38:03                                             
//                                                                          
//  All Rights Reserved                                                     
// 
//  This program and the information contained herein are confidential to
//  and the property of PLANISWARE and are made available only to PLANISWARE
//  employees for the sole purpose of conducting PLANISWARE business.
// 
//  This program and copy therof and the information contained herein shall
//  be maintained in strictest confidence ; shall not be copied in whole or
//  in part except as authorized by the employee's manager ; and shall not
//  be disclosed or distributed (a) to persons who are not PLANISWARE employees,
//  or (b) to PLANISWARE employees for whom such information is not necessary in
//  connection with their assigned responsabilities.
// 
//  There shall be no exceptions to the terms and conditions set forth
//  herein except as authorized in writing by the responsible PLANISWARE General
//  Manager.
//
// 
//  FILE    : RCSfile: SP_JS_NV_PORTFOLIO.ojs,v 
// 
//  AUTHOR  : Author: mlakhal 
// 
//  VERSION : Id: SP_JS_NV_PORTFOLIO.ojs,v 4.18 2018/12/25 MAG Exp 
// 
//  PURPOSE :
// 
//  HISTORY :
//  Log: SP_JS_NV_PORTFOLIO.ojs,v 
//
var revision_number ="4.22";

//Revision 4.22 2020/02/19	 SSK
//ITS-INC3833644 : Updated SP_JS_RODMAP_GANT_HANDLER to add a block for Cancelled activities to display Grey disk icon
//
//Revision 4.21 2019/11/14	 KSH
//ITS-INC3124017 : Updated sp_ojs_print_nv_monthly_report to remove the projects pdf which are old and deleted NV_PORTFOLIO_SELECTION_PMR
//
//Revision 4.20 2019/01/04	 MAG
//ITS-INC2356166 : Updated sp_ojs_nv_print_pdf to provide the start and end date for "NV entry & exit" PDF
//
// Revision 4.19 2019/02/27	 MAG
// RITM0902445 : Updated sp_ojs_nv_print_pdf to generate "Monitoring-Stage Gate Timelines" PDF
//
// Revision 4.18 2018/12/25	 MAG
// RITM0736427 : Added atrtibute type with notepad SP_GS_S_ADD_COMM_MAJMS
//
// Revision 4.17 2019/01/11	 mblaise
// RITM0736427 : update of sp_ojs_nv_print_pdf to generate "Performance - All Major Milestones" and "Major Milestones status" PDF 
//				 update of SP_JS_RODMAP_GANT_HANDLER to display the good icon for "Ahead of Time and not completed"
//				Creation of sp_js_spot_draw_l_date_timeline_NV
//
// Revision 4.16 2018/12/18	 bcordel
// RITM0745108 : update of function sp_ojs_nv_print_pdf to change TPP file generation and adding sp_js_nv_tpp_generation
//
// Revision 4.15 2018/10/12	 bcordel
// ITS-INC1559331 : update of function sp_ojs_nv_print_pdf to add the time window definition
//
// Revision 4.14 2018/09/03 bcordel
// RITM0557509 : update of function sp_js_key_milestone_status_indicator_iconhandler to add the "not met" part
//
// Revision 4.13 2018/06/20 LFA - ITS-INC0750106
// Update of sp_ojs_nv_print_pdf : Add a conrol for generation of TPP compilation
//
// Revision 4.12 2018/06/11 LFA - ITS-INC0750105
// Update of sp_ojs_print_nv_monthly_report : Modification of number used for Franchise in PDF name + Use of new portfolio NV_PORTFOLIO_SELECTION_PMR
//
// Revision 4.11 2018/06/06 YSA
// update attribute type with notepad on the following fields SP_GS_S_ADD_COMM_KPI1 and SP_GS_S_ADD_COMM_PKMS 
//
// Revision 4.10 2018/03/15 JBE
// Update of sp_ojs_nv_print_pdf to generate TPP from portfolio SELECTION and to not remove files (issue with document in version)
// Update of sp_ojs_print_nv_monthly_report to not remove files 
//
// Revision 4.9 2018/03/14 lfavre
// Modification of sp_ojs_nv_print_pdf : use "NV" for "Entry & Exit"
//
// Revision 4.8 2018/03/01 lfavre
// Modification of sp_ojs_nv_print_pdf : use "NV PORT Selection" for "Entry & Exit"
// Creation of function sp_nv_show_predev_proj (used in report SP_PO_OVERVIEW_DASHBOARD_BY_FRANCHISE)
//
// Revision 4.7 2018/02/19 lfavre
// Update sp_ojs_nv_print_pdf --> Modification of formats + TPP
// Creation of function sp_ojs_print_nv_monthly_report for print of monthly report
//
// Revision 4.6 2018/02/13 lfavre
// Modification of function SP_JS_GET_LAST_MONTHLY_UPDATE_DATE to order reference by name
// Update sp_ojs_nv_print_pdf --> Add NV Entry & Exit
// 
// Revision 4.5 2018/02/05 lfavre
// Modification of function sp_js_get_mto_license_activity to get the next milestone after the last update date
// Fix function sp_ojs_nv_print_pdf
// Modification of function SP_JS_GET_LAST_MONTHLY_UPDATE_DATE to get return the start of the month of the monthly baseline
//
// Revision 4.4 2018/01/24 YSA
// sp_ojs_nv_print_pdf function correction
//
//	Revision 4.3 2017/12/07 lfavre
//	Modification function sp_ojs_nv_print_pdf to add print of NV Project Team Members List.pdf 
//
//	Revision 4.2 2017/11/30 lfavre
//	Creation of functions sp_ojs_nv_move_file and sp_ojs_nv_print_pdf for impression of NV Portfolio PDF
//
//	Revision 4.1 2017/11/20 mrochas
//	function sp_js_spot_draw_license_date_sf : remove test with SP_AA_B_CANCELLED (does not exist)
//
//	Revision 4.0 2017/11/15 mrochas
//	BS_TEAM_MEMBER is now based on OpxSP_PT_TEAM_MEMBER
//
//  Revision 3.9 2017/11/08 bcordel
//  Modifying sp_js_license_date_str to adapt return depending activity type.
//
//  Revision 3.8 2017/11/03 tgi
//  Team member by Func : remove version number in field "Project (Project code)"
//
//  Revision 3.7 2017/10/14 Ludovic
// 	Creation of 2 new settings SP_GS_NV_PORT_PDF_FULL and SP_GS_NV_PORT_PDF_LIM for NV Portfolio PDF Directories
// 	Modification of function SP_JS_RODMAP_GANT_HANDLER to change icone use new images and use stored value for "Progress Completion Status"
//  Creation of Setting SP_GS_D_NV_PERF_REPORT_LAST_UPDATE
//
//	Revision 3.6 2017/10/06 Ludovic
//	Modification of function sp_js_key_milestone_status_indicator_iconhandler to use new images
//
//  Revision 3.5  2017/09/11 08:38:03  mlakhal
//  - remove alerts
//
//  Revision 3.4  2017/09/06 09:11:33  mlakhal
//  - add sp_js_license_date_str
//
//  Revision 3.3  2017/09/05 16:00:16  mlakhal
//  *** empty log message ***
//
//  Revision 3.2  2017/09/05 15:57:04  mlakhal
//  *** empty log message ***
//
//  Revision 3.1  2017/09/05 15:51:20  mlakhal
//  -bsoftware script for NV portfolio
//   (header added automatically)
//
//**************************************************************************
// Version 1.1 Added pdf generation
// Version 1.0 Added sp_js_license_date()
// Version 0 created 10-05-2017 b-software


/************* Style for project team members ************/

/* function BS_TEAM_MEMBER(){
	var filter = false ;
	var id=context.SP_AA_S_OC_NV_PRJ_ID;
	var CurrentProject = "opxproject".get(id);
	if (CurrentProject instanceof opxproject)
	{
		var sTeamMember = CurrentProject.SP_AA_S_PJT_TEAM;
		var oline = this ;
		var vTeamMember=sTeamMember.split(",");
		for(var team in vTeamMember){
			if(team == oline.DESC)
				filter = true
		}
	}
	return filter ;
}BS_TEAM_MEMBER.exportfunction("","BOOLEAN"); */
function BS_TEAM_MEMBER(){
	var filter = false ;
	var id=context.SP_AA_S_OC_NV_PRJ_ID;
	var CurrentProject = "opxproject".get(id);
	if (CurrentProject instanceof opxproject){
		var oline = this ;
		fromobject(CurrentProject){
			for (var o_tm in "OpxSP_PT_TEAM_MEMBER"){
				if (o_tm.SP_RA_TEAM_MEMBER_USER == oline){
					filter = true;
					break;
				}
			}
		}
	}
	return filter ;
}BS_TEAM_MEMBER.exportfunction("","BOOLEAN");


/////******Licence Date********/////
function sp_js_get_mto_license_activity() {
	var oMTOActivity = undefined ;
	var oProj = this;
	var last_update = context.SP_NF_COMPASS_LAST_UPDATE;
	if (oProj instanceof OpxProject) {
		fromobject(oProj) {
			for (var oAct in "opxActivity" where(oAct.callbooleanformula("IF PROJECT.SP_NF_B_NV_DEV THEN WBS_TYPE in (\"MIDOBJ*\",\"MLIM*\") ELSE IF PROJECT.SP_NF_B_NV_PREDEV THEN WBS_TYPE in (\"MM1\",\"MM2\") FI FI") && /*oAct.AF == undefined*/oAct.PF>=last_update)order by {"PF"}) {
				oMTOActivity = oAct ;
				break ;
			}
		}
	} 
	return oMTOActivity ;
}


function sp_js_license_date() {
	var licence_date = "";	
	var oProj = this;
	if (oProj instanceof OpxProject) {
		var oMTOActivity = oProj.sp_js_get_mto_license_activity() ;
		if(oMTOActivity instanceof opxActivity){
			licence_date = oMTOActivity.PF ;	
			if(licence_date instanceof Date){
				licence_date = "add_duration".callmacro(licence_date, -1440, ""); 
			}
		}
	}
	
	return licence_date ;
}
sp_js_license_date.exportFunction("", "DATE");


function sp_js_license_date_str() {
	var licence_date = "";	
	var oProj = this;
	if (oProj instanceof OpxProject) {
		var oMTOActivity = oProj.sp_js_get_mto_license_activity() ;
		if(oMTOActivity instanceof opxActivity){
			
			var o_act_type=oMTOActivity.WBS_TYPE;
			licence_date = oMTOActivity.PF ;	
			if(licence_date instanceof Date){
				licence_date = "add_duration".callmacro(licence_date, -1440, ""); 
			}
			
			// different inscription depending of activity type
			if (o_act_type.CallBooleanFormula("BELONGS(\"WBS_TYPE\",\"DEC\")"))
			{
				if (oMTOActivity.NAME =="MM1")
				{
				licence_date = "M1 : " +  licence_date;
				}else{
					licence_date = "M2 : " +  licence_date;
				}
			}else if (o_act_type.CallBooleanFormula("BELONGS(\"WBS_TYPE\",\"MLIM\")")){
				licence_date = "License date : " +  licence_date;
			}else{
				licence_date = "MTO date : " +  licence_date;
			}
		}
	}
	
	return licence_date ;
}
sp_js_license_date_str.exportFunction("", "STRING");

/*
	called in cell in report SP_REP_PROJECT_TIMELINE_HEADBAND_422 to display 
	image for the MTO/License date
*/
 function sp_js_spot_draw_l_date_timeline_NV() {
	var sStatus = "";
	var oProj = "opxproject".get(context.SP_AA_S_OC_NV_PRJ_ID);

	var oImage = undefined ;
	try{
		if (oProj instanceof OpxProject) {
			var oMTOActivity = oProj.sp_js_get_mto_license_activity();
			if(oMTOActivity instanceof opxActivity){
				oImage=oMTOActivity.sp_js_key_milestone_status_indicator_iconhandler();
			}
			if(oImage instanceof opxImage){
				this.drawimage(oImage.printattribute(), 0, 0, false, false, false, true, 1, 1);
			}
		} 
	}
	catch(error err){
		writeln("[ERROR][sp_js_spot_draw_license_date_sf] :: " + err.toString());
	}	
}
sp_js_spot_draw_l_date_timeline_NV.exportfunction();

function sp_js_spot_draw_license_date_sf() {
	var sStatus = "";
	var oProj = this.object;
	var oImage = undefined ;
	try{
		if (oProj instanceof OpxProject) {
			var oMTOActivity = oProj.sp_js_get_mto_license_activity() ;
			if(oMTOActivity instanceof opxActivity){
				/* if(oMTOActivity.callbooleanformula("SP_AA_B_CANCELLED")){
					oImage = undefined ; // not specified
				}
				else  */if(oMTOActivity.callbooleanformula("IF SP_NF_S_LEADS_LAGS <> \"\" THEN IF SP_NF_D_YEARLY_REF_ED < PERIOD_START($DATE_OF_THE_DAY,\"YEAR\",1) " + 
														"THEN DURATION(SP_NF_S_LEADS_LAGS) > '28d' and (SP_NF_B_PKM or WBS_TYPE in (\"MLIM*\", \"MLAM*\", \"MM1\", \"MM2\", \"MPROC*\") " + 
														"or BELONGS(\"WBS_TYPE\", \"SPREC-I,SPREC-R,SPHA1-I,SPHA1-R,SPHA2A-I,SPHA2A-R,SPHA2B-I,SPHA2B-R,SPHA3-I,SPHA3-R,SREGU-I,SREGU-R\")) " +
														"ELSE DURATION(SP_NF_S_LEADS_LAGS) > '91,248d' and WBS_TYPE in (\"MIDOBJ*\", \"MLIM*\", \"MM1\", \"MM2\") FI FI")){
					oImage = opxImage.get("SP_IMG_RED_UNCHECKED") ;		
				}
				else if(oMTOActivity.callbooleanformula("IF SP_NF_S_LEADS_LAGS <> \"\" THEN IF SP_NF_D_YEARLY_REF_ED < PERIOD_START($DATE_OF_THE_DAY,\"YEAR\",1) THEN "+
														"DURATION(SP_NF_S_LEADS_LAGS) < '-28d' and (SP_NF_B_PKM or WBS_TYPE in (\"MLIM*\", \"MLAM*\", \"MM1\", \"MM2\", \"MPROC*\") " +
														"or BELONGS(\"WBS_TYPE\", \"SPREC-I,SPREC-R,SPHA1-I,SPHA1-R,SPHA2A-I,SPHA2A-R,SPHA2B-I,SPHA2B-R,SPHA3-I,SPHA3-R,SREGU-I,SREGU-R\")) " +
														"ELSE DURATION(SP_NF_S_LEADS_LAGS) < '-91,248d' and WBS_TYPE in (\"MIDOBJ*\", \"MLIM*\", \"MM1\", \"MM2\") FI FI")){
					oImage = opxImage.get("SP_IMG_GREEN_UNCHECKED") ;		
				}
				else if(oMTOActivity.callbooleanformula("IF SP_NF_S_LEADS_LAGS <> \"\" THEN IF SP_NF_D_YEARLY_REF_ED < PERIOD_START($DATE_OF_THE_DAY,\"YEAR\",1) THEN "+
														"DURATION(SP_NF_S_LEADS_LAGS) >= '-28d' AND DURATION(SP_NF_S_LEADS_LAGS) <= '28d' and (SP_NF_B_PKM or "+
														"WBS_TYPE in (\"MLIM*\", \"MLAM*\", \"MM1\", \"MM2\", \"MPROC*\") or "+
														"BELONGS(\"WBS_TYPE\", \"SPREC-I,SPREC-R,SPHA1-I,SPHA1-R,SPHA2A-I,SPHA2A-R,SPHA2B-I,SPHA2B-R,SPHA3-I,SPHA3-R,SREGU-I,SREGU-R\")) " +
														"ELSE DURATION(SP_NF_S_LEADS_LAGS) >= '-91,248d' AND DURATION(SP_NF_S_LEADS_LAGS) <= '91,248d' and WBS_TYPE in (\"MIDOBJ*\", \"MLIM*\", \"MM1\", \"MM2\") FI FI")){
					oImage = opxImage.get("SP_IMG_BLACK_UNCHECKED") ;					
				}
			}
			if(oImage instanceof opxImage){
				this.drawimage(oImage.printattribute(), 0, 0, false, false, false, true, 1, 1);
			}
		} 
	}
	catch(error err){
		writeln("[ERROR][sp_js_spot_draw_license_date_sf] :: " + err.toString());
	}	
}

function sp_js_key_milestone_status_indicator_iconhandler(){
	var size = 15;
	var oActivity = this;
	var sImage = "Progress_start3" ;
	if (oActivity instanceof opxActivity){
		var sProgressStatus = oActivity.SP_NF_S_PRG_STATUS ;
		if(sProgressStatus == "Cancelled"){
			sImage = "SP_IMG_DISC_GREY" ;
		}
		else if(sProgressStatus == "Not met"){
			sImage = "SP_IMG_DISC_RED" ;
		}
		else if(sProgressStatus == "Ahead of Time"){
			sImage = "SP_IMG_DISC_GREEN" ;
		}
		else if(sProgressStatus == "On Time"){
			sImage = "SP_IMG_DISC_BLACK" ;
		}
		else if(sProgressStatus.indexof("Delayed") instanceof number){
			sImage = "SP_IMG_DISC_RED" ;
		}
		if(oActivity.AF instanceof Date){
			sImage = sImage + "_CHECKED";
		}
		else{
			sImage = sImage ;
		}
		return "opxImage".get(sImage);
	}
	else{	
		return false;
	}
}

function sp_js_key_milestone_status_indicator_set_handler(){
	var oSfSlot = "opxSYMBOLIC_FIELD".get("Activity.SP_SF_STATUS_INDICATOR");
	if(oSfSlot != undefined && oSfSlot != ""){
		oSfSlot.addiconhandler(sp_js_key_milestone_status_indicator_iconhandler);
	}
}
AddWrapperFunction(InitializeIntranetAfterWrapper,"sp_js_key_milestone_status_indicator_set_handler");
/***** Progress Status  ****/

function sp_js_key_milestone_status_progress_set_handler(){
	var oSfSlot = "opxSYMBOLIC_FIELD".get("Activity.SP_SF_PROGRESS_STATUS");
	if(oSfSlot != undefined && oSfSlot != ""){
		oSfSlot.addiconhandler(sp_js_key_milestone_status_indicator_iconhandler);
	}
}
AddWrapperFunction(InitializeIntranetAfterWrapper,"sp_js_key_milestone_status_progress_set_handler");

/***** TPP FILE  ****/

var path_file = new setting("SP_GS_PATH_TPP",
                          "Path TPP File",
                          "/compassv6/PDF/TPP/",
                          "String",
                          ""); 
						  
						  
function path_for_file(useless)
{

var path=context.SP_GS_PATH_TPP + "/"+ this.SP_NF_S_TPP_FILE_NAME;

if( path.Probefile()== false)
	
	return false;
else
	return true;

}
path_for_file.Exportfunction({"STRING"},"Boolean");
/***** Open One TPP FILE  ****/

function Open_tpp_file()
{
    var sPdfName = "";
    if (this instanceof opxProject)
    {
        sPdfName = this.SP_NF_S_TPP_FILE_NAME;
    }
    else if (this.object instanceof opxProject)
    {
        sPdfName = this.object.SP_NF_S_TPP_FILE_NAME;
    }
        
    if (sPdfName != "")
    {
        var sPdfDirectory = context.SP_GS_PATH_TPP;
        var sPdfURL = context.SP_GS_PATH_TPP;
        var sPdfPath = new PathName(sPdfDirectory + "/" + sPdfName);
        var sGetPdfUrl = sPdfPath.filegeturl() ;
        var oLink = new hyperlink("URL","Page",sGetPdfUrl,"popup",True);
        if(oLink != undefined)
        {
         oLink.go();
        }
    }
}
Open_tpp_file.Exportfunction();

function bs_js_Func_resource_user(){
	var oUser= this;
	var vfunc=new vector();
	var sResource=this._tm_nf_s_managed_resources;
	var vResource=sResource.split(",");
	for(var res  in vResource)
	{
		
		vfunc.push("STRING_VALUE".callmacro("RESOURCE", res, "SP_NF_CL_FUNCTION"));

	}
	return vfunc.join(",");
}bs_js_Func_resource_user.exportfunction("","STRING");


function PopulateTempTMTable()
{
	writeln("Temp table going to be emptied");
	var ProjectList = new vector();

	var objects;
	var i = 0;
	for (var obj in "OpxTeamMemberListByProject"   ) 
	{
		objects[i] = obj;
		i++;
	}
	objects.CallMacro("Remove");
    writeln("Temp table empty");
	// for (var obj in "OpxUser" 
		// where obj.SP_NF_USER_LINKED_PROJECT_TEAM !="" && obj.DESC != "") 
	// {
		// ProjectList = obj.SP_NF_USER_LINKED_PROJECT_TEAM.parsevector();
	
	for (var Each in OPXProject where each.callbooleanformula("OPEN AND SP_AA_S_PJT_TEAM<>\"\" AND PM_PRJ_FILTER"))
	{	
		writeln("Project to be scanned : " + Each);
		for (var obj in "OpxUser")
		{
			if obj.callbooleanformula("LIST_FIND(DESC,\"" + each.SP_AA_S_PJT_TEAM + "\")")
			{
						new OpxTeamMemberListByProject 
						("NAME",obj.printattribute()+"-"+Each.printattribute(),
						"SP_AA_PROJECT",Each.breakdown_2.printattribute(),
						"SP_AA_LCS",Each.SP_AA_S_LC_STATUS,
						"SP_AA_PRJ",Each.printattribute(),
						"SP_AA_TEAM_MEMBER",obj.DESC,
						"SP_AA_TM_FUNCTION",obj.SP_AA_S_USER_FUNC,
						"SP_AA_PRJ_CODE",Each.SPAS_AA_PROJECT_CODE);
						//"SP_AA_PRJ_CODE",Context.CallStringFormula("STRING_VALUE(\"PROJECT\",\"" + Each + "\",\"SPAS_AA_PROJECT_CODE\")"));
			writeln("Associated user  : " + obj);
			}
		}
	}
	// }
}




function PopulateTempTMTable_ByFunc()
{
	writeln("Temp table ByFunc going to be emptied");
	
	var objects;
	var i = 0;
	for (var obj in "OpxTeamMemberListByFunction"   ) 
	{
		objects[i] = obj;
		i++;
	}
	objects.CallMacro("Remove");
    writeln("Temp table ByFunc empty");
	
	for (var Each in OPXProject where each.callbooleanformula("OPEN AND SP_AA_S_PJT_TEAM<>\"\" AND PM_PRJ_FILTER"))
	{	
		writeln("Project to be scanned for Temp Table By Function: " + Each);
		for (var obj in "OpxUser")
		{
			if obj.callbooleanformula("LIST_FIND(DESC,\"" + each.SP_AA_S_PJT_TEAM + "\")")
			{
				var Cur_temp_user = "OpxTeamMemberListByFunction".get(obj.printattribute());
				writeln("Cur_temp_user : " + Cur_temp_user);
				if (Cur_temp_user instanceof OPXSP_TT_TEAM_MEMBER_LIST_BY_FUNC && Cur_temp_user != undefined)
				{
					Cur_temp_user.SP_AA_PRJS = Cur_temp_user.SP_AA_PRJS + ", " + Each.printattribute();
					Cur_temp_user.SP_AA_PRJ_CODES = Cur_temp_user.SP_AA_PRJ_CODES + ", " + Each.SPAS_AA_PROJECT_CODE;
					Cur_temp_user.SP_AA_PRJS_CODES = Cur_temp_user.SP_AA_PRJS_CODES + ", " + Each.callStringFormula("SP_NF_S_PROJECT_NAME") + " (" + Each.SPAS_AA_PROJECT_CODE + ")";
				}
				else
				{
					new OpxTeamMemberListByFunction 
					(
						"NAME",obj.printattribute(),
						"DESC",obj.DESC,
						"SP_AA_PROJECT",Each.breakdown_2.printattribute(),
						"SP_AA_LCS",Each.SP_AA_S_LC_STATUS,
						"SP_AA_TM_FUNCTION",obj.SP_AA_S_USER_FUNC,
						"SP_AA_PRJS",Each.printattribute(),
						"SP_AA_PRJ_CODES",Each.SPAS_AA_PROJECT_CODE,
						"SP_AA_PRJS_CODES",Each.callStringFormula("SP_NF_S_PROJECT_NAME") + " (" + Each.SPAS_AA_PROJECT_CODE + ")"
					);
				}
			writeln("Associated user  : " + obj);
			}
		}
	}
}


 /************* Get Month (Monitoring group By month) ************/

function SP_JS_GET_MONTH(date){
	var month ="";
		
	if (date.getmonth() == 1)
		month = "01-January";
	else if(date.getmonth() == 2)
		month = "02-February";
	else if(date.getmonth() == 3)
		month = "03-March";
	else if(date.getmonth() == 4)
		month = "04-April";
	else if(date.getmonth() == 5)
		month = "05-May";
	else if(date.getmonth() == 6)
		month = "06-June";
	else if(date.getmonth() == 7)
		month = "07-July";
	else if(date.getmonth() == 8)
		month = "08-August";
	else if(date.getmonth() == 9)
		month = "09-September";
	else if(date.getmonth() == 10)
		month = "10-October";
	else if(date.getmonth() == 11)
		month = "11-November";
	else if(date.getmonth() == 12)
		month = "12-December";
	else
		month = date.getmonth().toString();
	return month;
}SP_JS_GET_MONTH.exportfunction({"DATE"},"STRING");

 /************* Get Year (Monitoring filter by year) ************/
function sp_js_get_year()
{
var oAct = this;
	var date = oAct.PS ;
	var year=date.getyear();
	

	return date.getyear();
	
}sp_js_get_year.exportfunction("","NUMBER");
 /************* Print PDF Template ************/

function SP_JS_GET_LAST_MONTHLY_UPDATE_DATE(useless){
for (var each in "opxREFERENCE" where each.callbooleanformula("NAME <> \"*YEARLY*\" and DESC=\"*Monthly*\"") Order by {{"INVERSE","NAME"}})
{
//return each.AD;
//LFA - The date should be the start of the month of the monthly baseline
return each.SP_NF_D_MONTHLY_SD;
break;}
}
SP_JS_GET_LAST_MONTHLY_UPDATE_DATE.exportfunction({"STRING"},"DATE");

 /************* Open PKM reference list excel file ************/
 
var pkm_list = new setting("SP_GS_PKM_REF_LIST_PATH",
                          "PKM reference list",
                          "/compassv6/PDF/PKM/",
                          "String",
                          ""); 
function Open_pkm_reference_list()
{
var sPdfName="pkm_reference_list.xls";
var sPdfDirectory = context.SP_GS_PKM_REF_LIST_PATH;
var sPdfPath = new PathName(sPdfDirectory + "/" + sPdfName);
var sGetPdfUrl = sPdfPath.filegeturl() ;
var oLink = new hyperlink("URL","Page",sGetPdfUrl,"popup",True);
if(oLink != undefined)
{
 oLink.go();
}}
Open_pkm_reference_list.Exportfunction();

 /************* PDF Generation ************/
 
 var Project_ID_Card = new setting("SP_GS_PROJECT_ID_CARD_PATH",
                          "Project ID Card Path",
                          "/compassv6/PDF/PDF_TEMPORARY/Project ID Card",
                          "String",
                          "");
var Project_Timelines = new setting("SP_GS_PROJECT_TIMELINES_PATH",
                          "Project Timelines Path",
                          "/compassv6/PDF/PDF_TEMPORARY/Project Timelines",
                          "String",
                          "");
var PROJECT_FINANCIAL_DATA = new setting("SP_GS_PROJECT_FINANCIAL_DATA_PATH",
                          "Project Financial Data Path",
                          "/compassv6/PDF/PDF_TEMPORARY/Project Financial Data",
                          "String",
                          "");						 
var Monthly_reports = new setting("SP_GS_MONTHLY_REPORTS_PATH",
                          "Monthly reports Path",
                          "/compassv6/PDF/PDF_TEMPORARY/Monthly_reports",
                          "String",
                          "");
var NV_Projects_list = new setting("SP_GS_NV_PROJECT_LIST_PATH",
                          "NV Project List Path",
                          "/compassv6/PDF/PDF_TEMPORARY/NV_Portfolio/Portfolio_ID",
                          "String",
                          "");
var NV_Project_Team_Members_List_By_Project = new setting("SP_GS_NV_PRJ_TM_PROJECT_PATH",
                          "NV Project Team Members List by Project Path",
                          "/compassv6/PDF/PDF_TEMPORARY/NV_Portfolio/Portfolio_ID",
                          "String",
                          "");
var NV_Project_Team_Members_List_By_Function = new setting("SP_GS_NV_PRJ_TM_FUNCTION_PATH",
                          "NV Project Team Members List by Function Path",
                          "/compassv6/PDF/PDF_TEMPORARY/NV_Portfolio/Portfolio_ID",
                          "String",
                          "");
var NV_Segmentation_grid_Dev = new setting("SP_GS_NV_SEGMENTATION_GRID_DEV_PATH",
                          "NV Segmentation Grid Dev Path",
                          "/compassv6/PDF/PDF_TEMPORARY/NV_Portfolio/Portfolio_ID",
                          "String",
                          "");
var NV_Segmentation_grid_PreDev = new setting("SP_GS_NV_SEGMENTATION_GRID_PREDEV_PATH",
                          "NV Segmentation Grid PreDev Path",
                          "/compassv6/PDF/PDF_TEMPORARY/NV_Portfolio/Portfolio_ID",
                          "String",
                          "");
var NV_Portfolio_Entry_Exit = new setting("SP_GS_NV_ENTRY_EXIT_PATH",
                          "NV Portfolio Entry and Exit Path",
                          "/compassv6/PDF/PDF_TEMPORARY/NV_Portfolio/Portfolio_ID",
                          "String",
                          "");
var Probability_Success = new setting("SP_GS_PROBABILITY_OF_SUCCESS_PATH",
                          "Probability of Sucess Path",
                          "/compassv6/PDF/PDF_TEMPORARY/NV_Portfolio/Portfolio_ID",
                          "String",
                          "");
var NV_Portfolio_Pipeline = new setting("SP_GS_NV_PORTFOLIO_PIPELINE_PATH",
                          "NV Portfolio Pipeline Path",
                          "/compassv6/PDF/PDF_TEMPORARY/NV_Portfolio/Portfolio overview",
                          "String",
                          "");
var Launch_Projections = new setting("SP_GS_LAUNCH_DATE_PROJECTION_PATH",
                          "Launch Date Projections Path",
                          "/compassv6/PDF/PDF_TEMPORARY/NV_Portfolio/Portfolio overview",
                          "String",
                          "");
var NV_Project_Stage_Progression = new setting("SP_GS_NV_PRJ_STAGE_PROGRESSION_PATH",
                          "NV Project Stage Progression Path",
                          "/compassv6/PDF/PDF_TEMPORARY/NV_Portfolio/Portfolio overview",
                          "String",
                          "");
var Portfolio_movements = new setting("SP_GS_PORTFOLIO_MOVEMENTS_PATH",
                          "Portfolio movements Path",
                          "/compassv6/PDF/PDF_TEMPORARY/NV_Portfolio/Performance",
                          "String",
                          "");
var Performance_All_PKMs = new setting("SP_GS_PERFORMANCE_ALL_PKM_PATH",
                          "Performance All PKMs Path",
                          "/compassv6/PDF/PDF_TEMPORARY/NV_Portfolio/Performance",
                          "String",
                          "");
var Monitoring = new setting("SP_GS_MONITORING_PATH",
                          "Monitoring Path",
                          "/compassv6/PDF/PDF_TEMPORARY/NV_Portfolio/Monitoring",
                          "String",
                          "");
var FTE = new setting("SP_GS_FTE_PATH",
                          "FTE Path",
                          "/compassv6/PDF/PDF_TEMPORARY/NV_Portfolio/FTE & Cost",
                          "String",
                          "");
var Cost = new setting("SP_GS_COST_PATH",
                          "Cost Path",
                          "/compassv6/PDF/PDF_TEMPORARY/NV_Portfolio/FTE & Cost",
                          "String",
                          "");	

//***PDF directory for links on HomePage***//

var PDF_FULL = new setting("SP_GS_NV_PORT_PDF_FULL",
                          "NV Portfolio PDF - FULL Directory",
                          "/compassv6/PDF/PDF_FULL",
                          "String",
                          "");	
						  
var PDF_LIM = new setting("SP_GS_NV_PORT_PDF_LIM",
                          "NV Portfolio PDF - LIMITED Directory",
                          "/compassv6/PDF/PDF_LIMITED",
                          "String",
                          "");	
						  
function sp_js_print_dashboard_pdf(Object,ReportName,oProject,report){

  var PrintingPath = "";
  var Path ="";
  if(Object InstanceOf OpxObject){
    //the name of the pdf is the name of the project
    var FileName = oProject.Name + ".pdf";
    // the prining report is the viewer report
    var ReportToPrint = "OpxReport".report_getreplace(ReportName);
    //in order to work on the client side we need to swith to local path
    context.set("?LOCAL_DOCUMENT_PATH", true);
    
    var tempDirectory = lispcall "merge-pathnames" ( "pdfprint/", lispcall "DATABASE-IO::DB-DIR" ());
    //we check that the dir exists, if not we create it
    if(tempDirectory.ProbeFile() == false){
      mkdir(LispCall "namestring"(tempDirectory));
    }

	
	if (report == "NV Projects list" || report == "NV Project Team Members List" || report == "NV Segmentation grid" || report == "Monitoring" || report == "FTE" || report == "Costs"){
		Path = "/CompassV6/PDF/PDF_TEMPORARY/Portfolio_ID/"+ report+ ".pdf";
	}else{
		
		Path = "/CompassV6/PDF/PDF_TEMPORARY/"+report+"/"+ FileName;

	}

    PrintingPath = new pathName(ReportToPrint.Print(Object,
                                                    "PDF-PRINTER", 
                                                    "A4", 
                                                    "PAYSAGE", 
                                                    Path));
    context.set("?LOCAL_DOCUMENT_PATH", false);
  }
  return PrintingPath;
}



method Print_CreateViewer on graphics(){
  var CurrentDashboard = "OpxDashboard".get(Print_GetCurrentDashboardId());
  this.Print_GenerateDashboard(CurrentDashboard,"CURRENT_VIEWER",false,true);
}

/*************************************************************************************/
function Print_GetCurrentDashboardId(){
  
	var DashboardId = "";
	var DashboardName = Context._DBB_AA_S_CURRENT_DASHBOARD;    
    if(DashboardName != undefined){
      DashboardId = DashboardName;
    }
	return Dashboardid;
} 
/******************************************************************************************************/

method Print_GenerateDashboard on Graphics(CurrentDashboard,viewerWidget,onObject,Drawpresentation){

  //Check if we need to apply a drill down from a link
  var Alreadydone = getTemporaryObject("_LINKS_OBJECT_FOR_DASHBOARD_FILTER");
  if(Alreadydone != undefined){
    if(Alreadydone InstanceOf vector){
      var FilterCLass = Alreadydone[0].Findclass();
      var Object = Alreadydone[0];
      var FilterObjectList = new vector(Object);
      Activate_Dashboard_DrillDown(CurrentDashboard.GetDashboard_To_Display(),FilterClass,FilterObjectList,false,false);
    }
  }
  this.Print_AddDashboardWidget(CurrentDashboard,ViewerWidget,onObject,Drawpresentation);
  
}

/*****************************************************************************************************/

method Print_AddDashboardWidget on graphics(CurrentDashboard,ViewerWidget,onobject,DrawPresentation){
  // var CurrentObject = CurrentPageObject();
  //we check if the dashboard display is triggered by a link
  //in this case we need to create a filter from the selected object in order to properly filter the dashboard
 
  var CurrentObject = "opxProject".get(context._DBB_AA_S_PREVIEW_OBJECT);
 
  var widgetClass = new symbol("DASHBOARD-VIEWER", "KEYWORD");
  if (this instanceof graphics) {
    var edit_mode_default = context._DBB_AA_B_EDIT_MODE;

    //It is possible to impose a minimum width and height in order to be able to display dashbaord with scrollbars
    var ImposedWidth = CurrentDashboard._DBB_AA_N_MINIMUM_WIDTH; if (! ImposedWidth instanceof number) {ImposedWidth = 0;}else {ImposedWidth = math.round(ImposedWidth);}
    var ImposedHeigth = CurrentDashboard._DBB_AA_N_MINIMUM_HEIGHT; if (! ImposedHeigth instanceof number) {ImposedHeigth = 0;}else {ImposedHeigth = math.round(ImposedHeigth);}
    if ( currentdashboard instanceof OpxDashboard) {
      currentdashboard.computebefore();
      currentdashboard.checkquickfiltersselections(); // need to remove obsolete quick filter selections
      var dashboardtodisplay = CurrentDashboard/*.GetDashboard_To_Display()*/;
      var widget = this.Widget;
      if ( DashboardTodisplay InstanceOf Opxdashboard) {
        if ( this.widget != undefined && (! (this.widget instanceof opxDashboardviewer))) {
          var widgetPlist = new vector("Dashboard",DashboardTodisplay,
                                  "object",CurrentObject,
                                  "ondoubleclick",DoubleClickItem,
                                  "edit-mode",edit_mode_default,
                                       "dropmask",2559,
                                  "Ondrop",CreateComponent,
                                  "OnDrag",DragItem,
                                  "Onselect",Selectitem,
                                  "OnDrawAfter", OnDrawAfterDashboard,
                                  "Show-grid",SetDisplayGridForViewer(),
                                  "use-grid", true,
                                       "grid-size", DashboardTodisplay.attribute_getWithDefault("_DBB_AA_N_GRID_HORIZ", 0),
                                       "grid-vertical-size", DashboardTodisplay.attribute_getWithDefault("_DBB_AA_N_GRID_VERTI", 0),
                                       "grid-horizontal-gutter", DashboardTodisplay.attribute_getWithDefault("_DBB_AA_N_GUTTER_HORIZ", 0),
                                       "grid-vertical-gutter", DashboardTodisplay.attribute_getWithDefault("_DBB_AA_N_GUTTER_VERTI", 0));
          var checkedPlist = new vector();
          for (var p = 0; p < widgetPlist.length; p=p+2) {
            if ( lispcall "javascript::get-resource-from-name"(widgetClass, widgetPlist[p]) != false) {
              checkedPlist.setPlist(widgetPlist[p],widgetPlist[p+1]);
            }
          }
          

          widget = this.addwidgetwithplist("DASHBOARD-VIEWER", checkedPlist);
          Context.CURRENT_VIEWER = this.widget;
          if ( ImposedWidth > 0) {
            this.Widget.width = ImposedWidth;
          }
          if ( ImposedHeigth > 0) {
            this.widget.height = ImposedHeigth;
          }
        }
        else if (! this.printing) {

          if ( this instanceof graphics && this.widget != undefined) {
            withoutlocking{
              this.widget.object = CurrentObject;
              this.widget.dashboard = DashboardTodisplay;
              this.widget.editmode = edit_mode_default;
              this.widget.x = this.x;
              this.widget.y = this.y;
              this.widget.width = (ImposedWidth > 0) ? ImposedWidth : this.width;
              this.widget.height = (ImposedHeigth > 0) ? ImposedHeigth : this.height;
              this.widget.showgrid = SetDisplayGridForViewer();
              this.widget.gridsize = DashboardTodisplay.attribute_getWithDefault("_DBB_AA_N_GRID_HORIZ", 0);
              if (lispcall "javascript::get-resource-from-name"(widgetClass, "grid-vertical-size")) {
                this.widget.gridverticalsize = DashboardTodisplay.attribute_getWithDefault("_DBB_AA_N_GRID_VERTI", 0);
                this.widget.gridhorizontalgutter = DashboardTodisplay.attribute_getWithDefault("_DBB_AA_N_GUTTER_HORIZ", 0);
                this.widget.gridverticalgutter = DashboardTodisplay.attribute_getWithDefault("_DBB_AA_N_GUTTER_VERTI", 0);
              }
              context.current_viewer = this.widget;
            }
          }
        }
      }
    }
  }
}



function sp_js_print_nv_portfolio_project (){
	
	var ip = "OpxIntranetPage".get("_MOD_DBB_IP_DASHBOARD_BUILDER_HOME");
	var portfolio = "Opx_FF_PT_FAVOR_FILTERS".get("NV_PORTFOLIO_SELECTION");
	var sDashbord = "INTRANET.SP_DB_PRJ_ID_CARD";
	var CurrentDashboard = "OpxDashboard".get(sDashbord);
	var PdfPath = "";
	var PdfPathString ="";
	context._DBB_AA_S_CURRENT_DASHBOARD = sDashbord;
	for (var oProject in portfolio){
		context._FF_AA_S_LIST_NAME = "NV_PORTFOLIO_SELECTION";
		context._DBB_AA_B_EDIT_MODE = false;
		context._DBB_AA_S_PREVIEW_OBJECT = oProject.printattribute();
		_Guilinktointranetpage(ip.onb);
		PdfPath = sp_js_print_dashboard_pdf(CurrentDashboard,"SP_REP_DASHBOARD_VIEWER_FOR_PRINT",oProject,"Project ID Card");
		PdfPathString = PdfPath.ToString();
	}
	
	var portfolio = "Opx_FF_PT_FAVOR_FILTERS".get("NV_PORTFOLIO_SELECTION");
	var sDashbord = "INTRANET.SP_DB_PRJ_TIMELINE";
	var CurrentDashboard = "OpxDashboard".get(sDashbord);
	var PdfPath = "";
	var PdfPathString ="";
	context._DBB_AA_S_CURRENT_DASHBOARD = sDashbord;
	for (var oProject in portfolio){
		context._FF_AA_S_LIST_NAME = "NV_PORTFOLIO_SELECTION";
		context._DBB_AA_B_EDIT_MODE = false;
		context._DBB_AA_S_PREVIEW_OBJECT = oProject.printattribute();
		_Guilinktointranetpage(ip.onb);
		PdfPath = sp_js_print_dashboard_pdf(CurrentDashboard,"SP_REP_DASHBOARD_VIEWER_FOR_PRINT",oProject,"Project Timelines");
		PdfPathString = PdfPath.ToString();
	}
	
	
	var sDashbord = "INTRANET.SP_DB_NV_PROJECTS_LIST";
	var CurrentDashboard = "OpxDashboard".get(sDashbord);
	var PdfPath = "";
	var PdfPathString ="";
	context._FF_AA_S_LIST_NAME = "NV_PORTFOLIO_SELECTION";
	context._DBB_AA_B_EDIT_MODE = false;
	// context._DBB_AA_S_PREVIEW_OBJECT = "";
	context._DBB_AA_S_CURRENT_DASHBOARD = sDashbord;
	PdfPath = sp_js_print_dashboard_pdf(CurrentDashboard,"SP_REP_DASHBOARD_VIEWER_FOR_PRINT",CurrentDashboard,"NV Projects list");
	PdfPathString = PdfPath.ToString();
	
	// var sDashbord = "INTRANET.SP_DB_TEAM_MEMBER_LIST";
	// var CurrentDashboard = "OpxDashboard".get(sDashbord);
	// var PdfPath = "";
	// var PdfPathString ="";
	// context._FF_AA_S_LIST_NAME = "port_nv";
	// context._DBB_AA_B_EDIT_MODE = false;
	// context._DBB_AA_S_CURRENT_DASHBOARD = sDashbord;
	// PdfPath = sp_js_print_dashboard_pdf(CurrentDashboard,"SP_REP_DASHBOARD_VIEWER_FOR_PRINT",CurrentDashboard,"NV Project Team Members List");
	// PdfPathString = PdfPath.ToString();
	
	var PrintingPath = "";
	var Path = "/CompassV6/PDF/PDF_TEMPORARY/NV_Portfolio/Portfolio_ID/"+ "Project Team Members List by Project.pdf";
	var ReportToPrint = "OpxReport".get("SP_REP_TEAM_MEMBER_BY_PROJECT");
	PrintingPath = new pathName(ReportToPrint.Print(ReportToPrint,
														"PDF-PRINTER", 
														"A4", 
														"PAYSAGE", 
														Path));
														
	var Path = "/CompassV6/PDF/PDF_TEMPORARY/NV_Portfolio/Portfolio_ID/"+ "Project Team Members List by Function.pdf";
	var ReportToPrint = "OpxReport".get("SP_REP_TEAM_MEMBER_BY_FUNCTION");
	PrintingPath = new pathName(ReportToPrint.Print(ReportToPrint,
														"PDF-PRINTER", 
														"A4", 
														"PAYSAGE", 
														Path));

	
	var sDashbord = "INTRANET.SP_DB_NV_SEGMENTATION_GRID";
	var CurrentDashboard = "OpxDashboard".get(sDashbord);
	var PdfPath = "";
	var PdfPathString ="";
	context._FF_AA_S_LIST_NAME = "NV_PORTFOLIO_SELECTION";
	context._DBB_AA_B_EDIT_MODE = false;
	// context._DBB_AA_S_PREVIEW_OBJECT = "";
	context._DBB_AA_S_CURRENT_DASHBOARD = sDashbord;
	PdfPath = sp_js_print_dashboard_pdf(CurrentDashboard,"SP_REP_DASHBOARD_VIEWER_FOR_PRINT",CurrentDashboard,"NV Segmentation grid");
	PdfPathString = PdfPath.ToString();
	
	var sDashbord = "INTRANET.SP_DB_MONITORING_PORT";
	var CurrentDashboard = "OpxDashboard".get(sDashbord);
	var PdfPath = "";
	var PdfPathString ="";
	context._FF_AA_S_LIST_NAME = "NV_PORTFOLIO_SELECTION";
	context._DBB_AA_B_EDIT_MODE = false;
	context._DBB_AA_S_CURRENT_DASHBOARD = sDashbord;
	PdfPath = sp_js_print_dashboard_pdf(CurrentDashboard,"SP_REP_DASHBOARD_VIEWER_FOR_PRINT",CurrentDashboard,"Monitoring");
	PdfPathString = PdfPath.ToString();
	
	
	var sDashbord = "INTRANET.SP_DB_FTE";
	var CurrentDashboard = "OpxDashboard".get(sDashbord);
	var PdfPath = "";
	var PdfPathString ="";
	context._FF_AA_S_LIST_NAME = "NV_PORTFOLIO_SELECTION";
	context._DBB_AA_B_EDIT_MODE = false;
	// context._DBB_AA_S_PREVIEW_OBJECT = "";
	context._DBB_AA_S_CURRENT_DASHBOARD = sDashbord;
	PdfPath = sp_js_print_dashboard_pdf(CurrentDashboard,"SP_REP_DASHBOARD_VIEWER_FOR_PRINT",CurrentDashboard,"FTE");
	PdfPathString = PdfPath.ToString();
	
	var sDashbord = "INTRANET.SP_DB_COST";
	var CurrentDashboard = "OpxDashboard".get(sDashbord);
	var PdfPath = "";
	var PdfPathString ="";
	context._FF_AA_S_LIST_NAME = "NV_PORTFOLIO_SELECTION";
	context._DBB_AA_B_EDIT_MODE = false;
	// context._DBB_AA_S_PREVIEW_OBJECT = "";
	context._DBB_AA_S_CURRENT_DASHBOARD = sDashbord;
	PdfPath = sp_js_print_dashboard_pdf(CurrentDashboard,"SP_REP_DASHBOARD_VIEWER_FOR_PRINT",CurrentDashboard,"Costs");
	PdfPathString = PdfPath.ToString();
	
}
sp_js_print_nv_portfolio_project.exportfunction();
/******* Dynamic attributes*****/

function sp_js_fte_budget_reader(){
  var oProj = this;
  var sReturnValue = "";
  if(oProj instanceof OpxProject && oProj.SP_NF_N_PRJ_MONTHLY_BUDGET != 0){
    sReturnValue = oProj.SP_NF_N_PRJ_MONTHLY_BUDGET;
  }
  return sReturnValue;
}

function sp_js_fte_budget_init(){
	var y =0;
	var yy=0;
	var syAttribute = new symbol("SP_DA_FTE_BUDGET","KEYWORD");
	var ASlot = new ObjectAttribute("opxproject",syAttribute,"NUMBER");
	var date = new date ();
	var year = date.getyear();
	var month = date.getmonth();
	if (month == 1){
		y = year - 1;
		yy = y%1000;
	}else{
		yy = year%1000;
	}
	ASlot.Comment = "Budget "+yy.tostring().maskregexp(".0d0");
	ASlot.Reader = sp_js_fte_budget_reader;
	ASlot.hiddenInIntranetServer = false;
}
AddWrapperFunction(InitializeIntranetAfterWrapper,"sp_js_fte_budget_init");

/*Actual*/
function sp_js_fte_actual_reader(){
  var oProj = this;
  var sReturnValue = "";
  if(oProj instanceof OpxProject && oProj.SP_NF_N_PRJ_MONTHLY_ACTUAL != 0){
    sReturnValue = oProj.SP_NF_N_PRJ_MONTHLY_ACTUAL;
  }
  return sReturnValue;
}

function sp_js_fte_actual_init(){
	var y =0;
	var yy=0;
	var syAttribute = new symbol("SP_DA_FTE_ACTUALS","KEYWORD");
	var ASlot = new ObjectAttribute("opxproject",syAttribute,"NUMBER");
	var date = new date ();
	var year = date.getyear();
	var month = date.getmonth();
	if (month == 1){
		y = year - 1;
		yy = y%1000;
	}else{
		yy = year%1000;
	}
	ASlot.Comment = "Actual "+yy.tostring().maskregexp(".0d0");
	ASlot.Reader = sp_js_fte_actual_reader;
	ASlot.hiddenInIntranetServer = false;
}
AddWrapperFunction(InitializeIntranetAfterWrapper,"sp_js_fte_actual_init");

/*Planned*/
function sp_js_fte_planned_reader(){
  var oProj = this;
  var sReturnValue = "";
  if(oProj instanceof OpxProject && oProj.SP_NF_N_PRJ_MONTHLY_PLANNED != 0){
    sReturnValue = oProj.SP_NF_N_PRJ_MONTHLY_PLANNED;
  }
  return sReturnValue;
}

function sp_js_fte_planned_init(){
	var y =0;
	var yy=0;
	var syAttribute = new symbol("SP_DA_FTE_PLANNED","KEYWORD");
	var ASlot = new ObjectAttribute("opxproject",syAttribute,"NUMBER");
	var date = new date ();
	var year = date.getyear();
	var month = date.getmonth();
	if (month == 1){
		y = year - 1;
		yy = y%1000;
	}else{
		yy = year%1000;
	}
	ASlot.Comment = "Planned "+yy.tostring().maskregexp(".0d0");
	ASlot.Reader = sp_js_fte_planned_reader;
	ASlot.hiddenInIntranetServer = false;
}
AddWrapperFunction(InitializeIntranetAfterWrapper,"sp_js_fte_planned_init");
/*Forecast*/
function sp_js_fte_forecast_reader(){
  var oProj = this;
  var sReturnValue = "";
  if(oProj instanceof OpxProject && oProj.SP_NF_N_PRJ_MONTHLY_FORECAST != 0){
    sReturnValue = oProj.SP_NF_N_PRJ_MONTHLY_FORECAST;
  }
  return sReturnValue;
}

function sp_js_fte_forecast_init(){
	var y =0;
	var yy=0;
	var syAttribute = new symbol("SP_DA_FTE_FORECAST","KEYWORD");
	var ASlot = new ObjectAttribute("opxproject",syAttribute,"NUMBER");
	var date = new date ();
	var year = date.getyear();
	var month = date.getmonth();
	if (month == 1){
		y = year - 1;
		yy = y%1000;
	}else{
		yy = year%1000;
	}
	ASlot.Comment = "Forecast "+yy.tostring().maskregexp(".0d0");
	ASlot.Reader = sp_js_fte_forecast_reader;
	ASlot.hiddenInIntranetServer = false;
}
AddWrapperFunction(InitializeIntranetAfterWrapper,"sp_js_fte_forecast_init");
/*Variance*/
function sp_js_fte_variance_reader(){
  var oProj = this;
  var sReturnValue = "";
  if(oProj instanceof OpxProject && oProj.SP_NF_N_PRJ_MONTHLY_VARIANCE != 0){
    sReturnValue = oProj.SP_NF_N_PRJ_MONTHLY_VARIANCE;
  }
  return sReturnValue;
}

function sp_js_fte_variance_init(){
	var y =0;
	var yy=0;
	var syAttribute = new symbol("SP_DA_FTE_VARIANCE","KEYWORD");
	var ASlot = new ObjectAttribute("opxproject",syAttribute,"NUMBER");
	var date = new date ();
	var year = date.getyear();
	var month = date.getmonth();
	if (month == 1){
		y = year - 1;
		yy = y%1000;
	}else{
		yy = year%1000;
	}
	ASlot.Comment = "Variance (PI+A)-B "+yy.tostring().maskregexp(".0d0");
	ASlot.Reader = sp_js_fte_variance_reader;
	ASlot.hiddenInIntranetServer = false;
}
AddWrapperFunction(InitializeIntranetAfterWrapper,"sp_js_fte_variance_init");
/*budget cost*/

function sp_js_cost_budget_reader(){
  var oProj = this;
  var sReturnValue = "";
  if(oProj instanceof OpxProject && oProj.SP_NF_N_PRJ_COST_BUDGET_YTD != 0){
    sReturnValue = oProj.SP_NF_N_PRJ_COST_BUDGET_YTD;
  }
  return sReturnValue;
}

function sp_js_cost_budget_init(){
	var y =0;
	var yy=0;
	var syAttribute = new symbol("SP_DA_COST_BUDGET","KEYWORD");
	var ASlot = new ObjectAttribute("opxproject",syAttribute,"NUMBER");
	var date = new date ();
	var year = date.getyear();
	var month = date.getmonth();
	if (month == 1){
		y = year - 1;
		yy = y%1000;
	}else{
		yy = year%1000;
	}
	ASlot.Comment = "Budget YTD "+yy.tostring().maskregexp(".0d0");
	ASlot.Reader = sp_js_cost_budget_reader;
	ASlot.hiddenInIntranetServer = false;
}
AddWrapperFunction(InitializeIntranetAfterWrapper,"sp_js_cost_budget_init");
/*ACtUAL cost*/

function sp_js_cost_actual_reader(){
  var oProj = this;
  var sReturnValue = "";
  if(oProj instanceof OpxProject && oProj.SP_NF_N_PRJ_COST_ACTUAL_YTD != 0){
    sReturnValue = oProj.SP_NF_N_PRJ_COST_ACTUAL_YTD;
  }
  return sReturnValue;
}

function sp_js_cost_actual_init(){
	var y =0;
	var yy=0;
	var syAttribute = new symbol("SP_DA_COST_ACTUAL","KEYWORD");
	var ASlot = new ObjectAttribute("opxproject",syAttribute,"NUMBER");
	var date = new date ();
	var year = date.getyear();
	var month = date.getmonth();
	if (month == 1){
		y = year - 1;
		yy = y%1000;
	}else{
		yy = year%1000;
	}
	ASlot.Comment = "Actual YTD "+yy.tostring().maskregexp(".0d0");
	ASlot.Reader = sp_js_cost_actual_reader;
	ASlot.hiddenInIntranetServer = false;
}
AddWrapperFunction(InitializeIntranetAfterWrapper,"sp_js_cost_actual_init");
/*variance cost */

function sp_js_cost_variance_reader(){
  var oProj = this;
  var sReturnValue = "";
  if(oProj instanceof OpxProject && oProj.SP_NF_N_PRJ_BVA_COST_VARIANCE != 0){
    sReturnValue = oProj.SP_NF_N_PRJ_BVA_COST_VARIANCE;
  }
  return sReturnValue;
}

function sp_js_cost_variance_init(){
	var y =0;
	var yy=0;
	var syAttribute = new symbol("SP_DA_COST_VARIANCE","KEYWORD");
	var ASlot = new ObjectAttribute("opxproject",syAttribute,"NUMBER");
	var date = new date ();
	var year = date.getyear();
	var month = date.getmonth();
	if (month == 1){
		y = year - 1;
		yy = y%1000;
	}else{
		yy = year%1000;
	}
	ASlot.Comment = "Variance(Act- Bud YTD) "+yy.tostring().maskregexp(".0d0");
	ASlot.Reader = sp_js_cost_variance_reader;
	ASlot.hiddenInIntranetServer = false;
}
AddWrapperFunction(InitializeIntranetAfterWrapper,"sp_js_cost_variance_init");
/*cost budget FY */

function sp_js_cost_budget_FY_reader(){
  var oProj = this;
  var sReturnValue = "";
  if(oProj instanceof OpxProject && oProj.SP_NF_N_PRJ_COST_BUDGET_YEAR != 0){
    sReturnValue = oProj.SP_NF_N_PRJ_COST_BUDGET_YEAR;
  }
  return sReturnValue;
}

function sp_js_cost_budget_FY_init(){
	var y =0;
	var yy=0;
	var syAttribute = new symbol("SP_DA_COST_BUDGET_FY","KEYWORD");
	var ASlot = new ObjectAttribute("opxproject",syAttribute,"NUMBER");
	var date = new date ();
	var year = date.getyear();
	var month = date.getmonth();
	if (month == 1){
		y = year - 1;
		yy = y%1000;
	}else{
		yy = year%1000;
	}
	ASlot.Comment = "Budget FY "+yy.tostring().maskregexp(".0d0");
	ASlot.Reader = sp_js_cost_budget_FY_reader;
	ASlot.hiddenInIntranetServer = false;
}
AddWrapperFunction(InitializeIntranetAfterWrapper,"sp_js_cost_budget_FY_init");
/*cost Forecast FY */

function sp_js_cost_forecast_FY_reader(){
  var oProj = this;
  var sReturnValue = "";
  if(oProj instanceof OpxProject && oProj.SP_NF_N_PRJ_COST_FORE_YEAR != 0){
    sReturnValue = oProj.SP_NF_N_PRJ_COST_FORE_YEAR;
  }
  return sReturnValue;
}

function sp_js_cost_forecast_FY_init(){
	var y =0;
	var yy=0;
	var syAttribute = new symbol("SP_DA_COST_FORECAST_FY","KEYWORD");
	var ASlot = new ObjectAttribute("opxproject",syAttribute,"NUMBER");
	var date = new date ();
	var year = date.getyear();
	var month = date.getmonth();
	if (month == 1){
		y = year - 1;
		yy = y%1000;
	}else{
		yy = year%1000;
	}
	ASlot.Comment = "Forecast FY "+yy.tostring().maskregexp(".0d0");
	ASlot.Reader = sp_js_cost_forecast_FY_reader;
	ASlot.hiddenInIntranetServer = false;
}
AddWrapperFunction(InitializeIntranetAfterWrapper,"sp_js_cost_forecast_FY_init");

//**** Filter Time **//
						  
 function SP_JS_OPEN_POPUP_FILTER_TIME() {
 var pLink = new hyperlink("Fvalue", "Attribute", "ID", "EDITORTYPE", "SP_REP_TIME_FILTER", "POPUP", true);
 if (pLink != undefined)
  pLink.go(context);
}
SP_JS_OPEN_POPUP_FILTER_TIME.exportfunction();

/* compare date to actual year */
function sp_js_compare_yb_to_cy(date){
	var yearb = date.getyear();
	var current_date = context.calldateformula("$date_of_the_day");
	var yearc=current_date.getyear();
	if(yearb==yearc)
		return true;
	else
		return false;
	
}sp_js_compare_yb_to_cy.exportfunction({"DATE"},"Boolean");
/***  Additional Comments **/
var Additional_comments_KPI1 = new setting("SP_GS_S_ADD_COMM_KPI1",
                          "Additional comments KPI1",
                          "",
                          "Notepad",
                          ""); 
						  
var Additional_comments_PKMS = new setting("SP_GS_S_ADD_COMM_PKMS",
                          "Additional comments PKMS",
                          "",
                          "Notepad",
                          ""); 
var Additional_comments_MAJMS = new setting("SP_GS_S_ADD_COMM_MAJMS",
                          "Additional comments MAJMS",
                          "",
                          "Notepad",
                          ""); 
/*** GANT chart KPI1 ***/
function SP_JS_DRAW_GANT_CHART() {
  var CurrentGantt=this.Gantt;
  Context.RoadmapGAntt = CurrentGantt;
  SP_JS_DISPLAY_RODMAP_GANT();
  this._roa_setTimeScale();  
}

function SP_JS_DISPLAY_RODMAP_GANT() {
  var currentGantt = this.Gantt;
  if (currentGantt Instanceof OpxGanttdelta){
    currentGantt.addbarAfterdrawinghandler(SP_JS_RODMAP_GANT_HANDLER);
  } 
}

// 2017-10-16 : Change of images / Use of stored value for field "Progress Completion Status"
function SP_JS_RODMAP_GANT_HANDLER(Activity){
  if (this.gantt instanceof OpxGantt){
    if (Activity instanceof OpxActivity){
		var Gantt = this.gantt;
		var pImage_onTime_Com = "opxImage".get("SP_IMG_DISC_BLACK_CHECKED");
		var pImage_onTime_UnComp = "opxImage".get("SP_IMG_DISC_BLACK");
		var pImage_Delayed_Comp = "opxImage".get("SP_IMG_DISC_RED_CHECKED");
		var pImage_Delayed_UnComp = "opxImage".get("SP_IMG_DISC_RED");
		var pImage_aHeadOfTime_Comp = "opxImage".get("SP_IMG_DISC_GREEN_CHECKED");
		var pImage_aHeadOfTime_UnComp = "opxImage".get("SP_IMG_DISC_GREEN");
		var pImage_Cancelled = "opxImage".get("SP_IMG_DISC_GREY");
		var BarX1 = this.datetox(Activity.FD_YEARLY);
		var BarX2 = this.datetox(Activity.PF);
		var Barwidth = BarX2-BarX1;

		if(Activity.get("SP_AA_S_PRG_COMPLETION_STATUS") == "On Time and completed")
		{
			this.drawImage(pImage_onTime_Com, Barwidth, 0, true, pImage_onTime_Com.WIDTH, pImage_onTime_Com.HEIGHT, true, 1, 1);
		}
		else if(Activity.get("SP_AA_S_PRG_COMPLETION_STATUS") == "On Time and not completed")
		{
			this.drawImage(pImage_onTime_UnComp, Barwidth, 0, true, pImage_onTime_UnComp.WIDTH, pImage_onTime_UnComp.HEIGHT, true, 1, 1);
		}                                     
                               
		else if(Activity.get("SP_AA_S_PRG_COMPLETION_STATUS") == "Delayed and completed") 
		{
			this.drawImage(pImage_Delayed_Comp, Barwidth, 0, true, pImage_Delayed_Comp.WIDTH, pImage_Delayed_Comp.HEIGHT, true, 1, 1);
		}	
		else if(Activity.get("SP_AA_S_PRG_COMPLETION_STATUS") == "Delayed and not completed")
		{
			this.drawImage(pImage_Delayed_UnComp, Barwidth, 0, true, pImage_Delayed_UnComp.WIDTH, pImage_Delayed_UnComp.HEIGHT, true, 1, 1);
		}                                       
                             
		else if(Activity.get("SP_AA_S_PRG_COMPLETION_STATUS") == "Ahead of Time and completed")
		{
			this.drawImage(pImage_aHeadOfTime_Comp, Barwidth, 0, true, pImage_aHeadOfTime_Comp.WIDTH, pImage_aHeadOfTime_Comp.HEIGHT, true, 1, 1);
		}
		else if(Activity.get("SP_AA_S_PRG_COMPLETION_STATUS") == "Ahead of Time and not completed")
		{
			this.drawImage(pImage_aHeadOfTime_UnComp, Barwidth, 0, true, pImage_aHeadOfTime_UnComp.WIDTH, pImage_aHeadOfTime_UnComp.HEIGHT, true, 1, 1);
		}
		else if(Activity.get("SP_AA_S_PRG_COMPLETION_STATUS") == "Cancelled")
		{
			this.drawImage(pImage_Cancelled, Barwidth, 0, true, pImage_Cancelled.WIDTH, pImage_Cancelled.HEIGHT, true, 1, 1);
		}
		return false;
		}
  } 
}
/***  Project Filter **/


function SP_JS_FILTER_PROJECT_MONITORING() {
 var activity= this;
if (activity instanceof OpxActivity){
 if (activity.PROJECT.SPV6_AA_B_NV_VERSION)
 return activity.PROJECT.Name;

}else 
return"";
}
SP_JS_FILTER_PROJECT_MONITORING.exportfunction("","STRING");

/** Setting for update date of performance report **/
var PERF_REPORT_UPDATE = new setting("SP_GS_S_NV_PERF_REPORT_LAST_UPDATE",
                          "Performance Report Last Update Date",
                          "",
                          "String",
                          "");	

//Function to move created file to destination directory
function sp_ojs_nv_move_file(path,DestPath)
{
	if (path.probefile())
		{
			if (DestPath.ProbeFile())
			{
				DestPath.delete();
			}
			path.copyfile(DestPath);		
		}
}

// Function to print NV Portfolio PDF
function sp_ojs_nv_print_pdf()
{
	//setting time window
	context.GEN_CHART_DD = sp_js_year_start(context.SP_NF_LATEST_YEARLY_BASELINE,0);
	context.GEN_CHART_ED = context.callDateFormula("ADD_DURATION(sp_js_year_start(OC.SP_NF_LATEST_YEARLY_BASELINE,1),'1d',\"\")");
	//Directory for NV Portfoli PDF
	var vDir_Full = context.SP_GS_NV_PORT_PDF_FULL;
	var vDir_Lim = context.SP_GS_NV_PORT_PDF_LIM;

	// NV Portfolio
	var vPort_Sel = "opx_FF_PT_FAVOR_FILTERS".get("NV_PORTFOLIO_SELECTION");
	var vPort_Rep = "opx_FF_PT_FAVOR_FILTERS".get("NV_PORTFOLIO_REPORTING");
	var vPort_NV = "opx_FF_PT_FAVOR_FILTERS".get("NV");
	
	// NV Footer and Header
	var Header="OpxReport".get("SP_RE_REP_NV_HEADER_PRINT");
	var Footer="OpxReport".get("SP_RE_REP_NV_FOOTER_PRINT");

	//Definition of varaible used to generate PDF
	var path;
	var DestPath;
	var Pres;

	// NV Project List PDF
	DestPath=vDir_Lim+"NV Projects list.pdf";
	if DestPath.probefile() DestPath.deletefile();
	pres = "opxPresentation".get("SP_PRES_NV_PROJ_LIST");
	pres.HeaderReport=Header;
	pres.FooterReport=Footer;
	path = pres.printPresentation(new vector(vPort_Rep),"#{POSTSCRIPT-SUPPORT::PDF-PRINTER@PDF-PRINTER}".lispeval(), ":FORMAT".lispeval(), ":A4".lispeval(),   ":ORIENTATION".lispeval(), ":LANDSCAPE".lispeval());
	sp_ojs_nv_move_file(path,DestPath);

	// New Vaccine Prioritization PDF
	DestPath=vDir_Lim+"New Vaccine Prioritization.pdf";
	if DestPath.probefile() DestPath.deletefile();
	pres = "opxPresentation".get("SP_PRES_NV_PRIO");
	pres.HeaderReport=Header;
	pres.FooterReport=Footer;
	path = pres.printPresentation(new vector(vPort_Rep),"#{POSTSCRIPT-SUPPORT::PDF-PRINTER@PDF-PRINTER}".lispeval(), ":FORMAT".lispeval(), ":A4".lispeval(),   ":ORIENTATION".lispeval(), ":LANDSCAPE".lispeval());
	sp_ojs_nv_move_file(path,DestPath);

	// NV Pipeline PDF
	DestPath=vDir_Full+"NV Pipeline.pdf";
	if DestPath.probefile() DestPath.deletefile();
	pres = "opxPresentation".get("SP_PRES_NV_PIPELINE");
	pres.HeaderReport=Header;
	pres.FooterReport=Footer;
	path = pres.printPresentation(new vector(vPort_Rep),"#{POSTSCRIPT-SUPPORT::PDF-PRINTER@PDF-PRINTER}".lispeval(), ":FORMAT".lispeval(), ":A4".lispeval(),   ":ORIENTATION".lispeval(), ":LANDSCAPE".lispeval());
	sp_ojs_nv_move_file(path,DestPath);

	// NV Project Stage Progression PDF
	Context.SP_AA_B_DISPLAY_EXPL = true;
	DestPath=vDir_Full+"NV Project Stage Progression.pdf";
	if DestPath.probefile() DestPath.deletefile();
	pres = "opxPresentation".get("SP_PRES_NV_PROG");
	pres.HeaderReport=Header;
	pres.FooterReport=Footer;
	path = pres.printPresentation(new vector(vPort_Rep),"#{POSTSCRIPT-SUPPORT::PDF-PRINTER@PDF-PRINTER}".lispeval(), ":FORMAT".lispeval(), ":A3".lispeval(),   ":ORIENTATION".lispeval(), ":LANDSCAPE".lispeval());
	sp_ojs_nv_move_file(path,DestPath);

	// NV Performance Portfolio Movments PDF
	DestPath=vDir_Full+"Performance Portfolio movments.pdf";
	if DestPath.probefile() DestPath.deletefile();
	pres = "opxPresentation".get("SP_PRES_NV_PERF_MOV");
	pres.HeaderReport=Header;
	pres.FooterReport=Footer;
	path = pres.printPresentation(new vector(vPort_Rep),"#{POSTSCRIPT-SUPPORT::PDF-PRINTER@PDF-PRINTER}".lispeval(), ":FORMAT".lispeval(), ":A4".lispeval(),   ":ORIENTATION".lispeval(), ":LANDSCAPE".lispeval());
	sp_ojs_nv_move_file(path,DestPath);

	// NV Performance All PKMs PDF
	DestPath=vDir_Full+"Performance All PKMs.pdf";
	if DestPath.probefile() DestPath.deletefile();
	pres = "opxPresentation".get("SP_PRES_NV_PERF_PKM");
	pres.HeaderReport=Header;
	pres.FooterReport=Footer;
	path = pres.printPresentation(new vector(vPort_Rep),"#{POSTSCRIPT-SUPPORT::PDF-PRINTER@PDF-PRINTER}".lispeval(), ":FORMAT".lispeval(), ":A4".lispeval(),   ":ORIENTATION".lispeval(), ":LANDSCAPE".lispeval());
	sp_ojs_nv_move_file(path,DestPath);
	
		// NV Performance All MAJM PDF
	DestPath=vDir_Full+"Performance All Major Milestones.pdf";
	if DestPath.probefile() DestPath.deletefile();
	pres = "opxPresentation".get("SP_PRES_NV_PERF_MAJM");
	pres.HeaderReport=Header;
	pres.FooterReport=Footer;
	path = pres.printPresentation(new vector(vPort_Rep),"#{POSTSCRIPT-SUPPORT::PDF-PRINTER@PDF-PRINTER}".lispeval(), ":FORMAT".lispeval(), ":A4".lispeval(),   ":ORIENTATION".lispeval(), ":LANDSCAPE".lispeval());
	sp_ojs_nv_move_file(path,DestPath);
	

	// NV Monitoring PKM Status PDF
	DestPath=vDir_Full+"Monitoring_Project Key Milestones Status.pdf";
	if DestPath.probefile() DestPath.deletefile();
	pres = "opxPresentation".get("SP_PRES_NV_MONIT_PKM");
	pres.HeaderReport=Header;
	pres.FooterReport=Footer;
	path = pres.printPresentation(new vector(vPort_Rep),"#{POSTSCRIPT-SUPPORT::PDF-PRINTER@PDF-PRINTER}".lispeval(), ":FORMAT".lispeval(), ":A4".lispeval(),   ":ORIENTATION".lispeval(), ":LANDSCAPE".lispeval());
	sp_ojs_nv_move_file(path,DestPath);

	// NV Monitoring MAJM Status PDF
	DestPath=vDir_Full+"Monitoring_Major Milestones Status.pdf";
	if DestPath.probefile() DestPath.deletefile();
	pres = "opxPresentation".get("SP_PRES_NV_MONIT_MAJ");
	pres.HeaderReport=Header;
	pres.FooterReport=Footer;
	path = pres.printPresentation(new vector(vPort_Rep),"#{POSTSCRIPT-SUPPORT::PDF-PRINTER@PDF-PRINTER}".lispeval(), ":FORMAT".lispeval(), ":A4".lispeval(),   ":ORIENTATION".lispeval(), ":LANDSCAPE".lispeval());
	sp_ojs_nv_move_file(path,DestPath);
	
	// NV Monitoring Milestones Status PDF
	DestPath=vDir_Full+"Monitoring_Milestones Status.pdf";
	if DestPath.probefile() DestPath.deletefile();
	pres = "opxPresentation".get("SP_PRES_NV_MONIT_MLS");
	pres.HeaderReport=Header;
	pres.FooterReport=Footer;
	path = pres.printPresentation(new vector(vPort_Rep),"#{POSTSCRIPT-SUPPORT::PDF-PRINTER@PDF-PRINTER}".lispeval(), ":FORMAT".lispeval(), ":A4".lispeval(),   ":ORIENTATION".lispeval(), ":LANDSCAPE".lispeval());
	sp_ojs_nv_move_file(path,DestPath);
	
		// NV Monitoring Stage Gate Timelines PDF
	DestPath=vDir_Full+"Monitoring_Stage Gate Timelines.pdf";
	if DestPath.probefile() DestPath.deletefile();
	pres = "opxPresentation".get("SP_PRES_NV_MONIT_STG");
	pres.HeaderReport=Header;
	pres.FooterReport=Footer;
	path = pres.printPresentation(new vector(vPort_Rep),"#{POSTSCRIPT-SUPPORT::PDF-PRINTER@PDF-PRINTER}".lispeval(), ":FORMAT".lispeval(), ":A4".lispeval(),   ":ORIENTATION".lispeval(), ":LANDSCAPE".lispeval());
	sp_ojs_nv_move_file(path,DestPath);
	

	// NV Project Team Members List.pdf
	DestPath=vDir_Lim+"NV Project Team Members List.pdf";
	if DestPath.probefile() DestPath.deletefile();
	pres = "opxPresentation".get("SP_PRES_NV_TM_LIST");
	pres.HeaderReport=Header;
	pres.FooterReport=Footer;
	path = pres.printPresentation(new vector(vPort_Rep),"#{POSTSCRIPT-SUPPORT::PDF-PRINTER@PDF-PRINTER}".lispeval(), ":FORMAT".lispeval(), ":A4".lispeval(),   ":ORIENTATION".lispeval(), ":LANDSCAPE".lispeval());
	sp_ojs_nv_move_file(path,DestPath);
	
	// NV Entry & Exit PDF
	//setting start date and end date for NV entry exit report
	 var entry_value=context.callNumberFormula("YEAR_NUMBER(PERIOD_START($DATE_OF_THE_DAY,\"Year\",-5))")
	context.SP_AA_S_NV_ENTRY_EXIT_FROM_YEAR_FILTER="print_number".call(entry_value,"####");
	var exit_value=context.callNumberFormula("YEAR_NUMBER($DATE_OF_THE_DAY)")
	context.SP_AA_S_NV_ENTRY_EXIT_TO_YEAR_FILTER="print_number".call(exit_value,"####");
	DestPath=vDir_Full+"NV Portfolio Entry and Exit.pdf";
	if DestPath.probefile() DestPath.deletefile();
	pres = "opxPresentation".get("SP_PRES_NV_ENTRY");
	pres.HeaderReport=Header;
	pres.FooterReport=Footer;
	path = pres.printPresentation(new vector(vPort_NV),"#{POSTSCRIPT-SUPPORT::PDF-PRINTER@PDF-PRINTER}".lispeval(), ":FORMAT".lispeval(), ":A3".lispeval(),   ":ORIENTATION".lispeval(), ":PORTRAIT".lispeval());
	sp_ojs_nv_move_file(path,DestPath);
	
	// TPP
	var PDF_Name=vDir_Full+"Target_Product_Profile.pdf";
	//deletion of the merge file
	if PDF_Name.probefile() PDF_Name.deletefile();
	//deletion then creation of the TPP folder
	var vDir=vDir_Full+"TPP/";
	if (vDir_Full != "")
	{
		var vReq_supp="rm -R "+vDir;
		vReq_supp.execute("",true);
		vDir.mkdir();
	}else{
		writetolog ("Error, parameter SP_GS_NV_PORT_PDF_FULL is empty.");
		alert("Error - please check the export parameters.");
		return 1;
	}
	// creation of temporary folder
	var vDir_Temp=vDir+"/TEMP";
	vDir_Temp.mkdir();
	var vec=new vector();

	// Export all TPP to TPP Dir, use of the portfolio NV_PORTFOLIO_SELECTION because documents are not in versions
	var nv_portfolio_name = "NV_PORTFOLIO_SELECTION";
	var portfolio = "Opx_FF_PT_FAVOR_FILTERS".get(nv_portfolio_name);
	if (portfolio instanceof Opx_FF_PT_FAVOR_FILTERS && portfolio.printAttribute("ID") != "")
	{
		for(var project in portfolio)
		{
			var vDoc;
			var vDocName;
			fromobject(project)
			{
				for (var vDocIni in "Opx_COL_PT_DOCUMENT_TABLE" where vDocIni.CallBooleanFormula("DESC=\"TPP_*\""))
				{ 
					vDoc = vDocIni.get("ISSUE-DOCUMENT");
					vDocName = project.name;
					
					if (vDoc!=undefined && vDoc!="")
					{
						var TargetFile = vDoc.LoadDocumentTo(Context.CallStringFormula("$TEMPORARY_FILES_DIRECTORY"));
						
						var Filename = vDocName + ".pdf";
						var PathToExportFile = vDir + Filename;
						vec.push(PathToExportFile);
						if PathToExportFile.probefile() PathToExportFile.deletefile();
						TargetFile.copyfile(PathToExportFile);
					}
					break;
				}
			}
		}
	}

	// Merge of PDF
	var vReq=context.SP_GS_S_PATH_MERGE_SCRIPT+"PDF_Merging.sh -I " +vDir+" -T "+vDir_Temp+" -O "+ PDF_Name;
	vReq.execute("",true);

	// Remove files
	//for (var vFile in vec)
	//{
	//	if vFile.probefile() vFile.deletefile();
	//}
	
}
sp_ojs_nv_print_pdf.exportfunction();

// Function for printing NV Monthly Reports
function sp_ojs_print_nv_monthly_report()
{
	//var exportname;
	var file;
	var report_object="opxReport".get("SP_RP_PRJ_MONTHLY_PRINT");
	var vDir_Lim = context.SP_GS_NV_PORT_PDF_LIM;
	var portfolio = "opx_FF_PT_FAVOR_FILTERS".get("NV_PORTFOLIO_SELECTION_PMR");
	var vProj_Filter=portfolio._FF_DA_S_FILTER_FORMULA;
	var PDF_Name=vDir_Lim+"Project_Monthly_Report.pdf";
	var vDir=vDir_Lim+"Monthly_Report/";
	if (vDir_Lim != "")
	{
		var vReq_supp="rm -R "+vDir;
		vReq_supp.execute("",true);
		vDir.mkdir();
	}else{
		writetolog ("Error, parameter SP_RP_PRJ_MONTHLY_PRINT is empty.");
		alert("Error - please check the export parameters.");
		return 1;
	}
	var vDir_Temp=vDir+"/TEMP";
	vDir_Temp.mkdir();

	// Remove previous file
	if PDF_Name.probefile() PDF_Name.deletefile();

	
	var vec = new vector();
	var Franchise_Code=1;
	var Previous_Franchise="";
	var Current_Franchise="";
	var file_name;
	
	// We get project of NV Portfolio
	for (var vProj in "OpxProject" where vProj.callbooleanformula(vProj_Filter) order by {"1BS","NAME"})
	{
		var end_date=Sp_get_last_act_pf(vProj.printattribute());
		var date_of_day=new date();	
		
		// We compare current franchise to previous franchise
		Current_Franchise=vProj.BREAKDOWN_1;
		if (Previous_Franchise!="" && Previous_Franchise!=Current_Franchise)
			Franchise_Code++;
		// We store the value of Current_Franchise in Previous_Franchise
		Previous_Franchise=Current_Franchise;
		
		file_name=Franchise_Code+"_"+vProj.name+"_"+vProj.SPAS_AA_PROJECT_CODE;
		
		context.GEN_CHART_DD="PERIOD_START".call(date_of_day,"YEAR",-1);
		context.GEN_CHART_ED="PERIOD_START".call(end_date,"YEAR",2);
		
		var exportname =vDir+file_name+".pdf";	
		vec.push(exportname);
		var file = report_object.print(vProj, "PDF-PRINTER", "A4", "LANDSCAPE", exportname);
	}

	// Merge of PDF
	var vReq=context.SP_GS_S_PATH_MERGE_SCRIPT+"PDF_Merging.sh -I " +vDir+" -T "+vDir_Temp+" -O "+ PDF_Name;
	vReq.execute("",true);

	// Remove files
	//for (var vFile in vec)
	//{
	//	if vFile.probefile() vFile.deletefile();
	//}
}

// Function used for "Macro called when displaying form" in report SP_PO_OVERVIEW_DASHBOARD_BY_FRANCHISE
function sp_nv_show_predev_proj()
{
	Context.SP_AA_B_DISPLAY_EXPL = true;
}
sp_nv_show_predev_proj.exportfunction();			

function sp_js_nv_tpp_generation()
{
	//Directory for NV Portfoli PDF
	var sDir_Full = context.SP_GS_NV_PORT_PDF_FULL;
	// TPP
	var PDF_Name=sDir_Full+"Target_Product_Profile.pdf";
	//deletion of the merge file
	if PDF_Name.probefile() PDF_Name.deletefile();
	//deletion then creation of the TPP folder to empty it
	var vDir=sDir_Full+"TPP/";
	if (sDir_Full != "")
	{
		var vReq_supp="rm -R "+vDir;
		vReq_supp.execute("",true);
		vDir.mkdir();
	}else{
		writetolog ("Error, parameter SP_GS_NV_PORT_PDF_FULL is empty.");
		alert("Error - please check the export parameters.");
		return 1;
	}
	
	// creation of temporary folder
	var vDir_Temp=vDir+"/TEMP";
	vDir_Temp.mkdir();
	var vec=new vector();

	// Export all TPP to TPP Dir, use of the portfolio NV_PORTFOLIO_SELECTION because documents are not in versions
	var nv_portfolio_name = "NV_PORTFOLIO_SELECTION";
	var portfolio = "Opx_FF_PT_FAVOR_FILTERS".get(nv_portfolio_name);
	if (portfolio instanceof Opx_FF_PT_FAVOR_FILTERS && portfolio.printAttribute("ID") != "")
	{
		for(var project in portfolio)
		{
			var vDoc;
			var vDocName;
			fromobject(project)
			{
				for (var vDocIni in "Opx_COL_PT_DOCUMENT_TABLE" where vDocIni.CallBooleanFormula("DESC=\"TPP_*\""))
				{ 
					vDoc = vDocIni.get("ISSUE-DOCUMENT");
					vDocName = project.name;
					
					if (vDoc!=undefined && vDoc!="")
					{
						var TargetFile = vDoc.LoadDocumentTo(Context.CallStringFormula("$TEMPORARY_FILES_DIRECTORY"));
						
						var Filename = vDocName + ".pdf";
						var PathToExportFile = vDir + Filename;
						vec.push(PathToExportFile);
						if PathToExportFile.probefile() PathToExportFile.deletefile();
						TargetFile.copyfile(PathToExportFile);
					}
					break;
				}
			}
		}
	}

	// Merge of PDF
	var vReq=context.SP_GS_S_PATH_MERGE_SCRIPT+"PDF_Merging.sh -I " +vDir+" -T "+vDir_Temp+" -O "+ PDF_Name;
	vReq.execute("",true);
}			  
						  
writetolog("Script SP_JS_NV_PORTFOLIO loaded with version ~a ", revision_number);

 
//	NAME	: SP_JS_OPEN_DATASET
//	AUTHOR  : flecanut
//  PURPOSE : COMPASS v6 , workpackage opening
//  
//  HISTORY :
var revision_number ="1.3";
//  Revision 1.3  2018/05/04
//  ITS-INC0451170 - Modification of function sp_get_activity_set_from_selected_portfolio_and_obs
//				   - Creation of functions sp_ws_get_level_1_act, sp_js_is_a_virtualdataset and _sp_goto_virtualdataset_on_selected_activities_workspace
//				   - Modification of function _sp_goto_virtualdataset_on_multiple_obs and _sp_goto_virtualdataset_on_selected_obs to call _sp_goto_virtualdataset_on_selected_activities_workspace
//
//	Revision 1.2  2017/11/02 bcordel
//	Modifying function _sp_goto_virtualdataset_on_multiple_obs to not have data of version
//
//	Revision 1.1  2017/10/20 bcordel
//	Modifying function to hide activities and add BVA summary data to entries
//
//	Revision 1.0  flecanut
//	creation
//

// Function used in access by change, by product of by workpackage to construct virtualdataset and go to it
function _sp_goto_virtualdataset_on_selected_activities(vActVect)
{
	if(vActVect!= undefined && vActVect instanceOf vector)
	{
		if(vActVect.length>0)
		{
			var vDataSet= new OpxVirtualDataset();
			vDataSet.selectedActivities = vActVect;

			if(vDataSet instanceOf OpxVirtualDataset)
			{
				var CurrentModuleId = GetCurrentModule("");
				var openingfunction = "Opx_GUI_PT_MODULES".get(CurrentModuleId)._GUI_AA_S_OPEN_FUNCTION;
				"_GuiAddOrOpenClass".call(vDataSet, Openingfunction, false);
				vDataSet._inf_open_project();
			}
		} else {
			alert("No data to display, please change your selection criteria");
		}
	}
}


// Function used in access of workspaces (creation of specific function to identify VirtualDatasets of type "Workspaces")
function _sp_goto_virtualdataset_on_selected_activities_workspace(vActVect)
{
	if(vActVect!= undefined && vActVect instanceOf vector)
	{
		if(vActVect.length>0)
		{
			var vDataSet= new OpxVirtualDataset();
			vDataSet.selectedActivities = vActVect;
			// We set a comment on tha dataset to identify Workspace (allow to display specific features on "Workspaces")
			vDataSet.comment="WorkSpace";

			if(vDataSet instanceOf OpxVirtualDataset)
			{
				var CurrentModuleId = GetCurrentModule("");
				var openingfunction = "Opx_GUI_PT_MODULES".get(CurrentModuleId)._GUI_AA_S_OPEN_FUNCTION;
				"_GuiAddOrOpenClass".call(vDataSet, Openingfunction, false);
				vDataSet._inf_open_project();
			}
		} else {
			alert("No data to display, please change your selection criteria");
		}
	}
}

// Access by change

// Function used by named formulae 'SP_NF_B_CHANGE_IS_IN_PORTFOLIO' to identify if change is in current portfolio
function sp_change_is_in_selected_portfolio(String)
{
	var vReturn = false;
	var vChange = this;
	var PortfolioStr = context._FF_AA_S_LIST_NAME;
	var vPrjVect = new vector();
	
	if(PortfolioStr == ""){
		return true;
	} else {
		var currentPortfolio = "Opx_FF_PT_FAVOR_FILTERS".get(PortfolioStr);
		if(currentPortfolio instanceof Opx_FF_PT_FAVOR_FILTERS)
		{
			for(var project in currentPortfolio)
			{
				vPrjVect.push(project);
			}
		}
	}
	
	if(vChange != undefined && vChange instanceOf opxSP_PT_RAVL_CHANGE && vPrjVect.length!=0)
	{
		for(var vWS in vChange.get("r.SP_RA_RAVL_WSH_CHANGE.SP_PT_RAVL_WORKSHARING"))
		{
			for(var vAct in vWS.get("r.SP_RA_RAVL_WORKSHARING.WORK-STRUCTURE"))
			{
				if(vAct != undefined && vPrjVect.isinlist(vAct.project))
				{
					return true;
				}
			}
		}
	}
	
	return vReturn;
}
sp_change_is_in_selected_portfolio.exportfunction({"STRING"},"BOOLEAN","Check if current change (this) is in selected portfolio");

function sp_get_activity_set_from_change(vChange)
{
	var vActVect = new vector();
	if(vChange != undefined && vChange instanceOf opxSP_PT_RAVL_CHANGE)
	{
		for(var vWS in vChange.get("r.SP_RA_RAVL_WSH_CHANGE.SP_PT_RAVL_WORKSHARING"))
		{
		   for(var vAct in vWS.get("r.SP_RA_RAVL_WORKSHARING.WORK-STRUCTURE"))
		   {
			  if(vAct != undefined)
			  {
				vActVect.push(vAct);
			  }
		   }
		}
	}
	return vActVect;
}

function _sp_goto_virtualdataset_on_selected_change()
{
	var vChange = this.object;
	var vActVect = sp_get_activity_set_from_change(vChange);
	_sp_goto_virtualdataset_on_selected_activities(vActVect);
}

function _sp_goto_virtualdataset_on_multiple_changes()
{
	var SelectedElements = _InfGetSelectedObjectOnClass("opxSP_PT_RAVL_CHANGE");
	if(SelectedElements != undefined && SelectedElements instanceOf vector)
	{
		var vActVect = new vector();
		for (var vElement in SelectedElements)
		{
			vActVect = vActVect+sp_get_activity_set_from_change(vElement);
		}
		_sp_goto_virtualdataset_on_selected_activities(vActVect);
	}
}

// Access by product

// Function used by named formulae 'SP_NF_B_PRODUCT_IS_IN_PORTFOLIO' to identify if change is in current portfolio
function sp_product_is_in_selected_portfolio(String)
{
	var vReturn = false;
	var vProduct = this;
	var PortfolioStr = context._FF_AA_S_LIST_NAME;
	var vPrjVect = new vector();
	
	if(PortfolioStr == ""){
		return true;
	} else {
		var currentPortfolio = "Opx_FF_PT_FAVOR_FILTERS".get(PortfolioStr);
		if(currentPortfolio instanceof Opx_FF_PT_FAVOR_FILTERS)
		{
			for(var project in currentPortfolio)
			{
				vPrjVect.push(project);
			}
		}
	}
	
	if(vProduct != undefined && vProduct instanceOf opxSPAS_PT_PRODUCT && vPrjVect.length!=0)
	{
		for(var vVariation in vProduct.get("r.SP_RA_RAVL_PRODUCT.SP_PT_RAVL") where vVariation.SP_RA_RAVL_WORKSHARING1 != undefined && vVariation.SP_RA_RAVL_WORKSHARING1 instanceOf opxSP_PT_RAVL_WORKSHARING)
		{
			for(var vWS in vVariation.SP_RA_RAVL_WORKSHARING1.get("r.SP_RA_RAVL_WORKSHARING.WORK-STRUCTURE"))
			{
				if(vWS != undefined)
				{
					return true;
				}
			}
		}
	}
	
	return vReturn;
}
sp_product_is_in_selected_portfolio.exportfunction({"STRING"},"BOOLEAN","Check if current product (this) is in selected portfolio");


function sp_get_activity_set_from_product(vProduct)
{
	var vActVect = new vector();
	if(vProduct != undefined && vProduct instanceOf opxSPAS_PT_PRODUCT)
	{
		for(var vVariation in vProduct.get("r.SP_RA_RAVL_PRODUCT.SP_PT_RAVL") where vVariation.SP_RA_RAVL_WORKSHARING1 != undefined && vVariation.SP_RA_RAVL_WORKSHARING1 instanceOf opxSP_PT_RAVL_WORKSHARING)
		{
			for(var vWS in vVariation.SP_RA_RAVL_WORKSHARING1.get("r.SP_RA_RAVL_WORKSHARING.WORK-STRUCTURE"))
			{
				if(vWS != undefined)
				{
					vActVect.push(vWS);
				}
			}
		}
	}
	return vActVect;
}

function _sp_goto_virtualdataset_on_selected_product()
{
	var vProduct = this.object;
	var vActVect = new vector();
	
	for(var Each in "opxSPAS_PT_PRODUCT".findclass() where Each.name==vProduct.name)
	{
        vActVect = vActVect+sp_get_activity_set_from_product(Each);
	}
	_sp_goto_virtualdataset_on_selected_activities(vActVect);
}

function _sp_goto_virtualdataset_on_multiple_product()
{
	var SelectedElements = _InfGetSelectedObjectOnClass("opxSPAS_PT_PRODUCT");
	if(SelectedElements != undefined && SelectedElements instanceOf vector)
	{
		var vActVect = new vector();
		var vProductList= new vector();
		
		for (var vElement in SelectedElements)
		{
			for(var Each in "opxSPAS_PT_PRODUCT".findclass() where Each.name==vElement.name)
				{
					vProductList.push(Each);
				}	
		}
		
		for (var vProduct in vProductList) 
		{	
			vActVect = vActVect+sp_get_activity_set_from_product(vProduct);
		}
		_sp_goto_virtualdataset_on_selected_activities(vActVect);
	}
}


// Functions for access by workpackage

function sp_apply_clinical_filter_on_obs_selection(vOBS)
{
	var vObsClin = opxObsElement.get("R&D - CLIN");
	if(vObsClin==vOBS)
	{
		context.SP_AA_CLINIC_FILTER=true;
	} else {
		context.SP_AA_CLINIC_FILTER=false;
	}
}

function sp_get_activity_set_from_project_and_obs(vProject, vObs)
{
	var vActVect = new vector();
	if(vObs != undefined && vObs instanceOf opxObsElement && vProject != undefined && vProject instanceOf opxProject)
	{
		fromobject(vProject)
		{
			for(var vAct in "OpxActivity" where vAct != undefined && vAct.OBS==vObs)
			{
				vActVect.push(vAct);
			}
		}
	}
	return vActVect;
}

function sp_get_activity_set_from_selected_portfolio_and_obs(vObs)
{
	/*var vProjVect = new vector();
	var PortfolioStr = context._FF_AA_S_LIST_NAME;
	
	if(PortfolioStr != "") {
		var currentPortfolio = "Opx_FF_PT_FAVOR_FILTERS".get(PortfolioStr);
		if(currentPortfolio instanceof Opx_FF_PT_FAVOR_FILTERS) {
			for(var vProject in currentPortfolio where vProject.open && vProject.GetInternalValue("STATE").ToString()=="ACTIVE") {
				vProjVect.push(vProject);
			}
		}
	} else {
		for(var vProject in opxProject where vProject.open && vProject.GetInternalValue("STATE").ToString()=="ACTIVE")
		{
			vProjVect.push(vProject);
		}
	}
	withmonitoring(true) 
	{
		for(var vProject in vProjVect) {
			vActVect = vActVect + sp_get_activity_set_from_project_and_obs(vProject, vObs);
		}
	}*/
	
	var vActVect = new vector();
	var Alloc_Act;
	var result;
	var L1_Act;
	var L1_Act_ONB;
	var L1_Act_Vect = New vector();
	
	withmonitoring(true) 
	{
		// Inverse relations --> Returns Activity, Resources and OBS linked to the OBS
		for (var vObj in vObs.get("OBS_CHILDREN"))
		{
			if (vObj instanceof OpxActivity)
			{
				// Check if the project of the Activity is in the list of project
				if (vObj.PROJECT.SP_NF_B_WKSP_PROJ_FILTER)
				{
					// Add the activity to vector
					vActVect.push(vObj);	

					// Add level 1 activity
					var L1_Act = "OpxActivity".get(vObj.PROJECT.NAME);
					if (L1_Act instanceof OpxActivity)
					{
						L1_Act_Vect.push(L1_Act.ONB);
					}
				}
			}		
			else 
			{
				if (vObj instanceof OpxResource)
				{
					// Get allocations of the resource
					for (var vALLOC in vObj.get("ALLOCATIONS"))
					{
						// Get the activity of the allocation
						Alloc_Act=vALLOC.ACTIVITY;
						
						// Check if the project of the Activity is in the list of project
						if (Alloc_Act.PROJECT.SP_NF_B_WKSP_PROJ_FILTER)
						{
							// Add the activity to vector
							if (Alloc_Act.LEVEL>1)
							{
								vActVect.push(Alloc_Act);
								// Add level 1 activity
								var L1_Act = "OpxActivity".get(Alloc_Act.PROJECT.NAME);
								if (L1_Act instanceof OpxActivity)
								{
									L1_Act_Vect.push(L1_Act.ONB);
								}								
							}
							else
							{
								L1_Act_Vect.push(Alloc_Act.ONB);
							}
						}
					}
				}			
			}
		}
	}
	
	// Store level 1 activities in a context field
	L1_Act_Vect=L1_Act_Vect.removeduplicates();
	context.SP_AA_S_OC_WS_L1_ACT=L1_Act_Vect.join(",");
	
	result = vActVect.removeduplicates();
	
	return result;
}

function _sp_goto_virtualdataset_on_selected_obs()
{
	var vOBS = this.object;
	
	//reset of obs to display for the lock hiding activities in workspaces.
	context.SP_AA_S_CTX_OBS_LIST="";
	
	sp_apply_clinical_filter_on_obs_selection(vOBS);
	var v_virtualdataset_objects = sp_get_activity_set_from_selected_portfolio_and_obs(vOBS);
 	//listing all department concerned to add BVA summary data
	for (var o_res_dept in "opxResource" where o_res_dept.LEVEL==3 && o_res_dept.callBooleanFormula("BELONGS(\"RESPONSIBILITY\",\""+vOBS.printattribute()+"\")"))
	{
		//adding BVA summary data to the vector of element for the virtualdataset
		for (var o_BVA_SUM in o_res_dept.get("r.SP_RA_S_BVA_SUM_DEPT.SP_PT_BVA_SUMMARY"))
		{
			if (o_BVA_SUM.FILE.STATE=="Active")
			{
				v_virtualdataset_objects.push(o_BVA_SUM);
			}
		}
	} 
	
	_sp_goto_virtualdataset_on_selected_activities_workspace(v_virtualdataset_objects);
	//setting the obs to display for the lock hiding activities.
	context.SP_AA_S_CTX_OBS_LIST=vOBS.printattribute();
}

function _sp_goto_virtualdataset_on_multiple_obs()
{
	//reset of obs to display
	context.SP_AA_S_CTX_OBS_LIST="";
	var SelectedElements = _InfGetSelectedObjectOnClass("opxRESPONSIBILITY");
	if(SelectedElements != undefined && SelectedElements instanceOf vector)
	{
		//list of OBS concerned
		var v_obsid = "";
		//List of object to include in the virtualdataset
		var v_virtualdataset_objects = new vector();

		for (var o_obs_element in SelectedElements)
		{
			//listing all department concerned to add BVA summary data
			for (var o_res_dept in "opxResource" where o_res_dept.LEVEL==3 && o_res_dept.callBooleanFormula("BELONGS(\"RESPONSIBILITY\",\""+o_obs_element.printattribute()+"\")"))
			{
				//adding BVA summary data to the vector of element for the virtualdataset
				for (var o_BVA_SUM in o_res_dept.get("r.SP_RA_S_BVA_SUM_DEPT.SP_PT_BVA_SUMMARY"))
				{
					if (o_BVA_SUM.FILE.STATE=="Active")
					{
						v_virtualdataset_objects.push(o_BVA_SUM);
					}
				}
			}
			//adding activities to the vector of element for the virtualdataset
			v_virtualdataset_objects = v_virtualdataset_objects+sp_get_activity_set_from_selected_portfolio_and_obs(o_obs_element);
			if (v_obsid!="")
			{
				v_obsid=v_obsid+",";
			}
			v_obsid=v_obsid+o_obs_element.printattribute();
		}
		
		_sp_goto_virtualdataset_on_selected_activities_workspace(v_virtualdataset_objects);
		// alert(v_virtualdataset_objects);
		//setting the obs to display for the lock hiding activities.
		context.SP_AA_S_CTX_OBS_LIST=v_obsid;
	}
}

// Function call in toolbar to open level 1 activities in workspaces
function sp_ws_get_level_1_act()
{
	// Count the number of selected items
	var count=0;
	
	for ( var selected in new symbol("SELECTION-ATOM", "TOOL-BAR"))
	{
		count++;
	}
	
	// No item selected --> Display form with list of level 1 activities selectable
	if (count==0)
	{
		var link = new HyperLink("Fvalue",   
						"Attribute","id",   
						"EditorType","SP_RP_WORKSPACE_L1_ACT", 
						"PopUp",true);
		link.go();
	}
	else if (count==1)
	{	
		for ( var selected in new symbol("SELECTION-ATOM", "TOOL-BAR"))
		{
			var L1_Act = "OpxActivity".get(selected.PROJECT.NAME);
			if (L1_Act instanceof OpxActivity)
			{
				var linkVd = new HyperLink("Fvalue",   
							"Attribute","id",   
							"EditorType","SP_X_GEN_FORM_CREA_WBS_ELEMENT", 
							"PopUp",true);
			
				linkVd.go(L1_Act); 
			}
			break;
		}
	}
	// More than one item selected --> Error message
	else
	{
		alert("You must select only one item.");
	}
}

// Function to check if current page object is a vitualdataset of type Workspace
function sp_js_is_a_virtualdataset(NoArg)
{
	var VirtualDataset=currentpageobject();
	if (VirtualDataset instanceof OpxVirtualDataset && VirtualDataset.comment=="WorkSpace")
		return true;
	else 
		return false
}
sp_js_is_a_virtualdataset.exportfunction({"STRING"},"BOOLEAN");

//	NAME	: SP_JS_OPEN_DATASET
//	AUTHOR  : flecanut
//  PURPOSE : COMPASS v6 , workpackage opening
//  
//  HISTORY :
var revision_number ="1.3";
//  Revision 1.3  2018/05/04
//  ITS-INC0451170 - Modification of function sp_get_activity_set_from_selected_portfolio_and_obs
//				   - Creation of functions sp_ws_get_level_1_act, sp_js_is_a_virtualdataset and _sp_goto_virtualdataset_on_selected_activities_workspace
//				   - Modification of function _sp_goto_virtualdataset_on_multiple_obs and _sp_goto_virtualdataset_on_selected_obs to call _sp_goto_virtualdataset_on_selected_activities_workspace
//
//	Revision 1.2  2017/11/02 bcordel
//	Modifying function _sp_goto_virtualdataset_on_multiple_obs to not have data of version
//
//	Revision 1.1  2017/10/20 bcordel
//	Modifying function to hide activities and add BVA summary data to entries
//
//	Revision 1.0  flecanut
//	creation
//

// Function used in access by change, by product of by workpackage to construct virtualdataset and go to it
function _sp_goto_virtualdataset_on_selected_activities(vActVect)
{
	if(vActVect!= undefined && vActVect instanceOf vector)
	{
		if(vActVect.length>0)
		{
			var vDataSet= new OpxVirtualDataset();
			vDataSet.selectedActivities = vActVect;

			if(vDataSet instanceOf OpxVirtualDataset)
			{
				var CurrentModuleId = GetCurrentModule("");
				var openingfunction = "Opx_GUI_PT_MODULES".get(CurrentModuleId)._GUI_AA_S_OPEN_FUNCTION;
				"_GuiAddOrOpenClass".call(vDataSet, Openingfunction, false);
				vDataSet._inf_open_project();
			}
		} else {
			alert("No data to display, please change your selection criteria");
		}
	}
}


// Function used in access of workspaces (creation of specific function to identify VirtualDatasets of type "Workspaces")
function _sp_goto_virtualdataset_on_selected_activities_workspace(vActVect)
{
	if(vActVect!= undefined && vActVect instanceOf vector)
	{
		if(vActVect.length>0)
		{
			var vDataSet= new OpxVirtualDataset();
			vDataSet.selectedActivities = vActVect;
			// We set a comment on tha dataset to identify Workspace (allow to display specific features on "Workspaces")
			vDataSet.comment="WorkSpace";

			if(vDataSet instanceOf OpxVirtualDataset)
			{
				var CurrentModuleId = GetCurrentModule("");
				var openingfunction = "Opx_GUI_PT_MODULES".get(CurrentModuleId)._GUI_AA_S_OPEN_FUNCTION;
				"_GuiAddOrOpenClass".call(vDataSet, Openingfunction, false);
				vDataSet._inf_open_project();
			}
		} else {
			alert("No data to display, please change your selection criteria");
		}
	}
}

// Access by change

// Function used by named formulae 'SP_NF_B_CHANGE_IS_IN_PORTFOLIO' to identify if change is in current portfolio
function sp_change_is_in_selected_portfolio(String)
{
	var vReturn = false;
	var vChange = this;
	var PortfolioStr = context._FF_AA_S_LIST_NAME;
	var vPrjVect = new vector();
	
	if(PortfolioStr == ""){
		return true;
	} else {
		var currentPortfolio = "Opx_FF_PT_FAVOR_FILTERS".get(PortfolioStr);
		if(currentPortfolio instanceof Opx_FF_PT_FAVOR_FILTERS)
		{
			for(var project in currentPortfolio)
			{
				vPrjVect.push(project);
			}
		}
	}
	
	if(vChange != undefined && vChange instanceOf opxSP_PT_RAVL_CHANGE && vPrjVect.length!=0)
	{
		for(var vWS in vChange.get("r.SP_RA_RAVL_WSH_CHANGE.SP_PT_RAVL_WORKSHARING"))
		{
			for(var vAct in vWS.get("r.SP_RA_RAVL_WORKSHARING.WORK-STRUCTURE"))
			{
				if(vAct != undefined && vPrjVect.isinlist(vAct.project))
				{
					return true;
				}
			}
		}
	}
	
	return vReturn;
}
sp_change_is_in_selected_portfolio.exportfunction({"STRING"},"BOOLEAN","Check if current change (this) is in selected portfolio");

function sp_get_activity_set_from_change(vChange)
{
	var vActVect = new vector();
	if(vChange != undefined && vChange instanceOf opxSP_PT_RAVL_CHANGE)
	{
		for(var vWS in vChange.get("r.SP_RA_RAVL_WSH_CHANGE.SP_PT_RAVL_WORKSHARING"))
		{
		   for(var vAct in vWS.get("r.SP_RA_RAVL_WORKSHARING.WORK-STRUCTURE"))
		   {
			  if(vAct != undefined)
			  {
				vActVect.push(vAct);
			  }
		   }
		}
	}
	return vActVect;
}

function _sp_goto_virtualdataset_on_selected_change()
{
	var vChange = this.object;
	var vActVect = sp_get_activity_set_from_change(vChange);
	_sp_goto_virtualdataset_on_selected_activities(vActVect);
}

function _sp_goto_virtualdataset_on_multiple_changes()
{
	var SelectedElements = _InfGetSelectedObjectOnClass("opxSP_PT_RAVL_CHANGE");
	if(SelectedElements != undefined && SelectedElements instanceOf vector)
	{
		var vActVect = new vector();
		for (var vElement in SelectedElements)
		{
			vActVect = vActVect+sp_get_activity_set_from_change(vElement);
		}
		_sp_goto_virtualdataset_on_selected_activities(vActVect);
	}
}

// Access by product

// Function used by named formulae 'SP_NF_B_PRODUCT_IS_IN_PORTFOLIO' to identify if change is in current portfolio
function sp_product_is_in_selected_portfolio(String)
{
	var vReturn = false;
	var vProduct = this;
	var PortfolioStr = context._FF_AA_S_LIST_NAME;
	var vPrjVect = new vector();
	
	if(PortfolioStr == ""){
		return true;
	} else {
		var currentPortfolio = "Opx_FF_PT_FAVOR_FILTERS".get(PortfolioStr);
		if(currentPortfolio instanceof Opx_FF_PT_FAVOR_FILTERS)
		{
			for(var project in currentPortfolio)
			{
				vPrjVect.push(project);
			}
		}
	}
	
	if(vProduct != undefined && vProduct instanceOf opxSPAS_PT_PRODUCT && vPrjVect.length!=0)
	{
		for(var vVariation in vProduct.get("r.SP_RA_RAVL_PRODUCT.SP_PT_RAVL") where vVariation.SP_RA_RAVL_WORKSHARING1 != undefined && vVariation.SP_RA_RAVL_WORKSHARING1 instanceOf opxSP_PT_RAVL_WORKSHARING)
		{
			for(var vWS in vVariation.SP_RA_RAVL_WORKSHARING1.get("r.SP_RA_RAVL_WORKSHARING.WORK-STRUCTURE"))
			{
				if(vWS != undefined)
				{
					return true;
				}
			}
		}
	}
	
	return vReturn;
}
sp_product_is_in_selected_portfolio.exportfunction({"STRING"},"BOOLEAN","Check if current product (this) is in selected portfolio");


function sp_get_activity_set_from_product(vProduct)
{
	var vActVect = new vector();
	if(vProduct != undefined && vProduct instanceOf opxSPAS_PT_PRODUCT)
	{
		for(var vVariation in vProduct.get("r.SP_RA_RAVL_PRODUCT.SP_PT_RAVL") where vVariation.SP_RA_RAVL_WORKSHARING1 != undefined && vVariation.SP_RA_RAVL_WORKSHARING1 instanceOf opxSP_PT_RAVL_WORKSHARING)
		{
			for(var vWS in vVariation.SP_RA_RAVL_WORKSHARING1.get("r.SP_RA_RAVL_WORKSHARING.WORK-STRUCTURE"))
			{
				if(vWS != undefined)
				{
					vActVect.push(vWS);
				}
			}
		}
	}
	return vActVect;
}

function _sp_goto_virtualdataset_on_selected_product()
{
	var vProduct = this.object;
	var vActVect = new vector();
	
	for(var Each in "opxSPAS_PT_PRODUCT".findclass() where Each.name==vProduct.name)
	{
        vActVect = vActVect+sp_get_activity_set_from_product(Each);
	}
	_sp_goto_virtualdataset_on_selected_activities(vActVect);
}

function _sp_goto_virtualdataset_on_multiple_product()
{
	var SelectedElements = _InfGetSelectedObjectOnClass("opxSPAS_PT_PRODUCT");
	if(SelectedElements != undefined && SelectedElements instanceOf vector)
	{
		var vActVect = new vector();
		var vProductList= new vector();
		
		for (var vElement in SelectedElements)
		{
			for(var Each in "opxSPAS_PT_PRODUCT".findclass() where Each.name==vElement.name)
				{
					vProductList.push(Each);
				}	
		}
		
		for (var vProduct in vProductList) 
		{	
			vActVect = vActVect+sp_get_activity_set_from_product(vProduct);
		}
		_sp_goto_virtualdataset_on_selected_activities(vActVect);
	}
}


// Functions for access by workpackage

function sp_apply_clinical_filter_on_obs_selection(vOBS)
{
	var vObsClin = opxObsElement.get("R&D - CLIN");
	if(vObsClin==vOBS)
	{
		context.SP_AA_CLINIC_FILTER=true;
	} else {
		context.SP_AA_CLINIC_FILTER=false;
	}
}

function sp_get_activity_set_from_project_and_obs(vProject, vObs)
{
	var vActVect = new vector();
	if(vObs != undefined && vObs instanceOf opxObsElement && vProject != undefined && vProject instanceOf opxProject)
	{
		fromobject(vProject)
		{
			for(var vAct in "OpxActivity" where vAct != undefined && vAct.OBS==vObs)
			{
				vActVect.push(vAct);
			}
		}
	}
	return vActVect;
}

function sp_get_activity_set_from_selected_portfolio_and_obs(vObs)
{
	/*var vProjVect = new vector();
	var PortfolioStr = context._FF_AA_S_LIST_NAME;
	
	if(PortfolioStr != "") {
		var currentPortfolio = "Opx_FF_PT_FAVOR_FILTERS".get(PortfolioStr);
		if(currentPortfolio instanceof Opx_FF_PT_FAVOR_FILTERS) {
			for(var vProject in currentPortfolio where vProject.open && vProject.GetInternalValue("STATE").ToString()=="ACTIVE") {
				vProjVect.push(vProject);
			}
		}
	} else {
		for(var vProject in opxProject where vProject.open && vProject.GetInternalValue("STATE").ToString()=="ACTIVE")
		{
			vProjVect.push(vProject);
		}
	}
	withmonitoring(true) 
	{
		for(var vProject in vProjVect) {
			vActVect = vActVect + sp_get_activity_set_from_project_and_obs(vProject, vObs);
		}
	}*/
	
	var vActVect = new vector();
	var Alloc_Act;
	var result;
	var L1_Act;
	var L1_Act_ONB;
	var L1_Act_Vect = New vector();
	
	withmonitoring(true) 
	{
		// Inverse relations --> Returns Activity, Resources and OBS linked to the OBS
		for (var vObj in vObs.get("OBS_CHILDREN"))
		{
			if (vObj instanceof OpxActivity)
			{
				// Check if the project of the Activity is in the list of project
				if (vObj.PROJECT.SP_NF_B_WKSP_PROJ_FILTER)
				{
					// Add the activity to vector
					vActVect.push(vObj);	

					// Add level 1 activity
					var L1_Act = "OpxActivity".get(vObj.PROJECT.NAME);
					if (L1_Act instanceof OpxActivity)
					{
						L1_Act_Vect.push(L1_Act.ONB);
					}
				}
			}		
			else 
			{
				if (vObj instanceof OpxResource)
				{
					// Get allocations of the resource
					for (var vALLOC in vObj.get("ALLOCATIONS"))
					{
						// Get the activity of the allocation
						Alloc_Act=vALLOC.ACTIVITY;
						
						// Check if the project of the Activity is in the list of project
						if (Alloc_Act.PROJECT.SP_NF_B_WKSP_PROJ_FILTER)
						{
							// Add the activity to vector
							if (Alloc_Act.LEVEL>1)
							{
								vActVect.push(Alloc_Act);
								// Add level 1 activity
								var L1_Act = "OpxActivity".get(Alloc_Act.PROJECT.NAME);
								if (L1_Act instanceof OpxActivity)
								{
									L1_Act_Vect.push(L1_Act.ONB);
								}								
							}
							else
							{
								L1_Act_Vect.push(Alloc_Act.ONB);
							}
						}
					}
				}			
			}
		}
	}
	
	// Store level 1 activities in a context field
	L1_Act_Vect=L1_Act_Vect.removeduplicates();
	context.SP_AA_S_OC_WS_L1_ACT=L1_Act_Vect.join(",");
	
	result = vActVect.removeduplicates();
	
	return result;
}

function _sp_goto_virtualdataset_on_selected_obs()
{
	var vOBS = this.object;
	
	//reset of obs to display for the lock hiding activities in workspaces.
	context.SP_AA_S_CTX_OBS_LIST="";
	
	sp_apply_clinical_filter_on_obs_selection(vOBS);
	var v_virtualdataset_objects = sp_get_activity_set_from_selected_portfolio_and_obs(vOBS);
 	//listing all department concerned to add BVA summary data
	for (var o_res_dept in "opxResource" where o_res_dept.LEVEL==3 && o_res_dept.callBooleanFormula("BELONGS(\"RESPONSIBILITY\",\""+vOBS.printattribute()+"\")"))
	{
		//adding BVA summary data to the vector of element for the virtualdataset
		for (var o_BVA_SUM in o_res_dept.get("r.SP_RA_S_BVA_SUM_DEPT.SP_PT_BVA_SUMMARY"))
		{
			if (o_BVA_SUM.FILE.STATE=="Active")
			{
				v_virtualdataset_objects.push(o_BVA_SUM);
			}
		}
	} 
	
	_sp_goto_virtualdataset_on_selected_activities_workspace(v_virtualdataset_objects);
	//setting the obs to display for the lock hiding activities.
	context.SP_AA_S_CTX_OBS_LIST=vOBS.printattribute();
}

function _sp_goto_virtualdataset_on_multiple_obs()
{
	//reset of obs to display
	context.SP_AA_S_CTX_OBS_LIST="";
	var SelectedElements = _InfGetSelectedObjectOnClass("opxRESPONSIBILITY");
	if(SelectedElements != undefined && SelectedElements instanceOf vector)
	{
		//list of OBS concerned
		var v_obsid = "";
		//List of object to include in the virtualdataset
		var v_virtualdataset_objects = new vector();

		for (var o_obs_element in SelectedElements)
		{
			//listing all department concerned to add BVA summary data
			for (var o_res_dept in "opxResource" where o_res_dept.LEVEL==3 && o_res_dept.callBooleanFormula("BELONGS(\"RESPONSIBILITY\",\""+o_obs_element.printattribute()+"\")"))
			{
				//adding BVA summary data to the vector of element for the virtualdataset
				for (var o_BVA_SUM in o_res_dept.get("r.SP_RA_S_BVA_SUM_DEPT.SP_PT_BVA_SUMMARY"))
				{
					if (o_BVA_SUM.FILE.STATE=="Active")
					{
						v_virtualdataset_objects.push(o_BVA_SUM);
					}
				}
			}
			//adding activities to the vector of element for the virtualdataset
			v_virtualdataset_objects = v_virtualdataset_objects+sp_get_activity_set_from_selected_portfolio_and_obs(o_obs_element);
			if (v_obsid!="")
			{
				v_obsid=v_obsid+",";
			}
			v_obsid=v_obsid+o_obs_element.printattribute();
		}
		
		_sp_goto_virtualdataset_on_selected_activities_workspace(v_virtualdataset_objects);
		// alert(v_virtualdataset_objects);
		//setting the obs to display for the lock hiding activities.
		context.SP_AA_S_CTX_OBS_LIST=v_obsid;
	}
}

// Function call in toolbar to open level 1 activities in workspaces
function sp_ws_get_level_1_act()
{
	// Count the number of selected items
	var count=0;
	
	for ( var selected in new symbol("SELECTION-ATOM", "TOOL-BAR"))
	{
		count++;
	}
	
	// No item selected --> Display form with list of level 1 activities selectable
	if (count==0)
	{
		var link = new HyperLink("Fvalue",   
						"Attribute","id",   
						"EditorType","SP_RP_WORKSPACE_L1_ACT", 
						"PopUp",true);
		link.go();
	}
	else if (count==1)
	{	
		for ( var selected in new symbol("SELECTION-ATOM", "TOOL-BAR"))
		{
			var L1_Act = "OpxActivity".get(selected.PROJECT.NAME);
			if (L1_Act instanceof OpxActivity)
			{
				var linkVd = new HyperLink("Fvalue",   
							"Attribute","id",   
							"EditorType","SP_X_GEN_FORM_CREA_WBS_ELEMENT", 
							"PopUp",true);
			
				linkVd.go(L1_Act); 
			}
			break;
		}
	}
	// More than one item selected --> Error message
	else
	{
		alert("You must select only one item.");
	}
}

// Function to check if current page object is a vitualdataset of type Workspace
function sp_js_is_a_virtualdataset(NoArg)
{
	var VirtualDataset=currentpageobject();
	if (VirtualDataset instanceof OpxVirtualDataset && VirtualDataset.comment=="WorkSpace")
		return true;
	else 
		return false
}
sp_js_is_a_virtualdataset.exportfunction({"STRING"},"BOOLEAN");

 
function _tc_GenerateActionManagementMenu(first) {
  var writeAccess = (_tc_user_has_write_rigth("useless"))? true : false;
  var Bold_Font = _ihm_GetFont(8,true);
  var user = context.applet.user.name.tolowercase();
  var current_tc=context._tc_da_current_tc;
  if (current_tc instanceof OpxTimeCard) {
    var resource = current_tc.resource;
    var state = current_tc.getinternalvalue("STATUS");
    var StateString=state.tostring();
    var  ViewAllResource = context._TC_AA_B_ACCES_TO_ALL_RESOURCE;
    if(this InstanceOf javamenu && resource.internal==false) {
      first = false;
      if (context._tc_da_next_states == undefined) {
        context._tc_da_next_states = new vector();
      }
      else {
        context._tc_da_next_states.clear();
      }
      for (var each in context.getNextStates (state,resource.printattribute(),user,ViewAllResource).pop()) {
        context._tc_da_next_states.push(each.tostring());
      }
      this.appendmenuitem("","");
      var RootMenu = this;
      if (context._tc_da_next_states == undefined || context._tc_da_next_states == false || context._tc_da_next_states.position(false) instanceof Number || context._tc_da_next_states.position("false") instanceof Number || context._tc_da_next_states.length == 0) {
        context._TC_AA_B_SLOT_LOCKER = true;
        if (StateString == "I") {
          return first;
        }
        if (StateString == "V") {
          return first;
        }
      }
      if (context._tc_da_next_states.position("H") instanceof Number) {
        //Added to fit kernel specs => If user is only controller => No read access
        if (context.getinternalvalue("_TC_AA_B_ALLOW_CONTROL")==false && (_tc_check_access_rights(Resource) || ((Resource._tc_UserControllerButNotmanager(context.applet.user))))) {
          context._TC_AA_B_SLOT_LOCKER = true;
        }
        else {
          if(writeAccess){
            context._TC_AA_B_SLOT_LOCKER = false;
            var SentItem = rootmenu.appendmenuitem(write_text_key("timeCard.Broadcast"),"_tc_sent_menu()");
            SentItem.font = Bold_Font;
          }else{
			 context._TC_AA_B_SLOT_LOCKER = true; 
		  }
        }
        return first;
      }
      if (context._tc_da_next_states.position("N") instanceof Number) {
        context._TC_AA_B_SLOT_LOCKER = true;
        var ModifyItem = rootmenu.appendmenuitem(write_text_key("timeCard.Modify"),"_tc_modify_menu()");
        ModifyItem.font = Bold_Font;
        return first;
      }
      if (context._tc_da_next_states.position("V") instanceof Number && context._tc_da_next_states.position("R") instanceof Number) {
        context._TC_AA_B_SLOT_LOCKER = true;
        var ValidateItem = rootmenu.appendmenuitem(write_text_key("timeCard.Validate"),"_tc_validate_sheet()");
        ValidateItem.font = Bold_Font;
        return first;
      }
      if (context._tc_da_next_states.position("V") instanceof Number) {
        if (_tc_check_access_rights(Resource)) {
          context._TC_AA_B_SLOT_LOCKER = true;
        }
        else {
           if(writeAccess){
             context._TC_AA_B_SLOT_LOCKER = false;
             var ValidateItem = rootmenu.appendmenuitem(write_text_key("timeCard.Validate"),"_tc_validate_sheet()");
             ValidateItem.font = Bold_Font;
           }
		   else{
			  context._TC_AA_B_SLOT_LOCKER = true; 
		   }
        }
        return first;
      }
      if (context._tc_da_next_states.position("R") instanceof Number) {
        context._TC_AA_B_DISPLAY_REJECT_BUTTON = false;
        if (StateString == "V") {
          context._TC_AA_B_SLOT_LOCKER = true;
          var RejectItem = rootmenu.appendmenuitem(write_text_key("timeCard.Reject"),"_tc_reject_sheet();");
          RejectItem.font = Bold_Font;
          return first;
        }
        if (StateString == "I") {
          if(_tc_isTCEnableRejectionOnIntegratedTC(current_tc)) {
            context._TC_AA_B_SLOT_LOCKER = true;
            var RejectItem = rootmenu.appendmenuitem(write_text_key("timeCard.Reject"),"_tc_reject_sheet()");
            RejectItem.font = Bold_Font;
            return first;
          }
        }
        context._TC_AA_B_SLOT_LOCKER = true;
        return first;
      }
    }
  }
  return true;
}

function _tc_user_has_write_rigth(ignore) {
  var tc=context._tc_da_current_tc;
  if (context._TC_DA_S_ENABLE_TIME_CARD_MODIFICATION == "ENABLE-MODIFY-AFTER-DATE") {
    if (tc.startdate.sdate < context.getinternalvalue("TIME-CARD-MODIFICATION-DATE")) {
      return false;
    }
  }
  if (context._TC_DA_S_ENABLE_TIME_CARD_MODIFICATION == "NEVER-ENABLE-MODIFY") {
    return false;
  }
  return true;
}
_tc_user_has_write_rigth.exportfunction({"string"},"boolean");
function _tc_GenerateActionManagementMenu(first) {
  var writeAccess = (_tc_user_has_write_rigth("useless"))? true : false;
  var Bold_Font = _ihm_GetFont(8,true);
  var user = context.applet.user.name.tolowercase();
  var current_tc=context._tc_da_current_tc;
  if (current_tc instanceof OpxTimeCard) {
    var resource = current_tc.resource;
    var state = current_tc.getinternalvalue("STATUS");
    var StateString=state.tostring();
    var  ViewAllResource = context._TC_AA_B_ACCES_TO_ALL_RESOURCE;
    if(this InstanceOf javamenu && resource.internal==false) {
      first = false;
      if (context._tc_da_next_states == undefined) {
        context._tc_da_next_states = new vector();
      }
      else {
        context._tc_da_next_states.clear();
      }
      for (var each in context.getNextStates (state,resource.printattribute(),user,ViewAllResource).pop()) {
        context._tc_da_next_states.push(each.tostring());
      }
      this.appendmenuitem("","");
      var RootMenu = this;
      if (context._tc_da_next_states == undefined || context._tc_da_next_states == false || context._tc_da_next_states.position(false) instanceof Number || context._tc_da_next_states.position("false") instanceof Number || context._tc_da_next_states.length == 0) {
        context._TC_AA_B_SLOT_LOCKER = true;
        if (StateString == "I") {
          return first;
        }
        if (StateString == "V") {
          return first;
        }
      }
      if (context._tc_da_next_states.position("H") instanceof Number) {
        //Added to fit kernel specs => If user is only controller => No read access
        if (context.getinternalvalue("_TC_AA_B_ALLOW_CONTROL")==false && (_tc_check_access_rights(Resource) || ((Resource._tc_UserControllerButNotmanager(context.applet.user))))) {
          context._TC_AA_B_SLOT_LOCKER = true;
        }
        else {
          if(writeAccess){
            context._TC_AA_B_SLOT_LOCKER = false;
            var SentItem = rootmenu.appendmenuitem(write_text_key("timeCard.Broadcast"),"_tc_sent_menu()");
            SentItem.font = Bold_Font;
          }else{
			 context._TC_AA_B_SLOT_LOCKER = true; 
		  }
        }
        return first;
      }
      if (context._tc_da_next_states.position("N") instanceof Number) {
        context._TC_AA_B_SLOT_LOCKER = true;
        var ModifyItem = rootmenu.appendmenuitem(write_text_key("timeCard.Modify"),"_tc_modify_menu()");
        ModifyItem.font = Bold_Font;
        return first;
      }
      if (context._tc_da_next_states.position("V") instanceof Number && context._tc_da_next_states.position("R") instanceof Number) {
        context._TC_AA_B_SLOT_LOCKER = true;
        var ValidateItem = rootmenu.appendmenuitem(write_text_key("timeCard.Validate"),"_tc_validate_sheet()");
        ValidateItem.font = Bold_Font;
        return first;
      }
      if (context._tc_da_next_states.position("V") instanceof Number) {
        if (_tc_check_access_rights(Resource)) {
          context._TC_AA_B_SLOT_LOCKER = true;
        }
        else {
           if(writeAccess){
             context._TC_AA_B_SLOT_LOCKER = false;
             var ValidateItem = rootmenu.appendmenuitem(write_text_key("timeCard.Validate"),"_tc_validate_sheet()");
             ValidateItem.font = Bold_Font;
           }
		   else{
			  context._TC_AA_B_SLOT_LOCKER = true; 
		   }
        }
        return first;
      }
      if (context._tc_da_next_states.position("R") instanceof Number) {
        context._TC_AA_B_DISPLAY_REJECT_BUTTON = false;
        if (StateString == "V") {
          context._TC_AA_B_SLOT_LOCKER = true;
          var RejectItem = rootmenu.appendmenuitem(write_text_key("timeCard.Reject"),"_tc_reject_sheet();");
          RejectItem.font = Bold_Font;
          return first;
        }
        if (StateString == "I") {
          if(_tc_isTCEnableRejectionOnIntegratedTC(current_tc)) {
            context._TC_AA_B_SLOT_LOCKER = true;
            var RejectItem = rootmenu.appendmenuitem(write_text_key("timeCard.Reject"),"_tc_reject_sheet()");
            RejectItem.font = Bold_Font;
            return first;
          }
        }
        context._TC_AA_B_SLOT_LOCKER = true;
        return first;
      }
    }
  }
  return true;
}

function _tc_user_has_write_rigth(ignore) {
  var tc=context._tc_da_current_tc;
  if (context._TC_DA_S_ENABLE_TIME_CARD_MODIFICATION == "ENABLE-MODIFY-AFTER-DATE") {
    if (tc.startdate.sdate < context.getinternalvalue("TIME-CARD-MODIFICATION-DATE")) {
      return false;
    }
  }
  if (context._TC_DA_S_ENABLE_TIME_CARD_MODIFICATION == "NEVER-ENABLE-MODIFY") {
    return false;
  }
  return true;
}
_tc_user_has_write_rigth.exportfunction({"string"},"boolean");
 
//  FILE    : SP_JS_PM_ATTR_PROPAGATION.ojs
// 
//  AUTHOR  : MPA
// 
//  VERSION : 1.0
// 
//  HISTORY :
var revision_number ="1.0";

//Function to Propagate RA activity type values to child tasks
function sp_ra_act_type_propagate_to_tasks()
{
	var act = this;
	if (act != undefined && act != "" && act Instanceof OpxActivity)
		fromobject(act)
			withoutlocking
				for (var each In OpxActivity)
					each.SP_AA_RA_ACT_TYPE = act.SP_AA_RA_ACT_TYPE;
}
withoutlocking {
	sp_ra_act_type_propagate_to_tasks.exportfunction();
}


// Function to Propagate Publishing Required ? values to child tasks
function sp_publishing_req_propagate_to_tasks()
{
	var act = this;
	if (act !=undefined && act!="" && act Instanceof OpxActivity)
		fromobject(act)
			withoutlocking
				for (var each In OpxActivity)
					each.SP_AA_N_PUB_REQ= act.SP_AA_N_PUB_REQ;
}

withoutlocking {
	sp_publishing_req_propagate_to_tasks.exportfunction();
}


// Function to propagate (roll down) CPP Project from the WBS to children
function mod_cpp_project(oV, nV)
{
	if (this.get("?WBS_ELEMENT"))
		fromObject(this)
			for (var a in OpxActivity where a.LEVEL == this.LEVEL + 1)
				a.SP_AA_CPP_PROJECT = nV;
}

var slot="OpxActivity".findClass().getSlot("SP_AA_CPP_PROJECT");           // "CPP Project"
slot.modifybeforeMethod = mod_cpp_project;

writetolog("Script SP_JS_PM_ATTR_PROPAGATION loaded with version ~a ", revision_number); 

//  FILE    : SP_JS_PM_ATTR_PROPAGATION.ojs
// 
//  AUTHOR  : MPA
// 
//  VERSION : 1.0
// 
//  HISTORY :
var revision_number ="1.0";

//Function to Propagate RA activity type values to child tasks
function sp_ra_act_type_propagate_to_tasks()
{
	var act = this;
	if (act != undefined && act != "" && act Instanceof OpxActivity)
		fromobject(act)
			withoutlocking
				for (var each In OpxActivity)
					each.SP_AA_RA_ACT_TYPE = act.SP_AA_RA_ACT_TYPE;
}
withoutlocking {
	sp_ra_act_type_propagate_to_tasks.exportfunction();
}


// Function to Propagate Publishing Required ? values to child tasks
function sp_publishing_req_propagate_to_tasks()
{
	var act = this;
	if (act !=undefined && act!="" && act Instanceof OpxActivity)
		fromobject(act)
			withoutlocking
				for (var each In OpxActivity)
					each.SP_AA_N_PUB_REQ= act.SP_AA_N_PUB_REQ;
}

withoutlocking {
	sp_publishing_req_propagate_to_tasks.exportfunction();
}


// Function to propagate (roll down) CPP Project from the WBS to children
function mod_cpp_project(oV, nV)
{
	if (this.get("?WBS_ELEMENT"))
		fromObject(this)
			for (var a in OpxActivity where a.LEVEL == this.LEVEL + 1)
				a.SP_AA_CPP_PROJECT = nV;
}

var slot="OpxActivity".findClass().getSlot("SP_AA_CPP_PROJECT");           // "CPP Project"
slot.modifybeforeMethod = mod_cpp_project;

writetolog("Script SP_JS_PM_ATTR_PROPAGATION loaded with version ~a ", revision_number); 

 
//	NAME	: SP_JS_PM_FUNCTIONS
//	AUTHOR  : bcordel
//  VERSION : 1.0
//  PURPOSE : COMPASS v6 , Functions for PM module
//  
//  HISTORY :
var revision_number ="1.14";
//
//  Revision 1.14 2020/08/04 12:24 KSH 
//	Modification of sp_pjt_modifybefore_state to generate the next sequence project code
//
//  Revision 1.13 2020/01/13 19:20 ssk 
//	Modification of sp_display_monthly_gauge_properties
//
//  Revision 1.12 2019/11/15 14:00 mbl 
//	Creation of sp_pjt_modifybefore_state 
//
//  Revision 1.11 2019/08/07 14:36 bcordel 
//	modifying function to copy baseline into version to run the copy in background process and avoid timeout.
//
//  Revision 1.10 2019/06/06 14:36 MBL Creation of sp_ojs_copy_ref_in_version_pop_up used in baseline copy pop-up

//	Revision 1.9 2018/06/29 bcordel
//	. adding function sp_js_is_linkedto_act_obs_WVRA
//
//	Revision 1.8 2017/11/09 bcordel
//	. Modification of function sp_display_monthly_gauge_properties to take into account the new gauge
//
//	Revision 1.7 2017/10/11 lfavre
//	. Modification of function sp_reference_exists to avoid Global map on Reference table
//	. Creation of function sp_reference_creation_date
//
//  Revision 1.6 2017/10/04 bcordel
//   . creation of functions sp_reference_exists
//  
//  Revision 1.5 2017/09/01 flecanut & bcordel
//   . creation of functions sp_calculate_monthly_gauge_properties, sp_display_monthly_gauge_properties, sp_display_monthly_gauge for Monthly Report Gauge display
//  
//  Revision 1.4 2017/06/1 bcordel
//   . creation sp_js_port_move_to_display.
//  
//  Revision 1.3 2017/02/23 mpaganon
//   . import "APAO Project list" dynamic attribute from P5 (sp_js_prj_apao.ojs)
//   . create days_to_month_and_week()
//  
//  Revision 1.2 2016/12/14 mpaganon
//   . modifying char_forbidden to allow blank spaces
//   
//  Revision 1.1  2016/12/14 mpaganon
//   . optimizing char_forbidden()
//   . add check_right_constraints_for_another_function()
//  Revision 1.0  2016/11/15 bcordel
//  creation of the macro-script grouping functions linked to PM module. 


//
// Stream S1-PFP, URS_1.1.Ga: Need to better highlight the links between different "functions"
//
// The requirement is to superpose an arrow on an activity icon when this activity has at least,
// a successor link to another activity with a diff rent OBS (function = OBS_3)
// The following function returns true if this is the case, false otherwise
// It is used by the symbolic field: SP_SF_LINK_TO_OTHER_OBS
function check_right_constraints_for_another_function()
{
	if (this instanceOf OpxActivity)
		for (var obj in this.rightConstraints)
			if (obj.right.obs.index != this.obs.index)
				return true;
	return false;
}
check_right_constraints_for_another_function.exportfunction("","BOOLEAN");

		
//////////////////////////
//// Compass V6 : administration stream
//// Function to check project name for unwanted characters
/////////////////////////

// This dynamic attribute is only used to check write access to ADM (Compass P5 import)

function sp_apao_prj_list_reader()
{
	return this.SP_AA_S_PRJ_APAO_LIST;
}

function sp_apao_prj_list_locker()
{
	return context.callBooleanFormula("NOT (USER_IN_GROUP($CURRENT_USER, \"P_ADM,G_ADM\"))");
}

function sp_apao_prj_list_modifier(st)
{
	this.SP_AA_S_PRJ_APAO_LIST = st;    
}

var prj_apao = new objectAttribute("OpxProject","SP_DA_PRJ_APAO_LIST","SP_AT_PRJ_APAO");
prj_apao.comment = "APAO Project list";
prj_apao.reader = sp_apao_prj_list_reader;
prj_apao.modifier = sp_apao_prj_list_modifier;
prj_apao.locker = sp_apao_prj_list_locker; 


// For DKM/PKM purpose 
// Convert a number of days as <nb_month>m<nb_week>w
// Ex: 3=0m0w, 7=0m1w, 10=0m1w, 30=0m4w, 31=1m0w
function convert_days_to_months_and_weeks(days)
{
	var remainDays = Math.abs(days);
	var nbDaysPerMonth = context.SP_NF_N_MONTH_TO_DAYS;  // 30.416666
	var nbDaysPerWeek = context.SP_NF_N_WEEK_TO_DAYS;    // 7
	
	// convert days to months and days to weeks (with the days remaining)
	var nbMonths = Math.floor(remainDays / nbDaysPerMonth);
	remainDays = remainDays % nbDaysPerMonth;

	// compute the number of week with the remaining days that is not part of nbMonths
	var nbWeeks   = Math.floor(remainDays / nbDaysPerWeek);
	remainDays = remainDays % nbDaysPerWeek;

	// adjustment on the number of weeks (business rule)
	if (remainDays >= 3) nbWeeks++;
	
	// return formatted result
	return ((days < 0 ? "-":"") + "~dm~dw".format(nbMonths, nbWeeks));
}
//convert_days_to_months_and_weeks.exportFunction({"NUMBER"}, "STRING", "Convert days to months and weeks: <n_months>m<n_weeks>w");

// Called by SP_NF_S_LEAD_LAG_MONTH_WEEK (Leads/lags (month)
function SP_JS_S_LEAD_LAG_MONTH_WEEK()
{
	if (this.SP_NF_S_LEADS_LAGS.length == 0) return "";
	convert_days_to_months_and_weeks(this.SP_NF_N_LEAD_LAG_MONTH * context.SP_NF_N_MONTH_TO_DAYS);
}
SP_JS_S_LEAD_LAG_MONTH_WEEK.exportFunction("", "STRING", "Leads/lags (month)");

// Called by SP_NF_S_LEAD_LAG_MONTH_WEEK_MONTHLY_REF (Leads/lags (month)
function SP_JS_S_LEAD_LAG_MONTH_WEEK_MONTHLY_REF()
{
	if (this.SP_NF_S_LEADS_LAGS_MONTHLY_REF.length == 0) return "";
	convert_days_to_months_and_weeks(this.SP_NF_N_LEAD_LAG_MONTH_MONTHLY_REF * context.SP_NF_N_MONTH_TO_DAYS);
}
SP_JS_S_LEAD_LAG_MONTH_WEEK_MONTHLY_REF.exportFunction("", "STRING", "Leads/lags (month)");


//// Stream 1 PFP : need to filter Portfolio movement to display.
//// rule is : We need to display the last milestone (from the activities above) completed in the current year and the next milestone not yet completed. If there is no completed milestone in the current year, display only the next milestone not yet completed.

method sp_js_port_move_to_display on "opxActivity" ()
{
	var o_act_to_compare = this;
	var n_onb_act_to_compare = o_act_to_compare.ONB;
	var n_onb_last_completed=0;
	var n_onb_first_not_completed=0;
	var o_current_project = o_act_to_compare.Project;
	
	fromobject(o_current_project)
	{
		// Saving onb of completed port movement until will get a non completed one
		for (var o_act in OpxActivity where o_act.Project==o_current_project && o_act.SP_NF_B_ACT_IS_A_PORT_MOV && o_act.callBooleanFormula("PF > PERIOD_START($DATE_OF_THE_DAY, \"YEAR\", 0)") order by {"PF"})
		{
			if (o_act.SP_NF_B_COMPLETION)
			{
				n_onb_last_completed = o_act.ONB;
			}
			if (!o_act.SP_NF_B_COMPLETION)
			{
				n_onb_first_not_completed = o_act.ONB;
				break;
			}
		}	
	}
	
	if (n_onb_last_completed != 0 && (n_onb_act_to_compare == n_onb_last_completed || n_onb_act_to_compare == n_onb_first_not_completed))
	{
		return true;
	}else if ( n_onb_last_completed == 0 && n_onb_act_to_compare == n_onb_first_not_completed)
	{
		return true;
	}
	
	return false;
}
SP_JS_PORT_MOVE_TO_DISPLAY.exportFunction("", "BOOLEAN", "Portfolio movement to display in report ?");

// Functions for Monthly Report

function sp_calculate_monthly_gauge_properties(vActualsField, vForecastField, vBudgetField)
{
	var vProject = this.object;
	var vBudgetValue = 0;
	var vForecastValue = 0;
	var vActualsValue = 0;
	var vMaxValue = 0;

	var vBudgetWidth = 0;
	var vForecastWidth = 0;
	var vActualsWidth = 0;
	var vMaxWidth = 500;

	if((vProject instanceof OpxProject || vProject instanceof OpxVirtualDataset)&& vProject!=undefined)
	{
		vActualsValue = Math.round(vProject.get(vActualsField));
		vForecastValue = Math.round(vProject.get(vForecastField));
		vBudgetValue = Math.round(vProject.get(vBudgetField));
		vMaxValue = Math.Max(vForecastValue,vBudgetValue);
		
		if(vMaxValue!=0)
		{
			vBudgetWidth = Math.round((vBudgetValue/vMaxValue)*vMaxWidth);
			vActualsWidth = Math.round((vActualsValue/vMaxValue)*vMaxWidth);
			vForecastWidth = Math.round((vForecastValue/vMaxValue)*vMaxWidth);
		}
	}
	return new vector(new vector(vActualsValue, vActualsWidth), new vector(vForecastValue, vForecastWidth), new vector(vBudgetValue, vBudgetWidth));
}

function sp_display_monthly_gauge_properties(vGaugeType, vUnit, vActualsField, vForecastField, vBudgetField)
{
	var vVectValue = sp_calculate_monthly_gauge_properties(vActualsField, vForecastField, vBudgetField);
	
	var gr_ACTUALS = new Graphics(vGaugeType+"_ACTUALS");
	var gr_FORECAST = new Graphics(vGaugeType+"_FORECAST");
	var gr_BUDGET = new Graphics(vGaugeType+"_BUDGET");

	if(gr_ACTUALS instanceof Graphics && gr_ACTUALS!=undefined && gr_FORECAST instanceof Graphics && gr_FORECAST!=undefined && gr_BUDGET instanceof Graphics && gr_BUDGET!=undefined)
	{
		if(vVectValue instanceof vector)
		{
			withoutlocking {
				WithoutDBRecording {
					
					
					//Fetch Maximum width to support further computations				
					var maxwidth = Math.Max(vVectValue[0][1],vVectValue[1][1],vVectValue[2][1]);

//Exception block to avoid 'Attempt to Divide by zero' error
			if (maxwidth>0)
			{
						//Updating Actuals Width
						if (vVectValue[0][1]/maxwidth)==1
						{
							gr_ACTUALS.cell.width=500;
							
						}
						else
						{
							gr_ACTUALS.cell.width=math.round((vVectValue[0][1]/maxwidth)*500);
														
							
						}
						
						//Updating Forecast Width
						if (vVectValue[1][1]/maxwidth)==1
						{
							gr_FORECAST.cell.width=500;
								
						}
						else
						{
							gr_FORECAST.cell.width=math.round((vVectValue[1][1]/maxwidth)*500);
														
							
						}
						
						//Updating Budget Width
						if (vVectValue[2][1]/maxwidth)==1
						{
							gr_BUDGET.cell.width=500;
									
						}
						else
						{
							gr_BUDGET.cell.width=math.round((vVectValue[2][1]/maxwidth)*500);
								
						}	

}

else
{

gr_ACTUALS.cell.width=0;
gr_FORECAST.cell.width=0;
gr_BUDGET.cell.width=0;

}	
				}
			}
		}
	}
}




function sp_display_monthly_gauge()
{
	sp_display_monthly_gauge_properties("FTE", "", "SP_NF_N_PRJ_MONTHLY_ACTUAL","SP_NF_N_PRJ_MONTHLY_FORECAST","SP_NF_N_PRJ_MONTHLY_BUDGET");
	sp_display_monthly_gauge_properties("COST", "", "SP_NF_N_PRJ_COST_ACTUAL_YTD","SP_NF_N_PRJ_COST_BUDGET_YTD","SP_NF_N_PRJ_COST_BUDGET_YEAR");
	
	var gr_Gauge = new Graphics("ALL");
	gr_Gauge.refresh();
}

function sp_js_has_planned_cost_hours(useless){
var oAct = this;
var msg = ""
for (var each in oAct.allocations)
{
msg = "Planned hours";
break;
}
for (var each in oAct.expenditures)
{
msg = msg + "and Planned expenditures";
break;
}
if (msg ==""){
return ""}
else{
return "There are "+msg+" linked to this activity. are you sure you want to delete Activity : "+oAct.printattribute()}
}
sp_js_has_planned_cost_hours.exportfunction({"STRING"},"STRING")

function sp_reference_exists (s_prj_name,s_ref_name)
{
                var o_ref = GanttGetProjectReference(s_prj_name,s_ref_name);
                if (o_ref instanceof Opxreference)
                {
                               return true;
                }
                return false;
}

SP_REFERENCE_EXISTS.exportFunction({"STRING","STRING"}, "BOOLEAN", "Return if the project in the first argument has a reference named as the second arg");



function sp_reference_creation_date(s_prj_name,s_ref_name)
{
                var o_ref = GanttGetProjectReference(s_prj_name,s_ref_name);
                if (o_ref instanceof Opxreference)
                {
                    return o_ref.AD;
                }
                return -1;
}
sp_reference_creation_date.exportFunction({"STRING","STRING"}, "DATE", "Return the creation date of the baseline");

// method returning true if the activity has a successor or a predecessor with an obs displayed in the Working view (RA)
method sp_js_is_linkedto_act_obs_WVRA on opxActivity()
{
	var o_act = this;
	var b_result=false;
	for (var each in o_act.get("PLINKS")){
		if (each.PA.CallBooleanFormula("OBS_ELEMENT.SP_AA_B_DISPLAY_OBS_RA"))
		{
			b_result=true;
			break;
		}
	}
	if (!b_result)
	{
		for (var each in o_act.get("SLINKS")){
			if (each.SUCC_ACTIVITY.CallBooleanFormula("OBS_ELEMENT.SP_AA_B_DISPLAY_OBS_RA"))
			{
				b_result=true;
				break;
			}
		}
	}
	return b_result;
}
sp_js_is_linkedto_act_obs_WVRA.exportfunction("","BOOLEAN");

/////////////////////////////////////////////////////////////////////////////////////////////////
//////////// Functions to copy baselines into versions//////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////

function sp_ojs_copy_ref_in_version_pop_up()
{
	
	var n_running_copy=0;
	var o_project= "OpxProject".get(context.callstringformula("$CURRENT_PAGE_OBJECT_ID"));
	var projectId=o_project.printattribute();
	var s_version=context.SP_AA_S_VERS_BASELINE_CP;
	var o_version="opxproject".get(s_version);
	if (o_version instanceof opxProject)
	{
		// we verify if the version has baselines 
		fromobject(o_version)
		{
			for (var o_ref in "OpxREFERENCE".findclass() where o_ref.file==o_version)
			{
				alert("The version is already containing baselines, the copy can't be launched.");
				return 0;
			}
		}
	}
	// Checking if a copy is already running.  If yes, cancelling the copy
	//for other projects in the same server
	for (var vProcess in "opxbackgroundprocess".findclass() where  vProcess.name.search("pv_copy_basline_into_version_") instanceof number)
	{
		n_running_copy++;
	}
	// Copy Launch
	if (n_running_copy==0)
	{
		writetolog("Launching the copy of baseline into version ~a.",o_version);
		alert("Copy of baseline launched. Please be patient until your copy is fully done, then refresh the page.");
		runbackgroundprocess("pv_copy_basline_into_version_"+projectId,"sp_ojs_copy_ref_in_version_in_background()",0);
	}
	else alert("A copy is already running. Please wait a moment and re-launch your copy of baselines."); 	
}

function sp_ojs_copy_ref_in_version_in_background()
{
	var b_ref_exist=false;
	var s_version=context.SP_AA_S_VERS_BASELINE_CP;
	var o_version="opxproject".get(s_version);
	if (o_version instanceof opxProject)
	{
		// we verify if the version has baselines 
		fromobject(o_version)
		{
			for (var o_ref in "OpxREFERENCE".findclass() where o_ref.file==o_version && !(o_ref._PM_NF_S_APPROVED_BASELINE))
			{
				b_ref_exist=true;
				break;
			}
		}
		// Baselines Copy
		if !(b_ref_exist) 
		{
			o_version.sp_ojs_copy_ref_in_version();
		}
		else 
		{
			alert("Yearly and previous two monthly baselines already copied for "+s_version);
		}
		context.SP_AA_S_VERS_BASELINE_CP="";
	}
}

/////////////////////////////////////////////////////////////////////////////////////////////////
//////////// End of functions to copy baselines into versions//////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////

//function to check the status of background processes linked to the version creation.
function sp_js_check_background_version_process ()
{
	
	var o_project= "OpxProject".get(context.callstringformula("$CURRENT_PAGE_OBJECT_ID"));
	var projectId=o_project.printattribute();
	var i=0;
	var j=0;
	var s_version_process_name = "pv_create_new_version_"+projectId;
	var s_copy_baseline_process_name = "pv_copy_baseline_into_version_"+projectId;
	
	for (var vProcess in "opxbackgroundprocess".findclass())
	{
		if (vProcess.name==s_version_process_name)
		{
			alert(" Version creation still running on "+projectId+"...");
			i++;
		}
		if (vProcess.name==s_copy_baseline_process_name)
		{
			alert(" Copy of baseline still running on "+projectId+"...");
			j++;
		}
		
	}
	if (i==0) {alert("No version running on "+projectId+"." +getchar(10)+"If the version you have created doesn't appear, refresh the page.");}
	if (j==0) {alert("No copy of baseline running on "+projectId+".");}
	
}

function sp_pjt_modifybefore_state(oV, nV)
{
	if( nV=="Active" && oV=="Simulation" && this.BREAKDOWN_2 instanceof opxBreakdown_2 && context.callStringFormula("$CURRENT_USER").toUpperCase() != "INTRANET")
	{
		var Cpt = "GENERATE_CODE".callmacro(this.BREAKDOWN_2.SP_NF_S_CODE_GENE);
		var Code=this.BREAKDOWN_2.SP_NF_S_CODE_GENE_NAME+Cpt;
		withoutlocking
		{
			this.SPAS_AA_PROJECT_CODE=Code;
			this.sp_wpm_set_delegate_to();
			//alert("called");
		}
	}
}

var slot="OpxPROJECT".findClass().getSlot("STATE"); 
var current_user = context.callStringFormula("$CURRENT_USER").toUpperCase();
writeln("-----------> updated the state from Siulation to Active"+current_user)
slot.modifybeforeMethod = sp_pjt_modifybefore_state;


//	NAME	: SP_JS_PM_FUNCTIONS
//	AUTHOR  : bcordel
//  VERSION : 1.0
//  PURPOSE : COMPASS v6 , Functions for PM module
//  
//  HISTORY :
var revision_number ="1.14";
//
//  Revision 1.14 2020/08/04 12:24 KSH 
//	Modification of sp_pjt_modifybefore_state to generate the next sequence project code
//
//  Revision 1.13 2020/01/13 19:20 ssk 
//	Modification of sp_display_monthly_gauge_properties
//
//  Revision 1.12 2019/11/15 14:00 mbl 
//	Creation of sp_pjt_modifybefore_state 
//
//  Revision 1.11 2019/08/07 14:36 bcordel 
//	modifying function to copy baseline into version to run the copy in background process and avoid timeout.
//
//  Revision 1.10 2019/06/06 14:36 MBL Creation of sp_ojs_copy_ref_in_version_pop_up used in baseline copy pop-up

//	Revision 1.9 2018/06/29 bcordel
//	. adding function sp_js_is_linkedto_act_obs_WVRA
//
//	Revision 1.8 2017/11/09 bcordel
//	. Modification of function sp_display_monthly_gauge_properties to take into account the new gauge
//
//	Revision 1.7 2017/10/11 lfavre
//	. Modification of function sp_reference_exists to avoid Global map on Reference table
//	. Creation of function sp_reference_creation_date
//
//  Revision 1.6 2017/10/04 bcordel
//   . creation of functions sp_reference_exists
//  
//  Revision 1.5 2017/09/01 flecanut & bcordel
//   . creation of functions sp_calculate_monthly_gauge_properties, sp_display_monthly_gauge_properties, sp_display_monthly_gauge for Monthly Report Gauge display
//  
//  Revision 1.4 2017/06/1 bcordel
//   . creation sp_js_port_move_to_display.
//  
//  Revision 1.3 2017/02/23 mpaganon
//   . import "APAO Project list" dynamic attribute from P5 (sp_js_prj_apao.ojs)
//   . create days_to_month_and_week()
//  
//  Revision 1.2 2016/12/14 mpaganon
//   . modifying char_forbidden to allow blank spaces
//   
//  Revision 1.1  2016/12/14 mpaganon
//   . optimizing char_forbidden()
//   . add check_right_constraints_for_another_function()
//  Revision 1.0  2016/11/15 bcordel
//  creation of the macro-script grouping functions linked to PM module. 


//
// Stream S1-PFP, URS_1.1.Ga: Need to better highlight the links between different "functions"
//
// The requirement is to superpose an arrow on an activity icon when this activity has at least,
// a successor link to another activity with a diff rent OBS (function = OBS_3)
// The following function returns true if this is the case, false otherwise
// It is used by the symbolic field: SP_SF_LINK_TO_OTHER_OBS
function check_right_constraints_for_another_function()
{
	if (this instanceOf OpxActivity)
		for (var obj in this.rightConstraints)
			if (obj.right.obs.index != this.obs.index)
				return true;
	return false;
}
check_right_constraints_for_another_function.exportfunction("","BOOLEAN");

		
//////////////////////////
//// Compass V6 : administration stream
//// Function to check project name for unwanted characters
/////////////////////////

// This dynamic attribute is only used to check write access to ADM (Compass P5 import)

function sp_apao_prj_list_reader()
{
	return this.SP_AA_S_PRJ_APAO_LIST;
}

function sp_apao_prj_list_locker()
{
	return context.callBooleanFormula("NOT (USER_IN_GROUP($CURRENT_USER, \"P_ADM,G_ADM\"))");
}

function sp_apao_prj_list_modifier(st)
{
	this.SP_AA_S_PRJ_APAO_LIST = st;    
}

var prj_apao = new objectAttribute("OpxProject","SP_DA_PRJ_APAO_LIST","SP_AT_PRJ_APAO");
prj_apao.comment = "APAO Project list";
prj_apao.reader = sp_apao_prj_list_reader;
prj_apao.modifier = sp_apao_prj_list_modifier;
prj_apao.locker = sp_apao_prj_list_locker; 


// For DKM/PKM purpose 
// Convert a number of days as <nb_month>m<nb_week>w
// Ex: 3=0m0w, 7=0m1w, 10=0m1w, 30=0m4w, 31=1m0w
function convert_days_to_months_and_weeks(days)
{
	var remainDays = Math.abs(days);
	var nbDaysPerMonth = context.SP_NF_N_MONTH_TO_DAYS;  // 30.416666
	var nbDaysPerWeek = context.SP_NF_N_WEEK_TO_DAYS;    // 7
	
	// convert days to months and days to weeks (with the days remaining)
	var nbMonths = Math.floor(remainDays / nbDaysPerMonth);
	remainDays = remainDays % nbDaysPerMonth;

	// compute the number of week with the remaining days that is not part of nbMonths
	var nbWeeks   = Math.floor(remainDays / nbDaysPerWeek);
	remainDays = remainDays % nbDaysPerWeek;

	// adjustment on the number of weeks (business rule)
	if (remainDays >= 3) nbWeeks++;
	
	// return formatted result
	return ((days < 0 ? "-":"") + "~dm~dw".format(nbMonths, nbWeeks));
}
//convert_days_to_months_and_weeks.exportFunction({"NUMBER"}, "STRING", "Convert days to months and weeks: <n_months>m<n_weeks>w");

// Called by SP_NF_S_LEAD_LAG_MONTH_WEEK (Leads/lags (month)
function SP_JS_S_LEAD_LAG_MONTH_WEEK()
{
	if (this.SP_NF_S_LEADS_LAGS.length == 0) return "";
	convert_days_to_months_and_weeks(this.SP_NF_N_LEAD_LAG_MONTH * context.SP_NF_N_MONTH_TO_DAYS);
}
SP_JS_S_LEAD_LAG_MONTH_WEEK.exportFunction("", "STRING", "Leads/lags (month)");

// Called by SP_NF_S_LEAD_LAG_MONTH_WEEK_MONTHLY_REF (Leads/lags (month)
function SP_JS_S_LEAD_LAG_MONTH_WEEK_MONTHLY_REF()
{
	if (this.SP_NF_S_LEADS_LAGS_MONTHLY_REF.length == 0) return "";
	convert_days_to_months_and_weeks(this.SP_NF_N_LEAD_LAG_MONTH_MONTHLY_REF * context.SP_NF_N_MONTH_TO_DAYS);
}
SP_JS_S_LEAD_LAG_MONTH_WEEK_MONTHLY_REF.exportFunction("", "STRING", "Leads/lags (month)");


//// Stream 1 PFP : need to filter Portfolio movement to display.
//// rule is : We need to display the last milestone (from the activities above) completed in the current year and the next milestone not yet completed. If there is no completed milestone in the current year, display only the next milestone not yet completed.

method sp_js_port_move_to_display on "opxActivity" ()
{
	var o_act_to_compare = this;
	var n_onb_act_to_compare = o_act_to_compare.ONB;
	var n_onb_last_completed=0;
	var n_onb_first_not_completed=0;
	var o_current_project = o_act_to_compare.Project;
	
	fromobject(o_current_project)
	{
		// Saving onb of completed port movement until will get a non completed one
		for (var o_act in OpxActivity where o_act.Project==o_current_project && o_act.SP_NF_B_ACT_IS_A_PORT_MOV && o_act.callBooleanFormula("PF > PERIOD_START($DATE_OF_THE_DAY, \"YEAR\", 0)") order by {"PF"})
		{
			if (o_act.SP_NF_B_COMPLETION)
			{
				n_onb_last_completed = o_act.ONB;
			}
			if (!o_act.SP_NF_B_COMPLETION)
			{
				n_onb_first_not_completed = o_act.ONB;
				break;
			}
		}	
	}
	
	if (n_onb_last_completed != 0 && (n_onb_act_to_compare == n_onb_last_completed || n_onb_act_to_compare == n_onb_first_not_completed))
	{
		return true;
	}else if ( n_onb_last_completed == 0 && n_onb_act_to_compare == n_onb_first_not_completed)
	{
		return true;
	}
	
	return false;
}
SP_JS_PORT_MOVE_TO_DISPLAY.exportFunction("", "BOOLEAN", "Portfolio movement to display in report ?");

// Functions for Monthly Report

function sp_calculate_monthly_gauge_properties(vActualsField, vForecastField, vBudgetField)
{
	var vProject = this.object;
	var vBudgetValue = 0;
	var vForecastValue = 0;
	var vActualsValue = 0;
	var vMaxValue = 0;

	var vBudgetWidth = 0;
	var vForecastWidth = 0;
	var vActualsWidth = 0;
	var vMaxWidth = 500;

	if((vProject instanceof OpxProject || vProject instanceof OpxVirtualDataset)&& vProject!=undefined)
	{
		vActualsValue = Math.round(vProject.get(vActualsField));
		vForecastValue = Math.round(vProject.get(vForecastField));
		vBudgetValue = Math.round(vProject.get(vBudgetField));
		vMaxValue = Math.Max(vForecastValue,vBudgetValue);
		
		if(vMaxValue!=0)
		{
			vBudgetWidth = Math.round((vBudgetValue/vMaxValue)*vMaxWidth);
			vActualsWidth = Math.round((vActualsValue/vMaxValue)*vMaxWidth);
			vForecastWidth = Math.round((vForecastValue/vMaxValue)*vMaxWidth);
		}
	}
	return new vector(new vector(vActualsValue, vActualsWidth), new vector(vForecastValue, vForecastWidth), new vector(vBudgetValue, vBudgetWidth));
}

function sp_display_monthly_gauge_properties(vGaugeType, vUnit, vActualsField, vForecastField, vBudgetField)
{
	var vVectValue = sp_calculate_monthly_gauge_properties(vActualsField, vForecastField, vBudgetField);
	
	var gr_ACTUALS = new Graphics(vGaugeType+"_ACTUALS");
	var gr_FORECAST = new Graphics(vGaugeType+"_FORECAST");
	var gr_BUDGET = new Graphics(vGaugeType+"_BUDGET");

	if(gr_ACTUALS instanceof Graphics && gr_ACTUALS!=undefined && gr_FORECAST instanceof Graphics && gr_FORECAST!=undefined && gr_BUDGET instanceof Graphics && gr_BUDGET!=undefined)
	{
		if(vVectValue instanceof vector)
		{
			withoutlocking {
				WithoutDBRecording {
					
					
					//Fetch Maximum width to support further computations				
					var maxwidth = Math.Max(vVectValue[0][1],vVectValue[1][1],vVectValue[2][1]);

//Exception block to avoid 'Attempt to Divide by zero' error
			if (maxwidth>0)
			{
						//Updating Actuals Width
						if (vVectValue[0][1]/maxwidth)==1
						{
							gr_ACTUALS.cell.width=500;
							
						}
						else
						{
							gr_ACTUALS.cell.width=math.round((vVectValue[0][1]/maxwidth)*500);
														
							
						}
						
						//Updating Forecast Width
						if (vVectValue[1][1]/maxwidth)==1
						{
							gr_FORECAST.cell.width=500;
								
						}
						else
						{
							gr_FORECAST.cell.width=math.round((vVectValue[1][1]/maxwidth)*500);
														
							
						}
						
						//Updating Budget Width
						if (vVectValue[2][1]/maxwidth)==1
						{
							gr_BUDGET.cell.width=500;
									
						}
						else
						{
							gr_BUDGET.cell.width=math.round((vVectValue[2][1]/maxwidth)*500);
								
						}	

}

else
{

gr_ACTUALS.cell.width=0;
gr_FORECAST.cell.width=0;
gr_BUDGET.cell.width=0;

}	
				}
			}
		}
	}
}




function sp_display_monthly_gauge()
{
	sp_display_monthly_gauge_properties("FTE", "", "SP_NF_N_PRJ_MONTHLY_ACTUAL","SP_NF_N_PRJ_MONTHLY_FORECAST","SP_NF_N_PRJ_MONTHLY_BUDGET");
	sp_display_monthly_gauge_properties("COST", "", "SP_NF_N_PRJ_COST_ACTUAL_YTD","SP_NF_N_PRJ_COST_BUDGET_YTD","SP_NF_N_PRJ_COST_BUDGET_YEAR");
	
	var gr_Gauge = new Graphics("ALL");
	gr_Gauge.refresh();
}

function sp_js_has_planned_cost_hours(useless){
var oAct = this;
var msg = ""
for (var each in oAct.allocations)
{
msg = "Planned hours";
break;
}
for (var each in oAct.expenditures)
{
msg = msg + "and Planned expenditures";
break;
}
if (msg ==""){
return ""}
else{
return "There are "+msg+" linked to this activity. are you sure you want to delete Activity : "+oAct.printattribute()}
}
sp_js_has_planned_cost_hours.exportfunction({"STRING"},"STRING")

function sp_reference_exists (s_prj_name,s_ref_name)
{
                var o_ref = GanttGetProjectReference(s_prj_name,s_ref_name);
                if (o_ref instanceof Opxreference)
                {
                               return true;
                }
                return false;
}

SP_REFERENCE_EXISTS.exportFunction({"STRING","STRING"}, "BOOLEAN", "Return if the project in the first argument has a reference named as the second arg");



function sp_reference_creation_date(s_prj_name,s_ref_name)
{
                var o_ref = GanttGetProjectReference(s_prj_name,s_ref_name);
                if (o_ref instanceof Opxreference)
                {
                    return o_ref.AD;
                }
                return -1;
}
sp_reference_creation_date.exportFunction({"STRING","STRING"}, "DATE", "Return the creation date of the baseline");

// method returning true if the activity has a successor or a predecessor with an obs displayed in the Working view (RA)
method sp_js_is_linkedto_act_obs_WVRA on opxActivity()
{
	var o_act = this;
	var b_result=false;
	for (var each in o_act.get("PLINKS")){
		if (each.PA.CallBooleanFormula("OBS_ELEMENT.SP_AA_B_DISPLAY_OBS_RA"))
		{
			b_result=true;
			break;
		}
	}
	if (!b_result)
	{
		for (var each in o_act.get("SLINKS")){
			if (each.SUCC_ACTIVITY.CallBooleanFormula("OBS_ELEMENT.SP_AA_B_DISPLAY_OBS_RA"))
			{
				b_result=true;
				break;
			}
		}
	}
	return b_result;
}
sp_js_is_linkedto_act_obs_WVRA.exportfunction("","BOOLEAN");

/////////////////////////////////////////////////////////////////////////////////////////////////
//////////// Functions to copy baselines into versions//////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////

function sp_ojs_copy_ref_in_version_pop_up()
{
	
	var n_running_copy=0;
	var o_project= "OpxProject".get(context.callstringformula("$CURRENT_PAGE_OBJECT_ID"));
	var projectId=o_project.printattribute();
	var s_version=context.SP_AA_S_VERS_BASELINE_CP;
	var o_version="opxproject".get(s_version);
	if (o_version instanceof opxProject)
	{
		// we verify if the version has baselines 
		fromobject(o_version)
		{
			for (var o_ref in "OpxREFERENCE".findclass() where o_ref.file==o_version)
			{
				alert("The version is already containing baselines, the copy can't be launched.");
				return 0;
			}
		}
	}
	// Checking if a copy is already running.  If yes, cancelling the copy
	//for other projects in the same server
	for (var vProcess in "opxbackgroundprocess".findclass() where  vProcess.name.search("pv_copy_basline_into_version_") instanceof number)
	{
		n_running_copy++;
	}
	// Copy Launch
	if (n_running_copy==0)
	{
		writetolog("Launching the copy of baseline into version ~a.",o_version);
		alert("Copy of baseline launched. Please be patient until your copy is fully done, then refresh the page.");
		runbackgroundprocess("pv_copy_basline_into_version_"+projectId,"sp_ojs_copy_ref_in_version_in_background()",0);
	}
	else alert("A copy is already running. Please wait a moment and re-launch your copy of baselines."); 	
}

function sp_ojs_copy_ref_in_version_in_background()
{
	var b_ref_exist=false;
	var s_version=context.SP_AA_S_VERS_BASELINE_CP;
	var o_version="opxproject".get(s_version);
	if (o_version instanceof opxProject)
	{
		// we verify if the version has baselines 
		fromobject(o_version)
		{
			for (var o_ref in "OpxREFERENCE".findclass() where o_ref.file==o_version && !(o_ref._PM_NF_S_APPROVED_BASELINE))
			{
				b_ref_exist=true;
				break;
			}
		}
		// Baselines Copy
		if !(b_ref_exist) 
		{
			o_version.sp_ojs_copy_ref_in_version();
		}
		else 
		{
			alert("Yearly and previous two monthly baselines already copied for "+s_version);
		}
		context.SP_AA_S_VERS_BASELINE_CP="";
	}
}

/////////////////////////////////////////////////////////////////////////////////////////////////
//////////// End of functions to copy baselines into versions//////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////

//function to check the status of background processes linked to the version creation.
function sp_js_check_background_version_process ()
{
	
	var o_project= "OpxProject".get(context.callstringformula("$CURRENT_PAGE_OBJECT_ID"));
	var projectId=o_project.printattribute();
	var i=0;
	var j=0;
	var s_version_process_name = "pv_create_new_version_"+projectId;
	var s_copy_baseline_process_name = "pv_copy_baseline_into_version_"+projectId;
	
	for (var vProcess in "opxbackgroundprocess".findclass())
	{
		if (vProcess.name==s_version_process_name)
		{
			alert(" Version creation still running on "+projectId+"...");
			i++;
		}
		if (vProcess.name==s_copy_baseline_process_name)
		{
			alert(" Copy of baseline still running on "+projectId+"...");
			j++;
		}
		
	}
	if (i==0) {alert("No version running on "+projectId+"." +getchar(10)+"If the version you have created doesn't appear, refresh the page.");}
	if (j==0) {alert("No copy of baseline running on "+projectId+".");}
	
}

function sp_pjt_modifybefore_state(oV, nV)
{
	if( nV=="Active" && oV=="Simulation" && this.BREAKDOWN_2 instanceof opxBreakdown_2 && context.callStringFormula("$CURRENT_USER").toUpperCase() != "INTRANET")
	{
		var Cpt = "GENERATE_CODE".callmacro(this.BREAKDOWN_2.SP_NF_S_CODE_GENE);
		var Code=this.BREAKDOWN_2.SP_NF_S_CODE_GENE_NAME+Cpt;
		withoutlocking
		{
			this.SPAS_AA_PROJECT_CODE=Code;
			this.sp_wpm_set_delegate_to();
			//alert("called");
		}
	}
}

var slot="OpxPROJECT".findClass().getSlot("STATE"); 
var current_user = context.callStringFormula("$CURRENT_USER").toUpperCase();
writeln("-----------> updated the state from Siulation to Active"+current_user)
slot.modifybeforeMethod = sp_pjt_modifybefore_state;


 
//
// remplit la table temporaire "Sagbu Functional Planner populate table" (SP_TT_PPP_SAGBU_INVOLV_FORM)  à partir des valeurs présentes dans le type d'attribut SP_AT_PPP_SAGBU_IN.
// Cette table permet d'affecter à l'attribut Projet[Sanofi GBU Involved], une ou plusieurs valeurs.
//
for (var a in "OpxSP_TT_PPP_SAGBU_INVOLV_FORM")
	a.delete();

// récupère la liste des valeurs de l'attrubute type
var v = "OPXNAT".get("SP_AT_PPP_SAGBU_IN").possibleValues;

// remplit la table temporaire
for (var val in v)
	new OpxSP_TT_PPP_SAGBU_INVOLV_FORM (
		"NAME", val.comment,
		"COMMENT", val.comment);

//
// remplit la table temporaire "Sagbu Functional Planner populate table" (SP_TT_PPP_SAGBU_INVOLV_FORM)  à partir des valeurs présentes dans le type d'attribut SP_AT_PPP_SAGBU_IN.
// Cette table permet d'affecter à l'attribut Projet[Sanofi GBU Involved], une ou plusieurs valeurs.
//
for (var a in "OpxSP_TT_PPP_SAGBU_INVOLV_FORM")
	a.delete();

// récupère la liste des valeurs de l'attrubute type
var v = "OPXNAT".get("SP_AT_PPP_SAGBU_IN").possibleValues;

// remplit la table temporaire
for (var val in v)
	new OpxSP_TT_PPP_SAGBU_INVOLV_FORM (
		"NAME", val.comment,
		"COMMENT", val.comment);

 
//  FILE    : SP_JS_PRIME_TEMPO_IMPORT_INTERFACE.ojs
// 
//  AUTHOR  : Sourabh JAIN
// 
//  VERSION : 1.0
// 
//  PURPOSE : To Create Interface Between PRIME & TEMPO (RITM1223055 TEMPO-PRIME Study Interface)
// 
//  HISTORY :
// Created  by SKJ 14/08/2019

//This functioin will return the trial code in "Trial Information" report for the field "Trial Code"
function trial_Code_Possible_Values()
{
	var vec = new Vector();
	var prj=this.editor.object.project;
	if (prj instanceof opxproject)
	{
		fromObject(prj)
		{
			// If trial satus is placeholder we exclude prime studies
			var vcond="SP_AA_B_PRIME_STUDY";
			// Else we take only prime studies
			if (this.editor.SP_AA_CL_TRIAL_STATUS=="Placeholder") vcond="NOT SP_AA_B_PRIME_STUDY";
			// If we are in a simulation we display all trial codes else we display unplanned studies
			for( var tc in "OpxSP_PT_CL_TRIAL_CODE" where tc.NAME!="" && 
			(this.editor.object.PROJECT.STATE=="Simulation"  || (tc.SP_NF_B_STUDY_USE_IN_TEMP==false && tc.callbooleanformula(vcond))) && !(tc.SP_AA_D_STUDY_INACTIVATE_DATE instanceof date))
			{
				vec.push(TC);
			}
		}
	}
	this.possibleValues = vec;
}

function Prime_Import_InTo_SP_TT_PRIME_STUDIES()
{
  if (context.callstringformula("$DATABASE_NAME")=="DATABASE_PROD")
  {
    // import from datasource PROD
    return context.callmacro("SP_RQ_PRIME_TEMPO_STUDY_PROD");
  }
  else 
  {
    if (context.callstringformula("$DATABASE_NAME")=="DATABASE_UAT")
    {
      // import from datasource UAT
      return context.callmacro("SP_RQ_PRIME_TEMPO_STUDY_UAT");
    }
    else
    {
      // import from datasource DEV
      return context.callmacro("SP_RQ_PRIME_TEMPO_STUDY_DEV");
    }
  }
}
//This fucntion is used to get the project using project code.
function get_Project_By_Project_Code(projectCode)
{
	var pclass="OpxPROJECT".findclass();
	var ka = new keyattribute(pclass, "SPAS_AA_PROJECT_CODE",projectCode);
	var result=undefined;
	if(projectCode!="")
	{
		fromObject (ka)
		{
			for (var varia in pclass where varia.state!="Simulation")
			{
			  result = varia;
			  break;
			}
		}
	}
  return result;
}
//This fucntion is used to return if study used in TEMPO or not (SP_NF_B_STUDY_USE_IN_TEMP )
function is_Study_Used_In_Tempo(notused)
{
	var trial=this;
	for(var act in trial.get("r.SP_RA_CL_TRIAL_CODE.WORK-STRUCTURE") where act.SP_NF_CL_TRIAL)
	{
		return true;
	}
	return false;
}
is_Study_Used_In_Tempo.exportfunction({"STRING"},"BOOLEAN");

// This function is used to update trial activities.
function update_Trial_Activities(tcode)
{
	if(tcode instanceof OpxSP_PT_CL_TRIAL_CODE)
	{
		for(var act in tcode.get("r.SP_RA_CL_TRIAL_CODE.WORK-STRUCTURE") where act.SP_NF_CL_TRIAL)
		{
			withoutlocking 
			{
				act.DESC=tcode.SP_AA_S_TRIAL_TITLE; //Update description of the activity
				act.SP_RA_CL_CLIN_PHASE=undefined;
				for(var cl_phase in "opxSP_PT_CL_PHASE" where cl_phase.SP_AA_S_PRIME_PHASE==tcode.SP_AA_S_STUDY_PHASE)
				{
					act.SP_RA_CL_CLIN_PHASE=cl_phase; // Update Phase of the activity
				}
				act.SP_RA_CL_GROUP_CAT=undefined; 
				for(var san_group in "opxSP_PT_CL_GROUP_CAT" where san_group.SP_AA_S_PRIME_STD_GROUP==tcode.SP_AA_S_STUDY_GROUP)	
				{
					act.SP_RA_CL_GROUP_CAT=san_group; // Update Sanofi Group of tha activity
				}
				act.SP_AA_S_ROOT_PRODUCT=tcode.SP_AA_S_ROOT_PROD_CODE // Update Root Product of the activity
				act.SP_AA_S_ACT_STUDY_PURPOSE=tcode.SP_AA_S_STUDY_PURPOSE // Update Study Purpose of the activity
			}
		}
	}
}

//Send_Email_PRIME_Prj_Update is used to send email to Tempo Admin when an update in Project Code comes from PRIME to TEMPO
function Send_Email_PRIME_Prj_Update(trial)
{
                if (trial instanceof opxSP_PT_CL_TRIAL_CODE)
                {
                               var recipients = trial.SP_NF_S_PRIME_STDY_UPD_EMAIL_DEST;
                               var subject = "PRIME Study has changed from initial project";
                               var body  = trial.SP_NF_S_PRIME_PRJ_CODE_UPD_MAIL;
							 
                               var sender= "PRIME-TEMPO-IMPORT@OPX2";
                               
                               var PlistForMessage = new vector();
                               PlistForMessage.push("smtp-server");
                               PlistForMessage.push("SMTP-EU.SANOFI.COM");
                               PlistForMessage.push("from");
                               PlistForMessage.push(sender);
                               PlistForMessage.push("to");
                               PlistForMessage.push(recipients);
                               PlistForMessage.push("subject");
                               PlistForMessage.push(subject);
                               PlistForMessage.push("body");
                               PlistForMessage.push(body);
                               PlistForMessage.push("Content-Type") ;
                               PlistForMessage.push("text/html");
                               PlistForMessage.push("additional-headers") ;
                               PlistForMessage.push("Importance,High,X-Priority,1,X-MSMail-Priority,High".parseList()) ;
                               //sending the message
                               if (PlistForMessage.length > 0 && context.SP_GS_B_ENABLE_MAIL_ALERTS) {   
                                 context.sendmailwithplist(PlistForMessage);
                               }
                }
}

// This function will run in order to create/update/inactivate
function prime_tempo_run_import()
{
	var result = false;
	var pclass="OpxSP_PT_CL_TRIAL_CODE".findclass();
	// import to Temperory Table
	writeln("Entering To PRIME-TEMPO Import...");
	result = Prime_Import_InTo_SP_TT_PRIME_STUDIES(); // This function will import the data from Prime Table to Temperory Table of Tempo

	if (result)
	{
		for (var c in "opxSP_TT_PRIME_STUDIES".findclass() where c.NAME instanceof String && c.NAME!="")
		{
			var t_code_exist;
			var prj_code="";
			
			//to check that the trial exist in tempo
			var ka = new keyattribute(pclass, "NAME",c.NAME);
			fromObject (ka)
			{
				for (var t_code in pclass where t_code.PROJECT instanceof OpxPROJECT && t_code.PROJECT.state!="Simulation")
				{
					t_code_exist=t_code;
					prj_code=t_code_exist.PROJECT.SPAS_AA_PROJECT_CODE;
					break;
				}
			}
			
			
			if (t_code_exist instanceof OpxSP_PT_CL_TRIAL_CODE)
			{
				//Inactivation case
				if (c.SP_AA_B_TT_PRIME_FLAG=="I")
				{
					t_code_exist.SP_AA_D_STUDY_INACTIVATE_DATE=c.SP_AA_D_TT_STUDY_PRIME_DATE;
					t_code_exist.SP_AA_B_PRIME_STUDY=true;
				}	
				// Update case
				else 
				{
					t_code_exist.SP_AA_S_TRIAL_TITLE=c.SP_AA_S_TT_TRIAL_TITLE;
					t_code_exist.SP_AA_S_STUDY_PHASE=c.SP_AA_S_TT_STUDY_PHASE;
					t_code_exist.SP_AA_S_STUDY_GROUP=c.SP_AA_S_TT_STUDY_GROUP;
					t_code_exist.SP_AA_S_ROOT_PROD_CODE=c.SP_AA_S_TT_ROOT_PROD_CODE;
					t_code_exist.SP_AA_S_STUDY_PURPOSE=c.SP_AA_S_TT_STUDY_PURPOSE;
					t_code_exist.SP_AA_B_PRIME_STUDY=true;
					if (c.SP_AA_B_TT_PRIME_FLAG=="C")
					{
						t_code_exist.SP_AA_D_STUDY_LAST_UPDATE_DATE=c.SP_AA_D_TT_STUDY_PRIME_DATE;
					}
					else
					{
						t_code_exist.SP_AA_D_STUDY_CREATE_DATE=c.SP_AA_D_TT_STUDY_PRIME_DATE;
					}
					
					// if the project code of the existing trial is the one send by prime we send email to TEMPO admin
					if (prj_code!=c.SP_AA_S_TT_PROJECT_CODE)
					{
						t_code_exist.SP_AA_S_PRIME_PRJ_CODE_UPDATE=c.SP_AA_S_TT_PROJECT_CODE;
						Send_Email_PRIME_Prj_Update(t_code_exist);
					}
					update_Trial_Activities(t_code_exist);
				}
			}
			else
			{
				// Creation case
				var prj=get_Project_By_Project_Code(c.SP_AA_S_TT_PROJECT_CODE)
				if(prj instanceof opxProject)
				{
					var newTC= new "OpxSP_PT_CL_TRIAL_CODE"("NAME",c.NAME,
														"FILE",prj,
														"SP_AA_S_TRIAL_TITLE",c.SP_AA_S_TT_TRIAL_TITLE,
														"SP_AA_S_STUDY_PHASE",c.SP_AA_S_TT_STUDY_PHASE,
														"SP_AA_S_STUDY_GROUP",c.SP_AA_S_TT_STUDY_GROUP,
														"SP_AA_S_ROOT_PROD_CODE",c.SP_AA_S_TT_ROOT_PROD_CODE,
														"SP_AA_S_STUDY_PURPOSE",c.SP_AA_S_TT_STUDY_PURPOSE,
														"SP_AA_B_PRIME_STUDY",true,
														"SP_AA_D_STUDY_CREATE_DATE",c.SP_AA_D_TT_STUDY_PRIME_DATE);		
				}
				else
				{
					writeln("Project "+ c.SP_AA_S_TT_PROJECT_CODE +" doesn't exist");
				}
			}
		}
		// Save the date of last successfull execution from prime
		context.SP_GS_D_LAST_PRIME_IMP_DATE=context.callDateFormula("$DATE_OF_THE_DAY");
	}
	else
	{
		writeln("Error >>Importing To SP_TT_PRIME_STUDIES Temporary Table");
	}
	writeln("PRIME-TEMPO Import Has Finished" );
}
prime_tempo_run_import.exportfunction();



//  FILE    : SP_JS_PRIME_TEMPO_IMPORT_INTERFACE.ojs
// 
//  AUTHOR  : Sourabh JAIN
// 
//  VERSION : 1.0
// 
//  PURPOSE : To Create Interface Between PRIME & TEMPO (RITM1223055 TEMPO-PRIME Study Interface)
// 
//  HISTORY :
// Created  by SKJ 14/08/2019

//This functioin will return the trial code in "Trial Information" report for the field "Trial Code"
function trial_Code_Possible_Values()
{
	var vec = new Vector();
	var prj=this.editor.object.project;
	if (prj instanceof opxproject)
	{
		fromObject(prj)
		{
			// If trial satus is placeholder we exclude prime studies
			var vcond="SP_AA_B_PRIME_STUDY";
			// Else we take only prime studies
			if (this.editor.SP_AA_CL_TRIAL_STATUS=="Placeholder") vcond="NOT SP_AA_B_PRIME_STUDY";
			// If we are in a simulation we display all trial codes else we display unplanned studies
			for( var tc in "OpxSP_PT_CL_TRIAL_CODE" where tc.NAME!="" && 
			(this.editor.object.PROJECT.STATE=="Simulation"  || (tc.SP_NF_B_STUDY_USE_IN_TEMP==false && tc.callbooleanformula(vcond))) && !(tc.SP_AA_D_STUDY_INACTIVATE_DATE instanceof date))
			{
				vec.push(TC);
			}
		}
	}
	this.possibleValues = vec;
}

function Prime_Import_InTo_SP_TT_PRIME_STUDIES()
{
  if (context.callstringformula("$DATABASE_NAME")=="DATABASE_PROD")
  {
    // import from datasource PROD
    return context.callmacro("SP_RQ_PRIME_TEMPO_STUDY_PROD");
  }
  else 
  {
    if (context.callstringformula("$DATABASE_NAME")=="DATABASE_UAT")
    {
      // import from datasource UAT
      return context.callmacro("SP_RQ_PRIME_TEMPO_STUDY_UAT");
    }
    else
    {
      // import from datasource DEV
      return context.callmacro("SP_RQ_PRIME_TEMPO_STUDY_DEV");
    }
  }
}
//This fucntion is used to get the project using project code.
function get_Project_By_Project_Code(projectCode)
{
	var pclass="OpxPROJECT".findclass();
	var ka = new keyattribute(pclass, "SPAS_AA_PROJECT_CODE",projectCode);
	var result=undefined;
	if(projectCode!="")
	{
		fromObject (ka)
		{
			for (var varia in pclass where varia.state!="Simulation")
			{
			  result = varia;
			  break;
			}
		}
	}
  return result;
}
//This fucntion is used to return if study used in TEMPO or not (SP_NF_B_STUDY_USE_IN_TEMP )
function is_Study_Used_In_Tempo(notused)
{
	var trial=this;
	for(var act in trial.get("r.SP_RA_CL_TRIAL_CODE.WORK-STRUCTURE") where act.SP_NF_CL_TRIAL)
	{
		return true;
	}
	return false;
}
is_Study_Used_In_Tempo.exportfunction({"STRING"},"BOOLEAN");

// This function is used to update trial activities.
function update_Trial_Activities(tcode)
{
	if(tcode instanceof OpxSP_PT_CL_TRIAL_CODE)
	{
		for(var act in tcode.get("r.SP_RA_CL_TRIAL_CODE.WORK-STRUCTURE") where act.SP_NF_CL_TRIAL)
		{
			withoutlocking 
			{
				act.DESC=tcode.SP_AA_S_TRIAL_TITLE; //Update description of the activity
				act.SP_RA_CL_CLIN_PHASE=undefined;
				for(var cl_phase in "opxSP_PT_CL_PHASE" where cl_phase.SP_AA_S_PRIME_PHASE==tcode.SP_AA_S_STUDY_PHASE)
				{
					act.SP_RA_CL_CLIN_PHASE=cl_phase; // Update Phase of the activity
				}
				act.SP_RA_CL_GROUP_CAT=undefined; 
				for(var san_group in "opxSP_PT_CL_GROUP_CAT" where san_group.SP_AA_S_PRIME_STD_GROUP==tcode.SP_AA_S_STUDY_GROUP)	
				{
					act.SP_RA_CL_GROUP_CAT=san_group; // Update Sanofi Group of tha activity
				}
				act.SP_AA_S_ROOT_PRODUCT=tcode.SP_AA_S_ROOT_PROD_CODE // Update Root Product of the activity
				act.SP_AA_S_ACT_STUDY_PURPOSE=tcode.SP_AA_S_STUDY_PURPOSE // Update Study Purpose of the activity
			}
		}
	}
}

//Send_Email_PRIME_Prj_Update is used to send email to Tempo Admin when an update in Project Code comes from PRIME to TEMPO
function Send_Email_PRIME_Prj_Update(trial)
{
                if (trial instanceof opxSP_PT_CL_TRIAL_CODE)
                {
                               var recipients = trial.SP_NF_S_PRIME_STDY_UPD_EMAIL_DEST;
                               var subject = "PRIME Study has changed from initial project";
                               var body  = trial.SP_NF_S_PRIME_PRJ_CODE_UPD_MAIL;
							 
                               var sender= "PRIME-TEMPO-IMPORT@OPX2";
                               
                               var PlistForMessage = new vector();
                               PlistForMessage.push("smtp-server");
                               PlistForMessage.push("SMTP-EU.SANOFI.COM");
                               PlistForMessage.push("from");
                               PlistForMessage.push(sender);
                               PlistForMessage.push("to");
                               PlistForMessage.push(recipients);
                               PlistForMessage.push("subject");
                               PlistForMessage.push(subject);
                               PlistForMessage.push("body");
                               PlistForMessage.push(body);
                               PlistForMessage.push("Content-Type") ;
                               PlistForMessage.push("text/html");
                               PlistForMessage.push("additional-headers") ;
                               PlistForMessage.push("Importance,High,X-Priority,1,X-MSMail-Priority,High".parseList()) ;
                               //sending the message
                               if (PlistForMessage.length > 0 && context.SP_GS_B_ENABLE_MAIL_ALERTS) {   
                                 context.sendmailwithplist(PlistForMessage);
                               }
                }
}

// This function will run in order to create/update/inactivate
function prime_tempo_run_import()
{
	var result = false;
	var pclass="OpxSP_PT_CL_TRIAL_CODE".findclass();
	// import to Temperory Table
	writeln("Entering To PRIME-TEMPO Import...");
	result = Prime_Import_InTo_SP_TT_PRIME_STUDIES(); // This function will import the data from Prime Table to Temperory Table of Tempo

	if (result)
	{
		for (var c in "opxSP_TT_PRIME_STUDIES".findclass() where c.NAME instanceof String && c.NAME!="")
		{
			var t_code_exist;
			var prj_code="";
			
			//to check that the trial exist in tempo
			var ka = new keyattribute(pclass, "NAME",c.NAME);
			fromObject (ka)
			{
				for (var t_code in pclass where t_code.PROJECT instanceof OpxPROJECT && t_code.PROJECT.state!="Simulation")
				{
					t_code_exist=t_code;
					prj_code=t_code_exist.PROJECT.SPAS_AA_PROJECT_CODE;
					break;
				}
			}
			
			
			if (t_code_exist instanceof OpxSP_PT_CL_TRIAL_CODE)
			{
				//Inactivation case
				if (c.SP_AA_B_TT_PRIME_FLAG=="I")
				{
					t_code_exist.SP_AA_D_STUDY_INACTIVATE_DATE=c.SP_AA_D_TT_STUDY_PRIME_DATE;
					t_code_exist.SP_AA_B_PRIME_STUDY=true;
				}	
				// Update case
				else 
				{
					t_code_exist.SP_AA_S_TRIAL_TITLE=c.SP_AA_S_TT_TRIAL_TITLE;
					t_code_exist.SP_AA_S_STUDY_PHASE=c.SP_AA_S_TT_STUDY_PHASE;
					t_code_exist.SP_AA_S_STUDY_GROUP=c.SP_AA_S_TT_STUDY_GROUP;
					t_code_exist.SP_AA_S_ROOT_PROD_CODE=c.SP_AA_S_TT_ROOT_PROD_CODE;
					t_code_exist.SP_AA_S_STUDY_PURPOSE=c.SP_AA_S_TT_STUDY_PURPOSE;
					t_code_exist.SP_AA_B_PRIME_STUDY=true;
					if (c.SP_AA_B_TT_PRIME_FLAG=="C")
					{
						t_code_exist.SP_AA_D_STUDY_LAST_UPDATE_DATE=c.SP_AA_D_TT_STUDY_PRIME_DATE;
					}
					else
					{
						t_code_exist.SP_AA_D_STUDY_CREATE_DATE=c.SP_AA_D_TT_STUDY_PRIME_DATE;
					}
					
					// if the project code of the existing trial is the one send by prime we send email to TEMPO admin
					if (prj_code!=c.SP_AA_S_TT_PROJECT_CODE)
					{
						t_code_exist.SP_AA_S_PRIME_PRJ_CODE_UPDATE=c.SP_AA_S_TT_PROJECT_CODE;
						Send_Email_PRIME_Prj_Update(t_code_exist);
					}
					update_Trial_Activities(t_code_exist);
				}
			}
			else
			{
				// Creation case
				var prj=get_Project_By_Project_Code(c.SP_AA_S_TT_PROJECT_CODE)
				if(prj instanceof opxProject)
				{
					var newTC= new "OpxSP_PT_CL_TRIAL_CODE"("NAME",c.NAME,
														"FILE",prj,
														"SP_AA_S_TRIAL_TITLE",c.SP_AA_S_TT_TRIAL_TITLE,
														"SP_AA_S_STUDY_PHASE",c.SP_AA_S_TT_STUDY_PHASE,
														"SP_AA_S_STUDY_GROUP",c.SP_AA_S_TT_STUDY_GROUP,
														"SP_AA_S_ROOT_PROD_CODE",c.SP_AA_S_TT_ROOT_PROD_CODE,
														"SP_AA_S_STUDY_PURPOSE",c.SP_AA_S_TT_STUDY_PURPOSE,
														"SP_AA_B_PRIME_STUDY",true,
														"SP_AA_D_STUDY_CREATE_DATE",c.SP_AA_D_TT_STUDY_PRIME_DATE);		
				}
				else
				{
					writeln("Project "+ c.SP_AA_S_TT_PROJECT_CODE +" doesn't exist");
				}
			}
		}
		// Save the date of last successfull execution from prime
		context.SP_GS_D_LAST_PRIME_IMP_DATE=context.callDateFormula("$DATE_OF_THE_DAY");
	}
	else
	{
		writeln("Error >>Importing To SP_TT_PRIME_STUDIES Temporary Table");
	}
	writeln("PRIME-TEMPO Import Has Finished" );
}
prime_tempo_run_import.exportfunction();



 
//  FILE    : SP_JS_PRIO_INF.ojs
// 
//  AUTHOR  : ysa
// 
//  VERSION : 1.0
// 
//  PURPOSE : #417 Binder POS
// 
//  HISTORY :
var revision_number ="1.2";
//  
//  Revision 1.0: Created by ysa 10:26 17/11/2014 
//  Revision 1.1: Modification by ksk 10:29 03/12/2014 
//  Revision 1.2  01/06/2017_Updated by MPA: commented unused P5 functions + changes on Diff_prev_pos_evaluation()

/*
var POS_phases = new vector("POC","LIC","PH1","PH2","PH3","PH4","PH5");

var POS_phase_labels = new vector (
	"POC", "	Overall POS to POC",
	"LIC", "Overall POS to License",
	"PH1", "	Preclinical",
	"PH2", "Phase I",
	"PH3", "Phase II",
	"PH4", "Phase III",
	"PH5", "Registration"
);

var POS_phase_parent = new vector (
	"POC", "Overall POS",
	"LIC", "Overall POS",
	"PH1", "POS by phase",
	"PH2", "POS by phase",
	"PH3", "POS by phase",
	"PH4", "POS by phase",
	"PH5", "POS by phase"
);


function sp_initialize_POS()
{
	var slot;
	// reset the context attribute on the POS creation popup
	for (var phz in POS_phases) {
		slot = "SP_AA_D_OC_POS_" + phz;
		context.set(slot, -1);
		slot = "SP_AA_N_OC_POS_" + phz;
		context.set(slot, 0);
		slot = "SP_AA_S_OC_POS_" + phz;
		context.set(slot, "");
	}
}

function sp_mandatory_POS()
{
	var slot_date;
	var slot_number;
	var val;
	var input_error = false;

	for (var phz in POS_phases) {
		slot_date = "SP_AA_D_OC_POS_" + phz;
		if (context.get(slot_date) instanceof Date ) {
			slot_number = "SP_AA_N_OC_POS_" + phz;
			val = context.get(slot_number);
			if (val < 0 || val > 100) {
				alert(POS_phase_labels.get(phz) + " POS has an incorrect value, please set a POS value between 0 and 100");
				input_error = true;
			}
		}
	}
	return input_error;
}

function sp_create_POS()
{
	var plist = new vector();
	var slot_date;
	var slot_number;
	var slot_string;
	var o;

	for (var phz in POS_phases ) {
		slot_date = "SP_AA_D_OC_POS_" + phz;

		if (context.get(slot_date) instanceof Date 
		&& POS_phase_parent.get(phz) instanceof string
		&& POS_phase_labels.get(phz) instanceof string ) {
			slot_number = "SP_AA_N_OC_POS_" + phz;
			slot_string = "SP_AA_S_OC_POS_" + phz;

			plist.push("SP_AA_S_POS_GP1"); plist.push(POS_phase_parent.get(phz));
			plist.push("SP_AA_S_POS_GP2"); plist.push(POS_phase_labels.get(phz));

			plist.push("SP_AA_D_POS_DATE"); plist.push(context.get(slot_date));
			plist.push("SP_AA_N_POS_PROB"); plist.push(context.get(slot_number));
			plist.push("SP_AA_S_POS_DRIVER"); plist.push(context.get(slot_string));

			plist.push("FILE"); plist.push(context.PROJECT_WITH_POS);

			o = "OpxSP_PT_NV_PRIO_INF".findclass().Makeopx2objectwithplist(plist);
			plist.clear();
		}
	}
}
*/

// Probability of Success[SP_AA_D_POS_DATE]
// Probability of Success[SP_AA_N_POS_PROB]
// Probability of Success[SP_AA_S_POS_DRIVER]
// Probability of Success[SP_AA_S_POS_GP1]
// Probability of Success[SP_AA_S_POS_GP2]


function Diff_prev_pos_evaluation ()
{
	var result = 1000;
	if ((this instanceof OpxSP_PT_NV_PRIO_INF) && (this.SP_AA_D_POS_DATE instanceof DATE))  // Test sur "Prio Date" (SP_AA_D_POS_DATE)
		fromobject(this.FILE)
			for (var p in "OpxSP_PT_NV_PRIO_INF" order by {{"Inverse", "SP_AA_D_POS_DATE"}})
				if ((p.SP_AA_D_POS_DATE instanceof DATE ) && p.SP_AA_D_POS_DATE < this.SP_AA_D_POS_DATE) {
					result = this.SP_AA_N_OVERALL_POS - p.SP_AA_N_OVERALL_POS;
					break;
				}
	return result;
}
withoutlocking
{
	Diff_prev_pos_evaluation.exportfunction("", "NUMBER", "Diff_prev_pos_evaluation");
}

/*
function Driver_pos_evaluation (year, i)
{
	var Prj = this;
	var v = new vector();
	var tmp = i;
	var result = "";

	fromobject(Prj)
		for (var p in "OpxSP_PT_NV_PRIO_INF" where (p.SP_AA_D_POS_DATE.getyear() == year) order by {{"Inverse", "SP_AA_D_POS_DATE"}}) {
			v.push(p.SP_AA_S_POS_DRIVER);
			tmp = tmp - 1;
			if (tmp < 0) break;
		}

	if (tmp < 0 && v[i] instanceof STRING)
		result = v[i];

	return result;
}
withoutlocking
{
	Driver_pos_evaluation.exportfunction({"Number","Number"},"STRING");
}

function Last_pos_evaluation (year,i)
{
	var Prj = this;
	var v = new vector();
	var tmp = i;
	var result = -1;

	fromobject(Prj)
		for (var p in "OpxSP_PT_NV_PRIO_INF" where(p.SP_AA_D_POS_DATE.getyear()==year) order by {{"Inverse","SP_AA_D_POS_DATE"}}) {
			v.push(p.SP_AA_N_POS_PROB);
			tmp = tmp - 1;
			if (tmp < 0) break;
		}

	if (tmp < 0 && v[i] instanceof NUMBER)
		result=v[i];

	return result;
}
withoutlocking
{
	Last_pos_evaluation.exportfunction({"Number","Number"},"NUMBER");
}
*/

writetolog("Script SP_JS_PRIO_INF loaded with version ~a ", revision_number); 

//  FILE    : SP_JS_PRIO_INF.ojs
// 
//  AUTHOR  : ysa
// 
//  VERSION : 1.0
// 
//  PURPOSE : #417 Binder POS
// 
//  HISTORY :
var revision_number ="1.2";
//  
//  Revision 1.0: Created by ysa 10:26 17/11/2014 
//  Revision 1.1: Modification by ksk 10:29 03/12/2014 
//  Revision 1.2  01/06/2017_Updated by MPA: commented unused P5 functions + changes on Diff_prev_pos_evaluation()

/*
var POS_phases = new vector("POC","LIC","PH1","PH2","PH3","PH4","PH5");

var POS_phase_labels = new vector (
	"POC", "	Overall POS to POC",
	"LIC", "Overall POS to License",
	"PH1", "	Preclinical",
	"PH2", "Phase I",
	"PH3", "Phase II",
	"PH4", "Phase III",
	"PH5", "Registration"
);

var POS_phase_parent = new vector (
	"POC", "Overall POS",
	"LIC", "Overall POS",
	"PH1", "POS by phase",
	"PH2", "POS by phase",
	"PH3", "POS by phase",
	"PH4", "POS by phase",
	"PH5", "POS by phase"
);


function sp_initialize_POS()
{
	var slot;
	// reset the context attribute on the POS creation popup
	for (var phz in POS_phases) {
		slot = "SP_AA_D_OC_POS_" + phz;
		context.set(slot, -1);
		slot = "SP_AA_N_OC_POS_" + phz;
		context.set(slot, 0);
		slot = "SP_AA_S_OC_POS_" + phz;
		context.set(slot, "");
	}
}

function sp_mandatory_POS()
{
	var slot_date;
	var slot_number;
	var val;
	var input_error = false;

	for (var phz in POS_phases) {
		slot_date = "SP_AA_D_OC_POS_" + phz;
		if (context.get(slot_date) instanceof Date ) {
			slot_number = "SP_AA_N_OC_POS_" + phz;
			val = context.get(slot_number);
			if (val < 0 || val > 100) {
				alert(POS_phase_labels.get(phz) + " POS has an incorrect value, please set a POS value between 0 and 100");
				input_error = true;
			}
		}
	}
	return input_error;
}

function sp_create_POS()
{
	var plist = new vector();
	var slot_date;
	var slot_number;
	var slot_string;
	var o;

	for (var phz in POS_phases ) {
		slot_date = "SP_AA_D_OC_POS_" + phz;

		if (context.get(slot_date) instanceof Date 
		&& POS_phase_parent.get(phz) instanceof string
		&& POS_phase_labels.get(phz) instanceof string ) {
			slot_number = "SP_AA_N_OC_POS_" + phz;
			slot_string = "SP_AA_S_OC_POS_" + phz;

			plist.push("SP_AA_S_POS_GP1"); plist.push(POS_phase_parent.get(phz));
			plist.push("SP_AA_S_POS_GP2"); plist.push(POS_phase_labels.get(phz));

			plist.push("SP_AA_D_POS_DATE"); plist.push(context.get(slot_date));
			plist.push("SP_AA_N_POS_PROB"); plist.push(context.get(slot_number));
			plist.push("SP_AA_S_POS_DRIVER"); plist.push(context.get(slot_string));

			plist.push("FILE"); plist.push(context.PROJECT_WITH_POS);

			o = "OpxSP_PT_NV_PRIO_INF".findclass().Makeopx2objectwithplist(plist);
			plist.clear();
		}
	}
}
*/

// Probability of Success[SP_AA_D_POS_DATE]
// Probability of Success[SP_AA_N_POS_PROB]
// Probability of Success[SP_AA_S_POS_DRIVER]
// Probability of Success[SP_AA_S_POS_GP1]
// Probability of Success[SP_AA_S_POS_GP2]


function Diff_prev_pos_evaluation ()
{
	var result = 1000;
	if ((this instanceof OpxSP_PT_NV_PRIO_INF) && (this.SP_AA_D_POS_DATE instanceof DATE))  // Test sur "Prio Date" (SP_AA_D_POS_DATE)
		fromobject(this.FILE)
			for (var p in "OpxSP_PT_NV_PRIO_INF" order by {{"Inverse", "SP_AA_D_POS_DATE"}})
				if ((p.SP_AA_D_POS_DATE instanceof DATE ) && p.SP_AA_D_POS_DATE < this.SP_AA_D_POS_DATE) {
					result = this.SP_AA_N_OVERALL_POS - p.SP_AA_N_OVERALL_POS;
					break;
				}
	return result;
}
withoutlocking
{
	Diff_prev_pos_evaluation.exportfunction("", "NUMBER", "Diff_prev_pos_evaluation");
}

/*
function Driver_pos_evaluation (year, i)
{
	var Prj = this;
	var v = new vector();
	var tmp = i;
	var result = "";

	fromobject(Prj)
		for (var p in "OpxSP_PT_NV_PRIO_INF" where (p.SP_AA_D_POS_DATE.getyear() == year) order by {{"Inverse", "SP_AA_D_POS_DATE"}}) {
			v.push(p.SP_AA_S_POS_DRIVER);
			tmp = tmp - 1;
			if (tmp < 0) break;
		}

	if (tmp < 0 && v[i] instanceof STRING)
		result = v[i];

	return result;
}
withoutlocking
{
	Driver_pos_evaluation.exportfunction({"Number","Number"},"STRING");
}

function Last_pos_evaluation (year,i)
{
	var Prj = this;
	var v = new vector();
	var tmp = i;
	var result = -1;

	fromobject(Prj)
		for (var p in "OpxSP_PT_NV_PRIO_INF" where(p.SP_AA_D_POS_DATE.getyear()==year) order by {{"Inverse","SP_AA_D_POS_DATE"}}) {
			v.push(p.SP_AA_N_POS_PROB);
			tmp = tmp - 1;
			if (tmp < 0) break;
		}

	if (tmp < 0 && v[i] instanceof NUMBER)
		result=v[i];

	return result;
}
withoutlocking
{
	Last_pos_evaluation.exportfunction({"Number","Number"},"NUMBER");
}
*/

writetolog("Script SP_JS_PRIO_INF loaded with version ~a ", revision_number); 

 
//	NAME	: SP_JS_PROCESSES_FIXES
//	AUTHOR  : mpaganon
//  VERSION : 1.0
//  PURPOSE : COMPASS v6 , Processes fixes
//  
//  HISTORY :
var revision_number ="1.2";
//  
//	Revision 1.2 2018-03-13 bcordel
//	adding sp_roa_js_resetElementStyle_tool to reset element of the timeline. 
//
//	Revision 1.1 2017-11-30 mrochas
//	correct _FIN_N_CACHE_LAST_MODIFICATION ... it was impossible to go to admin > settings > all setting with the old definition 
//
//  Revision 1.0 2013-03-07 mpaganon
//   . _ihm_tb_populateToggleToolAttributeList (_ihm_new_toolbar_backcomp_tools):
//		-> used to create toggle button into Toolbar editor (Administration module)
//		-> Bug: replace "OPX2 context" by "Planisware context" to enable toggle creation
//		A SUPPRIMER EN 6.2 CAR C'EST CORRIGE !

function _ihm_tb_populateToggleToolAttributeList(){
	var attrsNames = new Vector();
	for(var attr in "OpxAdditionalAttribute".findclass() where attr.ENTITY == "Planisware context" &&  attr.TYPE == "Boolean")
		attrsNames.push(attr.NAME);
	this.possiblevalues = attrsNames.sort("<");
}

//the date of the last modification of setting fin for cache purpose
//commented : the old definition
// not commented : the corrected : a number can't be nil
 /*  new setting ("_FIN_N_CACHE_LAST_MODIFICATION",
               get_text_key_message_string("Finance.Last_settings_modification"),
               "",
               "NUMBER",
               ""); */
new setting ("_FIN_N_CACHE_LAST_MODIFICATION",
	get_text_key_message_string("Finance.Last_settings_modification"),
	-1,
	"NUMBER",
	"");

function SP_Unit_values()
{
var list = new vector();
for (var x in "OpxCostunit" order by {"NAME"}) {
    if x.monetaryunit list.push(x);
  }
return list;
}

//Function used to apply reset element style tool on roadmap activities
function sp_roa_js_resetElementStyle_tool() {
  var select = _InfGetSelectedObjectOnClass("opxActivity");
  // alert("selection : "+select);
  for (var selected in select) {
	  // alert("element : "+selected);
    if (selected instanceof opxActivity){
      for ( var Roadmap_prop in selected.get("r._BM_RA_GRAPH_PROPERTIES._BM_PT_ROADMAP_PROPERTIES")) {
        if (Roadmap_prop instanceof Opx_BM_PT_ROADMAP_PROPERTIES) {
          Roadmap_prop.delete();
		  alert("Reset done for activity : "+selected.printattribute("NAME"));
        }
      }
    }
  }
}


writetolog("Loading script SP_JS_PROCESSES_FIXES in revision ~a.",revision_number);

//	NAME	: SP_JS_PROCESSES_FIXES
//	AUTHOR  : mpaganon
//  VERSION : 1.0
//  PURPOSE : COMPASS v6 , Processes fixes
//  
//  HISTORY :
var revision_number ="1.2";
//  
//	Revision 1.2 2018-03-13 bcordel
//	adding sp_roa_js_resetElementStyle_tool to reset element of the timeline. 
//
//	Revision 1.1 2017-11-30 mrochas
//	correct _FIN_N_CACHE_LAST_MODIFICATION ... it was impossible to go to admin > settings > all setting with the old definition 
//
//  Revision 1.0 2013-03-07 mpaganon
//   . _ihm_tb_populateToggleToolAttributeList (_ihm_new_toolbar_backcomp_tools):
//		-> used to create toggle button into Toolbar editor (Administration module)
//		-> Bug: replace "OPX2 context" by "Planisware context" to enable toggle creation
//		A SUPPRIMER EN 6.2 CAR C'EST CORRIGE !

function _ihm_tb_populateToggleToolAttributeList(){
	var attrsNames = new Vector();
	for(var attr in "OpxAdditionalAttribute".findclass() where attr.ENTITY == "Planisware context" &&  attr.TYPE == "Boolean")
		attrsNames.push(attr.NAME);
	this.possiblevalues = attrsNames.sort("<");
}

//the date of the last modification of setting fin for cache purpose
//commented : the old definition
// not commented : the corrected : a number can't be nil
 /*  new setting ("_FIN_N_CACHE_LAST_MODIFICATION",
               get_text_key_message_string("Finance.Last_settings_modification"),
               "",
               "NUMBER",
               ""); */
new setting ("_FIN_N_CACHE_LAST_MODIFICATION",
	get_text_key_message_string("Finance.Last_settings_modification"),
	-1,
	"NUMBER",
	"");

function SP_Unit_values()
{
var list = new vector();
for (var x in "OpxCostunit" order by {"NAME"}) {
    if x.monetaryunit list.push(x);
  }
return list;
}

//Function used to apply reset element style tool on roadmap activities
function sp_roa_js_resetElementStyle_tool() {
  var select = _InfGetSelectedObjectOnClass("opxActivity");
  // alert("selection : "+select);
  for (var selected in select) {
	  // alert("element : "+selected);
    if (selected instanceof opxActivity){
      for ( var Roadmap_prop in selected.get("r._BM_RA_GRAPH_PROPERTIES._BM_PT_ROADMAP_PROPERTIES")) {
        if (Roadmap_prop instanceof Opx_BM_PT_ROADMAP_PROPERTIES) {
          Roadmap_prop.delete();
		  alert("Reset done for activity : "+selected.printattribute("NAME"));
        }
      }
    }
  }
}


writetolog("Loading script SP_JS_PROCESSES_FIXES in revision ~a.",revision_number);

 
//	NAME	: SP_JS_PROCESSES_REDEFINITION
//	AUTHOR  : bcordel
//  VERSION : 1.3
//  PURPOSE : COMPASS v6 , Data recovery
//  
//  HISTORY :
var revision_number ="1.15";
//

//  Revision 1.15  2020/05/06 SSK - ITS-INC4150437 TEMPO V6 - issue with version creation
// Updated pv_create_new_version_in_background() to update owner of the version to applet user

//  Revision 1.14  2020/01/13 SKJ - RITM1621670 TEMPO-Update intranet batch log folder.
//  As part of Revision 1.14 we will redfine function _ba_default_path() to set default path as PLW_LOG_DIR instead of OPX2_LOG_DIR for the TEMPO Batch.

//  Revision 1.13  2019/06/06 mblaise ITS-PRB0007230
//  creation of pv_create_new_version_in_background
//  update of "pv_create_new_version" to call function pv_create_new_version_in_background in background and remove baselines copy
//  
//  Revision 1.12  2019/03/01 mblaise
//  update of "pv_create_new_version" to cancel  creation of version if a version is already running on the project and change version DESC to "VERSION - "
// 
//  Revision 1.11  2019/02/27 bcordel
//  modifying "pv_create_new_version" redefinition to not create version when there is already 6 existing (without taking NV version into account) 
// 
//  Revision 1.10  2019/01/02 bcordel
//  Redefining the function _rm_review_js_on_drop_ph to create ph using drag and drop without having fixed rate 
//
// 	V6 : Administration stream
//	Revision 1.9  2018/08/28 Sourabh Jain
//  Revision 1.8 2018/02/26 ORE
//  redefinition Do_On_New_Applet for tc only 
//
//  Revision 1.7  2017/11/24 flecanut
//  modifying "pv_create_new_version" redefinition. 
//   
//	Revision 1.6 2017/11/13 mrochas
//	redefinition of _GuiGetPrintingReport
//   
//  Revision 1.5  2017/10/18 flecanut
//  adding "_tc_save" redefinition (OTD 73397)
//   
//  Revision 1.4  2017/10/18 bcordel
//  adding "pv_create_new_version" redefinition. 
//   
//  Revision 1.3  2017/06/21 bcordel
//  adding "drawindicatorbar" redefinition. 
//   
//  Revision 1.2  2017/01/31 mpaganon
//  renaming "Timecard manager" to "Resource User ID". 
//  
//  Revision 1.1  2017/01/11 bcordel
//  creation of the macro-script grouping native functions redefinition. 
//
//  Revision 1.0  2016/11/15 bcordel
//  creation of the macro-script grouping native functions redefinition. 

//////////
// V6 : Administration stream
// Redefining new_project function to change the opened report.
// Script need dependancie to _INF_JS_LAST_OPENED to be sure to load after.
/////////

function new_project() {
  Context._GUI_IS_IN_CREATION = true;
  var DefaultDatasets = _GlobalSettingsComputeFilesToLinkToProjects().join(",");
  var sd = new Date();
  // sd + 1 year 
  var ed = new Date(sd.date + 365*24*60*60);
  var link = new Hyperlink("Creationform",
    "Class", "Project",
    "Editortype", "SP_RP_PRJ_CREATE_PROJECT",
    "DefaultA1", "ORIGIN-DATE",
    "DefaultV1", sd,
    "DefaultA2", "END-DATE", 
    "DefaultV2", ed,
    "DefaultA3", "LIST-OF-PROVIDERS",
    "DefaultV3", DefaultDatasets,
    "DefaultA4", "PROJECT_TYPE",
    "DefaultV4", "_GuiGetDefaultProjectType".Call(this,"PM")
  );
  if (! (link instanceof Hyperlink)) return -1;
  return _pm_new_project_generic(link);
}

//////////
// V6 : Administration stream
// Redefining _GuiDrawOptionTreeview function to change the advanced option report.
// Script need dependancie to _IHM_JS_LIBRARY to be sure to load after.
/////////

method _GuiDrawOptionTreeview on graphics(){
  var BoldFont =  font("font4");

  // Highlight_Color : declaration to be used in function _GuiDrawOptionTreeview
  var Highlight_Color = color("_IHM_PA_HIGHLIGHT");//hightlight color for the mousable area

  if(this.widget Instanceof javamenu){
    this.Widget.open = true;
    this.widget.BackgroundcolorOverSub = Highlight_Color;
    var Start = this.AppendMenuitem("","");
    var RootMenu = this.appendmenuitem(write_text_key("portal.menuOptions"),"");
    RootMenu.Isopen = true;
    RootMenu.font = BoldFont;
    //initialization
    this._GuiSetFolderForOptionDialog("");
    var Portal = Rootmenu.Appendmenuitem(write_text_key("portal.options"),"_GuiSetFolderForOptionDialog(\"_PL_POPUP_PORTAL_OPTIONS\")");
    
    //var ChangePassword = Rootmenu.AppendMenuitem(write_text_key("teamMember.change_password"),"_IhmModifyUserPassword()");
    
    //Clean up options
    var CleanUp = Rootmenu.AppendMenuitem(write_text_key("ihm.reset_option"),"_GuiSetFolderForOptionDialog(\"_GUI_POPUP_CLEANUP_OPTIONS\")");
    
    //Performance item
    //these items are only available when user in admin
    
    if(context._INF_NF_B_SUPERUSER_MODE){
      var AdminTool = this.AppendMenuitem(write_text_key("portal.adminTools"),"");
      AdminTool.font = BoldFont;
      AdminTool.Isopen = true;
      var EmailPref = Rootmenu.Appendmenuitem(write_text_key("issue.emailPreferences"),"_GuiSetFolderForOptionDialog(\"_WF_POP_OC_EMAIL_PREFERENCES\")");
	  //Enable/Disable
	  var Enable_Disable = Rootmenu.AppendMenuitem(write_text_key("ihm.enable_disable"),"_GuiSetFolderForOptionDialog(\"_GUI_POPUP_DISABLE_WIZARD_UPDATE\")");
	  //System console
      var SystemConsole = this.Appendmenuitem(write_text_key("ihm.boot_manager"),"_GuiLinkToBootManager()");
      var PerformanceTool = AdminTool.AppendMenuItem(write_text_key("menu.performance_tool"),"_GuiSetFolderForOptionDialog(\"_INF_POPUP_PERF_DIALOG_2\")");
      var JavascriptEvaluator = AdminTool.AppendMenuItem(write_text_key("javascript.jsevaluator"),"_guiCallKernelJsEvaluator()");
      JavascriptEvaluator.DragID = Context._GUITOOLSDRAGID.get("EVALUATOR");
      JavascriptEvaluator.DragMask = 10;
      var MonitoringTool = AdminTool.AppendMenuItem(write_text_key("menu.monitoring"),"_GuiSetFolderForOptionDialog(\"_GUI_REPORT_MONITORING_OPTIONS\")");
    }
  }
}


// RM stream 'S2)
// renaming "Timecard manager" to "Resource User ID"
// 
var slot = OpxResource.getSlot("TimecardManager");
slot.comment = "Resource User ID";

method draw_indicator on Graphics (indicator, startX, width, _previewMode) {
	return;
} 




function DeleteAttribute_grid(FieldName){
  if (this.grid != undefined && FieldName != ""){
    var FieldSymbol = FieldName;
    var TableAttributes = this.grid.attributelist.parsevector();
    if(FieldSymbol instanceof string){
      FieldSymbol = new symbol(FieldName,"KEYWORD");
    }
    if(CompareElement(TableAttributes,FieldSymbol) == true){
      TableAttributes.remove(FieldSymbol);
      this.grid.attributelist = TableAttributes.parselist();
    }
  }
}

function AddAttribute_grid(FieldName){
  if (this.grid != undefined && FieldName != undefined){
    var FieldSymbol = FieldName;
    var TableAttributes = this.grid.attributelist.parsevector();
    if(FieldSymbol instanceof string){
      FieldSymbol = new symbol(FieldName,"KEYWORD");
    }
    if(CompareElement(TableAttributes,FieldSymbol) == false){
      TableAttributes.push(FieldSymbol);
      this.grid.attributelist = TableAttributes.parselist();
    }
  }
}

function AddRefenceToGantt(FieldList){
  var ArgList = AddRefenceToGantt.arguments;
  var ArgLength = AddRefenceToGantt.length;

  if (ArgLength > 1){
    for(var counter = 1; counter < ArgLength; counter = counter + 2){
      var CurrentReference = ArgList[counter];
      var CurrentOldReference = ArgList[counter + 1];
      var CurrentFieldName = "";
      if (CurrentOldReference != undefined && CurrentOldReference != ""){
        for (var EachField in FieldList){
          CurrentFieldName = CurrentOldReference.ComputeField(EachField);
		  if (this.grid instanceof objectgrid){
		  this.DeleteAttribute_grid(CurrentFieldName);
		  }
		  else {
		  this.DeleteAttribute(CurrentFieldName);
		  }
        }
      }

      if (CurrentReference != undefined && CurrentReference != ""){
        for (var EachField in FieldList){
          CurrentFieldName = CurrentReference.ComputeField(EachField);
		  if (this.grid instanceof objectgrid)
          {this.AddAttribute_grid(CurrentFieldName);}
		  else
          {this.AddAttribute(CurrentFieldName);}
        }
      }
    }
  }
}

function ManageAllocationDisplayOnGantt() {
  if (! (this Instanceof opxGanttDelta)) return -1;
  var Gantt = this;
  var PreviousFilter = Gantt.getInternalValue("TIME-SYNTHESIS-FILTER");
  var userFormula = undefined;
  var TimeSynthesisFilter = "";
  if(PreviousFilter != undefined) {
    var Formulas = extractfilterfromformula(PreviousFilter);
    if(formulas != false && Formulas.length > 0) {
      userFormula = Formulas[1];
	  if(userFormula == "" || userFormula== undefined){
		userFormula = Formulas[0]
	  }
    }
  }

  // Show or hide the time synthesis
  gantt.showTimeSynthesis = (context._INF_AA_B_SHOW_TIME_SYNTHESIS_FLAG || context._INF_AA_B_DISPLAY_EXPENDITURES) ? true : false ;
  TimeSynthesisFilter = new formula("opxTimeSynthesis","[(RES = \"\" OR RES.PM_RES_FILTER) AND _PM_NF_GANTT_SYNTHESIS_FILTER_FORMULA]","BOOLEAN");
  //Si il existe une formula utilisateur, il faut la conserver
  var FinalFormula = TimeSynthesisFilter;
  if (userformula != undefined && userformula != "") {
    FinalFormula = new Formula("opxTimeSynthesis", TimeSynthesisFilter.Stringdef + " AND " + Userformula, "BOOLEAN");
  }
  Gantt.TimeSynthesisFilter = FinalFormula;
}

function pv_create_new_version(projectId)
{
	var s_result_state="";
	var v_result_state;
	var o_link;
	var n_running_vers=0;
	var project = "OpxProject".get(projectId);
	if(project instanceof OpxProject)
	{
		// Checking if we are not at the limit of version. If yes, cancelling the creation
		if(project.SP_PM_NF_N_NB_TOT_VERSION>=6) 
		{
			alert("The maximum number of project simulations can not exceed 6.");
			return false;
		}
		
		// Checking if a version is already running.  If yes, cancelling the creation
		//for other projects in the same server
		for (var vProcess in "opxbackgroundprocess".findclass() where  vProcess.name.search("pv_create_new_version_") instanceof number)
		{
			n_running_vers++;
		}
		//for the project in an other server
		v_result_state=sqlselect("ORDO_PROJECT",new vector("SP_AA_S_PRJ_LOCK_RUN_VERS"),new vector("STRING"),"ONB="+project.ONB);
		s_result_state=v_result_state[0][0];
		
		// Version Launch
		if ((s_result_state=="" || s_result_state=="Finished") && n_running_vers==0)
		{
			alert("Version launched. Please be patient until your version is fully created, then refresh the page.");
			runbackgroundprocess("pv_create_new_version_"+projectId,"pv_create_new_version_in_background(\""+projectId+"\")",0);
		}
		else alert("A version is already running. Please wait a moment and re-launch your version creation"); 	
	}
}

function pv_create_new_version_in_background(projectID)
{
	var project = "OpxProject".get(projectId);	
	var user=context.applet.user.name;	
	if(project instanceof OpxProject) 
	{
		SqlwithDatabasetransaction
		{
			var s_lock_run_vers="UPDATE ORDO_PROJECT set SP_AA_S_PRJ_LOCK_RUN_VERS='In progress' where ONB="+project.ONB;
			var s_unlock_run_vers="UPDATE ORDO_PROJECT set SP_AA_S_PRJ_LOCK_RUN_VERS='Finished' where ONB="+project.ONB;
			SQLExecuteImmediate(s_lock_run_vers);
			SqlCommit();
			project.CallMacro("CreateANewVersion");
			var projectVersion = undefined;
			for(var version in project.versions order by {{"INVERSE","VERSION_NUMBER"}})
			{
				//la version qui vient d' tre cr  e est celle qui a le plus gros num ro
				projectVersion = version;
				break;
			}
			if(projectVersion instanceof OpxProject)
			{
				projectVersion._PV_AA_S_STATUS = context._PV_AA_S_OC_STATUS;
				projectVersion.VERSION_DOCUMENTATION = context._PV_AA_S_COMMENT;
				projectVersion.owner=user;
				// ALM 453 : Modifying description of version when creating them
				withoutlocking{
					projectVersion.DESC = "VERSION - " +projectVersion.DESC;
				}
				//Inter-project links are not taken into account by default when creating a version
				if(context._PV_AA_B_ALL_LINKS)
				{
					pv_create_inter_project_links(project,projectVersion,true);
				}
				else
				{
					if(context._PV_AA_B_ASYNC_LINKS)
					{
						pv_create_inter_project_links(project,projectVersion,false);
					}
				}
			}
			context._PV_AA_S_OC_STATUS = "";
			context._PV_AA_S_COMMENT = "";
			SQLExecuteImmediate(s_unlock_run_vers);
			SqlCommit();
		}
	}
}

// Correction of OTD 73397 : TimeCard: time entry is not saved into the database when the "TimeCard Manager" field contains a user group
// Correction available in Planisware Processes 6.2.6 -> redefinition to be removed then

function _tc_save(tc) {
  var CurrentUser=context.applet.user;
  if(tc.resource._tc_js_check_if_res_controled_by_user_group(CurrentUser)){
    if (_tc_lock_timesheet(tc) == false){
      tc.savetc(tc._tc_da_b_hat_is_up_to_date,tc._tc_da_b_content_is_up_to_date);
    }
    _tc_unlock_timesheet(tc);
  }
  return false;
}

//////////
// END
//////////

//used by re defined processes function _GuiGetPrintingReport
function sp_js_get_hashtable_from_s_plist(s_plist){
	var v_vect = s_plist.split(",");
	var ht_result = new hashtable("STRING");
	for (var index=0; index<v_vect.length; index+=2){
		ht_result.set(v_vect[index],v_vect[index+1]);
	}
	return ht_result;
}

//to manage deferents default headers & footer by module if needed
method _GuiGetPrintingReport on Opx_sc_pt_reporting(HeaderOrFooter){
  var Currentreporting = this;
  //specific
  var s_currentModule = GetCurrentModule("");
  var ht_other_default_headers = sp_js_get_hashtable_from_s_plist(context.SP_SET_MODULES_OTHER_DEFAULT_PRINTING_HEADER);
  var ht_other_default_footers = sp_js_get_hashtable_from_s_plist(context.SP_SET_MODULES_OTHER_DEFAULT_PRINTING_FOOTER);
  var s_other_default_header = ht_other_default_headers.get(s_currentModule);
  var s_other_default_footer = ht_other_default_footers.get(s_currentModule);
  var o_other_default_header = (s_other_default_header == undefined) ? undefined : "OpxReport".getReplace(s_other_default_header);
  var o_other_default_footer = (s_other_default_footer == undefined) ? undefined : "OpxReport".getReplace(s_other_default_footer);
  var DefaultHeader = (o_other_default_header != undefined) ? o_other_default_header : "OpxReport".getReplace(context._GUI_SET_DEFAULT_PRINTING_HEADER);
  var DefaultFooter = (o_other_default_footer != undefined) ? o_other_default_footer : "OpxReport".getReplace(context._GUI_SET_DEFAULT_PRINTING_FOOTER);
  //end of specific
  var ReportToPrintName = this._RE_DA_S_HEADER;
  var DefaultReport = DefaultHeader;
  if(HeaderOrFooter.ToUpperCase() == "footer".ToUpperCase()){
    ReportToPrintName = this._RE_DA_S_FOOTER;
    DefaultReport = DefaultFooter;
  }
  if(ReportToPrintName InstanceOf String && ReportToPrintName != ""){
    return "OpxReport".getReplace(ReportToPrintName);
  }else{
    if(DefaultReport InstanceOf Opxreport){
      return DefaultReport;
      
    }
  }
  return -1;
}

// deactivation of processes alert in order to change the custom_start_page of tc only
withoutlocking{ "opxAlert".get("_TC_AL_SET_PORTAL_FOR_TC_ONLY").ACTIVE = false}

// redefinition of processes function in order to change the custom_start_page of tc only
function Do_On_New_Applet()
{
  Reset_Date_Field ();
  var Language =(lispcall "MESSAGE-STRING::CURRENT-LANGUAGE"().tostring());
  context._INF_AA_S_CURRENT_LANGUAGE = Language;
  Set_Unit();
  Inf_Set_Date();
  Update_Number_Format();
  Set_Date_And_Duration_Value();
  Load_Generic_Time_Scale();
  //wizard automatic update option initialisation
  Initialize_Wizard_Auto_Update();
  //If tc only user => Display TC page
  if (context._TM_NF_B_TC_NOT_ONLY==false) {
    var currentUser = context.applet.user;
    withoutlocking{
		var mod_tc = opx_GUI_PT_MODULES.get("TM");
		if (not(mod_tc._GUI_AA_B_BYPASS_MCQ) || mod_tc._ELEARN_DA_B_MCQ_COMPLETED)
			{currentUser.CUSTOM_START_PAGE="PORTAIL_FIRST";}
		else
			{currentUser.CUSTOM_START_PAGE="ELEARNING_HOME";}
    }
  }
}

//	Revision 1.9  2018/08/28 Sourabh Jain

function Generic_contextMenuMenuMapper (toolClass, function){
//Draw the menus for the right click (and only menus !!)
//see compute-widget-right-menu
	var o_toolbar = _ihm_tb_getCurrentReportingToolbar();
	if(o_toolbar != undefined){
	var v_tools = o_toolbar._ihm_tb_getContextualTools();
	if(v_tools.length == 0){
	//Backward compatibility : if no contextual tool are set we display all menu tool
	var topLevelTools = ((!(o_toolbar instanceof Opx_IHM_TB_PT_MODEL)) || o_toolbar.INTERNAL == true) ? undefined:o_toolbar.__ihm_tb_getTools__();
	var toolGroupsHash = _ihm_tb_genGetToolBarTools(topLevelTools,false);
	v_tools = toolGroupsHash.get(MENUS_SYM)._ihm_getToolsWithMethod(_ihm_isUnfoldedForToolbar.closure(o_toolbar));
	//end of Backward compatibility
							}
	for(var menu in v_tools
	where menu._ihm_tb_isAmenu() && menu._ihm_tb_isOptionDisplayable()){
	var name = menu._ihm_tb_genToolWidgetName();
	var w = lispcall "XT:SEARCH-WIDGET" (context.applet.toplevelwidget.parseobject(), new symbol (name,"KEYWORD"));
	if(w) {
	function.call(w);
	}else {
	var o_menuEntry = menu._ihm_tb_getMenuEntry(o_toolBar);
	if(o_menuEntry instanceof NewMenuItem)function.call(o_menuEntry);
			}
		}
		}
}

//Redefining the function _rm_review_js_on_drop_ph to create ph using drag and drop without having fixed rate
function _rm_review_js_on_drop_ph(ResourceList,ETypeDesc,DurationComputation,StartDate,EndDate,Role,Skills,Location,Ratio,DisplayForm) {
  if(this InstanceOf OpxActivity){
    for(var Res in ResourceList){
      var ArgList = new vector();
      Arglist.push("RESOURCE");
      Arglist.push(Res);
      Arglist.push("Activity");
      Arglist.push(this);
      Arglist.push("RATE");
      Arglist.push(0);
      Arglist.push("DURATION_COMPUTATION");
	  //added by bcordel
	  Arglist.push("EXTENDIBLE");
      Arglist.push("FIXED_RATE");
	  Arglist.push(false);
      
	  
      //Also setting properly the radio button if DurationComputation is duration=load/rate
      if (DurationComputation=="FROM-COMPUTED-DURING") {
        Arglist.push("_RM_REVIEW_AA_N_MODE");
        Arglist.push(write_text_key("resourceManager.DurationLoadRate"));
      }
      Arglist.push("TYPE");
      Arglist.push(ETypeDesc);
      Arglist.push("FILE");
      Arglist.push(this.FILE);
      if (StartDate instanceof Date) {
        Arglist.push("SD");
        Arglist.push(StartDate);
      }
      if (EndDate instanceof Date) {
        Arglist.push("FD");
        Arglist.push(EndDate);
      }
      if (Role instanceof Opx_RM_REVIEW_PT_ROLE) {
        Arglist.push("_RM_REVIEW_RA_ROLE");
        Arglist.push(Role);
      }
      if (Location instanceof Opx_RM_REVIEW_PT_LOCATIONS) {
        Arglist.push("_RM_REVIEW_RA_LOCATION");
        Arglist.push(Location);
      }
      if (Skills!=false) {
        Arglist.push("RSKILLS");
        Arglist.push(Skills);
      }
      var ArglistLength=Arglist.length;
      if (ArglistLength>1) {
        if (DisplayForm) {
          "OpxAllocation".editobject("_RM_REVIEW_POPUP_PLH",Arglist);
        }
        else {
          "OpxAllocation".makeopx2objectwithplist(Arglist);
        }
      }
    }
  }
}

//Function used to compute the default log path if not specified
function _ba_default_path(NoUse) {
  //Fetching log directory, if not found, fetching temp directory
 // var log_path="(HTTP-UTILS::environment-variable \"OPX2_LOG_DIR\")".lispeval();
  var log_path="(HTTP-UTILS::environment-variable \"PLW_LOG_DIR\")".lispeval();
  if (log_path==false) {
    log_path = lispcall "GENERIC-IO::get-log-directory" ();
    var device = log_path.device.tostring();
    if (device == "UNSPECIFIC") {
      device = "";
    }
    else {
      device = device+":";
    }
    log_path = log_path.directory.join("/");
    log_path = log_path.replaceregexp("ABSOLUTE",device);
  }
  else
  {
	  //We are using rtrim("/log") because if you use PLW_LOG_DIR it will create the directory (folder) for each batch under /logs/DEV6/log and in planisware system console there will be error.
	  // Its because planisware system cons first recognize the log directories instead of log and throws the error.
	log_path=log_path.rtrim("/log");
  }
  return log_path;
}

_ba_default_path.exportfunction({"STRING"},"STRING","Default path for intranet batches");

writetolog("Script SP_JS_PROCESSES_REDEFINITION loaded with version ~a ", revision_number); 

//	NAME	: SP_JS_PROCESSES_REDEFINITION
//	AUTHOR  : bcordel
//  VERSION : 1.3
//  PURPOSE : COMPASS v6 , Data recovery
//  
//  HISTORY :
var revision_number ="1.15";
//

//  Revision 1.15  2020/05/06 SSK - ITS-INC4150437 TEMPO V6 - issue with version creation
// Updated pv_create_new_version_in_background() to update owner of the version to applet user

//  Revision 1.14  2020/01/13 SKJ - RITM1621670 TEMPO-Update intranet batch log folder.
//  As part of Revision 1.14 we will redfine function _ba_default_path() to set default path as PLW_LOG_DIR instead of OPX2_LOG_DIR for the TEMPO Batch.

//  Revision 1.13  2019/06/06 mblaise ITS-PRB0007230
//  creation of pv_create_new_version_in_background
//  update of "pv_create_new_version" to call function pv_create_new_version_in_background in background and remove baselines copy
//  
//  Revision 1.12  2019/03/01 mblaise
//  update of "pv_create_new_version" to cancel  creation of version if a version is already running on the project and change version DESC to "VERSION - "
// 
//  Revision 1.11  2019/02/27 bcordel
//  modifying "pv_create_new_version" redefinition to not create version when there is already 6 existing (without taking NV version into account) 
// 
//  Revision 1.10  2019/01/02 bcordel
//  Redefining the function _rm_review_js_on_drop_ph to create ph using drag and drop without having fixed rate 
//
// 	V6 : Administration stream
//	Revision 1.9  2018/08/28 Sourabh Jain
//  Revision 1.8 2018/02/26 ORE
//  redefinition Do_On_New_Applet for tc only 
//
//  Revision 1.7  2017/11/24 flecanut
//  modifying "pv_create_new_version" redefinition. 
//   
//	Revision 1.6 2017/11/13 mrochas
//	redefinition of _GuiGetPrintingReport
//   
//  Revision 1.5  2017/10/18 flecanut
//  adding "_tc_save" redefinition (OTD 73397)
//   
//  Revision 1.4  2017/10/18 bcordel
//  adding "pv_create_new_version" redefinition. 
//   
//  Revision 1.3  2017/06/21 bcordel
//  adding "drawindicatorbar" redefinition. 
//   
//  Revision 1.2  2017/01/31 mpaganon
//  renaming "Timecard manager" to "Resource User ID". 
//  
//  Revision 1.1  2017/01/11 bcordel
//  creation of the macro-script grouping native functions redefinition. 
//
//  Revision 1.0  2016/11/15 bcordel
//  creation of the macro-script grouping native functions redefinition. 

//////////
// V6 : Administration stream
// Redefining new_project function to change the opened report.
// Script need dependancie to _INF_JS_LAST_OPENED to be sure to load after.
/////////

function new_project() {
  Context._GUI_IS_IN_CREATION = true;
  var DefaultDatasets = _GlobalSettingsComputeFilesToLinkToProjects().join(",");
  var sd = new Date();
  // sd + 1 year 
  var ed = new Date(sd.date + 365*24*60*60);
  var link = new Hyperlink("Creationform",
    "Class", "Project",
    "Editortype", "SP_RP_PRJ_CREATE_PROJECT",
    "DefaultA1", "ORIGIN-DATE",
    "DefaultV1", sd,
    "DefaultA2", "END-DATE", 
    "DefaultV2", ed,
    "DefaultA3", "LIST-OF-PROVIDERS",
    "DefaultV3", DefaultDatasets,
    "DefaultA4", "PROJECT_TYPE",
    "DefaultV4", "_GuiGetDefaultProjectType".Call(this,"PM")
  );
  if (! (link instanceof Hyperlink)) return -1;
  return _pm_new_project_generic(link);
}

//////////
// V6 : Administration stream
// Redefining _GuiDrawOptionTreeview function to change the advanced option report.
// Script need dependancie to _IHM_JS_LIBRARY to be sure to load after.
/////////

method _GuiDrawOptionTreeview on graphics(){
  var BoldFont =  font("font4");

  // Highlight_Color : declaration to be used in function _GuiDrawOptionTreeview
  var Highlight_Color = color("_IHM_PA_HIGHLIGHT");//hightlight color for the mousable area

  if(this.widget Instanceof javamenu){
    this.Widget.open = true;
    this.widget.BackgroundcolorOverSub = Highlight_Color;
    var Start = this.AppendMenuitem("","");
    var RootMenu = this.appendmenuitem(write_text_key("portal.menuOptions"),"");
    RootMenu.Isopen = true;
    RootMenu.font = BoldFont;
    //initialization
    this._GuiSetFolderForOptionDialog("");
    var Portal = Rootmenu.Appendmenuitem(write_text_key("portal.options"),"_GuiSetFolderForOptionDialog(\"_PL_POPUP_PORTAL_OPTIONS\")");
    
    //var ChangePassword = Rootmenu.AppendMenuitem(write_text_key("teamMember.change_password"),"_IhmModifyUserPassword()");
    
    //Clean up options
    var CleanUp = Rootmenu.AppendMenuitem(write_text_key("ihm.reset_option"),"_GuiSetFolderForOptionDialog(\"_GUI_POPUP_CLEANUP_OPTIONS\")");
    
    //Performance item
    //these items are only available when user in admin
    
    if(context._INF_NF_B_SUPERUSER_MODE){
      var AdminTool = this.AppendMenuitem(write_text_key("portal.adminTools"),"");
      AdminTool.font = BoldFont;
      AdminTool.Isopen = true;
      var EmailPref = Rootmenu.Appendmenuitem(write_text_key("issue.emailPreferences"),"_GuiSetFolderForOptionDialog(\"_WF_POP_OC_EMAIL_PREFERENCES\")");
	  //Enable/Disable
	  var Enable_Disable = Rootmenu.AppendMenuitem(write_text_key("ihm.enable_disable"),"_GuiSetFolderForOptionDialog(\"_GUI_POPUP_DISABLE_WIZARD_UPDATE\")");
	  //System console
      var SystemConsole = this.Appendmenuitem(write_text_key("ihm.boot_manager"),"_GuiLinkToBootManager()");
      var PerformanceTool = AdminTool.AppendMenuItem(write_text_key("menu.performance_tool"),"_GuiSetFolderForOptionDialog(\"_INF_POPUP_PERF_DIALOG_2\")");
      var JavascriptEvaluator = AdminTool.AppendMenuItem(write_text_key("javascript.jsevaluator"),"_guiCallKernelJsEvaluator()");
      JavascriptEvaluator.DragID = Context._GUITOOLSDRAGID.get("EVALUATOR");
      JavascriptEvaluator.DragMask = 10;
      var MonitoringTool = AdminTool.AppendMenuItem(write_text_key("menu.monitoring"),"_GuiSetFolderForOptionDialog(\"_GUI_REPORT_MONITORING_OPTIONS\")");
    }
  }
}


// RM stream 'S2)
// renaming "Timecard manager" to "Resource User ID"
// 
var slot = OpxResource.getSlot("TimecardManager");
slot.comment = "Resource User ID";

method draw_indicator on Graphics (indicator, startX, width, _previewMode) {
	return;
} 




function DeleteAttribute_grid(FieldName){
  if (this.grid != undefined && FieldName != ""){
    var FieldSymbol = FieldName;
    var TableAttributes = this.grid.attributelist.parsevector();
    if(FieldSymbol instanceof string){
      FieldSymbol = new symbol(FieldName,"KEYWORD");
    }
    if(CompareElement(TableAttributes,FieldSymbol) == true){
      TableAttributes.remove(FieldSymbol);
      this.grid.attributelist = TableAttributes.parselist();
    }
  }
}

function AddAttribute_grid(FieldName){
  if (this.grid != undefined && FieldName != undefined){
    var FieldSymbol = FieldName;
    var TableAttributes = this.grid.attributelist.parsevector();
    if(FieldSymbol instanceof string){
      FieldSymbol = new symbol(FieldName,"KEYWORD");
    }
    if(CompareElement(TableAttributes,FieldSymbol) == false){
      TableAttributes.push(FieldSymbol);
      this.grid.attributelist = TableAttributes.parselist();
    }
  }
}

function AddRefenceToGantt(FieldList){
  var ArgList = AddRefenceToGantt.arguments;
  var ArgLength = AddRefenceToGantt.length;

  if (ArgLength > 1){
    for(var counter = 1; counter < ArgLength; counter = counter + 2){
      var CurrentReference = ArgList[counter];
      var CurrentOldReference = ArgList[counter + 1];
      var CurrentFieldName = "";
      if (CurrentOldReference != undefined && CurrentOldReference != ""){
        for (var EachField in FieldList){
          CurrentFieldName = CurrentOldReference.ComputeField(EachField);
		  if (this.grid instanceof objectgrid){
		  this.DeleteAttribute_grid(CurrentFieldName);
		  }
		  else {
		  this.DeleteAttribute(CurrentFieldName);
		  }
        }
      }

      if (CurrentReference != undefined && CurrentReference != ""){
        for (var EachField in FieldList){
          CurrentFieldName = CurrentReference.ComputeField(EachField);
		  if (this.grid instanceof objectgrid)
          {this.AddAttribute_grid(CurrentFieldName);}
		  else
          {this.AddAttribute(CurrentFieldName);}
        }
      }
    }
  }
}

function ManageAllocationDisplayOnGantt() {
  if (! (this Instanceof opxGanttDelta)) return -1;
  var Gantt = this;
  var PreviousFilter = Gantt.getInternalValue("TIME-SYNTHESIS-FILTER");
  var userFormula = undefined;
  var TimeSynthesisFilter = "";
  if(PreviousFilter != undefined) {
    var Formulas = extractfilterfromformula(PreviousFilter);
    if(formulas != false && Formulas.length > 0) {
      userFormula = Formulas[1];
	  if(userFormula == "" || userFormula== undefined){
		userFormula = Formulas[0]
	  }
    }
  }

  // Show or hide the time synthesis
  gantt.showTimeSynthesis = (context._INF_AA_B_SHOW_TIME_SYNTHESIS_FLAG || context._INF_AA_B_DISPLAY_EXPENDITURES) ? true : false ;
  TimeSynthesisFilter = new formula("opxTimeSynthesis","[(RES = \"\" OR RES.PM_RES_FILTER) AND _PM_NF_GANTT_SYNTHESIS_FILTER_FORMULA]","BOOLEAN");
  //Si il existe une formula utilisateur, il faut la conserver
  var FinalFormula = TimeSynthesisFilter;
  if (userformula != undefined && userformula != "") {
    FinalFormula = new Formula("opxTimeSynthesis", TimeSynthesisFilter.Stringdef + " AND " + Userformula, "BOOLEAN");
  }
  Gantt.TimeSynthesisFilter = FinalFormula;
}

function pv_create_new_version(projectId)
{
	var s_result_state="";
	var v_result_state;
	var o_link;
	var n_running_vers=0;
	var project = "OpxProject".get(projectId);
	if(project instanceof OpxProject)
	{
		// Checking if we are not at the limit of version. If yes, cancelling the creation
		if(project.SP_PM_NF_N_NB_TOT_VERSION>=6) 
		{
			alert("The maximum number of project simulations can not exceed 6.");
			return false;
		}
		
		// Checking if a version is already running.  If yes, cancelling the creation
		//for other projects in the same server
		for (var vProcess in "opxbackgroundprocess".findclass() where  vProcess.name.search("pv_create_new_version_") instanceof number)
		{
			n_running_vers++;
		}
		//for the project in an other server
		v_result_state=sqlselect("ORDO_PROJECT",new vector("SP_AA_S_PRJ_LOCK_RUN_VERS"),new vector("STRING"),"ONB="+project.ONB);
		s_result_state=v_result_state[0][0];
		
		// Version Launch
		if ((s_result_state=="" || s_result_state=="Finished") && n_running_vers==0)
		{
			alert("Version launched. Please be patient until your version is fully created, then refresh the page.");
			runbackgroundprocess("pv_create_new_version_"+projectId,"pv_create_new_version_in_background(\""+projectId+"\")",0);
		}
		else alert("A version is already running. Please wait a moment and re-launch your version creation"); 	
	}
}

function pv_create_new_version_in_background(projectID)
{
	var project = "OpxProject".get(projectId);	
	var user=context.applet.user.name;	
	if(project instanceof OpxProject) 
	{
		SqlwithDatabasetransaction
		{
			var s_lock_run_vers="UPDATE ORDO_PROJECT set SP_AA_S_PRJ_LOCK_RUN_VERS='In progress' where ONB="+project.ONB;
			var s_unlock_run_vers="UPDATE ORDO_PROJECT set SP_AA_S_PRJ_LOCK_RUN_VERS='Finished' where ONB="+project.ONB;
			SQLExecuteImmediate(s_lock_run_vers);
			SqlCommit();
			project.CallMacro("CreateANewVersion");
			var projectVersion = undefined;
			for(var version in project.versions order by {{"INVERSE","VERSION_NUMBER"}})
			{
				//la version qui vient d' tre cr  e est celle qui a le plus gros num ro
				projectVersion = version;
				break;
			}
			if(projectVersion instanceof OpxProject)
			{
				projectVersion._PV_AA_S_STATUS = context._PV_AA_S_OC_STATUS;
				projectVersion.VERSION_DOCUMENTATION = context._PV_AA_S_COMMENT;
				projectVersion.owner=user;
				// ALM 453 : Modifying description of version when creating them
				withoutlocking{
					projectVersion.DESC = "VERSION - " +projectVersion.DESC;
				}
				//Inter-project links are not taken into account by default when creating a version
				if(context._PV_AA_B_ALL_LINKS)
				{
					pv_create_inter_project_links(project,projectVersion,true);
				}
				else
				{
					if(context._PV_AA_B_ASYNC_LINKS)
					{
						pv_create_inter_project_links(project,projectVersion,false);
					}
				}
			}
			context._PV_AA_S_OC_STATUS = "";
			context._PV_AA_S_COMMENT = "";
			SQLExecuteImmediate(s_unlock_run_vers);
			SqlCommit();
		}
	}
}

// Correction of OTD 73397 : TimeCard: time entry is not saved into the database when the "TimeCard Manager" field contains a user group
// Correction available in Planisware Processes 6.2.6 -> redefinition to be removed then

function _tc_save(tc) {
  var CurrentUser=context.applet.user;
  if(tc.resource._tc_js_check_if_res_controled_by_user_group(CurrentUser)){
    if (_tc_lock_timesheet(tc) == false){
      tc.savetc(tc._tc_da_b_hat_is_up_to_date,tc._tc_da_b_content_is_up_to_date);
    }
    _tc_unlock_timesheet(tc);
  }
  return false;
}

//////////
// END
//////////

//used by re defined processes function _GuiGetPrintingReport
function sp_js_get_hashtable_from_s_plist(s_plist){
	var v_vect = s_plist.split(",");
	var ht_result = new hashtable("STRING");
	for (var index=0; index<v_vect.length; index+=2){
		ht_result.set(v_vect[index],v_vect[index+1]);
	}
	return ht_result;
}

//to manage deferents default headers & footer by module if needed
method _GuiGetPrintingReport on Opx_sc_pt_reporting(HeaderOrFooter){
  var Currentreporting = this;
  //specific
  var s_currentModule = GetCurrentModule("");
  var ht_other_default_headers = sp_js_get_hashtable_from_s_plist(context.SP_SET_MODULES_OTHER_DEFAULT_PRINTING_HEADER);
  var ht_other_default_footers = sp_js_get_hashtable_from_s_plist(context.SP_SET_MODULES_OTHER_DEFAULT_PRINTING_FOOTER);
  var s_other_default_header = ht_other_default_headers.get(s_currentModule);
  var s_other_default_footer = ht_other_default_footers.get(s_currentModule);
  var o_other_default_header = (s_other_default_header == undefined) ? undefined : "OpxReport".getReplace(s_other_default_header);
  var o_other_default_footer = (s_other_default_footer == undefined) ? undefined : "OpxReport".getReplace(s_other_default_footer);
  var DefaultHeader = (o_other_default_header != undefined) ? o_other_default_header : "OpxReport".getReplace(context._GUI_SET_DEFAULT_PRINTING_HEADER);
  var DefaultFooter = (o_other_default_footer != undefined) ? o_other_default_footer : "OpxReport".getReplace(context._GUI_SET_DEFAULT_PRINTING_FOOTER);
  //end of specific
  var ReportToPrintName = this._RE_DA_S_HEADER;
  var DefaultReport = DefaultHeader;
  if(HeaderOrFooter.ToUpperCase() == "footer".ToUpperCase()){
    ReportToPrintName = this._RE_DA_S_FOOTER;
    DefaultReport = DefaultFooter;
  }
  if(ReportToPrintName InstanceOf String && ReportToPrintName != ""){
    return "OpxReport".getReplace(ReportToPrintName);
  }else{
    if(DefaultReport InstanceOf Opxreport){
      return DefaultReport;
      
    }
  }
  return -1;
}

// deactivation of processes alert in order to change the custom_start_page of tc only
withoutlocking{ "opxAlert".get("_TC_AL_SET_PORTAL_FOR_TC_ONLY").ACTIVE = false}

// redefinition of processes function in order to change the custom_start_page of tc only
function Do_On_New_Applet()
{
  Reset_Date_Field ();
  var Language =(lispcall "MESSAGE-STRING::CURRENT-LANGUAGE"().tostring());
  context._INF_AA_S_CURRENT_LANGUAGE = Language;
  Set_Unit();
  Inf_Set_Date();
  Update_Number_Format();
  Set_Date_And_Duration_Value();
  Load_Generic_Time_Scale();
  //wizard automatic update option initialisation
  Initialize_Wizard_Auto_Update();
  //If tc only user => Display TC page
  if (context._TM_NF_B_TC_NOT_ONLY==false) {
    var currentUser = context.applet.user;
    withoutlocking{
		var mod_tc = opx_GUI_PT_MODULES.get("TM");
		if (not(mod_tc._GUI_AA_B_BYPASS_MCQ) || mod_tc._ELEARN_DA_B_MCQ_COMPLETED)
			{currentUser.CUSTOM_START_PAGE="PORTAIL_FIRST";}
		else
			{currentUser.CUSTOM_START_PAGE="ELEARNING_HOME";}
    }
  }
}

//	Revision 1.9  2018/08/28 Sourabh Jain

function Generic_contextMenuMenuMapper (toolClass, function){
//Draw the menus for the right click (and only menus !!)
//see compute-widget-right-menu
	var o_toolbar = _ihm_tb_getCurrentReportingToolbar();
	if(o_toolbar != undefined){
	var v_tools = o_toolbar._ihm_tb_getContextualTools();
	if(v_tools.length == 0){
	//Backward compatibility : if no contextual tool are set we display all menu tool
	var topLevelTools = ((!(o_toolbar instanceof Opx_IHM_TB_PT_MODEL)) || o_toolbar.INTERNAL == true) ? undefined:o_toolbar.__ihm_tb_getTools__();
	var toolGroupsHash = _ihm_tb_genGetToolBarTools(topLevelTools,false);
	v_tools = toolGroupsHash.get(MENUS_SYM)._ihm_getToolsWithMethod(_ihm_isUnfoldedForToolbar.closure(o_toolbar));
	//end of Backward compatibility
							}
	for(var menu in v_tools
	where menu._ihm_tb_isAmenu() && menu._ihm_tb_isOptionDisplayable()){
	var name = menu._ihm_tb_genToolWidgetName();
	var w = lispcall "XT:SEARCH-WIDGET" (context.applet.toplevelwidget.parseobject(), new symbol (name,"KEYWORD"));
	if(w) {
	function.call(w);
	}else {
	var o_menuEntry = menu._ihm_tb_getMenuEntry(o_toolBar);
	if(o_menuEntry instanceof NewMenuItem)function.call(o_menuEntry);
			}
		}
		}
}

//Redefining the function _rm_review_js_on_drop_ph to create ph using drag and drop without having fixed rate
function _rm_review_js_on_drop_ph(ResourceList,ETypeDesc,DurationComputation,StartDate,EndDate,Role,Skills,Location,Ratio,DisplayForm) {
  if(this InstanceOf OpxActivity){
    for(var Res in ResourceList){
      var ArgList = new vector();
      Arglist.push("RESOURCE");
      Arglist.push(Res);
      Arglist.push("Activity");
      Arglist.push(this);
      Arglist.push("RATE");
      Arglist.push(0);
      Arglist.push("DURATION_COMPUTATION");
	  //added by bcordel
	  Arglist.push("EXTENDIBLE");
      Arglist.push("FIXED_RATE");
	  Arglist.push(false);
      
	  
      //Also setting properly the radio button if DurationComputation is duration=load/rate
      if (DurationComputation=="FROM-COMPUTED-DURING") {
        Arglist.push("_RM_REVIEW_AA_N_MODE");
        Arglist.push(write_text_key("resourceManager.DurationLoadRate"));
      }
      Arglist.push("TYPE");
      Arglist.push(ETypeDesc);
      Arglist.push("FILE");
      Arglist.push(this.FILE);
      if (StartDate instanceof Date) {
        Arglist.push("SD");
        Arglist.push(StartDate);
      }
      if (EndDate instanceof Date) {
        Arglist.push("FD");
        Arglist.push(EndDate);
      }
      if (Role instanceof Opx_RM_REVIEW_PT_ROLE) {
        Arglist.push("_RM_REVIEW_RA_ROLE");
        Arglist.push(Role);
      }
      if (Location instanceof Opx_RM_REVIEW_PT_LOCATIONS) {
        Arglist.push("_RM_REVIEW_RA_LOCATION");
        Arglist.push(Location);
      }
      if (Skills!=false) {
        Arglist.push("RSKILLS");
        Arglist.push(Skills);
      }
      var ArglistLength=Arglist.length;
      if (ArglistLength>1) {
        if (DisplayForm) {
          "OpxAllocation".editobject("_RM_REVIEW_POPUP_PLH",Arglist);
        }
        else {
          "OpxAllocation".makeopx2objectwithplist(Arglist);
        }
      }
    }
  }
}

//Function used to compute the default log path if not specified
function _ba_default_path(NoUse) {
  //Fetching log directory, if not found, fetching temp directory
 // var log_path="(HTTP-UTILS::environment-variable \"OPX2_LOG_DIR\")".lispeval();
  var log_path="(HTTP-UTILS::environment-variable \"PLW_LOG_DIR\")".lispeval();
  if (log_path==false) {
    log_path = lispcall "GENERIC-IO::get-log-directory" ();
    var device = log_path.device.tostring();
    if (device == "UNSPECIFIC") {
      device = "";
    }
    else {
      device = device+":";
    }
    log_path = log_path.directory.join("/");
    log_path = log_path.replaceregexp("ABSOLUTE",device);
  }
  else
  {
	  //We are using rtrim("/log") because if you use PLW_LOG_DIR it will create the directory (folder) for each batch under /logs/DEV6/log and in planisware system console there will be error.
	  // Its because planisware system cons first recognize the log directories instead of log and throws the error.
	log_path=log_path.rtrim("/log");
  }
  return log_path;
}

_ba_default_path.exportfunction({"STRING"},"STRING","Default path for intranet batches");

writetolog("Script SP_JS_PROCESSES_REDEFINITION loaded with version ~a ", revision_number); 

 
//SP_JS_PRODUCT_INFO

// MPA_2017-01-17:
// Je récupère ce script pour la fonction getProductGlobalSite() qui est utilisé dans le champ
// "Product site" de l'onlet "Product information" d'une activité
// J'ai mis les autres fonctions en commentaire et remplacé dans chacune d'elle "OpxProduct" par "Opx_SPAS_PT_PRODUCT"
// car la 1ère forme référence la BS1 en Processes v6, et pas la table stockée Compass.

/*

//function to get Global RPM Name
function getProductGlobalRPM(name){
    var result;
	for(var prod in "Opx_SPAS_PT_PRODUCT" where prod.NAME==name  order by {"NAME"} ){
		if (prod.NAME==name){ 
			result =prod._SP_RA_PROD_GRPM.NAME;
			//alert(prod._SP_RA_PROD_GRPM.NAME);
			break;
        }
		else{
			result="";
		}
	}

return result;
}

withoutlocking
{
"getProductGlobalRPM".exportfunction({"STRING"},"STRING");
}
*/

//function to get Global RPM Site
function getProductGlobalSite(name)
{
	for (var prod in "Opx_SPAS_PT_PRODUCT" order by {"NAME"})
		if (prod.NAME==name)
		        return prod._SP_RA_PROD_GRPM_SITE.NAME;

	return "";
}
withoutlocking {
	"getProductGlobalSite".exportfunction({"STRING"}, "STRING");
}

/*

//function to get Franchise
function getProductFranchise(name){
    var result;
	for(var prod in "Opx_SPAS_PT_PRODUCT" where prod.NAME==name order by {"NAME"} ){
			result =prod._SP_RA_PROD_FRAN.NAME;
			break;
	}
return result;
}

withoutlocking
{
"getProductFranchise".exportfunction({"STRING"},"STRING");
}

//function to get Franchise for multiple country
function getProductFranchiseForMultipleCntry(name, cntry)
{
    var result="";
	if (cntry!="")
	{
	
	
	var cntryvect=cntry.split(",");
	for(var prod in "Opx_SPAS_PT_PRODUCT" order by {"NAME"} ){
		for (var Each in cntryvect) {
		if ( prod.NAME==name && prod._SP_RA_PROD_CL_COUNTRY.NAME==Each && prod._SP_RA_PROD_FRANCHISE.NAME !=""){
			result+=prod._SP_RA_PROD_FRANCHISE.NAME+",";
        }
		}
		}
		result =result.substring(0,result.length-1); 
		
	}
	else{
	for(var prod in "Opx_SPAS_PT_PRODUCT" where prod.NAME==name order by {"NAME"} ){
		if (prod._SP_RA_PROD_FRANCHISE.NAME !="")
		{
			result =prod._SP_RA_PROD_FRANCHISE.NAME;
			break;
			}
	}
	
	}
return result;
}

withoutlocking
{
"getProductFranchiseForMultipleCntry".exportfunction({"STRING","STRING"},"STRING");
}

//function to get Local RPM
function getProductLocalRPM(name,country){
    var result="" ;
	var LRPMS new Vector();
	for(var prod in "Opx_SPAS_PT_PRODUCT" order by {"NAME"} ){
		if ( prod.NAME==name && prod._SP_RA_PROD_CL_COUNTRY.NAME==country && prod._SP_RA_PROD_LRPM.NAME !=""){
			result+=prod._SP_RA_PROD_LRPM.NAME+",";
        }
	}
result =result.substring(0,result.length-1); //added
return result;
}

withoutlocking
{
"getProductLocalRPM".exportfunction({"STRING","STRING"},"STRING");
}

//function to get Tradename
function getProductTradeName(name,country){
    var result="";
	for(var prod in "Opx_SPAS_PT_PRODUCT" order by {"NAME"} ){
		if ( prod.NAME==name && prod._SP_RA_PROD_CL_COUNTRY.NAME==country && prod.SP_AA_PRODUCT_TRADENAME!= UNDEFINED){
			result=prod.SP_AA_PRODUCT_TRADENAME;
        }
	}
return result;
}

withoutlocking
{
"getProductTradeName".exportfunction({"STRING","STRING"},"STRING");
}


//function to get Local RPM
function getProductLocalRPMMultiCountry(name,country){
    var result="" ;
	var LRPMS new Vector();
	var cntryvect=country.split(",");
	for(var prod in "Opx_SPAS_PT_PRODUCT" order by {"NAME"} ){
		for (var Each in cntryvect) {
		if ( prod.NAME==name && prod._SP_RA_PROD_CL_COUNTRY.NAME==Each && prod._SP_RA_PROD_LRPM.NAME !=""){
			result+=prod._SP_RA_PROD_LRPM.NAME+",";
        }
		}
	}
result =result.substring(0,result.length-1); //added
return result;
}

withoutlocking
{
"getProductLocalRPMMultiCountry".exportfunction({"STRING","STRING"},"STRING");
}
*/

//SP_JS_PRODUCT_INFO

// MPA_2017-01-17:
// Je récupère ce script pour la fonction getProductGlobalSite() qui est utilisé dans le champ
// "Product site" de l'onlet "Product information" d'une activité
// J'ai mis les autres fonctions en commentaire et remplacé dans chacune d'elle "OpxProduct" par "Opx_SPAS_PT_PRODUCT"
// car la 1ère forme référence la BS1 en Processes v6, et pas la table stockée Compass.

/*

//function to get Global RPM Name
function getProductGlobalRPM(name){
    var result;
	for(var prod in "Opx_SPAS_PT_PRODUCT" where prod.NAME==name  order by {"NAME"} ){
		if (prod.NAME==name){ 
			result =prod._SP_RA_PROD_GRPM.NAME;
			//alert(prod._SP_RA_PROD_GRPM.NAME);
			break;
        }
		else{
			result="";
		}
	}

return result;
}

withoutlocking
{
"getProductGlobalRPM".exportfunction({"STRING"},"STRING");
}
*/

//function to get Global RPM Site
function getProductGlobalSite(name)
{
	for (var prod in "Opx_SPAS_PT_PRODUCT" order by {"NAME"})
		if (prod.NAME==name)
		        return prod._SP_RA_PROD_GRPM_SITE.NAME;

	return "";
}
withoutlocking {
	"getProductGlobalSite".exportfunction({"STRING"}, "STRING");
}

/*

//function to get Franchise
function getProductFranchise(name){
    var result;
	for(var prod in "Opx_SPAS_PT_PRODUCT" where prod.NAME==name order by {"NAME"} ){
			result =prod._SP_RA_PROD_FRAN.NAME;
			break;
	}
return result;
}

withoutlocking
{
"getProductFranchise".exportfunction({"STRING"},"STRING");
}

//function to get Franchise for multiple country
function getProductFranchiseForMultipleCntry(name, cntry)
{
    var result="";
	if (cntry!="")
	{
	
	
	var cntryvect=cntry.split(",");
	for(var prod in "Opx_SPAS_PT_PRODUCT" order by {"NAME"} ){
		for (var Each in cntryvect) {
		if ( prod.NAME==name && prod._SP_RA_PROD_CL_COUNTRY.NAME==Each && prod._SP_RA_PROD_FRANCHISE.NAME !=""){
			result+=prod._SP_RA_PROD_FRANCHISE.NAME+",";
        }
		}
		}
		result =result.substring(0,result.length-1); 
		
	}
	else{
	for(var prod in "Opx_SPAS_PT_PRODUCT" where prod.NAME==name order by {"NAME"} ){
		if (prod._SP_RA_PROD_FRANCHISE.NAME !="")
		{
			result =prod._SP_RA_PROD_FRANCHISE.NAME;
			break;
			}
	}
	
	}
return result;
}

withoutlocking
{
"getProductFranchiseForMultipleCntry".exportfunction({"STRING","STRING"},"STRING");
}

//function to get Local RPM
function getProductLocalRPM(name,country){
    var result="" ;
	var LRPMS new Vector();
	for(var prod in "Opx_SPAS_PT_PRODUCT" order by {"NAME"} ){
		if ( prod.NAME==name && prod._SP_RA_PROD_CL_COUNTRY.NAME==country && prod._SP_RA_PROD_LRPM.NAME !=""){
			result+=prod._SP_RA_PROD_LRPM.NAME+",";
        }
	}
result =result.substring(0,result.length-1); //added
return result;
}

withoutlocking
{
"getProductLocalRPM".exportfunction({"STRING","STRING"},"STRING");
}

//function to get Tradename
function getProductTradeName(name,country){
    var result="";
	for(var prod in "Opx_SPAS_PT_PRODUCT" order by {"NAME"} ){
		if ( prod.NAME==name && prod._SP_RA_PROD_CL_COUNTRY.NAME==country && prod.SP_AA_PRODUCT_TRADENAME!= UNDEFINED){
			result=prod.SP_AA_PRODUCT_TRADENAME;
        }
	}
return result;
}

withoutlocking
{
"getProductTradeName".exportfunction({"STRING","STRING"},"STRING");
}


//function to get Local RPM
function getProductLocalRPMMultiCountry(name,country){
    var result="" ;
	var LRPMS new Vector();
	var cntryvect=country.split(",");
	for(var prod in "Opx_SPAS_PT_PRODUCT" order by {"NAME"} ){
		for (var Each in cntryvect) {
		if ( prod.NAME==name && prod._SP_RA_PROD_CL_COUNTRY.NAME==Each && prod._SP_RA_PROD_LRPM.NAME !=""){
			result+=prod._SP_RA_PROD_LRPM.NAME+",";
        }
		}
	}
result =result.substring(0,result.length-1); //added
return result;
}

withoutlocking
{
"getProductLocalRPMMultiCountry".exportfunction({"STRING","STRING"},"STRING");
}
*/

 
function Sp_get_last_act_pf(id_project)
{
var prj="opxproject".get(id_project);
var result=context.calldateformula("period_start($DATE_OF_THE_DAY,\"YEAR\",1)");

if (prj instanceof OpxProject)
{
	fromobject(prj)
	{
		for(var act in "opxActivity" where act._PM_AA_B_DISPLAY_IN_ROA  order by {{"INVERSE","PF"}})
		{
			result=act.PF;
			break;
		}
	}	
}
return result;
}
Sp_get_last_act_pf.exportfunction({"STRING"},"DATE");

 function sp_js_spot_draw_l_date_timeline() {
	var sStatus = "";
	var oProj = this.object ;

	var oImage = undefined ;
	try{
		if (oProj instanceof OpxProject) {
			var oMTOActivity = oProj.sp_js_get_mto_license_activity();
			if(oMTOActivity instanceof opxActivity){
				oImage=oMTOActivity.sp_js_key_milestone_status_indicator_iconhandler();
			}
			if(oImage instanceof opxImage){
				this.drawimage(oImage.printattribute(), 0, 0, false, false, false, true, 1, 1);
			}
		} 
	}
	catch(error err){
		writeln("[ERROR][sp_js_spot_draw_license_date_sf] :: " + err.toString());
	}	
}

sp_js_spot_draw_l_date_timeline.exportfunction();


function Sp_get_last_act_pf(id_project)
{
var prj="opxproject".get(id_project);
var result=context.calldateformula("period_start($DATE_OF_THE_DAY,\"YEAR\",1)");

if (prj instanceof OpxProject)
{
	fromobject(prj)
	{
		for(var act in "opxActivity" where act._PM_AA_B_DISPLAY_IN_ROA  order by {{"INVERSE","PF"}})
		{
			result=act.PF;
			break;
		}
	}	
}
return result;
}
Sp_get_last_act_pf.exportfunction({"STRING"},"DATE");

 function sp_js_spot_draw_l_date_timeline() {
	var sStatus = "";
	var oProj = this.object ;

	var oImage = undefined ;
	try{
		if (oProj instanceof OpxProject) {
			var oMTOActivity = oProj.sp_js_get_mto_license_activity();
			if(oMTOActivity instanceof opxActivity){
				oImage=oMTOActivity.sp_js_key_milestone_status_indicator_iconhandler();
			}
			if(oImage instanceof opxImage){
				this.drawimage(oImage.printattribute(), 0, 0, false, false, false, true, 1, 1);
			}
		} 
	}
	catch(error err){
		writeln("[ERROR][sp_js_spot_draw_license_date_sf] :: " + err.toString());
	}	
}

sp_js_spot_draw_l_date_timeline.exportfunction();


 
//  FILE    : SP_JS_RAVL_CHANGE.ojs
// 
//  AUTHOR  : ksk
// 
//  VERSION : 1.0
// 
//  PURPOSE : #412 RAVL engine improvement with change - Main script
// 
//  HISTORY :
//  Created  by ksk 10:26 01/07/2014 
//  Modified  by ksk 08:34 29/10/2014 verbosity 
//  Modified  by ksk 15:28 22/05/2017 verbosity 


var DEBUG = false; 
// for (var obj in "OpxSP_PT_RAVL_WORKSHARING"  where   obj.SP_AA_RAVL_CCR==mychange   ) 

// for a given change name, return a list of worksharing, on error an empty list is returned

function mapWorksharing()
{
  var re = new vector();
  var change ;
  var c = 0; 
  
  if (this instanceof String)
  {
    change = "OpxSP_PT_RAVL_CHANGE".get(this);
  }
  
  if (change instanceof OpxSP_PT_RAVL_CHANGE)
  {
    for (var w in change.get("r.SP_RA_RAVL_WSH_CHANGE.SP_PT_RAVL_WORKSHARING"))
    {
      re.push(w); 
      c++;
    }
  }
  if (DEBUG) {writeln("mapWorksharing has retrieved>"+c); }

  return re;   
}

// for a given change name, return a list of variations, on error an empty list is returned

function mapVariation()
{
  var re = new vector();
  var change ;
  var c = 0; 
  
  if (this instanceof String)
  {
    change = "OpxSP_PT_RAVL_CHANGE".get(this);
  }
  
  if (change instanceof OpxSP_PT_RAVL_CHANGE)
  {
    for (var v in change.get("r.SP_RA_RAVL_VARIA_CHANGE.SP_PT_RAVL"))
    {
      re.push(v); 
      c++;
    }
  }
  if (DEBUG) {writeln("mapVariation has retrieved>"+c); }
  
  return re;   
}

// create a change, return the change or undefined on error

function ravl_change_create()
{
  var plist = new vector("NAME");
  var ch;
  var targetFile = "OpxCommonDataset".get("COM_RAVL");
  var creationDate = new date()
  
  if (this instanceof String && ! "OpxSP_PT_RAVL_CHANGE".get(this) instanceof OpxSP_PT_RAVL_CHANGE)
  {
    plist.push(this);
    plist.push("DESC"); plist.push("Created on>"+creationDate.toString());
    plist.push("FILE"); plist.push(targetFile);
    
    ch = "OpxSP_PT_RAVL_CHANGE".findclass().Makeopx2objectwithplist(plist);
    ch.PositiveOnb();
  }
  
  if (DEBUG) {writeln("ravl_change_create>"+ch); }
  return ch
}



//  FILE    : SP_JS_RAVL_CHANGE.ojs
// 
//  AUTHOR  : ksk
// 
//  VERSION : 1.0
// 
//  PURPOSE : #412 RAVL engine improvement with change - Main script
// 
//  HISTORY :
//  Created  by ksk 10:26 01/07/2014 
//  Modified  by ksk 08:34 29/10/2014 verbosity 
//  Modified  by ksk 15:28 22/05/2017 verbosity 


var DEBUG = false; 
// for (var obj in "OpxSP_PT_RAVL_WORKSHARING"  where   obj.SP_AA_RAVL_CCR==mychange   ) 

// for a given change name, return a list of worksharing, on error an empty list is returned

function mapWorksharing()
{
  var re = new vector();
  var change ;
  var c = 0; 
  
  if (this instanceof String)
  {
    change = "OpxSP_PT_RAVL_CHANGE".get(this);
  }
  
  if (change instanceof OpxSP_PT_RAVL_CHANGE)
  {
    for (var w in change.get("r.SP_RA_RAVL_WSH_CHANGE.SP_PT_RAVL_WORKSHARING"))
    {
      re.push(w); 
      c++;
    }
  }
  if (DEBUG) {writeln("mapWorksharing has retrieved>"+c); }

  return re;   
}

// for a given change name, return a list of variations, on error an empty list is returned

function mapVariation()
{
  var re = new vector();
  var change ;
  var c = 0; 
  
  if (this instanceof String)
  {
    change = "OpxSP_PT_RAVL_CHANGE".get(this);
  }
  
  if (change instanceof OpxSP_PT_RAVL_CHANGE)
  {
    for (var v in change.get("r.SP_RA_RAVL_VARIA_CHANGE.SP_PT_RAVL"))
    {
      re.push(v); 
      c++;
    }
  }
  if (DEBUG) {writeln("mapVariation has retrieved>"+c); }
  
  return re;   
}

// create a change, return the change or undefined on error

function ravl_change_create()
{
  var plist = new vector("NAME");
  var ch;
  var targetFile = "OpxCommonDataset".get("COM_RAVL");
  var creationDate = new date()
  
  if (this instanceof String && ! "OpxSP_PT_RAVL_CHANGE".get(this) instanceof OpxSP_PT_RAVL_CHANGE)
  {
    plist.push(this);
    plist.push("DESC"); plist.push("Created on>"+creationDate.toString());
    plist.push("FILE"); plist.push(targetFile);
    
    ch = "OpxSP_PT_RAVL_CHANGE".findclass().Makeopx2objectwithplist(plist);
    ch.PositiveOnb();
  }
  
  if (DEBUG) {writeln("ravl_change_create>"+ch); }
  return ch
}



 
//  FILE    : SP_JS_RAVL_DATA_RECOVERY.ojs
//
//  AUTHOR  : ksk
//
//  VERSION : 1.2
//
//  PURPOSE : RAVL P5 to V6 Data recovery module
//
//  DEPENDENCY : SP_JS_RAVL_WORKSHARING,SP_JS_RAVL_TEMPLATES
//
//  HISTORY :
// Created  by ksk 11:20 12/05/2017, data recovery Variation & wsh
// Modified  by ksk 14:02 20/07/2017, new submission Mode


function ravl_recovery_merged_single()
{
  var res = new vector();
  for (var varia in this.get("r.SP_RA_RAVL_WORKSHARING1.SP_PT_RAVL")
  where varia.SP_AA_RAVL_SUB_MODE == "Single")
  {
    // alert(varia.NAME+">>"+varia.SP_AA_RAVL_SUB_MODE);
    res.push(varia);
  }
  if (res.length <2)
  {
    return this;
  }
  return res;
}

function ravl_recovery_filter_CoR(log)
{
  var c = 0;
  if (this instanceof vector)
  {
    for (var v in this)
    {
      if (v.ravl_read_isCoR("dummy"))
      {
        // alert(v.NAME+"CONV>>Product Merge");
        v.SP_AA_RAVL_SUB_MODE = "Product Merge";
        log.writeln("CONV	~a	~a	~a".format(v.SP_AA_RAVL_SUB_MODE,v.SP_AA_RAVL_RA_ACT_ID,v.SP_RA_RAVL_WORKSHARING1.NAME) );
        c++;
      }
      else if (v.SP_NF_RAVL_COUNTRY_COR_UNDEFINED)
      {
        // alert(v.NAME+">log>>NoCoR Single");
        log.writeln("NOCO	~a	~a	~a".format(v.SP_AA_RAVL_SUB_MODE,v.SP_AA_RAVL_RA_ACT_ID,v.SP_RA_RAVL_WORKSHARING1.NAME) );

        c++;
      }
    }
  }
  return c;
}

function ravl_recovery_rename_wsh(ravlTemplatesHT,log)
{
  // this is a wsh
  var wshID;
  var lastID = new vector();
  var rule;
  var c = 0;
  var anomaly = false;
  
  for (var varia in this.get("r.SP_RA_RAVL_WORKSHARING1.SP_PT_RAVL"))
  {
    rule = ravlTemplatesHT.get(varia.ravl_read_template_rule() );
    wshID = varia.ravl_read_worksharing_ID(rule);
    
    if (wshID instanceof String)
    {
      lastID.push(wshID);
    }
    else
    {
      // anomaly template not found
      log.writeln("ANOM	Template not found for ~a	~a".format(varia.SP_AA_RAVL_RA_ACT_ID,this.NAME) );
      anomaly = true;
      break;
    }
  }
  
  if (!anomaly)
  {
    lastID = lastID.removeduplicates();
    
    if (lastID.length == 1)
    {
      // rename wsh
      this.NAME = lastID[0];
      // log.writeln("RENA	Renaming worksharing ~a with	~a	~a".format(this.ONB,this.NAME,lastID[0]));
      log.writeln("RENA	Renaming worksharing ~a with	~a".format(this.ONB,this.NAME));
      c++;
    }
    else if (lastID.length > 1)
    {
      log.writeln("ANOM	Multiple ID for the renaming of	~a".format(this.NAME) );
    }
    else
    {
      log.writeln("ANOM	Empty worksharing	~a".format(this.NAME) );
    }
  }

  return c;
}

function ravl_recovery_convert_submission(log)
{
  var c = 0;
  
  for (var v in "OpxSP_PT_RAVL".findclass()
    where v.SP_AA_RAVL_SUB_MODE == "Grouping" || v.SP_AA_RAVL_SUB_MODE == "Worksharing and Grouping")
  {
    v.SP_AA_RAVL_SUB_MODE = "Product Merge";
    log.writeln("CONV	~a	~a".format(v.SP_AA_RAVL_SUB_MODE,v.SP_AA_RAVL_RA_ACT_ID) );
    c++;
  }
  alert("Converted>>"+c);
  log.writeln("Submission mode conversion is done on ~a variations".format(c) );
}

function ravl_recovery_PSD(log)
{
	var c = 0;
  var t = 0;
  for (var v in "OpxSP_PT_RAVL".findclass())
  {
    if (v.SP_AA_RAVL_LCC_GO instanceof Date && v.SP_AA_RAVL_LCC_GO != v.SP_AA_RAVL_LIODA)
    {
      v.SP_AA_RAVL_LIODA = v.SP_AA_RAVL_LCC_GO;
      c++;
    }
    else if (v.SP_AA_RAVL_LIODA instanceof Date && v.SP_AA_RAVL_LCC_GO != v.SP_AA_RAVL_LIODA)
    {
      v.SP_AA_RAVL_LCC_GO = v.SP_AA_RAVL_LIODA;
      c++;
    }
    else if (v.SP_AA_RAVL_LCC_GO instanceof Date && v.SP_AA_RAVL_LIODA instanceof Date)
    {
      log.writeln("PSD	Not recovered on ~a	~a	~a".format(v.SP_AA_RAVL_RA_ACT_ID,v.SP_AA_RAVL_LIODA,v.SP_AA_RAVL_LCC_GO) );
    }
    t++;
  }
  log.writeln("PSD copy is done on ~a variations (~a total)".format(c,t) );
}

function ravl_recovery_main()
{
	writetolog("Start data recovery for RAVL using 'ravl_recovery_main' function");
	var res = 0;
	var c = 0;
	
	var pathname = "/compassv6/data_recovery/output";
	
	var dir = mkdir(pathname);
	if (dir instanceof Boolean && dir)
	{
	alert("Directory ~a has been created".format(pathname));
	}

	var log = new fileoutputstream(pathname+"/ravl-data-recovery.log","APPEND");
	var d = new Date();
	if (! log instanceof fileoutputstream)
	{
	return 1;
	}

	var ravlTemplatesHT = new HashTable("STRING");
	var err = ravlTemplatesHT.ravl_set_templateRulesHT();
	alert("Loading template rules return>>"+err);

	log.writeln("Starting RAVL Data Recovery on "+d.toString());
	log.writeln("Starting PSD copy ...");
	log.writeln("Action	desc	SP_AA_RAVL_LIODA	SP_AA_RAVL_LCC_GO");

	ravl_recovery_PSD(log);

	log.writeln("End of PSD copy");

	log.writeln("Starting Submission mode conversion ...");
	log.writeln("Action	Submission Mode	RA Act ID");

	ravl_recovery_convert_submission(log);

	log.writeln("End of Submission mode conversion");

	log.writeln("Starting Submission mode conversion on Single CoR & NoCoR ...");
	log.writeln("Action	Submission Mode	RA Act ID	Wsh");

	for (var w in "opxSP_PT_RAVL_WORKSHARING".findclass())
	{
	res += w.ravl_recovery_merged_single().ravl_recovery_filter_CoR(log);
	c++;
	}

	log.writeln("Processed ~a merged variations on ~a Worksharings".format(res,c));
	log.writeln("End of Submission mode conversion on Single CoR & NoCoR");

	res = 0;
	c = 0;

	log.writeln("Start renaming worksharings ...");
	log.writeln("Action	Desc	Wsh");

	for (var w in "opxSP_PT_RAVL_WORKSHARING".findclass())
	{
	res += w.ravl_recovery_rename_wsh(ravlTemplatesHT,log);
	c++;
	}

	log.writeln("Renamed ~a Worksharings while processing ~a Worksharings".format(res,c));
	log.writeln("End of renaming worksharings");
	log.writeln("End of RAVL Data Recovery on "+d.toString());

	log.close();
	writetolog("End of data recovery for RAVL using 'ravl_recovery_main' function");
}

//  FILE    : SP_JS_RAVL_DATA_RECOVERY.ojs
//
//  AUTHOR  : ksk
//
//  VERSION : 1.2
//
//  PURPOSE : RAVL P5 to V6 Data recovery module
//
//  DEPENDENCY : SP_JS_RAVL_WORKSHARING,SP_JS_RAVL_TEMPLATES
//
//  HISTORY :
// Created  by ksk 11:20 12/05/2017, data recovery Variation & wsh
// Modified  by ksk 14:02 20/07/2017, new submission Mode


function ravl_recovery_merged_single()
{
  var res = new vector();
  for (var varia in this.get("r.SP_RA_RAVL_WORKSHARING1.SP_PT_RAVL")
  where varia.SP_AA_RAVL_SUB_MODE == "Single")
  {
    // alert(varia.NAME+">>"+varia.SP_AA_RAVL_SUB_MODE);
    res.push(varia);
  }
  if (res.length <2)
  {
    return this;
  }
  return res;
}

function ravl_recovery_filter_CoR(log)
{
  var c = 0;
  if (this instanceof vector)
  {
    for (var v in this)
    {
      if (v.ravl_read_isCoR("dummy"))
      {
        // alert(v.NAME+"CONV>>Product Merge");
        v.SP_AA_RAVL_SUB_MODE = "Product Merge";
        log.writeln("CONV	~a	~a	~a".format(v.SP_AA_RAVL_SUB_MODE,v.SP_AA_RAVL_RA_ACT_ID,v.SP_RA_RAVL_WORKSHARING1.NAME) );
        c++;
      }
      else if (v.SP_NF_RAVL_COUNTRY_COR_UNDEFINED)
      {
        // alert(v.NAME+">log>>NoCoR Single");
        log.writeln("NOCO	~a	~a	~a".format(v.SP_AA_RAVL_SUB_MODE,v.SP_AA_RAVL_RA_ACT_ID,v.SP_RA_RAVL_WORKSHARING1.NAME) );

        c++;
      }
    }
  }
  return c;
}

function ravl_recovery_rename_wsh(ravlTemplatesHT,log)
{
  // this is a wsh
  var wshID;
  var lastID = new vector();
  var rule;
  var c = 0;
  var anomaly = false;
  
  for (var varia in this.get("r.SP_RA_RAVL_WORKSHARING1.SP_PT_RAVL"))
  {
    rule = ravlTemplatesHT.get(varia.ravl_read_template_rule() );
    wshID = varia.ravl_read_worksharing_ID(rule);
    
    if (wshID instanceof String)
    {
      lastID.push(wshID);
    }
    else
    {
      // anomaly template not found
      log.writeln("ANOM	Template not found for ~a	~a".format(varia.SP_AA_RAVL_RA_ACT_ID,this.NAME) );
      anomaly = true;
      break;
    }
  }
  
  if (!anomaly)
  {
    lastID = lastID.removeduplicates();
    
    if (lastID.length == 1)
    {
      // rename wsh
      this.NAME = lastID[0];
      // log.writeln("RENA	Renaming worksharing ~a with	~a	~a".format(this.ONB,this.NAME,lastID[0]));
      log.writeln("RENA	Renaming worksharing ~a with	~a".format(this.ONB,this.NAME));
      c++;
    }
    else if (lastID.length > 1)
    {
      log.writeln("ANOM	Multiple ID for the renaming of	~a".format(this.NAME) );
    }
    else
    {
      log.writeln("ANOM	Empty worksharing	~a".format(this.NAME) );
    }
  }

  return c;
}

function ravl_recovery_convert_submission(log)
{
  var c = 0;
  
  for (var v in "OpxSP_PT_RAVL".findclass()
    where v.SP_AA_RAVL_SUB_MODE == "Grouping" || v.SP_AA_RAVL_SUB_MODE == "Worksharing and Grouping")
  {
    v.SP_AA_RAVL_SUB_MODE = "Product Merge";
    log.writeln("CONV	~a	~a".format(v.SP_AA_RAVL_SUB_MODE,v.SP_AA_RAVL_RA_ACT_ID) );
    c++;
  }
  alert("Converted>>"+c);
  log.writeln("Submission mode conversion is done on ~a variations".format(c) );
}

function ravl_recovery_PSD(log)
{
	var c = 0;
  var t = 0;
  for (var v in "OpxSP_PT_RAVL".findclass())
  {
    if (v.SP_AA_RAVL_LCC_GO instanceof Date && v.SP_AA_RAVL_LCC_GO != v.SP_AA_RAVL_LIODA)
    {
      v.SP_AA_RAVL_LIODA = v.SP_AA_RAVL_LCC_GO;
      c++;
    }
    else if (v.SP_AA_RAVL_LIODA instanceof Date && v.SP_AA_RAVL_LCC_GO != v.SP_AA_RAVL_LIODA)
    {
      v.SP_AA_RAVL_LCC_GO = v.SP_AA_RAVL_LIODA;
      c++;
    }
    else if (v.SP_AA_RAVL_LCC_GO instanceof Date && v.SP_AA_RAVL_LIODA instanceof Date)
    {
      log.writeln("PSD	Not recovered on ~a	~a	~a".format(v.SP_AA_RAVL_RA_ACT_ID,v.SP_AA_RAVL_LIODA,v.SP_AA_RAVL_LCC_GO) );
    }
    t++;
  }
  log.writeln("PSD copy is done on ~a variations (~a total)".format(c,t) );
}

function ravl_recovery_main()
{
	writetolog("Start data recovery for RAVL using 'ravl_recovery_main' function");
	var res = 0;
	var c = 0;
	
	var pathname = "/compassv6/data_recovery/output";
	
	var dir = mkdir(pathname);
	if (dir instanceof Boolean && dir)
	{
	alert("Directory ~a has been created".format(pathname));
	}

	var log = new fileoutputstream(pathname+"/ravl-data-recovery.log","APPEND");
	var d = new Date();
	if (! log instanceof fileoutputstream)
	{
	return 1;
	}

	var ravlTemplatesHT = new HashTable("STRING");
	var err = ravlTemplatesHT.ravl_set_templateRulesHT();
	alert("Loading template rules return>>"+err);

	log.writeln("Starting RAVL Data Recovery on "+d.toString());
	log.writeln("Starting PSD copy ...");
	log.writeln("Action	desc	SP_AA_RAVL_LIODA	SP_AA_RAVL_LCC_GO");

	ravl_recovery_PSD(log);

	log.writeln("End of PSD copy");

	log.writeln("Starting Submission mode conversion ...");
	log.writeln("Action	Submission Mode	RA Act ID");

	ravl_recovery_convert_submission(log);

	log.writeln("End of Submission mode conversion");

	log.writeln("Starting Submission mode conversion on Single CoR & NoCoR ...");
	log.writeln("Action	Submission Mode	RA Act ID	Wsh");

	for (var w in "opxSP_PT_RAVL_WORKSHARING".findclass())
	{
	res += w.ravl_recovery_merged_single().ravl_recovery_filter_CoR(log);
	c++;
	}

	log.writeln("Processed ~a merged variations on ~a Worksharings".format(res,c));
	log.writeln("End of Submission mode conversion on Single CoR & NoCoR");

	res = 0;
	c = 0;

	log.writeln("Start renaming worksharings ...");
	log.writeln("Action	Desc	Wsh");

	for (var w in "opxSP_PT_RAVL_WORKSHARING".findclass())
	{
	res += w.ravl_recovery_rename_wsh(ravlTemplatesHT,log);
	c++;
	}

	log.writeln("Renamed ~a Worksharings while processing ~a Worksharings".format(res,c));
	log.writeln("End of renaming worksharings");
	log.writeln("End of RAVL Data Recovery on "+d.toString());

	log.close();
	writetolog("End of data recovery for RAVL using 'ravl_recovery_main' function");
}

 
//  FILE    : SP_JS_RAVL_EXECUTE.ojs
//
//  AUTHOR  : ksk
//
//  VERSION : 2.0
//
//  PURPOSE : RAVL Main
//
//  DEPENDENCY : SP_JS_RAVL_CHANGE, SP_JS_RAVL_UTILITIES, SP_JS_RAVL_WORKSHARING
//
//  HISTORY :
// Created  by ksk 12:17 30/01/2017, refactoring legacy code
// Modified  by ksk 15:57 13/02/2017, linking
// Modified  by ksk 10:36 19/04/2017, updating dlrp.s
// Modified  by ksk 16:41 12/07/2017, Cancelled no plan
// Modified  by ksk 14:02 20/07/2017, new submission Mode
// Modified  by ksk 14:22 20/09/2017, statuses for update PSD
// Modified  by ksk 17:57 26/10/2017, Grafting mode
// Modified  by ksk 11:19 15/11/2017, Linking on existing plan
// Modified  by ksk 15:07 05/12/2017, VRDLRP status error
// Modified  by ksk 09:55 13/03/2018, ITS-INC0577634 soft reject for any update PSD on CMS
// Modified  by lfa 17:55 16/03/2018, Error reject VAR_ACT WBS not found



function ravl_change_staging()
{
  // this is a vector of variations
  // var res;
  var change;
  
  for (var varia in this)
  {
    change = "OpxSP_PT_RAVL_CHANGE".get(varia.SP_NF_RAVL_ID);
    if (! change instanceof OpxSP_PT_RAVL_CHANGE)
    {
      change = varia.SP_NF_RAVL_ID.ravl_change_create();
    }
    if (change instanceof OpxSP_PT_RAVL_CHANGE)
    {
      varia.SP_RA_RAVL_VARIA_CHANGE = change;
      // res = 0;
    }
    else
    {
      varia.ravl_trace_log("RCS - CRITICAL Error on change creation");
      varia.SP_AA_S_RAVL_RECOVERY_STATUS = "rejected";
      // res = 1;
    }
  }
  // return res;
}

function ravl_read_processAction()
{
  // this is a variation
  var res = new vector(this.SP_AA_S_RAVL_UPDATE_ACTION,this.SP_AA_S_RAVL_RECOVERY_STATUS);
  return res.join("-");
}

function ravl_reduce_creation()
{
  // this is a vector of variations
  var res = new vector();
  for (var c in this where c.ravl_read_processAction() == "VARCRE-created")
  {
    res.push(c);
  }
  return res;
}

function ravl_graft_plan()
{
  // this is a variation
  var wsh = this.SP_RA_RAVL_WORKSHARING1;
  var scion;
  var oldbranch;
  var stock;
  var proj = "opxProject".get(this.SP_AA_RAVL_RA_PRJ);
  var branch;
  
  // scion extraction
  for (var a in wsh.get("r.SP_RA_RAVL_WORKSHARING.WORK-STRUCTURE") 
  where a.WBS_TYPE instanceof OpxWbsType && a.WBS_TYPE.NAME == "VAR_ACT" )
  {
    scion = a;
    break;
  }
  // stock generation
  if (scion instanceof OpxNetwork)
  {
    oldbranch = scion.WBS_ELEMENT;
    branch = proj.ravl_retrieve_root(ravl_create_VARMGT);
    stock = branch.ravl_retrieve_branch(this.SP_NF_RAVL_ID,ravl_create_branch_change,this)
    .ravl_retrieve_branch(wsh.SP_AA_RAVL_PRODUCT,ravl_create_branch_product,wsh)
    .ravl_retrieve_branch(this.ravl_read_submission_process_branch(),ravl_create_branch_submission,this )
    .ravl_retrieve_branch(this.SP_RA_RAVL_COUNTRY.NAME,ravl_create_branch_country,this );
  }
  else
  {
    this.ravl_trace_log("RGP - VAR_ACT WBS not found");
    this.SP_AA_S_RAVL_RECOVERY_STATUS = "rejected";
    this.SP_AA_S_RAVL_STATUS = "Error";
    return 4;
  }
  // grafting
  if (stock instanceof OpxNetwork)
  {
    this.ravl_trace_log("RGP - grafted under "+stock.printattribute());
    scion.WBS_ELEMENT = stock;
  }
  else
  {
    this.ravl_trace_log("RGP - Unable to retrieve new branch for grafting");
    this.SP_AA_S_RAVL_RECOVERY_STATUS = "rejected";
    this.SP_AA_S_RAVL_STATUS = "Error";
    return 5;
  }
  // pruning
  // alert("oldbranch-before>>"+oldbranch);
  
  this.ravl_trace_log("RGP - Attempt to prune WBS element - "+oldbranch.NAME);
  oldbranch = oldbranch.ravl_prune_wbs(this);
  
  this.SP_AA_S_RAVL_RECOVERY_STATUS = "validated";
  this.SP_AA_S_RAVL_STATUS = "Validated";
  
  // alert("scion>>"+scion);
  // alert("oldbranch>>"+oldbranch);
  // alert("stock>>"+stock);
}

function ravl_process_variations()
{
  // this is a vector variations
  var processAction = new vector(
  "VARCRE-created","ravl_insert_plan"
  ,"NOAUTO-updated","ravl_pass_through"
  ,"CGDLRP-updated","ravl_delete_replace"
  ,"VRDLRP-updated","ravl_delete_replace"
  ,"VARDEL-updated","ravl_remove_plan"
  ,"CGUPDA-updated","ravl_update_PSD"
  ,"TTLUPD-updated","ravl_update_title"
  );
  var action;
  
  var ravlLinksHT = new HashTable("STRING");
  var t = ravlLinksHT.ravl_set_linkingRulesHT();
  
  this.ravl_change_staging();
  
  this.ravl_reduce_creation().ravl_worsharing_staging();
  
  for (var varia in this )
  // where varia.SP_RA_RAVL_WORKSHARING1 instanceof opxSP_PT_RAVL_WORKSHARING)
  {
    action = processAction.get(varia.ravl_read_processAction());
    
    if (action instanceof String)
    {
      varia.ravl_trace_log("Triggering "+action);
      action.call(varia,ravlLinksHT);
    }
  }
}

function ravl_insert_plan(ravlLinksHT)
{
  // this is a variation
  var wsh = this.SP_RA_RAVL_WORKSHARING1;
  // alert("ravl_insert_plan");
  if (! wsh instanceof opxSP_PT_RAVL_WORKSHARING)
  {
    this.ravl_trace_log("RIP - No template to insert!");
    this.SP_AA_S_RAVL_RECOVERY_STATUS = "rejected";
    this.SP_AA_S_RAVL_STATUS = "Error";
    return 3;
  }
  
  // Regulatory Affairs Variation Lifecycle Table[SP_NF_B_RAVL_NO_CREATION]
  if (this.SP_NF_B_RAVL_NO_CREATION)
  {
    this.ravl_trace_log("Aborting plan insertion");
    this.SP_AA_S_RAVL_RECOVERY_STATUS = "validated";
    this.SP_AA_S_RAVL_STATUS = "Cancelled";
    return 0;
  }
  
  if (wsh.ravl_worsharing_has_plan())
  {
    // a plan is present
    this.ravl_trace_log("has already a plan, entering grafting mode");
    this.ravl_graft_plan();
    this.ravl_generate_links(ravlLinksHT);
    // this.SP_AA_S_RAVL_RECOVERY_STATUS = "validated";
    // this.SP_AA_S_RAVL_STATUS = "Validated";
    return 0;
  }
  
  var library;
  if (wsh.ItemplateRule instanceof OpxSP_PT_RAVL_CAT_TEMPLATE)
  {
    library = "opxProject".get(wsh.ItemplateRule.get("NAME"));
  }
  
  var proj = "opxProject".get(this.SP_AA_RAVL_RA_PRJ);
  
  if !(library instanceof opxProject && proj instanceof opxProject )
  {
    this.ravl_trace_log("RIP - FATAL Error - projects not found");
    this.SP_AA_S_RAVL_RECOVERY_STATUS = "rejected";
    this.SP_AA_S_RAVL_STATUS = "Error";
    return 1;
  }
  var branch = proj.ravl_retrieve_root(ravl_create_VARMGT);
  
  var val = branch.ravl_retrieve_branch(this.SP_NF_RAVL_ID,ravl_create_branch_change,this)
  .ravl_retrieve_branch(wsh.SP_AA_RAVL_PRODUCT,ravl_create_branch_product,wsh)
  .ravl_retrieve_branch(this.ravl_read_submission_process_branch(),ravl_create_branch_submission,this )
  .ravl_retrieve_branch(this.SP_RA_RAVL_COUNTRY.NAME,ravl_create_branch_country,this )
  .ravl_retrieve_branch(this.ravl_read_variation_branch(),ravl_create_branch_variation,this );
  
  this.ravl_trace_log("ravl_insert_plan under "+val);
  
  var buffer = new vector();
  fromObject(library)
  {
    for (var a in OpxActivity)
    {
      buffer.push(a);
    }
  }
  buffer = buffer.removechildren();
  buffer.CallMacro("ResetTheClipboard");
  buffer.CallMacro("CopyIntoTheClipboard");
  
  if (val instanceof OpxNetwork)
  {
    val.CallMacro("PasteTo");
    buffer.CallMacro("ResetTheClipboard");
  }
  else
  {
    this.ravl_trace_log("RIP - CRITICAL Error VAR_ACT level undefined");
    this.SP_AA_S_RAVL_RECOVERY_STATUS = "rejected";
    this.SP_AA_S_RAVL_STATUS = "Error";
    return 2;
  }
  
  val.ravl_grow_plan(this);
  
  wsh.ravl_worsharing_diffuse();
  
  this.ravl_schedule_plan();
  
  // this.ravl_process_links(ravlLinksHT);
  
  // if (this.SP_AA_RAVL_MEMBER_STATE2 == "RMS")
  // {
    // this.ravl_process_links_rms(ravlLinksHT);
  // }
  
  this.ravl_generate_links(ravlLinksHT);
  
  this.SP_AA_S_RAVL_RECOVERY_STATUS = "validated";
  this.SP_AA_S_RAVL_STATUS = "Validated";
  return 0;
}

function ravl_remove_plan(dummy)
{
  // this is a variation
  var branch;
  var parent;
  var wsh = this.SP_RA_RAVL_WORKSHARING1;
  var c = 0;
  
  if (! wsh instanceof OpxSP_PT_RAVL_WORKSHARING)
  {
    this.ravl_trace_log("RRP - No plan to remove!");
	// log statuses
    if (this.ravl_read_processAction() == "VARDEL-updated")
    {
      this.SP_AA_S_RAVL_RECOVERY_STATUS = "validated";
      this.SP_AA_S_RAVL_STATUS = "Cancelled";
    }
    return branch;    
  }
  for (var a in wsh.get("r.SP_RA_RAVL_WORKSHARING.WORK-STRUCTURE") 
    where a.WBS_TYPE instanceof OpxWbsType && a.WBS_TYPE.NAME == "VAR_ACT" )
  {
    branch = a;
    break;
  }
  
  if (branch instanceof OpxNetwork)
  {
    parent = branch.WBS_ELEMENT;
    this.ravl_trace_log("RRP - Removal of VAR_ACT WBS - "+branch.NAME);
    branch.delete();
    // remove wsh
    wsh.delete();
    
    this.ravl_trace_log("RRP - Attempt to prune WBS element - "+parent.NAME);
    parent = parent.ravl_prune_wbs(this);
    // log statuses
    if (this.ravl_read_processAction() == "VARDEL-updated")
    {
      this.SP_AA_S_RAVL_RECOVERY_STATUS = "validated";
      this.SP_AA_S_RAVL_STATUS = "Cancelled";
    }
  }
  else
  {
	this.SP_AA_S_RAVL_RECOVERY_STATUS = "rejected";
	this.SP_AA_S_RAVL_STATUS = "Error";
    this.ravl_trace_log("RRP - VAR_ACT WBS not found");
  }

  
  return parent;
}

function ravl_prune_wbs(varia)
{
  // this is an activity
  var parent = this.WBS_ELEMENT;
  if (this.WBS_TYPE instanceof OpxWbsType && this.WBS_TYPE.NAME != "VAR_MGT"
  && this.get("?EMPTY"))
  {
    varia.ravl_trace_log("RPW - Pruning WBS element - "+this.printattribute() );
    this.delete();
    // recurse on parent
    return parent.ravl_prune_wbs(varia);
  }
  else
  {
    return this;
  }
}

function ravl_update_PSD(dummy)
{
  // this is a variation
  var res;
  var wbsTypeAction = new vector(
  "VAR_LASTDOC","ravl_plan_PSD"
  ,"VAR_GO","ravl_plan_PSD"
  );
  var action;
  
  var wsh = this.SP_RA_RAVL_WORKSHARING1;
  if (! wsh instanceof OpxSP_PT_RAVL_WORKSHARING)
  {
    this.ravl_trace_log("RUPSD - CRITICAL Error - Worksharing not found!");
	this.SP_AA_S_RAVL_RECOVERY_STATUS = "rejected";
    this.SP_AA_S_RAVL_STATUS = "Error";
    return "ERROR-RUPSD";
  }
  
  // soft reject before plan PSD
  this.SP_AA_S_RAVL_RECOVERY_STATUS = "rejected";
  
  for (var a in wsh.get("r.SP_RA_RAVL_WORKSHARING.WORK-STRUCTURE") )
  {
    action = wbsTypeAction.get(a.wbs_type.name);
    
    if (action instanceof String)
    {
      this.ravl_trace_log("Update PSD triggers>"+action);
      action.call(a, this);
    }
  }

  return res;
}

function ravl_delete_replace(ravlLinksHT)
{
  // this is a variation
  var current = new vector(this);
  
  this.ravl_remove_plan(ravlLinksHT);
  
  current.ravl_worsharing_staging();
  // removed with grafting mode : this.ravl_worsharing_staging_update();
  
  if (this.SP_RA_RAVL_WORKSHARING1 instanceof OpxSP_PT_RAVL_WORKSHARING)
  {
    this.ravl_insert_plan(ravlLinksHT);
  }
  else
  {
    this.ravl_trace_log("RDR - No template to Replace plan");
    this.SP_AA_S_RAVL_RECOVERY_STATUS = "rejected";
    this.SP_AA_S_RAVL_STATUS = "Error";
  }
  
}

function ravl_worsharing_staging_update()
{
  // this is a variation
  var ravlTemplatesHT = new HashTable("STRING");
  var err = ravlTemplatesHT.ravl_set_templateRulesHT();
  var rule;
  var wshID;
  
  var pList = new vector();
  var uwsh = this.SP_RA_RAVL_WORKSHARING1;
  if (! uwsh instanceof OpxSP_PT_RAVL_WORKSHARING)
  {
    this.ravl_trace_log("RWSU - Warning - Worksharing not found!");
    return "WARNING-RWSU";
  }
  
  this.ravl_trace_log("RWSU - Gathering extra products");
  
  for (var uvar in this.SP_NF_RAVL_ID.mapVariation()
  where "..DLRP-updated".test(uvar.ravl_read_processAction()) 
  && (uvar.SP_AA_RAVL_SUB_MODE == "Worksharing" || uvar.SP_AA_RAVL_SUB_MODE == "Product Merge")
  )
  {
    context.ravl_trace_log("extra>>"+uvar);
    rule = ravlTemplatesHT.get(uvar.ravl_read_template_rule() );
    wshID = uvar.ravl_read_worksharing_ID(rule);
    context.ravl_trace_log("wshID>>"+wshID);
    if(wshID instanceof String && uwsh.NAME == wshID)
    {
      pList.push(uvar.SP_NF_S_RAVL_PRODUCT_NAME);
    }
  }
  
  this.ravl_trace_log("Product list>"+pList);
  uwsh.ravl_worsharing_product_modify(pList);
}

function ravl_update_title(dummy)
{
  // this is a variation
  var wsh = this.SP_RA_RAVL_WORKSHARING1;
  if (! wsh instanceof opxSP_PT_RAVL_WORKSHARING)
  {
    this.ravl_trace_log("RUT - No plan to update!");
    this.SP_AA_S_RAVL_RECOVERY_STATUS = "rejected";
    return 1;
  }
  
  var proj = "opxProject".get(this.SP_AA_RAVL_RA_PRJ);
  if (! proj instanceof opxProject )
  {
    this.ravl_trace_log("RUT - FATAL Error - project not found");
    this.SP_AA_S_RAVL_RECOVERY_STATUS = "rejected";
    return 1;
  }
  var branch = proj.ravl_retrieve_root(ravl_create_dummy);
  var val = branch.ravl_retrieve_branch(this.SP_NF_RAVL_ID,ravl_create_branch_dummy,this);
  
  var label = new vector(this.SP_AA_RAVL_VARIATION_TITLE,this.SP_NF_RAVL_ID);
  var changeGrouping = new vector(this.SP_NF_RAVL_ID, this.SP_AA_RAVL_VARIATION_TITLE);
  
  if (val instanceof OpxNetwork)
  {
    this.ravl_trace_log("RUT - updating title of "+val.wbs_type.NAME);
    val.desc = label.join(" - ");
    this.ravl_trace_log("RUT - updated title to "+val.desc);
  }
  else
  {
    this.ravl_trace_log("RUT - CRITICAL Error Change level undefined");
    this.SP_AA_S_RAVL_RECOVERY_STATUS = "rejected";
    return 2;
  }
  
  // udating activities
  wsh.SP_AA_ACT_RAVL_CCR = changeGrouping.join(" - ");
  this.ravl_trace_log("RUT - updated title in grouping to "+wsh.SP_AA_ACT_RAVL_CCR);
  
  for (var a in wsh.get("r.SP_RA_RAVL_WORKSHARING.WORK-STRUCTURE"))
  {
    a.SP_AA_RAVL_I_CCR = wsh.SP_AA_ACT_RAVL_CCR;
  }
  this.SP_AA_S_RAVL_RECOVERY_STATUS = "validated";
  this.SP_AA_S_RAVL_STATUS = "Validated";
  
}


function ravl_create_dummy()
{
  var dummy;
  return dummy;
}

function ravl_create_branch_dummy(dataO)
{
  var dummy;
  return dummy;
}

function ravl_pass_through(dummy)
{
  // this is a variation
  this.SP_AA_S_RAVL_RECOVERY_STATUS = "validated";
  this.SP_AA_S_RAVL_STATUS = "Validated";
}

function ravl_generate_links(ravlLinksHT)
{
  // this is a variation
  this.ravl_process_links(ravlLinksHT);
  
  if (this.SP_AA_RAVL_MEMBER_STATE2 == "RMS")
  {
    this.ravl_process_links_rms(ravlLinksHT);
  }
  
  // Leading CoR variation with process action ..DLRP-updated will regenerate links
  if (this.SP_AA_B_RAVL_LEADING_COR  
  && "..DLRP-updated".test(this.ravl_read_processAction())
  && this.ravl_read_isCoR("dummy"))
  {
    this.ravl_process_links_CoR(ravlLinksHT);
  }
  
}


//  FILE    : SP_JS_RAVL_EXECUTE.ojs
//
//  AUTHOR  : ksk
//
//  VERSION : 2.0
//
//  PURPOSE : RAVL Main
//
//  DEPENDENCY : SP_JS_RAVL_CHANGE, SP_JS_RAVL_UTILITIES, SP_JS_RAVL_WORKSHARING
//
//  HISTORY :
// Created  by ksk 12:17 30/01/2017, refactoring legacy code
// Modified  by ksk 15:57 13/02/2017, linking
// Modified  by ksk 10:36 19/04/2017, updating dlrp.s
// Modified  by ksk 16:41 12/07/2017, Cancelled no plan
// Modified  by ksk 14:02 20/07/2017, new submission Mode
// Modified  by ksk 14:22 20/09/2017, statuses for update PSD
// Modified  by ksk 17:57 26/10/2017, Grafting mode
// Modified  by ksk 11:19 15/11/2017, Linking on existing plan
// Modified  by ksk 15:07 05/12/2017, VRDLRP status error
// Modified  by ksk 09:55 13/03/2018, ITS-INC0577634 soft reject for any update PSD on CMS
// Modified  by lfa 17:55 16/03/2018, Error reject VAR_ACT WBS not found



function ravl_change_staging()
{
  // this is a vector of variations
  // var res;
  var change;
  
  for (var varia in this)
  {
    change = "OpxSP_PT_RAVL_CHANGE".get(varia.SP_NF_RAVL_ID);
    if (! change instanceof OpxSP_PT_RAVL_CHANGE)
    {
      change = varia.SP_NF_RAVL_ID.ravl_change_create();
    }
    if (change instanceof OpxSP_PT_RAVL_CHANGE)
    {
      varia.SP_RA_RAVL_VARIA_CHANGE = change;
      // res = 0;
    }
    else
    {
      varia.ravl_trace_log("RCS - CRITICAL Error on change creation");
      varia.SP_AA_S_RAVL_RECOVERY_STATUS = "rejected";
      // res = 1;
    }
  }
  // return res;
}

function ravl_read_processAction()
{
  // this is a variation
  var res = new vector(this.SP_AA_S_RAVL_UPDATE_ACTION,this.SP_AA_S_RAVL_RECOVERY_STATUS);
  return res.join("-");
}

function ravl_reduce_creation()
{
  // this is a vector of variations
  var res = new vector();
  for (var c in this where c.ravl_read_processAction() == "VARCRE-created")
  {
    res.push(c);
  }
  return res;
}

function ravl_graft_plan()
{
  // this is a variation
  var wsh = this.SP_RA_RAVL_WORKSHARING1;
  var scion;
  var oldbranch;
  var stock;
  var proj = "opxProject".get(this.SP_AA_RAVL_RA_PRJ);
  var branch;
  
  // scion extraction
  for (var a in wsh.get("r.SP_RA_RAVL_WORKSHARING.WORK-STRUCTURE") 
  where a.WBS_TYPE instanceof OpxWbsType && a.WBS_TYPE.NAME == "VAR_ACT" )
  {
    scion = a;
    break;
  }
  // stock generation
  if (scion instanceof OpxNetwork)
  {
    oldbranch = scion.WBS_ELEMENT;
    branch = proj.ravl_retrieve_root(ravl_create_VARMGT);
    stock = branch.ravl_retrieve_branch(this.SP_NF_RAVL_ID,ravl_create_branch_change,this)
    .ravl_retrieve_branch(wsh.SP_AA_RAVL_PRODUCT,ravl_create_branch_product,wsh)
    .ravl_retrieve_branch(this.ravl_read_submission_process_branch(),ravl_create_branch_submission,this )
    .ravl_retrieve_branch(this.SP_RA_RAVL_COUNTRY.NAME,ravl_create_branch_country,this );
  }
  else
  {
    this.ravl_trace_log("RGP - VAR_ACT WBS not found");
    this.SP_AA_S_RAVL_RECOVERY_STATUS = "rejected";
    this.SP_AA_S_RAVL_STATUS = "Error";
    return 4;
  }
  // grafting
  if (stock instanceof OpxNetwork)
  {
    this.ravl_trace_log("RGP - grafted under "+stock.printattribute());
    scion.WBS_ELEMENT = stock;
  }
  else
  {
    this.ravl_trace_log("RGP - Unable to retrieve new branch for grafting");
    this.SP_AA_S_RAVL_RECOVERY_STATUS = "rejected";
    this.SP_AA_S_RAVL_STATUS = "Error";
    return 5;
  }
  // pruning
  // alert("oldbranch-before>>"+oldbranch);
  
  this.ravl_trace_log("RGP - Attempt to prune WBS element - "+oldbranch.NAME);
  oldbranch = oldbranch.ravl_prune_wbs(this);
  
  this.SP_AA_S_RAVL_RECOVERY_STATUS = "validated";
  this.SP_AA_S_RAVL_STATUS = "Validated";
  
  // alert("scion>>"+scion);
  // alert("oldbranch>>"+oldbranch);
  // alert("stock>>"+stock);
}

function ravl_process_variations()
{
  // this is a vector variations
  var processAction = new vector(
  "VARCRE-created","ravl_insert_plan"
  ,"NOAUTO-updated","ravl_pass_through"
  ,"CGDLRP-updated","ravl_delete_replace"
  ,"VRDLRP-updated","ravl_delete_replace"
  ,"VARDEL-updated","ravl_remove_plan"
  ,"CGUPDA-updated","ravl_update_PSD"
  ,"TTLUPD-updated","ravl_update_title"
  );
  var action;
  
  var ravlLinksHT = new HashTable("STRING");
  var t = ravlLinksHT.ravl_set_linkingRulesHT();
  
  this.ravl_change_staging();
  
  this.ravl_reduce_creation().ravl_worsharing_staging();
  
  for (var varia in this )
  // where varia.SP_RA_RAVL_WORKSHARING1 instanceof opxSP_PT_RAVL_WORKSHARING)
  {
    action = processAction.get(varia.ravl_read_processAction());
    
    if (action instanceof String)
    {
      varia.ravl_trace_log("Triggering "+action);
      action.call(varia,ravlLinksHT);
    }
  }
}

function ravl_insert_plan(ravlLinksHT)
{
  // this is a variation
  var wsh = this.SP_RA_RAVL_WORKSHARING1;
  // alert("ravl_insert_plan");
  if (! wsh instanceof opxSP_PT_RAVL_WORKSHARING)
  {
    this.ravl_trace_log("RIP - No template to insert!");
    this.SP_AA_S_RAVL_RECOVERY_STATUS = "rejected";
    this.SP_AA_S_RAVL_STATUS = "Error";
    return 3;
  }
  
  // Regulatory Affairs Variation Lifecycle Table[SP_NF_B_RAVL_NO_CREATION]
  if (this.SP_NF_B_RAVL_NO_CREATION)
  {
    this.ravl_trace_log("Aborting plan insertion");
    this.SP_AA_S_RAVL_RECOVERY_STATUS = "validated";
    this.SP_AA_S_RAVL_STATUS = "Cancelled";
    return 0;
  }
  
  if (wsh.ravl_worsharing_has_plan())
  {
    // a plan is present
    this.ravl_trace_log("has already a plan, entering grafting mode");
    this.ravl_graft_plan();
    this.ravl_generate_links(ravlLinksHT);
    // this.SP_AA_S_RAVL_RECOVERY_STATUS = "validated";
    // this.SP_AA_S_RAVL_STATUS = "Validated";
    return 0;
  }
  
  var library;
  if (wsh.ItemplateRule instanceof OpxSP_PT_RAVL_CAT_TEMPLATE)
  {
    library = "opxProject".get(wsh.ItemplateRule.get("NAME"));
  }
  
  var proj = "opxProject".get(this.SP_AA_RAVL_RA_PRJ);
  
  if !(library instanceof opxProject && proj instanceof opxProject )
  {
    this.ravl_trace_log("RIP - FATAL Error - projects not found");
    this.SP_AA_S_RAVL_RECOVERY_STATUS = "rejected";
    this.SP_AA_S_RAVL_STATUS = "Error";
    return 1;
  }
  var branch = proj.ravl_retrieve_root(ravl_create_VARMGT);
  
  var val = branch.ravl_retrieve_branch(this.SP_NF_RAVL_ID,ravl_create_branch_change,this)
  .ravl_retrieve_branch(wsh.SP_AA_RAVL_PRODUCT,ravl_create_branch_product,wsh)
  .ravl_retrieve_branch(this.ravl_read_submission_process_branch(),ravl_create_branch_submission,this )
  .ravl_retrieve_branch(this.SP_RA_RAVL_COUNTRY.NAME,ravl_create_branch_country,this )
  .ravl_retrieve_branch(this.ravl_read_variation_branch(),ravl_create_branch_variation,this );
  
  this.ravl_trace_log("ravl_insert_plan under "+val);
  
  var buffer = new vector();
  fromObject(library)
  {
    for (var a in OpxActivity)
    {
      buffer.push(a);
    }
  }
  buffer = buffer.removechildren();
  buffer.CallMacro("ResetTheClipboard");
  buffer.CallMacro("CopyIntoTheClipboard");
  
  if (val instanceof OpxNetwork)
  {
    val.CallMacro("PasteTo");
    buffer.CallMacro("ResetTheClipboard");
  }
  else
  {
    this.ravl_trace_log("RIP - CRITICAL Error VAR_ACT level undefined");
    this.SP_AA_S_RAVL_RECOVERY_STATUS = "rejected";
    this.SP_AA_S_RAVL_STATUS = "Error";
    return 2;
  }
  
  val.ravl_grow_plan(this);
  
  wsh.ravl_worsharing_diffuse();
  
  this.ravl_schedule_plan();
  
  // this.ravl_process_links(ravlLinksHT);
  
  // if (this.SP_AA_RAVL_MEMBER_STATE2 == "RMS")
  // {
    // this.ravl_process_links_rms(ravlLinksHT);
  // }
  
  this.ravl_generate_links(ravlLinksHT);
  
  this.SP_AA_S_RAVL_RECOVERY_STATUS = "validated";
  this.SP_AA_S_RAVL_STATUS = "Validated";
  return 0;
}

function ravl_remove_plan(dummy)
{
  // this is a variation
  var branch;
  var parent;
  var wsh = this.SP_RA_RAVL_WORKSHARING1;
  var c = 0;
  
  if (! wsh instanceof OpxSP_PT_RAVL_WORKSHARING)
  {
    this.ravl_trace_log("RRP - No plan to remove!");
	// log statuses
    if (this.ravl_read_processAction() == "VARDEL-updated")
    {
      this.SP_AA_S_RAVL_RECOVERY_STATUS = "validated";
      this.SP_AA_S_RAVL_STATUS = "Cancelled";
    }
    return branch;    
  }
  for (var a in wsh.get("r.SP_RA_RAVL_WORKSHARING.WORK-STRUCTURE") 
    where a.WBS_TYPE instanceof OpxWbsType && a.WBS_TYPE.NAME == "VAR_ACT" )
  {
    branch = a;
    break;
  }
  
  if (branch instanceof OpxNetwork)
  {
    parent = branch.WBS_ELEMENT;
    this.ravl_trace_log("RRP - Removal of VAR_ACT WBS - "+branch.NAME);
    branch.delete();
    // remove wsh
    wsh.delete();
    
    this.ravl_trace_log("RRP - Attempt to prune WBS element - "+parent.NAME);
    parent = parent.ravl_prune_wbs(this);
    // log statuses
    if (this.ravl_read_processAction() == "VARDEL-updated")
    {
      this.SP_AA_S_RAVL_RECOVERY_STATUS = "validated";
      this.SP_AA_S_RAVL_STATUS = "Cancelled";
    }
  }
  else
  {
	this.SP_AA_S_RAVL_RECOVERY_STATUS = "rejected";
	this.SP_AA_S_RAVL_STATUS = "Error";
    this.ravl_trace_log("RRP - VAR_ACT WBS not found");
  }

  
  return parent;
}

function ravl_prune_wbs(varia)
{
  // this is an activity
  var parent = this.WBS_ELEMENT;
  if (this.WBS_TYPE instanceof OpxWbsType && this.WBS_TYPE.NAME != "VAR_MGT"
  && this.get("?EMPTY"))
  {
    varia.ravl_trace_log("RPW - Pruning WBS element - "+this.printattribute() );
    this.delete();
    // recurse on parent
    return parent.ravl_prune_wbs(varia);
  }
  else
  {
    return this;
  }
}

function ravl_update_PSD(dummy)
{
  // this is a variation
  var res;
  var wbsTypeAction = new vector(
  "VAR_LASTDOC","ravl_plan_PSD"
  ,"VAR_GO","ravl_plan_PSD"
  );
  var action;
  
  var wsh = this.SP_RA_RAVL_WORKSHARING1;
  if (! wsh instanceof OpxSP_PT_RAVL_WORKSHARING)
  {
    this.ravl_trace_log("RUPSD - CRITICAL Error - Worksharing not found!");
	this.SP_AA_S_RAVL_RECOVERY_STATUS = "rejected";
    this.SP_AA_S_RAVL_STATUS = "Error";
    return "ERROR-RUPSD";
  }
  
  // soft reject before plan PSD
  this.SP_AA_S_RAVL_RECOVERY_STATUS = "rejected";
  
  for (var a in wsh.get("r.SP_RA_RAVL_WORKSHARING.WORK-STRUCTURE") )
  {
    action = wbsTypeAction.get(a.wbs_type.name);
    
    if (action instanceof String)
    {
      this.ravl_trace_log("Update PSD triggers>"+action);
      action.call(a, this);
    }
  }

  return res;
}

function ravl_delete_replace(ravlLinksHT)
{
  // this is a variation
  var current = new vector(this);
  
  this.ravl_remove_plan(ravlLinksHT);
  
  current.ravl_worsharing_staging();
  // removed with grafting mode : this.ravl_worsharing_staging_update();
  
  if (this.SP_RA_RAVL_WORKSHARING1 instanceof OpxSP_PT_RAVL_WORKSHARING)
  {
    this.ravl_insert_plan(ravlLinksHT);
  }
  else
  {
    this.ravl_trace_log("RDR - No template to Replace plan");
    this.SP_AA_S_RAVL_RECOVERY_STATUS = "rejected";
    this.SP_AA_S_RAVL_STATUS = "Error";
  }
  
}

function ravl_worsharing_staging_update()
{
  // this is a variation
  var ravlTemplatesHT = new HashTable("STRING");
  var err = ravlTemplatesHT.ravl_set_templateRulesHT();
  var rule;
  var wshID;
  
  var pList = new vector();
  var uwsh = this.SP_RA_RAVL_WORKSHARING1;
  if (! uwsh instanceof OpxSP_PT_RAVL_WORKSHARING)
  {
    this.ravl_trace_log("RWSU - Warning - Worksharing not found!");
    return "WARNING-RWSU";
  }
  
  this.ravl_trace_log("RWSU - Gathering extra products");
  
  for (var uvar in this.SP_NF_RAVL_ID.mapVariation()
  where "..DLRP-updated".test(uvar.ravl_read_processAction()) 
  && (uvar.SP_AA_RAVL_SUB_MODE == "Worksharing" || uvar.SP_AA_RAVL_SUB_MODE == "Product Merge")
  )
  {
    context.ravl_trace_log("extra>>"+uvar);
    rule = ravlTemplatesHT.get(uvar.ravl_read_template_rule() );
    wshID = uvar.ravl_read_worksharing_ID(rule);
    context.ravl_trace_log("wshID>>"+wshID);
    if(wshID instanceof String && uwsh.NAME == wshID)
    {
      pList.push(uvar.SP_NF_S_RAVL_PRODUCT_NAME);
    }
  }
  
  this.ravl_trace_log("Product list>"+pList);
  uwsh.ravl_worsharing_product_modify(pList);
}

function ravl_update_title(dummy)
{
  // this is a variation
  var wsh = this.SP_RA_RAVL_WORKSHARING1;
  if (! wsh instanceof opxSP_PT_RAVL_WORKSHARING)
  {
    this.ravl_trace_log("RUT - No plan to update!");
    this.SP_AA_S_RAVL_RECOVERY_STATUS = "rejected";
    return 1;
  }
  
  var proj = "opxProject".get(this.SP_AA_RAVL_RA_PRJ);
  if (! proj instanceof opxProject )
  {
    this.ravl_trace_log("RUT - FATAL Error - project not found");
    this.SP_AA_S_RAVL_RECOVERY_STATUS = "rejected";
    return 1;
  }
  var branch = proj.ravl_retrieve_root(ravl_create_dummy);
  var val = branch.ravl_retrieve_branch(this.SP_NF_RAVL_ID,ravl_create_branch_dummy,this);
  
  var label = new vector(this.SP_AA_RAVL_VARIATION_TITLE,this.SP_NF_RAVL_ID);
  var changeGrouping = new vector(this.SP_NF_RAVL_ID, this.SP_AA_RAVL_VARIATION_TITLE);
  
  if (val instanceof OpxNetwork)
  {
    this.ravl_trace_log("RUT - updating title of "+val.wbs_type.NAME);
    val.desc = label.join(" - ");
    this.ravl_trace_log("RUT - updated title to "+val.desc);
  }
  else
  {
    this.ravl_trace_log("RUT - CRITICAL Error Change level undefined");
    this.SP_AA_S_RAVL_RECOVERY_STATUS = "rejected";
    return 2;
  }
  
  // udating activities
  wsh.SP_AA_ACT_RAVL_CCR = changeGrouping.join(" - ");
  this.ravl_trace_log("RUT - updated title in grouping to "+wsh.SP_AA_ACT_RAVL_CCR);
  
  for (var a in wsh.get("r.SP_RA_RAVL_WORKSHARING.WORK-STRUCTURE"))
  {
    a.SP_AA_RAVL_I_CCR = wsh.SP_AA_ACT_RAVL_CCR;
  }
  this.SP_AA_S_RAVL_RECOVERY_STATUS = "validated";
  this.SP_AA_S_RAVL_STATUS = "Validated";
  
}


function ravl_create_dummy()
{
  var dummy;
  return dummy;
}

function ravl_create_branch_dummy(dataO)
{
  var dummy;
  return dummy;
}

function ravl_pass_through(dummy)
{
  // this is a variation
  this.SP_AA_S_RAVL_RECOVERY_STATUS = "validated";
  this.SP_AA_S_RAVL_STATUS = "Validated";
}

function ravl_generate_links(ravlLinksHT)
{
  // this is a variation
  this.ravl_process_links(ravlLinksHT);
  
  if (this.SP_AA_RAVL_MEMBER_STATE2 == "RMS")
  {
    this.ravl_process_links_rms(ravlLinksHT);
  }
  
  // Leading CoR variation with process action ..DLRP-updated will regenerate links
  if (this.SP_AA_B_RAVL_LEADING_COR  
  && "..DLRP-updated".test(this.ravl_read_processAction())
  && this.ravl_read_isCoR("dummy"))
  {
    this.ravl_process_links_CoR(ravlLinksHT);
  }
  
}


 
//  FILE    : SP_JS_RAVL_INSERT_PLAN.ojs
//
//  AUTHOR  : ksk
//
//  VERSION : 2.0
//
//  PURPOSE : RAVL Insert plan
//
//  HISTORY :
// Created  by ksk 10:37 13/12/2016, refactoring legacy code.. LXSu
// Modified  by ksk 15:42 02/11/2017, CH0063 & 0064 Local Preparation

var DEBUG_LEVEL=1;

function ravl_retrieve_root(createVARMGT)
{
  // seeking VAR_MGT branch from the project identified by ist activity type
  var res;
  var varMGT = "OpxWbsType".get("VAR_MGT");

  if !(varMGT instanceof OpxActivityType && this instanceof OpxProject)
  {
    return res;
  }

  fromObject(this)
  {
    for (var n in "OpxNetwork" where n.wbs_type == varMGT)
    {
      res = n;
      break;
    }
  }

  if (! res instanceof OpxWbsElement)
  {
    res = createVARMGT.call(this);
  }
  return res
}

function ravl_create_VARMGT()
{
  var branch;
  var varMGT = "OpxWbsType".get("VAR_MGT");
  var obs = "OpxObsElement".findclass().get(context.SP_NF_RAVL_OBS);
  var root;
  fromObject(this)
  {
    for(var n in "OpxNetwork" where n.level<2)
    {
      root = n;
      break;
    }
  }
  
  if(root instanceof OpxWbsElement 
      && varMGT instanceof OpxWbsType 
      && obs instanceof OpxObsElement)
  {
    alert("root>>"+root);
    withoutalerts{
      withoutlocking{
        branch = new OpxWbsElement (
        "Name","Variation Management",
        "Desc","Variation Management",
        "WbsElement",root,
        // "SP_AA_RAVL_ID_CHANGE",vRacine,
        // "SP_RA_RAVL_ACT_RAVL",myRavl,
        "File",this,
        "WBS_TYPE",varMGT,
        "OBS_ELEMENT",obs
        // "SP_AA_RAVL_ACT_TYPE","VAR_MGT",
        // "SP_AA_RAVL_STD_TYPE","New_VAR_MGT"
        );
      }
    }
  }
  else
  {
    context.ravl_trace_log("RCV - Unable to create Variation Management");
  }
  return branch
}

function ravl_retrieve_branch(branchID,createBranch,dataO)
{
  var res;
  if (! (this instanceof OpxNetwork && branchID instanceof String) )
  {
    return res;
  }

  fromObject(this)
  {
    for (var n in "OpxNetwork" where n.SP_AA_RAVL_ID_CHANGE == branchID)
    {
      res = n;
      break;
    }
  }

  if (! res instanceof OpxWbsElement)
  {
    res = createBranch.call(this,dataO);
  }
  return res
}

function ravl_create_branch_change(dataO)
{
  // dataO is a variation
  var bName = dataO.SP_NF_RAVL_ID;
  // SP_NF_RAVL_ID_CHANGE_DESC_WBS
  var label = new vector(dataO.SP_AA_RAVL_VARIATION_TITLE,bName);
  // SP_NF_RAVL_TYPE_CHANGE >>VAR_CCR,VAR_LCR,VAR_CCR_LCR
  var cat = new vector("VAR");
  var changeActivityType;
  var obs = "OpxObsElement".findclass().get(context.SP_NF_RAVL_OBS);
  var res;
  
  if (dataO.SP_AA_S_RAVL_CCR_NUM != "")
  {
    cat.push("CCR");
  }
  if (dataO.SP_AA_RAVL_LCCN != "")
  {
    cat.push("LCR");
  }
  changeActivityType = "OpxWbsType".findclass().get(cat.join("_"));
  
  if ( ! (changeActivityType instanceof OpxWbsType && obs instanceof OpxObsElement) )
  {
    dataO.ravl_trace_log("RCBC - Error encountered on Change activity type or OBS ");
    return res;
  }
  // OpxWbsElement creation
  withoutalerts{
    withoutlocking{
      res = new opxSUBPROJECT (
      "Name",bName,
      "SP_AA_RAVL_ID_CHANGE",bName,
      "Desc",label.join(" - "),
      "WbsElement",this,
      // "SP_RA_RAVL_ACT_RAVL",myRavl,
      "File",this.PROJECT,
      "WBS_TYPE",changeActivityType,
      "OBS_ELEMENT",obs
      );
      
      // if (res instanceof OpxNetwork 
      // && 
      // && )
      // {
      // res.WBS_TYPE = changeActivityType;
      // res.OBS_ELEMENT = obs;
      // }
    }
  }
  // myspjNivCible2.SP_AA_RAVL_ACT_TYPE="VARIATION_TASK_WBS_NIV01";
  // if vobs instanceof OpxObsElement myspjNivCible2.OBS_ELEMENT = vobs;
  // myspjNivCible2.SP_AA_B_RAVL_IS_RA_PRJ =true;
  
  res.SP_AA_B_RAVL_IS_RA_PRJ = true;
  // res.PositiveOnb();
  return res;
}

function ravl_create_branch_product(dataO)
{
  // dataO is a wsh
  var bName = dataO.SP_AA_RAVL_PRODUCT;
  var label = dataO.SP_AA_RAVL_PRODUCT;
  var productActivityType = "OpxWbsType".findclass().get("VAR_PROD");
  var obs = "OpxObsElement".findclass().get(context.SP_NF_RAVL_OBS);
  var res;
  
  if ( ! (productActivityType instanceof OpxWbsType && obs instanceof OpxObsElement) )
  {
    dataO.ravl_trace_log("RCBP - Error encountered on Product activity type or OBS ");
    return res;
  }
  
  // OpxWbsElement creation
  res = new opxSUBPROJECT (
  "Name",bName,
  "SP_AA_RAVL_ID_CHANGE",bName,
  "Desc",label,
  "WbsElement",this,
  // "SP_RA_RAVL_ACT_RAVL",myRavl,
  "File",this.PROJECT,
  "WBS_TYPE",productActivityType,
  "OBS_ELEMENT",obs
  );
  
  // res.PositiveOnb();
  return res;  
}

function ravl_read_submission_process_branch()
{
  // this is a variation
  var res;
  var LUT = new vector("DIRECT","2-Direct",
  "PARALLEL","3-Parallel",
  "DEFERRED","4-Deferred");
  
  if (this.ravl_read_isCoR("dummy")) 
  {
    res = "1-Country Of Reference";
  }
  else
  {
    res = LUT.get(this.ravl_read_submission_process());
  }
  return res;
}

function ravl_create_branch_submission(dataO)
{
  // dataO is a variation
  // SP_NF_RAVL_WBS_SUB_PROCESS
  // SP_NF_RAVL_WBS_SUB_PROCESS_USER
  
  var bName = dataO.ravl_read_submission_process_branch();
  var submissionActivityType = "OpxWbsType".findclass().get("VAR_SUBPRO");
  var obs = "OpxObsElement".findclass().get(context.SP_NF_RAVL_OBS);
  var res;
  
  if ( ! (bName instanceof String 
        && submissionActivityType instanceof OpxWbsType && obs instanceof OpxObsElement) )
  {
    dataO.ravl_trace_log("RCBS - Error encountered on Submission Process or Product activity type or OBS");
    return res;
  }
  // OpxWbsElement creation
  res = new opxSUBPROJECT (
  "Name",bName,
  "SP_AA_RAVL_ID_CHANGE",bName,
  "Desc",bName,
  "WbsElement",this,
  // "SP_RA_RAVL_ACT_RAVL",myRavl,
  "File",this.PROJECT,
  "WBS_TYPE",submissionActivityType,
  "OBS_ELEMENT",obs );
  
  // res.PositiveOnb();
  return res;  
}

function ravl_create_branch_country(dataO)
{
  // dataO is a variation
  // myRavl.SP_NF_RAVL_WBS_COUNTRY_DESC SP_RA_RAVL_COUNTRY.NAME
  
  var bName = dataO.SP_RA_RAVL_COUNTRY.get("NAME");
  var countryActivityType = "OpxWbsType".findclass().get("VAR_COUNT");
  var obs = "OpxObsElement".findclass().get(context.SP_NF_RAVL_OBS);
  var res;
  
  if ( ! (bName instanceof String 
        && countryActivityType instanceof OpxWbsType && obs instanceof OpxObsElement) )
  {
    dataO.ravl_trace_log("RCBS - Error encountered on Submission Process or Product activity type or OBS");
    return res;
  }
  // OpxWbsElement creation
  res = new opxSUBPROJECT (
  "Name",bName,
  "SP_AA_RAVL_ID_CHANGE",bName,
  "Desc",bName,
  "WbsElement",this,
  // "SP_RA_RAVL_ACT_RAVL",myRavl,
  "File",this.PROJECT,
  "WBS_TYPE",countryActivityType,
  "OBS_ELEMENT",obs );
  
  // res.PositiveOnb();
  return res;  
}

function ravl_read_variation_branch()
{
  // this is a variation, from legacy SP_NF_RAVL_RA_ACT_TYPE_DES
  var res;
  var chgType;
  
  (this.SP_AA_RAVL_VARIATION_TYPE2 == "") ? chgType = "unknown" : chgType = this.SP_AA_RAVL_VARIATION_TYPE2;
  
  res = "~a.~a - ~a".format(this.SP_AA_RAVL_RA_ACT_ID,chgType,this.SP_AA_S_RAVL_LICENSE);
  
  return res;
}


function ravl_create_branch_variation(dataO)
{
  // dataO is a variation
  // myRavl.SP_AA_RAVL_RA_ACT_ID 
  // myRavl.SP_NF_RAVL_VAR_DESC_RA_ACT
  
  var bName = dataO.ravl_read_variation_branch();
  var chgNum;
  var variationActivityType = "OpxWbsType".findclass().get("VAR_ACT");
  var obs = "OpxObsElement".findclass().get(context.SP_NF_RAVL_OBS);
  var res;
  
  (dataO.SP_NF_RAVL_IO_LABEL == "IO") ? chgNum = dataO.SP_AA_S_RAVL_CCR_NUM : chgNum = dataO.SP_AA_RAVL_LCCN;
  
  if ( ! (bName instanceof String && chgNum instanceof String
        && variationActivityType instanceof OpxWbsType && obs instanceof OpxObsElement) )
  {
    dataO.ravl_trace_log("RCBV - Error encountered on Variation Change number or Variation activity type or OBS");
    return res;
  }
  // OpxWbsElement creation
  res = new opxSUBPROJECT (
  "Name",bName,
  "SP_AA_RAVL_ID_CHANGE",bName,
  "Desc","Variation - " + chgNum,
  "WbsElement",this,
  // "SP_RA_RAVL_ACT_RAVL",myRavl,
  "File",this.PROJECT,
  "WBS_TYPE",variationActivityType,
  "OBS_ELEMENT",obs );
  
  // when creating, fill wsh & ra activity ID
  res.SP_RA_RAVL_WORKSHARING = dataO.SP_RA_RAVL_WORKSHARING1;
  res.SP_AA_RAVL_RA_ACT_ID = dataO.SP_AA_RAVL_RA_ACT_ID;
  // res.PositiveOnb();
  return res;  
}

function ravl_schedule_plan()
{
  // this is a variation
  var res;
  var wbsTypeAction = new vector(
  "VAR_LASTDOC","ravl_plan_PSD"
  ,"VAR_GO","ravl_plan_PSD"
  ,"VAR_PREP","ravl_plan_preparation"
  ,"VAR_SUBHA","ravl_plan_HAReview"
  ,"VAR_SENT","ravl_plan_localPrep"
  ,"VAR_LOC","ravl_plan_localPrepAct"
  );
  var action;
  
  var wsh = this.SP_RA_RAVL_WORKSHARING1;
  if (! wsh instanceof OpxSP_PT_RAVL_WORKSHARING)
  {
    this.ravl_trace_log("RGP - CRITICAL Error - Worksharing not found!");
    return "ERROR-RSP";
  }
  
  // this.get("r.SP_RA_RAVL_WORKSHARING.WORK-STRUCTURE")
  for (var a in wsh.get("r.SP_RA_RAVL_WORKSHARING.WORK-STRUCTURE") )
  {
    if (DEBUG_LEVEL>0) this.ravl_trace_log(a.level+a.wbs_type.name);
    action = wbsTypeAction.get(a.wbs_type.name);
    
    
    if (action instanceof String)
    {
      this.ravl_trace_log("Scheduling triggers>"+action);
      action.call(a, this);
    }
  }

  return res;
}

function ravl_grow_plan(varia)
{
  // this is VAR_ACT level
  
  var wsh = varia.SP_RA_RAVL_WORKSHARING1;
  
  if (! wsh instanceof OpxSP_PT_RAVL_WORKSHARING)
  {
    varia.ravl_trace_log("RGP - CRITICAL Error - Worksharing not found!");
    return this;
  }
  
  fromObject(this)
  {
    for (var a in OpxActivity where !(a.SP_RA_RAVL_WORKSHARING instanceof OpxSP_PT_RAVL_WORKSHARING ) )
    {
      varia.ravl_trace_log("Grow>"+a.wbs_type.NAME);
      // set wsh on inserted activity
      a.SP_RA_RAVL_WORKSHARING = wsh;
      
      // diffuse grouping information
      
    }
  }
}

function ravl_plan_PSD(varia)
{
  // this is an activity
  // myAct.FSD = Add_DU_Date(myRAVL.SP_AA_RAVL_LIODA,1);
  // return (res instanceof Date) ? res.next("DAY") : -1;
  // myAct.FSD =Add_DU_Date(myRAVL.SP_AA_RAVL_LCC_GO,1);
  // alert(varia.SP_AA_RAVL_LIODA);
  // alert(varia.SP_AA_RAVL_LIODA.next("DAY"));
  varia.ravl_trace_log("Preparation Start Date>>"+varia.SP_AA_RAVL_LCC_GO);
  
  if (varia.SP_AA_RAVL_LCC_GO instanceof Date)
  {
    this.FSD = varia.SP_AA_RAVL_LCC_GO.next("DAY");
    if (varia.SP_AA_S_RAVL_UPDATE_ACTION == "CGUPDA")
    {
      varia.SP_AA_S_RAVL_RECOVERY_STATUS = "validated";
      varia.SP_AA_S_RAVL_STATUS = "Validated";
    }
  }
  else
  {
    varia.ravl_trace_log("RPPSD - Planned Start Date undefined");
    if (varia.SP_AA_S_RAVL_UPDATE_ACTION == "CGUPDA")
    {
      varia.SP_AA_S_RAVL_RECOVERY_STATUS = "rejected";
      varia.SP_AA_S_RAVL_STATUS = "Error";
    }
  }
  
}

function ravl_plan_preparation(varia)
{
  // this is an activity
  var wsh = varia.SP_RA_RAVL_WORKSHARING1;
  if (! wsh.ItemplateRule instanceof OpxSP_PT_RAVL_CAT_TEMPLATE)
  {
    varia.ravl_trace_log("RPPrep - FATAL Error - Template rule undefined");
    return 1;
  }
  
  // var riseException = new vector(
  // "Z_CoR_RMS_12B",true
  // ,"Z_CoR_CMS_13D",true
  // );
    
  // if (riseException.get(wsh.ItemplateRule.get("NAME")) instanceof Boolean)
  // {
    // varia.ravl_trace_log("RPPrep - skipping plan Preparation Leadtime for "+wsh.ItemplateRule.get("NAME"));
    // return 0;
  // }
  
  var lead = varia.ravl_leadtime_read_dossier_prep();
  
  if (lead.ravl_leadtime_is_integer() )
  {
    this.DU = lead;
  }
  else
  {
    varia.ravl_trace_log("RPPrep - Dossier Preparation Leadtime is not an integer");
  }
  return 0;
}

function ravl_plan_localPrepAct(varia)
{
  // this is an activity
  var wsh = varia.SP_RA_RAVL_WORKSHARING1;
  if (! wsh.ItemplateRule instanceof OpxSP_PT_RAVL_CAT_TEMPLATE)
  {
    varia.ravl_trace_log("RPLocPrepAct - FATAL Error - Template rule undefined");
    return 1;
  }
  
  var riseException = new vector(
  "Z_CoR_Nat_10C",true
  ,"Z_CoR_Nat_10D",true
  ,"Z_CoR_RMS_12C",true
  ,"Z_CoR_CMS_13D",true
  );
    
  if (riseException.get(wsh.ItemplateRule.get("NAME")) instanceof Boolean)
  {
    varia.ravl_trace_log("RPLocPrepAct - skipping plan Local Preparation Leadtime for "+wsh.ItemplateRule.get("NAME"));
    return 0;
  }
  
  var lead = varia.ravl_leadtime_read_LOCPREP();
  
  if (lead.ravl_leadtime_is_integer() )
  {
    this.DU = lead;
  }
  else
  {
    varia.ravl_trace_log("RPLocPrepAct - Local Preparation Leadtime is not an integer");
  }
  return 0;
}

function ravl_plan_intra(varia,type)
{
  // this is an activity
  // Link[SP_AA_RAVL_TYPE]  HAREVIEW
  // alert("succ>>"+this.slinks);
  // type must be LOCPREP HAREVIEW
  var reader = "ravl_leadtime_read_" + type;
  // var lead = varia.ravl_leadtime_read_ha_review();
  var lead = reader.call(varia);  
  var cal = "OpxCalendar".get("COM_CAL:5X7");
  if (! cal instanceof OpxCalendar)
  {
    varia.ravl_trace_log(type+" - CRITICAL Error - Calendar 5X7 undefined");
    return "ERROR-RPHA";
  }
  
  if (lead.ravl_leadtime_is_integer() )
  {
    for (var intra in this.slinks where intra.SP_AA_RAVL_TYPE == type)
    {
      varia.ravl_trace_log(type+" leadtime>"+lead);
      intra.LAG = lead;
      intra.CAL = cal;
      varia.ravl_trace_log(type+">"+intra.lag);
    }    
  }
  else
  {
    varia.ravl_trace_log(type+" Leadtime is not an integer");
  }
  
}

function ravl_plan_HAReview(varia)
{
  this.ravl_plan_intra(varia,"HAREVIEW");
}

function ravl_plan_localPrep(varia)
{
  this.ravl_plan_intra(varia,"LOCPREP");
}




















//  FILE    : SP_JS_RAVL_INSERT_PLAN.ojs
//
//  AUTHOR  : ksk
//
//  VERSION : 2.0
//
//  PURPOSE : RAVL Insert plan
//
//  HISTORY :
// Created  by ksk 10:37 13/12/2016, refactoring legacy code.. LXSu
// Modified  by ksk 15:42 02/11/2017, CH0063 & 0064 Local Preparation

var DEBUG_LEVEL=1;

function ravl_retrieve_root(createVARMGT)
{
  // seeking VAR_MGT branch from the project identified by ist activity type
  var res;
  var varMGT = "OpxWbsType".get("VAR_MGT");

  if !(varMGT instanceof OpxActivityType && this instanceof OpxProject)
  {
    return res;
  }

  fromObject(this)
  {
    for (var n in "OpxNetwork" where n.wbs_type == varMGT)
    {
      res = n;
      break;
    }
  }

  if (! res instanceof OpxWbsElement)
  {
    res = createVARMGT.call(this);
  }
  return res
}

function ravl_create_VARMGT()
{
  var branch;
  var varMGT = "OpxWbsType".get("VAR_MGT");
  var obs = "OpxObsElement".findclass().get(context.SP_NF_RAVL_OBS);
  var root;
  fromObject(this)
  {
    for(var n in "OpxNetwork" where n.level<2)
    {
      root = n;
      break;
    }
  }
  
  if(root instanceof OpxWbsElement 
      && varMGT instanceof OpxWbsType 
      && obs instanceof OpxObsElement)
  {
    alert("root>>"+root);
    withoutalerts{
      withoutlocking{
        branch = new OpxWbsElement (
        "Name","Variation Management",
        "Desc","Variation Management",
        "WbsElement",root,
        // "SP_AA_RAVL_ID_CHANGE",vRacine,
        // "SP_RA_RAVL_ACT_RAVL",myRavl,
        "File",this,
        "WBS_TYPE",varMGT,
        "OBS_ELEMENT",obs
        // "SP_AA_RAVL_ACT_TYPE","VAR_MGT",
        // "SP_AA_RAVL_STD_TYPE","New_VAR_MGT"
        );
      }
    }
  }
  else
  {
    context.ravl_trace_log("RCV - Unable to create Variation Management");
  }
  return branch
}

function ravl_retrieve_branch(branchID,createBranch,dataO)
{
  var res;
  if (! (this instanceof OpxNetwork && branchID instanceof String) )
  {
    return res;
  }

  fromObject(this)
  {
    for (var n in "OpxNetwork" where n.SP_AA_RAVL_ID_CHANGE == branchID)
    {
      res = n;
      break;
    }
  }

  if (! res instanceof OpxWbsElement)
  {
    res = createBranch.call(this,dataO);
  }
  return res
}

function ravl_create_branch_change(dataO)
{
  // dataO is a variation
  var bName = dataO.SP_NF_RAVL_ID;
  // SP_NF_RAVL_ID_CHANGE_DESC_WBS
  var label = new vector(dataO.SP_AA_RAVL_VARIATION_TITLE,bName);
  // SP_NF_RAVL_TYPE_CHANGE >>VAR_CCR,VAR_LCR,VAR_CCR_LCR
  var cat = new vector("VAR");
  var changeActivityType;
  var obs = "OpxObsElement".findclass().get(context.SP_NF_RAVL_OBS);
  var res;
  
  if (dataO.SP_AA_S_RAVL_CCR_NUM != "")
  {
    cat.push("CCR");
  }
  if (dataO.SP_AA_RAVL_LCCN != "")
  {
    cat.push("LCR");
  }
  changeActivityType = "OpxWbsType".findclass().get(cat.join("_"));
  
  if ( ! (changeActivityType instanceof OpxWbsType && obs instanceof OpxObsElement) )
  {
    dataO.ravl_trace_log("RCBC - Error encountered on Change activity type or OBS ");
    return res;
  }
  // OpxWbsElement creation
  withoutalerts{
    withoutlocking{
      res = new opxSUBPROJECT (
      "Name",bName,
      "SP_AA_RAVL_ID_CHANGE",bName,
      "Desc",label.join(" - "),
      "WbsElement",this,
      // "SP_RA_RAVL_ACT_RAVL",myRavl,
      "File",this.PROJECT,
      "WBS_TYPE",changeActivityType,
      "OBS_ELEMENT",obs
      );
      
      // if (res instanceof OpxNetwork 
      // && 
      // && )
      // {
      // res.WBS_TYPE = changeActivityType;
      // res.OBS_ELEMENT = obs;
      // }
    }
  }
  // myspjNivCible2.SP_AA_RAVL_ACT_TYPE="VARIATION_TASK_WBS_NIV01";
  // if vobs instanceof OpxObsElement myspjNivCible2.OBS_ELEMENT = vobs;
  // myspjNivCible2.SP_AA_B_RAVL_IS_RA_PRJ =true;
  
  res.SP_AA_B_RAVL_IS_RA_PRJ = true;
  // res.PositiveOnb();
  return res;
}

function ravl_create_branch_product(dataO)
{
  // dataO is a wsh
  var bName = dataO.SP_AA_RAVL_PRODUCT;
  var label = dataO.SP_AA_RAVL_PRODUCT;
  var productActivityType = "OpxWbsType".findclass().get("VAR_PROD");
  var obs = "OpxObsElement".findclass().get(context.SP_NF_RAVL_OBS);
  var res;
  
  if ( ! (productActivityType instanceof OpxWbsType && obs instanceof OpxObsElement) )
  {
    dataO.ravl_trace_log("RCBP - Error encountered on Product activity type or OBS ");
    return res;
  }
  
  // OpxWbsElement creation
  res = new opxSUBPROJECT (
  "Name",bName,
  "SP_AA_RAVL_ID_CHANGE",bName,
  "Desc",label,
  "WbsElement",this,
  // "SP_RA_RAVL_ACT_RAVL",myRavl,
  "File",this.PROJECT,
  "WBS_TYPE",productActivityType,
  "OBS_ELEMENT",obs
  );
  
  // res.PositiveOnb();
  return res;  
}

function ravl_read_submission_process_branch()
{
  // this is a variation
  var res;
  var LUT = new vector("DIRECT","2-Direct",
  "PARALLEL","3-Parallel",
  "DEFERRED","4-Deferred");
  
  if (this.ravl_read_isCoR("dummy")) 
  {
    res = "1-Country Of Reference";
  }
  else
  {
    res = LUT.get(this.ravl_read_submission_process());
  }
  return res;
}

function ravl_create_branch_submission(dataO)
{
  // dataO is a variation
  // SP_NF_RAVL_WBS_SUB_PROCESS
  // SP_NF_RAVL_WBS_SUB_PROCESS_USER
  
  var bName = dataO.ravl_read_submission_process_branch();
  var submissionActivityType = "OpxWbsType".findclass().get("VAR_SUBPRO");
  var obs = "OpxObsElement".findclass().get(context.SP_NF_RAVL_OBS);
  var res;
  
  if ( ! (bName instanceof String 
        && submissionActivityType instanceof OpxWbsType && obs instanceof OpxObsElement) )
  {
    dataO.ravl_trace_log("RCBS - Error encountered on Submission Process or Product activity type or OBS");
    return res;
  }
  // OpxWbsElement creation
  res = new opxSUBPROJECT (
  "Name",bName,
  "SP_AA_RAVL_ID_CHANGE",bName,
  "Desc",bName,
  "WbsElement",this,
  // "SP_RA_RAVL_ACT_RAVL",myRavl,
  "File",this.PROJECT,
  "WBS_TYPE",submissionActivityType,
  "OBS_ELEMENT",obs );
  
  // res.PositiveOnb();
  return res;  
}

function ravl_create_branch_country(dataO)
{
  // dataO is a variation
  // myRavl.SP_NF_RAVL_WBS_COUNTRY_DESC SP_RA_RAVL_COUNTRY.NAME
  
  var bName = dataO.SP_RA_RAVL_COUNTRY.get("NAME");
  var countryActivityType = "OpxWbsType".findclass().get("VAR_COUNT");
  var obs = "OpxObsElement".findclass().get(context.SP_NF_RAVL_OBS);
  var res;
  
  if ( ! (bName instanceof String 
        && countryActivityType instanceof OpxWbsType && obs instanceof OpxObsElement) )
  {
    dataO.ravl_trace_log("RCBS - Error encountered on Submission Process or Product activity type or OBS");
    return res;
  }
  // OpxWbsElement creation
  res = new opxSUBPROJECT (
  "Name",bName,
  "SP_AA_RAVL_ID_CHANGE",bName,
  "Desc",bName,
  "WbsElement",this,
  // "SP_RA_RAVL_ACT_RAVL",myRavl,
  "File",this.PROJECT,
  "WBS_TYPE",countryActivityType,
  "OBS_ELEMENT",obs );
  
  // res.PositiveOnb();
  return res;  
}

function ravl_read_variation_branch()
{
  // this is a variation, from legacy SP_NF_RAVL_RA_ACT_TYPE_DES
  var res;
  var chgType;
  
  (this.SP_AA_RAVL_VARIATION_TYPE2 == "") ? chgType = "unknown" : chgType = this.SP_AA_RAVL_VARIATION_TYPE2;
  
  res = "~a.~a - ~a".format(this.SP_AA_RAVL_RA_ACT_ID,chgType,this.SP_AA_S_RAVL_LICENSE);
  
  return res;
}


function ravl_create_branch_variation(dataO)
{
  // dataO is a variation
  // myRavl.SP_AA_RAVL_RA_ACT_ID 
  // myRavl.SP_NF_RAVL_VAR_DESC_RA_ACT
  
  var bName = dataO.ravl_read_variation_branch();
  var chgNum;
  var variationActivityType = "OpxWbsType".findclass().get("VAR_ACT");
  var obs = "OpxObsElement".findclass().get(context.SP_NF_RAVL_OBS);
  var res;
  
  (dataO.SP_NF_RAVL_IO_LABEL == "IO") ? chgNum = dataO.SP_AA_S_RAVL_CCR_NUM : chgNum = dataO.SP_AA_RAVL_LCCN;
  
  if ( ! (bName instanceof String && chgNum instanceof String
        && variationActivityType instanceof OpxWbsType && obs instanceof OpxObsElement) )
  {
    dataO.ravl_trace_log("RCBV - Error encountered on Variation Change number or Variation activity type or OBS");
    return res;
  }
  // OpxWbsElement creation
  res = new opxSUBPROJECT (
  "Name",bName,
  "SP_AA_RAVL_ID_CHANGE",bName,
  "Desc","Variation - " + chgNum,
  "WbsElement",this,
  // "SP_RA_RAVL_ACT_RAVL",myRavl,
  "File",this.PROJECT,
  "WBS_TYPE",variationActivityType,
  "OBS_ELEMENT",obs );
  
  // when creating, fill wsh & ra activity ID
  res.SP_RA_RAVL_WORKSHARING = dataO.SP_RA_RAVL_WORKSHARING1;
  res.SP_AA_RAVL_RA_ACT_ID = dataO.SP_AA_RAVL_RA_ACT_ID;
  // res.PositiveOnb();
  return res;  
}

function ravl_schedule_plan()
{
  // this is a variation
  var res;
  var wbsTypeAction = new vector(
  "VAR_LASTDOC","ravl_plan_PSD"
  ,"VAR_GO","ravl_plan_PSD"
  ,"VAR_PREP","ravl_plan_preparation"
  ,"VAR_SUBHA","ravl_plan_HAReview"
  ,"VAR_SENT","ravl_plan_localPrep"
  ,"VAR_LOC","ravl_plan_localPrepAct"
  );
  var action;
  
  var wsh = this.SP_RA_RAVL_WORKSHARING1;
  if (! wsh instanceof OpxSP_PT_RAVL_WORKSHARING)
  {
    this.ravl_trace_log("RGP - CRITICAL Error - Worksharing not found!");
    return "ERROR-RSP";
  }
  
  // this.get("r.SP_RA_RAVL_WORKSHARING.WORK-STRUCTURE")
  for (var a in wsh.get("r.SP_RA_RAVL_WORKSHARING.WORK-STRUCTURE") )
  {
    if (DEBUG_LEVEL>0) this.ravl_trace_log(a.level+a.wbs_type.name);
    action = wbsTypeAction.get(a.wbs_type.name);
    
    
    if (action instanceof String)
    {
      this.ravl_trace_log("Scheduling triggers>"+action);
      action.call(a, this);
    }
  }

  return res;
}

function ravl_grow_plan(varia)
{
  // this is VAR_ACT level
  
  var wsh = varia.SP_RA_RAVL_WORKSHARING1;
  
  if (! wsh instanceof OpxSP_PT_RAVL_WORKSHARING)
  {
    varia.ravl_trace_log("RGP - CRITICAL Error - Worksharing not found!");
    return this;
  }
  
  fromObject(this)
  {
    for (var a in OpxActivity where !(a.SP_RA_RAVL_WORKSHARING instanceof OpxSP_PT_RAVL_WORKSHARING ) )
    {
      varia.ravl_trace_log("Grow>"+a.wbs_type.NAME);
      // set wsh on inserted activity
      a.SP_RA_RAVL_WORKSHARING = wsh;
      
      // diffuse grouping information
      
    }
  }
}

function ravl_plan_PSD(varia)
{
  // this is an activity
  // myAct.FSD = Add_DU_Date(myRAVL.SP_AA_RAVL_LIODA,1);
  // return (res instanceof Date) ? res.next("DAY") : -1;
  // myAct.FSD =Add_DU_Date(myRAVL.SP_AA_RAVL_LCC_GO,1);
  // alert(varia.SP_AA_RAVL_LIODA);
  // alert(varia.SP_AA_RAVL_LIODA.next("DAY"));
  varia.ravl_trace_log("Preparation Start Date>>"+varia.SP_AA_RAVL_LCC_GO);
  
  if (varia.SP_AA_RAVL_LCC_GO instanceof Date)
  {
    this.FSD = varia.SP_AA_RAVL_LCC_GO.next("DAY");
    if (varia.SP_AA_S_RAVL_UPDATE_ACTION == "CGUPDA")
    {
      varia.SP_AA_S_RAVL_RECOVERY_STATUS = "validated";
      varia.SP_AA_S_RAVL_STATUS = "Validated";
    }
  }
  else
  {
    varia.ravl_trace_log("RPPSD - Planned Start Date undefined");
    if (varia.SP_AA_S_RAVL_UPDATE_ACTION == "CGUPDA")
    {
      varia.SP_AA_S_RAVL_RECOVERY_STATUS = "rejected";
      varia.SP_AA_S_RAVL_STATUS = "Error";
    }
  }
  
}

function ravl_plan_preparation(varia)
{
  // this is an activity
  var wsh = varia.SP_RA_RAVL_WORKSHARING1;
  if (! wsh.ItemplateRule instanceof OpxSP_PT_RAVL_CAT_TEMPLATE)
  {
    varia.ravl_trace_log("RPPrep - FATAL Error - Template rule undefined");
    return 1;
  }
  
  // var riseException = new vector(
  // "Z_CoR_RMS_12B",true
  // ,"Z_CoR_CMS_13D",true
  // );
    
  // if (riseException.get(wsh.ItemplateRule.get("NAME")) instanceof Boolean)
  // {
    // varia.ravl_trace_log("RPPrep - skipping plan Preparation Leadtime for "+wsh.ItemplateRule.get("NAME"));
    // return 0;
  // }
  
  var lead = varia.ravl_leadtime_read_dossier_prep();
  
  if (lead.ravl_leadtime_is_integer() )
  {
    this.DU = lead;
  }
  else
  {
    varia.ravl_trace_log("RPPrep - Dossier Preparation Leadtime is not an integer");
  }
  return 0;
}

function ravl_plan_localPrepAct(varia)
{
  // this is an activity
  var wsh = varia.SP_RA_RAVL_WORKSHARING1;
  if (! wsh.ItemplateRule instanceof OpxSP_PT_RAVL_CAT_TEMPLATE)
  {
    varia.ravl_trace_log("RPLocPrepAct - FATAL Error - Template rule undefined");
    return 1;
  }
  
  var riseException = new vector(
  "Z_CoR_Nat_10C",true
  ,"Z_CoR_Nat_10D",true
  ,"Z_CoR_RMS_12C",true
  ,"Z_CoR_CMS_13D",true
  );
    
  if (riseException.get(wsh.ItemplateRule.get("NAME")) instanceof Boolean)
  {
    varia.ravl_trace_log("RPLocPrepAct - skipping plan Local Preparation Leadtime for "+wsh.ItemplateRule.get("NAME"));
    return 0;
  }
  
  var lead = varia.ravl_leadtime_read_LOCPREP();
  
  if (lead.ravl_leadtime_is_integer() )
  {
    this.DU = lead;
  }
  else
  {
    varia.ravl_trace_log("RPLocPrepAct - Local Preparation Leadtime is not an integer");
  }
  return 0;
}

function ravl_plan_intra(varia,type)
{
  // this is an activity
  // Link[SP_AA_RAVL_TYPE]  HAREVIEW
  // alert("succ>>"+this.slinks);
  // type must be LOCPREP HAREVIEW
  var reader = "ravl_leadtime_read_" + type;
  // var lead = varia.ravl_leadtime_read_ha_review();
  var lead = reader.call(varia);  
  var cal = "OpxCalendar".get("COM_CAL:5X7");
  if (! cal instanceof OpxCalendar)
  {
    varia.ravl_trace_log(type+" - CRITICAL Error - Calendar 5X7 undefined");
    return "ERROR-RPHA";
  }
  
  if (lead.ravl_leadtime_is_integer() )
  {
    for (var intra in this.slinks where intra.SP_AA_RAVL_TYPE == type)
    {
      varia.ravl_trace_log(type+" leadtime>"+lead);
      intra.LAG = lead;
      intra.CAL = cal;
      varia.ravl_trace_log(type+">"+intra.lag);
    }    
  }
  else
  {
    varia.ravl_trace_log(type+" Leadtime is not an integer");
  }
  
}

function ravl_plan_HAReview(varia)
{
  this.ravl_plan_intra(varia,"HAREVIEW");
}

function ravl_plan_localPrep(varia)
{
  this.ravl_plan_intra(varia,"LOCPREP");
}




















 
//  FILE    : SP_JS_RAVL_LEADTIMES.ojs
//
//  AUTHOR  : ksk
//
//  VERSION : 2.0
//
//  PURPOSE : RAVL Leadtime processing
//
//  HISTORY :
// Created  by ksk 11:29 16/01/2017, refactoring legacy code -C
// Modified  by ksk 10:07 02/11/2017, CH0063 & 0064LT
// Modified  by ksk 13:46 23/11/2017, zero day leadtimes

function ravl_retrieve_leadtime()
{
  // this is a variation
  var leadID = new vector();
  var res;
  
  if (this.SP_RA_RAVL_COUNTRY instanceof OpxSP_PT_CL_COUNTRY 
  && this.SP_AA_RAVL_VARIATION_TYPE2 instanceof String)
  {
    leadID.push(this.SP_RA_RAVL_COUNTRY.NAME);
    leadID.push(this.SP_AA_RAVL_VARIATION_TYPE2);    
    
    // alert("leadID>>"+leadID.join(".") );
    res = "OpxSP_PT_RAVL_LEADTIIME".findclass().get(leadID.join("."));
    
  }
  return res;
}

function ravl_leadtime_read_io_label()
{
  // this is a variation
  var res;
  var cat = new vector();
  
  var IOLABEL = new vector("CCR","IO",
  "LCR","LABEL",
  "CCR-LCR","LABEL");
  
  if (this.SP_AA_RAVL_PROC_TYPE1 == "MRP" || this.SP_AA_RAVL_PROC_TYPE1 == "DCP")
  {
    return "MRP-DCP";
  }
  
  if (this.SP_AA_S_RAVL_CCR_NUM != "")
  {
    cat.push("CCR");
  }
  if (this.SP_AA_RAVL_LCCN != "")
  {
    cat.push("LCR");
  }
  
  res = IOLABEL.get(cat.join("-") );
  
  return res;
}

function ravl_leadtime_read_HAREVIEW()
{
  // this is a variation
  var res;
  var HAReviewSlot = new vector("IO","SP_AA_RAVL_DU_IO_HAR",
  "LABEL","SP_AA_RAVL_DU_LABEL_HAR",
  "MRP-DCP","SP_AA_RAVL_MRP_DU");
  // "IOLABEL","SP_AA_RAVL_DU_IO_LABEL_HAR",

  var lt = this.ravl_retrieve_leadtime();
  var iolabel = this.ravl_leadtime_read_io_label();
  
  if (lt instanceof OpxSP_PT_RAVL_LEADTIIME 
  && iolabel instanceof String && HAReviewSlot.get(iolabel) instanceof String)
  {
    res = lt.get(HAReviewSlot.get(iolabel) );
  }
  else
  {
    this.ravl_trace_log("Leadtime not found - HA Review");
  }
  return res;
}

function ravl_leadtime_read_LOCPREP()
{
  var res;
  var LocPrepSlot = new vector("IO","SP_AA_RAVL_IO_DU_LOC_PREPA",
  "LABEL","SP_AA_RAVL_LABEL_DU_LOC_PREPA");
  var lt = this.ravl_retrieve_leadtime();
  var IOLabel = this.SP_NF_RAVL_IO_LABEL;
  
  if (lt instanceof OpxSP_PT_RAVL_LEADTIIME 
  && IOLabel instanceof String && LocPrepSlot.get(IOLabel) instanceof String)
  {
    res = lt.get(LocPrepSlot.get(IOLabel) ); 
  }
  else
  {
    this.ravl_trace_log("Leadtime not found - Local Preparation");
  }
  return res;
}

function ravl_leadtime_read_dossier_prep()
{
  var res;
  var lt = this.ravl_retrieve_leadtime();
  
  if (lt instanceof OpxSP_PT_RAVL_LEADTIIME)
  {
    res = lt.get("SP_AA_S_RAVL_IO_DOS_PREPA" ); 
  }
  else
  {
    this.ravl_trace_log("Leadtime not found - Dossier Preparation");
  }
  return res;
}

function ravl_leadtime_is_integer()
{
  var res = false;
  if (this instanceof String)
  {
    res = "^[0-9][0-9]*$".test(this);
  }
  return res;
}

//  FILE    : SP_JS_RAVL_LEADTIMES.ojs
//
//  AUTHOR  : ksk
//
//  VERSION : 2.0
//
//  PURPOSE : RAVL Leadtime processing
//
//  HISTORY :
// Created  by ksk 11:29 16/01/2017, refactoring legacy code -C
// Modified  by ksk 10:07 02/11/2017, CH0063 & 0064LT
// Modified  by ksk 13:46 23/11/2017, zero day leadtimes

function ravl_retrieve_leadtime()
{
  // this is a variation
  var leadID = new vector();
  var res;
  
  if (this.SP_RA_RAVL_COUNTRY instanceof OpxSP_PT_CL_COUNTRY 
  && this.SP_AA_RAVL_VARIATION_TYPE2 instanceof String)
  {
    leadID.push(this.SP_RA_RAVL_COUNTRY.NAME);
    leadID.push(this.SP_AA_RAVL_VARIATION_TYPE2);    
    
    // alert("leadID>>"+leadID.join(".") );
    res = "OpxSP_PT_RAVL_LEADTIIME".findclass().get(leadID.join("."));
    
  }
  return res;
}

function ravl_leadtime_read_io_label()
{
  // this is a variation
  var res;
  var cat = new vector();
  
  var IOLABEL = new vector("CCR","IO",
  "LCR","LABEL",
  "CCR-LCR","LABEL");
  
  if (this.SP_AA_RAVL_PROC_TYPE1 == "MRP" || this.SP_AA_RAVL_PROC_TYPE1 == "DCP")
  {
    return "MRP-DCP";
  }
  
  if (this.SP_AA_S_RAVL_CCR_NUM != "")
  {
    cat.push("CCR");
  }
  if (this.SP_AA_RAVL_LCCN != "")
  {
    cat.push("LCR");
  }
  
  res = IOLABEL.get(cat.join("-") );
  
  return res;
}

function ravl_leadtime_read_HAREVIEW()
{
  // this is a variation
  var res;
  var HAReviewSlot = new vector("IO","SP_AA_RAVL_DU_IO_HAR",
  "LABEL","SP_AA_RAVL_DU_LABEL_HAR",
  "MRP-DCP","SP_AA_RAVL_MRP_DU");
  // "IOLABEL","SP_AA_RAVL_DU_IO_LABEL_HAR",

  var lt = this.ravl_retrieve_leadtime();
  var iolabel = this.ravl_leadtime_read_io_label();
  
  if (lt instanceof OpxSP_PT_RAVL_LEADTIIME 
  && iolabel instanceof String && HAReviewSlot.get(iolabel) instanceof String)
  {
    res = lt.get(HAReviewSlot.get(iolabel) );
  }
  else
  {
    this.ravl_trace_log("Leadtime not found - HA Review");
  }
  return res;
}

function ravl_leadtime_read_LOCPREP()
{
  var res;
  var LocPrepSlot = new vector("IO","SP_AA_RAVL_IO_DU_LOC_PREPA",
  "LABEL","SP_AA_RAVL_LABEL_DU_LOC_PREPA");
  var lt = this.ravl_retrieve_leadtime();
  var IOLabel = this.SP_NF_RAVL_IO_LABEL;
  
  if (lt instanceof OpxSP_PT_RAVL_LEADTIIME 
  && IOLabel instanceof String && LocPrepSlot.get(IOLabel) instanceof String)
  {
    res = lt.get(LocPrepSlot.get(IOLabel) ); 
  }
  else
  {
    this.ravl_trace_log("Leadtime not found - Local Preparation");
  }
  return res;
}

function ravl_leadtime_read_dossier_prep()
{
  var res;
  var lt = this.ravl_retrieve_leadtime();
  
  if (lt instanceof OpxSP_PT_RAVL_LEADTIIME)
  {
    res = lt.get("SP_AA_S_RAVL_IO_DOS_PREPA" ); 
  }
  else
  {
    this.ravl_trace_log("Leadtime not found - Dossier Preparation");
  }
  return res;
}

function ravl_leadtime_is_integer()
{
  var res = false;
  if (this instanceof String)
  {
    res = "^[0-9][0-9]*$".test(this);
  }
  return res;
}

 
//  FILE    : SP_JS_RAVL_LINKING.ojs
// 
//  AUTHOR  : ksk
// 
//  VERSION : 1.1
// 
//  PURPOSE : V6 RAVL Linking Module
//
//  DEPENDENCY : SP_JS_RAVL_UTILITIES,SP_JS_RAVL_TEMPLATES,SP_JS_RAVL_CHANGE
// 
//  HISTORY :
//  Created  by ksk 10:21 09/02/2017....
//  Modified  by ksk 16:27 08/08/2017 parallel & deferred links to wsh CoR
//  Modified  by ksk 14:14 20/09/2017 error handling wsh undefined with warning
//  Modified  by ksk 11:19 15/11/2017, Linking on existing plan
//  Modified  by ksk 16:16 30/11/2017, Linking on MultiCoR CMS 1156


function ravl_set_linkingRulesHT()
{
  // this is a hashtable
  var err = 0;
  var v;
  
  if (! this instanceof Hashtable)
  {
    return 9;
  }
  
  for (var rule in "opxSP_PT_RAVL_LNK_TEMPLATE".findclass() 
    where "\w".test(rule.SP_AA_S_RAVL_LINK_SOURCE) )
  {
    // alert(rule.NAME+">>"+rule.SP_AA_S_RAVL_LINK_SOURCE);
    v = this.get(rule.NAME);
    if (v instanceof Vector)
    {
      v.push(rule);
    }
    else
    {
      // init
      this.set(rule.NAME, new vector(rule));
    }
  }
  return err;
}

function ravl_linking_retrieve_activity(rule, slot)
{
  // this is a wsh
  var act;
  
  for (var a in this.get("r.SP_RA_RAVL_WORKSHARING.WORK-STRUCTURE")
    where a.WBS_TYPE.NAME == rule.get(slot))
  {
    act = a;
    break;
  }
  
  return act;
}

function ravl_linking_retrieve_target(rule)
{
  // this is a wsh
  return this.ravl_linking_retrieve_activity(rule,"SP_AA_S_RAVL_TARGET_ACT");
}

function ravl_linking_retrieve_source(rule)
{
  // this is a wsh
  return this.ravl_linking_retrieve_activity(rule,"SP_AA_S_RAVL_SOURCE_ACT");
}

function ravl_find_rms()
{
  // this is a variation
  // this.SP_AA_RAVL_PROC_TYPE1 + this.SP_AA_RAVL_MEMBER_STATE2
  var rms;
  
  for (var v in this.SP_NF_RAVL_ID.mapVariation()
    where v.SP_AA_RAVL_MEMBER_STATE2 == "RMS"
  && v.SP_NF_S_RAVL_PRODUCT_NAME == this.SP_NF_S_RAVL_PRODUCT_NAME)
  // && v.SP_AA_RAVL_PROC_TYPE1 == this.SP_AA_RAVL_PROC_TYPE1) ignored because of template 13D
  {
    rms = v;
    break;
  }
  return rms;
}

function ravl_linking_retrieve_rule_set(ravlLinksHT)
{
  // this is a variation
  var res;
  var wsh = this.SP_RA_RAVL_WORKSHARING1;
  if (! wsh instanceof opxSP_PT_RAVL_WORKSHARING)
  {
    this.ravl_trace_log("RLRRS - Warning - Wsh undefined");
    return new vector();
  }
  
  if (! wsh.ItemplateRule instanceof OpxSP_PT_RAVL_CAT_TEMPLATE)
  {
    this.ravl_trace_log("RLRRS - FATAL Error - Template rule undefined");
    return new vector();
  }
  
  res = ravlLinksHT.get(wsh.ItemplateRule.get("NAME"));
  
  if (! res instanceof vector)
  {
    // Linking rule set not found
    this.ravl_trace_log("RLRRS - No link rule defined for template "+wsh.ItemplateRule.get("NAME"));
    return new vector();
  }
  return res;
}

function ravl_linking_target(rule)
{
  var target;
  var wsh = this.SP_RA_RAVL_WORKSHARING1;
  
  target = wsh.ravl_linking_retrieve_target(rule);
  
  return target;
}

function ravl_linking_source(rule)
{
  // this is a variation
  var source;
  var sourcingMode = new vector("CoR","ravl_find_cor"
  ,"RMS","ravl_find_rms"
  ,"WshCoR","ravl_find_wsh_cor"
  );
  var finder = sourcingMode.get(rule.SP_AA_S_RAVL_LINK_SOURCE);
  var sourceVaria;
  
  if(finder instanceof String)
  {
    sourceVaria = finder.call(this);
  }
  
  if (sourceVaria instanceof opxSP_PT_RAVL
  && sourceVaria.SP_RA_RAVL_WORKSHARING1 instanceof opxSP_PT_RAVL_WORKSHARING)
  {
    source = sourceVaria.SP_RA_RAVL_WORKSHARING1.ravl_linking_retrieve_source(rule);
  }
  else
  {
    // sourceWsh not found!
    this.ravl_trace_log("RLS - Source WBS not found for "+rule.printattribute() );
  }
  
  return source;
}

function ravl_linking_exist(source,target)
{
  var res = false;
  for (var lin in target.plinks where lin.ante == source)
  {
    alert(lin.ante.printattribute());
    alert(lin.succ.printattribute());
    res = true;
    break;
  }
  return res;
}

function ravl_linking_create(source,target,rule)
{
  // this is a variation
  var cal = "OpxCalendar".get("COM_CAL:5X7");
  var link;
  if (! cal instanceof OpxCalendar)
  {
    this.ravl_trace_log("RLC - CRITICAL Error - Calendar 5X7 undefined");
    // reject
    return "ERROR-RLC";
  }
  
  if (! ravl_linking_exist(source,target))
  {
    // create the link FINISH-START
    // ("PREDECESSORACTIVITY" "SUCCESSORACTIVITY")
    // PA  SUCC_ACTIVITY
    
    link = new opxLink(
    "PredecessorActivity",source
    ,"SuccessorActivity",target
    ,"Type","FINISH-START"
    ,"CAL",cal
    ,"SP_AA_RAVL_TYPE",rule.printattribute()
    ,"File",target.PROJECT
    );
    
    this.ravl_trace_log("~a - Linking ~a --> ~a".format(rule.printattribute()
    ,link.ante.NAME
    ,link.succ.NAME) );
  }
  
}

function ravl_linking_generate(rule)
{
  // this is a variation
  var target = this.ravl_linking_target(rule);
  var source = this.ravl_linking_source(rule);
  
  if !(source instanceof OpxActivity && target instanceof OpxActivity)
  {
    return "ERROR-RLG";
  }
  
  if (! rule.SP_AA_RAVL_IS_SOURCE)
  {
    this.ravl_linking_create(source,target,rule);
  }
  else
  {
    // link inversion
    this.ravl_linking_create(target,source,rule);
  }
}

function ravl_process_links(ravlLinksHT)
{
  // this is a variation
  var res;
  if (! ravlLinksHT instanceof Hashtable)
  {
    return 9;
  }
  var ruleSet = this.ravl_linking_retrieve_rule_set(ravlLinksHT);
  
  for (var rule in ruleSet)
  {
    this.ravl_trace_log("RPL - Ruling with "+rule.printattribute() );
    this.ravl_linking_generate(rule); 
  }
  
}

function ravl_process_links_rms(ravlLinksHT)
{
  // this is a RMS variation
  var ravlTemplatesHT = new HashTable("STRING");
  var err = ravlTemplatesHT.ravl_set_templateRulesHT();
  var rule;
  
  this.ravl_trace_log("RPLR - Linking extra CMS");
  
  for (var cms in this.SP_NF_RAVL_ID.mapVariation()
  where (! cms.SP_AA_B_RAVL_LEADING_COR)
  && (cms.SP_AA_RAVL_MEMBER_STATE2 == "CMS" || ".+Zone1-DIRECT-National$".test(cms.ravl_read_template_rule()) )
  && cms.SP_NF_S_RAVL_PRODUCT_NAME == this.SP_NF_S_RAVL_PRODUCT_NAME)
  {
    cms.ravl_trace_log("RPLR - Linking ~a ~a ~a to RMS ~a ~a".format(cms.ravl_read_procedureType_memberstate(),cms.SP_NF_S_RAVL_PRODUCT_NAME
    ,cms.SP_RA_RAVL_COUNTRY.NAME,this.SP_RA_RAVL_COUNTRY.NAME,this.NAME) );
    if (cms.SP_RA_RAVL_WORKSHARING1 instanceof opxSP_PT_RAVL_WORKSHARING
    && ! cms.SP_RA_RAVL_WORKSHARING1.ItemplateRule instanceof OpxSP_PT_RAVL_CAT_TEMPLATE)
    {
      cms.ravl_trace_log("RPLR - Caching...");
      rule = ravlTemplatesHT.get(cms.ravl_read_template_rule() );
      if (rule instanceof OpxSP_PT_RAVL_CAT_TEMPLATE)
      {
        cms.SP_RA_RAVL_WORKSHARING1.ItemplateRule = rule;
        cms.ravl_trace_log("RPLR - Cached>"+cms.SP_RA_RAVL_WORKSHARING1.ItemplateRule.get("NAME"));
      }
    }
    cms.ravl_process_links(ravlLinksHT);

  }
}

function ravl_find_wsh_cor()
{
  var cor;
  for (var varia in this.SP_NF_RAVL_ID.mapVariation() where varia.SP_AA_B_RAVL_LEADING_COR
  && varia.ravl_read_submission_mode() == "Worksharing"
  && varia.SP_NF_S_RAVL_PRODUCT_NAME == this.SP_NF_S_RAVL_PRODUCT_NAME
  && varia.SP_NF_RAVL_IO_LABEL_COR == this.SP_NF_RAVL_IO_LABEL_COR
  ) 
  {
    cor = varia;
    break;
  }
  return cor;
}

function ravl_process_links_CoR(ravlLinksHT)
{
  // this is a CoR variation with process action ..DLRP-updated
  var ravlTemplatesHT = new HashTable("STRING");
  var err = ravlTemplatesHT.ravl_set_templateRulesHT();
  var rule;
  
  this.ravl_trace_log("RPLC - Linking extra from CoR");
  
  for (var cur in this.SP_NF_RAVL_ID.mapVariation()
  where (! cur.ravl_read_isCoR("dummy"))
  && cur.SP_NF_S_RAVL_PRODUCT_NAME == this.SP_NF_S_RAVL_PRODUCT_NAME)
  {
    cur.ravl_trace_log("RPLC - Extra Linking ~a ~a ~a to CoR ~a ~a".format(cur.ravl_read_procedureType_memberstate(),cur.SP_NF_S_RAVL_PRODUCT_NAME
    ,cur.SP_RA_RAVL_COUNTRY.NAME,this.SP_RA_RAVL_COUNTRY.NAME,this.NAME) );
    if (cur.SP_RA_RAVL_WORKSHARING1 instanceof opxSP_PT_RAVL_WORKSHARING
    && ! cur.SP_RA_RAVL_WORKSHARING1.ItemplateRule instanceof OpxSP_PT_RAVL_CAT_TEMPLATE)
    {
      cur.ravl_trace_log("RPLC - Caching...");
      rule = ravlTemplatesHT.get(cur.ravl_read_template_rule() );
      if (rule instanceof OpxSP_PT_RAVL_CAT_TEMPLATE)
      {
        cur.SP_RA_RAVL_WORKSHARING1.ItemplateRule = rule;
        cur.ravl_trace_log("RPLC - Cached>"+cur.SP_RA_RAVL_WORKSHARING1.ItemplateRule.get("NAME"));
      }
    }
    cur.ravl_process_links(ravlLinksHT);

  }
}











//  FILE    : SP_JS_RAVL_LINKING.ojs
// 
//  AUTHOR  : ksk
// 
//  VERSION : 1.1
// 
//  PURPOSE : V6 RAVL Linking Module
//
//  DEPENDENCY : SP_JS_RAVL_UTILITIES,SP_JS_RAVL_TEMPLATES,SP_JS_RAVL_CHANGE
// 
//  HISTORY :
//  Created  by ksk 10:21 09/02/2017....
//  Modified  by ksk 16:27 08/08/2017 parallel & deferred links to wsh CoR
//  Modified  by ksk 14:14 20/09/2017 error handling wsh undefined with warning
//  Modified  by ksk 11:19 15/11/2017, Linking on existing plan
//  Modified  by ksk 16:16 30/11/2017, Linking on MultiCoR CMS 1156


function ravl_set_linkingRulesHT()
{
  // this is a hashtable
  var err = 0;
  var v;
  
  if (! this instanceof Hashtable)
  {
    return 9;
  }
  
  for (var rule in "opxSP_PT_RAVL_LNK_TEMPLATE".findclass() 
    where "\w".test(rule.SP_AA_S_RAVL_LINK_SOURCE) )
  {
    // alert(rule.NAME+">>"+rule.SP_AA_S_RAVL_LINK_SOURCE);
    v = this.get(rule.NAME);
    if (v instanceof Vector)
    {
      v.push(rule);
    }
    else
    {
      // init
      this.set(rule.NAME, new vector(rule));
    }
  }
  return err;
}

function ravl_linking_retrieve_activity(rule, slot)
{
  // this is a wsh
  var act;
  
  for (var a in this.get("r.SP_RA_RAVL_WORKSHARING.WORK-STRUCTURE")
    where a.WBS_TYPE.NAME == rule.get(slot))
  {
    act = a;
    break;
  }
  
  return act;
}

function ravl_linking_retrieve_target(rule)
{
  // this is a wsh
  return this.ravl_linking_retrieve_activity(rule,"SP_AA_S_RAVL_TARGET_ACT");
}

function ravl_linking_retrieve_source(rule)
{
  // this is a wsh
  return this.ravl_linking_retrieve_activity(rule,"SP_AA_S_RAVL_SOURCE_ACT");
}

function ravl_find_rms()
{
  // this is a variation
  // this.SP_AA_RAVL_PROC_TYPE1 + this.SP_AA_RAVL_MEMBER_STATE2
  var rms;
  
  for (var v in this.SP_NF_RAVL_ID.mapVariation()
    where v.SP_AA_RAVL_MEMBER_STATE2 == "RMS"
  && v.SP_NF_S_RAVL_PRODUCT_NAME == this.SP_NF_S_RAVL_PRODUCT_NAME)
  // && v.SP_AA_RAVL_PROC_TYPE1 == this.SP_AA_RAVL_PROC_TYPE1) ignored because of template 13D
  {
    rms = v;
    break;
  }
  return rms;
}

function ravl_linking_retrieve_rule_set(ravlLinksHT)
{
  // this is a variation
  var res;
  var wsh = this.SP_RA_RAVL_WORKSHARING1;
  if (! wsh instanceof opxSP_PT_RAVL_WORKSHARING)
  {
    this.ravl_trace_log("RLRRS - Warning - Wsh undefined");
    return new vector();
  }
  
  if (! wsh.ItemplateRule instanceof OpxSP_PT_RAVL_CAT_TEMPLATE)
  {
    this.ravl_trace_log("RLRRS - FATAL Error - Template rule undefined");
    return new vector();
  }
  
  res = ravlLinksHT.get(wsh.ItemplateRule.get("NAME"));
  
  if (! res instanceof vector)
  {
    // Linking rule set not found
    this.ravl_trace_log("RLRRS - No link rule defined for template "+wsh.ItemplateRule.get("NAME"));
    return new vector();
  }
  return res;
}

function ravl_linking_target(rule)
{
  var target;
  var wsh = this.SP_RA_RAVL_WORKSHARING1;
  
  target = wsh.ravl_linking_retrieve_target(rule);
  
  return target;
}

function ravl_linking_source(rule)
{
  // this is a variation
  var source;
  var sourcingMode = new vector("CoR","ravl_find_cor"
  ,"RMS","ravl_find_rms"
  ,"WshCoR","ravl_find_wsh_cor"
  );
  var finder = sourcingMode.get(rule.SP_AA_S_RAVL_LINK_SOURCE);
  var sourceVaria;
  
  if(finder instanceof String)
  {
    sourceVaria = finder.call(this);
  }
  
  if (sourceVaria instanceof opxSP_PT_RAVL
  && sourceVaria.SP_RA_RAVL_WORKSHARING1 instanceof opxSP_PT_RAVL_WORKSHARING)
  {
    source = sourceVaria.SP_RA_RAVL_WORKSHARING1.ravl_linking_retrieve_source(rule);
  }
  else
  {
    // sourceWsh not found!
    this.ravl_trace_log("RLS - Source WBS not found for "+rule.printattribute() );
  }
  
  return source;
}

function ravl_linking_exist(source,target)
{
  var res = false;
  for (var lin in target.plinks where lin.ante == source)
  {
    alert(lin.ante.printattribute());
    alert(lin.succ.printattribute());
    res = true;
    break;
  }
  return res;
}

function ravl_linking_create(source,target,rule)
{
  // this is a variation
  var cal = "OpxCalendar".get("COM_CAL:5X7");
  var link;
  if (! cal instanceof OpxCalendar)
  {
    this.ravl_trace_log("RLC - CRITICAL Error - Calendar 5X7 undefined");
    // reject
    return "ERROR-RLC";
  }
  
  if (! ravl_linking_exist(source,target))
  {
    // create the link FINISH-START
    // ("PREDECESSORACTIVITY" "SUCCESSORACTIVITY")
    // PA  SUCC_ACTIVITY
    
    link = new opxLink(
    "PredecessorActivity",source
    ,"SuccessorActivity",target
    ,"Type","FINISH-START"
    ,"CAL",cal
    ,"SP_AA_RAVL_TYPE",rule.printattribute()
    ,"File",target.PROJECT
    );
    
    this.ravl_trace_log("~a - Linking ~a --> ~a".format(rule.printattribute()
    ,link.ante.NAME
    ,link.succ.NAME) );
  }
  
}

function ravl_linking_generate(rule)
{
  // this is a variation
  var target = this.ravl_linking_target(rule);
  var source = this.ravl_linking_source(rule);
  
  if !(source instanceof OpxActivity && target instanceof OpxActivity)
  {
    return "ERROR-RLG";
  }
  
  if (! rule.SP_AA_RAVL_IS_SOURCE)
  {
    this.ravl_linking_create(source,target,rule);
  }
  else
  {
    // link inversion
    this.ravl_linking_create(target,source,rule);
  }
}

function ravl_process_links(ravlLinksHT)
{
  // this is a variation
  var res;
  if (! ravlLinksHT instanceof Hashtable)
  {
    return 9;
  }
  var ruleSet = this.ravl_linking_retrieve_rule_set(ravlLinksHT);
  
  for (var rule in ruleSet)
  {
    this.ravl_trace_log("RPL - Ruling with "+rule.printattribute() );
    this.ravl_linking_generate(rule); 
  }
  
}

function ravl_process_links_rms(ravlLinksHT)
{
  // this is a RMS variation
  var ravlTemplatesHT = new HashTable("STRING");
  var err = ravlTemplatesHT.ravl_set_templateRulesHT();
  var rule;
  
  this.ravl_trace_log("RPLR - Linking extra CMS");
  
  for (var cms in this.SP_NF_RAVL_ID.mapVariation()
  where (! cms.SP_AA_B_RAVL_LEADING_COR)
  && (cms.SP_AA_RAVL_MEMBER_STATE2 == "CMS" || ".+Zone1-DIRECT-National$".test(cms.ravl_read_template_rule()) )
  && cms.SP_NF_S_RAVL_PRODUCT_NAME == this.SP_NF_S_RAVL_PRODUCT_NAME)
  {
    cms.ravl_trace_log("RPLR - Linking ~a ~a ~a to RMS ~a ~a".format(cms.ravl_read_procedureType_memberstate(),cms.SP_NF_S_RAVL_PRODUCT_NAME
    ,cms.SP_RA_RAVL_COUNTRY.NAME,this.SP_RA_RAVL_COUNTRY.NAME,this.NAME) );
    if (cms.SP_RA_RAVL_WORKSHARING1 instanceof opxSP_PT_RAVL_WORKSHARING
    && ! cms.SP_RA_RAVL_WORKSHARING1.ItemplateRule instanceof OpxSP_PT_RAVL_CAT_TEMPLATE)
    {
      cms.ravl_trace_log("RPLR - Caching...");
      rule = ravlTemplatesHT.get(cms.ravl_read_template_rule() );
      if (rule instanceof OpxSP_PT_RAVL_CAT_TEMPLATE)
      {
        cms.SP_RA_RAVL_WORKSHARING1.ItemplateRule = rule;
        cms.ravl_trace_log("RPLR - Cached>"+cms.SP_RA_RAVL_WORKSHARING1.ItemplateRule.get("NAME"));
      }
    }
    cms.ravl_process_links(ravlLinksHT);

  }
}

function ravl_find_wsh_cor()
{
  var cor;
  for (var varia in this.SP_NF_RAVL_ID.mapVariation() where varia.SP_AA_B_RAVL_LEADING_COR
  && varia.ravl_read_submission_mode() == "Worksharing"
  && varia.SP_NF_S_RAVL_PRODUCT_NAME == this.SP_NF_S_RAVL_PRODUCT_NAME
  && varia.SP_NF_RAVL_IO_LABEL_COR == this.SP_NF_RAVL_IO_LABEL_COR
  ) 
  {
    cor = varia;
    break;
  }
  return cor;
}

function ravl_process_links_CoR(ravlLinksHT)
{
  // this is a CoR variation with process action ..DLRP-updated
  var ravlTemplatesHT = new HashTable("STRING");
  var err = ravlTemplatesHT.ravl_set_templateRulesHT();
  var rule;
  
  this.ravl_trace_log("RPLC - Linking extra from CoR");
  
  for (var cur in this.SP_NF_RAVL_ID.mapVariation()
  where (! cur.ravl_read_isCoR("dummy"))
  && cur.SP_NF_S_RAVL_PRODUCT_NAME == this.SP_NF_S_RAVL_PRODUCT_NAME)
  {
    cur.ravl_trace_log("RPLC - Extra Linking ~a ~a ~a to CoR ~a ~a".format(cur.ravl_read_procedureType_memberstate(),cur.SP_NF_S_RAVL_PRODUCT_NAME
    ,cur.SP_RA_RAVL_COUNTRY.NAME,this.SP_RA_RAVL_COUNTRY.NAME,this.NAME) );
    if (cur.SP_RA_RAVL_WORKSHARING1 instanceof opxSP_PT_RAVL_WORKSHARING
    && ! cur.SP_RA_RAVL_WORKSHARING1.ItemplateRule instanceof OpxSP_PT_RAVL_CAT_TEMPLATE)
    {
      cur.ravl_trace_log("RPLC - Caching...");
      rule = ravlTemplatesHT.get(cur.ravl_read_template_rule() );
      if (rule instanceof OpxSP_PT_RAVL_CAT_TEMPLATE)
      {
        cur.SP_RA_RAVL_WORKSHARING1.ItemplateRule = rule;
        cur.ravl_trace_log("RPLC - Cached>"+cur.SP_RA_RAVL_WORKSHARING1.ItemplateRule.get("NAME"));
      }
    }
    cur.ravl_process_links(ravlLinksHT);

  }
}











 
//  FILE    : SP_JS_RAVL_MOVING_CHANGES.ojs
// 
//  AUTHOR  : ksk
// 
//  VERSION : 1.0
// 
//  PURPOSE : #462 RAVL Moving changes to another project tool
// 
//  HISTORY :
//  Created  by ksk 10:26 01/07/2014.

function ravl_get_target_wbs()
{
  var targetWBS;
  var wt = "OpxActivityType".get("VAR_MGT");
  
  if (this instanceof opxProject && wt instanceof OpxActivityType)
  {
    fromObject(wt)
    {
      for (var a in "OpxActivity".findclass() where a.project == this)
      {
        targetWBS = a;
        break;
      }
    }
  }
  else
  {
    alert("ravl_get_target_wbs>Not found into " +this);
  }
  return targetWBS;
}

function ravl_retrieve_planning()
{
  // this is a change name
  var ATList = new vector("VAR_CCR","VAR_CCR_LCR","VAR_LCR");
  var changePlanning;
  var isFound = false;
  var  wt;
  
  for (var at in ATList where ! isFound)
  {
    wt = "OpxActivityType".findclass().get(at);
    alert("Processing "+wt.name);
    if (wt instanceof OpxActivityType)
    {
      fromObject(wt)
      {
        for (var a in "OpxActivity".findclass() where a.name == this)
        {
          changePlanning = a;
          isFound = true;
          break;
        }
      }
    }
    else
    {
      alert("ravl_retrieve_planning>Activity Type not found "+at);
    }
  }
  
  return changePlanning;
}

function ravl_move_variation(newProject)
{
  // this is a change name
  var c =0;
  if (this instanceof String && newProject instanceof String)
  {
    alert("ravl_move_variation>Start processing change "+this);
    
    for (var varia in "OpxSP_PT_RAVL".findclass() where varia.SP_NF_RAVL_ID == this)
    {
      varia.SP_AA_RAVL_RA_PRJ = newProject;
      c++;
      
    }
    alert("ravl_move_variation>Has processed "+c);
  }
  else
  {
    alert("ravl_move_variation>Error when processing change "+this);
  }
  
}

function ravl_move_worksharing(newProject)
{
  // this is a change name
  var c = 0;
  
  if (this instanceof String && newProject instanceof String)
  {
    alert("ravl_move_worksharing>Start processing change "+this.toString());
    
    for (var w in "OpxSP_PT_RAVL_WORKSHARING".findclass() where w.SP_AA_RAVL_CCR == this)
    {
      // update the wsh name & the project
      w.name = w.name.Replaceregexp(w.SP_AA_RAVL_PROJECT,newProject);
      w.SP_AA_RAVL_PROJECT = newProject;
      c++;
      
    }
    alert("ravl_move_worksharing>Has processed "+c);
  }
    
}

function ravl_move_change_main()
{
  var targetProject = "OpxProject".get(context.SP_AA_S_RAVL_TARGET_PRJ);

  var targetWBS = targetProject.ravl_get_target_wbs();
  var changeWBS;
  
  if (! targetWBS instanceof OpxWbsElement)
  {
    alert("ravl_move_change_main>VAR_MGT WbsElement not found!");
    return 1
  }
  
  // Main loop on selected changes
  for (var ch in context.SP_AA_S_RAVL_CHANGES_LIST.parsevector())
  {
    changeWBS = ch.ravl_retrieve_planning();
    
    if (changeWBS instanceof OpxWbsElement)
    {
      withoutalerts
      {
        changeWBS.WBS_ELEMENT = targetWBS;
      }
      // modify variation
      ch.ravl_move_variation(context.SP_AA_S_RAVL_TARGET_PRJ);
      // modify wsh
      ch.ravl_move_worksharing(context.SP_AA_S_RAVL_TARGET_PRJ);
    }
    else
    {
      alert("ravl_move_change_main>WbsElement not found! "+ch);
    }
  }
  alert("Moving changes...>End of processing");
  // Context.SP_AA_S_RAVL_CHANGES_LIST="";
  // Context.SP_AA_S_RAVL_TARGET_PRJ="";
  return 0
}

function ravl_rename_project_main()
{
  var targetProject = "OpxProject".get(context.SP_AA_S_RAVL_TARGET_PRJ);
  var wshC = 0;
  var variaC = 0;
  var wbs;
  
  if (! targetProject instanceof OpxProject)
  {
    alert("ravl_rename_project_main>Project not found: "+context.SP_AA_S_RAVL_TARGET_PRJ);
    return 1
  }
  
  // processing worksharing
  alert("ravl_rename_project_main>worksharing>Start processing")
  for (var w in "OpxSP_PT_RAVL_WORKSHARING".findclass() 
    where w.SP_AA_RAVL_PROJECT == context.SP_AA_S_RAVL_TARGET_PRJ)
  {
    // update the wsh name & the project with the new name
    w.name = w.name.Replaceregexp(w.SP_AA_RAVL_PROJECT,context.SP_AA_S_RAVL_NEW_PRJ_NAME);
    w.SP_AA_RAVL_PROJECT = context.SP_AA_S_RAVL_NEW_PRJ_NAME;
    wshC++;
  }
  alert("ravl_rename_project_main>worksharing>Has processed "+wshC);
  
  // processing Variations
  alert("ravl_rename_project_main>variation>Start processing");
  for (var varia in "OpxSP_PT_RAVL".findclass() 
    where varia.SP_AA_RAVL_RA_PRJ == context.SP_AA_S_RAVL_TARGET_PRJ)
  {
    varia.SP_AA_RAVL_RA_PRJ = context.SP_AA_S_RAVL_NEW_PRJ_NAME;
    variaC++;
    
  }
  alert("ravl_rename_project_main>variation>Has processed "+variaC);
  
  // renaming project and project level WBS
  wbs = "OpxWbsElement".get(targetProject.name);
  withoutalerts
  {
    targetProject.SP_AA_S_BACKUP_PRJ_NAME = targetProject.name;
    targetProject.name = context.SP_AA_S_RAVL_NEW_PRJ_NAME;
    if (wbs instanceof OpxWbsElement)
    {
      wbs.name = context.SP_AA_S_RAVL_NEW_PRJ_NAME;
      wbs.desc = context.SP_AA_S_RAVL_NEW_PRJ_NAME;
    }
  }
  alert("ravl_rename_project_main>The project has been renamed to "+targetProject.name);
  alert("Renaming project...>End of processing");
  
}






























//  FILE    : SP_JS_RAVL_MOVING_CHANGES.ojs
// 
//  AUTHOR  : ksk
// 
//  VERSION : 1.0
// 
//  PURPOSE : #462 RAVL Moving changes to another project tool
// 
//  HISTORY :
//  Created  by ksk 10:26 01/07/2014.

function ravl_get_target_wbs()
{
  var targetWBS;
  var wt = "OpxActivityType".get("VAR_MGT");
  
  if (this instanceof opxProject && wt instanceof OpxActivityType)
  {
    fromObject(wt)
    {
      for (var a in "OpxActivity".findclass() where a.project == this)
      {
        targetWBS = a;
        break;
      }
    }
  }
  else
  {
    alert("ravl_get_target_wbs>Not found into " +this);
  }
  return targetWBS;
}

function ravl_retrieve_planning()
{
  // this is a change name
  var ATList = new vector("VAR_CCR","VAR_CCR_LCR","VAR_LCR");
  var changePlanning;
  var isFound = false;
  var  wt;
  
  for (var at in ATList where ! isFound)
  {
    wt = "OpxActivityType".findclass().get(at);
    alert("Processing "+wt.name);
    if (wt instanceof OpxActivityType)
    {
      fromObject(wt)
      {
        for (var a in "OpxActivity".findclass() where a.name == this)
        {
          changePlanning = a;
          isFound = true;
          break;
        }
      }
    }
    else
    {
      alert("ravl_retrieve_planning>Activity Type not found "+at);
    }
  }
  
  return changePlanning;
}

function ravl_move_variation(newProject)
{
  // this is a change name
  var c =0;
  if (this instanceof String && newProject instanceof String)
  {
    alert("ravl_move_variation>Start processing change "+this);
    
    for (var varia in "OpxSP_PT_RAVL".findclass() where varia.SP_NF_RAVL_ID == this)
    {
      varia.SP_AA_RAVL_RA_PRJ = newProject;
      c++;
      
    }
    alert("ravl_move_variation>Has processed "+c);
  }
  else
  {
    alert("ravl_move_variation>Error when processing change "+this);
  }
  
}

function ravl_move_worksharing(newProject)
{
  // this is a change name
  var c = 0;
  
  if (this instanceof String && newProject instanceof String)
  {
    alert("ravl_move_worksharing>Start processing change "+this.toString());
    
    for (var w in "OpxSP_PT_RAVL_WORKSHARING".findclass() where w.SP_AA_RAVL_CCR == this)
    {
      // update the wsh name & the project
      w.name = w.name.Replaceregexp(w.SP_AA_RAVL_PROJECT,newProject);
      w.SP_AA_RAVL_PROJECT = newProject;
      c++;
      
    }
    alert("ravl_move_worksharing>Has processed "+c);
  }
    
}

function ravl_move_change_main()
{
  var targetProject = "OpxProject".get(context.SP_AA_S_RAVL_TARGET_PRJ);

  var targetWBS = targetProject.ravl_get_target_wbs();
  var changeWBS;
  
  if (! targetWBS instanceof OpxWbsElement)
  {
    alert("ravl_move_change_main>VAR_MGT WbsElement not found!");
    return 1
  }
  
  // Main loop on selected changes
  for (var ch in context.SP_AA_S_RAVL_CHANGES_LIST.parsevector())
  {
    changeWBS = ch.ravl_retrieve_planning();
    
    if (changeWBS instanceof OpxWbsElement)
    {
      withoutalerts
      {
        changeWBS.WBS_ELEMENT = targetWBS;
      }
      // modify variation
      ch.ravl_move_variation(context.SP_AA_S_RAVL_TARGET_PRJ);
      // modify wsh
      ch.ravl_move_worksharing(context.SP_AA_S_RAVL_TARGET_PRJ);
    }
    else
    {
      alert("ravl_move_change_main>WbsElement not found! "+ch);
    }
  }
  alert("Moving changes...>End of processing");
  // Context.SP_AA_S_RAVL_CHANGES_LIST="";
  // Context.SP_AA_S_RAVL_TARGET_PRJ="";
  return 0
}

function ravl_rename_project_main()
{
  var targetProject = "OpxProject".get(context.SP_AA_S_RAVL_TARGET_PRJ);
  var wshC = 0;
  var variaC = 0;
  var wbs;
  
  if (! targetProject instanceof OpxProject)
  {
    alert("ravl_rename_project_main>Project not found: "+context.SP_AA_S_RAVL_TARGET_PRJ);
    return 1
  }
  
  // processing worksharing
  alert("ravl_rename_project_main>worksharing>Start processing")
  for (var w in "OpxSP_PT_RAVL_WORKSHARING".findclass() 
    where w.SP_AA_RAVL_PROJECT == context.SP_AA_S_RAVL_TARGET_PRJ)
  {
    // update the wsh name & the project with the new name
    w.name = w.name.Replaceregexp(w.SP_AA_RAVL_PROJECT,context.SP_AA_S_RAVL_NEW_PRJ_NAME);
    w.SP_AA_RAVL_PROJECT = context.SP_AA_S_RAVL_NEW_PRJ_NAME;
    wshC++;
  }
  alert("ravl_rename_project_main>worksharing>Has processed "+wshC);
  
  // processing Variations
  alert("ravl_rename_project_main>variation>Start processing");
  for (var varia in "OpxSP_PT_RAVL".findclass() 
    where varia.SP_AA_RAVL_RA_PRJ == context.SP_AA_S_RAVL_TARGET_PRJ)
  {
    varia.SP_AA_RAVL_RA_PRJ = context.SP_AA_S_RAVL_NEW_PRJ_NAME;
    variaC++;
    
  }
  alert("ravl_rename_project_main>variation>Has processed "+variaC);
  
  // renaming project and project level WBS
  wbs = "OpxWbsElement".get(targetProject.name);
  withoutalerts
  {
    targetProject.SP_AA_S_BACKUP_PRJ_NAME = targetProject.name;
    targetProject.name = context.SP_AA_S_RAVL_NEW_PRJ_NAME;
    if (wbs instanceof OpxWbsElement)
    {
      wbs.name = context.SP_AA_S_RAVL_NEW_PRJ_NAME;
      wbs.desc = context.SP_AA_S_RAVL_NEW_PRJ_NAME;
    }
  }
  alert("ravl_rename_project_main>The project has been renamed to "+targetProject.name);
  alert("Renaming project...>End of processing");
  
}






























 
//  FILE    : SP_JS_RAVL_NEW_PRODUCT.ojs
// 
//  AUTHOR  : ksk
// 
//  VERSION : 2.0
// 
//  PURPOSE : RAVL new product
// 
//  HISTORY :
// Created  by ksk 14:10 30/11/2016, refactoring legacy code

function Ravl_WS_automatic_product_create()
{
  // var pid = this.SP_RA_RAVL_PRODUCT + "."+ this.SP_RA_RAVL_COUNTRY;
  // SP_NF_S_RAVL_ID_GALY_ID  :VALUE-F	"SUBSTRING(NAME,0,3)"	SPAS_PT_PRODUCT
  // SP_RAVL_NF_NEW_PRODUCT	 :VALUE-F	"SUBSTRING(SP_RA_RAVL_PRODUCT,0,3)" SP_TT_RAVL_IMPORT
  // for (var vCountry in \"opxSP_PT_CL_COUNTRY\" where vCountry.SP_AA_S_CL_COUNTRY_CODE==vValue)
  // SP_RAVL_NF_NEW_RA_COUNTRY "ravl_get_country_by_code( SP_RA_RAVL_COUNTRY)"
  
  var refProduct;
  var newCountry;
  var newProduct;
  var pid;
  
  context.ravl_trace_log("WAPC - Processing variation "+this.SP_AA_RAVL_RA_ACT_ID);

  for (var p in "OpxSPAS_PT_PRODUCT".findclass() where p.SP_AA_RAVL_PRODUCT_REF
  && p.SP_NF_S_RAVL_ID_GALY_ID == this.SP_RA_RAVL_PRODUCT) 
  {
    refProduct = p;
    break;
  }
  
  for (var c in "opxSP_PT_CL_COUNTRY".findclass() where c.SP_AA_S_CL_COUNTRY_CODE == this.SP_RA_RAVL_COUNTRY)
  {
    newCountry = c;
    break;
  }
  
  // secure creation with no duplication, user can write into COM_XBS
  if (refProduct instanceof OpxSPAS_PT_PRODUCT && newCountry instanceof OpxSP_PT_CL_COUNTRY)
  {
    context.ravl_trace_log("WAPC - ~a - Reference product ~a".format(this.SP_AA_RAVL_RA_ACT_ID,refProduct.printattribute()) );
    context.ravl_trace_log("WAPC - ~a - New product for ~a".format(this.SP_AA_RAVL_RA_ACT_ID,newCountry.printattribute()) );
    
    pid = new vector(refProduct.name,newCountry.name);
    
    newProduct = "OpxSPAS_PT_PRODUCT".findclass().get(pid.join(".") );
    if (! newProduct instanceof OpxSPAS_PT_PRODUCT)
    {
      context.ravl_trace_log("WAPC - ~a - Creating ~a".format(this.SP_AA_RAVL_RA_ACT_ID,pid.join(".")) );
      newProduct = refProduct.copy("_SP_RA_PROD_CL_COUNTRY", newCountry);
      newProduct.SP_AA_RAVL_PRODUCT_REF = false;
      newProduct.SP_AA_RAVL_PRODUCT_CREATED_BY = true; 
    }
  }
  return newProduct;
}


//  FILE    : SP_JS_RAVL_NEW_PRODUCT.ojs
// 
//  AUTHOR  : ksk
// 
//  VERSION : 2.0
// 
//  PURPOSE : RAVL new product
// 
//  HISTORY :
// Created  by ksk 14:10 30/11/2016, refactoring legacy code

function Ravl_WS_automatic_product_create()
{
  // var pid = this.SP_RA_RAVL_PRODUCT + "."+ this.SP_RA_RAVL_COUNTRY;
  // SP_NF_S_RAVL_ID_GALY_ID  :VALUE-F	"SUBSTRING(NAME,0,3)"	SPAS_PT_PRODUCT
  // SP_RAVL_NF_NEW_PRODUCT	 :VALUE-F	"SUBSTRING(SP_RA_RAVL_PRODUCT,0,3)" SP_TT_RAVL_IMPORT
  // for (var vCountry in \"opxSP_PT_CL_COUNTRY\" where vCountry.SP_AA_S_CL_COUNTRY_CODE==vValue)
  // SP_RAVL_NF_NEW_RA_COUNTRY "ravl_get_country_by_code( SP_RA_RAVL_COUNTRY)"
  
  var refProduct;
  var newCountry;
  var newProduct;
  var pid;
  
  context.ravl_trace_log("WAPC - Processing variation "+this.SP_AA_RAVL_RA_ACT_ID);

  for (var p in "OpxSPAS_PT_PRODUCT".findclass() where p.SP_AA_RAVL_PRODUCT_REF
  && p.SP_NF_S_RAVL_ID_GALY_ID == this.SP_RA_RAVL_PRODUCT) 
  {
    refProduct = p;
    break;
  }
  
  for (var c in "opxSP_PT_CL_COUNTRY".findclass() where c.SP_AA_S_CL_COUNTRY_CODE == this.SP_RA_RAVL_COUNTRY)
  {
    newCountry = c;
    break;
  }
  
  // secure creation with no duplication, user can write into COM_XBS
  if (refProduct instanceof OpxSPAS_PT_PRODUCT && newCountry instanceof OpxSP_PT_CL_COUNTRY)
  {
    context.ravl_trace_log("WAPC - ~a - Reference product ~a".format(this.SP_AA_RAVL_RA_ACT_ID,refProduct.printattribute()) );
    context.ravl_trace_log("WAPC - ~a - New product for ~a".format(this.SP_AA_RAVL_RA_ACT_ID,newCountry.printattribute()) );
    
    pid = new vector(refProduct.name,newCountry.name);
    
    newProduct = "OpxSPAS_PT_PRODUCT".findclass().get(pid.join(".") );
    if (! newProduct instanceof OpxSPAS_PT_PRODUCT)
    {
      context.ravl_trace_log("WAPC - ~a - Creating ~a".format(this.SP_AA_RAVL_RA_ACT_ID,pid.join(".")) );
      newProduct = refProduct.copy("_SP_RA_PROD_CL_COUNTRY", newCountry);
      newProduct.SP_AA_RAVL_PRODUCT_REF = false;
      newProduct.SP_AA_RAVL_PRODUCT_CREATED_BY = true; 
    }
  }
  return newProduct;
}


 
//	NAME	: SP_JS_RAVL_QV_REGFAST_EXPORT
//	AUTHOR  : bcordel
//  PURPOSE : COMPASS v6 , Functions for QV regfast export
//  
//  HISTORY :
//
var revision_number ="1.2";
//
//	Revision 1.1  2017/12/04 bcordel
//	adding suppression of target file if existing
// 
//	Revision 1.2  16:18 17/01/2018 ksk
//	bug on file deletion
//  
function sp_copy_regfast_files ()
{
	var s_origin_directory = context.SP_NF_S_RAVL_QV_LINK;
	var s_target_directory = context.SP_GS_S_REGFAST_TARGET_DIRECTORY;

	var v_files_to_copy = new vector ("RAVL_ACTs_TO_QV.csv","RAVL_AREA_TO_QV.csv","RAVL_PRODUCTS_TO_QV.csv");

	for (var s_file in v_files_to_copy)
	{
		var o_originfilepath = new PathName(s_origin_directory+"/"+s_file);
		if(o_originfilepath.probefile())
		{
			var o_targetfilepath = new PathName(s_target_directory+s_file);
			try{
				if (o_targetfilepath.ProbeFile())
				{
					o_targetfilepath.Deletefile();
				}
				o_originfilepath.copyfile(o_targetfilepath);
			}catch (error e){
				writetolog("Unable to copy file ~a, following error encountered : ~a",s_file,e);
			}
		}else{
			writetolog("No file found for ~a in directory ~b/",s_file,s_origin_directory);
		}
	}
}
sp_copy_regfast_files.exportfunction();

writetolog("Script SP_JS_RAVL_QV_REGFAST_EXPORT loaded with version ~a ", revision_number);

//	NAME	: SP_JS_RAVL_QV_REGFAST_EXPORT
//	AUTHOR  : bcordel
//  PURPOSE : COMPASS v6 , Functions for QV regfast export
//  
//  HISTORY :
//
var revision_number ="1.2";
//
//	Revision 1.1  2017/12/04 bcordel
//	adding suppression of target file if existing
// 
//	Revision 1.2  16:18 17/01/2018 ksk
//	bug on file deletion
//  
function sp_copy_regfast_files ()
{
	var s_origin_directory = context.SP_NF_S_RAVL_QV_LINK;
	var s_target_directory = context.SP_GS_S_REGFAST_TARGET_DIRECTORY;

	var v_files_to_copy = new vector ("RAVL_ACTs_TO_QV.csv","RAVL_AREA_TO_QV.csv","RAVL_PRODUCTS_TO_QV.csv");

	for (var s_file in v_files_to_copy)
	{
		var o_originfilepath = new PathName(s_origin_directory+"/"+s_file);
		if(o_originfilepath.probefile())
		{
			var o_targetfilepath = new PathName(s_target_directory+s_file);
			try{
				if (o_targetfilepath.ProbeFile())
				{
					o_targetfilepath.Deletefile();
				}
				o_originfilepath.copyfile(o_targetfilepath);
			}catch (error e){
				writetolog("Unable to copy file ~a, following error encountered : ~a",s_file,e);
			}
		}else{
			writetolog("No file found for ~a in directory ~b/",s_file,s_origin_directory);
		}
	}
}
sp_copy_regfast_files.exportfunction();

writetolog("Script SP_JS_RAVL_QV_REGFAST_EXPORT loaded with version ~a ", revision_number);

 
//  FILE    : SP_JS_RAVL_REGFAST_IMPORT.ojs
// 
//  AUTHOR  : ksk
// 
//  VERSION : 2.0
// 
//  PURPOSE : variation import module
// 
//  HISTORY :
// Created  by ksk 15:22 05/11/2012
// Modified  by ksk 09:36 10/01/2013, add ravl_execute()
// Modified  by ksk 13:11 11/02/2013, add variation trace
// Modified  by ksk 13:11 11/02/2013, Initializing OPX2_FLAG to 0 on intranet restart
// Modified  by ksk 11:40 19/02/2013, added rule C_validated_ident >> recover
// Modified  by ksk 09:38 07/03/2013, added ravl_execute_V1(vector)
// Modified  by ksk 09:38 07/03/2013, added vector of variations
// Modified  by ksk 13:29 18/03/2013, Initializing ravl_set_STATUS_REGFAST_OPX2 for $intranet
// Modified  by ksk 11:28 17/09/2013, added new ravl_init_recovery_rules for re-create case
// Modified  by ksk 10:31 25/09/2013, mapping for MultiCoR SP_AA_B_RAVL_LEADING_COR
// Modified  by SG 6/01/2014, added new attribute "SP_AA_RAVL_PACK_SET_NAME" as part of evolution 387
// Modified  by ksk 13:54 07/02/2014, catching events in ravl_update_variation_proto 391..
// Modified  by jbe 09:00 24/04/2014, Add function Get_Database_Source_bus to catch database source depending on database name
// Modified  by ksk 11:42 05/11/2014, Evol 420 MCM implementation date
// Modified  by YSA 04:30 30/06/2014, Evol 415 Blank fields coming from Regfast
// Modified  by ksk 13:32 30/11/2016, mocking for V6
// Modified  by ksk 16:43 15/02/2017, ravl_process_variations
// Modified  by ksk 13:16 22/02/2017, no pri sec packaging arg
// Modified  by ksk 13:03 21/07/2017, data quality no comma
// Modified  by ksk 14:17 15/09/2017, Only RAVL in databasename should reset the status
// Modified  by ksk 10:58 05/10/2017, CCR number LCR number without trailing space D759

// database source
// SP_DS_RAVL_EXCHANGE

// table GEN$RAVL.STATUS_REGFAST_OPX2

// SP_RQ_RAVL_IMPORT_REGFAST

var DEBUG = true;

// number of variations processed by run
var MAX_OCCURENCE = 10;

function Get_Database_Source_bus(database_name)
{
	var conn;
	if (database_name=="RAVL_PROD")
	{
		 var conn = "OpxDatabaseSource".get("SP_DS_RAVL_EXCHANGE_PROD");
		 context.ravl_trace_log("CTRL CONNEXION1 conn :"+conn);	
		 return conn;
	}
	else 
	{
		if (database_name=="RAVL_AT")
		{
			var conn = "OpxDatabaseSource".get("SP_DS_RAVL_EXCHANGE_AT");
			context.ravl_trace_log("CTRL CONNEXION1 conn :"+conn);	
			return conn;
		}
		else
		{
			var conn = "OpxDatabaseSource".get("SP_DS_RAVL_EXCHANGE_DEV");
			context.ravl_trace_log("CTRL CONNEXION1 conn :"+conn);
			return conn;
		}
	}
}


// set import status on GEN$RAVL.STATUS_REGFAST_OPX2 table true=1=importing
function ravl_set_STATUS_REGFAST_OPX2(flag)
{
  var conn = Get_Database_Source_bus(context.callstringformula("$DATABASE_NAME"));
  // writeln("CTRL CONNEXION2 conn :"+conn);
  // alert(conn.Getinternalvalue("databasetype"));
  // var sch = "GEN$RAVL.";
  var err=0;
  var mess;
  
  if !(flag instanceof number ) return 9;
  
  if (conn.SqlTestConnection 
      && conn.SqlCountTuple("GEN$RAVL.STATUS_REGFAST_OPX2") == 1)
  {
    // alert(">>Connected!")
    SqlwithDatabaseTransaction(conn)
    {
      mess = conn.SqlExecuteImmediate ("update GEN$RAVL.STATUS_REGFAST_OPX2 set OPX2_FLAG="+flag.tostring());
      if (mess)
      {
        conn.SqlCommit();
      }
      else
      {
        conn.Sqlrollback();
      }      
    }
  }
  else
  {
    // database error
    err = 1;
  }
  // writeln(err+">>"+mess);
  return err;
}

// initialization of the STATUS_REGFAST_OPX2 table false=RAVL not running  
function ravl_init_STATUS_REGFAST_OPX2()
{
  var conn = Get_Database_Source_bus(context.callstringformula("$DATABASE_NAME"));
  // writeln("CTRL CONNEXION2 conn :"+conn);
  var err=0;
  var sqlmes;

  if (conn.SqlTestConnection 
      && conn.SqlCountTuple("GEN$RAVL.STATUS_REGFAST_OPX2") == 0)
  {
    alert(">>Initializing STATUS_REGFAST_OPX2")
    SqlwithDatabaseTransaction(conn)
    {
      sqlmes = conn.SqlExecuteImmediate ("INSERT INTO GEN$RAVL.STATUS_REGFAST_OPX2 (OPX2_FLAG, OPER_REF) VALUES (0, 'RAVL')");
      if (sqlmes)
      {
        conn.SqlCommit();
        alert("Terminated OK");
      }
      else
      {
        err = 1;
        conn.Sqlrollback();
        alert("An error has occurred, please contact the administrator")
      }
      // 
    }
  }
  else
  {
    // no database connexion
    alert("An error has occurred, please contact the administrator")
    err = 1;
  }
  // return err;
}

ravl_init_STATUS_REGFAST_OPX2.exportfunction();

function ravl_import_into_SP_TT_RAVL_IMPORT()
if (context.callstringformula("$DATABASE_NAME")=="RAVL_PROD")
	{
	  // import from datasource PROD
	  return context.callmacro("SP_RQ_RAVL_IMPORT_REGFAST_PROD");
	}
else 
	{
		if (context.callstringformula("$DATABASE_NAME")=="RAVL_AT")
		{
			// import from datasource AT
			return context.callmacro("SP_RQ_RAVL_IMPORT_REGFAST_AT");
		}
		else
		{
			// import from datasource DEV
			return context.callmacro("SP_RQ_RAVL_IMPORT_REGFAST_DEV");
		}
	}

// data validation: 1>>Country, 2>>Product
// var ravlProductHT = new HashTable("STRING");

function ravl_set_productHT()
{
  var err=0;
  var country;
  var countryCode;
  if (this instanceof HashTable) 
  {
    this.clear();
    for (var p in "OpxSPAS_PT_PRODUCT".findclass())
    {
      country = p.get("_SP_RA_PROD_CL_COUNTRY");
      if ( country instanceof OpxSP_PT_CL_COUNTRY )
      {
        countryCode = country.SP_AA_S_CL_COUNTRY_CODE;
        if (countryCode instanceof string && countryCode.length > 0)
        this.set(p.name.substring(0,3)+"."+countryCode, p);
      }
    }
    // return err = 2 on empty HT
    if (this.count == 0) err = 2;

  }
  else
  {
    // type error
    err = 9;
  }

  return err;
}

function ravl_data_validation_init()
{
  // var err = ravlProductHT.ravl_set_productHT();
  // for (var p in ravlProductHT)
  // writeln(p);
  // writeln(ravlProductHT.count);
  // return err;
}

function ravl_data_validation_read(ravlProductHT)
{
  // var err = ravlProductHT.ravl_set_productHT();
  if (ravlProductHT instanceof HashTable && ravlProductHT.count ==0) return 9;
  
  for (var p in ravlProductHT)
  writeln("HT>>>"+p);
  // writeln("HT>>>"+ravlProductHT.get(p));
  // writeln(ravlProductHT.count);
  return "ravl_data_validation_read.count>>"+ravlProductHT.count;
}


// validate a SP_TT_RAVL_IMPORT object : this.Ivalidated?= true or false, Irunpath trace the processing
// set the Iproduct & Icountry on the object
function ravl_TT_data_validate(ravlProductHT)
{
  var err=0;
  var product;
  var country;
  var d = new date();
  
  // ravlProductHT is empty !
  if (ravlProductHT instanceof HashTable && ravlProductHT.count ==0) return 9;
  if ! (this instanceof OpxSP_TT_RAVL_IMPORT)  return 9;
  
  this.Ivalidated = false;  
  this.Irunpath = "";
  this.Iseconds = d.date; 
  
  // data quality
  this.SP_AA_RAVL_CMC_COR = this.SP_AA_RAVL_CMC_COR.maskregexp(",");
  this.SP_AA_RAVL_LCC_COR = this.SP_AA_RAVL_LCC_COR.maskregexp(",");
  this.SP_AA_S_RAVL_CCR_NUM = this.SP_AA_S_RAVL_CCR_NUM.maskregexp("\b+$");
  this.SP_AA_RAVL_LCCN = this.SP_AA_RAVL_LCCN.maskregexp("\b+$");
  
  // get pid from TT object
  var pid = this.SP_RA_RAVL_PRODUCT + "."+ this.SP_RA_RAVL_COUNTRY;
  if (pid instanceof string && pid.length >0)
  {
    product = ravlProductHT.get(pid);
    if (product instanceof OpxSPAS_PT_PRODUCT)
    {
      country = product.get("_SP_RA_PROD_CL_COUNTRY");
      this.Ivalidated = true;
      // this.SP_RA_RAVL_PRODUCT = product.printattribute();
      this.Iproduct = product;
      this.Icountry = country;
      this.Irunpath = d.tostring()+">Val=OK";
    }
    else
    {
      // auto product creation
      product = this.Ravl_WS_automatic_product_create();
      if (product instanceof OpxSPAS_PT_PRODUCT)
      {
        country = product.get("_SP_RA_PROD_CL_COUNTRY");
        this.Ivalidated = true;
        ravlProductHT.set(pid, product);
        this.Iproduct = product;
        this.Icountry = country;
        this.Irunpath = d.tostring()+">Val=NewPro";
      }
      else
      {
        this.Ivalidated = false;
        this.Irunpath = d.tostring()+">Val=KO";
      }
      
    }
  }
  else
  {
    this.Ivalidated = false;
    err = 1;
  }

  return err;
}

// interface data mapping

function ravl_set_mapping()
{
  // context.ravlMappingPrototype = new vector(
  return new vector(
  "NAME", "SP_AA_RAVL_RA_ACT_ID",
  "SP_AA_B_RAVL_UPDATED", "SP_AA_B_RAVL_UPDATED",
  "SP_AA_N_RAVL_TIMESTAMP", "SP_AA_N_RAVL_TIMESTAMP",
  "SP_AA_RAVL_CMC_COR", "SP_AA_RAVL_CMC_COR",
  "SP_AA_RAVL_COM_DOC_IMPACT", "SP_AA_RAVL_COM_DOC_IMPACT",
  "SP_AA_RAVL_LBL_ART_IMPACT", "SP_AA_RAVL_LBL_ART_IMPACT",
  "SP_AA_RAVL_LBL_TXT_IMPACT", "SP_AA_RAVL_LBL_TXT_IMPACT",
  "SP_AA_RAVL_LCCN", "SP_AA_RAVL_LCCN",
  "SP_AA_RAVL_LCC_COR", "SP_AA_RAVL_LCC_COR",
  "SP_AA_RAVL_LCC_COUNTRY_CAT", "SP_AA_S_RAVL_LCC_CONTRY_CAT",
  "SP_AA_RAVL_LCC_GO", "SP_AA_RAVL_LCC_GO",
  "SP_AA_RAVL_LCC_SUB_USER", "SP_AA_S_RAVL_LCC_COUNTRY_SUB_PROCESS",
  "SP_AA_RAVL_LIODA", "SP_AA_RAVL_LIODA",
  "SP_AA_RAVL_MEMBER_STATE2", "SP_AA_RAVL_MEMBER_STATE",
  "SP_AA_RAVL_PLANNING_STATUS", "SP_AA_RAVL_PLANNING_STATUS",
  "SP_AA_RAVL_PRI_PACKAGING", "SP_AA_RAVL_PRI_PACKAGING",
  "SP_AA_RAVL_PROC_TYPE1", "SP_AA_RAVL_PROC_TYPE",
  "SP_AA_RAVL_PROTECT_FILE_NEED", "SP_AA_RAVL_PROTECT_FILE_NEED",
  "SP_AA_RAVL_RA_ACT_ID", "SP_AA_RAVL_RA_ACT_ID",
  "SP_AA_RAVL_RA_PRJ", "SP_AA_RAVL_RA_PRJ",
  "SP_AA_RAVL_SEC_PACKAGING", "SP_AA_RAVL_SEC_PACKAGING",
  "SP_AA_RAVL_SUB_MODE", "SP_AA_RAVL_SUB_MODE",
  "SP_AA_RAVL_SUB_PROCESS_USER", "SP_AA_S_RAVL_IO_COUNTRY_SUB_PROCESS",
  "SP_AA_RAVL_VARIATION_TITLE", "SP_AA_RAVL_VARIATION_TITLE",
  "SP_AA_RAVL_VARIATION_TYPE2", "SP_AA_RAVL_VARIATION_TYPE",
  "SP_AA_S_RAVL_CCR_NUM", "SP_AA_S_RAVL_CCR_NUM",
  "SP_AA_S_RAVL_COUNTRY_CAT", "SP_AA_S_RAVL_IO_COUNTRY_CAT",
  "SP_AA_S_RAVL_DO_PE_CO", "SP_AA_S_RAVL_DO_PE_CO",
  "SP_AA_S_RAVL_LICENSE", "SP_AA_S_RAVL_LICENSE",
  "SP_AA_S_RAVL_PR_PA_TY", "SP_AA_S_RAVL_PR_PA_TY",
  "SP_AA_S_RAVL_REPORT_CAT_USER", "SP_AA_S_RAVL_REPORT_CAT",
  "SP_AA_B_RAVL_LEADING_COR", "SP_AA_B_RAVL_LEADING_COR",
  "SP_AA_RAVL_PACK_SET_NAME","SP_AA_RAVL_PACK_SET_NAME",
  "SP_AA_D_RAVL_IMPLEM_DATE","SP_AA_D_RAVL_IMPLEM_DATE"
  );
  // "SP_AA_RAVL_APPLICATION_STATUS", "SP_AA_RAVL_APPLICATION_STATUS",
  // RA to Country
  // RA to product
  // SP_AA_S_RAVL_RECOVERY_STATUS
  //"SP_AA_RAVL_BLOCNOTE", "SP_AA_RAVL_BLOCNOTE",
  //"SP_AA_RAVL_CMC_NAME", "SP_AA_RAVL_CMC_NAME",
  //"SP_AA_RAVL_DESCRIPTION", "SP_AA_RAVL_DESCRIPTION",
  //"SP_AA_RAVL_DESCRIPTION_LCR", "SP_AA_RAVL_DESCRIPTION_LCR",
  //"SP_AA_RAVL_DRUG_SUBSTANCE", "SP_AA_RAVL_DRUG_SUBSTANCE",
  //"SP_AA_RAVL_EXPECTED_END", "SP_AA_RAVL_EXPECTED_END",
  //"SP_AA_RAVL_FRANCHISE", "SP_AA_RAVL_FRANCHISE",
  //"SP_AA_RAVL_PF_CODE", "SP_AA_RAVL_PF_CODE",
  //"SP_AA_RAVL_PRES_IMPACT", "SP_AA_RAVL_PRES_IMPACTED",
  //"SP_AA_RAVL_SCORE_RISK_01", "SP_AA_RAVL_SCORE_RISK_01",
  //"SP_AA_RAVL_SCORE_RISK_02", "SP_AA_RAVL_SCORE_RISK_02",
  //"SP_AA_RAVL_SCORE_RISK_03", "SP_AA_RAVL_SCORE_RISK_03",
  //"SP_AA_RAVL_SITE", "SP_AA_RAVL_SITE",
  //"SP_AA_RAVL_STATUS", "SP_AA_RAVL_STATUS",
  //"SP_AA_RAVL_STATUS_LCR", "SP_AA_RAVL_STATUS_LCR",
  //"SP_AA_S_RAVL_CCR_RA_ASS", "SP_AA_S_RAVL_CCR_RA_ASS",
  //"SP_AA_S_RAVL_LCR_RA_ASS", "SP_AA_S_RAVL_LCR_RA_ASS",
  //"SP_AA_S_RAVL_VAR_COMMENTS", "SP_AA_S_RAVL_VAR_COMMENTS",
  //"SP_AA_RAVL_SAMPLES_NEED", "SP_AA_RAVL_SAMPLES_NEED",
}

// from a TT object, append history object: IhistoID is set
function ravl_append_history(mapping)
{
  var err = 0;
  if (mapping instanceof vector && mapping.length == 0) return 9;
  if ! (this instanceof OpxSP_TT_RAVL_IMPORT) return 9;
  var history;
  if false && DEBUG writeln("mapping>>"+mapping);
  var attributeList = new vector(
  "SP_AA_RAVL_RA_ACT_ID", 
  "SP_AA_RAVL_PLANNING_STATUS", 
  "SP_AA_RAVL_LIODA", 
  "SP_AA_RAVL_LCC_GO", 
  "SP_AA_S_RAVL_REPORT_CAT_USER", 
  "SP_AA_RAVL_VARIATION_TYPE2", 
  "SP_AA_S_RAVL_COUNTRY_CAT", 
  "SP_AA_RAVL_SUB_MODE", 
  "SP_AA_RAVL_SUB_PROCESS_USER", 
  "SP_AA_S_RAVL_CCR_NUM", 
  "SP_AA_RAVL_LCCN", 
  "SP_AA_RAVL_LCC_SUB_USER", 
  "SP_AA_S_RAVL_LICENSE", 
  "SP_AA_RAVL_CMC_COR", 
  "SP_AA_RAVL_PROC_TYPE1", 
  "SP_AA_RAVL_MEMBER_STATE2", 
  "SP_AA_RAVL_LCC_COR", 
  "SP_AA_S_RAVL_PR_PA_TY", 
  "SP_AA_RAVL_LCC_COUNTRY_CAT", 
  "SP_AA_RAVL_COM_DOC_IMPACT", 
  "SP_AA_RAVL_LBL_ART_IMPACT", 
  "SP_AA_RAVL_LBL_TXT_IMPACT", 
  "SP_AA_RAVL_PROTECT_FILE_NEED", 
  "SP_AA_RAVL_VARIATION_TITLE", 
  "SP_AA_B_RAVL_UPDATED",  
  "SP_AA_RAVL_RA_PRJ", 
  "SP_AA_S_RAVL_DO_PE_CO", 
  // "SP_AA_RAVL_PRI_PACKAGING", 
  // "SP_AA_RAVL_SEC_PACKAGING", 
  "SP_AA_N_RAVL_TIMESTAMP", 
  "SP_AA_B_RAVL_LEADING_COR",
  "SP_AA_RAVL_PACK_SET_NAME",
  "SP_AA_D_RAVL_IMPLEM_DATE"
  );

  // "SP_AA_S_RAVL_PRODUCT_H", "SP_RA_RAVL_PRODUCT",
  // "SP_AA_D_RAVL_REGFAST_UPDATE_H", "SP_AA_D_RAVL_REGFAST_UPDATE",
  // "SP_AA_S_RAVL_PR_PA_TY_H", "SP_AA_S_RAVL_PR_PA_TY",
  // "SP_AA_RAVL_APPLICATION_STATUSH", "SP_AA_RAVL_APPLICATION_STATUS",
  // "SP_AA_S_RAVL_COUNTRY_H", "SP_RA_RAVL_COUNTRY",
  // "SP_AA_S_RAVL_REGFAST_GEOAREA_H", "SP_AA_S_RAVL_REGFAST_GEO_AREA",
  // "SP_AA_S_RAVL_REGFAST_SUBAREA_H", "SP_AA_S_RAVL_REGFAST_SUBAREA",
  // math.round() is HISTO ID::NAME
  // "DESC",Irunpath
  // "SP_RA_RAVL_PRODUCT", 
  //"SP_AA_RAVL_PRES_IMPACT", 
  //"SP_AA_S_RAVL_VAR_COMMENTS", 
  //"SP_AA_RAVL_CMC_NAME", 
  //"SP_AA_RAVL_FRANCHISE", 
  // "SP_AA_RAVL_APPLICATION_STATUS", 
  // "SP_RA_RAVL_COUNTRY", 
  //"SP_AA_RAVL_DESCRIPTION",
  //"SP_AA_RAVL_SCORE_RISK_01", 
  //"SP_AA_RAVL_SCORE_RISK_02", 
  //"SP_AA_RAVL_SCORE_RISK_03", 
  //"SP_AA_RAVL_EXPECTED_END", 
  //"SP_AA_RAVL_SITE", 
  //"SP_AA_RAVL_STATUS", 
  //"SP_AA_RAVL_DESCRIPTION_LCR", 
  //"SP_AA_RAVL_STATUS_LCR", 
  //"SP_AA_RAVL_DRUG_SUBSTANCE",
  //"SP_AA_RAVL_BLOCNOTE", 
  //"SP_AA_RAVL_PF_CODE", 
  //"SP_AA_S_RAVL_LCR_RA_ASS", 
  //"SP_AA_S_RAVL_CCR_RA_ASS", 
  //"SP_AA_RAVL_SAMPLES_NEED", 
  //plist
  var plist = new vector();

  
  this.IhistoID = math.round(this.SP_AA_N_RAVL_TIMESTAMP).tostring();
  
  history = "OpxSP_PT_RAVL_HISTO".get(this.IhistoID); 
  if !(history instanceof OpxSP_PT_RAVL_HISTO)
  {
    for (var c in attributeList)
    {
      // if ("OpxSP_PT_RAVL_HISTO".findclass().getslot(c+"_H") instanceof ObjectAttribute)
      // {
      plist.push(c+"_H");
      plist.push( this.get(mapping.get(c)) );
      
      // writeln(c +">>"+ mapping.get(c));
      // if true && DEBUG writeln(c+"_H" +"<<"+ this.get(mapping.get(c)) );
      // }
      
      
    }
    plist.push("SP_AA_S_RAVL_PRODUCT_H"); plist.push(this.SP_RA_RAVL_PRODUCT);
    plist.push("SP_AA_D_RAVL_REGFAST_UPDATE_H"); plist.push(this.SP_AA_D_RAVL_REGFAST_UPDATE);
    // plist.push("SP_AA_S_RAVL_PR_PA_TY_H"); plist.push(this.SP_AA_S_RAVL_PR_PA_TY);
    //plist.push("SP_AA_RAVL_APPLICATION_STATUSH");
	//plist.push(this.SP_AA_RAVL_APPLICATION_STATUS);
    plist.push("SP_AA_S_RAVL_COUNTRY_H"); plist.push(this.SP_RA_RAVL_COUNTRY);
    plist.push("SP_AA_S_RAVL_REGFAST_GEOAREA_H"); plist.push(this.SP_AA_S_RAVL_REGFAST_GEO_AREA);
    plist.push("SP_AA_S_RAVL_REGFAST_SUBAREA_H"); plist.push(this.SP_AA_S_RAVL_REGFAST_SUBAREA);
    
    // tracking runtime
    var d = new date();
    var duree = d.date - this.Iseconds;
    this.Irunpath += ">AppendH:" + duree.tostring(); 
    
    // save runtime trace
    plist.push("DESC"); plist.push(this.Irunpath);
    // plist.push(""); plist.push(this.);
    
    // create new object
    plist.push("NAME"); plist.push(this.IhistoID);
    // plist.push("FILE"); plist.push("COM_RAVL");    
    plist.push("FILE"); plist.push("OpxCommonDataset".get("COM_RAVL"));
    if DEBUG context.ravl_trace_log("Creating new history>>");
    // for (var c in plist)
    // {
    // writeln("T>>"+c);
    // }
    history = "OpxSP_PT_RAVL_HISTO".findclass().Makeopx2objectwithplist(plist);
    history.PositiveOnb();
  }
  else
  {
    // tracking runtime
    var d = new date();
    var duree = d.date - this.Iseconds;
    this.Irunpath += ">ModifyH:" + duree.tostring(); 
    
    // modify
    var Uplist = new vector("DESC", this.Irunpath);
    var mod = history.Modifywithplist(Uplist);
    if (! mod) return 2;
    // err = 2;
  }
  if !(history instanceof OpxSP_PT_RAVL_HISTO) return 1;
  
  return err;
}

function ravl_set_RA_ACT_FLAG(list)
{
  var err = 0;
  if (list instanceof vector && list.length == 0) return 9;
  // if ! (this instanceof OpxSP_TT_RAVL_IMPORT) return 9;
  
  var conn = Get_Database_Source_bus(context.callstringformula("$DATABASE_NAME"));
  // writeln("CTRL CONNEXION2 conn :"+conn);
  // alert(conn.Getinternalvalue("databasetype"));
  // var sch = "GEN$RAVL.";
  var mess;
  var sta;
  var quotedList = new vector();
  
  for (var c in list)
  {
    quotedList.push("'"+c+"'");
  }
  
  if (quotedList instanceof vector && quotedList.length == 0) return 9;
  
  mess = "update GEN$RAVL.EXCHANGE_REGFAST_OPX2 set RA_ACT_FLAG = 1 where PRODUCTID in ("+ quotedList.join(",")+")";
  
  if (conn.SqlTestConnection)
  {
    // alert(">>Connected!")
    SqlwithDatabaseTransaction(conn)
    {
      sta = conn.SqlExecuteImmediate (mess);
      // if DEBUG writeln(mess);
      
      if (sta)
      {
        conn.SqlCommit();
      }
      else
      {
        conn.Sqlrollback();
      }      
    }
  }
  else
  {
    // database error
    err = 1;
  }
  // writeln(err+">>"+sta);
  return err;
}

function ravl_create_variation_proto(mapping)
{
  var err = 0;
  if (mapping instanceof vector && mapping.length == 0) return 9;
  if ! (this instanceof OpxSP_TT_RAVL_IMPORT) return 9;
  var varia;
  
  var attributeList = new vector(
  "NAME", 
  "SP_AA_RAVL_RA_ACT_ID", 
  "SP_AA_RAVL_PLANNING_STATUS", 
  "SP_AA_RAVL_LIODA", 
  "SP_AA_RAVL_LCC_GO", 
  "SP_AA_S_RAVL_REPORT_CAT_USER", 
  "SP_AA_RAVL_VARIATION_TYPE2", 
  "SP_AA_S_RAVL_COUNTRY_CAT", 
  "SP_AA_RAVL_SUB_MODE", 
  "SP_AA_RAVL_SUB_PROCESS_USER", 
  "SP_AA_S_RAVL_CCR_NUM", 
  "SP_AA_RAVL_LCCN", 
  "SP_AA_RAVL_LCC_SUB_USER", 
  "SP_AA_S_RAVL_LICENSE", 
  "SP_AA_RAVL_CMC_COR", 
  "SP_AA_RAVL_PROC_TYPE1", 
  "SP_AA_RAVL_MEMBER_STATE2", 
  "SP_AA_RAVL_LCC_COR", 
  "SP_AA_S_RAVL_PR_PA_TY", 
  "SP_AA_RAVL_LCC_COUNTRY_CAT", 
  "SP_AA_RAVL_COM_DOC_IMPACT", 
  "SP_AA_RAVL_LBL_ART_IMPACT", 
  "SP_AA_RAVL_LBL_TXT_IMPACT", 
  "SP_AA_RAVL_PROTECT_FILE_NEED", 
  "SP_AA_RAVL_VARIATION_TITLE", 
  "SP_AA_RAVL_RA_PRJ",  
  "SP_AA_S_RAVL_DO_PE_CO", 
  // "SP_AA_RAVL_PRI_PACKAGING", 
  // "SP_AA_RAVL_SEC_PACKAGING", 
  "SP_AA_N_RAVL_TIMESTAMP",
  "SP_AA_B_RAVL_LEADING_COR",
  "SP_AA_RAVL_PACK_SET_NAME",
  "SP_AA_D_RAVL_IMPLEM_DATE"
  );

  // "", "SP_RA_RAVL_PRODUCT",
  // "", "SP_RA_RAVL_COUNTRY",
  // math.round() is HISTO ID::NAME
  // "DESC",Irunpath
  // "SP_RA_RAVL_PRODUCT",
  // "SP_AA_B_RAVL_UPDATED", 
  //"SP_AA_RAVL_PRES_IMPACT", 
  //"SP_AA_S_RAVL_VAR_COMMENTS", 
  //"SP_AA_RAVL_CMC_NAME", 
  //"SP_AA_RAVL_FRANCHISE", 
  // "SP_AA_RAVL_APPLICATION_STATUS", 
  // "SP_RA_RAVL_COUNTRY", 
  //"SP_AA_RAVL_DESCRIPTION", 
  //"SP_AA_RAVL_SCORE_RISK_01", 
  //"SP_AA_RAVL_SCORE_RISK_02", 
  //"SP_AA_RAVL_SCORE_RISK_03", 
  //"SP_AA_RAVL_EXPECTED_END", 
  //"SP_AA_RAVL_SITE", 
  //"SP_AA_RAVL_STATUS", 
  //"SP_AA_RAVL_DESCRIPTION_LCR", 
  //"SP_AA_RAVL_STATUS_LCR", 
  //"SP_AA_RAVL_DRUG_SUBSTANCE",
  //"SP_AA_RAVL_BLOCNOTE", 
  //"SP_AA_RAVL_PF_CODE", 
  //"SP_AA_S_RAVL_LCR_RA_ASS", 
  //"SP_AA_S_RAVL_CCR_RA_ASS",
  //"SP_AA_RAVL_SAMPLES_NEED", 
  
  //plist
  var plist = new vector();
  for (var c in attributeList)
  {
    // if ("OpxSP_PT_RAVL".findclass().getslot(c+"_H") instanceof ObjectAttribute)
    // {
    plist.push(c );
    plist.push( this.get(mapping.get(c)) );
    
    // writeln(c +">>"+ mapping.get(c));
    context.ravl_trace_log(c+"" +"<<"+ this.get(mapping.get(c)) );
    // }    
    
  }
  
  if (this.Iproduct instanceof OpxSPAS_PT_PRODUCT
      && this.Icountry instanceof OpxSP_PT_CL_COUNTRY)
  {
    plist.push("SP_RA_RAVL_PRODUCT"); plist.push(this.Iproduct);
    plist.push("SP_RA_RAVL_COUNTRY"); plist.push(this.Icountry);
    //plist.push("SP_AA_RAVL_APPLICATION_STATUS"); 
	//plist.push(this.SP_AA_RAVL_APPLICATION_STATUS);

  }
  else
  {
    return 1;
  }
  // plist.push("SP_AA_D_RAVL_REGFAST_UPDATE_H"); plist.push(this.SP_AA_D_RAVL_REGFAST_UPDATE);
  // plist.push("SP_AA_S_RAVL_PR_PA_TY_H"); plist.push(this.SP_AA_S_RAVL_PR_PA_TY);
  // plist.push("SP_AA_S_RAVL_REGFAST_GEOAREA_H"); plist.push(this.SP_AA_S_RAVL_REGFAST_GEO_AREA);
  // plist.push("SP_AA_S_RAVL_REGFAST_SUBAREA_H"); plist.push(this.SP_AA_S_RAVL_REGFAST_SUBAREA);
  
  // tracking runtime
  var d = new date();
  var duree = d.date - this.Iseconds;
  this.Irunpath += ">Create:" + duree.tostring();   
  // plist.push(""); plist.push(this.);
  
  // this.IhistoID = math.round(this.SP_AA_N_RAVL_TIMESTAMP).tostring();
  
  // varia = "OpxSP_PT_RAVL".get(this.IhistoID); 
  varia = ravl_get_by_RAActivityID(this.SP_AA_RAVL_RA_ACT_ID);
  
  if !(varia instanceof OpxSP_PT_RAVL)
  {
    // create new object NAME is the new ID on 19/11/2012
    // plist.push("NAME"); plist.push(this.SP_AA_RAVL_RA_ACT_ID);
    // save runtime trace    
    plist.push("DESC"); plist.push(this.Irunpath);
    
    // plist.push("FILE"); plist.push("COM_RAVL");
    plist.push("FILE"); plist.push("OpxCommonDataset".get("COM_RAVL"));
    
    plist.push("SP_AA_S_RAVL_UPDATE_ACTION"); plist.push("VARCRE");
    plist.push("SP_AA_S_RAVL_RECOVERY_STATUS"); plist.push("created");
    
    if DEBUG context.ravl_trace_log("Creating new varia>>");
    // for (var c in plist)
    // {
    // writeln("CREA>>"+c);
    // }
    varia = "OpxSP_PT_RAVL".findclass().Makeopx2objectwithplist(plist);
    varia.PositiveOnb();
  }
  else
  {
    // Already created : interface error
    err = 2;
  }
  if !(varia instanceof OpxSP_PT_RAVL) return 3;
  this.Idelete = false;
  this.IaddCounter = true; 

  return err;

}


function ravl_modify_variation_proto(mapping, varia)
{
  var err = 0;
  if (mapping instanceof vector && mapping.length == 0) return 9;
  if ! (this instanceof OpxSP_TT_RAVL_IMPORT) return 9;
  // var varia;
  
  var attributeList = new vector(
  "SP_AA_RAVL_PLANNING_STATUS", 
  "SP_AA_RAVL_LIODA", 
  "SP_AA_RAVL_LCC_GO", 
  "SP_AA_S_RAVL_REPORT_CAT_USER", 
  "SP_AA_RAVL_VARIATION_TYPE2", 
  "SP_AA_S_RAVL_COUNTRY_CAT", 
  "SP_AA_RAVL_SUB_MODE", 
  "SP_AA_RAVL_SUB_PROCESS_USER", 
  "SP_AA_S_RAVL_CCR_NUM", 
  "SP_AA_RAVL_LCCN", 
  "SP_AA_RAVL_LCC_SUB_USER", 
  "SP_AA_S_RAVL_LICENSE", 
  "SP_AA_RAVL_CMC_COR", 
  "SP_AA_RAVL_PROC_TYPE1", 
  "SP_AA_RAVL_MEMBER_STATE2", 
  "SP_AA_RAVL_LCC_COR", 
  "SP_AA_S_RAVL_PR_PA_TY", 
  "SP_AA_RAVL_LCC_COUNTRY_CAT",
  "SP_AA_RAVL_COM_DOC_IMPACT", 
  "SP_AA_RAVL_LBL_ART_IMPACT", 
  "SP_AA_RAVL_LBL_TXT_IMPACT", 
  "SP_AA_RAVL_PROTECT_FILE_NEED", 
  "SP_AA_RAVL_VARIATION_TITLE", 
  "SP_AA_RAVL_RA_PRJ", 
  "SP_AA_S_RAVL_DO_PE_CO", 
  // "SP_AA_RAVL_PRI_PACKAGING", 
  // "SP_AA_RAVL_SEC_PACKAGING", 
  "SP_AA_N_RAVL_TIMESTAMP", 
  "SP_AA_B_RAVL_LEADING_COR",
  "SP_AA_RAVL_PACK_SET_NAME",
  "SP_AA_D_RAVL_IMPLEM_DATE"
  );
  
  // "NAME", 
  // "SP_AA_RAVL_RA_ACT_ID", 
  // "SP_RA_RAVL_PRODUCT", 
  // "SP_AA_B_RAVL_UPDATED", 
  //"SP_AA_RAVL_PRES_IMPACT", 
  //"SP_AA_S_RAVL_VAR_COMMENTS", 
  //"SP_AA_RAVL_CMC_NAME", 
  //"SP_AA_RAVL_FRANCHISE", 
  // "SP_AA_RAVL_APPLICATION_STATUS", 
  // "SP_RA_RAVL_COUNTRY", 
  //"SP_AA_RAVL_DESCRIPTION", 
  //"SP_AA_RAVL_SCORE_RISK_01", 
  //"SP_AA_RAVL_SCORE_RISK_02", 
  //"SP_AA_RAVL_SCORE_RISK_03", 
  //"SP_AA_RAVL_EXPECTED_END", 
  //"SP_AA_RAVL_SITE", 
  //"SP_AA_RAVL_STATUS", 
  //"SP_AA_RAVL_DESCRIPTION_LCR", 
  //"SP_AA_RAVL_STATUS_LCR", 
  //"SP_AA_RAVL_DRUG_SUBSTANCE", 
  //"SP_AA_RAVL_BLOCNOTE", 
  //"SP_AA_RAVL_PF_CODE", 
  //"SP_AA_S_RAVL_LCR_RA_ASS", 
  //"SP_AA_S_RAVL_CCR_RA_ASS",
  // "SP_AA_RAVL_SAMPLES_NEED", 
  // varia = ravl_get_by_RAActivityID(this.SP_AA_RAVL_RA_ACT_ID);
  
  if !(varia instanceof OpxSP_PT_RAVL) return 2;
  
  //plist
  var plist = new vector();
  for (var c in attributeList)
  {
    // if ("OpxSP_PT_RAVL".findclass().getslot(c+"_H") instanceof ObjectAttribute)
    // {
    plist.push(c );
    plist.push( this.get(mapping.get(c)) );
    
    // writeln(c +">>"+ mapping.get(c));
    if DEBUG context.ravl_trace_log(c+"" +"<u<"+ this.get(mapping.get(c)) );
    // }    
    
  }
  if (this.Iproduct instanceof OpxSPAS_PT_PRODUCT
      && this.Icountry instanceof OpxSP_PT_CL_COUNTRY)
  {
    plist.push("SP_RA_RAVL_PRODUCT"); plist.push(this.Iproduct);
    plist.push("SP_RA_RAVL_COUNTRY"); plist.push(this.Icountry);    
    //plist.push("SP_AA_RAVL_APPLICATION_STATUS"); plist.push(this.SP_AA_RAVL_APPLICATION_STATUS);
  }
  else
  {
    return 1;
  }
  
  // tracking runtime
  var d = new date();
  var duree = d.date - this.Iseconds;
  this.Irunpath += ">Modify:" + duree.tostring();   
  // save runtime trace
  plist.push("DESC"); plist.push(this.Irunpath);
  plist.push("SP_AA_S_RAVL_RECOVERY_STATUS"); plist.push("updated");
  
  if (false && DEBUG)
  {
    for (var c in plist)
    {
      writeln("UPD>>"+c);
    }
  }
  if DEBUG context.ravl_trace_log("Updating varia>>"+varia.SP_AA_RAVL_RA_ACT_ID);

  // modify
  var mod = varia.Modifywithplist(plist);
  
  if (! mod) err = 3;
  
  return err;  
}

function ravl_set_recovery_timestamp(varia)
{
  if ! (this instanceof OpxSP_TT_RAVL_IMPORT && this.SP_AA_N_RAVL_TIMESTAMP instanceof number) return 9;
  if !(varia instanceof OpxSP_PT_RAVL && varia.SP_AA_N_RAVL_TIMESTAMP instanceof number) return 9;
  
  // qualify TT timestamp vs variation timestamp : Inewer
  if (this.SP_AA_N_RAVL_TIMESTAMP == varia.SP_AA_N_RAVL_TIMESTAMP)
  {
    this.Inewer = "_ident";
  }
  else if (this.SP_AA_N_RAVL_TIMESTAMP > varia.SP_AA_N_RAVL_TIMESTAMP)
  {
    this.Inewer = "_newer";
  }
  else
  {
    this.Inewer = "_older";
  }
  
  if !(this.Inewer instanceof string) return 1;
  
  return 0;
}

function ravl_read_recovery_status()
{

  if !(this instanceof OpxSP_PT_RAVL ) return 9;
  if (this.SP_AA_S_RAVL_RECOVERY_STATUS instanceof string 
      && (this.SP_AA_S_RAVL_RECOVERY_STATUS == "created"
        || this.SP_AA_S_RAVL_RECOVERY_STATUS == "updated"
        || this.SP_AA_S_RAVL_RECOVERY_STATUS == "validated"
        || this.SP_AA_S_RAVL_RECOVERY_STATUS == "rejected"))
  // && this.SP_AA_S_RAVL_RECOVERY_STATUS.length>0)
  {
    return this.SP_AA_S_RAVL_RECOVERY_STATUS;
  }
  else
  {
    return "undefined";
  }
  
}

// recovery action - function definition

function ravl_recover(varia)
{
  var err = 0;
  if ! (this instanceof OpxSP_TT_RAVL_IMPORT)  return 9;
  if ! (varia instanceof OpxSP_PT_RAVL)  return 9;
  
  if DEBUG context.ravl_trace_log("Recovering>>"+varia.SP_AA_RAVL_RA_ACT_ID);
  err = this.ravl_modify_variation_proto(context.ravlMappingPrototype, varia);
  if (err == 0) 
  {
    // ravl recovery mode action: variation delete replace
    varia.SP_AA_S_RAVL_UPDATE_ACTION = "VRDLRP";
    this.IaddCounter = true;
    this.Idelete = false;
    // tracking recovery
    var d = new date();
    var duree = d.date - this.Iseconds;
    this.Irunpath += ">Recovered:" + duree.tostring();
  }
  return err;
}

function ravl_update_variation_proto(varia)
{
  var err = 0;
  if DEBUG context.ravl_trace_log("Updating proto>>");
  if ! (this instanceof OpxSP_TT_RAVL_IMPORT)  return 9;
  if ! (varia instanceof OpxSP_PT_RAVL)  return 9;
  
  // prototype overrides SP_JS_RAVL_UPDATE
  // step 1
  err = this.ravl_set_update_planning_action();
  // step 2
  if (err == 0) err = this.ravl_modify_variation_proto(context.ravlMappingPrototype, varia);
  
  // step catch TTLUPD event
  // if (err == 0 
      // && varia.SP_AA_S_RAVL_UPDATE_ACTION == "TTLUPD") 
  // {
    // err = this.ravl_update_title(varia);
    // varia.SP_AA_S_RAVL_UPDATE_ACTION = "NOAUTO";
  // }
  
  // step catch ADPRFI or IMUPDA event
  // if (err == 0 && (varia.SP_AA_S_RAVL_UPDATE_ACTION == "ADPRFI" 
  // || varia.SP_AA_S_RAVL_UPDATE_ACTION == "IMUPDA"))
  // {
      // err = this.ravl_update_title(varia);
  // }
  
  if (err == 0)
  {
    this.IaddCounter = true;
    this.Idelete = false;
    // tracking update
    var d = new date();
    var duree = d.date - this.Iseconds;
    this.Irunpath += ">Updated:" + duree.tostring();
  }  

  return err;
}

function ravl_postpone(dummy)
{
  var err = 0;
  if ! (this instanceof OpxSP_TT_RAVL_IMPORT)  return 9;
  if DEBUG context.ravl_trace_log("Postpone>>"+this.SP_AA_RAVL_RA_ACT_ID);
  this.IaddCounter = false;
  this.Idelete = false;
  // tracking postpone
  var d = new date();
  var duree = d.date - this.Iseconds;
  this.Irunpath += ">Postponed:" + duree.tostring();

  return err;
}

// ravl REJECT action :flag exchange table then Idelete = true; IaddCounter
function ravl_reject()
{
  var err = 0;
  if DEBUG context.ravl_trace_log("Reject>>");
  if ! (this instanceof OpxSP_TT_RAVL_IMPORT)  return 9;
  
  // tracking reject
  var d = new date();
  var duree = d.date - this.Iseconds;
  this.Irunpath += ">Reject:" + duree.tostring();
  
  // flag processed
  this.IhistoID = math.round(this.SP_AA_N_RAVL_TIMESTAMP).tostring();
  var rejectId = new vector(this.IhistoID);
  
  err = ravl_set_RA_ACT_FLAG(rejectId);  
  // reject:flag;append history;delete
  // if (err == 0) err = this.ravl_append_history(context.ravlMappingPrototype);
  if (err == 0) 
  {
    this.Idelete = true;
    this.IaddCounter = false;  
  }
  
  if DEBUG context.ravl_trace_log("TT to delete?>>"+this.Idelete);
  
  return err;
}



function ravl_init_recovery_rules()
{
  if ! (this instanceof HashTable) return 9;
  this.set("C_created_ident",ravl_recover);
  this.set("C_undefined_ident",ravl_recover);
  this.set("C_updated_ident",ravl_recover);
  this.set("C_validated_ident",ravl_recover);
  this.set("U_validated_newer",ravl_update_variation_proto);
  this.set("U_rejected_newer",ravl_update_variation_proto);
  this.set("U_undefined_ident",ravl_recover);
  this.set("U_undefined_newer",ravl_postpone);
  this.set("U_created_newer",ravl_postpone);
  this.set("U_updated_ident",ravl_recover);
  this.set("U_updated_newer",ravl_postpone);
  // Evol lot2
  this.set("C_undefined_newer",ravl_postpone);
  this.set("C_updated_newer",ravl_postpone);
  this.set("C_validated_newer",ravl_recover);
  this.set("C_rejected_newer",ravl_recover);

  if (this.count == 0) return 2;
  return 0;
}

function ravl_recovery_action(varia, recoHT)
{
  var err = 0;
  if (recoHT instanceof HashTable && recoHT.count ==0) return 9;
  if ! (this instanceof OpxSP_TT_RAVL_IMPORT)  return 9;
  if ! (varia instanceof OpxSP_PT_RAVL) return 9;
  
  // retrieve action
  // var prefix;
  var ruleId;
  var action;
  
  if (this.SP_AA_B_RAVL_UPDATED)
  ruleId = "U_";
  else
  ruleId = "C_";
  
  ruleId += varia.ravl_read_recovery_status();
  
  err = this.ravl_set_recovery_timestamp(varia);
  if (err >0) return err;
  ruleId += this.Inewer;
  
  // debug
  context.ravl_trace_log("ravl_recovery_action>>"+ruleId)
  
  if (ruleId instanceof string)
  {
    action = recoHT.get(ruleId);
    if (action != undefined)
    {
      // run action
      err = action.call(this, varia);

    }
    else
    {
      // reject by default
      this.Irunpath += ">Recovering:"+ruleId;
      err = this.ravl_reject();
    }
  }
  else
  {
    // wong ruleId
    err = 1;
  }

  return err;
}

function ravl_create_or_update(recoHT)
{
  var err = 0;
  if (recoHT instanceof HashTable && recoHT.count ==0) return 9;
  if ! (this instanceof OpxSP_TT_RAVL_IMPORT)  return 9;
  var varia = ravl_get_by_RAActivityID(this.SP_AA_RAVL_RA_ACT_ID);  
  
  // this is an update?
  if (this.SP_AA_B_RAVL_UPDATED)
  {
    // update mode
    if (varia instanceof OpxSP_PT_RAVL)
    {
      // exists >> recovery 
      err = this.ravl_recovery_action(varia, recoHT);
    }
    else
    {      
      // not exists :: reject
      this.Irunpath += ">CannotUpdateNonExisting!";
      err = this.ravl_reject();
    }
    
  }
  else
  {
    // create mode
    if (varia instanceof OpxSP_PT_RAVL)
    {
      // exists >> recovery
      err = this.ravl_recovery_action(varia, recoHT);

    }
    else
    {
      // not exist >>create
      err = this.ravl_create_variation_proto(context.ravlMappingPrototype);
    }

  }
  return err;
}

function ravl_run_import()
{
  var err = 0;
  var res = false;
  var processedList = new vector();
  var counter = 1;
  var varia;
  var variationList = new vector();


  // initialization of datastructure
  var ravlProductHT = new HashTable("STRING");
  err = ravlProductHT.ravl_set_productHT();
  var reco = new HashTable("STRING");
  if (err == 0) err = reco.ravl_init_recovery_rules();
  context.ravlMappingPrototype = ravl_set_mapping();
  if (context.ravlMappingPrototype == undefined) err=1;
  
  // set import running OPX2_FLAG = 1
  if (err == 0) err = ravl_set_STATUS_REGFAST_OPX2(1);

  // import to TT unflagged exchange varia
  if (err == 0) res = ravl_import_into_SP_TT_RAVL_IMPORT();

  if (res && processedList instanceof vector && variationList instanceof vector)
  {
    // main loop
    for (var c in "opxSP_TT_RAVL_IMPORT".findclass() order by {"SP_AA_N_RAVL_TIMESTAMP"})
    {
      if (counter > MAX_OCCURENCE) break;
      // validate product
      err = c.ravl_TT_data_validate(ravlProductHT);
      
      if (err == 0 && c.Ivalidated
          && c.Iproduct instanceof OpxSPAS_PT_PRODUCT && c.Icountry instanceof OpxSP_PT_CL_COUNTRY
          )
      {
        err = c.ravl_create_or_update(reco);
        
      }
      else
      {
        // validation KO: reject; c is marked for deletion
        if DEBUG context.ravl_trace_log("ValKO>"+c);
        if (err == 0) err = c.ravl_reject();
        
      }
      if DEBUG context.ravl_trace_log("ravl_run_import:ravl_append_history>>");
      // append variation History
      if (err == 0) err = c.ravl_append_history(context.ravlMappingPrototype);

      // count processed and append processedList
      if (err == 0 && c.IaddCounter instanceof boolean && c.IaddCounter)
      {
        // counter++;
        processedList.push(c);
      }
      
      // finally delete
      if (err == 0 && c.Idelete instanceof boolean && c.Idelete)
      {
        if DEBUG context.ravl_trace_log("Deleting>>"+c);
        c.delete();      
      }
      
      // break the loop on error
      if (err > 0) break;
      counter++;
      // processedList.push(c);
    }
    if DEBUG context.ravl_trace_log("processedList.length>>"+processedList.length);
    
    // generate vector of variations for RAVL engine from processedList

    for (var c in processedList)
    {
      varia = ravl_get_by_RAActivityID(c.SP_AA_RAVL_RA_ACT_ID);
      if !(varia instanceof OpxSP_PT_RAVL) return 9;
      variationList.push(varia); 
      if DEBUG context.ravl_trace_log("variationList+>"+varia.name);
    }
    
    if DEBUG context.ravl_trace_log("generated vector of variations.length>"+variationList.length);
    
    // run RAVL engine
    // ravl_mock_engine(processedList);
    // ravl_execute();
    // ravl_execute_V1(variationList);
    variationList.ravl_process_variations();
    
    // post RAVL processing : check recovery status updated by engine
    // list of exchange tuple to flag; delete processed TT varia
    for (var c in processedList)
    {
      if DEBUG context.ravl_trace_log("post processing>"+c);
      varia = ravl_get_by_RAActivityID(c.SP_AA_RAVL_RA_ACT_ID);
      if !(varia instanceof OpxSP_PT_RAVL) return 2;
      if !(c.IhistoID instanceof string && c.IhistoID.length >0) return 3;
      
      // mark processed varia
      if (varia.SP_AA_S_RAVL_RECOVERY_STATUS == "validated" 
          || varia.SP_AA_S_RAVL_RECOVERY_STATUS == "rejected")
      {
        c.Idelete = true;
        // flag exchanged tuple
        var flagList = new vector(c.IhistoID);   
        if (err == 0 ) err = ravl_set_RA_ACT_FLAG(flagList);
        
        // tracking processed
        var d = new date();
        var duree = d.date - c.Iseconds;
        c.Irunpath += ">Ended:" + duree.tostring();
        
        // append history
        if (err == 0 ) err = c.ravl_append_history(context.ravlMappingPrototype);

      }
      else
      {
        // Engine error
        err = 4;
        if DEBUG context.ravl_trace_log("<<RAVL engine recoverable crash>>");
        break;
      }
      
      if (err == 0 && c.Idelete instanceof boolean && c.Idelete)
      {
        if DEBUG context.ravl_trace_log("PostDeleting>>"+c);
        c.delete();      
      }
      
      if (err > 0) break;
    }

  }
  else
  {
    // import to TT KO
    err = 1;
  }
  
  // set import finished OPX2_FLAG = 0
  if (err == 0) err = ravl_set_STATUS_REGFAST_OPX2(0);
  return err;
}

function ravl_mock_engine(processedList)
{
  var err = 0;
  var varia;
  if !(processedList instanceof vector) return 9;

  for (var c in processedList)
  {
    if DEBUG context.ravl_trace_log("Mock engine>>"+c);
    varia = ravl_get_by_RAActivityID(c.SP_AA_RAVL_RA_ACT_ID);
    
    if (varia instanceof OpxSP_PT_RAVL)
    varia.SP_AA_S_RAVL_RECOVERY_STATUS = "validated";
    
    if (varia.SP_AA_S_RAVL_RECOVERY_STATUS != "validated")
    {
      err = 1;
      break;
    }
  }
  return err;
}

// Initializing ravl_set_STATUS_REGFAST_OPX2 : OPX2_FLAG is set to 0 on intranet restart
if (context.callbooleanformula("$INTRANET") 
	&& context.callbooleanformula("$DATABASE_NAME in (\"*RAVL*\")") )
{
  writeln("ravl_set_STATUS_REGFAST_OPX2 to >>" + ravl_set_STATUS_REGFAST_OPX2(0));
}
// context.callStringFormula("$CURRENT_USER"))

//  FILE    : SP_JS_RAVL_REGFAST_IMPORT.ojs
// 
//  AUTHOR  : ksk
// 
//  VERSION : 2.0
// 
//  PURPOSE : variation import module
// 
//  HISTORY :
// Created  by ksk 15:22 05/11/2012
// Modified  by ksk 09:36 10/01/2013, add ravl_execute()
// Modified  by ksk 13:11 11/02/2013, add variation trace
// Modified  by ksk 13:11 11/02/2013, Initializing OPX2_FLAG to 0 on intranet restart
// Modified  by ksk 11:40 19/02/2013, added rule C_validated_ident >> recover
// Modified  by ksk 09:38 07/03/2013, added ravl_execute_V1(vector)
// Modified  by ksk 09:38 07/03/2013, added vector of variations
// Modified  by ksk 13:29 18/03/2013, Initializing ravl_set_STATUS_REGFAST_OPX2 for $intranet
// Modified  by ksk 11:28 17/09/2013, added new ravl_init_recovery_rules for re-create case
// Modified  by ksk 10:31 25/09/2013, mapping for MultiCoR SP_AA_B_RAVL_LEADING_COR
// Modified  by SG 6/01/2014, added new attribute "SP_AA_RAVL_PACK_SET_NAME" as part of evolution 387
// Modified  by ksk 13:54 07/02/2014, catching events in ravl_update_variation_proto 391..
// Modified  by jbe 09:00 24/04/2014, Add function Get_Database_Source_bus to catch database source depending on database name
// Modified  by ksk 11:42 05/11/2014, Evol 420 MCM implementation date
// Modified  by YSA 04:30 30/06/2014, Evol 415 Blank fields coming from Regfast
// Modified  by ksk 13:32 30/11/2016, mocking for V6
// Modified  by ksk 16:43 15/02/2017, ravl_process_variations
// Modified  by ksk 13:16 22/02/2017, no pri sec packaging arg
// Modified  by ksk 13:03 21/07/2017, data quality no comma
// Modified  by ksk 14:17 15/09/2017, Only RAVL in databasename should reset the status
// Modified  by ksk 10:58 05/10/2017, CCR number LCR number without trailing space D759

// database source
// SP_DS_RAVL_EXCHANGE

// table GEN$RAVL.STATUS_REGFAST_OPX2

// SP_RQ_RAVL_IMPORT_REGFAST

var DEBUG = true;

// number of variations processed by run
var MAX_OCCURENCE = 10;

function Get_Database_Source_bus(database_name)
{
	var conn;
	if (database_name=="RAVL_PROD")
	{
		 var conn = "OpxDatabaseSource".get("SP_DS_RAVL_EXCHANGE_PROD");
		 context.ravl_trace_log("CTRL CONNEXION1 conn :"+conn);	
		 return conn;
	}
	else 
	{
		if (database_name=="RAVL_AT")
		{
			var conn = "OpxDatabaseSource".get("SP_DS_RAVL_EXCHANGE_AT");
			context.ravl_trace_log("CTRL CONNEXION1 conn :"+conn);	
			return conn;
		}
		else
		{
			var conn = "OpxDatabaseSource".get("SP_DS_RAVL_EXCHANGE_DEV");
			context.ravl_trace_log("CTRL CONNEXION1 conn :"+conn);
			return conn;
		}
	}
}


// set import status on GEN$RAVL.STATUS_REGFAST_OPX2 table true=1=importing
function ravl_set_STATUS_REGFAST_OPX2(flag)
{
  var conn = Get_Database_Source_bus(context.callstringformula("$DATABASE_NAME"));
  // writeln("CTRL CONNEXION2 conn :"+conn);
  // alert(conn.Getinternalvalue("databasetype"));
  // var sch = "GEN$RAVL.";
  var err=0;
  var mess;
  
  if !(flag instanceof number ) return 9;
  
  if (conn.SqlTestConnection 
      && conn.SqlCountTuple("GEN$RAVL.STATUS_REGFAST_OPX2") == 1)
  {
    // alert(">>Connected!")
    SqlwithDatabaseTransaction(conn)
    {
      mess = conn.SqlExecuteImmediate ("update GEN$RAVL.STATUS_REGFAST_OPX2 set OPX2_FLAG="+flag.tostring());
      if (mess)
      {
        conn.SqlCommit();
      }
      else
      {
        conn.Sqlrollback();
      }      
    }
  }
  else
  {
    // database error
    err = 1;
  }
  // writeln(err+">>"+mess);
  return err;
}

// initialization of the STATUS_REGFAST_OPX2 table false=RAVL not running  
function ravl_init_STATUS_REGFAST_OPX2()
{
  var conn = Get_Database_Source_bus(context.callstringformula("$DATABASE_NAME"));
  // writeln("CTRL CONNEXION2 conn :"+conn);
  var err=0;
  var sqlmes;

  if (conn.SqlTestConnection 
      && conn.SqlCountTuple("GEN$RAVL.STATUS_REGFAST_OPX2") == 0)
  {
    alert(">>Initializing STATUS_REGFAST_OPX2")
    SqlwithDatabaseTransaction(conn)
    {
      sqlmes = conn.SqlExecuteImmediate ("INSERT INTO GEN$RAVL.STATUS_REGFAST_OPX2 (OPX2_FLAG, OPER_REF) VALUES (0, 'RAVL')");
      if (sqlmes)
      {
        conn.SqlCommit();
        alert("Terminated OK");
      }
      else
      {
        err = 1;
        conn.Sqlrollback();
        alert("An error has occurred, please contact the administrator")
      }
      // 
    }
  }
  else
  {
    // no database connexion
    alert("An error has occurred, please contact the administrator")
    err = 1;
  }
  // return err;
}

ravl_init_STATUS_REGFAST_OPX2.exportfunction();

function ravl_import_into_SP_TT_RAVL_IMPORT()
if (context.callstringformula("$DATABASE_NAME")=="RAVL_PROD")
	{
	  // import from datasource PROD
	  return context.callmacro("SP_RQ_RAVL_IMPORT_REGFAST_PROD");
	}
else 
	{
		if (context.callstringformula("$DATABASE_NAME")=="RAVL_AT")
		{
			// import from datasource AT
			return context.callmacro("SP_RQ_RAVL_IMPORT_REGFAST_AT");
		}
		else
		{
			// import from datasource DEV
			return context.callmacro("SP_RQ_RAVL_IMPORT_REGFAST_DEV");
		}
	}

// data validation: 1>>Country, 2>>Product
// var ravlProductHT = new HashTable("STRING");

function ravl_set_productHT()
{
  var err=0;
  var country;
  var countryCode;
  if (this instanceof HashTable) 
  {
    this.clear();
    for (var p in "OpxSPAS_PT_PRODUCT".findclass())
    {
      country = p.get("_SP_RA_PROD_CL_COUNTRY");
      if ( country instanceof OpxSP_PT_CL_COUNTRY )
      {
        countryCode = country.SP_AA_S_CL_COUNTRY_CODE;
        if (countryCode instanceof string && countryCode.length > 0)
        this.set(p.name.substring(0,3)+"."+countryCode, p);
      }
    }
    // return err = 2 on empty HT
    if (this.count == 0) err = 2;

  }
  else
  {
    // type error
    err = 9;
  }

  return err;
}

function ravl_data_validation_init()
{
  // var err = ravlProductHT.ravl_set_productHT();
  // for (var p in ravlProductHT)
  // writeln(p);
  // writeln(ravlProductHT.count);
  // return err;
}

function ravl_data_validation_read(ravlProductHT)
{
  // var err = ravlProductHT.ravl_set_productHT();
  if (ravlProductHT instanceof HashTable && ravlProductHT.count ==0) return 9;
  
  for (var p in ravlProductHT)
  writeln("HT>>>"+p);
  // writeln("HT>>>"+ravlProductHT.get(p));
  // writeln(ravlProductHT.count);
  return "ravl_data_validation_read.count>>"+ravlProductHT.count;
}


// validate a SP_TT_RAVL_IMPORT object : this.Ivalidated?= true or false, Irunpath trace the processing
// set the Iproduct & Icountry on the object
function ravl_TT_data_validate(ravlProductHT)
{
  var err=0;
  var product;
  var country;
  var d = new date();
  
  // ravlProductHT is empty !
  if (ravlProductHT instanceof HashTable && ravlProductHT.count ==0) return 9;
  if ! (this instanceof OpxSP_TT_RAVL_IMPORT)  return 9;
  
  this.Ivalidated = false;  
  this.Irunpath = "";
  this.Iseconds = d.date; 
  
  // data quality
  this.SP_AA_RAVL_CMC_COR = this.SP_AA_RAVL_CMC_COR.maskregexp(",");
  this.SP_AA_RAVL_LCC_COR = this.SP_AA_RAVL_LCC_COR.maskregexp(",");
  this.SP_AA_S_RAVL_CCR_NUM = this.SP_AA_S_RAVL_CCR_NUM.maskregexp("\b+$");
  this.SP_AA_RAVL_LCCN = this.SP_AA_RAVL_LCCN.maskregexp("\b+$");
  
  // get pid from TT object
  var pid = this.SP_RA_RAVL_PRODUCT + "."+ this.SP_RA_RAVL_COUNTRY;
  if (pid instanceof string && pid.length >0)
  {
    product = ravlProductHT.get(pid);
    if (product instanceof OpxSPAS_PT_PRODUCT)
    {
      country = product.get("_SP_RA_PROD_CL_COUNTRY");
      this.Ivalidated = true;
      // this.SP_RA_RAVL_PRODUCT = product.printattribute();
      this.Iproduct = product;
      this.Icountry = country;
      this.Irunpath = d.tostring()+">Val=OK";
    }
    else
    {
      // auto product creation
      product = this.Ravl_WS_automatic_product_create();
      if (product instanceof OpxSPAS_PT_PRODUCT)
      {
        country = product.get("_SP_RA_PROD_CL_COUNTRY");
        this.Ivalidated = true;
        ravlProductHT.set(pid, product);
        this.Iproduct = product;
        this.Icountry = country;
        this.Irunpath = d.tostring()+">Val=NewPro";
      }
      else
      {
        this.Ivalidated = false;
        this.Irunpath = d.tostring()+">Val=KO";
      }
      
    }
  }
  else
  {
    this.Ivalidated = false;
    err = 1;
  }

  return err;
}

// interface data mapping

function ravl_set_mapping()
{
  // context.ravlMappingPrototype = new vector(
  return new vector(
  "NAME", "SP_AA_RAVL_RA_ACT_ID",
  "SP_AA_B_RAVL_UPDATED", "SP_AA_B_RAVL_UPDATED",
  "SP_AA_N_RAVL_TIMESTAMP", "SP_AA_N_RAVL_TIMESTAMP",
  "SP_AA_RAVL_CMC_COR", "SP_AA_RAVL_CMC_COR",
  "SP_AA_RAVL_COM_DOC_IMPACT", "SP_AA_RAVL_COM_DOC_IMPACT",
  "SP_AA_RAVL_LBL_ART_IMPACT", "SP_AA_RAVL_LBL_ART_IMPACT",
  "SP_AA_RAVL_LBL_TXT_IMPACT", "SP_AA_RAVL_LBL_TXT_IMPACT",
  "SP_AA_RAVL_LCCN", "SP_AA_RAVL_LCCN",
  "SP_AA_RAVL_LCC_COR", "SP_AA_RAVL_LCC_COR",
  "SP_AA_RAVL_LCC_COUNTRY_CAT", "SP_AA_S_RAVL_LCC_CONTRY_CAT",
  "SP_AA_RAVL_LCC_GO", "SP_AA_RAVL_LCC_GO",
  "SP_AA_RAVL_LCC_SUB_USER", "SP_AA_S_RAVL_LCC_COUNTRY_SUB_PROCESS",
  "SP_AA_RAVL_LIODA", "SP_AA_RAVL_LIODA",
  "SP_AA_RAVL_MEMBER_STATE2", "SP_AA_RAVL_MEMBER_STATE",
  "SP_AA_RAVL_PLANNING_STATUS", "SP_AA_RAVL_PLANNING_STATUS",
  "SP_AA_RAVL_PRI_PACKAGING", "SP_AA_RAVL_PRI_PACKAGING",
  "SP_AA_RAVL_PROC_TYPE1", "SP_AA_RAVL_PROC_TYPE",
  "SP_AA_RAVL_PROTECT_FILE_NEED", "SP_AA_RAVL_PROTECT_FILE_NEED",
  "SP_AA_RAVL_RA_ACT_ID", "SP_AA_RAVL_RA_ACT_ID",
  "SP_AA_RAVL_RA_PRJ", "SP_AA_RAVL_RA_PRJ",
  "SP_AA_RAVL_SEC_PACKAGING", "SP_AA_RAVL_SEC_PACKAGING",
  "SP_AA_RAVL_SUB_MODE", "SP_AA_RAVL_SUB_MODE",
  "SP_AA_RAVL_SUB_PROCESS_USER", "SP_AA_S_RAVL_IO_COUNTRY_SUB_PROCESS",
  "SP_AA_RAVL_VARIATION_TITLE", "SP_AA_RAVL_VARIATION_TITLE",
  "SP_AA_RAVL_VARIATION_TYPE2", "SP_AA_RAVL_VARIATION_TYPE",
  "SP_AA_S_RAVL_CCR_NUM", "SP_AA_S_RAVL_CCR_NUM",
  "SP_AA_S_RAVL_COUNTRY_CAT", "SP_AA_S_RAVL_IO_COUNTRY_CAT",
  "SP_AA_S_RAVL_DO_PE_CO", "SP_AA_S_RAVL_DO_PE_CO",
  "SP_AA_S_RAVL_LICENSE", "SP_AA_S_RAVL_LICENSE",
  "SP_AA_S_RAVL_PR_PA_TY", "SP_AA_S_RAVL_PR_PA_TY",
  "SP_AA_S_RAVL_REPORT_CAT_USER", "SP_AA_S_RAVL_REPORT_CAT",
  "SP_AA_B_RAVL_LEADING_COR", "SP_AA_B_RAVL_LEADING_COR",
  "SP_AA_RAVL_PACK_SET_NAME","SP_AA_RAVL_PACK_SET_NAME",
  "SP_AA_D_RAVL_IMPLEM_DATE","SP_AA_D_RAVL_IMPLEM_DATE"
  );
  // "SP_AA_RAVL_APPLICATION_STATUS", "SP_AA_RAVL_APPLICATION_STATUS",
  // RA to Country
  // RA to product
  // SP_AA_S_RAVL_RECOVERY_STATUS
  //"SP_AA_RAVL_BLOCNOTE", "SP_AA_RAVL_BLOCNOTE",
  //"SP_AA_RAVL_CMC_NAME", "SP_AA_RAVL_CMC_NAME",
  //"SP_AA_RAVL_DESCRIPTION", "SP_AA_RAVL_DESCRIPTION",
  //"SP_AA_RAVL_DESCRIPTION_LCR", "SP_AA_RAVL_DESCRIPTION_LCR",
  //"SP_AA_RAVL_DRUG_SUBSTANCE", "SP_AA_RAVL_DRUG_SUBSTANCE",
  //"SP_AA_RAVL_EXPECTED_END", "SP_AA_RAVL_EXPECTED_END",
  //"SP_AA_RAVL_FRANCHISE", "SP_AA_RAVL_FRANCHISE",
  //"SP_AA_RAVL_PF_CODE", "SP_AA_RAVL_PF_CODE",
  //"SP_AA_RAVL_PRES_IMPACT", "SP_AA_RAVL_PRES_IMPACTED",
  //"SP_AA_RAVL_SCORE_RISK_01", "SP_AA_RAVL_SCORE_RISK_01",
  //"SP_AA_RAVL_SCORE_RISK_02", "SP_AA_RAVL_SCORE_RISK_02",
  //"SP_AA_RAVL_SCORE_RISK_03", "SP_AA_RAVL_SCORE_RISK_03",
  //"SP_AA_RAVL_SITE", "SP_AA_RAVL_SITE",
  //"SP_AA_RAVL_STATUS", "SP_AA_RAVL_STATUS",
  //"SP_AA_RAVL_STATUS_LCR", "SP_AA_RAVL_STATUS_LCR",
  //"SP_AA_S_RAVL_CCR_RA_ASS", "SP_AA_S_RAVL_CCR_RA_ASS",
  //"SP_AA_S_RAVL_LCR_RA_ASS", "SP_AA_S_RAVL_LCR_RA_ASS",
  //"SP_AA_S_RAVL_VAR_COMMENTS", "SP_AA_S_RAVL_VAR_COMMENTS",
  //"SP_AA_RAVL_SAMPLES_NEED", "SP_AA_RAVL_SAMPLES_NEED",
}

// from a TT object, append history object: IhistoID is set
function ravl_append_history(mapping)
{
  var err = 0;
  if (mapping instanceof vector && mapping.length == 0) return 9;
  if ! (this instanceof OpxSP_TT_RAVL_IMPORT) return 9;
  var history;
  if false && DEBUG writeln("mapping>>"+mapping);
  var attributeList = new vector(
  "SP_AA_RAVL_RA_ACT_ID", 
  "SP_AA_RAVL_PLANNING_STATUS", 
  "SP_AA_RAVL_LIODA", 
  "SP_AA_RAVL_LCC_GO", 
  "SP_AA_S_RAVL_REPORT_CAT_USER", 
  "SP_AA_RAVL_VARIATION_TYPE2", 
  "SP_AA_S_RAVL_COUNTRY_CAT", 
  "SP_AA_RAVL_SUB_MODE", 
  "SP_AA_RAVL_SUB_PROCESS_USER", 
  "SP_AA_S_RAVL_CCR_NUM", 
  "SP_AA_RAVL_LCCN", 
  "SP_AA_RAVL_LCC_SUB_USER", 
  "SP_AA_S_RAVL_LICENSE", 
  "SP_AA_RAVL_CMC_COR", 
  "SP_AA_RAVL_PROC_TYPE1", 
  "SP_AA_RAVL_MEMBER_STATE2", 
  "SP_AA_RAVL_LCC_COR", 
  "SP_AA_S_RAVL_PR_PA_TY", 
  "SP_AA_RAVL_LCC_COUNTRY_CAT", 
  "SP_AA_RAVL_COM_DOC_IMPACT", 
  "SP_AA_RAVL_LBL_ART_IMPACT", 
  "SP_AA_RAVL_LBL_TXT_IMPACT", 
  "SP_AA_RAVL_PROTECT_FILE_NEED", 
  "SP_AA_RAVL_VARIATION_TITLE", 
  "SP_AA_B_RAVL_UPDATED",  
  "SP_AA_RAVL_RA_PRJ", 
  "SP_AA_S_RAVL_DO_PE_CO", 
  // "SP_AA_RAVL_PRI_PACKAGING", 
  // "SP_AA_RAVL_SEC_PACKAGING", 
  "SP_AA_N_RAVL_TIMESTAMP", 
  "SP_AA_B_RAVL_LEADING_COR",
  "SP_AA_RAVL_PACK_SET_NAME",
  "SP_AA_D_RAVL_IMPLEM_DATE"
  );

  // "SP_AA_S_RAVL_PRODUCT_H", "SP_RA_RAVL_PRODUCT",
  // "SP_AA_D_RAVL_REGFAST_UPDATE_H", "SP_AA_D_RAVL_REGFAST_UPDATE",
  // "SP_AA_S_RAVL_PR_PA_TY_H", "SP_AA_S_RAVL_PR_PA_TY",
  // "SP_AA_RAVL_APPLICATION_STATUSH", "SP_AA_RAVL_APPLICATION_STATUS",
  // "SP_AA_S_RAVL_COUNTRY_H", "SP_RA_RAVL_COUNTRY",
  // "SP_AA_S_RAVL_REGFAST_GEOAREA_H", "SP_AA_S_RAVL_REGFAST_GEO_AREA",
  // "SP_AA_S_RAVL_REGFAST_SUBAREA_H", "SP_AA_S_RAVL_REGFAST_SUBAREA",
  // math.round() is HISTO ID::NAME
  // "DESC",Irunpath
  // "SP_RA_RAVL_PRODUCT", 
  //"SP_AA_RAVL_PRES_IMPACT", 
  //"SP_AA_S_RAVL_VAR_COMMENTS", 
  //"SP_AA_RAVL_CMC_NAME", 
  //"SP_AA_RAVL_FRANCHISE", 
  // "SP_AA_RAVL_APPLICATION_STATUS", 
  // "SP_RA_RAVL_COUNTRY", 
  //"SP_AA_RAVL_DESCRIPTION",
  //"SP_AA_RAVL_SCORE_RISK_01", 
  //"SP_AA_RAVL_SCORE_RISK_02", 
  //"SP_AA_RAVL_SCORE_RISK_03", 
  //"SP_AA_RAVL_EXPECTED_END", 
  //"SP_AA_RAVL_SITE", 
  //"SP_AA_RAVL_STATUS", 
  //"SP_AA_RAVL_DESCRIPTION_LCR", 
  //"SP_AA_RAVL_STATUS_LCR", 
  //"SP_AA_RAVL_DRUG_SUBSTANCE",
  //"SP_AA_RAVL_BLOCNOTE", 
  //"SP_AA_RAVL_PF_CODE", 
  //"SP_AA_S_RAVL_LCR_RA_ASS", 
  //"SP_AA_S_RAVL_CCR_RA_ASS", 
  //"SP_AA_RAVL_SAMPLES_NEED", 
  //plist
  var plist = new vector();

  
  this.IhistoID = math.round(this.SP_AA_N_RAVL_TIMESTAMP).tostring();
  
  history = "OpxSP_PT_RAVL_HISTO".get(this.IhistoID); 
  if !(history instanceof OpxSP_PT_RAVL_HISTO)
  {
    for (var c in attributeList)
    {
      // if ("OpxSP_PT_RAVL_HISTO".findclass().getslot(c+"_H") instanceof ObjectAttribute)
      // {
      plist.push(c+"_H");
      plist.push( this.get(mapping.get(c)) );
      
      // writeln(c +">>"+ mapping.get(c));
      // if true && DEBUG writeln(c+"_H" +"<<"+ this.get(mapping.get(c)) );
      // }
      
      
    }
    plist.push("SP_AA_S_RAVL_PRODUCT_H"); plist.push(this.SP_RA_RAVL_PRODUCT);
    plist.push("SP_AA_D_RAVL_REGFAST_UPDATE_H"); plist.push(this.SP_AA_D_RAVL_REGFAST_UPDATE);
    // plist.push("SP_AA_S_RAVL_PR_PA_TY_H"); plist.push(this.SP_AA_S_RAVL_PR_PA_TY);
    //plist.push("SP_AA_RAVL_APPLICATION_STATUSH");
	//plist.push(this.SP_AA_RAVL_APPLICATION_STATUS);
    plist.push("SP_AA_S_RAVL_COUNTRY_H"); plist.push(this.SP_RA_RAVL_COUNTRY);
    plist.push("SP_AA_S_RAVL_REGFAST_GEOAREA_H"); plist.push(this.SP_AA_S_RAVL_REGFAST_GEO_AREA);
    plist.push("SP_AA_S_RAVL_REGFAST_SUBAREA_H"); plist.push(this.SP_AA_S_RAVL_REGFAST_SUBAREA);
    
    // tracking runtime
    var d = new date();
    var duree = d.date - this.Iseconds;
    this.Irunpath += ">AppendH:" + duree.tostring(); 
    
    // save runtime trace
    plist.push("DESC"); plist.push(this.Irunpath);
    // plist.push(""); plist.push(this.);
    
    // create new object
    plist.push("NAME"); plist.push(this.IhistoID);
    // plist.push("FILE"); plist.push("COM_RAVL");    
    plist.push("FILE"); plist.push("OpxCommonDataset".get("COM_RAVL"));
    if DEBUG context.ravl_trace_log("Creating new history>>");
    // for (var c in plist)
    // {
    // writeln("T>>"+c);
    // }
    history = "OpxSP_PT_RAVL_HISTO".findclass().Makeopx2objectwithplist(plist);
    history.PositiveOnb();
  }
  else
  {
    // tracking runtime
    var d = new date();
    var duree = d.date - this.Iseconds;
    this.Irunpath += ">ModifyH:" + duree.tostring(); 
    
    // modify
    var Uplist = new vector("DESC", this.Irunpath);
    var mod = history.Modifywithplist(Uplist);
    if (! mod) return 2;
    // err = 2;
  }
  if !(history instanceof OpxSP_PT_RAVL_HISTO) return 1;
  
  return err;
}

function ravl_set_RA_ACT_FLAG(list)
{
  var err = 0;
  if (list instanceof vector && list.length == 0) return 9;
  // if ! (this instanceof OpxSP_TT_RAVL_IMPORT) return 9;
  
  var conn = Get_Database_Source_bus(context.callstringformula("$DATABASE_NAME"));
  // writeln("CTRL CONNEXION2 conn :"+conn);
  // alert(conn.Getinternalvalue("databasetype"));
  // var sch = "GEN$RAVL.";
  var mess;
  var sta;
  var quotedList = new vector();
  
  for (var c in list)
  {
    quotedList.push("'"+c+"'");
  }
  
  if (quotedList instanceof vector && quotedList.length == 0) return 9;
  
  mess = "update GEN$RAVL.EXCHANGE_REGFAST_OPX2 set RA_ACT_FLAG = 1 where PRODUCTID in ("+ quotedList.join(",")+")";
  
  if (conn.SqlTestConnection)
  {
    // alert(">>Connected!")
    SqlwithDatabaseTransaction(conn)
    {
      sta = conn.SqlExecuteImmediate (mess);
      // if DEBUG writeln(mess);
      
      if (sta)
      {
        conn.SqlCommit();
      }
      else
      {
        conn.Sqlrollback();
      }      
    }
  }
  else
  {
    // database error
    err = 1;
  }
  // writeln(err+">>"+sta);
  return err;
}

function ravl_create_variation_proto(mapping)
{
  var err = 0;
  if (mapping instanceof vector && mapping.length == 0) return 9;
  if ! (this instanceof OpxSP_TT_RAVL_IMPORT) return 9;
  var varia;
  
  var attributeList = new vector(
  "NAME", 
  "SP_AA_RAVL_RA_ACT_ID", 
  "SP_AA_RAVL_PLANNING_STATUS", 
  "SP_AA_RAVL_LIODA", 
  "SP_AA_RAVL_LCC_GO", 
  "SP_AA_S_RAVL_REPORT_CAT_USER", 
  "SP_AA_RAVL_VARIATION_TYPE2", 
  "SP_AA_S_RAVL_COUNTRY_CAT", 
  "SP_AA_RAVL_SUB_MODE", 
  "SP_AA_RAVL_SUB_PROCESS_USER", 
  "SP_AA_S_RAVL_CCR_NUM", 
  "SP_AA_RAVL_LCCN", 
  "SP_AA_RAVL_LCC_SUB_USER", 
  "SP_AA_S_RAVL_LICENSE", 
  "SP_AA_RAVL_CMC_COR", 
  "SP_AA_RAVL_PROC_TYPE1", 
  "SP_AA_RAVL_MEMBER_STATE2", 
  "SP_AA_RAVL_LCC_COR", 
  "SP_AA_S_RAVL_PR_PA_TY", 
  "SP_AA_RAVL_LCC_COUNTRY_CAT", 
  "SP_AA_RAVL_COM_DOC_IMPACT", 
  "SP_AA_RAVL_LBL_ART_IMPACT", 
  "SP_AA_RAVL_LBL_TXT_IMPACT", 
  "SP_AA_RAVL_PROTECT_FILE_NEED", 
  "SP_AA_RAVL_VARIATION_TITLE", 
  "SP_AA_RAVL_RA_PRJ",  
  "SP_AA_S_RAVL_DO_PE_CO", 
  // "SP_AA_RAVL_PRI_PACKAGING", 
  // "SP_AA_RAVL_SEC_PACKAGING", 
  "SP_AA_N_RAVL_TIMESTAMP",
  "SP_AA_B_RAVL_LEADING_COR",
  "SP_AA_RAVL_PACK_SET_NAME",
  "SP_AA_D_RAVL_IMPLEM_DATE"
  );

  // "", "SP_RA_RAVL_PRODUCT",
  // "", "SP_RA_RAVL_COUNTRY",
  // math.round() is HISTO ID::NAME
  // "DESC",Irunpath
  // "SP_RA_RAVL_PRODUCT",
  // "SP_AA_B_RAVL_UPDATED", 
  //"SP_AA_RAVL_PRES_IMPACT", 
  //"SP_AA_S_RAVL_VAR_COMMENTS", 
  //"SP_AA_RAVL_CMC_NAME", 
  //"SP_AA_RAVL_FRANCHISE", 
  // "SP_AA_RAVL_APPLICATION_STATUS", 
  // "SP_RA_RAVL_COUNTRY", 
  //"SP_AA_RAVL_DESCRIPTION", 
  //"SP_AA_RAVL_SCORE_RISK_01", 
  //"SP_AA_RAVL_SCORE_RISK_02", 
  //"SP_AA_RAVL_SCORE_RISK_03", 
  //"SP_AA_RAVL_EXPECTED_END", 
  //"SP_AA_RAVL_SITE", 
  //"SP_AA_RAVL_STATUS", 
  //"SP_AA_RAVL_DESCRIPTION_LCR", 
  //"SP_AA_RAVL_STATUS_LCR", 
  //"SP_AA_RAVL_DRUG_SUBSTANCE",
  //"SP_AA_RAVL_BLOCNOTE", 
  //"SP_AA_RAVL_PF_CODE", 
  //"SP_AA_S_RAVL_LCR_RA_ASS", 
  //"SP_AA_S_RAVL_CCR_RA_ASS",
  //"SP_AA_RAVL_SAMPLES_NEED", 
  
  //plist
  var plist = new vector();
  for (var c in attributeList)
  {
    // if ("OpxSP_PT_RAVL".findclass().getslot(c+"_H") instanceof ObjectAttribute)
    // {
    plist.push(c );
    plist.push( this.get(mapping.get(c)) );
    
    // writeln(c +">>"+ mapping.get(c));
    context.ravl_trace_log(c+"" +"<<"+ this.get(mapping.get(c)) );
    // }    
    
  }
  
  if (this.Iproduct instanceof OpxSPAS_PT_PRODUCT
      && this.Icountry instanceof OpxSP_PT_CL_COUNTRY)
  {
    plist.push("SP_RA_RAVL_PRODUCT"); plist.push(this.Iproduct);
    plist.push("SP_RA_RAVL_COUNTRY"); plist.push(this.Icountry);
    //plist.push("SP_AA_RAVL_APPLICATION_STATUS"); 
	//plist.push(this.SP_AA_RAVL_APPLICATION_STATUS);

  }
  else
  {
    return 1;
  }
  // plist.push("SP_AA_D_RAVL_REGFAST_UPDATE_H"); plist.push(this.SP_AA_D_RAVL_REGFAST_UPDATE);
  // plist.push("SP_AA_S_RAVL_PR_PA_TY_H"); plist.push(this.SP_AA_S_RAVL_PR_PA_TY);
  // plist.push("SP_AA_S_RAVL_REGFAST_GEOAREA_H"); plist.push(this.SP_AA_S_RAVL_REGFAST_GEO_AREA);
  // plist.push("SP_AA_S_RAVL_REGFAST_SUBAREA_H"); plist.push(this.SP_AA_S_RAVL_REGFAST_SUBAREA);
  
  // tracking runtime
  var d = new date();
  var duree = d.date - this.Iseconds;
  this.Irunpath += ">Create:" + duree.tostring();   
  // plist.push(""); plist.push(this.);
  
  // this.IhistoID = math.round(this.SP_AA_N_RAVL_TIMESTAMP).tostring();
  
  // varia = "OpxSP_PT_RAVL".get(this.IhistoID); 
  varia = ravl_get_by_RAActivityID(this.SP_AA_RAVL_RA_ACT_ID);
  
  if !(varia instanceof OpxSP_PT_RAVL)
  {
    // create new object NAME is the new ID on 19/11/2012
    // plist.push("NAME"); plist.push(this.SP_AA_RAVL_RA_ACT_ID);
    // save runtime trace    
    plist.push("DESC"); plist.push(this.Irunpath);
    
    // plist.push("FILE"); plist.push("COM_RAVL");
    plist.push("FILE"); plist.push("OpxCommonDataset".get("COM_RAVL"));
    
    plist.push("SP_AA_S_RAVL_UPDATE_ACTION"); plist.push("VARCRE");
    plist.push("SP_AA_S_RAVL_RECOVERY_STATUS"); plist.push("created");
    
    if DEBUG context.ravl_trace_log("Creating new varia>>");
    // for (var c in plist)
    // {
    // writeln("CREA>>"+c);
    // }
    varia = "OpxSP_PT_RAVL".findclass().Makeopx2objectwithplist(plist);
    varia.PositiveOnb();
  }
  else
  {
    // Already created : interface error
    err = 2;
  }
  if !(varia instanceof OpxSP_PT_RAVL) return 3;
  this.Idelete = false;
  this.IaddCounter = true; 

  return err;

}


function ravl_modify_variation_proto(mapping, varia)
{
  var err = 0;
  if (mapping instanceof vector && mapping.length == 0) return 9;
  if ! (this instanceof OpxSP_TT_RAVL_IMPORT) return 9;
  // var varia;
  
  var attributeList = new vector(
  "SP_AA_RAVL_PLANNING_STATUS", 
  "SP_AA_RAVL_LIODA", 
  "SP_AA_RAVL_LCC_GO", 
  "SP_AA_S_RAVL_REPORT_CAT_USER", 
  "SP_AA_RAVL_VARIATION_TYPE2", 
  "SP_AA_S_RAVL_COUNTRY_CAT", 
  "SP_AA_RAVL_SUB_MODE", 
  "SP_AA_RAVL_SUB_PROCESS_USER", 
  "SP_AA_S_RAVL_CCR_NUM", 
  "SP_AA_RAVL_LCCN", 
  "SP_AA_RAVL_LCC_SUB_USER", 
  "SP_AA_S_RAVL_LICENSE", 
  "SP_AA_RAVL_CMC_COR", 
  "SP_AA_RAVL_PROC_TYPE1", 
  "SP_AA_RAVL_MEMBER_STATE2", 
  "SP_AA_RAVL_LCC_COR", 
  "SP_AA_S_RAVL_PR_PA_TY", 
  "SP_AA_RAVL_LCC_COUNTRY_CAT",
  "SP_AA_RAVL_COM_DOC_IMPACT", 
  "SP_AA_RAVL_LBL_ART_IMPACT", 
  "SP_AA_RAVL_LBL_TXT_IMPACT", 
  "SP_AA_RAVL_PROTECT_FILE_NEED", 
  "SP_AA_RAVL_VARIATION_TITLE", 
  "SP_AA_RAVL_RA_PRJ", 
  "SP_AA_S_RAVL_DO_PE_CO", 
  // "SP_AA_RAVL_PRI_PACKAGING", 
  // "SP_AA_RAVL_SEC_PACKAGING", 
  "SP_AA_N_RAVL_TIMESTAMP", 
  "SP_AA_B_RAVL_LEADING_COR",
  "SP_AA_RAVL_PACK_SET_NAME",
  "SP_AA_D_RAVL_IMPLEM_DATE"
  );
  
  // "NAME", 
  // "SP_AA_RAVL_RA_ACT_ID", 
  // "SP_RA_RAVL_PRODUCT", 
  // "SP_AA_B_RAVL_UPDATED", 
  //"SP_AA_RAVL_PRES_IMPACT", 
  //"SP_AA_S_RAVL_VAR_COMMENTS", 
  //"SP_AA_RAVL_CMC_NAME", 
  //"SP_AA_RAVL_FRANCHISE", 
  // "SP_AA_RAVL_APPLICATION_STATUS", 
  // "SP_RA_RAVL_COUNTRY", 
  //"SP_AA_RAVL_DESCRIPTION", 
  //"SP_AA_RAVL_SCORE_RISK_01", 
  //"SP_AA_RAVL_SCORE_RISK_02", 
  //"SP_AA_RAVL_SCORE_RISK_03", 
  //"SP_AA_RAVL_EXPECTED_END", 
  //"SP_AA_RAVL_SITE", 
  //"SP_AA_RAVL_STATUS", 
  //"SP_AA_RAVL_DESCRIPTION_LCR", 
  //"SP_AA_RAVL_STATUS_LCR", 
  //"SP_AA_RAVL_DRUG_SUBSTANCE", 
  //"SP_AA_RAVL_BLOCNOTE", 
  //"SP_AA_RAVL_PF_CODE", 
  //"SP_AA_S_RAVL_LCR_RA_ASS", 
  //"SP_AA_S_RAVL_CCR_RA_ASS",
  // "SP_AA_RAVL_SAMPLES_NEED", 
  // varia = ravl_get_by_RAActivityID(this.SP_AA_RAVL_RA_ACT_ID);
  
  if !(varia instanceof OpxSP_PT_RAVL) return 2;
  
  //plist
  var plist = new vector();
  for (var c in attributeList)
  {
    // if ("OpxSP_PT_RAVL".findclass().getslot(c+"_H") instanceof ObjectAttribute)
    // {
    plist.push(c );
    plist.push( this.get(mapping.get(c)) );
    
    // writeln(c +">>"+ mapping.get(c));
    if DEBUG context.ravl_trace_log(c+"" +"<u<"+ this.get(mapping.get(c)) );
    // }    
    
  }
  if (this.Iproduct instanceof OpxSPAS_PT_PRODUCT
      && this.Icountry instanceof OpxSP_PT_CL_COUNTRY)
  {
    plist.push("SP_RA_RAVL_PRODUCT"); plist.push(this.Iproduct);
    plist.push("SP_RA_RAVL_COUNTRY"); plist.push(this.Icountry);    
    //plist.push("SP_AA_RAVL_APPLICATION_STATUS"); plist.push(this.SP_AA_RAVL_APPLICATION_STATUS);
  }
  else
  {
    return 1;
  }
  
  // tracking runtime
  var d = new date();
  var duree = d.date - this.Iseconds;
  this.Irunpath += ">Modify:" + duree.tostring();   
  // save runtime trace
  plist.push("DESC"); plist.push(this.Irunpath);
  plist.push("SP_AA_S_RAVL_RECOVERY_STATUS"); plist.push("updated");
  
  if (false && DEBUG)
  {
    for (var c in plist)
    {
      writeln("UPD>>"+c);
    }
  }
  if DEBUG context.ravl_trace_log("Updating varia>>"+varia.SP_AA_RAVL_RA_ACT_ID);

  // modify
  var mod = varia.Modifywithplist(plist);
  
  if (! mod) err = 3;
  
  return err;  
}

function ravl_set_recovery_timestamp(varia)
{
  if ! (this instanceof OpxSP_TT_RAVL_IMPORT && this.SP_AA_N_RAVL_TIMESTAMP instanceof number) return 9;
  if !(varia instanceof OpxSP_PT_RAVL && varia.SP_AA_N_RAVL_TIMESTAMP instanceof number) return 9;
  
  // qualify TT timestamp vs variation timestamp : Inewer
  if (this.SP_AA_N_RAVL_TIMESTAMP == varia.SP_AA_N_RAVL_TIMESTAMP)
  {
    this.Inewer = "_ident";
  }
  else if (this.SP_AA_N_RAVL_TIMESTAMP > varia.SP_AA_N_RAVL_TIMESTAMP)
  {
    this.Inewer = "_newer";
  }
  else
  {
    this.Inewer = "_older";
  }
  
  if !(this.Inewer instanceof string) return 1;
  
  return 0;
}

function ravl_read_recovery_status()
{

  if !(this instanceof OpxSP_PT_RAVL ) return 9;
  if (this.SP_AA_S_RAVL_RECOVERY_STATUS instanceof string 
      && (this.SP_AA_S_RAVL_RECOVERY_STATUS == "created"
        || this.SP_AA_S_RAVL_RECOVERY_STATUS == "updated"
        || this.SP_AA_S_RAVL_RECOVERY_STATUS == "validated"
        || this.SP_AA_S_RAVL_RECOVERY_STATUS == "rejected"))
  // && this.SP_AA_S_RAVL_RECOVERY_STATUS.length>0)
  {
    return this.SP_AA_S_RAVL_RECOVERY_STATUS;
  }
  else
  {
    return "undefined";
  }
  
}

// recovery action - function definition

function ravl_recover(varia)
{
  var err = 0;
  if ! (this instanceof OpxSP_TT_RAVL_IMPORT)  return 9;
  if ! (varia instanceof OpxSP_PT_RAVL)  return 9;
  
  if DEBUG context.ravl_trace_log("Recovering>>"+varia.SP_AA_RAVL_RA_ACT_ID);
  err = this.ravl_modify_variation_proto(context.ravlMappingPrototype, varia);
  if (err == 0) 
  {
    // ravl recovery mode action: variation delete replace
    varia.SP_AA_S_RAVL_UPDATE_ACTION = "VRDLRP";
    this.IaddCounter = true;
    this.Idelete = false;
    // tracking recovery
    var d = new date();
    var duree = d.date - this.Iseconds;
    this.Irunpath += ">Recovered:" + duree.tostring();
  }
  return err;
}

function ravl_update_variation_proto(varia)
{
  var err = 0;
  if DEBUG context.ravl_trace_log("Updating proto>>");
  if ! (this instanceof OpxSP_TT_RAVL_IMPORT)  return 9;
  if ! (varia instanceof OpxSP_PT_RAVL)  return 9;
  
  // prototype overrides SP_JS_RAVL_UPDATE
  // step 1
  err = this.ravl_set_update_planning_action();
  // step 2
  if (err == 0) err = this.ravl_modify_variation_proto(context.ravlMappingPrototype, varia);
  
  // step catch TTLUPD event
  // if (err == 0 
      // && varia.SP_AA_S_RAVL_UPDATE_ACTION == "TTLUPD") 
  // {
    // err = this.ravl_update_title(varia);
    // varia.SP_AA_S_RAVL_UPDATE_ACTION = "NOAUTO";
  // }
  
  // step catch ADPRFI or IMUPDA event
  // if (err == 0 && (varia.SP_AA_S_RAVL_UPDATE_ACTION == "ADPRFI" 
  // || varia.SP_AA_S_RAVL_UPDATE_ACTION == "IMUPDA"))
  // {
      // err = this.ravl_update_title(varia);
  // }
  
  if (err == 0)
  {
    this.IaddCounter = true;
    this.Idelete = false;
    // tracking update
    var d = new date();
    var duree = d.date - this.Iseconds;
    this.Irunpath += ">Updated:" + duree.tostring();
  }  

  return err;
}

function ravl_postpone(dummy)
{
  var err = 0;
  if ! (this instanceof OpxSP_TT_RAVL_IMPORT)  return 9;
  if DEBUG context.ravl_trace_log("Postpone>>"+this.SP_AA_RAVL_RA_ACT_ID);
  this.IaddCounter = false;
  this.Idelete = false;
  // tracking postpone
  var d = new date();
  var duree = d.date - this.Iseconds;
  this.Irunpath += ">Postponed:" + duree.tostring();

  return err;
}

// ravl REJECT action :flag exchange table then Idelete = true; IaddCounter
function ravl_reject()
{
  var err = 0;
  if DEBUG context.ravl_trace_log("Reject>>");
  if ! (this instanceof OpxSP_TT_RAVL_IMPORT)  return 9;
  
  // tracking reject
  var d = new date();
  var duree = d.date - this.Iseconds;
  this.Irunpath += ">Reject:" + duree.tostring();
  
  // flag processed
  this.IhistoID = math.round(this.SP_AA_N_RAVL_TIMESTAMP).tostring();
  var rejectId = new vector(this.IhistoID);
  
  err = ravl_set_RA_ACT_FLAG(rejectId);  
  // reject:flag;append history;delete
  // if (err == 0) err = this.ravl_append_history(context.ravlMappingPrototype);
  if (err == 0) 
  {
    this.Idelete = true;
    this.IaddCounter = false;  
  }
  
  if DEBUG context.ravl_trace_log("TT to delete?>>"+this.Idelete);
  
  return err;
}



function ravl_init_recovery_rules()
{
  if ! (this instanceof HashTable) return 9;
  this.set("C_created_ident",ravl_recover);
  this.set("C_undefined_ident",ravl_recover);
  this.set("C_updated_ident",ravl_recover);
  this.set("C_validated_ident",ravl_recover);
  this.set("U_validated_newer",ravl_update_variation_proto);
  this.set("U_rejected_newer",ravl_update_variation_proto);
  this.set("U_undefined_ident",ravl_recover);
  this.set("U_undefined_newer",ravl_postpone);
  this.set("U_created_newer",ravl_postpone);
  this.set("U_updated_ident",ravl_recover);
  this.set("U_updated_newer",ravl_postpone);
  // Evol lot2
  this.set("C_undefined_newer",ravl_postpone);
  this.set("C_updated_newer",ravl_postpone);
  this.set("C_validated_newer",ravl_recover);
  this.set("C_rejected_newer",ravl_recover);

  if (this.count == 0) return 2;
  return 0;
}

function ravl_recovery_action(varia, recoHT)
{
  var err = 0;
  if (recoHT instanceof HashTable && recoHT.count ==0) return 9;
  if ! (this instanceof OpxSP_TT_RAVL_IMPORT)  return 9;
  if ! (varia instanceof OpxSP_PT_RAVL) return 9;
  
  // retrieve action
  // var prefix;
  var ruleId;
  var action;
  
  if (this.SP_AA_B_RAVL_UPDATED)
  ruleId = "U_";
  else
  ruleId = "C_";
  
  ruleId += varia.ravl_read_recovery_status();
  
  err = this.ravl_set_recovery_timestamp(varia);
  if (err >0) return err;
  ruleId += this.Inewer;
  
  // debug
  context.ravl_trace_log("ravl_recovery_action>>"+ruleId)
  
  if (ruleId instanceof string)
  {
    action = recoHT.get(ruleId);
    if (action != undefined)
    {
      // run action
      err = action.call(this, varia);

    }
    else
    {
      // reject by default
      this.Irunpath += ">Recovering:"+ruleId;
      err = this.ravl_reject();
    }
  }
  else
  {
    // wong ruleId
    err = 1;
  }

  return err;
}

function ravl_create_or_update(recoHT)
{
  var err = 0;
  if (recoHT instanceof HashTable && recoHT.count ==0) return 9;
  if ! (this instanceof OpxSP_TT_RAVL_IMPORT)  return 9;
  var varia = ravl_get_by_RAActivityID(this.SP_AA_RAVL_RA_ACT_ID);  
  
  // this is an update?
  if (this.SP_AA_B_RAVL_UPDATED)
  {
    // update mode
    if (varia instanceof OpxSP_PT_RAVL)
    {
      // exists >> recovery 
      err = this.ravl_recovery_action(varia, recoHT);
    }
    else
    {      
      // not exists :: reject
      this.Irunpath += ">CannotUpdateNonExisting!";
      err = this.ravl_reject();
    }
    
  }
  else
  {
    // create mode
    if (varia instanceof OpxSP_PT_RAVL)
    {
      // exists >> recovery
      err = this.ravl_recovery_action(varia, recoHT);

    }
    else
    {
      // not exist >>create
      err = this.ravl_create_variation_proto(context.ravlMappingPrototype);
    }

  }
  return err;
}

function ravl_run_import()
{
  var err = 0;
  var res = false;
  var processedList = new vector();
  var counter = 1;
  var varia;
  var variationList = new vector();


  // initialization of datastructure
  var ravlProductHT = new HashTable("STRING");
  err = ravlProductHT.ravl_set_productHT();
  var reco = new HashTable("STRING");
  if (err == 0) err = reco.ravl_init_recovery_rules();
  context.ravlMappingPrototype = ravl_set_mapping();
  if (context.ravlMappingPrototype == undefined) err=1;
  
  // set import running OPX2_FLAG = 1
  if (err == 0) err = ravl_set_STATUS_REGFAST_OPX2(1);

  // import to TT unflagged exchange varia
  if (err == 0) res = ravl_import_into_SP_TT_RAVL_IMPORT();

  if (res && processedList instanceof vector && variationList instanceof vector)
  {
    // main loop
    for (var c in "opxSP_TT_RAVL_IMPORT".findclass() order by {"SP_AA_N_RAVL_TIMESTAMP"})
    {
      if (counter > MAX_OCCURENCE) break;
      // validate product
      err = c.ravl_TT_data_validate(ravlProductHT);
      
      if (err == 0 && c.Ivalidated
          && c.Iproduct instanceof OpxSPAS_PT_PRODUCT && c.Icountry instanceof OpxSP_PT_CL_COUNTRY
          )
      {
        err = c.ravl_create_or_update(reco);
        
      }
      else
      {
        // validation KO: reject; c is marked for deletion
        if DEBUG context.ravl_trace_log("ValKO>"+c);
        if (err == 0) err = c.ravl_reject();
        
      }
      if DEBUG context.ravl_trace_log("ravl_run_import:ravl_append_history>>");
      // append variation History
      if (err == 0) err = c.ravl_append_history(context.ravlMappingPrototype);

      // count processed and append processedList
      if (err == 0 && c.IaddCounter instanceof boolean && c.IaddCounter)
      {
        // counter++;
        processedList.push(c);
      }
      
      // finally delete
      if (err == 0 && c.Idelete instanceof boolean && c.Idelete)
      {
        if DEBUG context.ravl_trace_log("Deleting>>"+c);
        c.delete();      
      }
      
      // break the loop on error
      if (err > 0) break;
      counter++;
      // processedList.push(c);
    }
    if DEBUG context.ravl_trace_log("processedList.length>>"+processedList.length);
    
    // generate vector of variations for RAVL engine from processedList

    for (var c in processedList)
    {
      varia = ravl_get_by_RAActivityID(c.SP_AA_RAVL_RA_ACT_ID);
      if !(varia instanceof OpxSP_PT_RAVL) return 9;
      variationList.push(varia); 
      if DEBUG context.ravl_trace_log("variationList+>"+varia.name);
    }
    
    if DEBUG context.ravl_trace_log("generated vector of variations.length>"+variationList.length);
    
    // run RAVL engine
    // ravl_mock_engine(processedList);
    // ravl_execute();
    // ravl_execute_V1(variationList);
    variationList.ravl_process_variations();
    
    // post RAVL processing : check recovery status updated by engine
    // list of exchange tuple to flag; delete processed TT varia
    for (var c in processedList)
    {
      if DEBUG context.ravl_trace_log("post processing>"+c);
      varia = ravl_get_by_RAActivityID(c.SP_AA_RAVL_RA_ACT_ID);
      if !(varia instanceof OpxSP_PT_RAVL) return 2;
      if !(c.IhistoID instanceof string && c.IhistoID.length >0) return 3;
      
      // mark processed varia
      if (varia.SP_AA_S_RAVL_RECOVERY_STATUS == "validated" 
          || varia.SP_AA_S_RAVL_RECOVERY_STATUS == "rejected")
      {
        c.Idelete = true;
        // flag exchanged tuple
        var flagList = new vector(c.IhistoID);   
        if (err == 0 ) err = ravl_set_RA_ACT_FLAG(flagList);
        
        // tracking processed
        var d = new date();
        var duree = d.date - c.Iseconds;
        c.Irunpath += ">Ended:" + duree.tostring();
        
        // append history
        if (err == 0 ) err = c.ravl_append_history(context.ravlMappingPrototype);

      }
      else
      {
        // Engine error
        err = 4;
        if DEBUG context.ravl_trace_log("<<RAVL engine recoverable crash>>");
        break;
      }
      
      if (err == 0 && c.Idelete instanceof boolean && c.Idelete)
      {
        if DEBUG context.ravl_trace_log("PostDeleting>>"+c);
        c.delete();      
      }
      
      if (err > 0) break;
    }

  }
  else
  {
    // import to TT KO
    err = 1;
  }
  
  // set import finished OPX2_FLAG = 0
  if (err == 0) err = ravl_set_STATUS_REGFAST_OPX2(0);
  return err;
}

function ravl_mock_engine(processedList)
{
  var err = 0;
  var varia;
  if !(processedList instanceof vector) return 9;

  for (var c in processedList)
  {
    if DEBUG context.ravl_trace_log("Mock engine>>"+c);
    varia = ravl_get_by_RAActivityID(c.SP_AA_RAVL_RA_ACT_ID);
    
    if (varia instanceof OpxSP_PT_RAVL)
    varia.SP_AA_S_RAVL_RECOVERY_STATUS = "validated";
    
    if (varia.SP_AA_S_RAVL_RECOVERY_STATUS != "validated")
    {
      err = 1;
      break;
    }
  }
  return err;
}

// Initializing ravl_set_STATUS_REGFAST_OPX2 : OPX2_FLAG is set to 0 on intranet restart
if (context.callbooleanformula("$INTRANET") 
	&& context.callbooleanformula("$DATABASE_NAME in (\"*RAVL*\")") )
{
  writeln("ravl_set_STATUS_REGFAST_OPX2 to >>" + ravl_set_STATUS_REGFAST_OPX2(0));
}
// context.callStringFormula("$CURRENT_USER"))

 
//  FILE    : SP_JS_RAVL_SHARE_IMPORT.ojs
// 
//  AUTHOR  : ksk
// 
//  VERSION : 1.0
// 
//  PURPOSE : #425 SHARE actual import - TEMPO
// 
//  HISTORY :
//  Created  by ksk 14:32 15/10/2014.
//  Modified  by ksk 14:33 28/01/2015 Dispatched activity type
//  Modified by MACS 22/06/2015 for WO0000000708030
//  Modified  by ksk 13:33 25/01/2016 Processing by Event Type.
//  Modified  by ksk 10:55 25/01/2018 TEMPO v1.0.0.29
//  Modified by lfa 10:42 07/05/2018 - Modification of share_test_activityType to not update date on NA milestones (Incident ITS-INC0276353)
//  Modified by lfa 10:42 18/05/2018 - Modification of share_test_activityType to not update date on OS and SUB milestones (Incident ITS-INC0276353)


// depends on SP_JS_RAVL_UPDATE

var DEBUG = true;

function share_import_into_SP_TT_SHARE_IMPORT()
{
  if (context.callstringformula("$DATABASE_NAME")=="DATABASE_PROD")
  {
    // import from datasource PROD
    return context.callmacro("SP_RQ_RAVL_IMPORT_SHARE_PROD");
  }
  else 
  {
    if (context.callstringformula("$DATABASE_NAME")=="DATABASE_UAT")
    {
      // import from datasource AT
      return context.callmacro("SP_RQ_RAVL_IMPORT_SHARE_AT");
    }
    else
    {
      // import from datasource DEV
      return context.callmacro("SP_RQ_RAVL_IMPORT_SHARE_DEV");
    }
  }
}

function share_test_activityType(wbsType)
{
  var res = false;
  var exp = this.WBS_TYPE.name +"+";
  
  // ITS-INC0276353 - Do not set "Approved" date for NA milestones
  if (exp instanceof String && exp!="NA+" && exp!="OS+" && exp!="SUB+")
  {
    res = exp.test(wbsType);
  }
  
  return res;
}

function share_update_activity(wsh, activityTypeLookup)
{
  var wbsType;
  
  // if (DEBUG) writeln("Planning>>"+wsh.name);
  // retrieving milestones
  if (this.EVENT_COUNTRY_STATUS instanceof String && this.EVENT_COUNTRY_STATUS !="")
  {
    wbsType = activityTypeLookup.get(this.EVENT_COUNTRY_STATUS);            
  }
  
  if (wbsType instanceof String && this.EVENT_COUNTRY_STATUS_DATE instanceof Date)
  {
    for (var a in wsh.get("r.SP_RA_RAVL_WORKSHARING.WORK-STRUCTURE") where a.share_test_activityType(wbsType) )
    {
      a.AS=this.calldateformula("add_duration(EVENT_COUNTRY_STATUS_DATE,'1d',\"\")")
      a.AF=this.calldateformula("add_duration(EVENT_COUNTRY_STATUS_DATE,'1d',\"\")")
      if (DEBUG) writeln(this.RA_ACTIVITY_ID+">"+this.EVENT_TYPE+">"+wbsType+">>"+a.AS+">>"+wsh.name);
      
    }
  }
  else
  {
    writeln("ERR>No Activity Type or not a Date>>"+this.RA_ACTIVITY_ID);
  }


}

function share_run_import()
{
  var res = false;
  var varia;
  var wsh;
  var activityTypeLookup = new vector(
  "Dispatched","VAR_SENT",
  "Submitted","VAR_SUBHA",
  "Approved","VAR_APP or VAR_NATAPP",
  "Positive Opinion","VAR_POSITOP"
  );
  
  // import to TT 
  writeln("Entering SHARE import...");
  res = share_import_into_SP_TT_SHARE_IMPORT();
  
  if (res && true)
  {
    // main loop
    for (var c in "opxSP_TT_SHARE_IMPORT".findclass() where c.RA_ACTIVITY_ID instanceof String
    && c.RA_ACTIVITY_ID !="" && c.SP_NF_B_RAVL_SHARE_EVENT_TYPE)
    {
      varia = ravl_get_by_RAActivityID(c.RA_ACTIVITY_ID);
      if (varia instanceof OpxSP_PT_RAVL )
      {
        wsh = varia.SP_RA_RAVL_WORKSHARING1;
        
        if (wsh instanceof opxSP_PT_RAVL_WORKSHARING)
        {
          c.share_update_activity(wsh,activityTypeLookup);
        }
        else
        {
          writeln("ERR>>no planning for variation>"+c.RA_ACTIVITY_ID);
        }
      }
      else 
      {
        writeln("ERR>>RA Activity ID>"+c.RA_ACTIVITY_ID+" not found");
      }
      
      
    }
  }
  else
  {
    writeln("ERR>>importing to temporary table");
  }
  writeln("SHARE import has finished" );
}

share_run_import.exportfunction();


// RA_ACTIVITY_ID
// EVENT_COUNTRY_STATUS_DATE
// EVENT_COUNTRY_STATUS
// EVENT_TYPE

// varia:SP_RA_RAVL_WORKSHARING1
// activity:SP_RA_RAVL_WORKSHARING



//  FILE    : SP_JS_RAVL_SHARE_IMPORT.ojs
// 
//  AUTHOR  : ksk
// 
//  VERSION : 1.0
// 
//  PURPOSE : #425 SHARE actual import - TEMPO
// 
//  HISTORY :
//  Created  by ksk 14:32 15/10/2014.
//  Modified  by ksk 14:33 28/01/2015 Dispatched activity type
//  Modified by MACS 22/06/2015 for WO0000000708030
//  Modified  by ksk 13:33 25/01/2016 Processing by Event Type.
//  Modified  by ksk 10:55 25/01/2018 TEMPO v1.0.0.29
//  Modified by lfa 10:42 07/05/2018 - Modification of share_test_activityType to not update date on NA milestones (Incident ITS-INC0276353)
//  Modified by lfa 10:42 18/05/2018 - Modification of share_test_activityType to not update date on OS and SUB milestones (Incident ITS-INC0276353)


// depends on SP_JS_RAVL_UPDATE

var DEBUG = true;

function share_import_into_SP_TT_SHARE_IMPORT()
{
  if (context.callstringformula("$DATABASE_NAME")=="DATABASE_PROD")
  {
    // import from datasource PROD
    return context.callmacro("SP_RQ_RAVL_IMPORT_SHARE_PROD");
  }
  else 
  {
    if (context.callstringformula("$DATABASE_NAME")=="DATABASE_UAT")
    {
      // import from datasource AT
      return context.callmacro("SP_RQ_RAVL_IMPORT_SHARE_AT");
    }
    else
    {
      // import from datasource DEV
      return context.callmacro("SP_RQ_RAVL_IMPORT_SHARE_DEV");
    }
  }
}

function share_test_activityType(wbsType)
{
  var res = false;
  var exp = this.WBS_TYPE.name +"+";
  
  // ITS-INC0276353 - Do not set "Approved" date for NA milestones
  if (exp instanceof String && exp!="NA+" && exp!="OS+" && exp!="SUB+")
  {
    res = exp.test(wbsType);
  }
  
  return res;
}

function share_update_activity(wsh, activityTypeLookup)
{
  var wbsType;
  
  // if (DEBUG) writeln("Planning>>"+wsh.name);
  // retrieving milestones
  if (this.EVENT_COUNTRY_STATUS instanceof String && this.EVENT_COUNTRY_STATUS !="")
  {
    wbsType = activityTypeLookup.get(this.EVENT_COUNTRY_STATUS);            
  }
  
  if (wbsType instanceof String && this.EVENT_COUNTRY_STATUS_DATE instanceof Date)
  {
    for (var a in wsh.get("r.SP_RA_RAVL_WORKSHARING.WORK-STRUCTURE") where a.share_test_activityType(wbsType) )
    {
      a.AS=this.calldateformula("add_duration(EVENT_COUNTRY_STATUS_DATE,'1d',\"\")")
      a.AF=this.calldateformula("add_duration(EVENT_COUNTRY_STATUS_DATE,'1d',\"\")")
      if (DEBUG) writeln(this.RA_ACTIVITY_ID+">"+this.EVENT_TYPE+">"+wbsType+">>"+a.AS+">>"+wsh.name);
      
    }
  }
  else
  {
    writeln("ERR>No Activity Type or not a Date>>"+this.RA_ACTIVITY_ID);
  }


}

function share_run_import()
{
  var res = false;
  var varia;
  var wsh;
  var activityTypeLookup = new vector(
  "Dispatched","VAR_SENT",
  "Submitted","VAR_SUBHA",
  "Approved","VAR_APP or VAR_NATAPP",
  "Positive Opinion","VAR_POSITOP"
  );
  
  // import to TT 
  writeln("Entering SHARE import...");
  res = share_import_into_SP_TT_SHARE_IMPORT();
  
  if (res && true)
  {
    // main loop
    for (var c in "opxSP_TT_SHARE_IMPORT".findclass() where c.RA_ACTIVITY_ID instanceof String
    && c.RA_ACTIVITY_ID !="" && c.SP_NF_B_RAVL_SHARE_EVENT_TYPE)
    {
      varia = ravl_get_by_RAActivityID(c.RA_ACTIVITY_ID);
      if (varia instanceof OpxSP_PT_RAVL )
      {
        wsh = varia.SP_RA_RAVL_WORKSHARING1;
        
        if (wsh instanceof opxSP_PT_RAVL_WORKSHARING)
        {
          c.share_update_activity(wsh,activityTypeLookup);
        }
        else
        {
          writeln("ERR>>no planning for variation>"+c.RA_ACTIVITY_ID);
        }
      }
      else 
      {
        writeln("ERR>>RA Activity ID>"+c.RA_ACTIVITY_ID+" not found");
      }
      
      
    }
  }
  else
  {
    writeln("ERR>>importing to temporary table");
  }
  writeln("SHARE import has finished" );
}

share_run_import.exportfunction();


// RA_ACTIVITY_ID
// EVENT_COUNTRY_STATUS_DATE
// EVENT_COUNTRY_STATUS
// EVENT_TYPE

// varia:SP_RA_RAVL_WORKSHARING1
// activity:SP_RA_RAVL_WORKSHARING



 
//  FILE    : SP_JS_RAVL_TEMPLATES.ojs
// 
//  AUTHOR  : ksk
// 
//  VERSION : 1.0
// 
//  PURPOSE : V6 RAVL Kernel
// 
//  HISTORY :
//  Created  by ksk 14:16 24/11/2016...ZC

function ravl_read_submission_mode()
{
  // this is a variation
  var res = this.SP_AA_RAVL_SUB_MODE;
  return (res instanceof String && res == "Worksharing") ? res : "";
}

function ravl_read_isCoR(dummy)
{
  // this is a variation
  var CoRslot =  new vector("IO","SP_AA_RAVL_CMC_COR",
  "LABEL","SP_AA_RAVL_LCC_COR");
  var IOLabel = this.SP_NF_RAVL_IO_LABEL;
  var CoR;
  if (IOLabel instanceof String && CoRslot.get(IOLabel) instanceof String)
  {
    CoR = this.get(CoRslot.get(IOLabel));
  }
  else
  {
    return false;
  }
  return (CoR instanceof String && CoR == this.SP_RA_RAVL_COUNTRY.NAME) ? true : false;
}

function ravl_read_isCoR_toString()
{
  return (this.ravl_read_isCoR("")) ? "IsCoR" : "";
}

function ravl_read_artwork()
{
	// this is a variation
	var res = this.SP_AA_RAVL_LBL_ART_IMPACT;
  return (res instanceof Boolean && res ) ? "Artwork" : "";
}

function ravl_read_submission_process()
{
	var subSlot = new vector("IO","SP_AA_RAVL_SUB_PROCESS_USER",
  "LABEL","SP_AA_RAVL_LCC_SUB_USER");
  
  var IOLabel = this.SP_NF_RAVL_IO_LABEL;
  var process = "";
  if (IOLabel instanceof String && subSlot.get(IOLabel) instanceof String
  && ! this.ravl_read_isCoR(""))
  {
    process = this.get(subSlot.get(IOLabel));
  }
  return process;
}

function ravl_read_procedureType_memberstate()
{
  var res;
  var LUT = new vector("National","National",
  "MRPRMS","RMS",
  "MRPCMS","CMS",
  "DCPRMS","RMS",
  "DCPCMS","CMS",
  "CP","CP");
  var ptm = this.SP_AA_RAVL_PROC_TYPE1 + this.SP_AA_RAVL_MEMBER_STATE2;
  if(ptm instanceof String)
  {
    res = LUT.get(ptm);    
  }
  return (res instanceof String) ? res : "National";
}

function ravl_find_cor()
{
  var cor;
  for (var varia in this.SP_NF_RAVL_ID.mapVariation() where varia.SP_AA_B_RAVL_LEADING_COR
  && varia.SP_NF_S_RAVL_PRODUCT_NAME == this.SP_NF_S_RAVL_PRODUCT_NAME
  && varia.SP_NF_RAVL_IO_LABEL_COR == this.SP_NF_RAVL_IO_LABEL_COR
  ) 
  {
    cor = varia;
    break;
  }
  return cor;
}

function ravl_read_cor_condition()
{
  var res;
  var cor;
  var LUT = new vector("National","Nat",
  "RMS","RMS",
  "CMS","CMS",
  "CP","CP");
  if (this.SP_NF_RAVL_COUNTRY_COR_UNDEFINED)
  {
    return "NoCoR";
  }
  
  cor = this.ravl_find_cor();
  if (cor instanceof opxSP_PT_RAVL && cor.ravl_read_procedureType_memberstate() instanceof String)
  {
    res = "CoR-" + LUT.get(cor.ravl_read_procedureType_memberstate() );
  }
    
  return (res instanceof String) ? res : "undefined";
}

function ravl_read_zone()
{
  var geo = this.SP_RA_RAVL_COUNTRY;
  var res;
  
  if (geo instanceof OpxSP_PT_CL_COUNTRY && geo.SP_AA_RAVL_IS_SPMSD
  && this.ravl_read_submission_mode() == "Worksharing")
  {
    res = "Europe";
  }
  // else if (this.ravl_read_isCoR(""))
  // {
    // res = "";
  // }
  else if (geo instanceof OpxSP_PT_CL_COUNTRY && geo.SP_AA_N_RAVL_ZONE > 0)
  {
    res = "Zone";
    res += geo.SP_AA_N_RAVL_ZONE.toString("####");
  }
  return (res instanceof String) ? res : "undefined";
}

function ravl_read_psd()
{
	var res;
  if(this.SP_AA_RAVL_LIODA instanceof Date 
  || this.SP_AA_RAVL_LCC_GO instanceof Date)
  {
    res = "PSD";
  }
  return (res instanceof String) ? res : "";
}

function ravl_read_template_rule()
{
  var cat = new vector();
  var gen = new vector("ravl_read_submission_mode",
  "ravl_read_cor_condition",
  "ravl_read_isCoR_toString",
  "ravl_read_zone",
  "ravl_read_psd",
  "ravl_read_submission_process",
  "ravl_read_procedureType_memberstate",
  "ravl_read_artwork");
  var res;
  
  for (var f in gen)
  {
    res = f.call(this);
    if (res instanceof String && res.length>0)
    {
      cat.push(res);
    }
  }
  return cat.join("-");
}

function ravl_set_templateRulesHT()
{
  // this is a hashtable
  var err = 0;
  var key = new vector();
  var keypins = new vector(
  "SP_AA_S_RAVL_DIM01","SP_AA_S_RAVL_DIM02",
  "SP_AA_S_RAVL_DIM03","SP_AA_S_RAVL_DIM04",
  "SP_AA_S_RAVL_DIM05","SP_AA_S_RAVL_DIM06",
  "SP_AA_S_RAVL_DIM07","SP_AA_S_RAVL_DIM08" );
  if (! this instanceof Hashtable)
  {
    return 9;
  }
  for (var c in "OpxSP_PT_RAVL_CAT_TEMPLATE".findclass() where "\w".test(c.SP_AA_S_RAVL_DIM02) )
  {
    for (var pin in keypins where "\w".test(c.get(pin)) )
    {
      key.push(c.get(pin));
    }
    
    if (this.get(key.join("-")) instanceof String)
    {
      context.ravl_trace_log("RST - RAVL Warning - Template Rules collision detected!");
    }
    else
    {
      this.set(key.join("-"),c );
    }
    
    key.clear();
  }
  return err;
}

ravl_read_submission_mode.exportfunction("","STRING");
ravl_read_isCoR.exportfunction({"STRING"},"BOOLEAN");
ravl_read_isCoR_toString.exportfunction("","STRING");
ravl_read_artwork.exportfunction("","STRING");
ravl_read_submission_process.exportfunction("","STRING");
ravl_read_procedureType_memberstate.exportfunction("","STRING");
ravl_read_cor_condition.exportfunction("","STRING");
ravl_read_zone.exportfunction("","STRING");
ravl_read_psd.exportfunction("","STRING");
ravl_read_template_rule.exportfunction("","STRING");







//  FILE    : SP_JS_RAVL_TEMPLATES.ojs
// 
//  AUTHOR  : ksk
// 
//  VERSION : 1.0
// 
//  PURPOSE : V6 RAVL Kernel
// 
//  HISTORY :
//  Created  by ksk 14:16 24/11/2016...ZC

function ravl_read_submission_mode()
{
  // this is a variation
  var res = this.SP_AA_RAVL_SUB_MODE;
  return (res instanceof String && res == "Worksharing") ? res : "";
}

function ravl_read_isCoR(dummy)
{
  // this is a variation
  var CoRslot =  new vector("IO","SP_AA_RAVL_CMC_COR",
  "LABEL","SP_AA_RAVL_LCC_COR");
  var IOLabel = this.SP_NF_RAVL_IO_LABEL;
  var CoR;
  if (IOLabel instanceof String && CoRslot.get(IOLabel) instanceof String)
  {
    CoR = this.get(CoRslot.get(IOLabel));
  }
  else
  {
    return false;
  }
  return (CoR instanceof String && CoR == this.SP_RA_RAVL_COUNTRY.NAME) ? true : false;
}

function ravl_read_isCoR_toString()
{
  return (this.ravl_read_isCoR("")) ? "IsCoR" : "";
}

function ravl_read_artwork()
{
	// this is a variation
	var res = this.SP_AA_RAVL_LBL_ART_IMPACT;
  return (res instanceof Boolean && res ) ? "Artwork" : "";
}

function ravl_read_submission_process()
{
	var subSlot = new vector("IO","SP_AA_RAVL_SUB_PROCESS_USER",
  "LABEL","SP_AA_RAVL_LCC_SUB_USER");
  
  var IOLabel = this.SP_NF_RAVL_IO_LABEL;
  var process = "";
  if (IOLabel instanceof String && subSlot.get(IOLabel) instanceof String
  && ! this.ravl_read_isCoR(""))
  {
    process = this.get(subSlot.get(IOLabel));
  }
  return process;
}

function ravl_read_procedureType_memberstate()
{
  var res;
  var LUT = new vector("National","National",
  "MRPRMS","RMS",
  "MRPCMS","CMS",
  "DCPRMS","RMS",
  "DCPCMS","CMS",
  "CP","CP");
  var ptm = this.SP_AA_RAVL_PROC_TYPE1 + this.SP_AA_RAVL_MEMBER_STATE2;
  if(ptm instanceof String)
  {
    res = LUT.get(ptm);    
  }
  return (res instanceof String) ? res : "National";
}

function ravl_find_cor()
{
  var cor;
  for (var varia in this.SP_NF_RAVL_ID.mapVariation() where varia.SP_AA_B_RAVL_LEADING_COR
  && varia.SP_NF_S_RAVL_PRODUCT_NAME == this.SP_NF_S_RAVL_PRODUCT_NAME
  && varia.SP_NF_RAVL_IO_LABEL_COR == this.SP_NF_RAVL_IO_LABEL_COR
  ) 
  {
    cor = varia;
    break;
  }
  return cor;
}

function ravl_read_cor_condition()
{
  var res;
  var cor;
  var LUT = new vector("National","Nat",
  "RMS","RMS",
  "CMS","CMS",
  "CP","CP");
  if (this.SP_NF_RAVL_COUNTRY_COR_UNDEFINED)
  {
    return "NoCoR";
  }
  
  cor = this.ravl_find_cor();
  if (cor instanceof opxSP_PT_RAVL && cor.ravl_read_procedureType_memberstate() instanceof String)
  {
    res = "CoR-" + LUT.get(cor.ravl_read_procedureType_memberstate() );
  }
    
  return (res instanceof String) ? res : "undefined";
}

function ravl_read_zone()
{
  var geo = this.SP_RA_RAVL_COUNTRY;
  var res;
  
  if (geo instanceof OpxSP_PT_CL_COUNTRY && geo.SP_AA_RAVL_IS_SPMSD
  && this.ravl_read_submission_mode() == "Worksharing")
  {
    res = "Europe";
  }
  // else if (this.ravl_read_isCoR(""))
  // {
    // res = "";
  // }
  else if (geo instanceof OpxSP_PT_CL_COUNTRY && geo.SP_AA_N_RAVL_ZONE > 0)
  {
    res = "Zone";
    res += geo.SP_AA_N_RAVL_ZONE.toString("####");
  }
  return (res instanceof String) ? res : "undefined";
}

function ravl_read_psd()
{
	var res;
  if(this.SP_AA_RAVL_LIODA instanceof Date 
  || this.SP_AA_RAVL_LCC_GO instanceof Date)
  {
    res = "PSD";
  }
  return (res instanceof String) ? res : "";
}

function ravl_read_template_rule()
{
  var cat = new vector();
  var gen = new vector("ravl_read_submission_mode",
  "ravl_read_cor_condition",
  "ravl_read_isCoR_toString",
  "ravl_read_zone",
  "ravl_read_psd",
  "ravl_read_submission_process",
  "ravl_read_procedureType_memberstate",
  "ravl_read_artwork");
  var res;
  
  for (var f in gen)
  {
    res = f.call(this);
    if (res instanceof String && res.length>0)
    {
      cat.push(res);
    }
  }
  return cat.join("-");
}

function ravl_set_templateRulesHT()
{
  // this is a hashtable
  var err = 0;
  var key = new vector();
  var keypins = new vector(
  "SP_AA_S_RAVL_DIM01","SP_AA_S_RAVL_DIM02",
  "SP_AA_S_RAVL_DIM03","SP_AA_S_RAVL_DIM04",
  "SP_AA_S_RAVL_DIM05","SP_AA_S_RAVL_DIM06",
  "SP_AA_S_RAVL_DIM07","SP_AA_S_RAVL_DIM08" );
  if (! this instanceof Hashtable)
  {
    return 9;
  }
  for (var c in "OpxSP_PT_RAVL_CAT_TEMPLATE".findclass() where "\w".test(c.SP_AA_S_RAVL_DIM02) )
  {
    for (var pin in keypins where "\w".test(c.get(pin)) )
    {
      key.push(c.get(pin));
    }
    
    if (this.get(key.join("-")) instanceof String)
    {
      context.ravl_trace_log("RST - RAVL Warning - Template Rules collision detected!");
    }
    else
    {
      this.set(key.join("-"),c );
    }
    
    key.clear();
  }
  return err;
}

ravl_read_submission_mode.exportfunction("","STRING");
ravl_read_isCoR.exportfunction({"STRING"},"BOOLEAN");
ravl_read_isCoR_toString.exportfunction("","STRING");
ravl_read_artwork.exportfunction("","STRING");
ravl_read_submission_process.exportfunction("","STRING");
ravl_read_procedureType_memberstate.exportfunction("","STRING");
ravl_read_cor_condition.exportfunction("","STRING");
ravl_read_zone.exportfunction("","STRING");
ravl_read_psd.exportfunction("","STRING");
ravl_read_template_rule.exportfunction("","STRING");







 
//  FILE    : SP_JS_RAVL_UPDATE.ojs
// 
//  AUTHOR  : ksk
// 
//  VERSION : 1.0
// 
//  PURPOSE : variation update module
// 
//  HISTORY :
// Created  by ksk 14:38 28/06/2012
// modified by SG 6/01/2013 added new attribute "SP_AA_RAVL_PACK_SET_NAME" in function ravl_modify_variation_attributes
// modified  by ksk 11:31 07/02/2014 added function ravl_update_title 391.
// modified  by jbe send email on error ravl update title
// modified  by ksk 14:19 05/11/2014 Evl 420 Implementation date
// modified  by ksk 14:13 10/02/2015 WKO Cancelled No reporting
// modified  by ksk 14:50 07/07/2015 Evol 489 update map NoCoR - Country of Reference
// modified  by ksk 10:07 21/09/2016 Compass V6 Simplification
// modified  by ksk 10:50 18/04/2017 Compass V6 New updates.


// mapping temporary & permanent variation attributes
global var ravlAttributesMap = new vector (
"NAME", "RAVL_NF_NEW_ID_RAVL",
"SP_RA_RAVL_COUNTRY", "RAVL_NF_NEW_RA_COUNTRY",
"SP_RA_RAVL_PRODUCT", "RAVL_NF_NEW_RA_PRODUCT",
"SP_AA_RAVL_LCCN", "SP_AA_RAVL_LCCN",
"SP_AA_RAVL_LCC_NAME", "SP_AA_RAVL_LCC_NAME",
"SP_AA_S_RAVL_CCR_NUM", "SP_AA_S_RAVL_CCR_NUM",
"SP_AA_RAVL_CMC_NAME", "SP_AA_RAVL_CMC_NAME",
"SP_AA_S_RAVL_PR_PA_TY", "SP_AA_S_RAVL_PR_PA_TY",
"SP_AA_RAVL_VARIATION_TYPE2", "SP_AA_RAVL_VARIATION_TYPE",
"SP_AA_RAVL_CMC_COR", "SP_AA_RAVL_CMC_COR",
"SP_AA_RAVL_LCC_COR", "SP_AA_RAVL_LCC_COR",
"SP_AA_S_RAVL_LICENSE", "SP_AA_S_RAVL_LICENSE",
"SP_AA_RAVL_PROC_TYPE1", "SP_AA_RAVL_PROC_TYPE",
"SP_AA_RAVL_SUB_MODE", "SP_AA_RAVL_SUB_MODE",
"SP_AA_S_RAVL_DO_PE_CO", "SP_AA_S_RAVL_DO_PE_CO",
"SP_AA_RAVL_SEC_PACKAGING", "SP_AA_RAVL_SEC_PACKAGING",
"SP_AA_RAVL_FRANCHISE", "SP_AA_RAVL_FRANCHISE",
"SP_AA_RAVL_GP_RESP", "SP_AA_RAVL_GP_RESP",
"SP_AA_S_RAVL_PO_LIC", "SP_AA_S_RAVL_PO_LIC",
"SP_AA_RAVL_DATA_ORIGINE", "SP_AA_RAVL_ORIGINE",
"SP_AA_S_RAVL_REPORT_CAT_USER", "SP_AA_S_RAVL_REPORT_CAT",
"SP_AA_RAVL_LCC_SUB_USER", "SP_AA_S_RAVL_LCC_COUNTRY_SUB_PROCESS",
"SP_AA_RAVL_SUB_PROCESS_USER", "SP_AA_S_RAVL_IO_COUNTRY_SUB_PROCESS",
"SP_AA_S_RAVL_COUNTRY_CAT", "SP_AA_S_RAVL_IO_COUNTRY_CAT",
"SP_AA_RAVL_LCC_COUNTRY_CAT", "SP_AA_S_RAVL_LCC_CONTRY_CAT",
"SP_AA_RAVL_MEMBER_STATE2", "SP_AA_RAVL_MEMBER_STATE",
"SP_AA_RAVL_LBL_TXT_IMPACT", "SP_AA_RAVL_LBL_TXT_IMPACT",
"SP_AA_RAVL_LBL_ART_IMPACT", "SP_AA_RAVL_LBL_ART_IMPACT",
"SP_AA_RAVL_COM_DOC_IMPACT", "SP_AA_RAVL_COM_DOC_IMPACT",
"SP_AA_RAVL_PROTECT_FILE_NEED", "SP_AA_RAVL_PROTECT_FILE_NEED",
"SP_AA_RAVL_LIODA", "SP_AA_RAVL_LIODA",
"SP_AA_RAVL_PLANNING_STATUS", "SP_AA_RAVL_PLANNING_STATUS",
"SP_AA_RAVL_RA_ACT_ID", "SP_AA_RAVL_RA_ACT_ID",
"SP_AA_RAVL_LCC_GO", "SP_AA_RAVL_LCC_GO","SP_AA_RAVL_PACK_SET_NAME","SP_AA_RAVL_PACK_SET_NAME",
"SP_AA_RAVL_VARIATION_TITLE", "SP_AA_RAVL_VARIATION_TITLE",
"SP_AA_D_RAVL_IMPLEM_DATE", "SP_AA_D_RAVL_IMPLEM_DATE"
);

// SP_PT_RAVL_UPDATE_RULES Attributes
// SP_AA_S_RAVL_SLOT_COMPAR_LIST
// SP_AA_S_RAVL_RULE_UPDATE_ACTIO
// SP_AA_S_RAVL_TARGET_ENTITY
// SP_AA_S_RAVL_RULE_CNTRY_FILTER
// NAME
// DESC

// SP_IF_RAVL_IMPORT_V4

// SP_AA_S_RAVL_UPDATE_ACTION 

function notBool()
{
  if (this instanceof boolean && this) return false;
  else return true;
}

// determine if the rule is selected for further processing based on variation country filter
function ravl_update_rule_is_selected(varia)
{
  var result = false;
  if (this instanceof OpxSP_PT_RAVL_UPDATE_RULES && varia instanceof OpxSP_PT_RAVL)
  {    
    if (this.SP_AA_S_RAVL_RULE_CNTRY_FILTER == "All") return true;
    else if (this.SP_AA_S_RAVL_RULE_CNTRY_FILTER == "CoR") return varia.ravl_read_isCoR("dummy");
    else if (this.SP_AA_S_RAVL_RULE_CNTRY_FILTER == "exceptCoR") return varia.ravl_read_isCoR("dummy").notBool();

  }
  return result;
}

// V03>>All>>>OpxSP_PT_RAVL_UPDATE_RULES

// from a temporary variation, set the update planning action on the current variation
// error : 0 OK; 1:current variation not found;9:

function ravl_set_update_planning_action()
{
  if !(this instanceof OpxSP_TT_RAVL_IMPORT) return 9;

  var PTvaria = ravl_get_by_RAActivityID(this.SP_AA_RAVL_RA_ACT_ID);
  if !(PTvaria instanceof OpxSP_PT_RAVL) return 1;
  // set action:NOAUTO on PTvaria
  PTvaria.SP_AA_S_RAVL_UPDATE_ACTION = "NOAUTO";
  
  // scan rules
  for (var rule in "OpxSP_PT_RAVL_UPDATE_RULES".findclass() 
  where rule.ravl_update_rule_is_selected(PTvaria)
  order by {"name"})
  {
    alert(rule.name+">>"+rule.SP_AA_S_RAVL_RULE_CNTRY_FILTER+">selected>>");
    if (rule.ravl_compare_attributes(this, PTvaria)) 
    {
      // set action on PTvaria
      alert(">>action found>"+rule.desc);
      PTvaria.SP_AA_S_RAVL_UPDATE_ACTION = rule.SP_AA_S_RAVL_RULE_UPDATE_ACTIO;
      alert(">>rule action>"+rule.SP_AA_S_RAVL_RULE_UPDATE_ACTIO);
      alert(">>action set>"+PTvaria.SP_AA_S_RAVL_UPDATE_ACTION);
      
      break;
    }
    alert("|");    
  }
  // post processing:on VARDEL test this.SP_AA_RAVL_PLANNING_STATUS = Cancelled
  if (PTvaria.SP_AA_S_RAVL_UPDATE_ACTION == "VARDEL"
      && this.SP_AA_RAVL_PLANNING_STATUS != "Cancelled")
  {
    PTvaria.SP_AA_S_RAVL_UPDATE_ACTION = "NOAUTO";
  }
  // post processing Cancelled & No reporting Case
  if ( (PTvaria.SP_AA_S_RAVL_UPDATE_ACTION == "CGDLRP" || PTvaria.SP_AA_S_RAVL_UPDATE_ACTION == "VRDLRP" )
      && this.SP_AA_RAVL_PLANNING_STATUS == "Cancelled"
      && this.SP_AA_S_RAVL_REPORT_CAT == "No Reporting" )
  {
    PTvaria.SP_AA_S_RAVL_UPDATE_ACTION = "VARDEL";
    alert(">>action set post>"+PTvaria.SP_AA_S_RAVL_UPDATE_ACTION);
  }  
  return 0;
}

// true if modified attribute found in the rule attributes list.
function ravl_compare_attributes(TTvaria, PTvaria)
{
  // attribute value
  var TTvariaValue;
  var PTvariaValue;
  
  if (this instanceof OpxSP_PT_RAVL_UPDATE_RULES)
  {
    // this is a rule
    // attribute list to compare
    for (var slot in this.SP_AA_S_RAVL_SLOT_COMPAR_LIST.parsevector())
    {
      // alert(slot);
      if (slot instanceof string && ravlAttributesMap.get(slot) instanceof string)
      {
        PTvariaValue = PTvaria.get(slot);
        TTvariaValue = TTvaria.get(ravlAttributesMap.get(slot));
        alert(slot+":PT>><<TT:"+ravlAttributesMap.get(slot));
        alert(PTvariaValue+"><"+TTvariaValue);
        if (PTvariaValue != TTvariaValue)
        {
          alert(">>>>>Modified>>early return");
          // break;
          return true;
        }        
      }
    }
    // this.SP_AA_S_RAVL_SLOT_COMPAR_LIST    
  }
  return false; 
}


// main : from a temporary variation, update the current variation.
// error code: 0:OK; 1:Country or product not found; 9:KO; >20:modify KO
function ravl_update_variation()
{
  var err=0;
  if !(this instanceof OpxSP_TT_RAVL_IMPORT) return 9;
  if (this.CTRL_RAVL_OK_TO_IMPORT)
  {
    // update processing step 1:update planning action
    err = this.ravl_set_update_planning_action();
    
    // step 2:modify current variation
    err += this.ravl_modify_variation_attributes();
    
  }
  else
  {
    // country or product not found
    err = 1;
  }
  return err;
}

// from a temporary variation, modify the current variation attributes
// error code: 0:OK; 90:KO
function ravl_modify_variation_attributes()
{
  if !(this instanceof OpxSP_TT_RAVL_IMPORT) return 90;
  var atributeList = new vector(
  "NAME",
  "SP_RA_RAVL_COUNTRY",
  "SP_RA_RAVL_PRODUCT",
  "SP_AA_RAVL_LCCN",
  "SP_AA_RAVL_LCC_NAME",
  "SP_AA_S_RAVL_CCR_NUM",
  "SP_AA_RAVL_CMC_NAME",
  "SP_AA_S_RAVL_PR_PA_TY",
  "SP_AA_RAVL_VARIATION_TYPE2",
  "SP_AA_RAVL_CMC_COR",
  "SP_AA_RAVL_LCC_COR",
  "SP_AA_S_RAVL_LICENSE",
  "SP_AA_RAVL_PROC_TYPE1",  "SP_AA_RAVL_SUB_MODE",
  "SP_AA_S_RAVL_DO_PE_CO",  "SP_AA_RAVL_SEC_PACKAGING",
  "SP_AA_RAVL_FRANCHISE",  "SP_AA_RAVL_GP_RESP",
  "SP_AA_S_RAVL_PO_LIC",  "SP_AA_RAVL_DATA_ORIGINE",
  "SP_AA_S_RAVL_REPORT_CAT_USER",  "SP_AA_RAVL_LCC_SUB_USER",
  "SP_AA_RAVL_SUB_PROCESS_USER",  "SP_AA_S_RAVL_COUNTRY_CAT",
  "SP_AA_RAVL_LCC_COUNTRY_CAT",  "SP_AA_RAVL_MEMBER_STATE2",
  "SP_AA_RAVL_LBL_TXT_IMPACT",  "SP_AA_RAVL_LBL_ART_IMPACT",
  "SP_AA_RAVL_COM_DOC_IMPACT",  "SP_AA_RAVL_PROTECT_FILE_NEED",
  "SP_AA_RAVL_LIODA",  "SP_AA_RAVL_PLANNING_STATUS",
  "SP_AA_RAVL_RA_ACT_ID",  "SP_AA_RAVL_LCC_GO",
  "SP_AA_RAVL_PACK_SET_NAME");

  var PTvaria = ravl_get_by_RAActivityID(this.SP_AA_RAVL_RA_ACT_ID);
  if !(PTvaria instanceof OpxSP_PT_RAVL) return 10;
  
  //plist
  var plist = new vector();
  for (var c in atributeList)
  {
    plist.push(c);
    plist.push( this.get(ravlAttributesMap.get(c)) );
    
    // writeln(c +">>"+ ravlAttributesMap.get(c));
    writeln(c +">>"+PTvaria.get(c)+"<<"+ this.get(ravlAttributesMap.get(c)) );
  }
  
  // modify
  var mod = PTvaria.Modifywithplist(plist);
  writeln(mod);
  if (! mod) return 20;
  return 0;
}

// 391 update title of variation

var changeTypeToWBS_TYPE = new vector(
"IO Labeling", "VAR_CCR_LCR",
"IO", "VAR_CCR",
"Labeling", "VAR_LCR"
);

function LEGACY_ravl_update_title(varia)
{
  var err = 0;
  var changeWBS_TYPE = changeTypeToWBS_TYPE.get(varia.SP_NF_RAVL_TYPE_CHANGE);
  var changeWBS;
  var variaWBS;
  var wsh;
  
  var dbg_mail_sent = Context.SP_NF_RAVL_RA_SENDER_MAIL + " -> " + context.SP_NF_RAVL_RA_RECIPIEN_MAIL_ERR + " Variation to update not found...";
	  
  if (! changeWBS_TYPE instanceof string) return 9;
  // changeWBS_TYPE = "OpxActivityType".get(changeWBS_TYPE);

  // look for change & varia wbs 
  for (var a in varia.get("r.SP_RA_RAVL_ACT_RAVL.WORK-STRUCTURE"))
  {
    if (a.wbs_type.name == changeWBS_TYPE)
    {
      writeln (changeWBS_TYPE +">>"+ a.wbs_type);
      changeWBS = a;
    }
    if (a.wbs_type.name == "VAR_ACT")
    {
      writeln ("VAR_ACT>>"+a.wbs_type);
      variaWBS = a;
    }
  }
  
  withoutalerts
  {  
    // update change WBS desc
    if (changeWBS instanceof OpxActivity)
    {
      changeWBS.desc=varia.SP_NF_RAVL_ID_CHANGE_DESC_WBS;
      writeln("ravl_update_title>Updating change desc to>"+changeWBS.desc);
    }
    else
    {
      writeln("ravl_update_title>>"+changeWBS_TYPE+" desc not updated by "+varia.SP_AA_RAVL_RA_ACT_ID);
    }

    // propagate title under VAR_ACT
    if (variaWBS instanceof OpxActivity)
    {
      writeln("ravl_update_title>Updating VAR_ACT WBS "+variaWBS.desc);
      fromObject (variaWBS)
      {
        for (var a in "OpxActivity".findclass())
        {
          a.SP_AA_RAVL_I_CCR=varia.SP_NF_RAVL_ID_CHANGE_DESC;
          writeln("ravl_update_title>under VAR_ACT WBS>"+a.desc+a.wbs_type.name);
        }
      }
    }
    else
    {
      writeln("ravl_update_title>>"+varia.SP_AA_RAVL_RA_ACT_ID+" in merging or worksharing case!");
    }
    
    // update worksharing SP_AA_ACT_RAVL_CCR
    wsh = varia.SP_RA_RAVL_WORKSHARING1;
    if (wsh instanceof opxSP_PT_RAVL_WORKSHARING)
    {    
      // writeln("worksharing>>"+wsh);
      if (variaWBS instanceof OpxActivity)
      {
        writeln("ravl_update_title>Updating Worksharing>"+wsh.name);
        wsh.SP_AA_ACT_RAVL_CCR = varia.SP_NF_RAVL_ID_CHANGE_DESC
        writeln("ravl_update_title>Updating Worksharing>"+wsh.SP_AA_ACT_RAVL_CCR);
      }
    }
    else
    {
      //err = 9;
	  varia.callmacro("SP_AL_RAVL_VAR_MAIL_ERR_UPD_TITLE");
	  varia.SP_AA_RAVL_ERR_COMMENT="TTLUPD->DATA-ERR -> Mail Sent : " + dbg_mail_sent;
	  writeln(varia.SP_AA_RAVL_ERR_COMMENT);
	  err = 0;

    }
  }
  return err;
}

//  FILE    : SP_JS_RAVL_UPDATE.ojs
// 
//  AUTHOR  : ksk
// 
//  VERSION : 1.0
// 
//  PURPOSE : variation update module
// 
//  HISTORY :
// Created  by ksk 14:38 28/06/2012
// modified by SG 6/01/2013 added new attribute "SP_AA_RAVL_PACK_SET_NAME" in function ravl_modify_variation_attributes
// modified  by ksk 11:31 07/02/2014 added function ravl_update_title 391.
// modified  by jbe send email on error ravl update title
// modified  by ksk 14:19 05/11/2014 Evl 420 Implementation date
// modified  by ksk 14:13 10/02/2015 WKO Cancelled No reporting
// modified  by ksk 14:50 07/07/2015 Evol 489 update map NoCoR - Country of Reference
// modified  by ksk 10:07 21/09/2016 Compass V6 Simplification
// modified  by ksk 10:50 18/04/2017 Compass V6 New updates.


// mapping temporary & permanent variation attributes
global var ravlAttributesMap = new vector (
"NAME", "RAVL_NF_NEW_ID_RAVL",
"SP_RA_RAVL_COUNTRY", "RAVL_NF_NEW_RA_COUNTRY",
"SP_RA_RAVL_PRODUCT", "RAVL_NF_NEW_RA_PRODUCT",
"SP_AA_RAVL_LCCN", "SP_AA_RAVL_LCCN",
"SP_AA_RAVL_LCC_NAME", "SP_AA_RAVL_LCC_NAME",
"SP_AA_S_RAVL_CCR_NUM", "SP_AA_S_RAVL_CCR_NUM",
"SP_AA_RAVL_CMC_NAME", "SP_AA_RAVL_CMC_NAME",
"SP_AA_S_RAVL_PR_PA_TY", "SP_AA_S_RAVL_PR_PA_TY",
"SP_AA_RAVL_VARIATION_TYPE2", "SP_AA_RAVL_VARIATION_TYPE",
"SP_AA_RAVL_CMC_COR", "SP_AA_RAVL_CMC_COR",
"SP_AA_RAVL_LCC_COR", "SP_AA_RAVL_LCC_COR",
"SP_AA_S_RAVL_LICENSE", "SP_AA_S_RAVL_LICENSE",
"SP_AA_RAVL_PROC_TYPE1", "SP_AA_RAVL_PROC_TYPE",
"SP_AA_RAVL_SUB_MODE", "SP_AA_RAVL_SUB_MODE",
"SP_AA_S_RAVL_DO_PE_CO", "SP_AA_S_RAVL_DO_PE_CO",
"SP_AA_RAVL_SEC_PACKAGING", "SP_AA_RAVL_SEC_PACKAGING",
"SP_AA_RAVL_FRANCHISE", "SP_AA_RAVL_FRANCHISE",
"SP_AA_RAVL_GP_RESP", "SP_AA_RAVL_GP_RESP",
"SP_AA_S_RAVL_PO_LIC", "SP_AA_S_RAVL_PO_LIC",
"SP_AA_RAVL_DATA_ORIGINE", "SP_AA_RAVL_ORIGINE",
"SP_AA_S_RAVL_REPORT_CAT_USER", "SP_AA_S_RAVL_REPORT_CAT",
"SP_AA_RAVL_LCC_SUB_USER", "SP_AA_S_RAVL_LCC_COUNTRY_SUB_PROCESS",
"SP_AA_RAVL_SUB_PROCESS_USER", "SP_AA_S_RAVL_IO_COUNTRY_SUB_PROCESS",
"SP_AA_S_RAVL_COUNTRY_CAT", "SP_AA_S_RAVL_IO_COUNTRY_CAT",
"SP_AA_RAVL_LCC_COUNTRY_CAT", "SP_AA_S_RAVL_LCC_CONTRY_CAT",
"SP_AA_RAVL_MEMBER_STATE2", "SP_AA_RAVL_MEMBER_STATE",
"SP_AA_RAVL_LBL_TXT_IMPACT", "SP_AA_RAVL_LBL_TXT_IMPACT",
"SP_AA_RAVL_LBL_ART_IMPACT", "SP_AA_RAVL_LBL_ART_IMPACT",
"SP_AA_RAVL_COM_DOC_IMPACT", "SP_AA_RAVL_COM_DOC_IMPACT",
"SP_AA_RAVL_PROTECT_FILE_NEED", "SP_AA_RAVL_PROTECT_FILE_NEED",
"SP_AA_RAVL_LIODA", "SP_AA_RAVL_LIODA",
"SP_AA_RAVL_PLANNING_STATUS", "SP_AA_RAVL_PLANNING_STATUS",
"SP_AA_RAVL_RA_ACT_ID", "SP_AA_RAVL_RA_ACT_ID",
"SP_AA_RAVL_LCC_GO", "SP_AA_RAVL_LCC_GO","SP_AA_RAVL_PACK_SET_NAME","SP_AA_RAVL_PACK_SET_NAME",
"SP_AA_RAVL_VARIATION_TITLE", "SP_AA_RAVL_VARIATION_TITLE",
"SP_AA_D_RAVL_IMPLEM_DATE", "SP_AA_D_RAVL_IMPLEM_DATE"
);

// SP_PT_RAVL_UPDATE_RULES Attributes
// SP_AA_S_RAVL_SLOT_COMPAR_LIST
// SP_AA_S_RAVL_RULE_UPDATE_ACTIO
// SP_AA_S_RAVL_TARGET_ENTITY
// SP_AA_S_RAVL_RULE_CNTRY_FILTER
// NAME
// DESC

// SP_IF_RAVL_IMPORT_V4

// SP_AA_S_RAVL_UPDATE_ACTION 

function notBool()
{
  if (this instanceof boolean && this) return false;
  else return true;
}

// determine if the rule is selected for further processing based on variation country filter
function ravl_update_rule_is_selected(varia)
{
  var result = false;
  if (this instanceof OpxSP_PT_RAVL_UPDATE_RULES && varia instanceof OpxSP_PT_RAVL)
  {    
    if (this.SP_AA_S_RAVL_RULE_CNTRY_FILTER == "All") return true;
    else if (this.SP_AA_S_RAVL_RULE_CNTRY_FILTER == "CoR") return varia.ravl_read_isCoR("dummy");
    else if (this.SP_AA_S_RAVL_RULE_CNTRY_FILTER == "exceptCoR") return varia.ravl_read_isCoR("dummy").notBool();

  }
  return result;
}

// V03>>All>>>OpxSP_PT_RAVL_UPDATE_RULES

// from a temporary variation, set the update planning action on the current variation
// error : 0 OK; 1:current variation not found;9:

function ravl_set_update_planning_action()
{
  if !(this instanceof OpxSP_TT_RAVL_IMPORT) return 9;

  var PTvaria = ravl_get_by_RAActivityID(this.SP_AA_RAVL_RA_ACT_ID);
  if !(PTvaria instanceof OpxSP_PT_RAVL) return 1;
  // set action:NOAUTO on PTvaria
  PTvaria.SP_AA_S_RAVL_UPDATE_ACTION = "NOAUTO";
  
  // scan rules
  for (var rule in "OpxSP_PT_RAVL_UPDATE_RULES".findclass() 
  where rule.ravl_update_rule_is_selected(PTvaria)
  order by {"name"})
  {
    alert(rule.name+">>"+rule.SP_AA_S_RAVL_RULE_CNTRY_FILTER+">selected>>");
    if (rule.ravl_compare_attributes(this, PTvaria)) 
    {
      // set action on PTvaria
      alert(">>action found>"+rule.desc);
      PTvaria.SP_AA_S_RAVL_UPDATE_ACTION = rule.SP_AA_S_RAVL_RULE_UPDATE_ACTIO;
      alert(">>rule action>"+rule.SP_AA_S_RAVL_RULE_UPDATE_ACTIO);
      alert(">>action set>"+PTvaria.SP_AA_S_RAVL_UPDATE_ACTION);
      
      break;
    }
    alert("|");    
  }
  // post processing:on VARDEL test this.SP_AA_RAVL_PLANNING_STATUS = Cancelled
  if (PTvaria.SP_AA_S_RAVL_UPDATE_ACTION == "VARDEL"
      && this.SP_AA_RAVL_PLANNING_STATUS != "Cancelled")
  {
    PTvaria.SP_AA_S_RAVL_UPDATE_ACTION = "NOAUTO";
  }
  // post processing Cancelled & No reporting Case
  if ( (PTvaria.SP_AA_S_RAVL_UPDATE_ACTION == "CGDLRP" || PTvaria.SP_AA_S_RAVL_UPDATE_ACTION == "VRDLRP" )
      && this.SP_AA_RAVL_PLANNING_STATUS == "Cancelled"
      && this.SP_AA_S_RAVL_REPORT_CAT == "No Reporting" )
  {
    PTvaria.SP_AA_S_RAVL_UPDATE_ACTION = "VARDEL";
    alert(">>action set post>"+PTvaria.SP_AA_S_RAVL_UPDATE_ACTION);
  }  
  return 0;
}

// true if modified attribute found in the rule attributes list.
function ravl_compare_attributes(TTvaria, PTvaria)
{
  // attribute value
  var TTvariaValue;
  var PTvariaValue;
  
  if (this instanceof OpxSP_PT_RAVL_UPDATE_RULES)
  {
    // this is a rule
    // attribute list to compare
    for (var slot in this.SP_AA_S_RAVL_SLOT_COMPAR_LIST.parsevector())
    {
      // alert(slot);
      if (slot instanceof string && ravlAttributesMap.get(slot) instanceof string)
      {
        PTvariaValue = PTvaria.get(slot);
        TTvariaValue = TTvaria.get(ravlAttributesMap.get(slot));
        alert(slot+":PT>><<TT:"+ravlAttributesMap.get(slot));
        alert(PTvariaValue+"><"+TTvariaValue);
        if (PTvariaValue != TTvariaValue)
        {
          alert(">>>>>Modified>>early return");
          // break;
          return true;
        }        
      }
    }
    // this.SP_AA_S_RAVL_SLOT_COMPAR_LIST    
  }
  return false; 
}


// main : from a temporary variation, update the current variation.
// error code: 0:OK; 1:Country or product not found; 9:KO; >20:modify KO
function ravl_update_variation()
{
  var err=0;
  if !(this instanceof OpxSP_TT_RAVL_IMPORT) return 9;
  if (this.CTRL_RAVL_OK_TO_IMPORT)
  {
    // update processing step 1:update planning action
    err = this.ravl_set_update_planning_action();
    
    // step 2:modify current variation
    err += this.ravl_modify_variation_attributes();
    
  }
  else
  {
    // country or product not found
    err = 1;
  }
  return err;
}

// from a temporary variation, modify the current variation attributes
// error code: 0:OK; 90:KO
function ravl_modify_variation_attributes()
{
  if !(this instanceof OpxSP_TT_RAVL_IMPORT) return 90;
  var atributeList = new vector(
  "NAME",
  "SP_RA_RAVL_COUNTRY",
  "SP_RA_RAVL_PRODUCT",
  "SP_AA_RAVL_LCCN",
  "SP_AA_RAVL_LCC_NAME",
  "SP_AA_S_RAVL_CCR_NUM",
  "SP_AA_RAVL_CMC_NAME",
  "SP_AA_S_RAVL_PR_PA_TY",
  "SP_AA_RAVL_VARIATION_TYPE2",
  "SP_AA_RAVL_CMC_COR",
  "SP_AA_RAVL_LCC_COR",
  "SP_AA_S_RAVL_LICENSE",
  "SP_AA_RAVL_PROC_TYPE1",  "SP_AA_RAVL_SUB_MODE",
  "SP_AA_S_RAVL_DO_PE_CO",  "SP_AA_RAVL_SEC_PACKAGING",
  "SP_AA_RAVL_FRANCHISE",  "SP_AA_RAVL_GP_RESP",
  "SP_AA_S_RAVL_PO_LIC",  "SP_AA_RAVL_DATA_ORIGINE",
  "SP_AA_S_RAVL_REPORT_CAT_USER",  "SP_AA_RAVL_LCC_SUB_USER",
  "SP_AA_RAVL_SUB_PROCESS_USER",  "SP_AA_S_RAVL_COUNTRY_CAT",
  "SP_AA_RAVL_LCC_COUNTRY_CAT",  "SP_AA_RAVL_MEMBER_STATE2",
  "SP_AA_RAVL_LBL_TXT_IMPACT",  "SP_AA_RAVL_LBL_ART_IMPACT",
  "SP_AA_RAVL_COM_DOC_IMPACT",  "SP_AA_RAVL_PROTECT_FILE_NEED",
  "SP_AA_RAVL_LIODA",  "SP_AA_RAVL_PLANNING_STATUS",
  "SP_AA_RAVL_RA_ACT_ID",  "SP_AA_RAVL_LCC_GO",
  "SP_AA_RAVL_PACK_SET_NAME");

  var PTvaria = ravl_get_by_RAActivityID(this.SP_AA_RAVL_RA_ACT_ID);
  if !(PTvaria instanceof OpxSP_PT_RAVL) return 10;
  
  //plist
  var plist = new vector();
  for (var c in atributeList)
  {
    plist.push(c);
    plist.push( this.get(ravlAttributesMap.get(c)) );
    
    // writeln(c +">>"+ ravlAttributesMap.get(c));
    writeln(c +">>"+PTvaria.get(c)+"<<"+ this.get(ravlAttributesMap.get(c)) );
  }
  
  // modify
  var mod = PTvaria.Modifywithplist(plist);
  writeln(mod);
  if (! mod) return 20;
  return 0;
}

// 391 update title of variation

var changeTypeToWBS_TYPE = new vector(
"IO Labeling", "VAR_CCR_LCR",
"IO", "VAR_CCR",
"Labeling", "VAR_LCR"
);

function LEGACY_ravl_update_title(varia)
{
  var err = 0;
  var changeWBS_TYPE = changeTypeToWBS_TYPE.get(varia.SP_NF_RAVL_TYPE_CHANGE);
  var changeWBS;
  var variaWBS;
  var wsh;
  
  var dbg_mail_sent = Context.SP_NF_RAVL_RA_SENDER_MAIL + " -> " + context.SP_NF_RAVL_RA_RECIPIEN_MAIL_ERR + " Variation to update not found...";
	  
  if (! changeWBS_TYPE instanceof string) return 9;
  // changeWBS_TYPE = "OpxActivityType".get(changeWBS_TYPE);

  // look for change & varia wbs 
  for (var a in varia.get("r.SP_RA_RAVL_ACT_RAVL.WORK-STRUCTURE"))
  {
    if (a.wbs_type.name == changeWBS_TYPE)
    {
      writeln (changeWBS_TYPE +">>"+ a.wbs_type);
      changeWBS = a;
    }
    if (a.wbs_type.name == "VAR_ACT")
    {
      writeln ("VAR_ACT>>"+a.wbs_type);
      variaWBS = a;
    }
  }
  
  withoutalerts
  {  
    // update change WBS desc
    if (changeWBS instanceof OpxActivity)
    {
      changeWBS.desc=varia.SP_NF_RAVL_ID_CHANGE_DESC_WBS;
      writeln("ravl_update_title>Updating change desc to>"+changeWBS.desc);
    }
    else
    {
      writeln("ravl_update_title>>"+changeWBS_TYPE+" desc not updated by "+varia.SP_AA_RAVL_RA_ACT_ID);
    }

    // propagate title under VAR_ACT
    if (variaWBS instanceof OpxActivity)
    {
      writeln("ravl_update_title>Updating VAR_ACT WBS "+variaWBS.desc);
      fromObject (variaWBS)
      {
        for (var a in "OpxActivity".findclass())
        {
          a.SP_AA_RAVL_I_CCR=varia.SP_NF_RAVL_ID_CHANGE_DESC;
          writeln("ravl_update_title>under VAR_ACT WBS>"+a.desc+a.wbs_type.name);
        }
      }
    }
    else
    {
      writeln("ravl_update_title>>"+varia.SP_AA_RAVL_RA_ACT_ID+" in merging or worksharing case!");
    }
    
    // update worksharing SP_AA_ACT_RAVL_CCR
    wsh = varia.SP_RA_RAVL_WORKSHARING1;
    if (wsh instanceof opxSP_PT_RAVL_WORKSHARING)
    {    
      // writeln("worksharing>>"+wsh);
      if (variaWBS instanceof OpxActivity)
      {
        writeln("ravl_update_title>Updating Worksharing>"+wsh.name);
        wsh.SP_AA_ACT_RAVL_CCR = varia.SP_NF_RAVL_ID_CHANGE_DESC
        writeln("ravl_update_title>Updating Worksharing>"+wsh.SP_AA_ACT_RAVL_CCR);
      }
    }
    else
    {
      //err = 9;
	  varia.callmacro("SP_AL_RAVL_VAR_MAIL_ERR_UPD_TITLE");
	  varia.SP_AA_RAVL_ERR_COMMENT="TTLUPD->DATA-ERR -> Mail Sent : " + dbg_mail_sent;
	  writeln(varia.SP_AA_RAVL_ERR_COMMENT);
	  err = 0;

    }
  }
  return err;
}

 
// History :
// Created by mpa 16/02/2017
// SP_JS_RAVL_USER_INTERFACE.ojs
// pour les vues Gantt mono product et multi product
// Modified  by ksk 16:16 04/12/2017, listing RA Act ID


method SP_NF_S_RAVL_LICENSE_LIST on opxActivity()
{
  var licenseList = "";
  var vec = new vector();
  var wsh = this.SP_RA_RAVL_WORKSHARING;
  
  if (wsh instanceof opxSP_PT_RAVL_WORKSHARING)
  {
    for (var varia in wsh.get("r.SP_RA_RAVL_WORKSHARING1.SP_PT_RAVL") where varia.SP_AA_S_RAVL_LICENSE != "")		
    {
      vec.push(varia.SP_AA_S_RAVL_LICENSE);
    }
    licenseList = vec.join(",");
  }
  return licenseList;
}
SP_NF_S_RAVL_LICENSE_LIST.exportfunction("","STRING");

function sp_ravl_read_ra_act_id()
{
  // this is an activity
  var res="";
  var vec = new vector();
  var wsh = this.SP_RA_RAVL_WORKSHARING;
  if (wsh instanceof opxSP_PT_RAVL_WORKSHARING)
  {
    for (var cur in wsh.get("r.SP_RA_RAVL_WORKSHARING1.SP_PT_RAVL")
      where cur.SP_AA_RAVL_RA_ACT_ID instanceof String )
    {
      vec.push(cur.SP_AA_RAVL_RA_ACT_ID);
    }
    res = vec.join(",");
  }
  return res;
}
sp_ravl_read_ra_act_id.exportfunction("","STRING");


// History :
// Created by mpa 16/02/2017
// SP_JS_RAVL_USER_INTERFACE.ojs
// pour les vues Gantt mono product et multi product
// Modified  by ksk 16:16 04/12/2017, listing RA Act ID


method SP_NF_S_RAVL_LICENSE_LIST on opxActivity()
{
  var licenseList = "";
  var vec = new vector();
  var wsh = this.SP_RA_RAVL_WORKSHARING;
  
  if (wsh instanceof opxSP_PT_RAVL_WORKSHARING)
  {
    for (var varia in wsh.get("r.SP_RA_RAVL_WORKSHARING1.SP_PT_RAVL") where varia.SP_AA_S_RAVL_LICENSE != "")		
    {
      vec.push(varia.SP_AA_S_RAVL_LICENSE);
    }
    licenseList = vec.join(",");
  }
  return licenseList;
}
SP_NF_S_RAVL_LICENSE_LIST.exportfunction("","STRING");

function sp_ravl_read_ra_act_id()
{
  // this is an activity
  var res="";
  var vec = new vector();
  var wsh = this.SP_RA_RAVL_WORKSHARING;
  if (wsh instanceof opxSP_PT_RAVL_WORKSHARING)
  {
    for (var cur in wsh.get("r.SP_RA_RAVL_WORKSHARING1.SP_PT_RAVL")
      where cur.SP_AA_RAVL_RA_ACT_ID instanceof String )
    {
      vec.push(cur.SP_AA_RAVL_RA_ACT_ID);
    }
    res = vec.join(",");
  }
  return res;
}
sp_ravl_read_ra_act_id.exportfunction("","STRING");


 
//  FILE    : SP_JS_RAVL_UTILITIES.ojs
// 
//  AUTHOR  : ksk
// 
//  VERSION : 2.1
// 
//  PURPOSE : RAVL kernel library
// 
//  HISTORY :
//	Modified by bcordel 2017/04/04 added RAVL_INFO_GETPRODUCT and RAVL_VART_GETATTRIBUTES
// Created  by ksk 14:10 30/11/2016 L

function ravl_trace_log(code)
{
  var d = new Date();
  var timestamp;
  var msg = new vector();
  var pro = context.callbooleanformula("$OPX2PRO_MODE");

  if (this instanceof opxSP_PT_RAVL 
  && this.SP_RA_RAVL_VARIA_CHANGE instanceof OpxSP_PT_RAVL_CHANGE)
  {
    msg.push(this.SP_RA_RAVL_VARIA_CHANGE.NAME);
    msg.push(this.SP_AA_RAVL_RA_ACT_ID);
  }
  if (code instanceof String)
  {
    msg.push(code);
  }
  if (pro)
  {
    timestamp = "["+d.toString("MMM DD YYYY HH:MM:SS")+"] - ";
    alert(timestamp + msg.join(" - "));
  }
  else
  {
    WriteToLog(msg.join(" - "));
  }
}

// Get an existing variation by RA Activity ID, arg::RA Activity ID, returns a variation or undefined object
function ravl_get_by_RAActivityID(actID)
{
  var cl="OpxSP_PT_RAVL".findclass();
  var ka = new keyattribute(cl, "SP_AA_RAVL_RA_ACT_ID",actID);
  var result=undefined;
  fromObject (ka)
  {
    for (var varia in cl)
    {
      result = varia;
      break;
    }
  }
  return result;
}

// return the product linked to a RAVL activity
method RAVL_INFO_GETPRODUCT on "OpxActivity"() {
	var o_Act=this;
	var product="";
	var v_ListElement= new Vector();
	var s_result = "";
	if (o_Act!=undefined && o_Act Instanceof OpxActivity)
	{         
		//Return attribut on Variation (Go to Activity -> Worksharing->Variation)
		var v_Variations= o_Act.SP_RA_RAVL_WORKSHARING.get("r.SP_RA_RAVL_WORKSHARING1.SP_PT_RAVL");
		for (Var o_Vrt in v_Variations)
		{
			v_ListElement.push(o_Vrt.SP_RA_RAVL_PRODUCT.printattribute());

		}
		s_result=v_ListElement.join(",");
	}

	return s_result;
}

function RAVL_VART_GETATTRIBUTES(VartAtt) {
	var Act=this;
	var ListElement= new Vector();
	var result = "";
	if (Act!=undefined && Act Instanceof OpxActivity)
	{         
		if( Act.CallBooleanFormula("SP_NF_B_IS_RAVL_ACT"))
		{
			if (VartAtt!=undefined && VartAtt!="")
			{
				//Return attribut on Variation (Go to Activity -> Worksharing<- Variation)
				var Variation= Act.SP_RA_RAVL_WORKSHARING.get("r.SP_RA_RAVL_WORKSHARING1.SP_PT_RAVL");
				for (Var Vrt in Variation)
					{
					if (Vrt.get(VartAtt)!=undefined && Vrt.get(VartAtt)!="")
					ListElement.push(Vrt.get(VartAtt));
				}
				result = ListElement.join(",");
			}
		}
	}
	return result;
}
RAVL_VART_GETATTRIBUTES.exportfunction({"STRING"},"STRING")

//  FILE    : SP_JS_RAVL_UTILITIES.ojs
// 
//  AUTHOR  : ksk
// 
//  VERSION : 2.1
// 
//  PURPOSE : RAVL kernel library
// 
//  HISTORY :
//	Modified by bcordel 2017/04/04 added RAVL_INFO_GETPRODUCT and RAVL_VART_GETATTRIBUTES
// Created  by ksk 14:10 30/11/2016 L

function ravl_trace_log(code)
{
  var d = new Date();
  var timestamp;
  var msg = new vector();
  var pro = context.callbooleanformula("$OPX2PRO_MODE");

  if (this instanceof opxSP_PT_RAVL 
  && this.SP_RA_RAVL_VARIA_CHANGE instanceof OpxSP_PT_RAVL_CHANGE)
  {
    msg.push(this.SP_RA_RAVL_VARIA_CHANGE.NAME);
    msg.push(this.SP_AA_RAVL_RA_ACT_ID);
  }
  if (code instanceof String)
  {
    msg.push(code);
  }
  if (pro)
  {
    timestamp = "["+d.toString("MMM DD YYYY HH:MM:SS")+"] - ";
    alert(timestamp + msg.join(" - "));
  }
  else
  {
    WriteToLog(msg.join(" - "));
  }
}

// Get an existing variation by RA Activity ID, arg::RA Activity ID, returns a variation or undefined object
function ravl_get_by_RAActivityID(actID)
{
  var cl="OpxSP_PT_RAVL".findclass();
  var ka = new keyattribute(cl, "SP_AA_RAVL_RA_ACT_ID",actID);
  var result=undefined;
  fromObject (ka)
  {
    for (var varia in cl)
    {
      result = varia;
      break;
    }
  }
  return result;
}

// return the product linked to a RAVL activity
method RAVL_INFO_GETPRODUCT on "OpxActivity"() {
	var o_Act=this;
	var product="";
	var v_ListElement= new Vector();
	var s_result = "";
	if (o_Act!=undefined && o_Act Instanceof OpxActivity)
	{         
		//Return attribut on Variation (Go to Activity -> Worksharing->Variation)
		var v_Variations= o_Act.SP_RA_RAVL_WORKSHARING.get("r.SP_RA_RAVL_WORKSHARING1.SP_PT_RAVL");
		for (Var o_Vrt in v_Variations)
		{
			v_ListElement.push(o_Vrt.SP_RA_RAVL_PRODUCT.printattribute());

		}
		s_result=v_ListElement.join(",");
	}

	return s_result;
}

function RAVL_VART_GETATTRIBUTES(VartAtt) {
	var Act=this;
	var ListElement= new Vector();
	var result = "";
	if (Act!=undefined && Act Instanceof OpxActivity)
	{         
		if( Act.CallBooleanFormula("SP_NF_B_IS_RAVL_ACT"))
		{
			if (VartAtt!=undefined && VartAtt!="")
			{
				//Return attribut on Variation (Go to Activity -> Worksharing<- Variation)
				var Variation= Act.SP_RA_RAVL_WORKSHARING.get("r.SP_RA_RAVL_WORKSHARING1.SP_PT_RAVL");
				for (Var Vrt in Variation)
					{
					if (Vrt.get(VartAtt)!=undefined && Vrt.get(VartAtt)!="")
					ListElement.push(Vrt.get(VartAtt));
				}
				result = ListElement.join(",");
			}
		}
	}
	return result;
}
RAVL_VART_GETATTRIBUTES.exportfunction({"STRING"},"STRING")

 
//  FILE    : SP_JS_RAVL_WORKSHARING.ojs
//
//  AUTHOR  : ksk
//
//  VERSION : 2.0
//
//  PURPOSE : RAVL Worksharing module
//
//  DEPENDENCY : SP_JS_RAVL_CHANGE
//
//  HISTORY :
// Created  by ksk 12:17 30/01/2017, refactoring legacy code..p
// Created  by ksk 09:17 07/06/2017, new country ordering
// Modified  by ksk 14:02 20/07/2017, new submission Mode
// Modified  by ksk 15:49 23/11/2017, new Order DIRECT USA CAN

function ravl_read_worksharing_ID(templateRule)
{
  // this is a variation
  var res = new vector(this.SP_AA_RAVL_RA_PRJ);
  // var templateRule = ravlTemplatesHT.get(this.ravl_read_template_rule() );
  var submissionMode = this.SP_AA_RAVL_SUB_MODE;
  
  // retrieving template name from the rule
  if (! templateRule instanceof OpxSP_PT_RAVL_CAT_TEMPLATE)
  {
    return 1;
  }
  
  if (submissionMode == "Worksharing" || submissionMode == "Product Merge")
  {
    // LONG WSH identifier
    res.push(this.SP_RA_RAVL_COUNTRY.NAME);
    res.push(templateRule.NAME);
    res.push(this.SP_NF_RAVL_ID);
    res.push(this.SP_NF_RAVL_IO_LABEL_COR);
    if (this.SP_AA_RAVL_LIODA instanceof Date) res.push(this.SP_AA_RAVL_LIODA.toString("AA/MM/JJ") );
    res.push(this.SP_AA_RAVL_VARIATION_TYPE2);
    (this.SP_AA_RAVL_PROC_TYPE1 != "") ? res.push(this.SP_AA_RAVL_PROC_TYPE1) : res.push("National");
    if (this.SP_AA_RAVL_MEMBER_STATE2 != "") res.push(this.SP_AA_RAVL_MEMBER_STATE2);
    
  }
  else
  {
    // SHORT WSH identifier
    res.push(templateRule.NAME);
    res.push(this.SP_AA_RAVL_RA_ACT_ID);
    
  }
  
  return res.join(".");
}

function ravl_display_worksharing_ID()
{
  // this is a variation
  var ravlTemplatesHT = new HashTable("STRING");
  var err = ravlTemplatesHT.ravl_set_templateRulesHT();
  var rule = ravlTemplatesHT.get(this.ravl_read_template_rule() );
  var res = this.ravl_read_worksharing_ID(rule);
  
  return (res instanceof String) ? res : "Template not found!";
}
ravl_display_worksharing_ID.exportfunction("","STRING");


function ravl_worsharing_staging()
{
  // this is a vector of variations
  var ravlTemplatesHT = new HashTable("STRING");
  var err = ravlTemplatesHT.ravl_set_templateRulesHT();
  var rule;
  var wshID;
  var wsh;
  
  // From the variations list, create or modify the wsh 
  for (var varia in this)
  {
    rule = ravlTemplatesHT.get(varia.ravl_read_template_rule() );
    wshID = varia.ravl_read_worksharing_ID(rule);
    
    if (wshID instanceof String 
    && varia.SP_RA_RAVL_VARIA_CHANGE instanceof OpxSP_PT_RAVL_CHANGE)
    {
      wsh = "opxSP_PT_RAVL_WORKSHARING".get(wshID);
      
      // caching the plan order into varia
      varia.SP_AA_RAVL_VAR_PLAN_ORDER = rule.SP_AA_RAVL_VAR_PLAN_ORDER;
      
      if (wsh instanceof opxSP_PT_RAVL_WORKSHARING)
      {
        // merging mode - update
        wsh.ItemplateRule = rule;
        varia.SP_RA_RAVL_WORKSHARING1 = wsh;
        wsh.ravl_worsharing_modify();
      }
      else
      {
        // creation
        wsh = varia.ravl_worsharing_create(wshID);
        
        if (wsh instanceof opxSP_PT_RAVL_WORKSHARING)
        {
          wsh.ItemplateRule = rule;
          varia.SP_RA_RAVL_WORKSHARING1 = wsh;
          wsh.SP_RA_RAVL_WSH_CHANGE = varia.SP_RA_RAVL_VARIA_CHANGE;
        }
        else
        {
          varia.ravl_trace_log("RWC - Fatal Error when creating the worksharing");
          varia.SP_AA_S_RAVL_RECOVERY_STATUS = "rejected";
        }
        
        varia.ravl_trace_log("wsh creation>>"+wsh);
      }
    }
    else
    {
      varia.ravl_trace_log("RWS - Template not found");
      // reject and alert mail?
      varia.SP_AA_S_RAVL_RECOVERY_STATUS = "rejected";
    }
  }
  
}

function ravl_worsharing_create(wshID)
{
  // this is a variation
  var wsh;
  // var change = this.SP_RA_RAVL_VARIA_CHANGE;
  // if (! change instanceof OpxSP_PT_RAVL_CHANGE)
  // {
  // return wsh;
  // }
  var changeGrouping = new vector(this.SP_NF_RAVL_ID, this.SP_AA_RAVL_VARIATION_TITLE);
  
  var countryCat;
  (this.SP_NF_RAVL_IO_LABEL == "IO") ? countryCat = this.SP_AA_S_RAVL_COUNTRY_CAT : countryCat = this.SP_AA_RAVL_LCC_COUNTRY_CAT;
  
  // var countryGrouping = new vector(this.SP_AA_RAVL_VAR_PLAN_ORDER +"-"+this.SP_RA_RAVL_COUNTRY.NAME
  // ,this.SP_AA_RAVL_VARIATION_TYPE2
  // );
  var countryGrouping = this.ravl_read_ordering_country();
  
  if (countryCat instanceof String) countryGrouping.push(countryCat);
  
  // create new wsh
  wsh = new opxSP_PT_RAVL_WORKSHARING(
  "NAME",wshID
  ,"FILE","COM_RAVL"
  ,"SP_AA_ACT_RAVL_CCR",changeGrouping.join(" - ")
  ,"SP_AA_ACT_RAVL_GANTT_ORDER",this.ravl_read_submission_process_branch()
  ,"SP_AA_ACT_RAVL_COUNTRY",countryGrouping.join(" - ")
  ,"SP_AA_RAVL_PRODUCT",this.SP_NF_S_RAVL_PRODUCT_NAME
  ,"SP_AA_RAVL_PRODUCT_LIST",this.SP_NF_S_RAVL_PRODUCT_NAME
  ,"SP_AA_RAVL_CCR",this.SP_NF_RAVL_ID
  ,"SP_AA_RAVL_PROJECT",this.SP_AA_RAVL_RA_PRJ
  );
  
  /*
  if (wsh instanceof opxSP_PT_RAVL_WORKSHARING)
      // && change instanceof OpxSP_PT_RAVL_CHANGE)
  {
    this.SP_RA_RAVL_WORKSHARING1 = wsh;
    wsh.SP_RA_RAVL_WSH_CHANGE = change;
  }
  else
  {
    this.ravl_trace_log("RWC - Fatal Error when creating the worksharing");
    return undefined;
  }
  */
  return wsh;
}

function ravl_worsharing_product()
{
  // this is a wsh
  var pList = new vector();
  
  for (var varia in this.get("r.SP_RA_RAVL_WORKSHARING1.SP_PT_RAVL"))
  {
    pList.push(varia.SP_NF_S_RAVL_PRODUCT_NAME);
  }
  
  this.ravl_worsharing_product_modify(pList);
}

function ravl_worsharing_product_modify(pList)
{
  // this is a wsh
  if(pList instanceof Vector && pList.length>1)
  {
    pList = pList.removeduplicates().sort("<");
    this.SP_AA_RAVL_PRODUCT_LIST = pList.join(",");
    
    (pList.length>1) ? this.SP_AA_RAVL_PRODUCT = ". " + pList.join(" - ") : this.SP_AA_RAVL_PRODUCT = pList[0];
  }
  else if (pList instanceof Vector && pList.length == 1)
  {
    // Not Merging case, mono product update
    this.SP_AA_RAVL_PRODUCT_LIST = pList[0];
    this.SP_AA_RAVL_PRODUCT = pList[0];
  }
}

function ravl_worsharing_modify()
{
  // this is a wsh
  this.ravl_worsharing_product();
  // diffuse on the wshared activities
  this.ravl_worsharing_diffuse()
}

function ravl_worsharing_diffuse()
{
  // this is a wsh
  // diffusing on the wshared activities
  
  for (var a in this.get("r.SP_RA_RAVL_WORKSHARING.WORK-STRUCTURE"))
  {
    a.SP_AA_RAVL_I_CCR = this.SP_AA_ACT_RAVL_CCR;
    a.SP_AA_RAVL_I_GANTT_ORDER = this.SP_AA_ACT_RAVL_GANTT_ORDER;
    a.SP_AA_RAVL_I_COUNTRY = this.SP_AA_ACT_RAVL_COUNTRY;
    a.SP_AA_RAVL_I_PRODUCT_LIST = this.SP_AA_RAVL_PRODUCT_LIST;
    

  }
  
}

function ravl_worsharing_has_plan()
{
  // this is a wsh
  var res = false;
  for (var a in this.get("r.SP_RA_RAVL_WORKSHARING.WORK-STRUCTURE") 
    where a.WBS_TYPE instanceof OpxWbsType && a.WBS_TYPE.NAME == "VAR_TEMPLATE"
  && ! a.get("?EMPTY") )
  {
    res = true;
    break;
  }
  return res;
}

function ravl_read_ordering_country()
{
  // this is a variation
  var part = "";
  
  if("USA\|CAN".test(this.SP_RA_RAVL_COUNTRY.SP_AA_S_CL_COUNTRY_CODE)
    && "DIRECT".test(this.ravl_read_submission_process())
    && ! this.ravl_read_isCoR(""))
  {
    part = "1 -"+this.SP_RA_RAVL_COUNTRY.NAME;
  }
  else
  {
    part = this.SP_AA_RAVL_VAR_PLAN_ORDER +"-"+this.SP_RA_RAVL_COUNTRY.NAME;
  }
  
  return new vector(part,this.SP_AA_RAVL_VARIATION_TYPE2);
}


//  FILE    : SP_JS_RAVL_WORKSHARING.ojs
//
//  AUTHOR  : ksk
//
//  VERSION : 2.0
//
//  PURPOSE : RAVL Worksharing module
//
//  DEPENDENCY : SP_JS_RAVL_CHANGE
//
//  HISTORY :
// Created  by ksk 12:17 30/01/2017, refactoring legacy code..p
// Created  by ksk 09:17 07/06/2017, new country ordering
// Modified  by ksk 14:02 20/07/2017, new submission Mode
// Modified  by ksk 15:49 23/11/2017, new Order DIRECT USA CAN

function ravl_read_worksharing_ID(templateRule)
{
  // this is a variation
  var res = new vector(this.SP_AA_RAVL_RA_PRJ);
  // var templateRule = ravlTemplatesHT.get(this.ravl_read_template_rule() );
  var submissionMode = this.SP_AA_RAVL_SUB_MODE;
  
  // retrieving template name from the rule
  if (! templateRule instanceof OpxSP_PT_RAVL_CAT_TEMPLATE)
  {
    return 1;
  }
  
  if (submissionMode == "Worksharing" || submissionMode == "Product Merge")
  {
    // LONG WSH identifier
    res.push(this.SP_RA_RAVL_COUNTRY.NAME);
    res.push(templateRule.NAME);
    res.push(this.SP_NF_RAVL_ID);
    res.push(this.SP_NF_RAVL_IO_LABEL_COR);
    if (this.SP_AA_RAVL_LIODA instanceof Date) res.push(this.SP_AA_RAVL_LIODA.toString("AA/MM/JJ") );
    res.push(this.SP_AA_RAVL_VARIATION_TYPE2);
    (this.SP_AA_RAVL_PROC_TYPE1 != "") ? res.push(this.SP_AA_RAVL_PROC_TYPE1) : res.push("National");
    if (this.SP_AA_RAVL_MEMBER_STATE2 != "") res.push(this.SP_AA_RAVL_MEMBER_STATE2);
    
  }
  else
  {
    // SHORT WSH identifier
    res.push(templateRule.NAME);
    res.push(this.SP_AA_RAVL_RA_ACT_ID);
    
  }
  
  return res.join(".");
}

function ravl_display_worksharing_ID()
{
  // this is a variation
  var ravlTemplatesHT = new HashTable("STRING");
  var err = ravlTemplatesHT.ravl_set_templateRulesHT();
  var rule = ravlTemplatesHT.get(this.ravl_read_template_rule() );
  var res = this.ravl_read_worksharing_ID(rule);
  
  return (res instanceof String) ? res : "Template not found!";
}
ravl_display_worksharing_ID.exportfunction("","STRING");


function ravl_worsharing_staging()
{
  // this is a vector of variations
  var ravlTemplatesHT = new HashTable("STRING");
  var err = ravlTemplatesHT.ravl_set_templateRulesHT();
  var rule;
  var wshID;
  var wsh;
  
  // From the variations list, create or modify the wsh 
  for (var varia in this)
  {
    rule = ravlTemplatesHT.get(varia.ravl_read_template_rule() );
    wshID = varia.ravl_read_worksharing_ID(rule);
    
    if (wshID instanceof String 
    && varia.SP_RA_RAVL_VARIA_CHANGE instanceof OpxSP_PT_RAVL_CHANGE)
    {
      wsh = "opxSP_PT_RAVL_WORKSHARING".get(wshID);
      
      // caching the plan order into varia
      varia.SP_AA_RAVL_VAR_PLAN_ORDER = rule.SP_AA_RAVL_VAR_PLAN_ORDER;
      
      if (wsh instanceof opxSP_PT_RAVL_WORKSHARING)
      {
        // merging mode - update
        wsh.ItemplateRule = rule;
        varia.SP_RA_RAVL_WORKSHARING1 = wsh;
        wsh.ravl_worsharing_modify();
      }
      else
      {
        // creation
        wsh = varia.ravl_worsharing_create(wshID);
        
        if (wsh instanceof opxSP_PT_RAVL_WORKSHARING)
        {
          wsh.ItemplateRule = rule;
          varia.SP_RA_RAVL_WORKSHARING1 = wsh;
          wsh.SP_RA_RAVL_WSH_CHANGE = varia.SP_RA_RAVL_VARIA_CHANGE;
        }
        else
        {
          varia.ravl_trace_log("RWC - Fatal Error when creating the worksharing");
          varia.SP_AA_S_RAVL_RECOVERY_STATUS = "rejected";
        }
        
        varia.ravl_trace_log("wsh creation>>"+wsh);
      }
    }
    else
    {
      varia.ravl_trace_log("RWS - Template not found");
      // reject and alert mail?
      varia.SP_AA_S_RAVL_RECOVERY_STATUS = "rejected";
    }
  }
  
}

function ravl_worsharing_create(wshID)
{
  // this is a variation
  var wsh;
  // var change = this.SP_RA_RAVL_VARIA_CHANGE;
  // if (! change instanceof OpxSP_PT_RAVL_CHANGE)
  // {
  // return wsh;
  // }
  var changeGrouping = new vector(this.SP_NF_RAVL_ID, this.SP_AA_RAVL_VARIATION_TITLE);
  
  var countryCat;
  (this.SP_NF_RAVL_IO_LABEL == "IO") ? countryCat = this.SP_AA_S_RAVL_COUNTRY_CAT : countryCat = this.SP_AA_RAVL_LCC_COUNTRY_CAT;
  
  // var countryGrouping = new vector(this.SP_AA_RAVL_VAR_PLAN_ORDER +"-"+this.SP_RA_RAVL_COUNTRY.NAME
  // ,this.SP_AA_RAVL_VARIATION_TYPE2
  // );
  var countryGrouping = this.ravl_read_ordering_country();
  
  if (countryCat instanceof String) countryGrouping.push(countryCat);
  
  // create new wsh
  wsh = new opxSP_PT_RAVL_WORKSHARING(
  "NAME",wshID
  ,"FILE","COM_RAVL"
  ,"SP_AA_ACT_RAVL_CCR",changeGrouping.join(" - ")
  ,"SP_AA_ACT_RAVL_GANTT_ORDER",this.ravl_read_submission_process_branch()
  ,"SP_AA_ACT_RAVL_COUNTRY",countryGrouping.join(" - ")
  ,"SP_AA_RAVL_PRODUCT",this.SP_NF_S_RAVL_PRODUCT_NAME
  ,"SP_AA_RAVL_PRODUCT_LIST",this.SP_NF_S_RAVL_PRODUCT_NAME
  ,"SP_AA_RAVL_CCR",this.SP_NF_RAVL_ID
  ,"SP_AA_RAVL_PROJECT",this.SP_AA_RAVL_RA_PRJ
  );
  
  /*
  if (wsh instanceof opxSP_PT_RAVL_WORKSHARING)
      // && change instanceof OpxSP_PT_RAVL_CHANGE)
  {
    this.SP_RA_RAVL_WORKSHARING1 = wsh;
    wsh.SP_RA_RAVL_WSH_CHANGE = change;
  }
  else
  {
    this.ravl_trace_log("RWC - Fatal Error when creating the worksharing");
    return undefined;
  }
  */
  return wsh;
}

function ravl_worsharing_product()
{
  // this is a wsh
  var pList = new vector();
  
  for (var varia in this.get("r.SP_RA_RAVL_WORKSHARING1.SP_PT_RAVL"))
  {
    pList.push(varia.SP_NF_S_RAVL_PRODUCT_NAME);
  }
  
  this.ravl_worsharing_product_modify(pList);
}

function ravl_worsharing_product_modify(pList)
{
  // this is a wsh
  if(pList instanceof Vector && pList.length>1)
  {
    pList = pList.removeduplicates().sort("<");
    this.SP_AA_RAVL_PRODUCT_LIST = pList.join(",");
    
    (pList.length>1) ? this.SP_AA_RAVL_PRODUCT = ". " + pList.join(" - ") : this.SP_AA_RAVL_PRODUCT = pList[0];
  }
  else if (pList instanceof Vector && pList.length == 1)
  {
    // Not Merging case, mono product update
    this.SP_AA_RAVL_PRODUCT_LIST = pList[0];
    this.SP_AA_RAVL_PRODUCT = pList[0];
  }
}

function ravl_worsharing_modify()
{
  // this is a wsh
  this.ravl_worsharing_product();
  // diffuse on the wshared activities
  this.ravl_worsharing_diffuse()
}

function ravl_worsharing_diffuse()
{
  // this is a wsh
  // diffusing on the wshared activities
  
  for (var a in this.get("r.SP_RA_RAVL_WORKSHARING.WORK-STRUCTURE"))
  {
    a.SP_AA_RAVL_I_CCR = this.SP_AA_ACT_RAVL_CCR;
    a.SP_AA_RAVL_I_GANTT_ORDER = this.SP_AA_ACT_RAVL_GANTT_ORDER;
    a.SP_AA_RAVL_I_COUNTRY = this.SP_AA_ACT_RAVL_COUNTRY;
    a.SP_AA_RAVL_I_PRODUCT_LIST = this.SP_AA_RAVL_PRODUCT_LIST;
    

  }
  
}

function ravl_worsharing_has_plan()
{
  // this is a wsh
  var res = false;
  for (var a in this.get("r.SP_RA_RAVL_WORKSHARING.WORK-STRUCTURE") 
    where a.WBS_TYPE instanceof OpxWbsType && a.WBS_TYPE.NAME == "VAR_TEMPLATE"
  && ! a.get("?EMPTY") )
  {
    res = true;
    break;
  }
  return res;
}

function ravl_read_ordering_country()
{
  // this is a variation
  var part = "";
  
  if("USA\|CAN".test(this.SP_RA_RAVL_COUNTRY.SP_AA_S_CL_COUNTRY_CODE)
    && "DIRECT".test(this.ravl_read_submission_process())
    && ! this.ravl_read_isCoR(""))
  {
    part = "1 -"+this.SP_RA_RAVL_COUNTRY.NAME;
  }
  else
  {
    part = this.SP_AA_RAVL_VAR_PLAN_ORDER +"-"+this.SP_RA_RAVL_COUNTRY.NAME;
  }
  
  return new vector(part,this.SP_AA_RAVL_VARIATION_TYPE2);
}


 
//  FILE    : SP_JS_RAVL_WS.ojs
// 
//  AUTHOR  : BULL ksk 
// 
//  VERSION : v1.0
// 
//  PURPOSE : Web services : SOAP 
// 
//  HISTORY :
//  15:06 12/11/2012 : creation
//  16:42 06/12/2016 : user V6
//  Modified  by ksk 15:28 22/05/2017 verbosity

// Web services
writeln(">>> Loading RAVL OPX2 Web Services : Import Variation Operations");

// Web Service URL declaration
var RAVLSoapURL = new OPXSoapUrl("NAME","OPX2_SOAP_RAVL","DEFAULT_USERNAME","INTRANET_RAVL");

// Operation and Types
var RAVLSchema="OPXXmlSchema".findclass().get("SP_XSD_RAVL");

// Operation code

function RAVLimportVariations(xmldoc) 
{
  alert(xmldoc);
  // writeln("xmldoc.Option>>"+xmldoc.Option);
  // Run import from regfast BLOC
  var res = ravl_run_import();
  
  // One way message Exchange pattern  unecessary following code
  var result = new finishedImportVariations();
  // result.Result = 1;
  result.Comment = "ravl_run_import>>" + res.tostring();
  
  return result;
}



//Web service generation

RAVLimportVariations.exportwebdocument(RAVLSoapURL,"ImportVariations",
RAVLSchema.getxmltype("runImportVariations"),
RAVLSchema.getxmltype("finishedImportVariations"),
"",
true);


//  FILE    : SP_JS_RAVL_WS.ojs
// 
//  AUTHOR  : BULL ksk 
// 
//  VERSION : v1.0
// 
//  PURPOSE : Web services : SOAP 
// 
//  HISTORY :
//  15:06 12/11/2012 : creation
//  16:42 06/12/2016 : user V6
//  Modified  by ksk 15:28 22/05/2017 verbosity

// Web services
writeln(">>> Loading RAVL OPX2 Web Services : Import Variation Operations");

// Web Service URL declaration
var RAVLSoapURL = new OPXSoapUrl("NAME","OPX2_SOAP_RAVL","DEFAULT_USERNAME","INTRANET_RAVL");

// Operation and Types
var RAVLSchema="OPXXmlSchema".findclass().get("SP_XSD_RAVL");

// Operation code

function RAVLimportVariations(xmldoc) 
{
  alert(xmldoc);
  // writeln("xmldoc.Option>>"+xmldoc.Option);
  // Run import from regfast BLOC
  var res = ravl_run_import();
  
  // One way message Exchange pattern  unecessary following code
  var result = new finishedImportVariations();
  // result.Result = 1;
  result.Comment = "ravl_run_import>>" + res.tostring();
  
  return result;
}



//Web service generation

RAVLimportVariations.exportwebdocument(RAVLSoapURL,"ImportVariations",
RAVLSchema.getxmltype("runImportVariations"),
RAVLSchema.getxmltype("finishedImportVariations"),
"",
true);


 
//	SCRIPT NAME : SP_JS_RDD_AS_MET_DRI_VAL
//
//  PURPOSE : Script used for AS Metrics driver data recovery in V1.11.0.0 (RITM1032555)
//
//	VERSION HISTORY :
//		02/05/19 - MAG : Creation of sp_js_rdd_as_met_box1,sp_js_rdd_as_met_box2 & sp_js_rdd_as_met_box3 to recover the data on Activity for new way of working
//		13/05/19 - MAG : Creation of sp_js_rdd_remove_old_ard_equation_metrics to delete equation generated with old ard equations




function sp_js_rdd_as_met_box1()
{

	var res_list=new vector();
	Var res_BIOC="AS-BIOC";
	var act_res_BIOC="Opxresource".get(res_BIOC);
	var res_OS="AS-OS";
	var act_res_OS="Opxresource".get(res_OS);
	var res_IMM="AS-IMM";
	var act_res_IMM="Opxresource".get(res_IMM);
	var res_MICVIRO="AS-MICVIRO";
	var act_res_MICVIRO="Opxresource".get(res_MICVIRO);
	var res_RTAP="AS-RTAP";
	var act_res_RTAP="Opxresource".get(res_RTAP);
	var act_count=0;
	var vErrors = new vector();

	for ( var act in "opxactivity" where act.SP_AA_ARD_BIOC_ACTIVATE || act.SP_AA_ARD_OS_ACTIVATE || act.SP_AA_ARD_IMM_ACTIVATE || act.SP_AA_ARD_MICVIRO_ACTIVATE || act.SP_AA_ARD_RTAP_ACTIVATE)
	{
		try
		{
		
			var final_res_list="";
		  
			if (act.SP_AA_ARD_BIOC_ACTIVATE)
			{
				res_list.PUSH(act_res_BIOC.name);
			}
			if (act.SP_AA_ARD_OS_ACTIVATE)
			{
				res_list.PUSH(act_res_OS.name);
			}
			if (act.SP_AA_ARD_IMM_ACTIVATE)
			{
				res_list.PUSH(act_res_IMM.name);
			}
			if (act.SP_AA_ARD_MICVIRO_ACTIVATE)
			{
				res_list.PUSH(act_res_MICVIRO.name);
			}
			if (act.SP_AA_ARD_RTAP_ACTIVATE)
			{
				res_list.PUSH(act_res_RTAP.name);
			}
			final_res_list=res_list.join(",");
			act.SP_RING_AS_MET_RES_LIST=final_res_list;
			res_list.clear();
			act_count++;
		}
		
		catch(error e)
				{
					vErrors.push("Error while performing datarecovery As metrics Box1 Resources on actiivty "+act+" : "+e);
				}
	}
	if (vErrors.length>0)
	{
		
		writeln("DATA RECOVERY (AS Mectrics) - End of datarecovery As metrics Box1 Resources on actiivty with errors :");
		for (var error in vErrors) 
		{
			writeln(error);
		}
		alert("END OF DATA RECOVERY with "+vErrors.length+" errors ");
	}
	else 
	{
		writeln("DATA RECOVERY (AS Metrics) - End of datarecovery As metrics Box1 Resources on actiivty with no error : " +act_count);
		alert("END OF DATA RECOVERY : " +act_count +" BOX1 Resource restored");
	}
	
}


function sp_js_rdd_as_met_box2()
{
	Var o_res_BIOC="AS-BIOC";
	var o_act_res_BIOC="Opxresource".get(o_res_BIOC);
	var o_res_OS="AS-OS";
	var o_act_res_OS="Opxresource".get(o_res_OS);
	var o_res_IMM="AS-IMM";
	var o_act_res_IMM="Opxresource".get(o_res_IMM);
	var o_res_MICVIRO="AS-MICVIRO";
	var o_act_res_MICVIRO="Opxresource".get(o_res_MICVIRO);
	var act_count=0;
	var vErrors = new vector();
	for ( var o_act in "opxactivity" where o_act.SP_AA_ARD_BIOC_COMPLEXITY != "" || o_act.SP_AA_ARD_IMM_COMPLEXITY != "" || o_act.SP_AA_ARD_MICVIRO_COMPLEXITY != "" || o_act.SP_AA_ARD_OS_COMPLEXITY != "" )
	{
		try
		{
			if (o_act.SP_AA_ARD_BIOC_COMPLEXITY != "")
			{
				new opxSP_PT_AS_MET_DRI_VAL("Resource",o_act_res_BIOC.name,"Complexity",o_act.SP_AA_ARD_BIOC_COMPLEXITY,"SP_RA_AS_MET_ACT",o_act.ID,"FILE",o_act.SP_NF_S_PROJECT_NAME);
			}
			if (o_act.SP_AA_ARD_IMM_COMPLEXITY != "")
			{
				new opxSP_PT_AS_MET_DRI_VAL("Resource",o_act_res_IMM.name,"Complexity",o_act.SP_AA_ARD_IMM_COMPLEXITY,"SP_RA_AS_MET_ACT",o_act.ID,"FILE",o_act.SP_NF_S_PROJECT_NAME);
			}
			if (o_act.SP_AA_ARD_MICVIRO_COMPLEXITY != "")
			{
				new opxSP_PT_AS_MET_DRI_VAL("Resource",o_act_res_MICVIRO.name,"Complexity",o_act.SP_AA_ARD_MICVIRO_COMPLEXITY,"SP_RA_AS_MET_ACT",o_act.ID,"FILE",o_act.SP_NF_S_PROJECT_NAME);
			}
			if (o_act.SP_AA_ARD_OS_COMPLEXITY != "")
			{
				new opxSP_PT_AS_MET_DRI_VAL("Resource",o_act_res_OS.name,"Complexity",o_act.SP_AA_ARD_OS_COMPLEXITY,"SP_RA_AS_MET_ACT",o_act.ID,"FILE",o_act.SP_NF_S_PROJECT_NAME);
			}
			act_count++;
		}
		catch(error e)
		{
			vErrors.push("Error while performing datarecovery As metrics Box1 Resources on actiivty "+o_act+" : "+e);
		}
		
		
	}
	if (vErrors.length>0)
	{
		
		writeln("DATA RECOVERY (AS Mectrics) - End of datarecovery As metrics Box2 Resources Complexity on actiivty with errors :");
		for (var error in vErrors) 
		{
			writeln(error);
		}
		alert("END OF DATA RECOVERY with "+vErrors.length+" errors ");
	}
	else 
	{
		writeln("DATA RECOVERY (AS Metrics) - End of datarecovery As metrics Box2 Resources on actiivty with no error : " +act_count);
		alert("END OF DATA RECOVERY : " +act_count +" BOX2 Resource & Complexity restored");
	}

}

function sp_js_rdd_as_met_box3()
{
	Var o_res_BIOC="AS-BIOC";
	var o_act_res_BIOC="Opxresource".get(o_res_BIOC);
	var o_res_OS="AS-OS";
	var o_act_res_OS="Opxresource".get(o_res_OS);
	var o_res_IMM="AS-IMM";
	var o_act_res_IMM="Opxresource".get(o_res_IMM);
	var o_res_MICVIRO="AS-MICVIRO";
	var o_act_res_MICVIRO="Opxresource".get(o_res_MICVIRO);
	var act_count=0;
	var vErrors = new vector();
	
		for (var o_act in "OpxActivity" 
		  where o_act.CallBooleanFormula("SP_AA_ARD_NB_TESTS_BIOC>0 or SP_AA_ARD_NB_LOTS_BIOC>0 or SP_AA_ARD_NB_SAMPLE_LOT_BIOC>0")  ) 
		{
			try
			{
				new opxSP_PT_AS_MET_DRI_VAL("Resource",o_act_res_BIOC.name,"N  Tests",o_act.SP_AA_ARD_NB_TESTS_BIOC,"N  Lots",o_act.SP_AA_ARD_NB_LOTS_BIOC,"N  Sample / Lot",o_act.SP_AA_ARD_NB_SAMPLE_LOT_BIOC,"FILE",o_act.SP_NF_S_PROJECT_NAME,"SP_RA_AS_MET_ACT",o_act.ID);
			}
			catch(error e)
			{
				vErrors.push("Error while performing datarecovery As metrics Box1 Resources on actiivty "+o_act+" : "+e);
			}
		}
		for (var o_act in "OpxActivity" 
		  where o_act.CallBooleanFormula("SP_AA_ARD_NB_TESTS_OS>0 or SP_AA_ARD_NB_LOTS_OS>0 or SP_AA_ARD_NB_SAMPLE_LOT_OS>0")  ) 
		{
			try
			{
				new opxSP_PT_AS_MET_DRI_VAL("Resource",o_act_res_OS.name,"N  Tests",o_act.SP_AA_ARD_NB_TESTS_OS,"N  Lots",o_act.SP_AA_ARD_NB_LOTS_OS,"N  Sample / Lot",o_act.SP_AA_ARD_NB_SAMPLE_LOT_OS,"FILE",o_act.SP_NF_S_PROJECT_NAME,"SP_RA_AS_MET_ACT",o_act.ID);
			}
			catch(error e)
			{
				vErrors.push("Error while performing datarecovery As metrics Box1 Resources on actiivty "+o_act+" : "+e);
			}
		}
		for (var o_act in "OpxActivity" 
		  where o_act.CallBooleanFormula("SP_AA_ARD_NB_TESTS_IMM>0 or SP_AA_ARD_NB_LOTS_IMM>0 or SP_AA_ARD_NB_SAMPLE_LOT_IMM>0")  ) 
		{
			try
			{
				new opxSP_PT_AS_MET_DRI_VAL("Resource",o_act_res_IMM.name,"N  Tests",o_act.SP_AA_ARD_NB_TESTS_IMM,"N  Lots",o_act.SP_AA_ARD_NB_LOTS_IMM,"N  Sample / Lot",o_act.SP_AA_ARD_NB_SAMPLE_LOT_IMM,"FILE",o_act.SP_NF_S_PROJECT_NAME,"SP_RA_AS_MET_ACT",o_act.ID);
			}
			catch(error e)
			{
				vErrors.push("Error while performing datarecovery As metrics Box1 Resources on actiivty "+o_act+" : "+e);
			}
		}
			for (var o_act in "OpxActivity" 
		  where o_act.CallBooleanFormula("SP_AA_ARD_NB_TESTS_MICVIRO>0 or SP_AA_ARD_NB_LOTS_MICVIRO>0 or SP_AA_ARD_SAMPLE_LOT_MICVIRO>0")  ) 
		{
			try
			{
				new opxSP_PT_AS_MET_DRI_VAL("Resource",o_act_res_MICVIRO.name,"N  Tests",o_act.SP_AA_ARD_NB_TESTS_MICVIRO,"N  Lots",o_act.SP_AA_ARD_NB_LOTS_MICVIRO,"N  Sample / Lot",o_act.SP_AA_ARD_SAMPLE_LOT_MICVIRO,"FILE",o_act.SP_NF_S_PROJECT_NAME,"SP_RA_AS_MET_ACT",o_act.ID);
			}
			catch(error e)
			{
				vErrors.push("Error while performing datarecovery As metrics Box1 Resources on actiivty "+o_act+" : "+e);
			}
		}
	
	if (vErrors.length>0)
	{
		
		writeln("DATA RECOVERY (AS Mectrics) - End of datarecovery As metrics Box3 Resources Driver Values on actiivty with errors :");
		for (var error in vErrors) 
		{
			writeln(error);
		}
		alert("END OF DATA RECOVERY with "+vErrors.length+" errors ");
	}
	else 
	{
		writeln("DATA RECOVERY (AS Metrics) - End of datarecovery As metrics Box3 Resources Driver Values on actiivty with no error : ");
		alert("END OF DATA RECOVERY : BOX3 Resources Driver Values restored");
	}
	
}

function sp_js_rdd_remove_old_ard_equation_metrics()
{
	writeln(char(10)+"Start of sp_js_rdd_remove_old_ard_equation_metrics");
	var vYearStart = context.CallDateFormula ("PERIOD_START($DATE_OF_THE_DAY,\"YEAR\",-1)");
	var vErrors = new vector();
	var vNumDeleted=0;
	for(var vProject in opxProject where vProject.STATE=="Active")
	{
		fromobject(vProject)
		{
			for (var vPlannedHour in "OpxALLOCATION" where vPlannedHour.CallBooleanFormula("SP_RA_METRIC.name in (\"SP_ARD_ANALYSYS_REPORT*\",\"SP_ARD_ASCEPTIC_TESTING*\",\"SP_ARD_ASSAY_DEV_DIFFICULT*\",\"SP_ARD_ASSAY_QUAL*\",\"SP_ARD_ASSAY_TRANSFER*\",\"SP_ARD_ASSAY_VAL*\",\"SP_ARD_BATCH_STUDY*\",\"SP_ARD_BULK_TESTING*\",\"SP_ARD_CHAR*\",\"SP_ARD_COMP_TESTING*\",\"SP_ARD_ASSAY_DEV_EASY*\",\"SP_ARD_ASSAY_DEV_MEDIUM*\",\"SP_ARD_CTA_ANNUAL_REPORT*\",\"SP_ARD_CTA_AUTHOR_TRIAL*\",\"SP_ARD_CTA_AUTHOR_TRIAL*\",\"SP_ARD_DEMO_CHAR*\",\"SP_ARD_DEMO_TESTING*\",\"SP_ARD_END_CHAR*\",\"SP_ARD_END_TESTING*\",\"SP_ARD_FP_TESTING*\",\"SP_ARD_IDENTITY_PRODUCT*\",\"SP_ARD_IND_ANNUAL_REPORT*\",\"SP_ARD_IND_AUTHOR_PHASE3*\",\"SP_ARD_IND_AUTHOR_TRIAL*\",\"SP_ARD_IND_CTA_AUTHOR_PHASE1*\",\"SP_ARD_IND_CTA_AUTHOR_PHASE2*\",\"SP_ARD_IND_CTA_AUTHOR_PHASE3*\",\"SP_ARD_INVESTIGATOR_BROCHURE*\",\"SP_ARD_MASTER_CHAR*\",\"SP_ARD_MASTER_TESTING*\",\"SP_ARD_PHASE1_CONTROL*\",\"SP_ARD_PHASE1_TESTING*\",\"SP_ARD_PHASE2_CONTROL*\",\"SP_ARD_PHASE2_TESTING*\",\"SP_ARD_PHASE3_CONTROL*\",\"SP_ARD_PHASE3_TESTING*\",\"SP_ARD_PRODUCT_STUDIES*\",\"SP_ARD_RELEASED*\",\"SP_ARD_SEED_LOT*\",\"SP_ARD_STATISTICAL_SUPPORT*\",\"SP_ARD_STAT_SPRT*\",\"SP_ARD_ASSAY_DEV_STAT_SUPP*\",\"SP_ARD_TEST_CHAR*\",\"SP_ARD_TEST_SPEC*\",\"SP_ARD_TOX_NCS*\",\"SP_ARD_WORKING*\")") && vPlannedHour.FD>vYearStart) 
			{
				try
				{
					withoutalerts withoutlocking 
					{
						writeln("---> Planned Hour "+vPlannedHour.COMMENT+" deleted ("+vPlannedHour.ACTIVITY.printattribute()+")");
						vPlannedHour.delete(); 
						vNumDeleted++;
					}
				}
				catch(error e)
				{
					vErrors.push("Error while deleting allocation "+vPlannedHour+" : "+e);
				}
			}
		}
	}
	if (vErrors.length>0)
	{
		
		writeln(" End of sp_js_rdd_remove_old_ard_equation_metrics with errors :");
		for (var error in vErrors) 
		{
			writeln(error);
		}
		alert("END OF DATA RECOVERY with "+vErrors.length+" errors ");
	}
	else 
	{
		writeln("End of sp_js_rdd_remove_old_ard_equation_metrics with no error : " +vNumDeleted +" Planned Hours deleted");
		alert("END OF DATA RECOVERY : " +vNumDeleted +" Planned Hours deleted");
	}
}
//	SCRIPT NAME : SP_JS_RDD_AS_MET_DRI_VAL
//
//  PURPOSE : Script used for AS Metrics driver data recovery in V1.11.0.0 (RITM1032555)
//
//	VERSION HISTORY :
//		02/05/19 - MAG : Creation of sp_js_rdd_as_met_box1,sp_js_rdd_as_met_box2 & sp_js_rdd_as_met_box3 to recover the data on Activity for new way of working
//		13/05/19 - MAG : Creation of sp_js_rdd_remove_old_ard_equation_metrics to delete equation generated with old ard equations




function sp_js_rdd_as_met_box1()
{

	var res_list=new vector();
	Var res_BIOC="AS-BIOC";
	var act_res_BIOC="Opxresource".get(res_BIOC);
	var res_OS="AS-OS";
	var act_res_OS="Opxresource".get(res_OS);
	var res_IMM="AS-IMM";
	var act_res_IMM="Opxresource".get(res_IMM);
	var res_MICVIRO="AS-MICVIRO";
	var act_res_MICVIRO="Opxresource".get(res_MICVIRO);
	var res_RTAP="AS-RTAP";
	var act_res_RTAP="Opxresource".get(res_RTAP);
	var act_count=0;
	var vErrors = new vector();

	for ( var act in "opxactivity" where act.SP_AA_ARD_BIOC_ACTIVATE || act.SP_AA_ARD_OS_ACTIVATE || act.SP_AA_ARD_IMM_ACTIVATE || act.SP_AA_ARD_MICVIRO_ACTIVATE || act.SP_AA_ARD_RTAP_ACTIVATE)
	{
		try
		{
		
			var final_res_list="";
		  
			if (act.SP_AA_ARD_BIOC_ACTIVATE)
			{
				res_list.PUSH(act_res_BIOC.name);
			}
			if (act.SP_AA_ARD_OS_ACTIVATE)
			{
				res_list.PUSH(act_res_OS.name);
			}
			if (act.SP_AA_ARD_IMM_ACTIVATE)
			{
				res_list.PUSH(act_res_IMM.name);
			}
			if (act.SP_AA_ARD_MICVIRO_ACTIVATE)
			{
				res_list.PUSH(act_res_MICVIRO.name);
			}
			if (act.SP_AA_ARD_RTAP_ACTIVATE)
			{
				res_list.PUSH(act_res_RTAP.name);
			}
			final_res_list=res_list.join(",");
			act.SP_RING_AS_MET_RES_LIST=final_res_list;
			res_list.clear();
			act_count++;
		}
		
		catch(error e)
				{
					vErrors.push("Error while performing datarecovery As metrics Box1 Resources on actiivty "+act+" : "+e);
				}
	}
	if (vErrors.length>0)
	{
		
		writeln("DATA RECOVERY (AS Mectrics) - End of datarecovery As metrics Box1 Resources on actiivty with errors :");
		for (var error in vErrors) 
		{
			writeln(error);
		}
		alert("END OF DATA RECOVERY with "+vErrors.length+" errors ");
	}
	else 
	{
		writeln("DATA RECOVERY (AS Metrics) - End of datarecovery As metrics Box1 Resources on actiivty with no error : " +act_count);
		alert("END OF DATA RECOVERY : " +act_count +" BOX1 Resource restored");
	}
	
}


function sp_js_rdd_as_met_box2()
{
	Var o_res_BIOC="AS-BIOC";
	var o_act_res_BIOC="Opxresource".get(o_res_BIOC);
	var o_res_OS="AS-OS";
	var o_act_res_OS="Opxresource".get(o_res_OS);
	var o_res_IMM="AS-IMM";
	var o_act_res_IMM="Opxresource".get(o_res_IMM);
	var o_res_MICVIRO="AS-MICVIRO";
	var o_act_res_MICVIRO="Opxresource".get(o_res_MICVIRO);
	var act_count=0;
	var vErrors = new vector();
	for ( var o_act in "opxactivity" where o_act.SP_AA_ARD_BIOC_COMPLEXITY != "" || o_act.SP_AA_ARD_IMM_COMPLEXITY != "" || o_act.SP_AA_ARD_MICVIRO_COMPLEXITY != "" || o_act.SP_AA_ARD_OS_COMPLEXITY != "" )
	{
		try
		{
			if (o_act.SP_AA_ARD_BIOC_COMPLEXITY != "")
			{
				new opxSP_PT_AS_MET_DRI_VAL("Resource",o_act_res_BIOC.name,"Complexity",o_act.SP_AA_ARD_BIOC_COMPLEXITY,"SP_RA_AS_MET_ACT",o_act.ID,"FILE",o_act.SP_NF_S_PROJECT_NAME);
			}
			if (o_act.SP_AA_ARD_IMM_COMPLEXITY != "")
			{
				new opxSP_PT_AS_MET_DRI_VAL("Resource",o_act_res_IMM.name,"Complexity",o_act.SP_AA_ARD_IMM_COMPLEXITY,"SP_RA_AS_MET_ACT",o_act.ID,"FILE",o_act.SP_NF_S_PROJECT_NAME);
			}
			if (o_act.SP_AA_ARD_MICVIRO_COMPLEXITY != "")
			{
				new opxSP_PT_AS_MET_DRI_VAL("Resource",o_act_res_MICVIRO.name,"Complexity",o_act.SP_AA_ARD_MICVIRO_COMPLEXITY,"SP_RA_AS_MET_ACT",o_act.ID,"FILE",o_act.SP_NF_S_PROJECT_NAME);
			}
			if (o_act.SP_AA_ARD_OS_COMPLEXITY != "")
			{
				new opxSP_PT_AS_MET_DRI_VAL("Resource",o_act_res_OS.name,"Complexity",o_act.SP_AA_ARD_OS_COMPLEXITY,"SP_RA_AS_MET_ACT",o_act.ID,"FILE",o_act.SP_NF_S_PROJECT_NAME);
			}
			act_count++;
		}
		catch(error e)
		{
			vErrors.push("Error while performing datarecovery As metrics Box1 Resources on actiivty "+o_act+" : "+e);
		}
		
		
	}
	if (vErrors.length>0)
	{
		
		writeln("DATA RECOVERY (AS Mectrics) - End of datarecovery As metrics Box2 Resources Complexity on actiivty with errors :");
		for (var error in vErrors) 
		{
			writeln(error);
		}
		alert("END OF DATA RECOVERY with "+vErrors.length+" errors ");
	}
	else 
	{
		writeln("DATA RECOVERY (AS Metrics) - End of datarecovery As metrics Box2 Resources on actiivty with no error : " +act_count);
		alert("END OF DATA RECOVERY : " +act_count +" BOX2 Resource & Complexity restored");
	}

}

function sp_js_rdd_as_met_box3()
{
	Var o_res_BIOC="AS-BIOC";
	var o_act_res_BIOC="Opxresource".get(o_res_BIOC);
	var o_res_OS="AS-OS";
	var o_act_res_OS="Opxresource".get(o_res_OS);
	var o_res_IMM="AS-IMM";
	var o_act_res_IMM="Opxresource".get(o_res_IMM);
	var o_res_MICVIRO="AS-MICVIRO";
	var o_act_res_MICVIRO="Opxresource".get(o_res_MICVIRO);
	var act_count=0;
	var vErrors = new vector();
	
		for (var o_act in "OpxActivity" 
		  where o_act.CallBooleanFormula("SP_AA_ARD_NB_TESTS_BIOC>0 or SP_AA_ARD_NB_LOTS_BIOC>0 or SP_AA_ARD_NB_SAMPLE_LOT_BIOC>0")  ) 
		{
			try
			{
				new opxSP_PT_AS_MET_DRI_VAL("Resource",o_act_res_BIOC.name,"N  Tests",o_act.SP_AA_ARD_NB_TESTS_BIOC,"N  Lots",o_act.SP_AA_ARD_NB_LOTS_BIOC,"N  Sample / Lot",o_act.SP_AA_ARD_NB_SAMPLE_LOT_BIOC,"FILE",o_act.SP_NF_S_PROJECT_NAME,"SP_RA_AS_MET_ACT",o_act.ID);
			}
			catch(error e)
			{
				vErrors.push("Error while performing datarecovery As metrics Box1 Resources on actiivty "+o_act+" : "+e);
			}
		}
		for (var o_act in "OpxActivity" 
		  where o_act.CallBooleanFormula("SP_AA_ARD_NB_TESTS_OS>0 or SP_AA_ARD_NB_LOTS_OS>0 or SP_AA_ARD_NB_SAMPLE_LOT_OS>0")  ) 
		{
			try
			{
				new opxSP_PT_AS_MET_DRI_VAL("Resource",o_act_res_OS.name,"N  Tests",o_act.SP_AA_ARD_NB_TESTS_OS,"N  Lots",o_act.SP_AA_ARD_NB_LOTS_OS,"N  Sample / Lot",o_act.SP_AA_ARD_NB_SAMPLE_LOT_OS,"FILE",o_act.SP_NF_S_PROJECT_NAME,"SP_RA_AS_MET_ACT",o_act.ID);
			}
			catch(error e)
			{
				vErrors.push("Error while performing datarecovery As metrics Box1 Resources on actiivty "+o_act+" : "+e);
			}
		}
		for (var o_act in "OpxActivity" 
		  where o_act.CallBooleanFormula("SP_AA_ARD_NB_TESTS_IMM>0 or SP_AA_ARD_NB_LOTS_IMM>0 or SP_AA_ARD_NB_SAMPLE_LOT_IMM>0")  ) 
		{
			try
			{
				new opxSP_PT_AS_MET_DRI_VAL("Resource",o_act_res_IMM.name,"N  Tests",o_act.SP_AA_ARD_NB_TESTS_IMM,"N  Lots",o_act.SP_AA_ARD_NB_LOTS_IMM,"N  Sample / Lot",o_act.SP_AA_ARD_NB_SAMPLE_LOT_IMM,"FILE",o_act.SP_NF_S_PROJECT_NAME,"SP_RA_AS_MET_ACT",o_act.ID);
			}
			catch(error e)
			{
				vErrors.push("Error while performing datarecovery As metrics Box1 Resources on actiivty "+o_act+" : "+e);
			}
		}
			for (var o_act in "OpxActivity" 
		  where o_act.CallBooleanFormula("SP_AA_ARD_NB_TESTS_MICVIRO>0 or SP_AA_ARD_NB_LOTS_MICVIRO>0 or SP_AA_ARD_SAMPLE_LOT_MICVIRO>0")  ) 
		{
			try
			{
				new opxSP_PT_AS_MET_DRI_VAL("Resource",o_act_res_MICVIRO.name,"N  Tests",o_act.SP_AA_ARD_NB_TESTS_MICVIRO,"N  Lots",o_act.SP_AA_ARD_NB_LOTS_MICVIRO,"N  Sample / Lot",o_act.SP_AA_ARD_SAMPLE_LOT_MICVIRO,"FILE",o_act.SP_NF_S_PROJECT_NAME,"SP_RA_AS_MET_ACT",o_act.ID);
			}
			catch(error e)
			{
				vErrors.push("Error while performing datarecovery As metrics Box1 Resources on actiivty "+o_act+" : "+e);
			}
		}
	
	if (vErrors.length>0)
	{
		
		writeln("DATA RECOVERY (AS Mectrics) - End of datarecovery As metrics Box3 Resources Driver Values on actiivty with errors :");
		for (var error in vErrors) 
		{
			writeln(error);
		}
		alert("END OF DATA RECOVERY with "+vErrors.length+" errors ");
	}
	else 
	{
		writeln("DATA RECOVERY (AS Metrics) - End of datarecovery As metrics Box3 Resources Driver Values on actiivty with no error : ");
		alert("END OF DATA RECOVERY : BOX3 Resources Driver Values restored");
	}
	
}

function sp_js_rdd_remove_old_ard_equation_metrics()
{
	writeln(char(10)+"Start of sp_js_rdd_remove_old_ard_equation_metrics");
	var vYearStart = context.CallDateFormula ("PERIOD_START($DATE_OF_THE_DAY,\"YEAR\",-1)");
	var vErrors = new vector();
	var vNumDeleted=0;
	for(var vProject in opxProject where vProject.STATE=="Active")
	{
		fromobject(vProject)
		{
			for (var vPlannedHour in "OpxALLOCATION" where vPlannedHour.CallBooleanFormula("SP_RA_METRIC.name in (\"SP_ARD_ANALYSYS_REPORT*\",\"SP_ARD_ASCEPTIC_TESTING*\",\"SP_ARD_ASSAY_DEV_DIFFICULT*\",\"SP_ARD_ASSAY_QUAL*\",\"SP_ARD_ASSAY_TRANSFER*\",\"SP_ARD_ASSAY_VAL*\",\"SP_ARD_BATCH_STUDY*\",\"SP_ARD_BULK_TESTING*\",\"SP_ARD_CHAR*\",\"SP_ARD_COMP_TESTING*\",\"SP_ARD_ASSAY_DEV_EASY*\",\"SP_ARD_ASSAY_DEV_MEDIUM*\",\"SP_ARD_CTA_ANNUAL_REPORT*\",\"SP_ARD_CTA_AUTHOR_TRIAL*\",\"SP_ARD_CTA_AUTHOR_TRIAL*\",\"SP_ARD_DEMO_CHAR*\",\"SP_ARD_DEMO_TESTING*\",\"SP_ARD_END_CHAR*\",\"SP_ARD_END_TESTING*\",\"SP_ARD_FP_TESTING*\",\"SP_ARD_IDENTITY_PRODUCT*\",\"SP_ARD_IND_ANNUAL_REPORT*\",\"SP_ARD_IND_AUTHOR_PHASE3*\",\"SP_ARD_IND_AUTHOR_TRIAL*\",\"SP_ARD_IND_CTA_AUTHOR_PHASE1*\",\"SP_ARD_IND_CTA_AUTHOR_PHASE2*\",\"SP_ARD_IND_CTA_AUTHOR_PHASE3*\",\"SP_ARD_INVESTIGATOR_BROCHURE*\",\"SP_ARD_MASTER_CHAR*\",\"SP_ARD_MASTER_TESTING*\",\"SP_ARD_PHASE1_CONTROL*\",\"SP_ARD_PHASE1_TESTING*\",\"SP_ARD_PHASE2_CONTROL*\",\"SP_ARD_PHASE2_TESTING*\",\"SP_ARD_PHASE3_CONTROL*\",\"SP_ARD_PHASE3_TESTING*\",\"SP_ARD_PRODUCT_STUDIES*\",\"SP_ARD_RELEASED*\",\"SP_ARD_SEED_LOT*\",\"SP_ARD_STATISTICAL_SUPPORT*\",\"SP_ARD_STAT_SPRT*\",\"SP_ARD_ASSAY_DEV_STAT_SUPP*\",\"SP_ARD_TEST_CHAR*\",\"SP_ARD_TEST_SPEC*\",\"SP_ARD_TOX_NCS*\",\"SP_ARD_WORKING*\")") && vPlannedHour.FD>vYearStart) 
			{
				try
				{
					withoutalerts withoutlocking 
					{
						writeln("---> Planned Hour "+vPlannedHour.COMMENT+" deleted ("+vPlannedHour.ACTIVITY.printattribute()+")");
						vPlannedHour.delete(); 
						vNumDeleted++;
					}
				}
				catch(error e)
				{
					vErrors.push("Error while deleting allocation "+vPlannedHour+" : "+e);
				}
			}
		}
	}
	if (vErrors.length>0)
	{
		
		writeln(" End of sp_js_rdd_remove_old_ard_equation_metrics with errors :");
		for (var error in vErrors) 
		{
			writeln(error);
		}
		alert("END OF DATA RECOVERY with "+vErrors.length+" errors ");
	}
	else 
	{
		writeln("End of sp_js_rdd_remove_old_ard_equation_metrics with no error : " +vNumDeleted +" Planned Hours deleted");
		alert("END OF DATA RECOVERY : " +vNumDeleted +" Planned Hours deleted");
	}
}
 
// Script SP_JS_RDD_CLINICAL_REORG
//
//
var version = "v1.0 mrochas 2018-09-25";
// v1.0 mrochas 2018-09-25
// création

function sp_js_rdd_linked_affectations_for_profiles(v_list_of_profiles){
	var d_date_du_jour = new date();
	var v_errors = new vector();
	var s_formula = "cost_account in (\"FTE_METRICS\",\"FTE_ESTIMATED\") and res in (\""+v_list_of_profiles.join("\",\"")+"\")";
	var monitor_message = "Reprise des affectations liées aux équations ";
	var length_to_monitor = 0;
	for (var planned_hour in "OpxALLOCATION" where planned_hour.callBooleanFormula(s_formula)) length_to_monitor++;
	withmonitoring (true) for (var planned_hour in "OpxALLOCATION" where planned_hour.callBooleanFormula(s_formula)){
		monitor_message.monitor(length_to_monitor,5,5);
		if (planned_hour.FD<=d_date_du_jour){
			try{
				var ph1 = planned_hour.copy("EQUATION_OBJECT","","COST_ACCOUNT","FTE","EQUATION_OVERRIDE",true);
				if (ph1 instanceof OpxALLOCATION) withoutalerts{withoutlocking{planned_hour.delete();}}
				if (ph1.callBooleanFormula("EQUATION_OBJECT<>\"\" or COST_ACCOUNT<>\"FTE\" or not EQUATION_OVERRIDE ")){
					v_errors.push("Error while setting allocation "+ph1+" : not possible to set all attributes."+char(10)+"ph1.EQUATION_OBJECT = "+ph1.EQUATION_OBJECT+char(10)+"ph1.COST_ACCOUNT = "+ph1.COST_ACCOUNT+char(10)+ "ph1.EQUATION_OVERRIDE = "+ph1.EQUATION_OVERRIDE );
				}
			}catch(error e){
				v_errors.push("Error while setting allocation "+planned_hour+" : "+e);
			}
		}else{
			try{
				withoutalerts{withoutlocking{planned_hour.delete();}}
			}catch(error e){
				v_errors.push("Error while deletting allocation "+planned_hour+" : "+e);
			}
		}
	}
	if (v_errors.length>0){
		// alert("finished with "+v_errors.length+" errors");
		writeln("End of sp_js_rdd_linked_affectations_for_profiles with erros :"+char(10)+char(10)+char(10)+char(10));
		for (var error in v_errors) writeln(error+char(10)+char(10));
	}else{
		// alert("Finished with no errors");
		writeln("End of sp_js_rdd_linked_affectations_for_profiles with no error");
	}
}

// fonction globale de reprise des données
function sp_js_rdd_clinical_reorg(){
	// Reprise des affectations
	writeln("==========================================================="+"Début de la RDD sur les affectations"+"===========================================================");
	var v_list_of_profiles = new vector ("CLIN-CPM-CPM","CLIN-SML-CTM","CLIN-SML-LOG","CLIN-CPM-CC","CLIN-SML-LCRA");
	sp_js_rdd_linked_affectations_for_profiles(v_list_of_profiles);
	writeln("==========================================================="+"Fin de la RDD sur les affectations"+"===========================================================");
	// Fin de la Reprise des affectations
}

sp_js_rdd_clinical_reorg.exportfunction();

// Script SP_JS_RDD_CLINICAL_REORG
//
//
var version = "v1.0 mrochas 2018-09-25";
// v1.0 mrochas 2018-09-25
// création

function sp_js_rdd_linked_affectations_for_profiles(v_list_of_profiles){
	var d_date_du_jour = new date();
	var v_errors = new vector();
	var s_formula = "cost_account in (\"FTE_METRICS\",\"FTE_ESTIMATED\") and res in (\""+v_list_of_profiles.join("\",\"")+"\")";
	var monitor_message = "Reprise des affectations liées aux équations ";
	var length_to_monitor = 0;
	for (var planned_hour in "OpxALLOCATION" where planned_hour.callBooleanFormula(s_formula)) length_to_monitor++;
	withmonitoring (true) for (var planned_hour in "OpxALLOCATION" where planned_hour.callBooleanFormula(s_formula)){
		monitor_message.monitor(length_to_monitor,5,5);
		if (planned_hour.FD<=d_date_du_jour){
			try{
				var ph1 = planned_hour.copy("EQUATION_OBJECT","","COST_ACCOUNT","FTE","EQUATION_OVERRIDE",true);
				if (ph1 instanceof OpxALLOCATION) withoutalerts{withoutlocking{planned_hour.delete();}}
				if (ph1.callBooleanFormula("EQUATION_OBJECT<>\"\" or COST_ACCOUNT<>\"FTE\" or not EQUATION_OVERRIDE ")){
					v_errors.push("Error while setting allocation "+ph1+" : not possible to set all attributes."+char(10)+"ph1.EQUATION_OBJECT = "+ph1.EQUATION_OBJECT+char(10)+"ph1.COST_ACCOUNT = "+ph1.COST_ACCOUNT+char(10)+ "ph1.EQUATION_OVERRIDE = "+ph1.EQUATION_OVERRIDE );
				}
			}catch(error e){
				v_errors.push("Error while setting allocation "+planned_hour+" : "+e);
			}
		}else{
			try{
				withoutalerts{withoutlocking{planned_hour.delete();}}
			}catch(error e){
				v_errors.push("Error while deletting allocation "+planned_hour+" : "+e);
			}
		}
	}
	if (v_errors.length>0){
		// alert("finished with "+v_errors.length+" errors");
		writeln("End of sp_js_rdd_linked_affectations_for_profiles with erros :"+char(10)+char(10)+char(10)+char(10));
		for (var error in v_errors) writeln(error+char(10)+char(10));
	}else{
		// alert("Finished with no errors");
		writeln("End of sp_js_rdd_linked_affectations_for_profiles with no error");
	}
}

// fonction globale de reprise des données
function sp_js_rdd_clinical_reorg(){
	// Reprise des affectations
	writeln("==========================================================="+"Début de la RDD sur les affectations"+"===========================================================");
	var v_list_of_profiles = new vector ("CLIN-CPM-CPM","CLIN-SML-CTM","CLIN-SML-LOG","CLIN-CPM-CC","CLIN-SML-LCRA");
	sp_js_rdd_linked_affectations_for_profiles(v_list_of_profiles);
	writeln("==========================================================="+"Fin de la RDD sur les affectations"+"===========================================================");
	// Fin de la Reprise des affectations
}

sp_js_rdd_clinical_reorg.exportfunction();

 
//
//  PURPOSE : Script used for planned hours data recovery in V1.9.0.0 (RITM0774836 and ITS-INC2005540)
//
//	SCRIPT NAME : SP_JS_RDD_PLANNED_HOURS_V1900
//
//	VERSION HISTORY :
//
//		25/01/19 - MBL : Creation od sp_js_rdd_clean_metric_fields_PH
//		23/01/19 - MBL : Creation of sp_js_rdd_remove_planned_h_old_metric_TMF
//
//
// Script for ITS-INC2005540 - 1869 Allocation Description cannot be  edited saved for most allocations added during ARD re-org
// Cleaning of the planned hour fields "Metric" and "Metric value" when cost account is not FTE_METRICS (not considered anymore as planned hours related to a metric) 
function sp_js_rdd_clean_metric_fields_PH()
{
	writeln(char(10)+"DATA RECOVERY (Cleaning metric fields) - Start of sp_js_rdd_clean_metric_fields_PH");
	var vErrors = new vector();
	var vNumClean=0;
	for(var vProject in opxProject where vProject.open && vProject.STATE=="Active")
	{
		fromobject(vProject)
		{
			for (var vPlannedHour in "OpxALLOCATION" where vPlannedHour.SP_RA_METRIC instanceof OpxSP_METRIC && vPlannedHour.SP_RA_METRIC.printAttribute("ID") != "" && vPlannedHour.COST_ACCOUNT.NAME != "FTE_METRICS") 
			{
				try
				{
					withoutalerts withoutlocking 
					{
						writeln("---> Planned Hour "+vPlannedHour.COMMENT+" cleaned ("+vPlannedHour.ACTIVITY.printattribute()+")");
						vPlannedHour.SP_RA_METRIC=""; 
						vPlannedHour.SP_AA_N_METRIC_VALUE=0;
						vNumClean++;
					}
				}
				catch(error e)
				{
					vErrors.push("Error while cleaning allocation "+vPlannedHour+" : "+e);
				}
			}
		}
	}
	if (vErrors.length>0)
	{
		
		writeln("DATA RECOVERY (Cleaning metric fields) - End of sp_js_rdd_clean_metric_fields_PH with errors :");
		for (var error in vErrors) 
		{
			writeln(error);
		}
		alert("END OF DATA RECOVERY with "+vErrors.length+" errors ");
	}
	else 
	{
		writeln("DATA RECOVERY (Cleaning metric fields) - End of sp_js_rdd_clean_metric_fields_PH with no error : " +vNumClean +" Planned Hours cleaned");
		alert("END OF DATA RECOVERY : " +vNumClean +" Planned Hours cleaned");
	}
}

// Script for RITM0774836 - 1853 Change of the Clinical Coordinator metrics FTE CDC
// Deletion of planned hours planned after 2018 and created by SP_CL_CLINDOC_TMF_MGT_PRIBOOST_TMFPR_* (metrics to replace) 
function sp_js_rdd_remove_planned_h_old_metric_TMF()
{
	writeln(char(10)+"DATA RECOVERY (TMF Management Mectrics) - Start of sp_js_rdd_remove_planned_h_old_metric_TMF");
	var vYearStart = context.CallDateFormula ("PERIOD_START($DATE_OF_THE_DAY,\"YEAR\",0)");
	var vErrors = new vector();
	var vNumDeleted=0;
	for(var vProject in opxProject where vProject.open && vProject.STATE=="Active")
	{
		fromobject(vProject)
		{
			for (var vPlannedHour in "OpxALLOCATION" where vPlannedHour.callBooleanFormula("SP_RA_METRIC=\"SP_CL_CLINDOC_TMF_MGT_PRIBOOST_TMFPR_*\"") && vPlannedHour.FD>vYearStart) 
			{
				try
				{
					withoutalerts withoutlocking 
					{
						writeln("---> Planned Hour "+vPlannedHour.COMMENT+" deleted ("+vPlannedHour.ACTIVITY.printattribute()+")");
						vPlannedHour.delete(); 
						vNumDeleted++;
					}
				}
				catch(error e)
				{
					vErrors.push("Error while deleting allocation "+vPlannedHour+" : "+e);
				}
			}
		}
	}
	if (vErrors.length>0)
	{
		
		writeln("DATA RECOVERY (TMF Management Mectrics) - End of sp_js_rdd_remove_planned_h_old_metric_TMF with errors :");
		for (var error in vErrors) 
		{
			writeln(error);
		}
		alert("END OF DATA RECOVERY with "+vErrors.length+" errors ");
	}
	else 
	{
		writeln("DATA RECOVERY (TMF Management Mectrics) - End of sp_js_rdd_remove_planned_h_old_metric_TMF with no error : " +vNumDeleted +" Planned Hours deleted");
		alert("END OF DATA RECOVERY : " +vNumDeleted +" Planned Hours deleted");
	}
}

//
//  PURPOSE : Script used for planned hours data recovery in V1.9.0.0 (RITM0774836 and ITS-INC2005540)
//
//	SCRIPT NAME : SP_JS_RDD_PLANNED_HOURS_V1900
//
//	VERSION HISTORY :
//
//		25/01/19 - MBL : Creation od sp_js_rdd_clean_metric_fields_PH
//		23/01/19 - MBL : Creation of sp_js_rdd_remove_planned_h_old_metric_TMF
//
//
// Script for ITS-INC2005540 - 1869 Allocation Description cannot be  edited saved for most allocations added during ARD re-org
// Cleaning of the planned hour fields "Metric" and "Metric value" when cost account is not FTE_METRICS (not considered anymore as planned hours related to a metric) 
function sp_js_rdd_clean_metric_fields_PH()
{
	writeln(char(10)+"DATA RECOVERY (Cleaning metric fields) - Start of sp_js_rdd_clean_metric_fields_PH");
	var vErrors = new vector();
	var vNumClean=0;
	for(var vProject in opxProject where vProject.open && vProject.STATE=="Active")
	{
		fromobject(vProject)
		{
			for (var vPlannedHour in "OpxALLOCATION" where vPlannedHour.SP_RA_METRIC instanceof OpxSP_METRIC && vPlannedHour.SP_RA_METRIC.printAttribute("ID") != "" && vPlannedHour.COST_ACCOUNT.NAME != "FTE_METRICS") 
			{
				try
				{
					withoutalerts withoutlocking 
					{
						writeln("---> Planned Hour "+vPlannedHour.COMMENT+" cleaned ("+vPlannedHour.ACTIVITY.printattribute()+")");
						vPlannedHour.SP_RA_METRIC=""; 
						vPlannedHour.SP_AA_N_METRIC_VALUE=0;
						vNumClean++;
					}
				}
				catch(error e)
				{
					vErrors.push("Error while cleaning allocation "+vPlannedHour+" : "+e);
				}
			}
		}
	}
	if (vErrors.length>0)
	{
		
		writeln("DATA RECOVERY (Cleaning metric fields) - End of sp_js_rdd_clean_metric_fields_PH with errors :");
		for (var error in vErrors) 
		{
			writeln(error);
		}
		alert("END OF DATA RECOVERY with "+vErrors.length+" errors ");
	}
	else 
	{
		writeln("DATA RECOVERY (Cleaning metric fields) - End of sp_js_rdd_clean_metric_fields_PH with no error : " +vNumClean +" Planned Hours cleaned");
		alert("END OF DATA RECOVERY : " +vNumClean +" Planned Hours cleaned");
	}
}

// Script for RITM0774836 - 1853 Change of the Clinical Coordinator metrics FTE CDC
// Deletion of planned hours planned after 2018 and created by SP_CL_CLINDOC_TMF_MGT_PRIBOOST_TMFPR_* (metrics to replace) 
function sp_js_rdd_remove_planned_h_old_metric_TMF()
{
	writeln(char(10)+"DATA RECOVERY (TMF Management Mectrics) - Start of sp_js_rdd_remove_planned_h_old_metric_TMF");
	var vYearStart = context.CallDateFormula ("PERIOD_START($DATE_OF_THE_DAY,\"YEAR\",0)");
	var vErrors = new vector();
	var vNumDeleted=0;
	for(var vProject in opxProject where vProject.open && vProject.STATE=="Active")
	{
		fromobject(vProject)
		{
			for (var vPlannedHour in "OpxALLOCATION" where vPlannedHour.callBooleanFormula("SP_RA_METRIC=\"SP_CL_CLINDOC_TMF_MGT_PRIBOOST_TMFPR_*\"") && vPlannedHour.FD>vYearStart) 
			{
				try
				{
					withoutalerts withoutlocking 
					{
						writeln("---> Planned Hour "+vPlannedHour.COMMENT+" deleted ("+vPlannedHour.ACTIVITY.printattribute()+")");
						vPlannedHour.delete(); 
						vNumDeleted++;
					}
				}
				catch(error e)
				{
					vErrors.push("Error while deleting allocation "+vPlannedHour+" : "+e);
				}
			}
		}
	}
	if (vErrors.length>0)
	{
		
		writeln("DATA RECOVERY (TMF Management Mectrics) - End of sp_js_rdd_remove_planned_h_old_metric_TMF with errors :");
		for (var error in vErrors) 
		{
			writeln(error);
		}
		alert("END OF DATA RECOVERY with "+vErrors.length+" errors ");
	}
	else 
	{
		writeln("DATA RECOVERY (TMF Management Mectrics) - End of sp_js_rdd_remove_planned_h_old_metric_TMF with no error : " +vNumDeleted +" Planned Hours deleted");
		alert("END OF DATA RECOVERY : " +vNumDeleted +" Planned Hours deleted");
	}
}

 
//  FILE    : SP_JS_REPORTING.ojs
// 
//  VERSION : 1.2
// 
//  PURPOSE : V6 project: Functions used in the module Reporting
// 
//  HISTORY :
//  Created  05/05/2017
//  V1.4 - 20210528 - WST : Modification of sp_js_create_geo_area to exclude the version and verify that the creation need to be done for each trial creation 
//  V1.3 - 20181127 - MBL : Modification of sp_js_total_load to exclude the project "Hours to reach minimum required" from the calulation 
//  V1.2 - 20180604 - LFA : Creation of function sp_js_has_parent_match_filter to filter acttivity in report "Clinical linearized FTE by trial/Profile" (ITS-INC0586012)
//  V1.1 - 20180507 - LFA : Modification of field renamed for Activity Tracking statistics

function Rename_Field(class,text,slot)
{
  var new_value = text;
  var slot = class.getslot(slot);
  if (slot != undefined) slot.comment = new_value;
  writeln("Renaming " + slot + " in " + text);
}

//////////////////////////Activity tracking statistics//////////////////////////
Rename_Field("OPXCURVE","Name","NAME_RESOURCE");
Rename_Field("OPXCURVE","% Validated Timecards","_SP_TT_NF_PERCT_VALID_TC_RESOURCE");
Rename_Field("OPXCURVE","Total Timeccard(nb)","_SP_TT_CF_TC_TOTAL_RESOURCE");
Rename_Field("OPXCURVE","Validated Timecard(nb)","_SP_TT_CF_TC_VALIDATED_RESOURCE");
Rename_Field("OPXCURVE","% integrated Timecards","_SP_TT_NF_PERCT_INTEG_TC_RESOURCE");
Rename_Field("OPXCURVE","Integrated Timecard(nb)","_SP_TT_CF_TC_INTEGRATED_RESOURCE");
Rename_Field("OPXCURVE","Validated Timecards","SP_NF_N_NB_TC_PERIOD_TOT_VAL_RESOURCE");
Rename_Field("OPXCURVE","Integrated Timecards","SP_NF_N_NB_TC_PERIOD_TOT_INT_RESOURCE");
Rename_Field("OPXCURVE","Total Timecards","SP_NF_N_NB_TC_PERIOD_TOT_RESOURCE");

/////////////////////////////////Staff management/////////////////////////////
Rename_Field("OPXCURVE","Site","SP_RA_SITE_RESOURCE");
Rename_Field("OPXCURVE","Effective start date","EFFECTIVE_START_DATE_RESOURCE");
Rename_Field("OPXCURVE","Effective end date","EFFECTIVE_END_DATE_RESOURCE");
Rename_Field("OPXCURVE","Headcount","_SP_AA_S_RES_HEADCOUNT_RESOURCE");
Rename_Field("OPXCURVE","Department","SP_NF_CL_DEPARTMENT_N_RESOURCE");
Rename_Field("OPXCURVE","Profile","SP_NF_CL_PROFILE_RESOURCE");
Rename_Field("OPXCURVE","Availability Type","SP_NF_RES_AVAIL_TYPE_RESOURCE");
Rename_Field("OPXCURVE","Responsibility","RESP_RESOURCE");
Rename_Field("OPXCURVE","Cost account","COST_ACCOUNT_RESOURCE");
Rename_Field("OPXCURVE","Platform","SP_NF_CL_PLATFORM_N_RESOURCE");
Rename_Field("OPXCURVE","Excluded from Headcount","SP_AA_RES_NOT_INCL_HEADCOUNT_RESOURCE");
Rename_Field("OPXCURVE","Note pad","NOTE_PAD_RESOURCE");

function sp_js_get_list_user_resource()
{
	var vCurrentUser = GetCurrentUser().touppercase();
	var vListRes = "";
	
	for(var vRes in "OpxResource" where vRes.Getattributevalue("MANAGER")==vCurrentUser)
	{
		if(vListRes=="") vListRes = vRes.printattribute();
		else vListRes = vListRes+","+vRes.printattribute();
	}
    context.SP_AA_OC_S_FILTER_RES = vListRes;
}
AddWrapperFunction(NewOpxAppletWrapper,"sp_js_get_list_user_resource");

function sp_js_total_load(noArg)
{
	var vResult=0;
	for(var o in "OpxProject" where o.OPEN && o.SP_NF_N_PRJ_TOTAL_ACTUAL_USER!=0 && o.SPAS_AA_PROJECT_CODE!="NPARD07001") vResult = vResult+o.SP_NF_N_PRJ_TOTAL_ACTUAL_USER;
	return vResult
}
sp_js_total_load.exportfunction({"STRING"},"NUMBER");

function sp_js_create_geo_area()
{
	if(this instanceof OpxActivity)
	{
		withoutalerts{withoutlocking{
			if("OpxSP_PT_CL_GEO".get(this.NAME+"_Greater Europe")==undefined){
				var vNewGeoEU = new "OpxSP_PT_CL_GEO"("NAME",this.NAME+"_Greater Europe","SP_AA_S_GEO_AREA","Greater Europe","SP_RA_ACT_GEO",this);
				writetolog("sp_js_init_geo_area ==> Cr ation du Geographic Area Greater Europe sur le Trial : "+this.NAME);}
			else if (this.PROJECT.VERSION_NUMBER == 0) {			
				var geo = "OpxSP_PT_CL_GEO".get(this.NAME+"_Greater Europe");
				if (geo.SP_RA_ACT_GEO != this) {			
					var vNewGeoEU = new "OpxSP_PT_CL_GEO"("NAME",this.NAME+"_Greater Europe","SP_AA_S_GEO_AREA","Greater Europe","SP_RA_ACT_GEO",this);
					writetolog("sp_js_init_geo_area ==> Cr ation du Geographic Area non version Greater Europe sur le Trial : "+this.NAME);}
			}
			if("OpxSP_PT_CL_GEO".get(this.NAME+"_Africa and Middle-East")==undefined){
				var vNewGeoAF = new "OpxSP_PT_CL_GEO"("NAME",this.NAME+"_Africa and Middle-East","SP_AA_S_GEO_AREA","Africa and Middle-East","SP_RA_ACT_GEO",this);
				writetolog("sp_js_init_geo_area ==> Cr ation du Geographic Area Africa and Middle-East sur le Trial : "+this.NAME);}
			else if (this.PROJECT.VERSION_NUMBER == 0) {			
				var geo = "OpxSP_PT_CL_GEO".get(this.NAME+"_Africa and Middle-East");
				if (geo.SP_RA_ACT_GEO != this) {			
					var vNewGeoEU = new "OpxSP_PT_CL_GEO"("NAME",this.NAME+"_Africa and Middle-East","SP_AA_S_GEO_AREA","Africa and Middle-East","SP_RA_ACT_GEO",this);
					writetolog("sp_js_init_geo_area ==> Cr ation du Geographic Area non version Africa and Middle-East sur le Trial : "+this.NAME);}
			}
			if("OpxSP_PT_CL_GEO".get(this.NAME+"_Asia Pacific")==undefined){ 
				var vNewGeoAS = new "OpxSP_PT_CL_GEO"("NAME",this.NAME+"_Asia Pacific","SP_AA_S_GEO_AREA","Asia Pacific","SP_RA_ACT_GEO",this);
				writetolog("sp_js_init_geo_area ==> Cr ation du Geographic Area Asia Pacific sur le Trial : "+this.NAME);}
			else if (this.PROJECT.VERSION_NUMBER == 0) {			
				var geo = "OpxSP_PT_CL_GEO".get(this.NAME+"_Asia Pacific");
				if (geo.SP_RA_ACT_GEO != this) {			
					var vNewGeoEU = new "OpxSP_PT_CL_GEO"("NAME",this.NAME+"_Greater Europe","SP_AA_S_GEO_AREA","Asia Pacific","SP_RA_ACT_GEO",this);
					writetolog("sp_js_init_geo_area ==> Cr ation du Geographic Area non version Asia Pacific sur le Trial : "+this.NAME);}
			}
			if("OpxSP_PT_CL_GEO".get(this.NAME+"_Latin America")==undefined){ 
				var vNewGeoLA = new "OpxSP_PT_CL_GEO"("NAME",this.NAME+"_Latin America","SP_AA_S_GEO_AREA","Latin America","SP_RA_ACT_GEO",this);
				writetolog("sp_js_init_geo_area ==> Cr ation du Geographic Area Latin America sur le Trial : "+this.NAME);}
			else if (this.PROJECT.VERSION_NUMBER == 0) {			
				var geo = "OpxSP_PT_CL_GEO".get(this.NAME+"_Latin America");
				if (geo.SP_RA_ACT_GEO != this) {			
					var vNewGeoEU = new "OpxSP_PT_CL_GEO"("NAME",this.NAME+"_Greater Europe","SP_AA_S_GEO_AREA","Latin America","SP_RA_ACT_GEO",this);
					writetolog("sp_js_init_geo_area ==> Cr ation du Geographic Area non version Latin America sur le Trial : "+this.NAME);}
			}
			if("OpxSP_PT_CL_GEO".get(this.NAME+"_North America")==undefined){
				var vNewGeoNA = new "OpxSP_PT_CL_GEO"("NAME",this.NAME+"_North America","SP_AA_S_GEO_AREA","North America","SP_RA_ACT_GEO",this);
				writetolog("sp_js_init_geo_area ==> Cr ation du Geographic Area North America sur le Trial : "+this.NAME);}
			else if (this.PROJECT.VERSION_NUMBER == 0) {			
				var geo = "OpxSP_PT_CL_GEO".get(this.NAME+"_North America");
				if (geo.SP_RA_ACT_GEO != this) {			
					var vNewGeoEU = new "OpxSP_PT_CL_GEO"("NAME",this.NAME+"_Greater Europe","SP_AA_S_GEO_AREA","North America","SP_RA_ACT_GEO",this);
					writetolog("sp_js_init_geo_area ==> Cr ation du Geographic Area non version North America sur le Trial : "+this.NAME);}
			}
		}}
	}
}


function sp_js_has_parent_match_filter(NoArg)
{
	var vAct=this;
	if (vAct.LEVEL>1)
	{
		var vWBS = vAct.WBS_ELEMENT;
		while(vWBS.LEVEL>1)
		{
			if (vWBS.callbooleanformula("SP_NF_CL_TRIAL OR BELONGS(\"WBS_TYPE\",\"SUPPORTIVE,IDMC,SHORT TERM,SMT\")"))
			{
				return true
			}
			else
		    {
				vWBS = vWBS.WBS_ELEMENT;
			}
		}
	}
	return false;	
}
sp_js_has_parent_match_filter.exportfunction({"STRING"},"BOOLEAN");

//  FILE    : SP_JS_REPORTING.ojs
// 
//  VERSION : 1.2
// 
//  PURPOSE : V6 project: Functions used in the module Reporting
// 
//  HISTORY :
//  Created  05/05/2017
//  V1.4 - 20210528 - WST : Modification of sp_js_create_geo_area to exclude the version and verify that the creation need to be done for each trial creation 
//  V1.3 - 20181127 - MBL : Modification of sp_js_total_load to exclude the project "Hours to reach minimum required" from the calulation 
//  V1.2 - 20180604 - LFA : Creation of function sp_js_has_parent_match_filter to filter acttivity in report "Clinical linearized FTE by trial/Profile" (ITS-INC0586012)
//  V1.1 - 20180507 - LFA : Modification of field renamed for Activity Tracking statistics

function Rename_Field(class,text,slot)
{
  var new_value = text;
  var slot = class.getslot(slot);
  if (slot != undefined) slot.comment = new_value;
  writeln("Renaming " + slot + " in " + text);
}

//////////////////////////Activity tracking statistics//////////////////////////
Rename_Field("OPXCURVE","Name","NAME_RESOURCE");
Rename_Field("OPXCURVE","% Validated Timecards","_SP_TT_NF_PERCT_VALID_TC_RESOURCE");
Rename_Field("OPXCURVE","Total Timeccard(nb)","_SP_TT_CF_TC_TOTAL_RESOURCE");
Rename_Field("OPXCURVE","Validated Timecard(nb)","_SP_TT_CF_TC_VALIDATED_RESOURCE");
Rename_Field("OPXCURVE","% integrated Timecards","_SP_TT_NF_PERCT_INTEG_TC_RESOURCE");
Rename_Field("OPXCURVE","Integrated Timecard(nb)","_SP_TT_CF_TC_INTEGRATED_RESOURCE");
Rename_Field("OPXCURVE","Validated Timecards","SP_NF_N_NB_TC_PERIOD_TOT_VAL_RESOURCE");
Rename_Field("OPXCURVE","Integrated Timecards","SP_NF_N_NB_TC_PERIOD_TOT_INT_RESOURCE");
Rename_Field("OPXCURVE","Total Timecards","SP_NF_N_NB_TC_PERIOD_TOT_RESOURCE");

/////////////////////////////////Staff management/////////////////////////////
Rename_Field("OPXCURVE","Site","SP_RA_SITE_RESOURCE");
Rename_Field("OPXCURVE","Effective start date","EFFECTIVE_START_DATE_RESOURCE");
Rename_Field("OPXCURVE","Effective end date","EFFECTIVE_END_DATE_RESOURCE");
Rename_Field("OPXCURVE","Headcount","_SP_AA_S_RES_HEADCOUNT_RESOURCE");
Rename_Field("OPXCURVE","Department","SP_NF_CL_DEPARTMENT_N_RESOURCE");
Rename_Field("OPXCURVE","Profile","SP_NF_CL_PROFILE_RESOURCE");
Rename_Field("OPXCURVE","Availability Type","SP_NF_RES_AVAIL_TYPE_RESOURCE");
Rename_Field("OPXCURVE","Responsibility","RESP_RESOURCE");
Rename_Field("OPXCURVE","Cost account","COST_ACCOUNT_RESOURCE");
Rename_Field("OPXCURVE","Platform","SP_NF_CL_PLATFORM_N_RESOURCE");
Rename_Field("OPXCURVE","Excluded from Headcount","SP_AA_RES_NOT_INCL_HEADCOUNT_RESOURCE");
Rename_Field("OPXCURVE","Note pad","NOTE_PAD_RESOURCE");

function sp_js_get_list_user_resource()
{
	var vCurrentUser = GetCurrentUser().touppercase();
	var vListRes = "";
	
	for(var vRes in "OpxResource" where vRes.Getattributevalue("MANAGER")==vCurrentUser)
	{
		if(vListRes=="") vListRes = vRes.printattribute();
		else vListRes = vListRes+","+vRes.printattribute();
	}
    context.SP_AA_OC_S_FILTER_RES = vListRes;
}
AddWrapperFunction(NewOpxAppletWrapper,"sp_js_get_list_user_resource");

function sp_js_total_load(noArg)
{
	var vResult=0;
	for(var o in "OpxProject" where o.OPEN && o.SP_NF_N_PRJ_TOTAL_ACTUAL_USER!=0 && o.SPAS_AA_PROJECT_CODE!="NPARD07001") vResult = vResult+o.SP_NF_N_PRJ_TOTAL_ACTUAL_USER;
	return vResult
}
sp_js_total_load.exportfunction({"STRING"},"NUMBER");

function sp_js_create_geo_area()
{
	if(this instanceof OpxActivity)
	{
		withoutalerts{withoutlocking{
			if("OpxSP_PT_CL_GEO".get(this.NAME+"_Greater Europe")==undefined){
				var vNewGeoEU = new "OpxSP_PT_CL_GEO"("NAME",this.NAME+"_Greater Europe","SP_AA_S_GEO_AREA","Greater Europe","SP_RA_ACT_GEO",this);
				writetolog("sp_js_init_geo_area ==> Cr ation du Geographic Area Greater Europe sur le Trial : "+this.NAME);}
			else if (this.PROJECT.VERSION_NUMBER == 0) {			
				var geo = "OpxSP_PT_CL_GEO".get(this.NAME+"_Greater Europe");
				if (geo.SP_RA_ACT_GEO != this) {			
					var vNewGeoEU = new "OpxSP_PT_CL_GEO"("NAME",this.NAME+"_Greater Europe","SP_AA_S_GEO_AREA","Greater Europe","SP_RA_ACT_GEO",this);
					writetolog("sp_js_init_geo_area ==> Cr ation du Geographic Area non version Greater Europe sur le Trial : "+this.NAME);}
			}
			if("OpxSP_PT_CL_GEO".get(this.NAME+"_Africa and Middle-East")==undefined){
				var vNewGeoAF = new "OpxSP_PT_CL_GEO"("NAME",this.NAME+"_Africa and Middle-East","SP_AA_S_GEO_AREA","Africa and Middle-East","SP_RA_ACT_GEO",this);
				writetolog("sp_js_init_geo_area ==> Cr ation du Geographic Area Africa and Middle-East sur le Trial : "+this.NAME);}
			else if (this.PROJECT.VERSION_NUMBER == 0) {			
				var geo = "OpxSP_PT_CL_GEO".get(this.NAME+"_Africa and Middle-East");
				if (geo.SP_RA_ACT_GEO != this) {			
					var vNewGeoEU = new "OpxSP_PT_CL_GEO"("NAME",this.NAME+"_Africa and Middle-East","SP_AA_S_GEO_AREA","Africa and Middle-East","SP_RA_ACT_GEO",this);
					writetolog("sp_js_init_geo_area ==> Cr ation du Geographic Area non version Africa and Middle-East sur le Trial : "+this.NAME);}
			}
			if("OpxSP_PT_CL_GEO".get(this.NAME+"_Asia Pacific")==undefined){ 
				var vNewGeoAS = new "OpxSP_PT_CL_GEO"("NAME",this.NAME+"_Asia Pacific","SP_AA_S_GEO_AREA","Asia Pacific","SP_RA_ACT_GEO",this);
				writetolog("sp_js_init_geo_area ==> Cr ation du Geographic Area Asia Pacific sur le Trial : "+this.NAME);}
			else if (this.PROJECT.VERSION_NUMBER == 0) {			
				var geo = "OpxSP_PT_CL_GEO".get(this.NAME+"_Asia Pacific");
				if (geo.SP_RA_ACT_GEO != this) {			
					var vNewGeoEU = new "OpxSP_PT_CL_GEO"("NAME",this.NAME+"_Greater Europe","SP_AA_S_GEO_AREA","Asia Pacific","SP_RA_ACT_GEO",this);
					writetolog("sp_js_init_geo_area ==> Cr ation du Geographic Area non version Asia Pacific sur le Trial : "+this.NAME);}
			}
			if("OpxSP_PT_CL_GEO".get(this.NAME+"_Latin America")==undefined){ 
				var vNewGeoLA = new "OpxSP_PT_CL_GEO"("NAME",this.NAME+"_Latin America","SP_AA_S_GEO_AREA","Latin America","SP_RA_ACT_GEO",this);
				writetolog("sp_js_init_geo_area ==> Cr ation du Geographic Area Latin America sur le Trial : "+this.NAME);}
			else if (this.PROJECT.VERSION_NUMBER == 0) {			
				var geo = "OpxSP_PT_CL_GEO".get(this.NAME+"_Latin America");
				if (geo.SP_RA_ACT_GEO != this) {			
					var vNewGeoEU = new "OpxSP_PT_CL_GEO"("NAME",this.NAME+"_Greater Europe","SP_AA_S_GEO_AREA","Latin America","SP_RA_ACT_GEO",this);
					writetolog("sp_js_init_geo_area ==> Cr ation du Geographic Area non version Latin America sur le Trial : "+this.NAME);}
			}
			if("OpxSP_PT_CL_GEO".get(this.NAME+"_North America")==undefined){
				var vNewGeoNA = new "OpxSP_PT_CL_GEO"("NAME",this.NAME+"_North America","SP_AA_S_GEO_AREA","North America","SP_RA_ACT_GEO",this);
				writetolog("sp_js_init_geo_area ==> Cr ation du Geographic Area North America sur le Trial : "+this.NAME);}
			else if (this.PROJECT.VERSION_NUMBER == 0) {			
				var geo = "OpxSP_PT_CL_GEO".get(this.NAME+"_North America");
				if (geo.SP_RA_ACT_GEO != this) {			
					var vNewGeoEU = new "OpxSP_PT_CL_GEO"("NAME",this.NAME+"_Greater Europe","SP_AA_S_GEO_AREA","North America","SP_RA_ACT_GEO",this);
					writetolog("sp_js_init_geo_area ==> Cr ation du Geographic Area non version North America sur le Trial : "+this.NAME);}
			}
		}}
	}
}


function sp_js_has_parent_match_filter(NoArg)
{
	var vAct=this;
	if (vAct.LEVEL>1)
	{
		var vWBS = vAct.WBS_ELEMENT;
		while(vWBS.LEVEL>1)
		{
			if (vWBS.callbooleanformula("SP_NF_CL_TRIAL OR BELONGS(\"WBS_TYPE\",\"SUPPORTIVE,IDMC,SHORT TERM,SMT\")"))
			{
				return true
			}
			else
		    {
				vWBS = vWBS.WBS_ELEMENT;
			}
		}
	}
	return false;	
}
sp_js_has_parent_match_filter.exportfunction({"STRING"},"BOOLEAN");

 
//=================
// SP_JS_RM_TRACES
//=================
// Module RM
// Traces de la cr ation des ressources et de tous changements
// dans l'attribut "Modification notes" de type Notepad.
//===============================================

//---------------
// new Resource
//---------------
on new OpxResource()
{
	var o_res = this;
	var s_currUser = context.callStringFormula("$CURRENT_USER");  // user courant

	var d_date = new date();   // date courante
	var s_date = d_date.toString("DD-MMM-YY") + " " +  d_date.toString("MM/DD/YY HH:MM").subString(9, 17);

	// construction de la ligne a ajout  dans le champ "Modification notes" (de type Notepad) de la ressource
	var s_newLine = s_date + " - " + s_currUser + " - new ressource - "+ o_res.index;

	// mise   jour de l'attribut "Modification notes"
	if o_res.SP_AA_T_RES_MODIFICATION_NOTES == ""
		o_res.SP_AA_T_RES_MODIFICATION_NOTES = s_newLine;
	else
		o_res.SP_AA_T_RES_MODIFICATION_NOTES = s_newLine + char(10) + o_res.SP_AA_T_RES_MODIFICATION_NOTES;
}


// attributs   tracer sur la ressource
var v_resAttrs = {
	"NAME", "Name",
	"COMMENT", "Description",
	"SP_RA_SITE", "Site",
	"ELEMENT-OF", "Element of",
	"DATASET", "File",
	"LEVEL", "Level",
	"Res_manager", "Res. manager",
	"USER-MANAGER", "Res. User ID",
	"CONTROLLER", "Controller",
	"HIRING-DATE", "Effective start date",
	"CONTRACT-END-DATE", "Effective end date",
	"CALENDAR", "Calendar",
	"OVERTIME-CALENDAR", "Overtime calendar",
	"OBS", "Cost Center",
	"_SP_AA_S_RES_HEADCOUNT", "HeadCount",
	"CBS", "Cost account",
	"COST-UNIT", "Cost unit",
	"SP_AA_S_POSITION_REF", "Position Ref N ",
	"SP_AA_S_TYPE_OF_MOVEMENT", "Type of movement",
	"SP_AA_RES_NOT_INCL_HEADCOUNT", "Excluded from Headcount",
	"SP_AA_RES_INACTIVE", "Is Resource Inactive?",
	"COST-VALUE", "Rate",
	"TIME-UNIT", "Time unit",
	"NOTE-PAD", "Note pad",
	"SP_AA_DEPT_GROUPING", "Dept Grouping (Admin)",
	"_SP_AA_S_COMMENTS_DEP", "Comments Dept.",
	"SP_AA_S_EMPLOYEE_NUMBER", "Employee number",
	"_SP_AA_S__EMPLOY_ACT", "Employee Category"
};

//---------------
// modifyBefore
//---------------
on modifyBefore OpxResource (slots)
{
	if(slots == undefined || slots == false) return;
	var plist = slots.plist;
	if(plist == undefined || plist == false || plist.length == 0) return;
	var v_atts = pList.parsevector();

	// cr e la hash table si besoin
	if (context.beforeResourceUpdate == undefined)
		context.beforeResourceUpdate = new HashTable("string");
	else
		// on cherche   r -entrer dans le before() avant de passer dans le after()
		if context.beforeResourceUpdate.count != 0
			return;

	// v_atts contient une s quence d'attributs (position paire) suivi par sa valeur (position impaire)
	var n = 0;
	while (n < v_atts.length)
	{
		// r cup re le nom de l'attribut
		var s_att = v_atts[n].toString(); n++;

		// v rifie qu'il fait partie de ceux que l'on veut tracer
		if v_resAttrs.position(s_att) == undefined { n++; continue; }  // passe aussi sa valeur qui ne nous int resse pas

		// r cup re la valeur de l'attribut
		var o_val = this.get(s_att); n++;
		
		// dans le cas d'un type "complexe", on r cup re son index
		var s_type = typeOf this.get(s_att);
		if (s_type.subString(0,3) == "Opx")
			o_val = o_val.index;
		
		// met   jour la variable avec l'ancienne valeur
		context.beforeResourceUpdate.set(s_att, o_val);
	}
}

//---------------
// modifyAfter
//---------------
on modifyAfter OpxResource (slots)
{
	if(slots == undefined || slots == false) return;
	var plist = slots.plist;
	if(plist == undefined || plist == false || plist.length == 0) return;

	var s_currUser = context.callStringFormula("$CURRENT_USER");
	var d_date = new date();   // date courante
	var s_date = d_date.toString("DD-MMM-YY") + " " +  d_date.toString("MM/DD/YY HH:MM").subString(9, 17);

	var v_atts = pList.parsevector();
	var n = 0;
	var isUpdate = false;  // une maj attendue a-t-elle eu lieu ?

	// v_atts contient une s quence d'attributs (position paire) suivi par sa valeur (position impaire)
	while (n < v_atts.length)
	{
		// r cup re le nom de l'attribut
		var s_att = v_atts[n].toString(); n++;
		if v_resAttrs.position(s_att)==undefined { n++; continue; }  // passe aussi sa valeur qui ne nous int resse pas
		
		// au moins une mise   jour attendue a eu lieu
		isUpdate = true;

		// r cup re la valeur de l'attribut
		var o_val  = this.get(s_att); n++;
		var s_type = typeOf this.get(s_att);
		if s_type.subString(0,3) == "Opx"
			o_val = o_val.index;

		// construction de la ligne a ajouter dans le champ "Modification notes" (de type Notepad)
		var s_newLine = s_date + " - " + s_currUser + " - " + v_resAttrs.get(s_att) + ": Old: " + context.beforeResourceUpdate.get(s_att) + ", New: " + o_val.toString();

		// mise   jour de l'attribut "Modification notes"
		var s_modNotes = this.SP_AA_T_RES_MODIFICATION_NOTES;
		if s_modNotes==""
			s_modNotes = s_newLine;
		else  // ajout d'un saut de ligne (la modif la plus r cente apparait au d but)
			s_modNotes = s_newLine + char(10) + s_modNotes;
		this.SP_AA_T_RES_MODIFICATION_NOTES = s_modNotes;
	}
	
	// en cas de mise   jour des attributs, on vide la hashtable
	if (isUpdate)
		context.beforeResourceUpdate.clear();
}


//---------------------------
// new Resource Availability
//---------------------------
on new OpxResourceAvailability()
{
	// r cup re la ressource sur laquelle une dispo est cr  e
	var o_res = this.resource;
	var s_currUser = context.callStringFormula("$CURRENT_USER");  // ainsi que le user qui cr e la dispo

	var d_date = new date();   // date courante
	var s_date = d_date.toString("DD-MMM-YY") + " " +  d_date.toString("MM/DD/YY HH:MM").subString(9, 17);

	// ainsi que la valeur des attributs
	var str = "type: "+this.SP_RA_AVAIL_TYPE.name+", site: "+this.SP_RA_SITE.name+", qty: "+this.QTY+", percentage: "+this.RATIO+", start date: "+this.startDate+", finish date: "+ this.finishDate;

	// construction de la ligne a ajout  dans le champ "Modification notes" (de type Notepad)
	var s_newLine = s_date + " - " + s_currUser + " - new availability - " + str;

	// mise   jour de l'attribut "Modification notes"
	if o_res.SP_AA_T_RES_MODIFICATION_NOTES == ""
		o_res.SP_AA_T_RES_MODIFICATION_NOTES = s_newLine;
	else
		o_res.SP_AA_T_RES_MODIFICATION_NOTES = s_newLine + char(10) + o_res.SP_AA_T_RES_MODIFICATION_NOTES;
}


// attributs   tracer sur les disponibilit s d'une ressource
var v_resAvail = {
	"START-DATE", "Start date",
	"END-DATE", "Finish date",
	"RATIO", "Percentage",
	"QTY", "Quantity",
	"SP_RA_AVAIL_TYPE", "Availability type",
	"SP_RA_SITE", "Site"
}

//-------------
// modifyBefore
//-------------
on modifyBefore OpxResourceAvailability (slots)
{
	if(slots == undefined || slots == false) return;
	var plist = slots.plist;
	if(plist == undefined || plist == false || plist.length == 0) return;
	var v_atts = pList.parsevector();

	// cr e la hash table si besoin
	if (context.beforeAvailabilityUpdate == undefined)
		context.beforeAvailabilityUpdate = new HashTable("string");
	else
		// on cherche   r -entrer dans le before() avant de passer dans le after()
		if context.beforeAvailabilityUpdate.count != 0
			return;

	// v_atts contient une s quence d'attributs (position paire) suivi par sa valeur (position impaire)
	var n = 0;
	while (n < v_atts.length)
	{
		// r cup re le nom de l'attribut
		var s_att = v_atts[n].toString(); n++;
		if (v_resAvail.position(s_att) == undefined) { n++; continue; }  // passe aussi sa valeur qui ne nous int resse pas

		// r cup re la valeur de l'attribut
		var o_val = this.get(s_att); n++;
		
		// dans le cas d'un type "complexe", on r cup re son index
		var s_type = typeOf this.get(s_att);
		if (s_type.subString(0,3) == "Opx")
			o_val = o_val.index;
		
		// met   jour la variable avec l'ancienne valeur
		context.beforeAvailabilityUpdate.set(s_att, o_val);
	}
}

//-------------
// modifyAfter
//-------------
on modifyAfter OpxResourceAvailability (slots)
{
	if (slots == undefined || slots == false) return;
	var plist = slots.plist;
	if (plist == undefined || plist == false || plist.length == 0) return;

	var s_currUser = context.callStringFormula("$CURRENT_USER");
	var d_date = new date();   // date courante
	var s_date = d_date.toString("DD-MMM-YY") + " " +  d_date.toString("MM/DD/YY HH:MM").subString(9, 17);

	var v_atts = pList.parsevector();
	var n = 0;
	var o_res = this.resource;
	var isUpdate = false;  // une maj attendue a-t-elle eu lieu ?

	// v_atts contient une s quence d'attributs (position paire) suivi par sa valeur (position impaire)
	while (n < v_atts.length)
	{
		// r cup re le nom de l'attribut
		var s_att = v_atts[n].toString(); n++;
		if v_resAvail.position(s_att) == undefined { n++; continue; }  // passe aussi sa valeur qui ne nous int resse pas
		
		// au moins une mise   jour attendue a eu lieu
		isUpdate = true;

		// r cup re la valeur de l'attribut
		var o_val = this.get(s_att); n++;

		// dans le cas d'un type "complexe", on r cup re son index
		var s_type = typeOf this.get(s_att);
		if s_type.subString(0,3) == "Opx" o_val = o_val.index;

		// construction de la ligne a ajouter dans le champ "Modification notes" (de type Notepad)
		var s_newLine = s_date + " - " + s_currUser + " - " + v_resAvail.get(s_att) + ": Old: " + context.beforeAvailabilityUpdate.get(s_att) + ", New: " + o_val.toString();

		// mise   jour de l'attribut "Modification notes" de la ressource
		var s_modNotes = o_res.SP_AA_T_RES_MODIFICATION_NOTES;
		if s_modNotes==""
			s_modNotes = s_newLine;
		else  // ajout d'un saut de ligne (la modif la plus r cente apparait au d but)
			s_modNotes = s_newLine + char(10) + s_modNotes;
		o_res.SP_AA_T_RES_MODIFICATION_NOTES = s_modNotes;
	}
	
	// en cas de mise   jour des attributs, on vide la hashtable
	if (isUpdate)
		context.beforeAvailabilityUpdate.clear();
}

//=================
// SP_JS_RM_TRACES
//=================
// Module RM
// Traces de la cr ation des ressources et de tous changements
// dans l'attribut "Modification notes" de type Notepad.
//===============================================

//---------------
// new Resource
//---------------
on new OpxResource()
{
	var o_res = this;
	var s_currUser = context.callStringFormula("$CURRENT_USER");  // user courant

	var d_date = new date();   // date courante
	var s_date = d_date.toString("DD-MMM-YY") + " " +  d_date.toString("MM/DD/YY HH:MM").subString(9, 17);

	// construction de la ligne a ajout  dans le champ "Modification notes" (de type Notepad) de la ressource
	var s_newLine = s_date + " - " + s_currUser + " - new ressource - "+ o_res.index;

	// mise   jour de l'attribut "Modification notes"
	if o_res.SP_AA_T_RES_MODIFICATION_NOTES == ""
		o_res.SP_AA_T_RES_MODIFICATION_NOTES = s_newLine;
	else
		o_res.SP_AA_T_RES_MODIFICATION_NOTES = s_newLine + char(10) + o_res.SP_AA_T_RES_MODIFICATION_NOTES;
}


// attributs   tracer sur la ressource
var v_resAttrs = {
	"NAME", "Name",
	"COMMENT", "Description",
	"SP_RA_SITE", "Site",
	"ELEMENT-OF", "Element of",
	"DATASET", "File",
	"LEVEL", "Level",
	"Res_manager", "Res. manager",
	"USER-MANAGER", "Res. User ID",
	"CONTROLLER", "Controller",
	"HIRING-DATE", "Effective start date",
	"CONTRACT-END-DATE", "Effective end date",
	"CALENDAR", "Calendar",
	"OVERTIME-CALENDAR", "Overtime calendar",
	"OBS", "Cost Center",
	"_SP_AA_S_RES_HEADCOUNT", "HeadCount",
	"CBS", "Cost account",
	"COST-UNIT", "Cost unit",
	"SP_AA_S_POSITION_REF", "Position Ref N ",
	"SP_AA_S_TYPE_OF_MOVEMENT", "Type of movement",
	"SP_AA_RES_NOT_INCL_HEADCOUNT", "Excluded from Headcount",
	"SP_AA_RES_INACTIVE", "Is Resource Inactive?",
	"COST-VALUE", "Rate",
	"TIME-UNIT", "Time unit",
	"NOTE-PAD", "Note pad",
	"SP_AA_DEPT_GROUPING", "Dept Grouping (Admin)",
	"_SP_AA_S_COMMENTS_DEP", "Comments Dept.",
	"SP_AA_S_EMPLOYEE_NUMBER", "Employee number",
	"_SP_AA_S__EMPLOY_ACT", "Employee Category"
};

//---------------
// modifyBefore
//---------------
on modifyBefore OpxResource (slots)
{
	if(slots == undefined || slots == false) return;
	var plist = slots.plist;
	if(plist == undefined || plist == false || plist.length == 0) return;
	var v_atts = pList.parsevector();

	// cr e la hash table si besoin
	if (context.beforeResourceUpdate == undefined)
		context.beforeResourceUpdate = new HashTable("string");
	else
		// on cherche   r -entrer dans le before() avant de passer dans le after()
		if context.beforeResourceUpdate.count != 0
			return;

	// v_atts contient une s quence d'attributs (position paire) suivi par sa valeur (position impaire)
	var n = 0;
	while (n < v_atts.length)
	{
		// r cup re le nom de l'attribut
		var s_att = v_atts[n].toString(); n++;

		// v rifie qu'il fait partie de ceux que l'on veut tracer
		if v_resAttrs.position(s_att) == undefined { n++; continue; }  // passe aussi sa valeur qui ne nous int resse pas

		// r cup re la valeur de l'attribut
		var o_val = this.get(s_att); n++;
		
		// dans le cas d'un type "complexe", on r cup re son index
		var s_type = typeOf this.get(s_att);
		if (s_type.subString(0,3) == "Opx")
			o_val = o_val.index;
		
		// met   jour la variable avec l'ancienne valeur
		context.beforeResourceUpdate.set(s_att, o_val);
	}
}

//---------------
// modifyAfter
//---------------
on modifyAfter OpxResource (slots)
{
	if(slots == undefined || slots == false) return;
	var plist = slots.plist;
	if(plist == undefined || plist == false || plist.length == 0) return;

	var s_currUser = context.callStringFormula("$CURRENT_USER");
	var d_date = new date();   // date courante
	var s_date = d_date.toString("DD-MMM-YY") + " " +  d_date.toString("MM/DD/YY HH:MM").subString(9, 17);

	var v_atts = pList.parsevector();
	var n = 0;
	var isUpdate = false;  // une maj attendue a-t-elle eu lieu ?

	// v_atts contient une s quence d'attributs (position paire) suivi par sa valeur (position impaire)
	while (n < v_atts.length)
	{
		// r cup re le nom de l'attribut
		var s_att = v_atts[n].toString(); n++;
		if v_resAttrs.position(s_att)==undefined { n++; continue; }  // passe aussi sa valeur qui ne nous int resse pas
		
		// au moins une mise   jour attendue a eu lieu
		isUpdate = true;

		// r cup re la valeur de l'attribut
		var o_val  = this.get(s_att); n++;
		var s_type = typeOf this.get(s_att);
		if s_type.subString(0,3) == "Opx"
			o_val = o_val.index;

		// construction de la ligne a ajouter dans le champ "Modification notes" (de type Notepad)
		var s_newLine = s_date + " - " + s_currUser + " - " + v_resAttrs.get(s_att) + ": Old: " + context.beforeResourceUpdate.get(s_att) + ", New: " + o_val.toString();

		// mise   jour de l'attribut "Modification notes"
		var s_modNotes = this.SP_AA_T_RES_MODIFICATION_NOTES;
		if s_modNotes==""
			s_modNotes = s_newLine;
		else  // ajout d'un saut de ligne (la modif la plus r cente apparait au d but)
			s_modNotes = s_newLine + char(10) + s_modNotes;
		this.SP_AA_T_RES_MODIFICATION_NOTES = s_modNotes;
	}
	
	// en cas de mise   jour des attributs, on vide la hashtable
	if (isUpdate)
		context.beforeResourceUpdate.clear();
}


//---------------------------
// new Resource Availability
//---------------------------
on new OpxResourceAvailability()
{
	// r cup re la ressource sur laquelle une dispo est cr  e
	var o_res = this.resource;
	var s_currUser = context.callStringFormula("$CURRENT_USER");  // ainsi que le user qui cr e la dispo

	var d_date = new date();   // date courante
	var s_date = d_date.toString("DD-MMM-YY") + " " +  d_date.toString("MM/DD/YY HH:MM").subString(9, 17);

	// ainsi que la valeur des attributs
	var str = "type: "+this.SP_RA_AVAIL_TYPE.name+", site: "+this.SP_RA_SITE.name+", qty: "+this.QTY+", percentage: "+this.RATIO+", start date: "+this.startDate+", finish date: "+ this.finishDate;

	// construction de la ligne a ajout  dans le champ "Modification notes" (de type Notepad)
	var s_newLine = s_date + " - " + s_currUser + " - new availability - " + str;

	// mise   jour de l'attribut "Modification notes"
	if o_res.SP_AA_T_RES_MODIFICATION_NOTES == ""
		o_res.SP_AA_T_RES_MODIFICATION_NOTES = s_newLine;
	else
		o_res.SP_AA_T_RES_MODIFICATION_NOTES = s_newLine + char(10) + o_res.SP_AA_T_RES_MODIFICATION_NOTES;
}


// attributs   tracer sur les disponibilit s d'une ressource
var v_resAvail = {
	"START-DATE", "Start date",
	"END-DATE", "Finish date",
	"RATIO", "Percentage",
	"QTY", "Quantity",
	"SP_RA_AVAIL_TYPE", "Availability type",
	"SP_RA_SITE", "Site"
}

//-------------
// modifyBefore
//-------------
on modifyBefore OpxResourceAvailability (slots)
{
	if(slots == undefined || slots == false) return;
	var plist = slots.plist;
	if(plist == undefined || plist == false || plist.length == 0) return;
	var v_atts = pList.parsevector();

	// cr e la hash table si besoin
	if (context.beforeAvailabilityUpdate == undefined)
		context.beforeAvailabilityUpdate = new HashTable("string");
	else
		// on cherche   r -entrer dans le before() avant de passer dans le after()
		if context.beforeAvailabilityUpdate.count != 0
			return;

	// v_atts contient une s quence d'attributs (position paire) suivi par sa valeur (position impaire)
	var n = 0;
	while (n < v_atts.length)
	{
		// r cup re le nom de l'attribut
		var s_att = v_atts[n].toString(); n++;
		if (v_resAvail.position(s_att) == undefined) { n++; continue; }  // passe aussi sa valeur qui ne nous int resse pas

		// r cup re la valeur de l'attribut
		var o_val = this.get(s_att); n++;
		
		// dans le cas d'un type "complexe", on r cup re son index
		var s_type = typeOf this.get(s_att);
		if (s_type.subString(0,3) == "Opx")
			o_val = o_val.index;
		
		// met   jour la variable avec l'ancienne valeur
		context.beforeAvailabilityUpdate.set(s_att, o_val);
	}
}

//-------------
// modifyAfter
//-------------
on modifyAfter OpxResourceAvailability (slots)
{
	if (slots == undefined || slots == false) return;
	var plist = slots.plist;
	if (plist == undefined || plist == false || plist.length == 0) return;

	var s_currUser = context.callStringFormula("$CURRENT_USER");
	var d_date = new date();   // date courante
	var s_date = d_date.toString("DD-MMM-YY") + " " +  d_date.toString("MM/DD/YY HH:MM").subString(9, 17);

	var v_atts = pList.parsevector();
	var n = 0;
	var o_res = this.resource;
	var isUpdate = false;  // une maj attendue a-t-elle eu lieu ?

	// v_atts contient une s quence d'attributs (position paire) suivi par sa valeur (position impaire)
	while (n < v_atts.length)
	{
		// r cup re le nom de l'attribut
		var s_att = v_atts[n].toString(); n++;
		if v_resAvail.position(s_att) == undefined { n++; continue; }  // passe aussi sa valeur qui ne nous int resse pas
		
		// au moins une mise   jour attendue a eu lieu
		isUpdate = true;

		// r cup re la valeur de l'attribut
		var o_val = this.get(s_att); n++;

		// dans le cas d'un type "complexe", on r cup re son index
		var s_type = typeOf this.get(s_att);
		if s_type.subString(0,3) == "Opx" o_val = o_val.index;

		// construction de la ligne a ajouter dans le champ "Modification notes" (de type Notepad)
		var s_newLine = s_date + " - " + s_currUser + " - " + v_resAvail.get(s_att) + ": Old: " + context.beforeAvailabilityUpdate.get(s_att) + ", New: " + o_val.toString();

		// mise   jour de l'attribut "Modification notes" de la ressource
		var s_modNotes = o_res.SP_AA_T_RES_MODIFICATION_NOTES;
		if s_modNotes==""
			s_modNotes = s_newLine;
		else  // ajout d'un saut de ligne (la modif la plus r cente apparait au d but)
			s_modNotes = s_newLine + char(10) + s_modNotes;
		o_res.SP_AA_T_RES_MODIFICATION_NOTES = s_modNotes;
	}
	
	// en cas de mise   jour des attributs, on vide la hashtable
	if (isUpdate)
		context.beforeAvailabilityUpdate.clear();
}

 
//	NAME	: sp_js_ret_tc_defaulters
//	AUTHOR  : flecanut
//  VERSION : 1.0
//  PURPOSE : send E-mail to Time Tracking offenders
//  Function used in Planisware Intranet batch to send TimeCard Offenders Alert
//  
//  HISTORY :
var revision_number ="1.6";
//
// Revision 1.6 2019/06/03 mblaise ITS-INC2061627
// Modification of function SP_SendOffendersMailToUser to change expectedCompletionDateString format by JJ-MMM-AAAA
//
// Revision 1.5 2018/11/1 Maghesh ITS-INC1452665
// Modification of function SP_GetOffendersUserList to include the rejected user timesheet
//
// Revision 1.4 2018/06/22 Maghesh ITS-INC0846182
//Modification of function SP_remindOffenders, to execute in the environment specified in the Offenders Batch Database in Administration
//
// Revision 1.3  2018/04/24 Maghesh ITS-INC0829147
// modification of function "SP_SendOffendersMailToUser" to conisder user langauge set as null
//
//	Revision 1.2  2018/04/03 bcordel ITS-INC0659492
//	modification of function "SP_SendOffendersMailToUser" to update body of e-mail
//	modification of function "date__printdaystring" to put "Fran ais" as condition with "French"
//
//	Revision 1.1  2018/03/16 flecanut
//	modification of function "SP_GetOffendersUserList" to update controls on EFFECTIVE_START_DATE and EFFECTIVE_END_DATE
//
//  Revision 1.0  2017/11/16 flecanut
//  creation of the macro-script 

function SP_remindOffenders() {
var sDatabase = Context.SP_GS_S_OFF_BAT_DB;
Var vDatabase=sDatabase.Split(",");
Var cDatabase="";
if (sDatabase=="")
{
writetolog("Please enter the Database in Tempo Settings to execute the Offenders Batch");
return false;
}
else
{
for (Var DB in vDatabase where DB==context.callstringformula("$DATABASE_NAME"))
{
cDatabase = DB;
}
If (cDatabase!="")
{
	var ReferenceDate = new date();
	// Check on current period (except Saturday and Sunday)
	if(SP_CheckOffendersAlertPeriod(ReferenceDate)){
		writetolog("TimeCard Offenders Alert : start batch, send emails");
		var vVectUser = SP_GetOffendersUserList(ReferenceDate);
		var vCount = 0;
		for(var vUserString in vVectUser.parselist()){
			var vUser = OpxUser.get(vUserString);
			if(vUser != undefined){
				writetolog("TimeCard Offenders Alert : send reminder email to ~a",vUser);
				SP_SendOffendersMailToUser(vUser, ReferenceDate);
				vCount++;
			}
        }
		writetolog("TimeCard Offenders Alert : end of batch, "+vCount+" emails sent");
		return true;
	} else {
		writetolog("TimeCard Offenders Alert : no emails sent (wrong period)");
		return false;
	}
	}
	else
{
writetolog ("Current Database is not listed in the Offender Batch Database under Tempo Settings , Please enter them to execute the Offenders batch");
return false;
}
	}
}
SP_remindOffenders.exportFunction("","BOOLEAN","Send TimeCard Offenders Alert (Planisware Intranet batch)");

// Function used to check TimeCard Offenders period
function SP_CheckOffendersAlertPeriod(ReferenceDate) {
	var FiscalMonthBoundEnd = SP_getFiscalMonthBound(ReferenceDate,"end");
	var StartReminder;
	var EndReminder;
	// In december, reminder is sent between 3 weeks and 2 weeks prior to TimeCard end date
	// Otherwise, reminder is sent 1 week prior to TimeCard end date
	if(ReferenceDate.getmonth()==12)
	{
		StartReminder = date_addTimeUnit(FiscalMonthBoundEnd,-3,"week");
		EndReminder = date_addTimeUnit(date_addTimeUnit(FiscalMonthBoundEnd,-2,"week"),-1,"day");
	} else {
		StartReminder = date_addTimeUnit(FiscalMonthBoundEnd,-1,"week");
		EndReminder = date_addTimeUnit(FiscalMonthBoundEnd,-1,"day");
	}
	// Check on current period (except Saturday and Sunday)
	if(ReferenceDate.getday()!=5 && ReferenceDate.getday()!=6 && ReferenceDate>=StartReminder && ReferenceDate<=EndReminder){
		return true;
	} else {
		return false;
	}
}
SP_CheckOffendersAlertPeriod.exportFunction({"DATE"},"BOOLEAN","TimeCard Offenders Alert : check time period. Return true if alert must be sent for the considered input date, false otherwise.");

// Function used to send TimeCard Offenders Alert at a specific date
function SP_GetOffendersUserList(ReferenceDate)
{
	var vReturn = "";
	if(ReferenceDate instanceof date)
	{
		var FiscalMonthBoundStart = SP_getFiscalMonthBound(ReferenceDate,"start");
		var FiscalMonthBoundEnd = SP_getFiscalMonthBound(ReferenceDate,"end");
		writetolog("TimeCard Offenders Alert : period considered "+FiscalMonthBoundStart.toString("DD/MM/YYYY")+" to "+FiscalMonthBoundEnd.toString("DD/MM/YYYY"));
		// Added Refused status to include the Rejected Timesheet
		var vIncludedTimeCardStatus = new vector("Empty", "To handle", "Handled", "Refused");

		// Loop on TimeCards in the considered period that are not "Validated"
		var vVectResource = new vector();
		for (var vTC in opxTIMECARD where vTC.StartDate>=FiscalMonthBoundStart && vTC.StartDate<FiscalMonthBoundEnd && vIncludedTimeCardStatus.isinlist(vTC.status))
		{
			vVectResource.push(vTC.Resource);
		}
		vVectResource = vVectResource.removeduplicates();

		// Loop on Resource vector to exclude unticked and inactive resources
		var vVectUser = new vector();
		for(var vRes in vVectResource where vRes.SP_AA_RES_INACTIVE==false && (vRes.EFFECTIVE_START_DATE==undefined || vRes.EFFECTIVE_START_DATE<FiscalMonthBoundEnd) && (vRes.EFFECTIVE_END_DATE==undefined || vRes.EFFECTIVE_END_DATE>=FiscalMonthBoundStart) && vRes.SP_AA_B_TCD_ACTIVE && vRes.MANAGER != undefined)
		{
			vVectUser.push(vRes.MANAGER);
		}
		vVectUser = vVectUser.removeduplicates();
		
		var vVectOffendersUser = new vector();
		// Loop on Users that have TimeCard access and an email address
		for(var vUser in vVectUser where vUser instanceof opxUser && vUser.OPX2_TIMECARD_ACCESS && vUser.EMAIL_ADDRESS!="")
		{
			
			vVectOffendersUser.push(vUser.NAME);
		}
		vReturn = vVectOffendersUser.join(",");
	}
	return vReturn;
}
SP_GetOffendersUserList.exportFunction({"DATE"},"STRING","TimeCard Offenders Alert : list users who have not filled thier timesheet for the considered input date.");

// Function used to define TimeCard Offenders Alert content depending on language
function SP_SendOffendersMailToUser(vUser, ReferenceDate)
{
	if(vUser instanceof opxUser && vUser!=undefined)
	{
		var recipients = vUser.EMAIL_ADDRESS;
		var subject;
		var body;
		
		var expectedCompletionDate = date_addTimeUnit(SP_getFiscalMonthBound(ReferenceDate,"end"),-4,"day");
		var expectedCompletionDateString = date__printdaystring(expectedCompletionDate,vUser.LANGUAGE)+" "+context.callstringformula("PRINT_DATE_LANGUAGE('"+expectedCompletionDate+"',\"JJ-MMM-AAAA\",\""+vUser.LANGUAGE+"\")");
		// getting the main month of the timecard
		var v_month=context.CallStringFormula("PRINT_DATE_LANGUAGE('"+expectedCompletionDate+"',\"MMMM-JJ-AA\",\""+vUser.LANGUAGE+"\")").split("-");
		var s_month=v_month[0];
		
		var ApplicationURL = "https://tempo.sanofi.com/";
		
		if(vUser.LANGUAGE=="English" || vUser.LANGUAGE=="Default"|| vUser.LANGUAGE=="Anglais"|| vUser.LANGUAGE=="")
		{
			alert ("english");
			subject = "Timecard validation required";
			var CurrentTimeStampString = date__printUSTimeFormat(ReferenceDate);
			//content of the mail for english user
			body = "<html><body><span style='font-size:14.0pt;font-family:\"Century Gothic\",\"sans-serif\";color:#372D5F'>Dear Timecard user,<br><br>As of today "+ CurrentTimeStampString +" (FR time), you have <u>not yet finalized</u> your monthly timesheet completion.<br>Please complete and validate your "+s_month+" timesheet by end of business day on </span><b><span style='font-size:14.0pt;font-family:\"Century Gothic\",\"sans-serif\";color:#DC006B'>" + expectedCompletionDateString + "</span></b><span style='font-size:14.0pt;font-family:\"Century Gothic\",\"sans-serif\";color:#372D5F'>, so that your projects contribution can be taken into account and integrated.<br><br>Complete your timesheet now, <a href=\"" + ApplicationURL + "\">click here</a>.<br><br>Thank you!</span><br><br><i>This email is generated automatically, please do not reply</i></body></html>";
		}
		if(vUser.LANGUAGE=="Fran ais" || vUser.LANGUAGE=="French")
		{
			alert ("french");
			subject = "Validation Timecard requise";
			var CurrentTimeStampString = date_ltFormat(ReferenceDate);
			//content of the mail for french user
			body = "<body><span style='font-size:14.0pt;font-family:\"Century Gothic\",\"sans-serif\";color:#372D5F'>Cher utilisateur Timecard,<br><br>A ce jour, "+ CurrentTimeStampString +" (heure FR), vous n avez <u>pas encore finalis </u> le remplissage de votre feuille de temps.<br>Veuillez s il vous plait compl ter et valider votre feuille de temps de "+s_month+" avant la fin de la journ e du </span><b><span style='font-size:14.0pt;font-family:\"Century Gothic\",\"sans-serif\";color:#DC006B'>" + expectedCompletionDateString + "</span></b><span style='font-size:14.0pt;font-family:\"Century Gothic\",\"sans-serif\";color:#372D5F'>, pour que votre contribution aux projets puisse  tre prise en compte et int gr e.<br><br>Compl tez votre feuille maintenant, <a href=" + ApplicationURL + ">cliquez ici</a>.<br><br>Merci!</span><br><br><i>Cet email est g&eacute;n&eacute;r&eacute; automatiquement, merci de ne pas y r&eacute;pondre</i></body></html>";
		}
		
		//writetolog("TimeCard Offenders Alert : send "+vUser.LANGUAGE+" email to "+vUser.NAME);
		writetolog("TimeCard Offenders Alert : send "+vUser.LANGUAGE+" email to "+vUser.NAME+" for Email Completion date = "+expectedCompletionDateString +" (Orignal date "+expectedCompletionDate+" )");
		SP_sendOffendersMail(recipients,subject,body);
	}
}

function date__printUSTimeFormat(d)
{
	if(d instanceof date)
	{
		var h =  d.getHours();
		var m = d.getMinutes();
		if(h > 12) 
		{
			return (h-12 + ":" + padLeft(m,2) +" PM");
		} else {
			return (h + ":" + padLeft(m,2) +" AM");
		}
	}
}

function date__printdaystring(d, lang)
{
	if(d instanceof date && lang instanceof String)
	{
		var days = new vector("Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday");
		if(lang=="Fran ais" || lang=="French") days = new vector("Lundi", "Mardi", "Mercredi", "Jeudi", "Vendredi", "Samedi", "Dimanche");
		return days[d.getDay()];
	}
}

function padLeft(nb, n){
    var str = nb.toString("####");
	while(str.length<n)
	{
		str = "0" + str;
	}
	return str;
}

function SP_sendOffendersMail(recipients,subject,body) {
    var PlistForMessage = new vector();
    PlistForMessage.push("smtp-server");
    PlistForMessage.push("SMTP-EU.SANOFI.COM");
    PlistForMessage.push("from");
    PlistForMessage.push("timecard.tempo.noreply@sanofi.com");
    PlistForMessage.push("bcc");
    PlistForMessage.push(recipients);
    PlistForMessage.push("subject");
    PlistForMessage.push(subject);
    PlistForMessage.push("body");
    PlistForMessage.push(body);
    PlistForMessage.push("Content-Type") ;
    PlistForMessage.push("text/html");
	PlistForMessage.push("additional-headers") ;
    PlistForMessage.push("Importance,High,X-Priority,1,X-MSMail-Priority,High".parseList()) ;
    //sending the message
    if (PlistForMessage.length > 0 && context.SP_GS_B_ENABLE_MAIL_ALERTS) {	
      context.sendmailwithplist(PlistForMessage);
    }
  return true;
}

// ---------------------------------------------

// Method used by alert SP_AL_RES_TCD_ACTIVE to propagate value of 'SP_AA_B_TCD_ACTIVE' field to Resource structure
method SP_propagate_timecard_offenders_active on opxResource(){
	if(this != undefined)
	{
		fromobject(this)
		{
			for(var res in opxResource where res!=this){
				withoutalerts
				{
					res.SP_AA_B_TCD_ACTIVE = this.SP_AA_B_TCD_ACTIVE;
				}
			}
		}
	}
}

writetolog("Script sp_js_ret_tc_defaulters loaded with version ~a ", revision_number);

//	NAME	: sp_js_ret_tc_defaulters
//	AUTHOR  : flecanut
//  VERSION : 1.0
//  PURPOSE : send E-mail to Time Tracking offenders
//  Function used in Planisware Intranet batch to send TimeCard Offenders Alert
//  
//  HISTORY :
var revision_number ="1.6";
//
// Revision 1.6 2019/06/03 mblaise ITS-INC2061627
// Modification of function SP_SendOffendersMailToUser to change expectedCompletionDateString format by JJ-MMM-AAAA
//
// Revision 1.5 2018/11/1 Maghesh ITS-INC1452665
// Modification of function SP_GetOffendersUserList to include the rejected user timesheet
//
// Revision 1.4 2018/06/22 Maghesh ITS-INC0846182
//Modification of function SP_remindOffenders, to execute in the environment specified in the Offenders Batch Database in Administration
//
// Revision 1.3  2018/04/24 Maghesh ITS-INC0829147
// modification of function "SP_SendOffendersMailToUser" to conisder user langauge set as null
//
//	Revision 1.2  2018/04/03 bcordel ITS-INC0659492
//	modification of function "SP_SendOffendersMailToUser" to update body of e-mail
//	modification of function "date__printdaystring" to put "Fran ais" as condition with "French"
//
//	Revision 1.1  2018/03/16 flecanut
//	modification of function "SP_GetOffendersUserList" to update controls on EFFECTIVE_START_DATE and EFFECTIVE_END_DATE
//
//  Revision 1.0  2017/11/16 flecanut
//  creation of the macro-script 

function SP_remindOffenders() {
var sDatabase = Context.SP_GS_S_OFF_BAT_DB;
Var vDatabase=sDatabase.Split(",");
Var cDatabase="";
if (sDatabase=="")
{
writetolog("Please enter the Database in Tempo Settings to execute the Offenders Batch");
return false;
}
else
{
for (Var DB in vDatabase where DB==context.callstringformula("$DATABASE_NAME"))
{
cDatabase = DB;
}
If (cDatabase!="")
{
	var ReferenceDate = new date();
	// Check on current period (except Saturday and Sunday)
	if(SP_CheckOffendersAlertPeriod(ReferenceDate)){
		writetolog("TimeCard Offenders Alert : start batch, send emails");
		var vVectUser = SP_GetOffendersUserList(ReferenceDate);
		var vCount = 0;
		for(var vUserString in vVectUser.parselist()){
			var vUser = OpxUser.get(vUserString);
			if(vUser != undefined){
				writetolog("TimeCard Offenders Alert : send reminder email to ~a",vUser);
				SP_SendOffendersMailToUser(vUser, ReferenceDate);
				vCount++;
			}
        }
		writetolog("TimeCard Offenders Alert : end of batch, "+vCount+" emails sent");
		return true;
	} else {
		writetolog("TimeCard Offenders Alert : no emails sent (wrong period)");
		return false;
	}
	}
	else
{
writetolog ("Current Database is not listed in the Offender Batch Database under Tempo Settings , Please enter them to execute the Offenders batch");
return false;
}
	}
}
SP_remindOffenders.exportFunction("","BOOLEAN","Send TimeCard Offenders Alert (Planisware Intranet batch)");

// Function used to check TimeCard Offenders period
function SP_CheckOffendersAlertPeriod(ReferenceDate) {
	var FiscalMonthBoundEnd = SP_getFiscalMonthBound(ReferenceDate,"end");
	var StartReminder;
	var EndReminder;
	// In december, reminder is sent between 3 weeks and 2 weeks prior to TimeCard end date
	// Otherwise, reminder is sent 1 week prior to TimeCard end date
	if(ReferenceDate.getmonth()==12)
	{
		StartReminder = date_addTimeUnit(FiscalMonthBoundEnd,-3,"week");
		EndReminder = date_addTimeUnit(date_addTimeUnit(FiscalMonthBoundEnd,-2,"week"),-1,"day");
	} else {
		StartReminder = date_addTimeUnit(FiscalMonthBoundEnd,-1,"week");
		EndReminder = date_addTimeUnit(FiscalMonthBoundEnd,-1,"day");
	}
	// Check on current period (except Saturday and Sunday)
	if(ReferenceDate.getday()!=5 && ReferenceDate.getday()!=6 && ReferenceDate>=StartReminder && ReferenceDate<=EndReminder){
		return true;
	} else {
		return false;
	}
}
SP_CheckOffendersAlertPeriod.exportFunction({"DATE"},"BOOLEAN","TimeCard Offenders Alert : check time period. Return true if alert must be sent for the considered input date, false otherwise.");

// Function used to send TimeCard Offenders Alert at a specific date
function SP_GetOffendersUserList(ReferenceDate)
{
	var vReturn = "";
	if(ReferenceDate instanceof date)
	{
		var FiscalMonthBoundStart = SP_getFiscalMonthBound(ReferenceDate,"start");
		var FiscalMonthBoundEnd = SP_getFiscalMonthBound(ReferenceDate,"end");
		writetolog("TimeCard Offenders Alert : period considered "+FiscalMonthBoundStart.toString("DD/MM/YYYY")+" to "+FiscalMonthBoundEnd.toString("DD/MM/YYYY"));
		// Added Refused status to include the Rejected Timesheet
		var vIncludedTimeCardStatus = new vector("Empty", "To handle", "Handled", "Refused");

		// Loop on TimeCards in the considered period that are not "Validated"
		var vVectResource = new vector();
		for (var vTC in opxTIMECARD where vTC.StartDate>=FiscalMonthBoundStart && vTC.StartDate<FiscalMonthBoundEnd && vIncludedTimeCardStatus.isinlist(vTC.status))
		{
			vVectResource.push(vTC.Resource);
		}
		vVectResource = vVectResource.removeduplicates();

		// Loop on Resource vector to exclude unticked and inactive resources
		var vVectUser = new vector();
		for(var vRes in vVectResource where vRes.SP_AA_RES_INACTIVE==false && (vRes.EFFECTIVE_START_DATE==undefined || vRes.EFFECTIVE_START_DATE<FiscalMonthBoundEnd) && (vRes.EFFECTIVE_END_DATE==undefined || vRes.EFFECTIVE_END_DATE>=FiscalMonthBoundStart) && vRes.SP_AA_B_TCD_ACTIVE && vRes.MANAGER != undefined)
		{
			vVectUser.push(vRes.MANAGER);
		}
		vVectUser = vVectUser.removeduplicates();
		
		var vVectOffendersUser = new vector();
		// Loop on Users that have TimeCard access and an email address
		for(var vUser in vVectUser where vUser instanceof opxUser && vUser.OPX2_TIMECARD_ACCESS && vUser.EMAIL_ADDRESS!="")
		{
			
			vVectOffendersUser.push(vUser.NAME);
		}
		vReturn = vVectOffendersUser.join(",");
	}
	return vReturn;
}
SP_GetOffendersUserList.exportFunction({"DATE"},"STRING","TimeCard Offenders Alert : list users who have not filled thier timesheet for the considered input date.");

// Function used to define TimeCard Offenders Alert content depending on language
function SP_SendOffendersMailToUser(vUser, ReferenceDate)
{
	if(vUser instanceof opxUser && vUser!=undefined)
	{
		var recipients = vUser.EMAIL_ADDRESS;
		var subject;
		var body;
		
		var expectedCompletionDate = date_addTimeUnit(SP_getFiscalMonthBound(ReferenceDate,"end"),-4,"day");
		var expectedCompletionDateString = date__printdaystring(expectedCompletionDate,vUser.LANGUAGE)+" "+context.callstringformula("PRINT_DATE_LANGUAGE('"+expectedCompletionDate+"',\"JJ-MMM-AAAA\",\""+vUser.LANGUAGE+"\")");
		// getting the main month of the timecard
		var v_month=context.CallStringFormula("PRINT_DATE_LANGUAGE('"+expectedCompletionDate+"',\"MMMM-JJ-AA\",\""+vUser.LANGUAGE+"\")").split("-");
		var s_month=v_month[0];
		
		var ApplicationURL = "https://tempo.sanofi.com/";
		
		if(vUser.LANGUAGE=="English" || vUser.LANGUAGE=="Default"|| vUser.LANGUAGE=="Anglais"|| vUser.LANGUAGE=="")
		{
			alert ("english");
			subject = "Timecard validation required";
			var CurrentTimeStampString = date__printUSTimeFormat(ReferenceDate);
			//content of the mail for english user
			body = "<html><body><span style='font-size:14.0pt;font-family:\"Century Gothic\",\"sans-serif\";color:#372D5F'>Dear Timecard user,<br><br>As of today "+ CurrentTimeStampString +" (FR time), you have <u>not yet finalized</u> your monthly timesheet completion.<br>Please complete and validate your "+s_month+" timesheet by end of business day on </span><b><span style='font-size:14.0pt;font-family:\"Century Gothic\",\"sans-serif\";color:#DC006B'>" + expectedCompletionDateString + "</span></b><span style='font-size:14.0pt;font-family:\"Century Gothic\",\"sans-serif\";color:#372D5F'>, so that your projects contribution can be taken into account and integrated.<br><br>Complete your timesheet now, <a href=\"" + ApplicationURL + "\">click here</a>.<br><br>Thank you!</span><br><br><i>This email is generated automatically, please do not reply</i></body></html>";
		}
		if(vUser.LANGUAGE=="Fran ais" || vUser.LANGUAGE=="French")
		{
			alert ("french");
			subject = "Validation Timecard requise";
			var CurrentTimeStampString = date_ltFormat(ReferenceDate);
			//content of the mail for french user
			body = "<body><span style='font-size:14.0pt;font-family:\"Century Gothic\",\"sans-serif\";color:#372D5F'>Cher utilisateur Timecard,<br><br>A ce jour, "+ CurrentTimeStampString +" (heure FR), vous n avez <u>pas encore finalis </u> le remplissage de votre feuille de temps.<br>Veuillez s il vous plait compl ter et valider votre feuille de temps de "+s_month+" avant la fin de la journ e du </span><b><span style='font-size:14.0pt;font-family:\"Century Gothic\",\"sans-serif\";color:#DC006B'>" + expectedCompletionDateString + "</span></b><span style='font-size:14.0pt;font-family:\"Century Gothic\",\"sans-serif\";color:#372D5F'>, pour que votre contribution aux projets puisse  tre prise en compte et int gr e.<br><br>Compl tez votre feuille maintenant, <a href=" + ApplicationURL + ">cliquez ici</a>.<br><br>Merci!</span><br><br><i>Cet email est g&eacute;n&eacute;r&eacute; automatiquement, merci de ne pas y r&eacute;pondre</i></body></html>";
		}
		
		//writetolog("TimeCard Offenders Alert : send "+vUser.LANGUAGE+" email to "+vUser.NAME);
		writetolog("TimeCard Offenders Alert : send "+vUser.LANGUAGE+" email to "+vUser.NAME+" for Email Completion date = "+expectedCompletionDateString +" (Orignal date "+expectedCompletionDate+" )");
		SP_sendOffendersMail(recipients,subject,body);
	}
}

function date__printUSTimeFormat(d)
{
	if(d instanceof date)
	{
		var h =  d.getHours();
		var m = d.getMinutes();
		if(h > 12) 
		{
			return (h-12 + ":" + padLeft(m,2) +" PM");
		} else {
			return (h + ":" + padLeft(m,2) +" AM");
		}
	}
}

function date__printdaystring(d, lang)
{
	if(d instanceof date && lang instanceof String)
	{
		var days = new vector("Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday");
		if(lang=="Fran ais" || lang=="French") days = new vector("Lundi", "Mardi", "Mercredi", "Jeudi", "Vendredi", "Samedi", "Dimanche");
		return days[d.getDay()];
	}
}

function padLeft(nb, n){
    var str = nb.toString("####");
	while(str.length<n)
	{
		str = "0" + str;
	}
	return str;
}

function SP_sendOffendersMail(recipients,subject,body) {
    var PlistForMessage = new vector();
    PlistForMessage.push("smtp-server");
    PlistForMessage.push("SMTP-EU.SANOFI.COM");
    PlistForMessage.push("from");
    PlistForMessage.push("timecard.tempo.noreply@sanofi.com");
    PlistForMessage.push("bcc");
    PlistForMessage.push(recipients);
    PlistForMessage.push("subject");
    PlistForMessage.push(subject);
    PlistForMessage.push("body");
    PlistForMessage.push(body);
    PlistForMessage.push("Content-Type") ;
    PlistForMessage.push("text/html");
	PlistForMessage.push("additional-headers") ;
    PlistForMessage.push("Importance,High,X-Priority,1,X-MSMail-Priority,High".parseList()) ;
    //sending the message
    if (PlistForMessage.length > 0 && context.SP_GS_B_ENABLE_MAIL_ALERTS) {	
      context.sendmailwithplist(PlistForMessage);
    }
  return true;
}

// ---------------------------------------------

// Method used by alert SP_AL_RES_TCD_ACTIVE to propagate value of 'SP_AA_B_TCD_ACTIVE' field to Resource structure
method SP_propagate_timecard_offenders_active on opxResource(){
	if(this != undefined)
	{
		fromobject(this)
		{
			for(var res in opxResource where res!=this){
				withoutalerts
				{
					res.SP_AA_B_TCD_ACTIVE = this.SP_AA_B_TCD_ACTIVE;
				}
			}
		}
	}
}

writetolog("Script sp_js_ret_tc_defaulters loaded with version ~a ", revision_number);

 
//  AUTHOR  : FLC
//  VERSION : 1.2
//  PURPOSE : TEMPO, Resource Management
//  2018-05-21 - LFA - Modification of function sp_res_modifybefore_controller to deactivate alerts on modification of field MANAGERS
//                     Creation of function sp_res_update_tc_managers
//  2018-03-22 - LFA - Modification of function sp_create_new_resource to remove duplicate groups for RES_MANAGER field

// Function called when creating new ressources
function sp_create_new_resource()
{
	// Check on selected Resource level
	var o_res = OpxResource.get(get_selected_element("Resource"));
	if o_res == undefined || (!o_res instanceOf OpxResource) || o_res.level != 5 {
		alert("Please, select a level 5 parent resource before creating a new resource");
		return false;
	}

	// Resource Manager field is initialized with selected resource properties (level 5) and add G_RBS and G_ADM
	// var s_resMgr = list_push(o_res.res_manager.parsevector(","), "G_RBS,G_ADM").removeduplicates().join(",");
	var s_resMgr = list_push(o_res.res_manager.parsevector(","), "G_RBS");
	s_resMgr = list_push(o_res.res_manager.parsevector(","), "G_ADM");
	s_resMgr=s_resMgr.removeduplicates();
	s_resMgr=s_resMgr.join(",");

	var link = new hyperlink(
		"creationform",
		"Class", "Resource",
		"EditorType", "SP_RE_POP_CREATE_RESOURCE_FOLDER",
		"DefaultA1", "File",
		"DefaultV1", context.RESOURCES_DEFAULT_FILE,
		"DefaultA2", "ElementOf",
		"DefaultV2", o_res,
		"DefaultA3", "TimeUnit",
		"DefaultV3", "hour",
		"DefaultA4", "Rate",
		"DefaultV4", 1,
		"DefaultA5", "HeadCount",
		"DefaultV5", "Direct",
		"DefaultA6", "res_manager",
		"DefaultV6", s_resMgr,
		"DefaultA7", "controllerTimecard",
		"DefaultV7", o_res.controllerTimecard
	);
	if (link != undefined)
	{
		link.go();
	}
	return true;
}

// Function to get the site code based on site object (BREAKDOWN_3)
function sp_js_get_site_code(vSite)
{
	var vCode;
	if (vSite instanceof OpxBREAKDOWN_3 && vSite!=undefined)
	{
		if (vSite.level==4)
		{
			// International
			vCode = "INT";
			if (vSite.BS_3.name == "France")
			{
				vCode = "FR";
			} else if (vSite.BS_3.name == "Canada") {
				vCode = "CA";
			} else if (vSite.BS_3.name == "US") {
				vCode = "US";
			}
		} else {
			alert("Error: site should be at level 4");
			return vCode;
		}
	}
	return vCode;
}

//-------------------------------------------
// function called after a save action on creation or modify resource form
//-------------------------------------------
function sp_os_rm_set_other_attributes(o_res)
{
	//-------------------------------------------
	// Choice of the site has repercussions on:
	// - the calendar of the resource: Calendar
	// - the schedule of the hours supp. about the resource: OvertimeCalendar
	// - the costUnit of the resource: CostUnit
	//-------------------------------------------
	if (o_res instanceOf opxResource && o_res!=undefined)
	{
		var s_code = sp_js_get_site_code(o_res.site);
		if(s_code!=undefined)
		{
			o_res.Calendar = OpxCalendar.get("5x7_"+s_code);
			o_res.OvertimeCalendar = OpxCalendar.get("5x7_"+s_code+"_OVT");
			o_res.CostUnit = "OpxCostUnit".get("MH-"+s_code);
		} else {
			return false;
		}
	}
	return true;
}

//updated fonction 15.09.17 LBS
//on the ressource table
//update MANAGERS field when CONTROLLER field is modify
function sp_res_modifybefore_controller(oV, nV)
{
	//get the CONTROLLER old value 
	var vVect = this.MANAGERS.parsevector();
	var vVectRecup = new vector();
	 
	if (oV==undefined || oV=="")
	{
		vVectRecup=vVect;
	}

//compared CONTROLLER old value with the new value
	if( nV!=oV)
	{
		for (var each in vVect where (oV != "" && oV != undefined) &&  each != oV.NAME){
			vVectRecup.push(each);
		}
		//add the new CONTROLLER value 
		if (nV!= undefined && nV!="")
		{
			vVectRecup.push(nV.NAME);
			vVectRecup = vVectRecup.removeduplicates();
		}
		
		withoutlocking
		{
			withoutalerts{
				//update MANAGERS field
				this.MANAGERS=vVectRecup.join(",");
			}
		}
	}
}

var slot="OpxResource".findClass().getSlot("CONTROLLER"); 
slot.modifybeforeMethod = sp_res_modifybefore_controller;

// Function used in alert SP_AL_RES_UPDATE_TC_MANAGERS
function sp_res_update_tc_managers()
{
	withoutalerts{
		
		var vec = new vector();

		// Manager must be the first item of the list
		if (this.MANAGER!=undefined && this.MANAGER!="")
		{
			vec.push(this.MANAGER.printattribute());
		}
		
		// Add "G_ADM,G_RBS"
		vec.push("G_ADM");
		vec.push("G_RBS");
		
		// Add Extra values
		// We get the value that were entered by user
		var input_value="";
		if (this.MANAGERS!=undefined && this.MANAGERS!="")
			input_value= this.MANAGERS;
		
		// We get the list of mandatory value
		var vec_to_compare=vec;
		if (this.CONTROLLER!=undefined && this.CONTROLLER!="")
		{
			vec_to_compare.push(this.CONTROLLER.printattribute());
		}	

		// We get the non mandatory extra vallues entered by user
		var extra_value="";
		if (input_value!="")
			extra_value="LIST_DIFFERENCE".call(input_value,vec_to_compare.join(","));
		
		// Add extra value to vector
		for (var Obj in extra_value.parselist())
		{
			vec.push(Obj);
		}	
		
		// Add controler (Last item)
		if (this.CONTROLLER!=undefined && this.CONTROLLER!="")
		{
			vec.push(this.CONTROLLER.printattribute());
		}
			
		vec = vec.removeduplicates();
		
		this.MANAGERS=vec.join(",");
	}
}

//  AUTHOR  : FLC
//  VERSION : 1.2
//  PURPOSE : TEMPO, Resource Management
//  2018-05-21 - LFA - Modification of function sp_res_modifybefore_controller to deactivate alerts on modification of field MANAGERS
//                     Creation of function sp_res_update_tc_managers
//  2018-03-22 - LFA - Modification of function sp_create_new_resource to remove duplicate groups for RES_MANAGER field

// Function called when creating new ressources
function sp_create_new_resource()
{
	// Check on selected Resource level
	var o_res = OpxResource.get(get_selected_element("Resource"));
	if o_res == undefined || (!o_res instanceOf OpxResource) || o_res.level != 5 {
		alert("Please, select a level 5 parent resource before creating a new resource");
		return false;
	}

	// Resource Manager field is initialized with selected resource properties (level 5) and add G_RBS and G_ADM
	// var s_resMgr = list_push(o_res.res_manager.parsevector(","), "G_RBS,G_ADM").removeduplicates().join(",");
	var s_resMgr = list_push(o_res.res_manager.parsevector(","), "G_RBS");
	s_resMgr = list_push(o_res.res_manager.parsevector(","), "G_ADM");
	s_resMgr=s_resMgr.removeduplicates();
	s_resMgr=s_resMgr.join(",");

	var link = new hyperlink(
		"creationform",
		"Class", "Resource",
		"EditorType", "SP_RE_POP_CREATE_RESOURCE_FOLDER",
		"DefaultA1", "File",
		"DefaultV1", context.RESOURCES_DEFAULT_FILE,
		"DefaultA2", "ElementOf",
		"DefaultV2", o_res,
		"DefaultA3", "TimeUnit",
		"DefaultV3", "hour",
		"DefaultA4", "Rate",
		"DefaultV4", 1,
		"DefaultA5", "HeadCount",
		"DefaultV5", "Direct",
		"DefaultA6", "res_manager",
		"DefaultV6", s_resMgr,
		"DefaultA7", "controllerTimecard",
		"DefaultV7", o_res.controllerTimecard
	);
	if (link != undefined)
	{
		link.go();
	}
	return true;
}

// Function to get the site code based on site object (BREAKDOWN_3)
function sp_js_get_site_code(vSite)
{
	var vCode;
	if (vSite instanceof OpxBREAKDOWN_3 && vSite!=undefined)
	{
		if (vSite.level==4)
		{
			// International
			vCode = "INT";
			if (vSite.BS_3.name == "France")
			{
				vCode = "FR";
			} else if (vSite.BS_3.name == "Canada") {
				vCode = "CA";
			} else if (vSite.BS_3.name == "US") {
				vCode = "US";
			}
		} else {
			alert("Error: site should be at level 4");
			return vCode;
		}
	}
	return vCode;
}

//-------------------------------------------
// function called after a save action on creation or modify resource form
//-------------------------------------------
function sp_os_rm_set_other_attributes(o_res)
{
	//-------------------------------------------
	// Choice of the site has repercussions on:
	// - the calendar of the resource: Calendar
	// - the schedule of the hours supp. about the resource: OvertimeCalendar
	// - the costUnit of the resource: CostUnit
	//-------------------------------------------
	if (o_res instanceOf opxResource && o_res!=undefined)
	{
		var s_code = sp_js_get_site_code(o_res.site);
		if(s_code!=undefined)
		{
			o_res.Calendar = OpxCalendar.get("5x7_"+s_code);
			o_res.OvertimeCalendar = OpxCalendar.get("5x7_"+s_code+"_OVT");
			o_res.CostUnit = "OpxCostUnit".get("MH-"+s_code);
		} else {
			return false;
		}
	}
	return true;
}

//updated fonction 15.09.17 LBS
//on the ressource table
//update MANAGERS field when CONTROLLER field is modify
function sp_res_modifybefore_controller(oV, nV)
{
	//get the CONTROLLER old value 
	var vVect = this.MANAGERS.parsevector();
	var vVectRecup = new vector();
	 
	if (oV==undefined || oV=="")
	{
		vVectRecup=vVect;
	}

//compared CONTROLLER old value with the new value
	if( nV!=oV)
	{
		for (var each in vVect where (oV != "" && oV != undefined) &&  each != oV.NAME){
			vVectRecup.push(each);
		}
		//add the new CONTROLLER value 
		if (nV!= undefined && nV!="")
		{
			vVectRecup.push(nV.NAME);
			vVectRecup = vVectRecup.removeduplicates();
		}
		
		withoutlocking
		{
			withoutalerts{
				//update MANAGERS field
				this.MANAGERS=vVectRecup.join(",");
			}
		}
	}
}

var slot="OpxResource".findClass().getSlot("CONTROLLER"); 
slot.modifybeforeMethod = sp_res_modifybefore_controller;

// Function used in alert SP_AL_RES_UPDATE_TC_MANAGERS
function sp_res_update_tc_managers()
{
	withoutalerts{
		
		var vec = new vector();

		// Manager must be the first item of the list
		if (this.MANAGER!=undefined && this.MANAGER!="")
		{
			vec.push(this.MANAGER.printattribute());
		}
		
		// Add "G_ADM,G_RBS"
		vec.push("G_ADM");
		vec.push("G_RBS");
		
		// Add Extra values
		// We get the value that were entered by user
		var input_value="";
		if (this.MANAGERS!=undefined && this.MANAGERS!="")
			input_value= this.MANAGERS;
		
		// We get the list of mandatory value
		var vec_to_compare=vec;
		if (this.CONTROLLER!=undefined && this.CONTROLLER!="")
		{
			vec_to_compare.push(this.CONTROLLER.printattribute());
		}	

		// We get the non mandatory extra vallues entered by user
		var extra_value="";
		if (input_value!="")
			extra_value="LIST_DIFFERENCE".call(input_value,vec_to_compare.join(","));
		
		// Add extra value to vector
		for (var Obj in extra_value.parselist())
		{
			vec.push(Obj);
		}	
		
		// Add controler (Last item)
		if (this.CONTROLLER!=undefined && this.CONTROLLER!="")
		{
			vec.push(this.CONTROLLER.printattribute());
		}
			
		vec = vec.removeduplicates();
		
		this.MANAGERS=vec.join(",");
	}
}

 
//
//	NAME	: SP_JS_SEND_DUP_TRIAL_MAIL
//	AUTHOR  : KSH
//  PURPOSE : COMPASS v6 , Function for Sending mail of Duplicate trial code
//
//  HISTORY :
//var revision_number ="1.0";

////////////////////////////////////////////////////////
//	SEND_MAIL_TEMPO_EZ_DUP_TRIAL
//	function to send the Duplicate trial code details to Tempo admin
////////////////////////////////////////////////////////

function SP_JS_SEND_MAIL_TEMPO_EZ_DUP_TRIAL(s_trial)
{
	var dup_onb = s_trial.parseInt();
	for ( var ez_trial in "opxActivity" where ez_trial.ONB == dup_onb )
	{
	   var recipients = ez_trial.SP_NF_S_EZ_TEMPO_MAIL_DEST; 
	   var subject = "Duplicate Trial detected in TEMPO Export Zone";
	   var body  = ez_trial.SP_NF_S_EZ_TEMPO_MAIL_BODY; 
	   
	   var sender= "TEMPO-EZ-EXPORT@OPX2";
	   
	   var PlistForMessage = new vector();
	   PlistForMessage.push("smtp-server");
	   PlistForMessage.push("SMTP-EU.SANOFI.COM");
	   PlistForMessage.push("from");
	   PlistForMessage.push(sender);
	   PlistForMessage.push("to");
	   PlistForMessage.push(recipients);
	   PlistForMessage.push("subject");
	   PlistForMessage.push(subject);
	   PlistForMessage.push("body");
	   PlistForMessage.push(body);
	   PlistForMessage.push("Content-Type") ;
	   PlistForMessage.push("text/html");
	   PlistForMessage.push("additional-headers") ;
	   PlistForMessage.push("Importance,High,X-Priority,1,X-MSMail-Priority,High".parseList()) ;
	   //sending the message
	   if (PlistForMessage.length > 0 && context.SP_GS_B_ENABLE_MAIL_ALERTS) {  
		 context.sendmailwithplist(PlistForMessage);
	   }
	}
}
////////////////////////////////////////////////////////
//	SEND_MAIL_TEMPO_EZ_DUP_TRIAL
//	Function to get the duplicate trial code onb number and call the funtion to send email for each duplicated entries on trial table
////////////////////////////////////////////////////////

function SP_JS_TEMPO_EZ_TRIAL_DUP_DATA()
{
	
	var o_connexion ;
	
	if (context.callstringformula("$DATABASE_NAME")=="DATABASE_PROD") {
	o_connexion = "Opxenvdbconnection".findclass().get("SP_DS_COMPASS_EZ_PRD"); 
	}
	else if (context.callstringformula("$DATABASE_NAME")=="DATABASE_UAT"){
	o_connexion = "Opxenvdbconnection".findclass().get("SP_DS_COMPASS_EZ_AT");
	}
	else{
	o_connexion = "Opxenvdbconnection".findclass().get("SP_DS_COMPASS_EZ_DEV");
	}
	Sqlwithdatabasetransaction (o_connexion) 
	{
		if(o_connexion.sqltestconnection())
		{
			var sql_result = sqlselect("TRIAL",{"ID_TRIAL"},{"STRING"},"id_trial in (select a.IDT from(select b.trial_code TC,max(b.id_trial) IDT,  count(*) from (select to_number(id_trial) id_trial,trial_code from TRIAL) b group by b.trial_code having count(*)>1) a)"); 
			for (var s_res in sql_result)
			{
				SP_JS_SEND_MAIL_TEMPO_EZ_DUP_TRIAL(s_res[0]);
			}
		}
	}
}
SP_JS_TEMPO_EZ_TRIAL_DUP_DATA.exportfunction();

//
//	NAME	: SP_JS_SEND_DUP_TRIAL_MAIL
//	AUTHOR  : KSH
//  PURPOSE : COMPASS v6 , Function for Sending mail of Duplicate trial code
//
//  HISTORY :
//var revision_number ="1.0";

////////////////////////////////////////////////////////
//	SEND_MAIL_TEMPO_EZ_DUP_TRIAL
//	function to send the Duplicate trial code details to Tempo admin
////////////////////////////////////////////////////////

function SP_JS_SEND_MAIL_TEMPO_EZ_DUP_TRIAL(s_trial)
{
	var dup_onb = s_trial.parseInt();
	for ( var ez_trial in "opxActivity" where ez_trial.ONB == dup_onb )
	{
	   var recipients = ez_trial.SP_NF_S_EZ_TEMPO_MAIL_DEST; 
	   var subject = "Duplicate Trial detected in TEMPO Export Zone";
	   var body  = ez_trial.SP_NF_S_EZ_TEMPO_MAIL_BODY; 
	   
	   var sender= "TEMPO-EZ-EXPORT@OPX2";
	   
	   var PlistForMessage = new vector();
	   PlistForMessage.push("smtp-server");
	   PlistForMessage.push("SMTP-EU.SANOFI.COM");
	   PlistForMessage.push("from");
	   PlistForMessage.push(sender);
	   PlistForMessage.push("to");
	   PlistForMessage.push(recipients);
	   PlistForMessage.push("subject");
	   PlistForMessage.push(subject);
	   PlistForMessage.push("body");
	   PlistForMessage.push(body);
	   PlistForMessage.push("Content-Type") ;
	   PlistForMessage.push("text/html");
	   PlistForMessage.push("additional-headers") ;
	   PlistForMessage.push("Importance,High,X-Priority,1,X-MSMail-Priority,High".parseList()) ;
	   //sending the message
	   if (PlistForMessage.length > 0 && context.SP_GS_B_ENABLE_MAIL_ALERTS) {  
		 context.sendmailwithplist(PlistForMessage);
	   }
	}
}
////////////////////////////////////////////////////////
//	SEND_MAIL_TEMPO_EZ_DUP_TRIAL
//	Function to get the duplicate trial code onb number and call the funtion to send email for each duplicated entries on trial table
////////////////////////////////////////////////////////

function SP_JS_TEMPO_EZ_TRIAL_DUP_DATA()
{
	
	var o_connexion ;
	
	if (context.callstringformula("$DATABASE_NAME")=="DATABASE_PROD") {
	o_connexion = "Opxenvdbconnection".findclass().get("SP_DS_COMPASS_EZ_PRD"); 
	}
	else if (context.callstringformula("$DATABASE_NAME")=="DATABASE_UAT"){
	o_connexion = "Opxenvdbconnection".findclass().get("SP_DS_COMPASS_EZ_AT");
	}
	else{
	o_connexion = "Opxenvdbconnection".findclass().get("SP_DS_COMPASS_EZ_DEV");
	}
	Sqlwithdatabasetransaction (o_connexion) 
	{
		if(o_connexion.sqltestconnection())
		{
			var sql_result = sqlselect("TRIAL",{"ID_TRIAL"},{"STRING"},"id_trial in (select a.IDT from(select b.trial_code TC,max(b.id_trial) IDT,  count(*) from (select to_number(id_trial) id_trial,trial_code from TRIAL) b group by b.trial_code having count(*)>1) a)"); 
			for (var s_res in sql_result)
			{
				SP_JS_SEND_MAIL_TEMPO_EZ_DUP_TRIAL(s_res[0]);
			}
		}
	}
}
SP_JS_TEMPO_EZ_TRIAL_DUP_DATA.exportfunction();

 
//  FILE    : SP_JS_TEXT_COLOR.ojs
// 
//  AUTHOR  : oroudaire
// 
//  VERSION : 1.0
// 
//  PURPOSE : Text color handler for SP_REP_PM_YEARLY_PKM and SP_REP_PMPL_PKM_YEARLY_PKM reports
// Add color for the field "Overall project achievement"
// 
//  HISTORY :
var revision_number ="1.1";
//  Created  by oroudaire 06/09/2011 16:23
//  Revision 1.1  2017/04/13 mpa: import du script pour Compass V6 


// fonction permettant de mettre le texte en couleur en fonction du contenu de la cellule.
// Utilis  pour le champ "Overall project achievement"
function sp_PM_color_text_handler(slot)
{
	var Red = Color(255,0,0);
	var Green  = Color(0,192,0);
	var Black  = Color(0,0,0);
	//var Blue   = Color(15,0,255);

	var val = this.get(slot.COMMENT);

	if (val == "BELOW") return Red;
	if (val == "MET") return Black;
	if (val == "ABOVE") return Green;
}

writetolog("Script SP_JS_TEXT_COLOR loaded with version ~a ", revision_number);

//  FILE    : SP_JS_TEXT_COLOR.ojs
// 
//  AUTHOR  : oroudaire
// 
//  VERSION : 1.0
// 
//  PURPOSE : Text color handler for SP_REP_PM_YEARLY_PKM and SP_REP_PMPL_PKM_YEARLY_PKM reports
// Add color for the field "Overall project achievement"
// 
//  HISTORY :
var revision_number ="1.1";
//  Created  by oroudaire 06/09/2011 16:23
//  Revision 1.1  2017/04/13 mpa: import du script pour Compass V6 


// fonction permettant de mettre le texte en couleur en fonction du contenu de la cellule.
// Utilis  pour le champ "Overall project achievement"
function sp_PM_color_text_handler(slot)
{
	var Red = Color(255,0,0);
	var Green  = Color(0,192,0);
	var Black  = Color(0,0,0);
	//var Blue   = Color(15,0,255);

	var val = this.get(slot.COMMENT);

	if (val == "BELOW") return Red;
	if (val == "MET") return Black;
	if (val == "ABOVE") return Green;
}

writetolog("Script SP_JS_TEXT_COLOR loaded with version ~a ", revision_number);

 
//
//  PURPOSE : COMPASS v6 Time Tracking functions (apart from sending E-mail to offenders which is handeled by SP_JS_RET_TC_DEFAULTERS)
//
//	SCRIPT NAME : SP_JS_TIME_TRACKING
//
//	VERSION HISTORY :

var revision_number ="1.10";

//	Revision 1.10 2018/10/26 bcordel
//	RITM0558945 : adding sp_js_display_status_history.
//	Revision 1.9 2018/09/12 bcordel
//	ITS-INC1016674 : adding sp_js_display_input_rules.
//	Revision 1.8 2018/07/24 bcordel
//	ITS-INC1211303 : sp_js_res_has_availability_tc_period exclude inactive availability.
//	Revision 1.7 2018/06/11 bcordel
//	ITS-INC0860344 : SP_update_act_desc no more use for the function.
//	Revision 1.6 2018/06/11 lfavre
//  ITS-INC0646155 - Modification of function sp_tc_filter_my_contextual_department_activities to use uppercase to check project code
//	Revision 1.5 2018/06/07 lfavre
//  ITS-INC0646155 - Modification of function sp_tc_filter_my_contextual_department_activities to user project code as filter
//	Revision 1.4 2018/05/22 lfavre
//  ITS-INC0593625 - Creation of function sp_has_child_filter_RBS_ATRD
//	Revision 1.3 2018/05/21 lfavre
//  ITS-INC0646155 - Modification of function sp_tc_filter_my_contextual_department_activities
//	Revision 1.2 2018/05/15 lfavre
//  LFA : Creation of functions sp_res_has_timecard, sp_res_has_timecard_not_integrated, sp_res_has_timecard_not_validated and sp_res_has_timecard_not_completed
//  LFA : Creation of functions sp_total_number_timecard_resource, sp_total_number_validated_timecard_resource, sp_total_number_integrated_timecard_resource, sp_js_res_has_availability_tc_period and  sp_ats_is_timecard_loaded
//  LFA : Creation of function sp_js_ba_integrate_tc to launch integration on integration date
//	Revision 1.1 2018/03/16 bcordel
//	ITS-INC0439530 : Modification of function sp_tc_filter_my_contextual_activities to use getinternalvalue on project state
//	ITS-INC0439530 : Modification of function sp_tc_filter_my_contextual_department_activities to use getinternalvalue on project state
//	ITS-INC0439530 : Modification of function SP_update_act_desc to not copy english desc when the french one is empty.
//
//------------------previous revisions-----------------------------------
//		07/12/16 - CFN : SP_tc_display_current_timesheet added
//  	22/11/16 - CFN : SP_getCurrentFiscalMonthStart and SP_getCurrentFiscalMonthEnd creation
//  	03/10/16 - CFN : File creation > functions SP_tc_display_validation_process_without_broadcast, sp_js_retrieve_my_activity_list and sp_js_retrieve_all_activities_list added
//  Modified  by ksk 11:30 28/07/2017, Timecard total annotation message
//  Modified  by ksk 16:11 01/08/2017, Timecard integration restriction to current month
//  Modified  by tgi 17:07 24/10/2017, Offenders period is the same that current timecard period
//  Modified  by flc 09:21 24/11/2017, Deletion of 'sp_tt_last_friday_integration' function (not used anymore)
//  Modified  by flc 17:00 22/01/2018, Replace functions 'sp_js_retrieve_my_activity_list' and 'sp_js_retrieve_obs_element_level_3' with 'sp_js_tt_retrieve_my_activities', 'sp_js_tt_retrieve_my_department_activities' and 'sp_js_tt_retrieve_selection_of_activities'


//----------------------------------------------- FR Desc -----------------------------------------------

method SP_update_act_desc on opxactivity (){
	//	ITS-INC0860344 : changing Fr desc functionnality
/* 	withoutlocking{
		var desc_EN = context.callstringformula("VALEUR_CHAINE_LANGAGE(\"Activity\",\"" + this.index + "\",\"DESC\",\"english\")") ;
		var desc_FR = this.SP_AA_S_FRENCH_DESC;
		//ITS-INC0439530 
		 // if(desc_FR == "") desc_FR=desc_EN;
		// this.DESC="{/E" + desc_EN + "/F" + desc_FR + "}"; 
		if(desc_FR != "" && desc_FR != undefined)
		{
			this.DESC="{/E" + desc_EN + "/F" + desc_FR + "}";
		}else{
			this.DESC=desc_EN;
		}
	} */
}

//----------------------------------------------- List Resources -----------------------------------------------

//Displays resource's current timesheet
function SP_tc_display_current_timesheet(){
	_tc_first_not_handled();
	
	// Requirement 4.1.B Keep access to TTA/Manager/FP to multiple resources in Timecard
	var d_date = new date();
	context._TC_AA_D_TC_SD_TO_DISPLAY = d_date;
	_tc_change_date();
}
SP_tc_display_current_timesheet.exportfunction();

//----------------------------------------------- TIMESHEET -----------------------------------------------

//Function used to display the right process status depending on resource Timlecard profile (with or without validation by another person)
function SP_tc_display_validation_process_without_broadcast(){
	if(context._tc_da_current_tc.resource.TIMECARD_PROFILE instanceof opx_TIMECARD_PROFILE)
	{
		return false;
	}
	else
	{
		return true;
	}
}
SP_tc_display_validation_process_without_broadcast.exportfunction("","boolean","test");

//-------------------------------------------- TIMECARD SEARCH --------------------------------------------

// Function called when search must be applied on a subset of activities only : My department activities
// Return the list of activities with the same OBS as the level 3 OBS_ELEMENT of the current resource + level 1 activities
function sp_tc_filter_my_contextual_department_activities(f) {
	var noDoubleSecure = new hashtable("OBJECT");
	var filter = context._TCM_AA_S_SA_ACTIVITYFILTER;
	var vRes = "OpxResource".get(context._TC_AA_S_RESOURCE);
	if(vRes != undefined && vRes instanceOf OpxResource)
	{
		// Retrieve the level 3 OBS_ELEMENT of the current resource
		var vObs = vRes.OBS_ELEMENT;
		while (vObs != undefined && vObs instanceOf opxObsElement && vObs.LEVEL>3)
		{
			vObs=vObs.OBS_ELEMENT;
		}
		if(vObs != undefined && vObs instanceOf opxObsElement)
		{
			if(filter!="")
			{
	
				fromobject(vObs)
				{
					// ITS-INC0646155 --> We also check the project code for activities
					for(var act in "OpxActivity" where act!=undefined && act.OBS==vObs && act._TC_AA_B_VISIBLE_IN_TC && (act.SP_NF_S_PJT_CODE==filter.toUpperCase() || act.matchstring(filter)))
					{
				
						// ITS-INC0646155 - Double activities --> Check activity is not already present
						if(noDoubleSecure.get(act,false)==false){
							noDoubleSecure.set(act,true);
							f.call(act);
						}
					}
				}
				// Get level 1 activities
				for (var project in opxProject where project.getinternalvalue("STATE").ToString()=="ACTIVE" && project.matchstring(filter)) {
					var topLevelWbs = top_level_ws(project);
					if(topLevelWbs instanceof OpxWbsElement)
					{
						if(topLevelWbs._TC_AA_B_VISIBLE_IN_TC){
							if(noDoubleSecure.get(topLevelWbs,false)==false){
								noDoubleSecure.set(topLevelWbs,true);
								f.call(topLevelWbs);
							}
						}
					}
				}
			} else {
				fromobject(vObs)
				{
					for(var act in "OpxActivity" where act!=undefined && act.OBS==vObs && act._TC_AA_B_VISIBLE_IN_TC)
					{
				
						// ITS-INC0646155 - Double activities --> Check activity is not already present
						if(noDoubleSecure.get(act,false)==false){
							noDoubleSecure.set(act,true);
							f.call(act);
						}
					}
				}
				// Get level 1 activities
				for (var project in opxProject where project.getinternalvalue("STATE").ToString()=="ACTIVE") {
					var topLevelWbs = top_level_ws(project);
					if(topLevelWbs instanceof OpxWbsElement)
					{
						if(topLevelWbs._TC_AA_B_VISIBLE_IN_TC){
							if(noDoubleSecure.get(topLevelWbs,false)==false){
								noDoubleSecure.set(topLevelWbs,true);
								f.call(topLevelWbs);
							}
						}
					}
				}
			}
		}
	}
}

// Function called when search must be applied on a subset of activities only : My activities
function sp_tc_filter_my_contextual_activities(f) {
	var filter = context._TCM_AA_S_SA_ACTIVITYFILTER;
	var vRes = "OpxResource".get(context._TC_AA_S_RESOURCE);
	if(vRes != undefined && vRes instanceOf OpxResource)
	{
		// Build activity list based on Resource and parent Resource allocations
		var vActVect = new vector();
		for (var o_alloc in vRes.get("ALLOCATIONS") where o_alloc.file.getinternalvalue("STATE").ToString()=="ACTIVE")
		{
			vActVect.push(o_alloc.ACTIVITY);
		}
		var o_parent_res = vRes.child_of;
		if(o_parent_res != undefined && o_parent_res instanceOf OpxResource)
		{
			for (var o_alloc in o_parent_res.get("ALLOCATIONS") where o_alloc.file.getinternalvalue("STATE").ToString()=="ACTIVE")
			{
				if(o_alloc.SPAS_RA_SITE == vRes.SP_RA_SITE)
				{
					vActVect.push(o_alloc.ACTIVITY);
				}
			}
		}
		vActVect = vActVect.removeduplicates();
		// Loop on activity vector to display in timecard
		for (var act in vActVect)
		{
			if(act instanceof opxActivity && act != undefined)
			{
				// Use of 'indexrequest' is not possible -> use of 'MatchString' instead
				if(act._TC_AA_B_VISIBLE_IN_TC && act.MatchString(filter)){
					f.call(act);
				}
			}
		}
	}
}

// Replace standard function '_TC_filter_my_contextual_projects_activities' to call specific functions in case "My department activities" or "My activities" filter is activated. Function is here for performances purposes when filters "My department activities" or "My activities" are activated
function _TC_filter_my_contextual_projects_activities(f) {
	if ((!context.SP_AA_B_TC_HISTORY) && context.SP_AA_B_TC_DPT_ACT)
	{
		// My department activities
		sp_tc_filter_my_contextual_department_activities(f);
	} else if ((!context.SP_AA_B_TC_HISTORY) && (!context.SP_AA_B_TC_ALL_ACT) && (!context.SP_AA_B_TC_DPT_ACT))
	{
		// My activities
		sp_tc_filter_my_contextual_activities(f);
	} else {
		// Standard case
		_TC_filter_my_contextual_projects_activities_common(f);
	}
}

//-------------------------------------------- TIMECARD DISPLAY --------------------------------------------
 
// TEMPO - redefining function used by _tc_input_grid_2() and _tc_input_grid_5()

function _tc_annotation_handler(slot) {
  if (slot.TCCOLUMNINPUT==true) {
    if (this.Activity==_tc_fetch_total_activity()) {
      var offset = _tc_computeSlotOffset(slot);
      if(offset == false){
        return false;
      }
      var StandardValue=this.timecard.getTotalLoadForColumn(offset);
      // for IS-00026428 this conversion seems to bealready done by getminincurredfortimecardcolumn
      //var hours_per_day = context.getinternalvalue("DAY-TO-HOURS");
      var ExpectedValue=math.round(this.timecard.getminincurredfortimecardcolumn(offset,StandardValue));
      var MaxValue = math.round(this.timecard.getmaxincurredfortimecardcolumn(offset,StandardValue));
      /* for IS-00026428 this conversion seems to be already done by getminincurredfortimecardcolumn
         if (context._TC_DA_S_COLUMN_MIN_INCURRED != "HANDLED-VALUE") {
         if (context._TC_DA_UNIT.duration < 720) {
         ExpectedValue = (ExpectedValue/1440) * hours_per_day * 60;
         }
         }
      */
	  var weekmsg = "";
      var bubble = "";
      var profile = "OpxTimeCardProfile".get(context._TC_NF_S_CUR_TC_PROF)
      if(profile instanceOf OpxTimeCardProfile && profile.TIME_PERIOD == write_text_key("month")+"/"+write_text_key("week")){
        weekmsg = Char(10) + Char(13) + StandardValue.toString("####") + " "  +write_text_key("Frequency.Days") + " " +  write_text_key("HomeNewsFeed.Messages._RM_REVIEW_PT_COMPACT_DEMAND3") + "  " + write_text_key("week");
        bubble= " : "+"<span style='font-size:11px; font-weight:bold; color:#BA0D7B;'>"+ weekmsg + "</span>";
        bubble = html_closeTagsOnFullString(bubble);
      }
      if (context._TC_AA_B_PERC_INPUT) {
        ExpectedValue=_tc_switch_in_percentage(ExpectedValue,"divide",this.timecard,true,slot.TCCOLUMNINDEX,"LOAD");
      }
      // var msg = write_text_key("timeCard.Expected")+" ("+context._tc_da_unit.presentation+") "+ExpectedValue.tostring(_tc_numberFormat) + bubble;
      var msg = "~a minimum ~a maximum ~a (~a)".format(write_text_key("timeCard.Expected"),
      ExpectedValue.tostring(_tc_numberFormat),
      MaxValue.tostring(_tc_numberFormat),context._tc_da_unit.plural);
      
      return msg;
    }
    else {
      return this._tc_reader_annotation(slot.TCCOLUMNINDEX);
    }
  }
  return false;
}

function sp_tc_change_date_offenders() {

	// memorize dates of Timecard Unit 
	context.SP_TC_AA_D_CURR_TC_SD_TO_DISPLAY = context._TC_AA_D_TC_SD_TO_DISPLAY;

	context._TC_AA_D_TC_SD_TO_DISPLAY = new date();

	var tc=context._tc_da_current_tc;
	if(tc == undefined) {
	tc = _tc_load_current_tc();
	}
	var res = tc.resource;
	var EffectiveStartDate=res.EFFECTIVE_START_DATE;
	var EffectiveEndDate=res.EFFECTIVE_END_DATE;
	context._TC_AA_D_TC_ORIGIN_DATE = new date (context.getinternalvalue("START-DATE")*60);
	if (context._TC_AA_D_TC_ORIGIN_DATE == undefined) {
	context._TC_AA_D_TC_ORIGIN_DATE = context.calldateformula("$time_window_start");
	}
	var sd = context._TC_AA_D_TC_ORIGIN_DATE;
	context._TC_AA_D_TC_BROADCASTING_END_DATE = new date (context.getinternalvalue("END-DATE")*60);
	var ed = context._TC_AA_D_TC_BROADCASTING_END_DATE;
	var dateNumber = context._TC_AA_D_TC_SD_TO_DISPLAY;
	context._TC_DA_PERIOD = "OpxTimeUnit".get(context.getinternalvalue("PERIOD").tostring());
	var timecardInputPeriod = context._TC_DA_PERIOD.timeunit;
	//If date chosen outside of the effective dates of the resource
	if ((EffectiveEndDate!=undefined && EffectiveEndDate<dateNumber) || (EffectiveStartDate!=undefined && EffectiveStartDate>dateNumber)) {
	if (EffectiveEndDate==undefined) {
	  EffectiveEndDate="";
	} else {
	  if (EffectiveEndDate<dateNumber) {
		var EndDateStartPeriod = _tc_returnDateInRange(EffectiveEndDate.previous(timecardInputPeriod),sd,ed);
		context._TC_AA_D_TC_SD_TO_DISPLAY=EndDateStartPeriod;
		var end_tc = _GetOrCreateTimeCard(res.onb,EndDateStartPeriod.sdate,false);
		if(end_tc instanceof OpxTimeCard) {
		  _tc_set_current_tc(end_tc);
		}
	  }
	  EffectiveEndDate=EffectiveEndDate.tostring(context.dateformat1);
	}
	if (EffectiveStartDate==undefined) {
	  EffectiveStartDate="";
	} else {
	  if (EffectiveStartDate>dateNumber) {
		var StartDateStartPeriod= _tc_returnDateInRange(EffectiveStartDate.next(timecardInputPeriod),sd,ed);
		context._TC_AA_D_TC_SD_TO_DISPLAY=StartDateStartPeriod;
		var start_tc = _GetOrCreateTimeCard(res.onb,StartDateStartPeriod.sdate,false);
		if(start_tc instanceof OpxTimeCard) {
		  _tc_set_current_tc(start_tc);
		}
	  }
	  EffectiveStartDate=EffectiveStartDate.tostring(context.dateformat1);
	}
	return false;
	} else {
	var OriginDate=sd.sdate;
	var AccountingPeriod=context.getinternalvalue("ACCOUNTING-PERIOD").tostring();
	if (EffectiveStartDate!=undefined) {
	  OriginDate=math.max(EffectiveStartDate.sdate,OriginDate);
	}
	var tmp = context.getinternalvalue("TIME-PERIOD").tostring();
	//The origin date must be rounded to the previous date in tc period
	//If the "rounded" date is <= than the date rounded with accounting period => Accounting period date taken

	var OriginDateDate=new date(OriginDate*60);
	OriginDateDate = OriginDateDate.toString("JJ/MM/AA HH:II");
	OriginDate=context.CallDateFormula("PERIOD_START(DATE(\""+OriginDateDate+"\",\"JJ/MM/AA HH:II\"),\""+timecardInputPeriod+"\",0)").sdate;
	var OriginDateAccounting=context.CallDateFormula("PERIOD_START(DATE(\""+OriginDateDate+"\",\"JJ/MM/AA HH:II\"),\""+AccountingPeriod+"\",0)").sdate;
	OriginDate=math.max(OriginDate,OriginDateAccounting);
	var DateVector = "";
	if (sd != -1 && ed != -1) {
	  if (context.getinternalvalue("ENABLE-OVERRIDE-END-DATE") == true && dateNumber.sdate > sd.sdate) {
		DateVector = new DateVector(context._TC_DA_PERIOD,sd,dateNumber);
	  } else {
		if (dateNumber.sdate < sd.sdate) {
		  dateNumber=tc.startdate;
		  if (dateNumber.sdate < sd.sdate) {
			dateNumber = sd;
		  }
		}
		DateVector = new DateVector(context._TC_DA_PERIOD,sd,ed);
	  }
	  if (dateNumber != undefined) {
		if (DateVector.position(dateNumber) instanceof Number) {
		  var next_tc = _GetOrCreateTimeCard(res.onb,dateNumber.sdate,false);
		  if(next_tc instanceof OpxTimeCard) {
			_tc_set_current_tc(next_tc);
		  }
		} else {
		  DateVector.push(dateNumber);
		  var vec = DateVector.get(new symbol("ARRAY","KEYWORD")).sort(">");
		  var pos = vec.position(dateNumber);
		  if (dateNumber != vec[0]) {
			dateNumber = vec[pos+1];
			//Checking origin date
			if (dateNumber.sdate<OriginDate) {
			  dateNumber=new date(OriginDate*60);
			}
			var next_tc = _GetOrCreateTimeCard(res.onb,dateNumber.sdate,false);
			if(next_tc instanceof OpxTimeCard) {
			  _tc_set_current_tc(next_tc);
			}
		  } else {
			context._TC_AA_D_TC_SD_TO_DISPLAY = tc.startdate;
		  }
		}
	  }
	} else {
	  log("missing definition of timecard origin date or of timecard broadcasting end date or both");
	}
	return false;
	}	
	
}

// Function used to check that the minimum required has been input in the timesheet
function sp_check_tc_valid_input(resource,date,trace){

	var res = "OpxResource".get(resource);
	var current_tc = _GetOrCreateTimeCard(res.onb,date.sdate,trace);
	// Minimum required for the timesheet
	var min_load = current_tc.getmintotalincurredfortimecard()
	// Actual load for the timesheet
	var SheetLoad=current_tc._tc_ReturnTotalLoad();
	var load = _tc_read_time_unit(SheetLoad,res.time_unit);
	var stat = load.checkunderflow(min_load)
	if (stat) 
		return false
	else 
		return true
}
sp_check_tc_valid_input.exportfunction({"STRING","DATE","BOOLEAN"},"BOOLEAN")

function sp_check_tc_Offender(resource,date,trace){
	
	var vBool = true;
	var Res = "OpxResource".get(resource);
	var current_tc = _GetOrCreateTimeCard(Res.onb,date.sdate,trace);
	if(current_tc.status =="Integrated" || current_tc.status =="Validated"){
		vBool = false
		return vBool
	}

	return vBool
}
sp_check_tc_Offender.exportfunction({"STRING","DATE","BOOLEAN"},"BOOLEAN")

function get_nb_timecard(useless){

	var date_Actual = "";
	var Count = 0;
	for (var ctr = 0; ctr<ctr +1 ;ctr++){
		date_Actual = context.calldateformula("period_start(OC.SP_NF_D_ATS_OFF_SD,\"Time card period\","+ctr+")").sdate
		
		if (date_Actual-context.SP_NF_D_ATS_OFF_FD.sdate>=0){
			break;
			return(Count)
		}
	var ctr1 = ctr +1 ;
		var date_Actual1 = context.calldateformula("period_start(OC.SP_NF_D_ATS_OFF_SD,\"Time card period\","+ctr1+")").sdate -1440
		var resource_has_availability = sp_js_resource_avail_in_period(date_Actual,date_Actual1)
		
		  if(resource_has_availability){
			Count = Count +1;
		 }
}
return(Count)
}
get_nb_timecard.exportfunction({"STRING"},"NUMBER")


function sp_js_resource_avail_in_period(periodstart,periodend){
	var vAvail = this.SP_NF_RES_AVAIL_LIST.parselist(",")
	var res = true
	for (var each in vAvail){
		var avail = "OpxAVAILABILITY".get(each.parsenumber()) 
		if(avail != undefined && avail.sp_ra_avail_type !="Inactive" ){
			if (avail.FD.sdate!=undefined && avail.SD.sdate!=undefined && periodend >= avail.SD.sdate && periodstart<avail.FD.sdate) 
				{res= true ;
				break;}
			else if (avail.SD.sdate!=undefined && avail.FD.sdate==undefined && periodend>=avail.SD.sdate) 
				{res = true;
				break; }
			else   
				{res = false   }
		}
	}
	 return res
}
sp_js_resource_avail_in_period.exportfunction({"DATE","DATE"},"BOOLEAN")

// Function used to load the timecard before checking it content
function SP_load_TC(resource,date)
{
	var current_tc = _GetOrCreateTimeCard("opxresource".get(resource).onb,date.sdate,false);
	return "Y";
	
}
SP_load_TC.exportfunction({"STRING","DATE"},"STRING")


function sp_js_ba_integrate_tc()
{
	var date_of_day = new date();
	if("PRINT_DATE".call(date_of_day,"DD/MM/YY")=="PRINT_END_DATE".call(SP_getFiscalMonthBound(date_of_day,"end"),"DD/MM/YY"))
	{	
		writeToLog("Current date is the date of integration : start of integration of TimeCards.");
		context.callmacro("SP_BA_INTEGRATE_TC");
		writeToLog("End of integration of TimeCards.");
	}
	else
	{
		writeToLog("Current date is not the date of integration.");
	}
}
sp_js_ba_integrate_tc.exportfunction();

//////////////////////////////////////////////////
// Functions for Activity Tracking Statistics/////
/////////////////////////////////////////////////

// Function that return the number of timecard of the resource on the selected period
function sp_total_number_timecard_resource(NoArg)
{
	var res = this;
	var total=0;
	if res.level==6
		total=res.SP_NF_N_NB_TC_PERIOD;
	else
	{
		fromObject(res)
		{
			for (var Child_Res in "OpxResource" where Child_Res.level==6 && Child_Res.SP_NF_B_ATS_RES_FILTER)
			{
				total=total+Child_Res.SP_NF_N_NB_TC_PERIOD;
			}
		}
	}
	
	return total;		
}
sp_total_number_timecard_resource.exportfunction({"STRING"},"NUMBER");

// Function that return the number of validated timecard of the resource on the selected period
function sp_total_number_validated_timecard_resource(NoArg)
{
	var res = this;
	var total=0;
	if res.level==6
		total=res.SP_NF_N_NB_TC_PERIOD_VAL;
	else
	{
		fromObject(res)
		{
			for (var Child_Res in "OpxResource" where Child_Res.level==6 && Child_Res.SP_NF_B_ATS_RES_FILTER)
			{
				total=total+Child_Res.SP_NF_N_NB_TC_PERIOD_VAL;
			}
		}
	}
	
	return total;		
}
sp_total_number_validated_timecard_resource.exportfunction({"STRING"},"NUMBER");

// Function that return the number of integrated timecard of the resource on the selected period
function sp_total_number_integrated_timecard_resource(NoArg)
{
	var res = this;
	var total=0;
	if res.level==6
		total=res.SP_NF_N_NB_TC_PERIOD_INT;
	else
	{
		fromObject(res)
		{
			for (var Child_Res in "OpxResource" where Child_Res.level==6 && Child_Res.SP_NF_B_ATS_RES_FILTER)
			{
				total=total+Child_Res.SP_NF_N_NB_TC_PERIOD_INT;
			}
		}
	}
	
	return total;		
}
sp_total_number_integrated_timecard_resource.exportfunction({"STRING"},"NUMBER");

// Function to check that resource has avaibility on the period of the timecard
function sp_js_res_has_availability_tc_period(res_id,date)
{
	var res = "OpxResource".get(res_id);
	var tc_start_date = date;
	var tc_end_date = "PERIOD_START".call(date,"Time card period",1);
	
	for (var avail in res.get("Availabilities") where (avail.SD==undefined || avail.SD==-1 || avail.SD<tc_end_date) && (avail.FD== undefined || avail.FD==-1 || avail.FD>tc_start_date) && avail.SP_RA_AVAIL_TYPE.printattribute()!="Open" && avail.SP_RA_AVAIL_TYPE.printattribute()!="Inactive")
	{
		return true;
	}
	
	return false;
}
sp_js_res_has_availability_tc_period.exportfunction({"STRING","DATE"},"BOOLEAN");


// Function to check if the Timecard is loaded
function sp_ats_is_timecard_loaded(res_id,date)
{
	var vRes = "OpxResource".get(res_id);
	for (var tc in vRes.get("TIME-CARDS") where tc.START_DATE==date)
	{
		return true;
	}
	return false
}
sp_ats_is_timecard_loaded.exportfunction({"STRING","DATE"},"BOOLEAN");

// Function that check that there is a child resource with a timecard on the period
function sp_res_has_timecard(resource,date)
{
	var res = "opxresource".get(resource);
	
	fromObject(res)
	{
		for (var Child_Res in "OpxResource" where Child_Res.level==6 && Child_Res.SP_NF_B_ATS_RES_FILTER)
		{
			for (var tc in Child_Res.get("TIME-CARDS") where tc.START_DATE==date)
			{
				return true;
			}
		}
	}
	return false;
}
sp_res_has_timecard.exportfunction({"STRING","DATE"},"BOOLEAN");

// Function that check that there is a child resource with a not integrated timecard on the period
function sp_res_has_timecard_not_integrated(resource,date)
{
	var res = "opxresource".get(resource);
	
	fromObject(res)
	{
		for (var Child_Res in "OpxResource" where Child_Res.level==6 && Child_Res.SP_NF_B_ATS_RES_FILTER)
		{
			for (var tc in Child_Res.get("TIME-CARDS") where tc.START_DATE==date && tc.status !="Integrated")
			{
				return true;
			}
		}
	}
	return false;
}
sp_res_has_timecard_not_integrated.exportfunction({"STRING","DATE"},"BOOLEAN");

// Function that check that there is a child resource with a not integrated/validated timecard on the period
function sp_res_has_timecard_not_validated(resource,date)
{
	var res = "opxresource".get(resource);
	
	fromObject(res)
	{
		for (var Child_Res in "OpxResource" where Child_Res.level==6 && Child_Res.SP_NF_B_ATS_RES_FILTER)
		{
			for (var tc in Child_Res.get("TIME-CARDS") where tc.START_DATE==date && tc.status !="Integrated" && tc.status !="Validated")
			{
				return true;
			}
		}
	}
	return false;
}
sp_res_has_timecard_not_validated.exportfunction({"STRING","DATE"},"BOOLEAN");

// Function that check that there is a child resource with a not completed timecard on the period
function sp_res_has_timecard_not_completed(resource,date)
{
	var res = "opxresource".get(resource);
	var min_load;
	var SheetLoad;
	
	fromObject(res)
	{
		for (var Child_Res in "OpxResource" where Child_Res.level==6 && Child_Res.SP_NF_B_ATS_RES_FILTER)
		{
			for (var tc in Child_Res.get("TIME-CARDS") where tc.START_DATE==date)
			{
				// Timecard empty
				SheetLoad=tc._tc_ReturnTotalLoad();
				if (SheetLoad==0)
				{
					return true;
				}
				else
				{
					min_load = tc.getmintotalincurredfortimecard();
					if (SheetLoad<min_load)
					{
						return true;
					}
				}
			}
		}
	}
	return false;
}
sp_res_has_timecard_not_completed.exportfunction({"STRING","DATE"},"BOOLEAN");

// Function that check that there is a child resource that can be selected in field RBS in toolbar SP_TB_REP_ATRD
function sp_has_child_filter_RBS_ATRD(NoArg)
{
	var Res = this;
	
	fromObject(res)
	{
		for (var Child_Res in "OpxResource" where Child_Res.level==6 && Child_Res.SP_NF_B_ATRD_RES_FILTER_FORMULA)
		{
			return true;
		}
	}

	return false;		
}
sp_has_child_filter_RBS_ATRD.exportfunction({"STRING"},"BOOLEAN");

//Function returning the alert message of history button depending of the resource site.
function sp_js_display_input_rules(resource)
{
	//Retrieving the site of the resource in argument
	var o_current_res = "OpxResource".get(resource);
	var o_res_country = o_current_res.SP_RA_SITE;
	var s_message = "";
	
	// Returning a different text key depending of the country. Using WRITE_TEXT_KEY_IN_LANGUAGE else it alway appears in english.
	if (o_res_country.SP_NF_B_IS_FR)
	{
		s_message=WRITE_TEXT_KEY_IN_LANGUAGE("timeCard.History_button.Alert_France",context._INF_DA_S_CURRENT_LANGUAGE);
		return s_message;
	}else if (o_res_country.SP_NF_B_IS_CA){
		s_message=WRITE_TEXT_KEY_IN_LANGUAGE("timeCard.History_button.Alert_Canada",context._INF_DA_S_CURRENT_LANGUAGE);
		return s_message;
	}else{
		s_message=WRITE_TEXT_KEY_IN_LANGUAGE("timeCard.History_button.Alert_USA_INT",context._INF_DA_S_CURRENT_LANGUAGE);
		return s_message;
	}
}
sp_js_display_input_rules.exportfunction({"STRING"},"STRING");

//Function returning the status of the timecard for the history button
function sp_js_display_status_history()
{
	var s_processesstatus = _TC_CurrentTCStatus("");
	var s_processeswarnmessage = _tc_warn_message_content();
	var b_intedateexceed = context.SP_NF_B_CTX_INTEGRATION_DATE_EXCEEDED;
	var b_withoutbroadcast = SP_tc_display_validation_process_without_broadcast();
	
	var s_message = "";
	//////////////faire un tableau crois /////
	if (s_processesstatus=="V")
	{
		////To be integrated///
		s_message=WRITE_TEXT_KEY_IN_LANGUAGE("timeCard.History_button.Status.To_be_integrated",context._INF_DA_S_CURRENT_LANGUAGE);
		return s_message;
	}else if (s_processesstatus=="I"){
		////Integrated/////
		s_message=WRITE_TEXT_KEY_IN_LANGUAGE("timeCard.History_button.Status.Integrated",context._INF_DA_S_CURRENT_LANGUAGE);
		return s_message;
	}else if (s_processesstatus=="R" || s_processesstatus=="N" || s_processesstatus=="B"){
		if (b_intedateexceed)
		{
			if (b_withoutbroadcast)
			{
				//////// Not validated //////
				s_message=WRITE_TEXT_KEY_IN_LANGUAGE("timeCard.History_button.Status.Not_validated",context._INF_DA_S_CURRENT_LANGUAGE);
				return s_message;
			}else{
				////// Not broadcasted////////
				s_message=WRITE_TEXT_KEY_IN_LANGUAGE("timeCard.History_button.Status.Not_broadcasted",context._INF_DA_S_CURRENT_LANGUAGE);
				return s_message;
			}
		}else{
			if(s_processeswarnmessage!="")
			{
				//// To be completed///
				s_message=WRITE_TEXT_KEY_IN_LANGUAGE("timeCard.History_button.Status.To_be_completed",context._INF_DA_S_CURRENT_LANGUAGE);
				return s_message;
			}else{
				if (b_withoutbroadcast)
				{
					////To be validated/////
					s_message=WRITE_TEXT_KEY_IN_LANGUAGE("timeCard.History_button.Status.To_be_validated",context._INF_DA_S_CURRENT_LANGUAGE);
					return s_message;
				}else{
					////To be broadcast///
					s_message=WRITE_TEXT_KEY_IN_LANGUAGE("timeCard.History_button.Status.To_be_broadcast",context._INF_DA_S_CURRENT_LANGUAGE);
					return s_message;
				}
			}
		}
	}else{
		if(b_intedateexceed)
		{
			////Not validated/////
			s_message=WRITE_TEXT_KEY_IN_LANGUAGE("timeCard.History_button.Status.Not_validated",context._INF_DA_S_CURRENT_LANGUAGE);
			return s_message;
		}else{
			////To be validated/////
			s_message=WRITE_TEXT_KEY_IN_LANGUAGE("timeCard.History_button.Status.To_be_validated",context._INF_DA_S_CURRENT_LANGUAGE);
			return s_message;
		}	
	}
}
sp_js_display_status_history.exportfunction("","STRING");

writetolog("Loading script SP_JS_TIME_TRACKING in revision ~a.",revision_number);

//
//  PURPOSE : COMPASS v6 Time Tracking functions (apart from sending E-mail to offenders which is handeled by SP_JS_RET_TC_DEFAULTERS)
//
//	SCRIPT NAME : SP_JS_TIME_TRACKING
//
//	VERSION HISTORY :

var revision_number ="1.10";

//	Revision 1.10 2018/10/26 bcordel
//	RITM0558945 : adding sp_js_display_status_history.
//	Revision 1.9 2018/09/12 bcordel
//	ITS-INC1016674 : adding sp_js_display_input_rules.
//	Revision 1.8 2018/07/24 bcordel
//	ITS-INC1211303 : sp_js_res_has_availability_tc_period exclude inactive availability.
//	Revision 1.7 2018/06/11 bcordel
//	ITS-INC0860344 : SP_update_act_desc no more use for the function.
//	Revision 1.6 2018/06/11 lfavre
//  ITS-INC0646155 - Modification of function sp_tc_filter_my_contextual_department_activities to use uppercase to check project code
//	Revision 1.5 2018/06/07 lfavre
//  ITS-INC0646155 - Modification of function sp_tc_filter_my_contextual_department_activities to user project code as filter
//	Revision 1.4 2018/05/22 lfavre
//  ITS-INC0593625 - Creation of function sp_has_child_filter_RBS_ATRD
//	Revision 1.3 2018/05/21 lfavre
//  ITS-INC0646155 - Modification of function sp_tc_filter_my_contextual_department_activities
//	Revision 1.2 2018/05/15 lfavre
//  LFA : Creation of functions sp_res_has_timecard, sp_res_has_timecard_not_integrated, sp_res_has_timecard_not_validated and sp_res_has_timecard_not_completed
//  LFA : Creation of functions sp_total_number_timecard_resource, sp_total_number_validated_timecard_resource, sp_total_number_integrated_timecard_resource, sp_js_res_has_availability_tc_period and  sp_ats_is_timecard_loaded
//  LFA : Creation of function sp_js_ba_integrate_tc to launch integration on integration date
//	Revision 1.1 2018/03/16 bcordel
//	ITS-INC0439530 : Modification of function sp_tc_filter_my_contextual_activities to use getinternalvalue on project state
//	ITS-INC0439530 : Modification of function sp_tc_filter_my_contextual_department_activities to use getinternalvalue on project state
//	ITS-INC0439530 : Modification of function SP_update_act_desc to not copy english desc when the french one is empty.
//
//------------------previous revisions-----------------------------------
//		07/12/16 - CFN : SP_tc_display_current_timesheet added
//  	22/11/16 - CFN : SP_getCurrentFiscalMonthStart and SP_getCurrentFiscalMonthEnd creation
//  	03/10/16 - CFN : File creation > functions SP_tc_display_validation_process_without_broadcast, sp_js_retrieve_my_activity_list and sp_js_retrieve_all_activities_list added
//  Modified  by ksk 11:30 28/07/2017, Timecard total annotation message
//  Modified  by ksk 16:11 01/08/2017, Timecard integration restriction to current month
//  Modified  by tgi 17:07 24/10/2017, Offenders period is the same that current timecard period
//  Modified  by flc 09:21 24/11/2017, Deletion of 'sp_tt_last_friday_integration' function (not used anymore)
//  Modified  by flc 17:00 22/01/2018, Replace functions 'sp_js_retrieve_my_activity_list' and 'sp_js_retrieve_obs_element_level_3' with 'sp_js_tt_retrieve_my_activities', 'sp_js_tt_retrieve_my_department_activities' and 'sp_js_tt_retrieve_selection_of_activities'


//----------------------------------------------- FR Desc -----------------------------------------------

method SP_update_act_desc on opxactivity (){
	//	ITS-INC0860344 : changing Fr desc functionnality
/* 	withoutlocking{
		var desc_EN = context.callstringformula("VALEUR_CHAINE_LANGAGE(\"Activity\",\"" + this.index + "\",\"DESC\",\"english\")") ;
		var desc_FR = this.SP_AA_S_FRENCH_DESC;
		//ITS-INC0439530 
		 // if(desc_FR == "") desc_FR=desc_EN;
		// this.DESC="{/E" + desc_EN + "/F" + desc_FR + "}"; 
		if(desc_FR != "" && desc_FR != undefined)
		{
			this.DESC="{/E" + desc_EN + "/F" + desc_FR + "}";
		}else{
			this.DESC=desc_EN;
		}
	} */
}

//----------------------------------------------- List Resources -----------------------------------------------

//Displays resource's current timesheet
function SP_tc_display_current_timesheet(){
	_tc_first_not_handled();
	
	// Requirement 4.1.B Keep access to TTA/Manager/FP to multiple resources in Timecard
	var d_date = new date();
	context._TC_AA_D_TC_SD_TO_DISPLAY = d_date;
	_tc_change_date();
}
SP_tc_display_current_timesheet.exportfunction();

//----------------------------------------------- TIMESHEET -----------------------------------------------

//Function used to display the right process status depending on resource Timlecard profile (with or without validation by another person)
function SP_tc_display_validation_process_without_broadcast(){
	if(context._tc_da_current_tc.resource.TIMECARD_PROFILE instanceof opx_TIMECARD_PROFILE)
	{
		return false;
	}
	else
	{
		return true;
	}
}
SP_tc_display_validation_process_without_broadcast.exportfunction("","boolean","test");

//-------------------------------------------- TIMECARD SEARCH --------------------------------------------

// Function called when search must be applied on a subset of activities only : My department activities
// Return the list of activities with the same OBS as the level 3 OBS_ELEMENT of the current resource + level 1 activities
function sp_tc_filter_my_contextual_department_activities(f) {
	var noDoubleSecure = new hashtable("OBJECT");
	var filter = context._TCM_AA_S_SA_ACTIVITYFILTER;
	var vRes = "OpxResource".get(context._TC_AA_S_RESOURCE);
	if(vRes != undefined && vRes instanceOf OpxResource)
	{
		// Retrieve the level 3 OBS_ELEMENT of the current resource
		var vObs = vRes.OBS_ELEMENT;
		while (vObs != undefined && vObs instanceOf opxObsElement && vObs.LEVEL>3)
		{
			vObs=vObs.OBS_ELEMENT;
		}
		if(vObs != undefined && vObs instanceOf opxObsElement)
		{
			if(filter!="")
			{
	
				fromobject(vObs)
				{
					// ITS-INC0646155 --> We also check the project code for activities
					for(var act in "OpxActivity" where act!=undefined && act.OBS==vObs && act._TC_AA_B_VISIBLE_IN_TC && (act.SP_NF_S_PJT_CODE==filter.toUpperCase() || act.matchstring(filter)))
					{
				
						// ITS-INC0646155 - Double activities --> Check activity is not already present
						if(noDoubleSecure.get(act,false)==false){
							noDoubleSecure.set(act,true);
							f.call(act);
						}
					}
				}
				// Get level 1 activities
				for (var project in opxProject where project.getinternalvalue("STATE").ToString()=="ACTIVE" && project.matchstring(filter)) {
					var topLevelWbs = top_level_ws(project);
					if(topLevelWbs instanceof OpxWbsElement)
					{
						if(topLevelWbs._TC_AA_B_VISIBLE_IN_TC){
							if(noDoubleSecure.get(topLevelWbs,false)==false){
								noDoubleSecure.set(topLevelWbs,true);
								f.call(topLevelWbs);
							}
						}
					}
				}
			} else {
				fromobject(vObs)
				{
					for(var act in "OpxActivity" where act!=undefined && act.OBS==vObs && act._TC_AA_B_VISIBLE_IN_TC)
					{
				
						// ITS-INC0646155 - Double activities --> Check activity is not already present
						if(noDoubleSecure.get(act,false)==false){
							noDoubleSecure.set(act,true);
							f.call(act);
						}
					}
				}
				// Get level 1 activities
				for (var project in opxProject where project.getinternalvalue("STATE").ToString()=="ACTIVE") {
					var topLevelWbs = top_level_ws(project);
					if(topLevelWbs instanceof OpxWbsElement)
					{
						if(topLevelWbs._TC_AA_B_VISIBLE_IN_TC){
							if(noDoubleSecure.get(topLevelWbs,false)==false){
								noDoubleSecure.set(topLevelWbs,true);
								f.call(topLevelWbs);
							}
						}
					}
				}
			}
		}
	}
}

// Function called when search must be applied on a subset of activities only : My activities
function sp_tc_filter_my_contextual_activities(f) {
	var filter = context._TCM_AA_S_SA_ACTIVITYFILTER;
	var vRes = "OpxResource".get(context._TC_AA_S_RESOURCE);
	if(vRes != undefined && vRes instanceOf OpxResource)
	{
		// Build activity list based on Resource and parent Resource allocations
		var vActVect = new vector();
		for (var o_alloc in vRes.get("ALLOCATIONS") where o_alloc.file.getinternalvalue("STATE").ToString()=="ACTIVE")
		{
			vActVect.push(o_alloc.ACTIVITY);
		}
		var o_parent_res = vRes.child_of;
		if(o_parent_res != undefined && o_parent_res instanceOf OpxResource)
		{
			for (var o_alloc in o_parent_res.get("ALLOCATIONS") where o_alloc.file.getinternalvalue("STATE").ToString()=="ACTIVE")
			{
				if(o_alloc.SPAS_RA_SITE == vRes.SP_RA_SITE)
				{
					vActVect.push(o_alloc.ACTIVITY);
				}
			}
		}
		vActVect = vActVect.removeduplicates();
		// Loop on activity vector to display in timecard
		for (var act in vActVect)
		{
			if(act instanceof opxActivity && act != undefined)
			{
				// Use of 'indexrequest' is not possible -> use of 'MatchString' instead
				if(act._TC_AA_B_VISIBLE_IN_TC && act.MatchString(filter)){
					f.call(act);
				}
			}
		}
	}
}

// Replace standard function '_TC_filter_my_contextual_projects_activities' to call specific functions in case "My department activities" or "My activities" filter is activated. Function is here for performances purposes when filters "My department activities" or "My activities" are activated
function _TC_filter_my_contextual_projects_activities(f) {
	if ((!context.SP_AA_B_TC_HISTORY) && context.SP_AA_B_TC_DPT_ACT)
	{
		// My department activities
		sp_tc_filter_my_contextual_department_activities(f);
	} else if ((!context.SP_AA_B_TC_HISTORY) && (!context.SP_AA_B_TC_ALL_ACT) && (!context.SP_AA_B_TC_DPT_ACT))
	{
		// My activities
		sp_tc_filter_my_contextual_activities(f);
	} else {
		// Standard case
		_TC_filter_my_contextual_projects_activities_common(f);
	}
}

//-------------------------------------------- TIMECARD DISPLAY --------------------------------------------
 
// TEMPO - redefining function used by _tc_input_grid_2() and _tc_input_grid_5()

function _tc_annotation_handler(slot) {
  if (slot.TCCOLUMNINPUT==true) {
    if (this.Activity==_tc_fetch_total_activity()) {
      var offset = _tc_computeSlotOffset(slot);
      if(offset == false){
        return false;
      }
      var StandardValue=this.timecard.getTotalLoadForColumn(offset);
      // for IS-00026428 this conversion seems to bealready done by getminincurredfortimecardcolumn
      //var hours_per_day = context.getinternalvalue("DAY-TO-HOURS");
      var ExpectedValue=math.round(this.timecard.getminincurredfortimecardcolumn(offset,StandardValue));
      var MaxValue = math.round(this.timecard.getmaxincurredfortimecardcolumn(offset,StandardValue));
      /* for IS-00026428 this conversion seems to be already done by getminincurredfortimecardcolumn
         if (context._TC_DA_S_COLUMN_MIN_INCURRED != "HANDLED-VALUE") {
         if (context._TC_DA_UNIT.duration < 720) {
         ExpectedValue = (ExpectedValue/1440) * hours_per_day * 60;
         }
         }
      */
	  var weekmsg = "";
      var bubble = "";
      var profile = "OpxTimeCardProfile".get(context._TC_NF_S_CUR_TC_PROF)
      if(profile instanceOf OpxTimeCardProfile && profile.TIME_PERIOD == write_text_key("month")+"/"+write_text_key("week")){
        weekmsg = Char(10) + Char(13) + StandardValue.toString("####") + " "  +write_text_key("Frequency.Days") + " " +  write_text_key("HomeNewsFeed.Messages._RM_REVIEW_PT_COMPACT_DEMAND3") + "  " + write_text_key("week");
        bubble= " : "+"<span style='font-size:11px; font-weight:bold; color:#BA0D7B;'>"+ weekmsg + "</span>";
        bubble = html_closeTagsOnFullString(bubble);
      }
      if (context._TC_AA_B_PERC_INPUT) {
        ExpectedValue=_tc_switch_in_percentage(ExpectedValue,"divide",this.timecard,true,slot.TCCOLUMNINDEX,"LOAD");
      }
      // var msg = write_text_key("timeCard.Expected")+" ("+context._tc_da_unit.presentation+") "+ExpectedValue.tostring(_tc_numberFormat) + bubble;
      var msg = "~a minimum ~a maximum ~a (~a)".format(write_text_key("timeCard.Expected"),
      ExpectedValue.tostring(_tc_numberFormat),
      MaxValue.tostring(_tc_numberFormat),context._tc_da_unit.plural);
      
      return msg;
    }
    else {
      return this._tc_reader_annotation(slot.TCCOLUMNINDEX);
    }
  }
  return false;
}

function sp_tc_change_date_offenders() {

	// memorize dates of Timecard Unit 
	context.SP_TC_AA_D_CURR_TC_SD_TO_DISPLAY = context._TC_AA_D_TC_SD_TO_DISPLAY;

	context._TC_AA_D_TC_SD_TO_DISPLAY = new date();

	var tc=context._tc_da_current_tc;
	if(tc == undefined) {
	tc = _tc_load_current_tc();
	}
	var res = tc.resource;
	var EffectiveStartDate=res.EFFECTIVE_START_DATE;
	var EffectiveEndDate=res.EFFECTIVE_END_DATE;
	context._TC_AA_D_TC_ORIGIN_DATE = new date (context.getinternalvalue("START-DATE")*60);
	if (context._TC_AA_D_TC_ORIGIN_DATE == undefined) {
	context._TC_AA_D_TC_ORIGIN_DATE = context.calldateformula("$time_window_start");
	}
	var sd = context._TC_AA_D_TC_ORIGIN_DATE;
	context._TC_AA_D_TC_BROADCASTING_END_DATE = new date (context.getinternalvalue("END-DATE")*60);
	var ed = context._TC_AA_D_TC_BROADCASTING_END_DATE;
	var dateNumber = context._TC_AA_D_TC_SD_TO_DISPLAY;
	context._TC_DA_PERIOD = "OpxTimeUnit".get(context.getinternalvalue("PERIOD").tostring());
	var timecardInputPeriod = context._TC_DA_PERIOD.timeunit;
	//If date chosen outside of the effective dates of the resource
	if ((EffectiveEndDate!=undefined && EffectiveEndDate<dateNumber) || (EffectiveStartDate!=undefined && EffectiveStartDate>dateNumber)) {
	if (EffectiveEndDate==undefined) {
	  EffectiveEndDate="";
	} else {
	  if (EffectiveEndDate<dateNumber) {
		var EndDateStartPeriod = _tc_returnDateInRange(EffectiveEndDate.previous(timecardInputPeriod),sd,ed);
		context._TC_AA_D_TC_SD_TO_DISPLAY=EndDateStartPeriod;
		var end_tc = _GetOrCreateTimeCard(res.onb,EndDateStartPeriod.sdate,false);
		if(end_tc instanceof OpxTimeCard) {
		  _tc_set_current_tc(end_tc);
		}
	  }
	  EffectiveEndDate=EffectiveEndDate.tostring(context.dateformat1);
	}
	if (EffectiveStartDate==undefined) {
	  EffectiveStartDate="";
	} else {
	  if (EffectiveStartDate>dateNumber) {
		var StartDateStartPeriod= _tc_returnDateInRange(EffectiveStartDate.next(timecardInputPeriod),sd,ed);
		context._TC_AA_D_TC_SD_TO_DISPLAY=StartDateStartPeriod;
		var start_tc = _GetOrCreateTimeCard(res.onb,StartDateStartPeriod.sdate,false);
		if(start_tc instanceof OpxTimeCard) {
		  _tc_set_current_tc(start_tc);
		}
	  }
	  EffectiveStartDate=EffectiveStartDate.tostring(context.dateformat1);
	}
	return false;
	} else {
	var OriginDate=sd.sdate;
	var AccountingPeriod=context.getinternalvalue("ACCOUNTING-PERIOD").tostring();
	if (EffectiveStartDate!=undefined) {
	  OriginDate=math.max(EffectiveStartDate.sdate,OriginDate);
	}
	var tmp = context.getinternalvalue("TIME-PERIOD").tostring();
	//The origin date must be rounded to the previous date in tc period
	//If the "rounded" date is <= than the date rounded with accounting period => Accounting period date taken

	var OriginDateDate=new date(OriginDate*60);
	OriginDateDate = OriginDateDate.toString("JJ/MM/AA HH:II");
	OriginDate=context.CallDateFormula("PERIOD_START(DATE(\""+OriginDateDate+"\",\"JJ/MM/AA HH:II\"),\""+timecardInputPeriod+"\",0)").sdate;
	var OriginDateAccounting=context.CallDateFormula("PERIOD_START(DATE(\""+OriginDateDate+"\",\"JJ/MM/AA HH:II\"),\""+AccountingPeriod+"\",0)").sdate;
	OriginDate=math.max(OriginDate,OriginDateAccounting);
	var DateVector = "";
	if (sd != -1 && ed != -1) {
	  if (context.getinternalvalue("ENABLE-OVERRIDE-END-DATE") == true && dateNumber.sdate > sd.sdate) {
		DateVector = new DateVector(context._TC_DA_PERIOD,sd,dateNumber);
	  } else {
		if (dateNumber.sdate < sd.sdate) {
		  dateNumber=tc.startdate;
		  if (dateNumber.sdate < sd.sdate) {
			dateNumber = sd;
		  }
		}
		DateVector = new DateVector(context._TC_DA_PERIOD,sd,ed);
	  }
	  if (dateNumber != undefined) {
		if (DateVector.position(dateNumber) instanceof Number) {
		  var next_tc = _GetOrCreateTimeCard(res.onb,dateNumber.sdate,false);
		  if(next_tc instanceof OpxTimeCard) {
			_tc_set_current_tc(next_tc);
		  }
		} else {
		  DateVector.push(dateNumber);
		  var vec = DateVector.get(new symbol("ARRAY","KEYWORD")).sort(">");
		  var pos = vec.position(dateNumber);
		  if (dateNumber != vec[0]) {
			dateNumber = vec[pos+1];
			//Checking origin date
			if (dateNumber.sdate<OriginDate) {
			  dateNumber=new date(OriginDate*60);
			}
			var next_tc = _GetOrCreateTimeCard(res.onb,dateNumber.sdate,false);
			if(next_tc instanceof OpxTimeCard) {
			  _tc_set_current_tc(next_tc);
			}
		  } else {
			context._TC_AA_D_TC_SD_TO_DISPLAY = tc.startdate;
		  }
		}
	  }
	} else {
	  log("missing definition of timecard origin date or of timecard broadcasting end date or both");
	}
	return false;
	}	
	
}

// Function used to check that the minimum required has been input in the timesheet
function sp_check_tc_valid_input(resource,date,trace){

	var res = "OpxResource".get(resource);
	var current_tc = _GetOrCreateTimeCard(res.onb,date.sdate,trace);
	// Minimum required for the timesheet
	var min_load = current_tc.getmintotalincurredfortimecard()
	// Actual load for the timesheet
	var SheetLoad=current_tc._tc_ReturnTotalLoad();
	var load = _tc_read_time_unit(SheetLoad,res.time_unit);
	var stat = load.checkunderflow(min_load)
	if (stat) 
		return false
	else 
		return true
}
sp_check_tc_valid_input.exportfunction({"STRING","DATE","BOOLEAN"},"BOOLEAN")

function sp_check_tc_Offender(resource,date,trace){
	
	var vBool = true;
	var Res = "OpxResource".get(resource);
	var current_tc = _GetOrCreateTimeCard(Res.onb,date.sdate,trace);
	if(current_tc.status =="Integrated" || current_tc.status =="Validated"){
		vBool = false
		return vBool
	}

	return vBool
}
sp_check_tc_Offender.exportfunction({"STRING","DATE","BOOLEAN"},"BOOLEAN")

function get_nb_timecard(useless){

	var date_Actual = "";
	var Count = 0;
	for (var ctr = 0; ctr<ctr +1 ;ctr++){
		date_Actual = context.calldateformula("period_start(OC.SP_NF_D_ATS_OFF_SD,\"Time card period\","+ctr+")").sdate
		
		if (date_Actual-context.SP_NF_D_ATS_OFF_FD.sdate>=0){
			break;
			return(Count)
		}
	var ctr1 = ctr +1 ;
		var date_Actual1 = context.calldateformula("period_start(OC.SP_NF_D_ATS_OFF_SD,\"Time card period\","+ctr1+")").sdate -1440
		var resource_has_availability = sp_js_resource_avail_in_period(date_Actual,date_Actual1)
		
		  if(resource_has_availability){
			Count = Count +1;
		 }
}
return(Count)
}
get_nb_timecard.exportfunction({"STRING"},"NUMBER")


function sp_js_resource_avail_in_period(periodstart,periodend){
	var vAvail = this.SP_NF_RES_AVAIL_LIST.parselist(",")
	var res = true
	for (var each in vAvail){
		var avail = "OpxAVAILABILITY".get(each.parsenumber()) 
		if(avail != undefined && avail.sp_ra_avail_type !="Inactive" ){
			if (avail.FD.sdate!=undefined && avail.SD.sdate!=undefined && periodend >= avail.SD.sdate && periodstart<avail.FD.sdate) 
				{res= true ;
				break;}
			else if (avail.SD.sdate!=undefined && avail.FD.sdate==undefined && periodend>=avail.SD.sdate) 
				{res = true;
				break; }
			else   
				{res = false   }
		}
	}
	 return res
}
sp_js_resource_avail_in_period.exportfunction({"DATE","DATE"},"BOOLEAN")

// Function used to load the timecard before checking it content
function SP_load_TC(resource,date)
{
	var current_tc = _GetOrCreateTimeCard("opxresource".get(resource).onb,date.sdate,false);
	return "Y";
	
}
SP_load_TC.exportfunction({"STRING","DATE"},"STRING")


function sp_js_ba_integrate_tc()
{
	var date_of_day = new date();
	if("PRINT_DATE".call(date_of_day,"DD/MM/YY")=="PRINT_END_DATE".call(SP_getFiscalMonthBound(date_of_day,"end"),"DD/MM/YY"))
	{	
		writeToLog("Current date is the date of integration : start of integration of TimeCards.");
		context.callmacro("SP_BA_INTEGRATE_TC");
		writeToLog("End of integration of TimeCards.");
	}
	else
	{
		writeToLog("Current date is not the date of integration.");
	}
}
sp_js_ba_integrate_tc.exportfunction();

//////////////////////////////////////////////////
// Functions for Activity Tracking Statistics/////
/////////////////////////////////////////////////

// Function that return the number of timecard of the resource on the selected period
function sp_total_number_timecard_resource(NoArg)
{
	var res = this;
	var total=0;
	if res.level==6
		total=res.SP_NF_N_NB_TC_PERIOD;
	else
	{
		fromObject(res)
		{
			for (var Child_Res in "OpxResource" where Child_Res.level==6 && Child_Res.SP_NF_B_ATS_RES_FILTER)
			{
				total=total+Child_Res.SP_NF_N_NB_TC_PERIOD;
			}
		}
	}
	
	return total;		
}
sp_total_number_timecard_resource.exportfunction({"STRING"},"NUMBER");

// Function that return the number of validated timecard of the resource on the selected period
function sp_total_number_validated_timecard_resource(NoArg)
{
	var res = this;
	var total=0;
	if res.level==6
		total=res.SP_NF_N_NB_TC_PERIOD_VAL;
	else
	{
		fromObject(res)
		{
			for (var Child_Res in "OpxResource" where Child_Res.level==6 && Child_Res.SP_NF_B_ATS_RES_FILTER)
			{
				total=total+Child_Res.SP_NF_N_NB_TC_PERIOD_VAL;
			}
		}
	}
	
	return total;		
}
sp_total_number_validated_timecard_resource.exportfunction({"STRING"},"NUMBER");

// Function that return the number of integrated timecard of the resource on the selected period
function sp_total_number_integrated_timecard_resource(NoArg)
{
	var res = this;
	var total=0;
	if res.level==6
		total=res.SP_NF_N_NB_TC_PERIOD_INT;
	else
	{
		fromObject(res)
		{
			for (var Child_Res in "OpxResource" where Child_Res.level==6 && Child_Res.SP_NF_B_ATS_RES_FILTER)
			{
				total=total+Child_Res.SP_NF_N_NB_TC_PERIOD_INT;
			}
		}
	}
	
	return total;		
}
sp_total_number_integrated_timecard_resource.exportfunction({"STRING"},"NUMBER");

// Function to check that resource has avaibility on the period of the timecard
function sp_js_res_has_availability_tc_period(res_id,date)
{
	var res = "OpxResource".get(res_id);
	var tc_start_date = date;
	var tc_end_date = "PERIOD_START".call(date,"Time card period",1);
	
	for (var avail in res.get("Availabilities") where (avail.SD==undefined || avail.SD==-1 || avail.SD<tc_end_date) && (avail.FD== undefined || avail.FD==-1 || avail.FD>tc_start_date) && avail.SP_RA_AVAIL_TYPE.printattribute()!="Open" && avail.SP_RA_AVAIL_TYPE.printattribute()!="Inactive")
	{
		return true;
	}
	
	return false;
}
sp_js_res_has_availability_tc_period.exportfunction({"STRING","DATE"},"BOOLEAN");


// Function to check if the Timecard is loaded
function sp_ats_is_timecard_loaded(res_id,date)
{
	var vRes = "OpxResource".get(res_id);
	for (var tc in vRes.get("TIME-CARDS") where tc.START_DATE==date)
	{
		return true;
	}
	return false
}
sp_ats_is_timecard_loaded.exportfunction({"STRING","DATE"},"BOOLEAN");

// Function that check that there is a child resource with a timecard on the period
function sp_res_has_timecard(resource,date)
{
	var res = "opxresource".get(resource);
	
	fromObject(res)
	{
		for (var Child_Res in "OpxResource" where Child_Res.level==6 && Child_Res.SP_NF_B_ATS_RES_FILTER)
		{
			for (var tc in Child_Res.get("TIME-CARDS") where tc.START_DATE==date)
			{
				return true;
			}
		}
	}
	return false;
}
sp_res_has_timecard.exportfunction({"STRING","DATE"},"BOOLEAN");

// Function that check that there is a child resource with a not integrated timecard on the period
function sp_res_has_timecard_not_integrated(resource,date)
{
	var res = "opxresource".get(resource);
	
	fromObject(res)
	{
		for (var Child_Res in "OpxResource" where Child_Res.level==6 && Child_Res.SP_NF_B_ATS_RES_FILTER)
		{
			for (var tc in Child_Res.get("TIME-CARDS") where tc.START_DATE==date && tc.status !="Integrated")
			{
				return true;
			}
		}
	}
	return false;
}
sp_res_has_timecard_not_integrated.exportfunction({"STRING","DATE"},"BOOLEAN");

// Function that check that there is a child resource with a not integrated/validated timecard on the period
function sp_res_has_timecard_not_validated(resource,date)
{
	var res = "opxresource".get(resource);
	
	fromObject(res)
	{
		for (var Child_Res in "OpxResource" where Child_Res.level==6 && Child_Res.SP_NF_B_ATS_RES_FILTER)
		{
			for (var tc in Child_Res.get("TIME-CARDS") where tc.START_DATE==date && tc.status !="Integrated" && tc.status !="Validated")
			{
				return true;
			}
		}
	}
	return false;
}
sp_res_has_timecard_not_validated.exportfunction({"STRING","DATE"},"BOOLEAN");

// Function that check that there is a child resource with a not completed timecard on the period
function sp_res_has_timecard_not_completed(resource,date)
{
	var res = "opxresource".get(resource);
	var min_load;
	var SheetLoad;
	
	fromObject(res)
	{
		for (var Child_Res in "OpxResource" where Child_Res.level==6 && Child_Res.SP_NF_B_ATS_RES_FILTER)
		{
			for (var tc in Child_Res.get("TIME-CARDS") where tc.START_DATE==date)
			{
				// Timecard empty
				SheetLoad=tc._tc_ReturnTotalLoad();
				if (SheetLoad==0)
				{
					return true;
				}
				else
				{
					min_load = tc.getmintotalincurredfortimecard();
					if (SheetLoad<min_load)
					{
						return true;
					}
				}
			}
		}
	}
	return false;
}
sp_res_has_timecard_not_completed.exportfunction({"STRING","DATE"},"BOOLEAN");

// Function that check that there is a child resource that can be selected in field RBS in toolbar SP_TB_REP_ATRD
function sp_has_child_filter_RBS_ATRD(NoArg)
{
	var Res = this;
	
	fromObject(res)
	{
		for (var Child_Res in "OpxResource" where Child_Res.level==6 && Child_Res.SP_NF_B_ATRD_RES_FILTER_FORMULA)
		{
			return true;
		}
	}

	return false;		
}
sp_has_child_filter_RBS_ATRD.exportfunction({"STRING"},"BOOLEAN");

//Function returning the alert message of history button depending of the resource site.
function sp_js_display_input_rules(resource)
{
	//Retrieving the site of the resource in argument
	var o_current_res = "OpxResource".get(resource);
	var o_res_country = o_current_res.SP_RA_SITE;
	var s_message = "";
	
	// Returning a different text key depending of the country. Using WRITE_TEXT_KEY_IN_LANGUAGE else it alway appears in english.
	if (o_res_country.SP_NF_B_IS_FR)
	{
		s_message=WRITE_TEXT_KEY_IN_LANGUAGE("timeCard.History_button.Alert_France",context._INF_DA_S_CURRENT_LANGUAGE);
		return s_message;
	}else if (o_res_country.SP_NF_B_IS_CA){
		s_message=WRITE_TEXT_KEY_IN_LANGUAGE("timeCard.History_button.Alert_Canada",context._INF_DA_S_CURRENT_LANGUAGE);
		return s_message;
	}else{
		s_message=WRITE_TEXT_KEY_IN_LANGUAGE("timeCard.History_button.Alert_USA_INT",context._INF_DA_S_CURRENT_LANGUAGE);
		return s_message;
	}
}
sp_js_display_input_rules.exportfunction({"STRING"},"STRING");

//Function returning the status of the timecard for the history button
function sp_js_display_status_history()
{
	var s_processesstatus = _TC_CurrentTCStatus("");
	var s_processeswarnmessage = _tc_warn_message_content();
	var b_intedateexceed = context.SP_NF_B_CTX_INTEGRATION_DATE_EXCEEDED;
	var b_withoutbroadcast = SP_tc_display_validation_process_without_broadcast();
	
	var s_message = "";
	//////////////faire un tableau crois /////
	if (s_processesstatus=="V")
	{
		////To be integrated///
		s_message=WRITE_TEXT_KEY_IN_LANGUAGE("timeCard.History_button.Status.To_be_integrated",context._INF_DA_S_CURRENT_LANGUAGE);
		return s_message;
	}else if (s_processesstatus=="I"){
		////Integrated/////
		s_message=WRITE_TEXT_KEY_IN_LANGUAGE("timeCard.History_button.Status.Integrated",context._INF_DA_S_CURRENT_LANGUAGE);
		return s_message;
	}else if (s_processesstatus=="R" || s_processesstatus=="N" || s_processesstatus=="B"){
		if (b_intedateexceed)
		{
			if (b_withoutbroadcast)
			{
				//////// Not validated //////
				s_message=WRITE_TEXT_KEY_IN_LANGUAGE("timeCard.History_button.Status.Not_validated",context._INF_DA_S_CURRENT_LANGUAGE);
				return s_message;
			}else{
				////// Not broadcasted////////
				s_message=WRITE_TEXT_KEY_IN_LANGUAGE("timeCard.History_button.Status.Not_broadcasted",context._INF_DA_S_CURRENT_LANGUAGE);
				return s_message;
			}
		}else{
			if(s_processeswarnmessage!="")
			{
				//// To be completed///
				s_message=WRITE_TEXT_KEY_IN_LANGUAGE("timeCard.History_button.Status.To_be_completed",context._INF_DA_S_CURRENT_LANGUAGE);
				return s_message;
			}else{
				if (b_withoutbroadcast)
				{
					////To be validated/////
					s_message=WRITE_TEXT_KEY_IN_LANGUAGE("timeCard.History_button.Status.To_be_validated",context._INF_DA_S_CURRENT_LANGUAGE);
					return s_message;
				}else{
					////To be broadcast///
					s_message=WRITE_TEXT_KEY_IN_LANGUAGE("timeCard.History_button.Status.To_be_broadcast",context._INF_DA_S_CURRENT_LANGUAGE);
					return s_message;
				}
			}
		}
	}else{
		if(b_intedateexceed)
		{
			////Not validated/////
			s_message=WRITE_TEXT_KEY_IN_LANGUAGE("timeCard.History_button.Status.Not_validated",context._INF_DA_S_CURRENT_LANGUAGE);
			return s_message;
		}else{
			////To be validated/////
			s_message=WRITE_TEXT_KEY_IN_LANGUAGE("timeCard.History_button.Status.To_be_validated",context._INF_DA_S_CURRENT_LANGUAGE);
			return s_message;
		}	
	}
}
sp_js_display_status_history.exportfunction("","STRING");

writetolog("Loading script SP_JS_TIME_TRACKING in revision ~a.",revision_number);

 
//  FILE    : SP_JS_TRACKING_KTI.ojs
// 
//  VERSION : 1.0
// 
//  PURPOSE : V6 project => Functional reporting
// 
//  HISTORY :
//  Created  by KBE 05/05/2017
//  Revision 1.0 - 2019/03/13 - mblaise : Update of sp_js_tracking_kti to convert KTI date values in "DD-MMM-YY" format 
//
//  

new setting ("SP_AA_D_KTI_TIME_1","Date Time point 1","","DATE","Date Time point 1");
new setting ("SP_AA_D_KTI_TIME_2","Date Time point 2","","DATE","Date Time point 2");
new setting ("SP_AA_D_KTI_TIME_3","Date Time point 3","","DATE","Date Time point 3");
new setting ("SP_AA_D_KTI_TIME_4","Date Time point 4","","DATE","Date Time point 4");
new setting ("SP_AA_S_KTI_TIME_REF1","KTI Baseline 1","","STRING","KTI Baseline 1");
new setting ("SP_AA_S_KTI_TIME_REF2","KTI Baseline 2","","STRING","KTI Baseline 2");
new setting ("SP_AA_S_KTI_TIME_REF3","KTI Baseline 3","","STRING","KTI Baseline 3");
new setting ("SP_AA_S_KTI_TIME_REF4","KTI Baseline 4","","STRING","KTI Baseline 4");

function sp_js_tracking_kti()
{
	writetolog("Start of fonction ==> sp_js_tracking_kti");
	var vCurrentDate = context.callstringformula("PRINT_DATE($DATE_OF_THE_DAY,\"YY/MM/DD\")");
	var vDateTimePoint1;
	var vDateTimePoint2;
	var vDateTimePoint3;
	var vDateTimePoint4;
	var vActFieldValue;
	//Historization dates of KTI 
	if(context.SP_AA_D_KTI_TIME_1!=undefined && context.SP_AA_D_KTI_TIME_1!="") vDateTimePoint1 = context.callstringformula("PRINT_DATE('"+context.SP_AA_D_KTI_TIME_1+"',\"YY/MM/DD\")");
	if(context.SP_AA_D_KTI_TIME_2!=undefined && context.SP_AA_D_KTI_TIME_2!="") vDateTimePoint2 = context.callstringformula("PRINT_DATE('"+context.SP_AA_D_KTI_TIME_2+"',\"YY/MM/DD\")");
	if(context.SP_AA_D_KTI_TIME_3!=undefined && context.SP_AA_D_KTI_TIME_3!="") vDateTimePoint3 = context.callstringformula("PRINT_DATE('"+context.SP_AA_D_KTI_TIME_3+"',\"YY/MM/DD\")");
	if(context.SP_AA_D_KTI_TIME_4!=undefined && context.SP_AA_D_KTI_TIME_4!="") vDateTimePoint4 = context.callstringformula("PRINT_DATE('"+context.SP_AA_D_KTI_TIME_4+"',\"YY/MM/DD\")");
	
	// Check if the date of the day correspond to one of the KTI historization dates 
	if(vCurrentDate==vDateTimePoint1 || vCurrentDate==vDateTimePoint2 || vCurrentDate==vDateTimePoint3 || vCurrentDate==vDateTimePoint4)
	{	
		var vHashKTITimePoint = new hashtable();
		var vListKTIType = new hashtable();
		
		//Building of a hashtable with the existing KTI time points
		for(var vKTIType in "OpxSP_PT_TRIAL_KTI")
		{
			//Building of index to get back objects (couple Trial_KTI)
			if(vKTIType.SP_RA_KTI_TRIAL!=undefined && vKTIType.SP_RA_KTI_TYPE!=undefined)
			{
				var vIndex = vKTIType.SP_RA_KTI_TRIAL.printattribute()+"_"+vKTIType.SP_RA_KTI_TYPE.SP_AA_S_KTI_INTERNAL_NAME;
				vHashKTITimePoint.set(vIndex,vKTIType);
			}
		}
		
		//Building of a hashtable with the list of KTI Type
		for(var vKTIType in "OpxSP_PT_TRIAL_KTI_TYPE")
		{
			var vFormat="OpxActivity".findClass().getSlot(vKTIType.SP_AA_S_KTI_INTERNAL_NAME).descriptor.type.NAME.tostring();
			vListKTIType.set(vKTIType,vformat);
		}

		//Treatment of the trials from "clinicals" projects 
		for(var vProj in "OpxProject" where vProj.STATE=="Active"  && vProj.SP_NF_B_PROJ_CLIN)
		{
			fromobject(vProj)
			{
				for(var vAct in "OpxActivity" where vAct.SP_NF_CL_TRIAL) 
				{
					for(var vKTIType in vListKTIType)
					{
						var vExistKTI = vHashKTITimePoint.get(vAct.printattribute()+"_"+vKTIType.SP_AA_S_KTI_INTERNAL_NAME);
						var vFormat = vListKTIType.get(vKTIType);
						var vKTIname=vKTIType.SP_AA_S_KTI_INTERNAL_NAME;
						// If the KTI value is a date we convert it in "DD-MMM-YY" format 
						if (vFormat == "DATE" && vAct.get(vKTIname)!= undefined) vActFieldValue = "PRINT_DATE".callmacro(vAct.get(vKTIname),"DD-MMM-YY");
						else if (vFormat == "END-DATE" && vAct.get(vKTIname)!= undefined) vActFieldValue = "PRINT_END_DATE".callmacro(vAct.get(vKTIname),"DD-MMM-YY");
						else vActFieldValue = vAct.Getattributevalue(vKTIname);
						
						// If the KTI time point don't exist we create it (couple Trial_KTI)
						if(vExistKTI==undefined) 
						{
							var vNewKTIpoint = new "OpxSP_PT_TRIAL_KTI"("SP_RA_KTI_TRIAL",vAct,"SP_RA_KTI_TYPE",vKTIType,"FILE",vAct.PROJECT);
							writetolog("sp_js_tracking_kti ==> Creation of KTI Time point : "+vKTIType);
							if(vCurrentDate==vDateTimePoint1) vNewKTIpoint.SP_AA_S_KTI_TIME_POINT1 = vActFieldValue;
							else if(vCurrentDate==vDateTimePoint2) vNewKTIpoint.SP_AA_S_KTI_TIME_POINT2 = vActFieldValue;
							else if(vCurrentDate==vDateTimePoint3) vNewKTIpoint.SP_AA_S_KTI_TIME_POINT3 = vActFieldValue;
							else if(vCurrentDate==vDateTimePoint4) vNewKTIpoint.SP_AA_S_KTI_TIME_POINT4 = vActFieldValue;
						}
						// Else we historize the KTI value					
						else 
						{
							writetolog("sp_js_tracking_kti ==> Historization of KTI Time point : "+vKTIType);
							if(vCurrentDate==vDateTimePoint1) vExistKTI.SP_AA_S_KTI_TIME_POINT1 = vActFieldValue; 
							else if(vCurrentDate==vDateTimePoint2) vExistKTI.SP_AA_S_KTI_TIME_POINT2 = vActFieldValue ;
							else if(vCurrentDate==vDateTimePoint3) vExistKTI.SP_AA_S_KTI_TIME_POINT3 = vActFieldValue; 
							else if(vCurrentDate==vDateTimePoint4) vExistKTI.SP_AA_S_KTI_TIME_POINT4 = vActFieldValue ;
								
						}
					}
				}
			}
		}
	}
	writetolog("End of fonction ==> sp_js_tracking_kti");
}
sp_js_tracking_kti.exportfunction();

//  FILE    : SP_JS_TRACKING_KTI.ojs
// 
//  VERSION : 1.0
// 
//  PURPOSE : V6 project => Functional reporting
// 
//  HISTORY :
//  Created  by KBE 05/05/2017
//  Revision 1.0 - 2019/03/13 - mblaise : Update of sp_js_tracking_kti to convert KTI date values in "DD-MMM-YY" format 
//
//  

new setting ("SP_AA_D_KTI_TIME_1","Date Time point 1","","DATE","Date Time point 1");
new setting ("SP_AA_D_KTI_TIME_2","Date Time point 2","","DATE","Date Time point 2");
new setting ("SP_AA_D_KTI_TIME_3","Date Time point 3","","DATE","Date Time point 3");
new setting ("SP_AA_D_KTI_TIME_4","Date Time point 4","","DATE","Date Time point 4");
new setting ("SP_AA_S_KTI_TIME_REF1","KTI Baseline 1","","STRING","KTI Baseline 1");
new setting ("SP_AA_S_KTI_TIME_REF2","KTI Baseline 2","","STRING","KTI Baseline 2");
new setting ("SP_AA_S_KTI_TIME_REF3","KTI Baseline 3","","STRING","KTI Baseline 3");
new setting ("SP_AA_S_KTI_TIME_REF4","KTI Baseline 4","","STRING","KTI Baseline 4");

function sp_js_tracking_kti()
{
	writetolog("Start of fonction ==> sp_js_tracking_kti");
	var vCurrentDate = context.callstringformula("PRINT_DATE($DATE_OF_THE_DAY,\"YY/MM/DD\")");
	var vDateTimePoint1;
	var vDateTimePoint2;
	var vDateTimePoint3;
	var vDateTimePoint4;
	var vActFieldValue;
	//Historization dates of KTI 
	if(context.SP_AA_D_KTI_TIME_1!=undefined && context.SP_AA_D_KTI_TIME_1!="") vDateTimePoint1 = context.callstringformula("PRINT_DATE('"+context.SP_AA_D_KTI_TIME_1+"',\"YY/MM/DD\")");
	if(context.SP_AA_D_KTI_TIME_2!=undefined && context.SP_AA_D_KTI_TIME_2!="") vDateTimePoint2 = context.callstringformula("PRINT_DATE('"+context.SP_AA_D_KTI_TIME_2+"',\"YY/MM/DD\")");
	if(context.SP_AA_D_KTI_TIME_3!=undefined && context.SP_AA_D_KTI_TIME_3!="") vDateTimePoint3 = context.callstringformula("PRINT_DATE('"+context.SP_AA_D_KTI_TIME_3+"',\"YY/MM/DD\")");
	if(context.SP_AA_D_KTI_TIME_4!=undefined && context.SP_AA_D_KTI_TIME_4!="") vDateTimePoint4 = context.callstringformula("PRINT_DATE('"+context.SP_AA_D_KTI_TIME_4+"',\"YY/MM/DD\")");
	
	// Check if the date of the day correspond to one of the KTI historization dates 
	if(vCurrentDate==vDateTimePoint1 || vCurrentDate==vDateTimePoint2 || vCurrentDate==vDateTimePoint3 || vCurrentDate==vDateTimePoint4)
	{	
		var vHashKTITimePoint = new hashtable();
		var vListKTIType = new hashtable();
		
		//Building of a hashtable with the existing KTI time points
		for(var vKTIType in "OpxSP_PT_TRIAL_KTI")
		{
			//Building of index to get back objects (couple Trial_KTI)
			if(vKTIType.SP_RA_KTI_TRIAL!=undefined && vKTIType.SP_RA_KTI_TYPE!=undefined)
			{
				var vIndex = vKTIType.SP_RA_KTI_TRIAL.printattribute()+"_"+vKTIType.SP_RA_KTI_TYPE.SP_AA_S_KTI_INTERNAL_NAME;
				vHashKTITimePoint.set(vIndex,vKTIType);
			}
		}
		
		//Building of a hashtable with the list of KTI Type
		for(var vKTIType in "OpxSP_PT_TRIAL_KTI_TYPE")
		{
			var vFormat="OpxActivity".findClass().getSlot(vKTIType.SP_AA_S_KTI_INTERNAL_NAME).descriptor.type.NAME.tostring();
			vListKTIType.set(vKTIType,vformat);
		}

		//Treatment of the trials from "clinicals" projects 
		for(var vProj in "OpxProject" where vProj.STATE=="Active"  && vProj.SP_NF_B_PROJ_CLIN)
		{
			fromobject(vProj)
			{
				for(var vAct in "OpxActivity" where vAct.SP_NF_CL_TRIAL) 
				{
					for(var vKTIType in vListKTIType)
					{
						var vExistKTI = vHashKTITimePoint.get(vAct.printattribute()+"_"+vKTIType.SP_AA_S_KTI_INTERNAL_NAME);
						var vFormat = vListKTIType.get(vKTIType);
						var vKTIname=vKTIType.SP_AA_S_KTI_INTERNAL_NAME;
						// If the KTI value is a date we convert it in "DD-MMM-YY" format 
						if (vFormat == "DATE" && vAct.get(vKTIname)!= undefined) vActFieldValue = "PRINT_DATE".callmacro(vAct.get(vKTIname),"DD-MMM-YY");
						else if (vFormat == "END-DATE" && vAct.get(vKTIname)!= undefined) vActFieldValue = "PRINT_END_DATE".callmacro(vAct.get(vKTIname),"DD-MMM-YY");
						else vActFieldValue = vAct.Getattributevalue(vKTIname);
						
						// If the KTI time point don't exist we create it (couple Trial_KTI)
						if(vExistKTI==undefined) 
						{
							var vNewKTIpoint = new "OpxSP_PT_TRIAL_KTI"("SP_RA_KTI_TRIAL",vAct,"SP_RA_KTI_TYPE",vKTIType,"FILE",vAct.PROJECT);
							writetolog("sp_js_tracking_kti ==> Creation of KTI Time point : "+vKTIType);
							if(vCurrentDate==vDateTimePoint1) vNewKTIpoint.SP_AA_S_KTI_TIME_POINT1 = vActFieldValue;
							else if(vCurrentDate==vDateTimePoint2) vNewKTIpoint.SP_AA_S_KTI_TIME_POINT2 = vActFieldValue;
							else if(vCurrentDate==vDateTimePoint3) vNewKTIpoint.SP_AA_S_KTI_TIME_POINT3 = vActFieldValue;
							else if(vCurrentDate==vDateTimePoint4) vNewKTIpoint.SP_AA_S_KTI_TIME_POINT4 = vActFieldValue;
						}
						// Else we historize the KTI value					
						else 
						{
							writetolog("sp_js_tracking_kti ==> Historization of KTI Time point : "+vKTIType);
							if(vCurrentDate==vDateTimePoint1) vExistKTI.SP_AA_S_KTI_TIME_POINT1 = vActFieldValue; 
							else if(vCurrentDate==vDateTimePoint2) vExistKTI.SP_AA_S_KTI_TIME_POINT2 = vActFieldValue ;
							else if(vCurrentDate==vDateTimePoint3) vExistKTI.SP_AA_S_KTI_TIME_POINT3 = vActFieldValue; 
							else if(vCurrentDate==vDateTimePoint4) vExistKTI.SP_AA_S_KTI_TIME_POINT4 = vActFieldValue ;
								
						}
					}
				}
			}
		}
	}
	writetolog("End of fonction ==> sp_js_tracking_kti");
}
sp_js_tracking_kti.exportfunction();

 
//	NAME	: SP_JS_TRACKING_OF_CHANGES
//	AUTHOR  : mpaganon
//  PURPOSE : COMPASS v6 , Activity trace
//
//  HISTORY :
var revision_number ="1.5";
//
//  Revision 1.5 2019/07/22 kshanmugam
//	ITS-INC2846332 : moving suppression data in the function sp_js_archive_activity_traces to newly created fundtion sp_js_archive_activity_traces_delete
//
//  Revision 1.4  2019/04/29 mblaise
//  ITS-INC2493719 : Preventing trace creation if current user is not in right mode on the project
//
//  Revision 1.3  2018/08/29 bcordel
//  RITM0404371 : adding exclusion of some user for traces and updating the suppression date in the function sp_js_archive_activity_traces
// 
//  Revision 1.2  2018/02/21 flecanut
//  move getAttributeStringValue to sp_js_utils.ojs
// 
//  Revision 1.1  2017/02/06 bcordel
//  modification of sp_js_archive_activity_traces.
//
//  Revision 1.0  2016/11/15 bcordel
//  creation of the macro-script grouping functions for Activity traces.
//-----
// DOC
//-----
/*
	Stockage dans la table SP_PT_PM_TRACES (Tracking of changes) avec les attributs:
		Timestamp : Pour dater l'op ration (format DD-MMM-YY HH:MM)
			SP_AA_S_TRC_TIMESTAMP
			String
		User name : Nom de l'utilisateur qui r alise une op ration
			SP_AA_S_TRC_USER
			String
		Type : Type d'op ration (Update, Creation(?), Deletion)
			SP_AA_S_TRC_ACTION
			String
		Attribute name:
			SP_AA_S_TRC_ATTRIBUTE
			String
		Object type : Class label !
			SP_AA_S_TRC_OBJ_TYPE
			String
		Old value
			SP_AA_S_TRC_OLD_VALUE
			String
		Value
			SP_AA_S_TRC_VALUE
			String

	IL FAUT AJOUTER (INVARIANTS):

		Activity ONB : l'ONB de l'activit  car toutes les modifications sont li es   une activit , soit directement, soit indirectement (alloc, cost, link)
			SP_AA_S_TRC_ONB_ACT
			Number

		Activity name
			SP_AA_S_TRC_ACT_NAME
			String

		Activity desc
			SP_AA_S_TRC_ACT_DESC
			String

		WBS element : le PATH de l'activit  sur laquelle porte, directement ou indirectement la modification/suppression
			SP_AA_S_TRC_WBS_ELT
			String

		Object ONB : l'ONB de l'objet que l'on modifie/supprime
			SP_AA_S_TRC_OBJ_ONB
			Number

		Project code : le code projet (attribut existant sur l'entit  projet)
			SP_AA_S_TRC_PRJ_CODE
			String

	AUTRES COLONNES POUR TRACER L'ETAT D'UN OBJET QUE L'ON SUPPRIME:

		Start date : activity (Planned start), allocation (Start date), cost (Start date)
		Planned finish : activity (Planned finish), allocation (Finish date), cost (Finish date)
		Actual start : activity
		Actual finish : activity
		OBS element : activity
		Site : activity, allocation
		Resource : allocation
		Total : allocation (=Total load), cost (=Quantity)
		Allocation description : allocation
		Duration computation : allocation, cost
		Cost account : allocation, cost
		Label : allocation
		Comment : allocation
		Unit (currency) : cost
		Predecessor (description) : link
		Successor (description) : link
		Type of link : link
		Lag time : link
*/
/// Declare user for whom traces are not taken 
var user_excluded = new vector ();
user_excluded.push("INTRANET");
user_excluded.push("INTRANET_RAVL");


//-----------------------
// initializeTraceObject 
//-----------------------
// M thode d finie sur une activit  et qui est appel e depuis les m thodes "on modifyAfter" de chaque objet modifi 
// Elle cr e un objet trace en renseignant les attributs invariants qui concernent soit l'activit  (this), soit l'objet en cours de modif (obj).
// Lors de la modification d'une activit , this == obj
function initializeTraceObject(act, obj)
{
	var oTrc =
		new "Opx_Sp_Pt_Pm_Traces"(
			"name", act.name,
			"desc", act.desc,
			"file", act.file,
			"SP_AA_D_TRC_TIMESTAMP", new date(),
			"SP_AA_S_TRC_USER", context.callStringFormula("$CURRENT_USER"),
			"SP_AA_S_TRC_ACT_ONB", act.ONB.toString("####"),
			"SP_AA_S_TRC_ACT_NAME", act.NAME,
			"SP_AA_S_TRC_ACT_DESC", act.DESC,
			"SP_AA_S_TRC_WBS_ELT", act.NETWORK.index,
			"SP_AA_S_TRC_OBJ_TYPE", obj.findClass().comment.english,
			"SP_AA_S_TRC_OBJ_ONB", "PRINT_NUMBER".callMacro(obj.ONB , "####"),
			"SP_AA_S_TRC_PRJ_CODE", act.project.SPAS_AA_PROJECT_CODE
		);
	return oTrc;
}

//=============
// OpxActivity
//=============

//--------
// delete 
//--------
on delete OpxActivity()
{
	// // Excluding some user from trace and prevent trace creation if current user is not in right mode on the project
	var current_user = context.callStringFormula("$CURRENT_USER").toUpperCase();
	if ((!(this.FILE instanceof opxFile)) || this.FILE._TM_NF_B_USER_CAN_WRITE_ON_PROJECT==false  || user_excluded.position(current_user) instanceof NUMBER)
	{
		return 0;
	}
	/////////////
	
	var oTrc = initializeTraceObject(this, this);

	oTrc.SP_AA_S_TRC_ACTION         = "Delete";
	oTrc.SP_AA_S_TRC_START_DATE     = this.PlannedStart.toString();
	oTrc.SP_AA_S_TRC_FINISH_DATE    = this.PlannedFinish.toString();
	oTrc.SP_AA_S_TRC_ACTUAL_START   = (this.ActualStart == undefined ? "":this.ActualStart.toString());
	oTrc.SP_AA_S_TRC_ACTUAL_FINISH  = (this.ActualFinish == undefined ? "":this.ActualFinish.toString());
	oTrc.SP_AA_S_TRC_OBS_ELEMENT    = this.OBS.index;
	oTrc.SP_AA_S_TRC_SITE           = this.get("3BS").index;
}

// attributs   tracer sur l'activit 
var v_actAttrs = {
	"NAME", "Name",
	"COMMENT", "Description",
	"NETWORK", "WBS element",
	"PROJECT", "Project",
	// dates, dur e et contraintes
	"PHASIS", "Duration",
	"IMPOSED-START", "Start no earlier than",
	"IMPOSED-END", "Finish no later than",
	"REAL-START", "Planned start",
	"REAL-FINISH", "Planned finish",
	"EFFECTIVE-START", "Actual start",
	"EFFECTIVE-FINISH", "Actual finish"
}
//var actAtts={"NAME", "COMMENT", "NETWORK", "PROJECT", "PHASIS", "IMPOSED-START", "IMPOSED-END", "REAL-START", "REAL-FINISH", "EFFECTIVE-START", "EFFECTIVE-FINISH"}

//--------------
// modifyBefore
//--------------
on modifyBefore OpxActivity (slots)
{
	// Excluding some user from trace and prevent trace creation if current user is not in right mode on the project
	var current_user = context.callStringFormula("$CURRENT_USER").toUpperCase();
	if ((!(this.FILE instanceof opxFile)) || this.FILE._TM_NF_B_USER_CAN_WRITE_ON_PROJECT==false  || user_excluded.position(current_user) instanceof NUMBER)
	{
		return 0;
	}
	/////////////
	
	if(slots == undefined || slots == false) return;
	var plist = slots.plist;
	if(plist == undefined || plist == false || plist.length == 0) return;
	var v_atts = pList.parsevector();

	// cr e la hash table si besoin
	if (context.beforeActivityUpdate == undefined)
		context.beforeActivityUpdate = new HashTable("string");
	else
		// on cherche   r -entrer dans le before() avant de passer dans le after()
		if context.beforeActivityUpdate.count != 0
			return;

	// v_atts contient une s quence d'attributs (position paire) suivi par sa valeur (position impaire)
	var n = 0;
	while (n < v_atts.length) {
		// r cup re le nom de l'attribut
		var s_att = v_atts[n].toString();
		n++;  // passe   sa valeur

		// v rifie qu'il fait partie de ceux que l'on veut tracer, sinon on passe au suivant
		if v_actAttrs.position(s_att) == undefined { n++; continue; }

		// r cup re la valeur de l'attribut
		var s_val = this.getAttributeStringValue(s_att);
		n++;  // passe   l'attribut suivant

		// met   jour la variable avec l'ancienne valeur
		context.beforeActivityUpdate.set(s_att, s_val);
	}
}

//---------------
// modifyAfter
//---------------
on modifyAfter OpxActivity (slots)
{
	/// Excluding some user from traces ///////
	var current_user = context.callStringFormula("$CURRENT_USER").toUpperCase();
	if ((!(this.FILE instanceof opxFile)) || this.FILE._TM_NF_B_USER_CAN_WRITE_ON_PROJECT==false  || user_excluded.position(current_user) instanceof NUMBER)
	{
		return 0;
	}
	/////////////
	
	if(slots == undefined || slots == false) return;
	var plist = slots.plist;
	if(plist == undefined || plist == false || plist.length == 0) return;

	var v_atts = pList.parsevector();
	var n = 0;
	var isUpdate = false;  // une maj attendue a-t-elle eu lieu ?

	// v_atts contient une s quence d'attributs (position paire) suivi par sa valeur (position impaire)
	while (n < v_atts.length)
	{
		// r cup re le nom de l'attribut
		var s_att = v_atts[n].toString(); n++;
		if v_actAttrs.position(s_att)==undefined { n++; continue; }  // passe aussi sa valeur qui ne nous int resse pas

		// au moins une mise   jour attendue a eu lieu
		isUpdate = true;

		// cr ation de l'objet trace et remplissage des invariants sur l'activit  et l'objet dont l'attribut a  t  modifi 
		var act = this;
		var oTrc = initializeTraceObject(act, this);
		oTrc.SP_AA_S_TRC_ACTION    = "Update";
		oTrc.SP_AA_S_TRC_ATT_NAME  = v_actAttrs.get(s_att);
		oTrc.SP_AA_S_TRC_OLD_VALUE = context.beforeActivityUpdate.get(s_att);
		oTrc.SP_AA_S_TRC_NEW_VALUE = this.getAttributeStringValue(s_att);  // valeur de l'attribut
	}

	// en cas de mise   jour des attributs, on vide la hashtable
	if (isUpdate)
		context.beforeActivityUpdate.clear();
}


//=================
// OpxPlannedHours
//=================

//--------
// delete
//--------
on delete OpxPlannedHours()
{
	// Excluding some user from trace and prevent trace creation if current user is not in right mode on the project
	var current_user = context.callStringFormula("$CURRENT_USER").toUpperCase();
	if ((!(this.FILE instanceof opxFile)) || this.FILE._TM_NF_B_USER_CAN_WRITE_ON_PROJECT==false  || user_excluded.position(current_user) instanceof NUMBER)
	{
		return 0;
	}
	/////////////
	
	var oTrc = initializeTraceObject(this.activity, this);

	oTrc.SP_AA_S_TRC_ACTION        = "Delete";
	oTrc.SP_AA_S_TRC_START_DATE    = this.startDate.toString();
	oTrc.SP_AA_S_TRC_FINISH_DATE   = this.finishDate.previous("day").toString();
	oTrc.SP_AA_S_TRC_SITE          = this.SPAS_RA_SITE.index;
	oTrc.SP_AA_S_TRC_RESOURCE      = this.RESOURCE.index;
	oTrc.SP_AA_S_TRC_TOTAL         = (this.totalLoad == Math.round(this.totalLoad)) ? this.totalLoad.toString("####"):this.totalLoad.toString("####.00");
	oTrc.SP_AA_S_TRC_ALLOC_DESC    = this.SP_AA_REESTIM_ALLOCDESC;
	oTrc.SP_AA_S_TRC_DURATION_COMP = this.get("DURATION-MODE").toString();
	oTrc.SP_AA_S_TRC_COST_ACCOUNT  = this.COST_ACCOUNT.name;
	oTrc.SP_AA_S_TRC_LABEL         = this.COMMENT;
	oTrc.SP_AA_S_TRC_COMMENT       = this._RM_AA_S_PL_HRS_COMMENT;
}

// attributs   tracer sur les planned hours
var v_plhAttrs = {
	"WORK-STRUCTURE", "Activity",
	"COMMENT", "Label",
	"DATASET", "File",
	"TOTAL-LOAD", "Total load",
	"REAL-START", "Start date",
	"REAL-FINISH", "Finish date",
	"RESOURCE", "Resource", // from level 3 to 6-> must be used to trace Function, Platform, Profile name !
	"SPAS_RA_SITE", "Site",
	"_RM_AA_S_PL_HRS_COMMENT", "Comment",
	"DURATION-MODE", "Duration computation"
	//"TYPE", "Planned hours type"
	//"REAL-START", "Planned start",
	//"REAL-FINISH", "Planned finish",
	//"SP_AA_REESTIM_ALLOCDESC", "Allocation Description", ?
}
//var plhAtts = {"WORK-STRUCTURE", "COMMENT", "DATASET", "TOTAL-LOAD", "START-DATE", "FINISH-DATE", "RESOURCE", "SPAS_RA_SITE", "_RM_AA_S_PL_HRS_COMMENT", "TYPE"};

//--------------
// modifyBefore
//--------------
on modifyBefore OpxPlannedHours (slots)
{
	// Excluding some user from trace and prevent trace creation if current user is not in right mode on the project
	var current_user = context.callStringFormula("$CURRENT_USER").toUpperCase();
	if ((!(this.FILE instanceof opxFile)) || this.FILE._TM_NF_B_USER_CAN_WRITE_ON_PROJECT==false  || user_excluded.position(current_user) instanceof NUMBER)
	{
		return 0;
	}
	/////////////
	
	if(slots == undefined || slots == false) return;
	var plist = slots.plist;
	if(plist == undefined || plist == false || plist.length == 0) return;
	var v_atts = pList.parsevector();

	// cr e la hash table si besoin
	if (context.beforeAllocationUpdate == undefined)
		context.beforeAllocationUpdate = new HashTable("string");
	else
		// on cherche   r -entrer dans le before() avant de passer dans le after()
		if context.beforeAllocationUpdate.count != 0
			return;

	// v_atts contient une s quence d'attributs (position paire) suivi par sa valeur (position impaire)
	var n = 0;
	while (n < v_atts.length) {
		// r cup re le nom de l'attribut
		var s_att = v_atts[n].toString();
		n++;  // passe   sa valeur

		// v rifie qu'il fait partie de ceux que l'on veut tracer, sinon on passe au suivant
		if v_plhAttrs.position(s_att) == undefined { n++; continue; }

		// r cup re la valeur de l'attribut
		var s_val = this.getAttributeStringValue(s_att);
		n++;  // passe   l'attribut suivant

		// met   jour la variable avec l'ancienne valeur
		context.beforeAllocationUpdate.set(s_att, s_val);
	}
}

//-------------
// modifyAfter
//-------------
on modifyAfter OpxPlannedHours (slots)
{
	// Excluding some user from trace and prevent trace creation if current user is not in right mode on the project
	var current_user = context.callStringFormula("$CURRENT_USER").toUpperCase();
	if ((!(this.FILE instanceof opxFile)) || this.FILE._TM_NF_B_USER_CAN_WRITE_ON_PROJECT==false  || user_excluded.position(current_user) instanceof NUMBER)
	{
		return 0;
	}
	/////////////
	
	if(slots == undefined || slots == false) return;
	var plist = slots.plist;
	if(plist == undefined || plist == false || plist.length == 0) return;

	var v_atts = pList.parsevector();
	var n = 0;
	var isUpdate = false;  // une maj attendue a-t-elle eu lieu ?

	// v_atts contient une s quence d'attributs (position paire) suivi par sa valeur (position impaire)
	while (n < v_atts.length)
	{
		// r cup re le nom de l'attribut
		var s_att = v_atts[n].toString(); n++;
		if v_plhAttrs.position(s_att)==undefined { n++; continue; }  // passe aussi sa valeur qui ne nous int resse pas

		// au moins une mise   jour attendue a eu lieu
		isUpdate = true;

		// cr ation de l'objet trace et remplissage des invariants sur l'activit  et l'objet dont l'attribut a  t  modifi 
		var act = this.activity;
		var oTrc = initializeTraceObject(act, this);
		oTrc.SP_AA_S_TRC_ACTION    = "Update";
		oTrc.SP_AA_S_TRC_ATT_NAME  = v_plhAttrs.get(s_att);
		oTrc.SP_AA_S_TRC_OLD_VALUE = context.beforeAllocationUpdate.get(s_att);
		oTrc.SP_AA_S_TRC_NEW_VALUE = this.getAttributeStringValue(s_att);  // valeur de l'attribut
	}

	// en cas de mise   jour des attributs, on vide la hashtable
	if (isUpdate)
		context.beforeAllocationUpdate.clear();
}


//=======================
// OpxPlannedExpenditure
//=======================

//--------
// delete
//--------
on delete OpxPlannedExpenditure()
{
	// Excluding some user from trace and prevent trace creation if current user is not in right mode on the project
	var current_user = context.callStringFormula("$CURRENT_USER").toUpperCase();
	if ((!(this.FILE instanceof opxFile)) || this.FILE._TM_NF_B_USER_CAN_WRITE_ON_PROJECT==false  || user_excluded.position(current_user) instanceof NUMBER)
	{
		return 0;
	}
	/////////////
	var oTrc = initializeTraceObject(this.activity, this);

	oTrc.SP_AA_S_TRC_ACTION        = "Delete";
	oTrc.SP_AA_S_TRC_START_DATE    = this.startDate.toString();
	oTrc.SP_AA_S_TRC_FINISH_DATE   = this.endDate.previous("day").toString();
	oTrc.SP_AA_S_TRC_TOTAL         = (this.QTY == Math.round(this.QTY)) ? this.QTY.toString("####"):this.QTY.toString("####.00");
	oTrc.SP_AA_S_TRC_DURATION_COMP = this.get("DURATION-MODE").toString();
	oTrc.SP_AA_S_TRC_COST_ACCOUNT  = this.CBS.index;
	oTrc.SP_AA_S_TRC_UNIT          = this.UNIT.index;
}



// attributs   tracer sur les costs
var v_pleAttrs = {
	"WORK-STRUCTURE", "Activity",
	"DATASET", "File",
	"CBS", "Cost account",
	"UNIT", "Unit",
	"QTY", "Quantity",
	"DURATION-MODE", "Duration computation",
	"DELAY", "Lag time",  // NON DEMANDE, mais la modification d'une 
	"FIXED-START", "Start date",
	"FIXED-END", "End date"
}
//var pleAtts = {"WORK-STRUCTURE", "DATASET", "CBS", "UNIT", "QTY", "DURATION-MODE", "DELAY", "FIXED-START", "FIXED-END"};

//--------------
// modifyBefore
//--------------
on modifyBefore OpxPlannedExpenditure (slots)
{
	// Excluding some user from trace and prevent trace creation if current user is not in right mode on the project
	var current_user = context.callStringFormula("$CURRENT_USER").toUpperCase();
	if ((!(this.FILE instanceof opxFile)) || this.FILE._TM_NF_B_USER_CAN_WRITE_ON_PROJECT==false  || user_excluded.position(current_user) instanceof NUMBER)
	{
		return 0;
	}
	/////////////
	
	if(slots == undefined || slots == false) return;
	var plist = slots.plist;
	if(plist == undefined || plist == false || plist.length == 0) return;
	var v_atts = pList.parsevector();

	// cr e la hash table si besoin
	if (context.beforeExpenditureUpdate == undefined)
		context.beforeExpenditureUpdate = new HashTable("string");
	else
		// on cherche   r -entrer dans le before() avant de passer dans le after()
		if context.beforeExpenditureUpdate.count != 0
			return;

	// v_atts contient une s quence d'attributs (position paire) suivi par sa valeur (position impaire)
	var n = 0;
	while (n < v_atts.length) {
		// r cup re le nom de l'attribut
		var s_att = v_atts[n].toString();
		n++;  // passe   sa valeur

		// v rifie qu'il fait partie de ceux que l'on veut tracer, sinon on passe au suivant
		if v_pleAttrs.position(s_att) == undefined { n++; continue; }

		// r cup re la valeur de l'attribut
		var s_val = this.getAttributeStringValue(s_att);
		n++;  // passe   l'attribut suivant

		// met   jour la variable avec l'ancienne valeur
		context.beforeExpenditureUpdate.set(s_att, s_val);
	}
}

//---------------
// modifyAfter
//---------------
on modifyAfter OpxPlannedExpenditure (slots)
{
	// Excluding some user from trace and prevent trace creation if current user is not in right mode on the project
	var current_user = context.callStringFormula("$CURRENT_USER").toUpperCase();
	if ((!(this.FILE instanceof opxFile)) || this.FILE._TM_NF_B_USER_CAN_WRITE_ON_PROJECT==false  || user_excluded.position(current_user) instanceof NUMBER)
	{
		return 0;
	}
	/////////////
	
	if(slots == undefined || slots == false) return;
	var plist = slots.plist;
	if(plist == undefined || plist == false || plist.length == 0) return;

	var v_atts = pList.parsevector();
	var n = 0;
	var isUpdate = false;  // une maj attendue a-t-elle eu lieu ?

	// v_atts contient une s quence d'attributs (position paire) suivi par sa valeur (position impaire)
	while (n < v_atts.length)
	{
		// r cup re le nom de l'attribut
		var s_att = v_atts[n].toString(); n++;
		if v_pleAttrs.position(s_att)==undefined { n++; continue; }  // passe aussi sa valeur qui ne nous int resse pas

		// au moins une mise   jour attendue a eu lieu
		isUpdate = true;

		// cr ation de l'objet trace et remplissage des invariants sur l'activit  et l'objet dont l'attribut a  t  modifi 
		var act = this.activity;
		var oTrc = initializeTraceObject(act, this);
		oTrc.SP_AA_S_TRC_ACTION    = "Update";
		oTrc.SP_AA_S_TRC_ATT_NAME  = v_pleAttrs.get(s_att);
		oTrc.SP_AA_S_TRC_OLD_VALUE = context.beforeExpenditureUpdate.get(s_att);
		oTrc.SP_AA_S_TRC_NEW_VALUE = this.getAttributeStringValue(s_att);  // valeur de l'attribut
	}

	// en cas de mise   jour des attributs, on vide la hashtable
	if (isUpdate)
		context.beforeExpenditureUpdate.clear();
}


//=========
// OpxLink
//=========

//--------
// delete
//--------
on delete OpxLink()
{
	// Excluding some user from trace and prevent trace creation if current user is not in right mode on the project
	var current_user = context.callStringFormula("$CURRENT_USER").toUpperCase();
	if ((!(this.FILE instanceof opxFile)) || this.FILE._TM_NF_B_USER_CAN_WRITE_ON_PROJECT==false  || user_excluded.position(current_user) instanceof NUMBER)
	{
		return 0;
	}
	/////////////
	
	var oTrc = initializeTraceObject(this.RIGHT, this);  // this.RIGHT est l'activit  "porteuse" du lien

	oTrc.SP_AA_S_TRC_ACTION       = "Delete";
	oTrc.SP_AA_S_TRC_PREDECESSOR  = this.LEFT.index;
	oTrc.SP_AA_S_TRC_SUCCESSOR    = this.RIGHT.index;
	oTrc.SP_AA_S_TRC_TYPE_OF_LINK = this.getInternalValue("TYPE").toString();
	oTrc.SP_AA_S_TRC_LAG_TIME     = "PRINT_NUMBER".callMacro(this.getInternalValue("DURATION")/1440, "####");  // convertit des mn en J
}

// attributs   tracer sur les liens
var v_lnkAttrs = {
	"DURATION", "Lag time",  // en minutes !
	"LEFT", "Predecessor activity",
	"RIGHT", "Successor activity",
	"TYPE", "Type"  // FINISH-START,...
}
//var lnkAtts = {"DURATION", "LEFT", "RIGHT", "TYPE"};

//--------------
// modifyBefore
//--------------
on modifyBefore OpxLink (slots)
{
	// Excluding some user from trace and prevent trace creation if current user is not in right mode on the project
	var current_user = context.callStringFormula("$CURRENT_USER").toUpperCase();
	if ((!(this.FILE instanceof opxFile)) || this.FILE._TM_NF_B_USER_CAN_WRITE_ON_PROJECT==false  || user_excluded.position(current_user) instanceof NUMBER)
	{
		return 0;
	}
	/////////////
	
	if(slots == undefined || slots == false) return;
	var plist = slots.plist;
	if(plist == undefined || plist == false || plist.length == 0) return;
	var v_atts = pList.parsevector();

	// cr e la hash table si besoin
	if (context.beforeLinkUpdate == undefined)
		context.beforeLinkUpdate = new HashTable("string");
	else
		// on cherche   r -entrer dans le before() avant de passer dans le after()
		if context.beforeLinkUpdate.count != 0
			return;

	// v_atts contient une s quence d'attributs (position paire) suivi par sa valeur (position impaire)
	var n = 0;
	while (n < v_atts.length) {
		// r cup re le nom de l'attribut
		var s_att = v_atts[n].toString();
		n++;  // passe   sa valeur

		// v rifie qu'il fait partie de ceux que l'on veut tracer, sinon on passe au suivant
		if v_lnkAttrs.position(s_att) == undefined { n++; continue; }

		// r cup re la valeur de l'attribut
		var s_val = this.getAttributeStringValue(s_att);
		n++;  // passe   l'attribut suivant

		// met   jour la variable avec l'ancienne valeur
		context.beforeLinkUpdate.set(s_att, s_val);
	}
}

//---------------
// modifyAfter
//---------------
on modifyAfter OpxLink (slots)
{
	// Excluding some user from trace and prevent trace creation if current user is not in right mode on the project
	var current_user = context.callStringFormula("$CURRENT_USER").toUpperCase();
	if ((!(this.FILE instanceof opxFile)) || this.FILE._TM_NF_B_USER_CAN_WRITE_ON_PROJECT==false  || user_excluded.position(current_user) instanceof NUMBER)
	{
		return 0;
	}
	/////////////
	
	if(slots == undefined || slots == false) return;
	var plist = slots.plist;
	if(plist == undefined || plist == false || plist.length == 0) return;

	var v_atts = pList.parsevector();
	var n = 0;
	var isUpdate = false;  // une maj attendue a-t-elle eu lieu ?

	// v_atts contient une s quence d'attributs (position paire) suivi par sa valeur (position impaire)
	while (n < v_atts.length)
	{
		// r cup re le nom de l'attribut
		var s_att = v_atts[n].toString(); n++;
		if v_lnkAttrs.position(s_att)==undefined { n++; continue; }  // passe aussi sa valeur qui ne nous int resse pas

		// au moins une mise   jour attendue a eu lieu
		isUpdate = true;

		// cr ation de l'objet trace et remplissage des invariants sur l'activit  et l'objet dont l'attribut a  t  modifi 
		var act = this.right;
		var oTrc = act.initializeTraceObject(act, this);
		oTrc.SP_AA_S_TRC_ACTION    = "Update";
		oTrc.SP_AA_S_TRC_ATT_NAME  = v_lnkAttrs.get(s_att);
		oTrc.SP_AA_S_TRC_OLD_VALUE = context.beforeLinkUpdate.get(s_att).toString();
		oTrc.SP_AA_S_TRC_NEW_VALUE = this.getAttributeStringValue(s_att);  // valeur de l'attribut
	}

	// en cas de mise   jour des attributs, on vide la hashtable
	if (isUpdate)
		context.beforeLinkUpdate.clear();
}


//-----------------------------------------------------------------
// GoTraces() est appel  par l'item "View changes" du menu "Track"
// Elle d clenche l'affichage d'un popup affichant les changements sur les activit s/allocations/d penses/liens du(es) projet(s) courant(s)
//
function GoTraces()
{
	var currentObj = currentPageObject();
	var objType = (typeOf currentObj);

	if  (objType != "OpxProject" && objType != "OpxFileSelection") {
		alert("L'objet courant n'est ni un projet, ni un virtual dataset : "+currentObj);
		return;
	}

	var link = new HyperLink (
		"list",
		"classOrRelation", "SP_PT_PM_TRACES",
		"Style", "Tracking of changes:Tracking extended",
		"popup", true
	);

	if (link != undefined)
		link.go(context);
}
GoTraces.exportFunction();


//===============================
// sp_js_archive_activity_traces
//===============================
function sp_js_archive_activity_traces ()
{
	//var count = 0;
	var b_export= question("Do you want to export data changes from last one month?");
	if (b_export)
	{
		//call of export request
		var test=context.callmacro("SP_IER_TRACES_EXCEL_ARCHIVE");

		//downloading excel archive
		var s_path="/tmp/traces_export_archive.xls"
		var url=s_path.filegeturl();
		var link= new hyperlink("URL","Page",url,"popup",True);
		if (link!= undefined){link.go("useless");}
	}
}
function sp_js_archive_activity_traces_delete ()
{
	var count = 0;
	var b_suppress= question("Changes older than last month will be deleted, do you confirm ?");
	if (b_suppress)
	{

// Suppression of activity traces older than the beginning of the previous month
		//preparing monitoring
		for (var o_traces in "OPX_SP_PT_PM_TRACES" where o_traces.CallBooleanFormula("SP_AA_D_TRC_TIMESTAMP < PERIOD_START($DATE_OF_THE_DAY,\"Month\",-1)"))
		{
			count++;
		}
		WithMonitoring (count > 100) for (var o_traces in "OPX_SP_PT_PM_TRACES" where o_traces.CallBooleanFormula("SP_AA_D_TRC_TIMESTAMP < PERIOD_START($DATE_OF_THE_DAY,\"Month\",-1)"))
		{
			"deleting old entries...".monitor(count);
			o_traces.delete();
		}
	}
}

writetolog("Loading script SP_JS_TRACKING_OF_CHANGES in revision ~a.",revision_number);

//	NAME	: SP_JS_TRACKING_OF_CHANGES
//	AUTHOR  : mpaganon
//  PURPOSE : COMPASS v6 , Activity trace
//
//  HISTORY :
var revision_number ="1.5";
//
//  Revision 1.5 2019/07/22 kshanmugam
//	ITS-INC2846332 : moving suppression data in the function sp_js_archive_activity_traces to newly created fundtion sp_js_archive_activity_traces_delete
//
//  Revision 1.4  2019/04/29 mblaise
//  ITS-INC2493719 : Preventing trace creation if current user is not in right mode on the project
//
//  Revision 1.3  2018/08/29 bcordel
//  RITM0404371 : adding exclusion of some user for traces and updating the suppression date in the function sp_js_archive_activity_traces
// 
//  Revision 1.2  2018/02/21 flecanut
//  move getAttributeStringValue to sp_js_utils.ojs
// 
//  Revision 1.1  2017/02/06 bcordel
//  modification of sp_js_archive_activity_traces.
//
//  Revision 1.0  2016/11/15 bcordel
//  creation of the macro-script grouping functions for Activity traces.
//-----
// DOC
//-----
/*
	Stockage dans la table SP_PT_PM_TRACES (Tracking of changes) avec les attributs:
		Timestamp : Pour dater l'op ration (format DD-MMM-YY HH:MM)
			SP_AA_S_TRC_TIMESTAMP
			String
		User name : Nom de l'utilisateur qui r alise une op ration
			SP_AA_S_TRC_USER
			String
		Type : Type d'op ration (Update, Creation(?), Deletion)
			SP_AA_S_TRC_ACTION
			String
		Attribute name:
			SP_AA_S_TRC_ATTRIBUTE
			String
		Object type : Class label !
			SP_AA_S_TRC_OBJ_TYPE
			String
		Old value
			SP_AA_S_TRC_OLD_VALUE
			String
		Value
			SP_AA_S_TRC_VALUE
			String

	IL FAUT AJOUTER (INVARIANTS):

		Activity ONB : l'ONB de l'activit  car toutes les modifications sont li es   une activit , soit directement, soit indirectement (alloc, cost, link)
			SP_AA_S_TRC_ONB_ACT
			Number

		Activity name
			SP_AA_S_TRC_ACT_NAME
			String

		Activity desc
			SP_AA_S_TRC_ACT_DESC
			String

		WBS element : le PATH de l'activit  sur laquelle porte, directement ou indirectement la modification/suppression
			SP_AA_S_TRC_WBS_ELT
			String

		Object ONB : l'ONB de l'objet que l'on modifie/supprime
			SP_AA_S_TRC_OBJ_ONB
			Number

		Project code : le code projet (attribut existant sur l'entit  projet)
			SP_AA_S_TRC_PRJ_CODE
			String

	AUTRES COLONNES POUR TRACER L'ETAT D'UN OBJET QUE L'ON SUPPRIME:

		Start date : activity (Planned start), allocation (Start date), cost (Start date)
		Planned finish : activity (Planned finish), allocation (Finish date), cost (Finish date)
		Actual start : activity
		Actual finish : activity
		OBS element : activity
		Site : activity, allocation
		Resource : allocation
		Total : allocation (=Total load), cost (=Quantity)
		Allocation description : allocation
		Duration computation : allocation, cost
		Cost account : allocation, cost
		Label : allocation
		Comment : allocation
		Unit (currency) : cost
		Predecessor (description) : link
		Successor (description) : link
		Type of link : link
		Lag time : link
*/
/// Declare user for whom traces are not taken 
var user_excluded = new vector ();
user_excluded.push("INTRANET");
user_excluded.push("INTRANET_RAVL");


//-----------------------
// initializeTraceObject 
//-----------------------
// M thode d finie sur une activit  et qui est appel e depuis les m thodes "on modifyAfter" de chaque objet modifi 
// Elle cr e un objet trace en renseignant les attributs invariants qui concernent soit l'activit  (this), soit l'objet en cours de modif (obj).
// Lors de la modification d'une activit , this == obj
function initializeTraceObject(act, obj)
{
	var oTrc =
		new "Opx_Sp_Pt_Pm_Traces"(
			"name", act.name,
			"desc", act.desc,
			"file", act.file,
			"SP_AA_D_TRC_TIMESTAMP", new date(),
			"SP_AA_S_TRC_USER", context.callStringFormula("$CURRENT_USER"),
			"SP_AA_S_TRC_ACT_ONB", act.ONB.toString("####"),
			"SP_AA_S_TRC_ACT_NAME", act.NAME,
			"SP_AA_S_TRC_ACT_DESC", act.DESC,
			"SP_AA_S_TRC_WBS_ELT", act.NETWORK.index,
			"SP_AA_S_TRC_OBJ_TYPE", obj.findClass().comment.english,
			"SP_AA_S_TRC_OBJ_ONB", "PRINT_NUMBER".callMacro(obj.ONB , "####"),
			"SP_AA_S_TRC_PRJ_CODE", act.project.SPAS_AA_PROJECT_CODE
		);
	return oTrc;
}

//=============
// OpxActivity
//=============

//--------
// delete 
//--------
on delete OpxActivity()
{
	// // Excluding some user from trace and prevent trace creation if current user is not in right mode on the project
	var current_user = context.callStringFormula("$CURRENT_USER").toUpperCase();
	if ((!(this.FILE instanceof opxFile)) || this.FILE._TM_NF_B_USER_CAN_WRITE_ON_PROJECT==false  || user_excluded.position(current_user) instanceof NUMBER)
	{
		return 0;
	}
	/////////////
	
	var oTrc = initializeTraceObject(this, this);

	oTrc.SP_AA_S_TRC_ACTION         = "Delete";
	oTrc.SP_AA_S_TRC_START_DATE     = this.PlannedStart.toString();
	oTrc.SP_AA_S_TRC_FINISH_DATE    = this.PlannedFinish.toString();
	oTrc.SP_AA_S_TRC_ACTUAL_START   = (this.ActualStart == undefined ? "":this.ActualStart.toString());
	oTrc.SP_AA_S_TRC_ACTUAL_FINISH  = (this.ActualFinish == undefined ? "":this.ActualFinish.toString());
	oTrc.SP_AA_S_TRC_OBS_ELEMENT    = this.OBS.index;
	oTrc.SP_AA_S_TRC_SITE           = this.get("3BS").index;
}

// attributs   tracer sur l'activit 
var v_actAttrs = {
	"NAME", "Name",
	"COMMENT", "Description",
	"NETWORK", "WBS element",
	"PROJECT", "Project",
	// dates, dur e et contraintes
	"PHASIS", "Duration",
	"IMPOSED-START", "Start no earlier than",
	"IMPOSED-END", "Finish no later than",
	"REAL-START", "Planned start",
	"REAL-FINISH", "Planned finish",
	"EFFECTIVE-START", "Actual start",
	"EFFECTIVE-FINISH", "Actual finish"
}
//var actAtts={"NAME", "COMMENT", "NETWORK", "PROJECT", "PHASIS", "IMPOSED-START", "IMPOSED-END", "REAL-START", "REAL-FINISH", "EFFECTIVE-START", "EFFECTIVE-FINISH"}

//--------------
// modifyBefore
//--------------
on modifyBefore OpxActivity (slots)
{
	// Excluding some user from trace and prevent trace creation if current user is not in right mode on the project
	var current_user = context.callStringFormula("$CURRENT_USER").toUpperCase();
	if ((!(this.FILE instanceof opxFile)) || this.FILE._TM_NF_B_USER_CAN_WRITE_ON_PROJECT==false  || user_excluded.position(current_user) instanceof NUMBER)
	{
		return 0;
	}
	/////////////
	
	if(slots == undefined || slots == false) return;
	var plist = slots.plist;
	if(plist == undefined || plist == false || plist.length == 0) return;
	var v_atts = pList.parsevector();

	// cr e la hash table si besoin
	if (context.beforeActivityUpdate == undefined)
		context.beforeActivityUpdate = new HashTable("string");
	else
		// on cherche   r -entrer dans le before() avant de passer dans le after()
		if context.beforeActivityUpdate.count != 0
			return;

	// v_atts contient une s quence d'attributs (position paire) suivi par sa valeur (position impaire)
	var n = 0;
	while (n < v_atts.length) {
		// r cup re le nom de l'attribut
		var s_att = v_atts[n].toString();
		n++;  // passe   sa valeur

		// v rifie qu'il fait partie de ceux que l'on veut tracer, sinon on passe au suivant
		if v_actAttrs.position(s_att) == undefined { n++; continue; }

		// r cup re la valeur de l'attribut
		var s_val = this.getAttributeStringValue(s_att);
		n++;  // passe   l'attribut suivant

		// met   jour la variable avec l'ancienne valeur
		context.beforeActivityUpdate.set(s_att, s_val);
	}
}

//---------------
// modifyAfter
//---------------
on modifyAfter OpxActivity (slots)
{
	/// Excluding some user from traces ///////
	var current_user = context.callStringFormula("$CURRENT_USER").toUpperCase();
	if ((!(this.FILE instanceof opxFile)) || this.FILE._TM_NF_B_USER_CAN_WRITE_ON_PROJECT==false  || user_excluded.position(current_user) instanceof NUMBER)
	{
		return 0;
	}
	/////////////
	
	if(slots == undefined || slots == false) return;
	var plist = slots.plist;
	if(plist == undefined || plist == false || plist.length == 0) return;

	var v_atts = pList.parsevector();
	var n = 0;
	var isUpdate = false;  // une maj attendue a-t-elle eu lieu ?

	// v_atts contient une s quence d'attributs (position paire) suivi par sa valeur (position impaire)
	while (n < v_atts.length)
	{
		// r cup re le nom de l'attribut
		var s_att = v_atts[n].toString(); n++;
		if v_actAttrs.position(s_att)==undefined { n++; continue; }  // passe aussi sa valeur qui ne nous int resse pas

		// au moins une mise   jour attendue a eu lieu
		isUpdate = true;

		// cr ation de l'objet trace et remplissage des invariants sur l'activit  et l'objet dont l'attribut a  t  modifi 
		var act = this;
		var oTrc = initializeTraceObject(act, this);
		oTrc.SP_AA_S_TRC_ACTION    = "Update";
		oTrc.SP_AA_S_TRC_ATT_NAME  = v_actAttrs.get(s_att);
		oTrc.SP_AA_S_TRC_OLD_VALUE = context.beforeActivityUpdate.get(s_att);
		oTrc.SP_AA_S_TRC_NEW_VALUE = this.getAttributeStringValue(s_att);  // valeur de l'attribut
	}

	// en cas de mise   jour des attributs, on vide la hashtable
	if (isUpdate)
		context.beforeActivityUpdate.clear();
}


//=================
// OpxPlannedHours
//=================

//--------
// delete
//--------
on delete OpxPlannedHours()
{
	// Excluding some user from trace and prevent trace creation if current user is not in right mode on the project
	var current_user = context.callStringFormula("$CURRENT_USER").toUpperCase();
	if ((!(this.FILE instanceof opxFile)) || this.FILE._TM_NF_B_USER_CAN_WRITE_ON_PROJECT==false  || user_excluded.position(current_user) instanceof NUMBER)
	{
		return 0;
	}
	/////////////
	
	var oTrc = initializeTraceObject(this.activity, this);

	oTrc.SP_AA_S_TRC_ACTION        = "Delete";
	oTrc.SP_AA_S_TRC_START_DATE    = this.startDate.toString();
	oTrc.SP_AA_S_TRC_FINISH_DATE   = this.finishDate.previous("day").toString();
	oTrc.SP_AA_S_TRC_SITE          = this.SPAS_RA_SITE.index;
	oTrc.SP_AA_S_TRC_RESOURCE      = this.RESOURCE.index;
	oTrc.SP_AA_S_TRC_TOTAL         = (this.totalLoad == Math.round(this.totalLoad)) ? this.totalLoad.toString("####"):this.totalLoad.toString("####.00");
	oTrc.SP_AA_S_TRC_ALLOC_DESC    = this.SP_AA_REESTIM_ALLOCDESC;
	oTrc.SP_AA_S_TRC_DURATION_COMP = this.get("DURATION-MODE").toString();
	oTrc.SP_AA_S_TRC_COST_ACCOUNT  = this.COST_ACCOUNT.name;
	oTrc.SP_AA_S_TRC_LABEL         = this.COMMENT;
	oTrc.SP_AA_S_TRC_COMMENT       = this._RM_AA_S_PL_HRS_COMMENT;
}

// attributs   tracer sur les planned hours
var v_plhAttrs = {
	"WORK-STRUCTURE", "Activity",
	"COMMENT", "Label",
	"DATASET", "File",
	"TOTAL-LOAD", "Total load",
	"REAL-START", "Start date",
	"REAL-FINISH", "Finish date",
	"RESOURCE", "Resource", // from level 3 to 6-> must be used to trace Function, Platform, Profile name !
	"SPAS_RA_SITE", "Site",
	"_RM_AA_S_PL_HRS_COMMENT", "Comment",
	"DURATION-MODE", "Duration computation"
	//"TYPE", "Planned hours type"
	//"REAL-START", "Planned start",
	//"REAL-FINISH", "Planned finish",
	//"SP_AA_REESTIM_ALLOCDESC", "Allocation Description", ?
}
//var plhAtts = {"WORK-STRUCTURE", "COMMENT", "DATASET", "TOTAL-LOAD", "START-DATE", "FINISH-DATE", "RESOURCE", "SPAS_RA_SITE", "_RM_AA_S_PL_HRS_COMMENT", "TYPE"};

//--------------
// modifyBefore
//--------------
on modifyBefore OpxPlannedHours (slots)
{
	// Excluding some user from trace and prevent trace creation if current user is not in right mode on the project
	var current_user = context.callStringFormula("$CURRENT_USER").toUpperCase();
	if ((!(this.FILE instanceof opxFile)) || this.FILE._TM_NF_B_USER_CAN_WRITE_ON_PROJECT==false  || user_excluded.position(current_user) instanceof NUMBER)
	{
		return 0;
	}
	/////////////
	
	if(slots == undefined || slots == false) return;
	var plist = slots.plist;
	if(plist == undefined || plist == false || plist.length == 0) return;
	var v_atts = pList.parsevector();

	// cr e la hash table si besoin
	if (context.beforeAllocationUpdate == undefined)
		context.beforeAllocationUpdate = new HashTable("string");
	else
		// on cherche   r -entrer dans le before() avant de passer dans le after()
		if context.beforeAllocationUpdate.count != 0
			return;

	// v_atts contient une s quence d'attributs (position paire) suivi par sa valeur (position impaire)
	var n = 0;
	while (n < v_atts.length) {
		// r cup re le nom de l'attribut
		var s_att = v_atts[n].toString();
		n++;  // passe   sa valeur

		// v rifie qu'il fait partie de ceux que l'on veut tracer, sinon on passe au suivant
		if v_plhAttrs.position(s_att) == undefined { n++; continue; }

		// r cup re la valeur de l'attribut
		var s_val = this.getAttributeStringValue(s_att);
		n++;  // passe   l'attribut suivant

		// met   jour la variable avec l'ancienne valeur
		context.beforeAllocationUpdate.set(s_att, s_val);
	}
}

//-------------
// modifyAfter
//-------------
on modifyAfter OpxPlannedHours (slots)
{
	// Excluding some user from trace and prevent trace creation if current user is not in right mode on the project
	var current_user = context.callStringFormula("$CURRENT_USER").toUpperCase();
	if ((!(this.FILE instanceof opxFile)) || this.FILE._TM_NF_B_USER_CAN_WRITE_ON_PROJECT==false  || user_excluded.position(current_user) instanceof NUMBER)
	{
		return 0;
	}
	/////////////
	
	if(slots == undefined || slots == false) return;
	var plist = slots.plist;
	if(plist == undefined || plist == false || plist.length == 0) return;

	var v_atts = pList.parsevector();
	var n = 0;
	var isUpdate = false;  // une maj attendue a-t-elle eu lieu ?

	// v_atts contient une s quence d'attributs (position paire) suivi par sa valeur (position impaire)
	while (n < v_atts.length)
	{
		// r cup re le nom de l'attribut
		var s_att = v_atts[n].toString(); n++;
		if v_plhAttrs.position(s_att)==undefined { n++; continue; }  // passe aussi sa valeur qui ne nous int resse pas

		// au moins une mise   jour attendue a eu lieu
		isUpdate = true;

		// cr ation de l'objet trace et remplissage des invariants sur l'activit  et l'objet dont l'attribut a  t  modifi 
		var act = this.activity;
		var oTrc = initializeTraceObject(act, this);
		oTrc.SP_AA_S_TRC_ACTION    = "Update";
		oTrc.SP_AA_S_TRC_ATT_NAME  = v_plhAttrs.get(s_att);
		oTrc.SP_AA_S_TRC_OLD_VALUE = context.beforeAllocationUpdate.get(s_att);
		oTrc.SP_AA_S_TRC_NEW_VALUE = this.getAttributeStringValue(s_att);  // valeur de l'attribut
	}

	// en cas de mise   jour des attributs, on vide la hashtable
	if (isUpdate)
		context.beforeAllocationUpdate.clear();
}


//=======================
// OpxPlannedExpenditure
//=======================

//--------
// delete
//--------
on delete OpxPlannedExpenditure()
{
	// Excluding some user from trace and prevent trace creation if current user is not in right mode on the project
	var current_user = context.callStringFormula("$CURRENT_USER").toUpperCase();
	if ((!(this.FILE instanceof opxFile)) || this.FILE._TM_NF_B_USER_CAN_WRITE_ON_PROJECT==false  || user_excluded.position(current_user) instanceof NUMBER)
	{
		return 0;
	}
	/////////////
	var oTrc = initializeTraceObject(this.activity, this);

	oTrc.SP_AA_S_TRC_ACTION        = "Delete";
	oTrc.SP_AA_S_TRC_START_DATE    = this.startDate.toString();
	oTrc.SP_AA_S_TRC_FINISH_DATE   = this.endDate.previous("day").toString();
	oTrc.SP_AA_S_TRC_TOTAL         = (this.QTY == Math.round(this.QTY)) ? this.QTY.toString("####"):this.QTY.toString("####.00");
	oTrc.SP_AA_S_TRC_DURATION_COMP = this.get("DURATION-MODE").toString();
	oTrc.SP_AA_S_TRC_COST_ACCOUNT  = this.CBS.index;
	oTrc.SP_AA_S_TRC_UNIT          = this.UNIT.index;
}



// attributs   tracer sur les costs
var v_pleAttrs = {
	"WORK-STRUCTURE", "Activity",
	"DATASET", "File",
	"CBS", "Cost account",
	"UNIT", "Unit",
	"QTY", "Quantity",
	"DURATION-MODE", "Duration computation",
	"DELAY", "Lag time",  // NON DEMANDE, mais la modification d'une 
	"FIXED-START", "Start date",
	"FIXED-END", "End date"
}
//var pleAtts = {"WORK-STRUCTURE", "DATASET", "CBS", "UNIT", "QTY", "DURATION-MODE", "DELAY", "FIXED-START", "FIXED-END"};

//--------------
// modifyBefore
//--------------
on modifyBefore OpxPlannedExpenditure (slots)
{
	// Excluding some user from trace and prevent trace creation if current user is not in right mode on the project
	var current_user = context.callStringFormula("$CURRENT_USER").toUpperCase();
	if ((!(this.FILE instanceof opxFile)) || this.FILE._TM_NF_B_USER_CAN_WRITE_ON_PROJECT==false  || user_excluded.position(current_user) instanceof NUMBER)
	{
		return 0;
	}
	/////////////
	
	if(slots == undefined || slots == false) return;
	var plist = slots.plist;
	if(plist == undefined || plist == false || plist.length == 0) return;
	var v_atts = pList.parsevector();

	// cr e la hash table si besoin
	if (context.beforeExpenditureUpdate == undefined)
		context.beforeExpenditureUpdate = new HashTable("string");
	else
		// on cherche   r -entrer dans le before() avant de passer dans le after()
		if context.beforeExpenditureUpdate.count != 0
			return;

	// v_atts contient une s quence d'attributs (position paire) suivi par sa valeur (position impaire)
	var n = 0;
	while (n < v_atts.length) {
		// r cup re le nom de l'attribut
		var s_att = v_atts[n].toString();
		n++;  // passe   sa valeur

		// v rifie qu'il fait partie de ceux que l'on veut tracer, sinon on passe au suivant
		if v_pleAttrs.position(s_att) == undefined { n++; continue; }

		// r cup re la valeur de l'attribut
		var s_val = this.getAttributeStringValue(s_att);
		n++;  // passe   l'attribut suivant

		// met   jour la variable avec l'ancienne valeur
		context.beforeExpenditureUpdate.set(s_att, s_val);
	}
}

//---------------
// modifyAfter
//---------------
on modifyAfter OpxPlannedExpenditure (slots)
{
	// Excluding some user from trace and prevent trace creation if current user is not in right mode on the project
	var current_user = context.callStringFormula("$CURRENT_USER").toUpperCase();
	if ((!(this.FILE instanceof opxFile)) || this.FILE._TM_NF_B_USER_CAN_WRITE_ON_PROJECT==false  || user_excluded.position(current_user) instanceof NUMBER)
	{
		return 0;
	}
	/////////////
	
	if(slots == undefined || slots == false) return;
	var plist = slots.plist;
	if(plist == undefined || plist == false || plist.length == 0) return;

	var v_atts = pList.parsevector();
	var n = 0;
	var isUpdate = false;  // une maj attendue a-t-elle eu lieu ?

	// v_atts contient une s quence d'attributs (position paire) suivi par sa valeur (position impaire)
	while (n < v_atts.length)
	{
		// r cup re le nom de l'attribut
		var s_att = v_atts[n].toString(); n++;
		if v_pleAttrs.position(s_att)==undefined { n++; continue; }  // passe aussi sa valeur qui ne nous int resse pas

		// au moins une mise   jour attendue a eu lieu
		isUpdate = true;

		// cr ation de l'objet trace et remplissage des invariants sur l'activit  et l'objet dont l'attribut a  t  modifi 
		var act = this.activity;
		var oTrc = initializeTraceObject(act, this);
		oTrc.SP_AA_S_TRC_ACTION    = "Update";
		oTrc.SP_AA_S_TRC_ATT_NAME  = v_pleAttrs.get(s_att);
		oTrc.SP_AA_S_TRC_OLD_VALUE = context.beforeExpenditureUpdate.get(s_att);
		oTrc.SP_AA_S_TRC_NEW_VALUE = this.getAttributeStringValue(s_att);  // valeur de l'attribut
	}

	// en cas de mise   jour des attributs, on vide la hashtable
	if (isUpdate)
		context.beforeExpenditureUpdate.clear();
}


//=========
// OpxLink
//=========

//--------
// delete
//--------
on delete OpxLink()
{
	// Excluding some user from trace and prevent trace creation if current user is not in right mode on the project
	var current_user = context.callStringFormula("$CURRENT_USER").toUpperCase();
	if ((!(this.FILE instanceof opxFile)) || this.FILE._TM_NF_B_USER_CAN_WRITE_ON_PROJECT==false  || user_excluded.position(current_user) instanceof NUMBER)
	{
		return 0;
	}
	/////////////
	
	var oTrc = initializeTraceObject(this.RIGHT, this);  // this.RIGHT est l'activit  "porteuse" du lien

	oTrc.SP_AA_S_TRC_ACTION       = "Delete";
	oTrc.SP_AA_S_TRC_PREDECESSOR  = this.LEFT.index;
	oTrc.SP_AA_S_TRC_SUCCESSOR    = this.RIGHT.index;
	oTrc.SP_AA_S_TRC_TYPE_OF_LINK = this.getInternalValue("TYPE").toString();
	oTrc.SP_AA_S_TRC_LAG_TIME     = "PRINT_NUMBER".callMacro(this.getInternalValue("DURATION")/1440, "####");  // convertit des mn en J
}

// attributs   tracer sur les liens
var v_lnkAttrs = {
	"DURATION", "Lag time",  // en minutes !
	"LEFT", "Predecessor activity",
	"RIGHT", "Successor activity",
	"TYPE", "Type"  // FINISH-START,...
}
//var lnkAtts = {"DURATION", "LEFT", "RIGHT", "TYPE"};

//--------------
// modifyBefore
//--------------
on modifyBefore OpxLink (slots)
{
	// Excluding some user from trace and prevent trace creation if current user is not in right mode on the project
	var current_user = context.callStringFormula("$CURRENT_USER").toUpperCase();
	if ((!(this.FILE instanceof opxFile)) || this.FILE._TM_NF_B_USER_CAN_WRITE_ON_PROJECT==false  || user_excluded.position(current_user) instanceof NUMBER)
	{
		return 0;
	}
	/////////////
	
	if(slots == undefined || slots == false) return;
	var plist = slots.plist;
	if(plist == undefined || plist == false || plist.length == 0) return;
	var v_atts = pList.parsevector();

	// cr e la hash table si besoin
	if (context.beforeLinkUpdate == undefined)
		context.beforeLinkUpdate = new HashTable("string");
	else
		// on cherche   r -entrer dans le before() avant de passer dans le after()
		if context.beforeLinkUpdate.count != 0
			return;

	// v_atts contient une s quence d'attributs (position paire) suivi par sa valeur (position impaire)
	var n = 0;
	while (n < v_atts.length) {
		// r cup re le nom de l'attribut
		var s_att = v_atts[n].toString();
		n++;  // passe   sa valeur

		// v rifie qu'il fait partie de ceux que l'on veut tracer, sinon on passe au suivant
		if v_lnkAttrs.position(s_att) == undefined { n++; continue; }

		// r cup re la valeur de l'attribut
		var s_val = this.getAttributeStringValue(s_att);
		n++;  // passe   l'attribut suivant

		// met   jour la variable avec l'ancienne valeur
		context.beforeLinkUpdate.set(s_att, s_val);
	}
}

//---------------
// modifyAfter
//---------------
on modifyAfter OpxLink (slots)
{
	// Excluding some user from trace and prevent trace creation if current user is not in right mode on the project
	var current_user = context.callStringFormula("$CURRENT_USER").toUpperCase();
	if ((!(this.FILE instanceof opxFile)) || this.FILE._TM_NF_B_USER_CAN_WRITE_ON_PROJECT==false  || user_excluded.position(current_user) instanceof NUMBER)
	{
		return 0;
	}
	/////////////
	
	if(slots == undefined || slots == false) return;
	var plist = slots.plist;
	if(plist == undefined || plist == false || plist.length == 0) return;

	var v_atts = pList.parsevector();
	var n = 0;
	var isUpdate = false;  // une maj attendue a-t-elle eu lieu ?

	// v_atts contient une s quence d'attributs (position paire) suivi par sa valeur (position impaire)
	while (n < v_atts.length)
	{
		// r cup re le nom de l'attribut
		var s_att = v_atts[n].toString(); n++;
		if v_lnkAttrs.position(s_att)==undefined { n++; continue; }  // passe aussi sa valeur qui ne nous int resse pas

		// au moins une mise   jour attendue a eu lieu
		isUpdate = true;

		// cr ation de l'objet trace et remplissage des invariants sur l'activit  et l'objet dont l'attribut a  t  modifi 
		var act = this.right;
		var oTrc = act.initializeTraceObject(act, this);
		oTrc.SP_AA_S_TRC_ACTION    = "Update";
		oTrc.SP_AA_S_TRC_ATT_NAME  = v_lnkAttrs.get(s_att);
		oTrc.SP_AA_S_TRC_OLD_VALUE = context.beforeLinkUpdate.get(s_att).toString();
		oTrc.SP_AA_S_TRC_NEW_VALUE = this.getAttributeStringValue(s_att);  // valeur de l'attribut
	}

	// en cas de mise   jour des attributs, on vide la hashtable
	if (isUpdate)
		context.beforeLinkUpdate.clear();
}


//-----------------------------------------------------------------
// GoTraces() est appel  par l'item "View changes" du menu "Track"
// Elle d clenche l'affichage d'un popup affichant les changements sur les activit s/allocations/d penses/liens du(es) projet(s) courant(s)
//
function GoTraces()
{
	var currentObj = currentPageObject();
	var objType = (typeOf currentObj);

	if  (objType != "OpxProject" && objType != "OpxFileSelection") {
		alert("L'objet courant n'est ni un projet, ni un virtual dataset : "+currentObj);
		return;
	}

	var link = new HyperLink (
		"list",
		"classOrRelation", "SP_PT_PM_TRACES",
		"Style", "Tracking of changes:Tracking extended",
		"popup", true
	);

	if (link != undefined)
		link.go(context);
}
GoTraces.exportFunction();


//===============================
// sp_js_archive_activity_traces
//===============================
function sp_js_archive_activity_traces ()
{
	//var count = 0;
	var b_export= question("Do you want to export data changes from last one month?");
	if (b_export)
	{
		//call of export request
		var test=context.callmacro("SP_IER_TRACES_EXCEL_ARCHIVE");

		//downloading excel archive
		var s_path="/tmp/traces_export_archive.xls"
		var url=s_path.filegeturl();
		var link= new hyperlink("URL","Page",url,"popup",True);
		if (link!= undefined){link.go("useless");}
	}
}
function sp_js_archive_activity_traces_delete ()
{
	var count = 0;
	var b_suppress= question("Changes older than last month will be deleted, do you confirm ?");
	if (b_suppress)
	{

// Suppression of activity traces older than the beginning of the previous month
		//preparing monitoring
		for (var o_traces in "OPX_SP_PT_PM_TRACES" where o_traces.CallBooleanFormula("SP_AA_D_TRC_TIMESTAMP < PERIOD_START($DATE_OF_THE_DAY,\"Month\",-1)"))
		{
			count++;
		}
		WithMonitoring (count > 100) for (var o_traces in "OPX_SP_PT_PM_TRACES" where o_traces.CallBooleanFormula("SP_AA_D_TRC_TIMESTAMP < PERIOD_START($DATE_OF_THE_DAY,\"Month\",-1)"))
		{
			"deleting old entries...".monitor(count);
			o_traces.delete();
		}
	}
}

writetolog("Loading script SP_JS_TRACKING_OF_CHANGES in revision ~a.",revision_number);

 
//	NAME	: SP_JS_UTILS
//	AUTHOR  : mpaganon
//  PURPOSE : general purpose functions
//  
//  HISTORY :
var revision_number ="1.6";
//
//  Revision 1.6  22-05-2019 bcordel 
//	modifying sp_js_count_act_with_act_type to add the possibility to have a filter in addition to the activity type
//
//  Revision 1.5  17-05-2019 bcordel 
//	adding sp_js_count_act_with_act_type
//
//  Revision 1.4  17-12-2018 bcordel 
//	adding sp_js_ReadFilterForSelectedPOrtfolio
//
//  OLD ---------------
//  Revision 1.0  11-04-2017 mpaganon : new functions: getQuarter() and getQuarterEndDate()
//  Revision 1.1  11-04-2017 mpaganon : rappatrie char_forbidden() de sp_js_pm_functions.ojs
//  Revision 1.2  24-11-2017 flecanut : move 'SP_getCurrentFiscalMonthBound' from 'sp_js_time_tracking.ojs'
//  Revision 1.3  21-02-2018 flecanut : move 'getAttributeStringValue' from 'sp_js_tracking_of_changes.ojs'

//
// Renvoit le code du trimestre correspondant à une date (J/F/M = "Q1", A/M/J = "Q2", Ju/A/S = "Q3", O/N/D = "Q4")
//
function getQuarter(a_date) {
	return (a_date==undefined || a_date.sdate==-1 ? "":"Q"+math.ceil(a_date.getMonth()/3));
}
getQuarter.exportfunction({"DATE"},"STRING","Returns the quarter of a specific date with format Q<n>");

// même chose pour les dates de type End-date pour lequelles il faut retirer un jour (la fonction ne peut pas le savoir !)
function getQuarterEndDate(a_date) {
	return (a_date==undefined || a_date.sdate==-1 ? "":"Q"+math.ceil(a_date.previous("day").getMonth()/3));
}
getQuarterEndDate.exportfunction({"DATE"},"STRING","Returns the quarter of a specific date with format Q<n>");

//
// Interdit tous les caractères autres que 0..9, a..z, A..Z et _ (souligné)
//
function char_forbidden(s)
{
	var reg = new regExp("[^0-9a-zA-Z_ ]");
	return (s==reg.RegMask(s) ? true:false);
}
char_forbidden.exportfunction({"STRING"},"BOOLEAN");

// used into Project popup ("Trial Code" tab)
function this_object()
{
	return this.index;
}
this_object.exportfunction("", "STRING");


//Return start date of fiscal month corresponding to date in argument
function SP_getFiscalMonthBound(referenceDate,startOrEnd){
	for(var p in "opxfiscalmonth"){
		if(p.start_date <= referenceDate && referenceDate < p.end_date){ 
			if(startOrEnd == "start") return(p.start_date);
			if(startOrEnd == "end") return(p.end_date);
		}
	}
}
SP_getFiscalMonthBound.exportfunction({"DATE","STRING"},"DATE","Return the 'start' or 'end' date of the fiscal period overlapping input date");

//Return start date of current fiscal month
function SP_getCurrentFiscalMonthBound(startOrEnd){
	return SP_getFiscalMonthBound(new date(),startOrEnd);
}
SP_getCurrentFiscalMonthBound.exportfunction({"STRING"},"DATE","Return the 'start' or 'end' date of the current fiscal period");

//Return start date of previous fiscal month
function SP_getPreviousFiscalMonthBound(startOrEnd){
	var vCurrentFMB = SP_getCurrentFiscalMonthBound("start");
	return SP_getFiscalMonthBound("add_duration".callmacro(vCurrentFMB, -1440, ""),startOrEnd);
}
SP_getPreviousFiscalMonthBound.exportfunction({"STRING"},"DATE","Return the 'start' or 'end' date of the previous fiscal period");


//----------------------------
// getAttributeStringValue 
//----------------------------
// Renvoit la valeur de l'attribut sous la forme d'une string.
// Tient compte des attributs de type DURATION, DATE, NUMBER.
//
function getAttributeStringValue(att)
{
	// récupère la valeur "internal" et "ojs" de l'attribut, sa classe (ex: OpxTask, OpxLink...) et le type de l'attribut
	var o_valOjs  = this.get(att);
	var o_valInt  = this.getInternalValue(att);
	var classObj  = (typeOf this);
	var attType   = classObj.getSlot(att).descriptor.type.name.toString();

	// valeur de retour
	var retVal = o_valInt;

	// cas particulier de la modification de la durée d'une activité où c'est l'attribut "PHASIS" (type: LIST-OF-PHASIS) qui est considéré comme modifié
	// Comme il peut y avoir plusieurs phases dans une activité, on considère pour simplifier que c'est la 1ère qui nous intéresse pour tracer sa durée
	if (attType == "LIST-OF-PHASIS")
		retVal = (o_valInt instanceOf Array && o_valInt.length > 0) ? o_valInt[0] / 1440:"ERR";
	else if (attType == "DURATION")
		retVal = o_valInt / 1440;  // traduit des minutes en jours (1j = 1440')
	else if (attType == "DATE" || attType == "END-DATE")
		// les dates de fin sont codées en interne avec un jour de plus
		retVal = (o_valOjs == undefined) ? "":(att.indexOf("END") == undefined && att.indexOf("FINISH") == undefined) ? o_valOjs:o_valOjs.previous("day");
	else if (attType == "NUMBER" || attType == "OBJECT-NUMBER")
		retVal = (o_valOjs == Math.round(o_valOjs)) ? o_valOjs.toString("####"):o_valOjs.toString("####.00");
	else if (attType == "DURATION-COMPUTING-MODE" || attType == "EXPENDITURE-DURATION-COMPUTING-MODE")
		retVal = o_valOjs;

	// dans le cas d'une entité Opx, on récupère son index
	var s_type = (typeOf o_valInt);
	if (s_type.subString(0,3) == "Opx")
		retVal = o_valInt.index;

	return (retVal == undefined ? "":retVal.toString());
}


// Returning the filter of a portfolio in parameter.
function sp_js_ReadFilterForSelectedPortfolio(s_portfolio){
  var SelectedPortfolio = "opx_ff_pt_favor_filters".get(s_portfolio);
  var Returnvalue = "TRUE";
  if(SelectedPortfolio InstanceOf opx_ff_pt_favor_filters){
    Returnvalue = SelectedPortfolio.computePortfolioFormula();
  }
  return Returnvalue;
}sp_js_ReadFilterForSelectedPortfolio.exportfunction({"STRING"},"STRING","Return the filter of the portfolio given in parameter");

////////
//	Count the number of activies with given activity type under the activity it is called on
//	Adding also an option to add a filter to the count
////////
method sp_js_count_act_with_act_type on opxactivity(s_act_type,s_add_filter)
{
	var o_current_act = this;
	var n_count_act=0;
	fromobject(o_current_act)
	{
		for (var o_act in "opxactivity" where o_act.WBS_TYPE.NAME==s_act_type)
		{
			if (s_add_filter!="" && o_act.CallBooleanFormula(s_add_filter))
			{
				n_count_act++;
			}else if (s_add_filter=="")
			{
				n_count_act++;
			}
		}
	}
	return n_count_act
}sp_js_count_act_with_act_type.exportfunction({"STRING","STRING"},"NUMBER","Return the count of activities under this one with an activity type equal to the one given in parameter. Additionnal filter possible.");



writetolog("Script SP_JS_UTILS loaded with version ~a ", revision_number); 

//	NAME	: SP_JS_UTILS
//	AUTHOR  : mpaganon
//  PURPOSE : general purpose functions
//  
//  HISTORY :
var revision_number ="1.6";
//
//  Revision 1.6  22-05-2019 bcordel 
//	modifying sp_js_count_act_with_act_type to add the possibility to have a filter in addition to the activity type
//
//  Revision 1.5  17-05-2019 bcordel 
//	adding sp_js_count_act_with_act_type
//
//  Revision 1.4  17-12-2018 bcordel 
//	adding sp_js_ReadFilterForSelectedPOrtfolio
//
//  OLD ---------------
//  Revision 1.0  11-04-2017 mpaganon : new functions: getQuarter() and getQuarterEndDate()
//  Revision 1.1  11-04-2017 mpaganon : rappatrie char_forbidden() de sp_js_pm_functions.ojs
//  Revision 1.2  24-11-2017 flecanut : move 'SP_getCurrentFiscalMonthBound' from 'sp_js_time_tracking.ojs'
//  Revision 1.3  21-02-2018 flecanut : move 'getAttributeStringValue' from 'sp_js_tracking_of_changes.ojs'

//
// Renvoit le code du trimestre correspondant à une date (J/F/M = "Q1", A/M/J = "Q2", Ju/A/S = "Q3", O/N/D = "Q4")
//
function getQuarter(a_date) {
	return (a_date==undefined || a_date.sdate==-1 ? "":"Q"+math.ceil(a_date.getMonth()/3));
}
getQuarter.exportfunction({"DATE"},"STRING","Returns the quarter of a specific date with format Q<n>");

// même chose pour les dates de type End-date pour lequelles il faut retirer un jour (la fonction ne peut pas le savoir !)
function getQuarterEndDate(a_date) {
	return (a_date==undefined || a_date.sdate==-1 ? "":"Q"+math.ceil(a_date.previous("day").getMonth()/3));
}
getQuarterEndDate.exportfunction({"DATE"},"STRING","Returns the quarter of a specific date with format Q<n>");

//
// Interdit tous les caractères autres que 0..9, a..z, A..Z et _ (souligné)
//
function char_forbidden(s)
{
	var reg = new regExp("[^0-9a-zA-Z_ ]");
	return (s==reg.RegMask(s) ? true:false);
}
char_forbidden.exportfunction({"STRING"},"BOOLEAN");

// used into Project popup ("Trial Code" tab)
function this_object()
{
	return this.index;
}
this_object.exportfunction("", "STRING");


//Return start date of fiscal month corresponding to date in argument
function SP_getFiscalMonthBound(referenceDate,startOrEnd){
	for(var p in "opxfiscalmonth"){
		if(p.start_date <= referenceDate && referenceDate < p.end_date){ 
			if(startOrEnd == "start") return(p.start_date);
			if(startOrEnd == "end") return(p.end_date);
		}
	}
}
SP_getFiscalMonthBound.exportfunction({"DATE","STRING"},"DATE","Return the 'start' or 'end' date of the fiscal period overlapping input date");

//Return start date of current fiscal month
function SP_getCurrentFiscalMonthBound(startOrEnd){
	return SP_getFiscalMonthBound(new date(),startOrEnd);
}
SP_getCurrentFiscalMonthBound.exportfunction({"STRING"},"DATE","Return the 'start' or 'end' date of the current fiscal period");

//Return start date of previous fiscal month
function SP_getPreviousFiscalMonthBound(startOrEnd){
	var vCurrentFMB = SP_getCurrentFiscalMonthBound("start");
	return SP_getFiscalMonthBound("add_duration".callmacro(vCurrentFMB, -1440, ""),startOrEnd);
}
SP_getPreviousFiscalMonthBound.exportfunction({"STRING"},"DATE","Return the 'start' or 'end' date of the previous fiscal period");


//----------------------------
// getAttributeStringValue 
//----------------------------
// Renvoit la valeur de l'attribut sous la forme d'une string.
// Tient compte des attributs de type DURATION, DATE, NUMBER.
//
function getAttributeStringValue(att)
{
	// récupère la valeur "internal" et "ojs" de l'attribut, sa classe (ex: OpxTask, OpxLink...) et le type de l'attribut
	var o_valOjs  = this.get(att);
	var o_valInt  = this.getInternalValue(att);
	var classObj  = (typeOf this);
	var attType   = classObj.getSlot(att).descriptor.type.name.toString();

	// valeur de retour
	var retVal = o_valInt;

	// cas particulier de la modification de la durée d'une activité où c'est l'attribut "PHASIS" (type: LIST-OF-PHASIS) qui est considéré comme modifié
	// Comme il peut y avoir plusieurs phases dans une activité, on considère pour simplifier que c'est la 1ère qui nous intéresse pour tracer sa durée
	if (attType == "LIST-OF-PHASIS")
		retVal = (o_valInt instanceOf Array && o_valInt.length > 0) ? o_valInt[0] / 1440:"ERR";
	else if (attType == "DURATION")
		retVal = o_valInt / 1440;  // traduit des minutes en jours (1j = 1440')
	else if (attType == "DATE" || attType == "END-DATE")
		// les dates de fin sont codées en interne avec un jour de plus
		retVal = (o_valOjs == undefined) ? "":(att.indexOf("END") == undefined && att.indexOf("FINISH") == undefined) ? o_valOjs:o_valOjs.previous("day");
	else if (attType == "NUMBER" || attType == "OBJECT-NUMBER")
		retVal = (o_valOjs == Math.round(o_valOjs)) ? o_valOjs.toString("####"):o_valOjs.toString("####.00");
	else if (attType == "DURATION-COMPUTING-MODE" || attType == "EXPENDITURE-DURATION-COMPUTING-MODE")
		retVal = o_valOjs;

	// dans le cas d'une entité Opx, on récupère son index
	var s_type = (typeOf o_valInt);
	if (s_type.subString(0,3) == "Opx")
		retVal = o_valInt.index;

	return (retVal == undefined ? "":retVal.toString());
}


// Returning the filter of a portfolio in parameter.
function sp_js_ReadFilterForSelectedPortfolio(s_portfolio){
  var SelectedPortfolio = "opx_ff_pt_favor_filters".get(s_portfolio);
  var Returnvalue = "TRUE";
  if(SelectedPortfolio InstanceOf opx_ff_pt_favor_filters){
    Returnvalue = SelectedPortfolio.computePortfolioFormula();
  }
  return Returnvalue;
}sp_js_ReadFilterForSelectedPortfolio.exportfunction({"STRING"},"STRING","Return the filter of the portfolio given in parameter");

////////
//	Count the number of activies with given activity type under the activity it is called on
//	Adding also an option to add a filter to the count
////////
method sp_js_count_act_with_act_type on opxactivity(s_act_type,s_add_filter)
{
	var o_current_act = this;
	var n_count_act=0;
	fromobject(o_current_act)
	{
		for (var o_act in "opxactivity" where o_act.WBS_TYPE.NAME==s_act_type)
		{
			if (s_add_filter!="" && o_act.CallBooleanFormula(s_add_filter))
			{
				n_count_act++;
			}else if (s_add_filter=="")
			{
				n_count_act++;
			}
		}
	}
	return n_count_act
}sp_js_count_act_with_act_type.exportfunction({"STRING","STRING"},"NUMBER","Return the count of activities under this one with an activity type equal to the one given in parameter. Additionnal filter possible.");



writetolog("Script SP_JS_UTILS loaded with version ~a ", revision_number); 

 
//SP_VIRTUAL_DATASET
//Scripts dependent on the script _INF_JS_UTILS_SCRIPT contained in Utils.ojs
// OCT-05 : V1 SF : cr ation du script
//08-NOV-05 : V2 MF : modification de la fonction de s lection des workspaces pour ne pas prendre en compte les prjets template

// MPA: Parcours tous les worskpaces pour r cup rer ceux dont l'OBS correspond   un de ceux s lectionn s
function SP_InfGetSelectedWorkspaceFromOBS()
{
	// r cup re la liste des OBS s lectionn s
	var selectedOBS = _InfGetSelectedObjectOnClass("OpxObsElement") ;
	var associatedDataset = new vector();

	// r cup re la liste des espaces de travail associ s   la liste des OBS s lectionn s en se basant sur le champ Resp des fichiers
	for (var each in OpxWorkspace)
		if (selectedOBS.position(each.resp) != undefined && each.project.state == "Active" && each.numberOfObjects > 1 && (each.project.owner == "marco" || each.project.owner == "avillene"))
			associatedDataset.push(each);

	return associatedDataset;
}


// MPA: ne marche pas en V6 (cf. fonction suivante)
// Implementation of the link on the virtual dataset
function SP_InfVirtualDatasetOnWorkspaceLink(Editor, AlertMessage)
{
	if (Editor == undefined) return;

	var associatedDataset = SP_InfGetSelectedWorkspaceFromOBS();
	if (associatedDataset.length == 0) {
		alert(Alertmessage);
		return;
	}

	for (var each in associatedDataset where each instanceof OpxWorkspace)
		if(!each.get("OPEN"))
			each.callmacro("OPEN");

	var link =
		new HyperLink("Fvalue",
			"Attribute", "id",
			"EditorType", Editor,
			"PopUp", false
		);

	// cr e le virtual dataset
	var virtualDataset = new OpxVirtualDataset();
	virtualdataset.selectedDatasets = associatedDataset;

	Link.go(virtualdataset);
}


// MPA: fonctionne en V6   partir de la s lection d'un ou plusieurs OBS
// Fonction inspir e de la fonction processes suivante : _ihm_js_library.ojs - _InfVirtualDatasetLinkWithSelection()
function sp_open_datasets_from_obs_selection()
{
	var dSets = SP_InfGetSelectedWorkspaceFromOBS();
	if (dSets.length == 0) {
		alert("The selection does not correspond to any workspace");
		return;
	}
//alert("Nb workspace = "+dSets.length);
//alert(dSets);

	// v rifier s'il est n cessaire d'ouvrir les projets
	var nonOpenDsets = new vector();
	for (var each in dSets where each instanceof OpxWorkspace)
		if(!each.project.open)
			nonOpenDsets.push(each.project);
//alert(nonOpenDsets);
	if (nonOpenDsets.length > 0)
		//withMonitoring(true)  // est inutile quand on charge des projets car ce chargement est monitor  par Processes
			for (var each in nonOpenDsets) {
				each.callMacro("open");
				//"Opening workspaces".monitor(nonOpenDsets.length,1,1);
			}

	//nonOpenDsets.callmacro("OPEN");

	var vDataSet= new OpxVirtualDataset();
	vDataSet.selectedDatasets = dSets;

	// j'ai pomp  les lignes suivantes de la fonction _InfVirtualDatasetLinkWithSelection()
	var CurrentModuleId = GetCurrentModule("");
	var openingfunction = "Opx_GUI_PT_MODULES".get(CurrentModuleId)._GUI_AA_S_OPEN_FUNCTION;

	if (vDataSet.NumberOfActivities() > Context.get("_ADM_SET_MAX_NUMBER_OF_ACTIVITIES_TO_FORK"))
		fork();

	"_GuiAddOrOpenClass".call(vDataSet, Openingfunction, false);
}

//SP_VIRTUAL_DATASET
//Scripts dependent on the script _INF_JS_UTILS_SCRIPT contained in Utils.ojs
// OCT-05 : V1 SF : cr ation du script
//08-NOV-05 : V2 MF : modification de la fonction de s lection des workspaces pour ne pas prendre en compte les prjets template

// MPA: Parcours tous les worskpaces pour r cup rer ceux dont l'OBS correspond   un de ceux s lectionn s
function SP_InfGetSelectedWorkspaceFromOBS()
{
	// r cup re la liste des OBS s lectionn s
	var selectedOBS = _InfGetSelectedObjectOnClass("OpxObsElement") ;
	var associatedDataset = new vector();

	// r cup re la liste des espaces de travail associ s   la liste des OBS s lectionn s en se basant sur le champ Resp des fichiers
	for (var each in OpxWorkspace)
		if (selectedOBS.position(each.resp) != undefined && each.project.state == "Active" && each.numberOfObjects > 1 && (each.project.owner == "marco" || each.project.owner == "avillene"))
			associatedDataset.push(each);

	return associatedDataset;
}


// MPA: ne marche pas en V6 (cf. fonction suivante)
// Implementation of the link on the virtual dataset
function SP_InfVirtualDatasetOnWorkspaceLink(Editor, AlertMessage)
{
	if (Editor == undefined) return;

	var associatedDataset = SP_InfGetSelectedWorkspaceFromOBS();
	if (associatedDataset.length == 0) {
		alert(Alertmessage);
		return;
	}

	for (var each in associatedDataset where each instanceof OpxWorkspace)
		if(!each.get("OPEN"))
			each.callmacro("OPEN");

	var link =
		new HyperLink("Fvalue",
			"Attribute", "id",
			"EditorType", Editor,
			"PopUp", false
		);

	// cr e le virtual dataset
	var virtualDataset = new OpxVirtualDataset();
	virtualdataset.selectedDatasets = associatedDataset;

	Link.go(virtualdataset);
}


// MPA: fonctionne en V6   partir de la s lection d'un ou plusieurs OBS
// Fonction inspir e de la fonction processes suivante : _ihm_js_library.ojs - _InfVirtualDatasetLinkWithSelection()
function sp_open_datasets_from_obs_selection()
{
	var dSets = SP_InfGetSelectedWorkspaceFromOBS();
	if (dSets.length == 0) {
		alert("The selection does not correspond to any workspace");
		return;
	}
//alert("Nb workspace = "+dSets.length);
//alert(dSets);

	// v rifier s'il est n cessaire d'ouvrir les projets
	var nonOpenDsets = new vector();
	for (var each in dSets where each instanceof OpxWorkspace)
		if(!each.project.open)
			nonOpenDsets.push(each.project);
//alert(nonOpenDsets);
	if (nonOpenDsets.length > 0)
		//withMonitoring(true)  // est inutile quand on charge des projets car ce chargement est monitor  par Processes
			for (var each in nonOpenDsets) {
				each.callMacro("open");
				//"Opening workspaces".monitor(nonOpenDsets.length,1,1);
			}

	//nonOpenDsets.callmacro("OPEN");

	var vDataSet= new OpxVirtualDataset();
	vDataSet.selectedDatasets = dSets;

	// j'ai pomp  les lignes suivantes de la fonction _InfVirtualDatasetLinkWithSelection()
	var CurrentModuleId = GetCurrentModule("");
	var openingfunction = "Opx_GUI_PT_MODULES".get(CurrentModuleId)._GUI_AA_S_OPEN_FUNCTION;

	if (vDataSet.NumberOfActivities() > Context.get("_ADM_SET_MAX_NUMBER_OF_ACTIVITIES_TO_FORK"))
		fork();

	"_GuiAddOrOpenClass".call(vDataSet, Openingfunction, false);
}

 
"OpxHyperLink".defineobjectattribute("LINK_DA_OBJ_OBJECT", "Dashboard component", "OpxDashboardComponent", false, false, true);
"OpxHyperLink".defineobjectattribute("LINK_DA_OBJ_OBJECT", "Dashboard component", "OpxDashboardComponent", false, false, true);
 
method edit on OpxCOmponentImage(){
  var link = new hyperlink("Fvalue",
                       "Attribute",
                       "id",
                       "editortype",
                       "_DBB_POPUP_COMPONENT_LINK",
                       "Popup",
                       true);
  if(link != undefined){
    link.go(this);
  }
}

method edit on OpxComponentFormula(){
  if(this InstanceOf OpxComponentFormula){
    var link = new hyperlink("Fvalue",
                             "Attribute",
                             "id",
                             "editortype",
                             "_DBB_POPUP_FORMULA_CREATION",
                             "popup",
                             "false");
    if(link != undefined){
      link.go(this);
    }
  }
}

method edit on OpxComponentGrid() {
  var link = undefined;

  link = new hyperlink("Fvalue",
                       "Attribute",
                       "id",
                       "editortype",
                       "_DBB_COMPONENT_GRID_PROPERTIES",
                       "Popup",
                       true);
  if(link != undefined){
    link.go(this);
  }
}

/*
 *We draw a mousable area at the same position of the component in order to activate the link callback when clicking
 * ScaledValues = this.dashboard.scalecomponent(Viewerwidth,ViewerHeight,this);
 *@Graphics, the graphics
 */
method draw on OpxDashboardComponent(Graphics){
  var Component = this;
  var CurrentViewer = GetCurrentDisplayedWidgetViewer();
  var ScaledValues = undefined;
  var HelpBubble = "";
  //we need to get the scaled x, y , width and height for the component
  if(CurrentViewer InstanceOf DashboardViewer){
    var Viewerwidth = CurrentViewer.width;
    var ViewerHeight = CurrentViewer.Height;
    var ScaledValues =  Component.Dashboard.scalecomponent(Viewerwidth,ViewerHeight,this);
    If(Graphics InstanceOf Graphics){
      var linkonb="";
       var comporigin = this.getPlist("_PEX_ORIGIN_OBJ");
      if(comporigin instanceof OpxDashboardComponent){
        var hlink  = comporigin.getinternalvalue("r.LINK_DA_OBJ_OBJECT.HYPERLINK");
        
        if(hlink instanceof Array){
          hlink = hlink[0];
          if(hlink instanceof OpxHyperLink){
            
            linkonb = hlink.onb.toString();
            Graphics.AddmousableArea(0,0,ScaledValues[2] ,ScaledValues[3],0,"",false,_LinksActivateLink.Closure(linkonb),false,false,false);
          }
        }
      }     
      var HyperLink =this._DbbGetHyperlinkforComponent(Graphics);        
      var HelpBubble = "";
            
      if(HyperLink InstanceOf OpxHyperLink){        
        var ObjectClass = Context.FindClass().class_scriptName();
        var ObjectForFormula =  Context;
        if(this InstanceOf OpxComponentAttribute){
          ObjectClass = CurrentViewer.Object.FindClass().class_scriptName();
          ObjectForFormula = CurrentViewer.Object;
        }
        var  HelpBubbleFormula =HyperLink.Annotation_formula;
        var Formula = new formula(ObjectClass,HelpBubbleFormula,"String");
        HelpBubble =  Formula.Call(ObjectForFormula);
        //we draw the mousable area only in presentation mode
        if(PresentationModeIsActive("")){
          Graphics.AddmousableArea(0,0,ScaledValues[2] ,ScaledValues[3],0,HelpBubble,false,_LinksClickOnComponent.Closure(Graphics,this),false,false,color("_IHM_PA_HIGHLIGHT"));
        }
     }
    }
  }
}


function _Dbb_CreateLinkOnComponent(){
  var obj = this.widget.widget_searchFirstParentWidget("reportform").object;
  var ObjectClass = lispcall "Message::message-string" (obj.FindClass().Comment);
  var dashboard = obj.parent;
  var module = dashboard._DBB_AA_S_MODULE;
  var id ="";
  var link = new hyperlink("CreationForm",
                           "Class","Hyperlink",
                           "Editortype","_LINKS_POPUP_LINKS_FOLDER",
                           "DefaultA1","FILE",
                           "DefaultV1", obj.file.name,
                           "DefaultA2","Priority",
                           "DefaultV2",10000,
                           "DefaultA3","Object_Class",
                           "DefaultV3",ObjectClass,
                           "DefaultA4","_LINKS_DA_INTRANET_PAGE",
                           "DefaultV4",module,
                           "DefaultA5","FORMULA",
                           "DefaultV5","FALSE",    
                           "DefaultA6","LINK_DA_OBJ_OBJECT",
                           "DefaultV6",obj,    
                           "Popup",
                           true);
  link.go(Context);
}

function _dbb_component_get_nb_links(){
  var hlinks  = this.getinternalvalue("r.LINK_DA_OBJ_OBJECT.HYPERLINK");        
  if(hlinks instanceof Array){
    return hlinks.length;
  }
  return 0;
}

_dbb_component_get_nb_links.exportfunction(false, "boolean");

function _Dbb_EditLinkOnComponent(){
  var obj = this.widget.widget_searchFirstParentWidget("reportform").object;
  var hlinks  = obj.getinternalvalue("r.LINK_DA_OBJ_OBJECT.HYPERLINK");        
  if(hlinks instanceof Array){
    for(var hlink in hlinks){
      var link = new hyperlink("CreationForm",
                           "Class","Hyperlink",
                           "Editortype","_LINKS_POPUP_LINKS_FOLDER",                           
                           "Popup",
                           true);
      Link.Go(hlink);
      return;
    }
  }
}

function _Dbb_DeleteLinkOnComponent(){
  var obj = this.widget.widget_searchFirstParentWidget("reportform").object;
  var hlinks  = obj.getinternalvalue("r.LINK_DA_OBJ_OBJECT.HYPERLINK");        
  if(hlinks instanceof Array){
    for(var hlink in hlinks){
      hlink.delete();
    }
  }
}

method edit on OpxCOmponentImage(){
  var link = new hyperlink("Fvalue",
                       "Attribute",
                       "id",
                       "editortype",
                       "_DBB_POPUP_COMPONENT_LINK",
                       "Popup",
                       true);
  if(link != undefined){
    link.go(this);
  }
}

method edit on OpxComponentFormula(){
  if(this InstanceOf OpxComponentFormula){
    var link = new hyperlink("Fvalue",
                             "Attribute",
                             "id",
                             "editortype",
                             "_DBB_POPUP_FORMULA_CREATION",
                             "popup",
                             "false");
    if(link != undefined){
      link.go(this);
    }
  }
}

method edit on OpxComponentGrid() {
  var link = undefined;

  link = new hyperlink("Fvalue",
                       "Attribute",
                       "id",
                       "editortype",
                       "_DBB_COMPONENT_GRID_PROPERTIES",
                       "Popup",
                       true);
  if(link != undefined){
    link.go(this);
  }
}

/*
 *We draw a mousable area at the same position of the component in order to activate the link callback when clicking
 * ScaledValues = this.dashboard.scalecomponent(Viewerwidth,ViewerHeight,this);
 *@Graphics, the graphics
 */
method draw on OpxDashboardComponent(Graphics){
  var Component = this;
  var CurrentViewer = GetCurrentDisplayedWidgetViewer();
  var ScaledValues = undefined;
  var HelpBubble = "";
  //we need to get the scaled x, y , width and height for the component
  if(CurrentViewer InstanceOf DashboardViewer){
    var Viewerwidth = CurrentViewer.width;
    var ViewerHeight = CurrentViewer.Height;
    var ScaledValues =  Component.Dashboard.scalecomponent(Viewerwidth,ViewerHeight,this);
    If(Graphics InstanceOf Graphics){
      var linkonb="";
       var comporigin = this.getPlist("_PEX_ORIGIN_OBJ");
      if(comporigin instanceof OpxDashboardComponent){
        var hlink  = comporigin.getinternalvalue("r.LINK_DA_OBJ_OBJECT.HYPERLINK");
        
        if(hlink instanceof Array){
          hlink = hlink[0];
          if(hlink instanceof OpxHyperLink){
            
            linkonb = hlink.onb.toString();
            Graphics.AddmousableArea(0,0,ScaledValues[2] ,ScaledValues[3],0,"",false,_LinksActivateLink.Closure(linkonb),false,false,false);
          }
        }
      }     
      var HyperLink =this._DbbGetHyperlinkforComponent(Graphics);        
      var HelpBubble = "";
            
      if(HyperLink InstanceOf OpxHyperLink){        
        var ObjectClass = Context.FindClass().class_scriptName();
        var ObjectForFormula =  Context;
        if(this InstanceOf OpxComponentAttribute){
          ObjectClass = CurrentViewer.Object.FindClass().class_scriptName();
          ObjectForFormula = CurrentViewer.Object;
        }
        var  HelpBubbleFormula =HyperLink.Annotation_formula;
        var Formula = new formula(ObjectClass,HelpBubbleFormula,"String");
        HelpBubble =  Formula.Call(ObjectForFormula);
        //we draw the mousable area only in presentation mode
        if(PresentationModeIsActive("")){
          Graphics.AddmousableArea(0,0,ScaledValues[2] ,ScaledValues[3],0,HelpBubble,false,_LinksClickOnComponent.Closure(Graphics,this),false,false,color("_IHM_PA_HIGHLIGHT"));
        }
     }
    }
  }
}


function _Dbb_CreateLinkOnComponent(){
  var obj = this.widget.widget_searchFirstParentWidget("reportform").object;
  var ObjectClass = lispcall "Message::message-string" (obj.FindClass().Comment);
  var dashboard = obj.parent;
  var module = dashboard._DBB_AA_S_MODULE;
  var id ="";
  var link = new hyperlink("CreationForm",
                           "Class","Hyperlink",
                           "Editortype","_LINKS_POPUP_LINKS_FOLDER",
                           "DefaultA1","FILE",
                           "DefaultV1", obj.file.name,
                           "DefaultA2","Priority",
                           "DefaultV2",10000,
                           "DefaultA3","Object_Class",
                           "DefaultV3",ObjectClass,
                           "DefaultA4","_LINKS_DA_INTRANET_PAGE",
                           "DefaultV4",module,
                           "DefaultA5","FORMULA",
                           "DefaultV5","FALSE",    
                           "DefaultA6","LINK_DA_OBJ_OBJECT",
                           "DefaultV6",obj,    
                           "Popup",
                           true);
  link.go(Context);
}

function _dbb_component_get_nb_links(){
  var hlinks  = this.getinternalvalue("r.LINK_DA_OBJ_OBJECT.HYPERLINK");        
  if(hlinks instanceof Array){
    return hlinks.length;
  }
  return 0;
}

_dbb_component_get_nb_links.exportfunction(false, "boolean");

function _Dbb_EditLinkOnComponent(){
  var obj = this.widget.widget_searchFirstParentWidget("reportform").object;
  var hlinks  = obj.getinternalvalue("r.LINK_DA_OBJ_OBJECT.HYPERLINK");        
  if(hlinks instanceof Array){
    for(var hlink in hlinks){
      var link = new hyperlink("CreationForm",
                           "Class","Hyperlink",
                           "Editortype","_LINKS_POPUP_LINKS_FOLDER",                           
                           "Popup",
                           true);
      Link.Go(hlink);
      return;
    }
  }
}

function _Dbb_DeleteLinkOnComponent(){
  var obj = this.widget.widget_searchFirstParentWidget("reportform").object;
  var hlinks  = obj.getinternalvalue("r.LINK_DA_OBJ_OBJECT.HYPERLINK");        
  if(hlinks instanceof Array){
    for(var hlink in hlinks){
      hlink.delete();
    }
  }
}

 
method _dbb_Copy_One_Component on OpxDashboardComponent(OldDashboard,New_Dashboard,NewComponent){
  var ComponentArglist = new vector("FILE", undefined, "PARENT", ( NewComponent == "") ? New_Dashboard : NewComponent);
  var New_Component = this._pex_js_copyWithOriginTracking(ComponentArglist);  //Copie des composants

  if(this InstanceOf OpxComponentReport){
    //Copie des liens d?finis sur le composant
    this._Dbb_Copy_Component_links(New_Component);
    var Query = this.object;
    if ( Query instanceof opx_pex_pt_query  && query.file != "" && query.internal == false) {
      var Query_Name = Query.GenerateQueryCopyName(OldDashboard, this);
      var Query_Copy = "Opx_PEX_PT_QUERY".get(Query_Name);
      var Query_Arglist = new vector("FILE", undefined, "NAME", Query_Name, "_PEX_RA_OWNER", currentopx2user());

      if (! Query_Copy Instanceof Opx_PEX_PT_QUERY) {
        var overlay = query._pex_ra_overlay;
        if(overlay instanceof Opx_pex_pt_query && overlay.internal == false){//gestion des overlays
          var OverlayName = overlay.GenerateQueryCopyName(OldDashboard, this);
          var OverlayArglist = new vector("FILE", undefined, "NAME", OverlayName, "_PEX_RA_OWNER", currentopx2user());
          var newOverlay = overlay._dbb_js_copyQuery(OverlayArglist,OverlayName);
          Query_Arglist.setplist("_pex_ra_overlay", newOverlay);
          OverlayArglist.delete();
        }

        var New_Query = Query._dbb_js_copyQuery(Query_Arglist, Query_Name);   //Copie des queries et des objets li?s aux queries
        if ( New_Query InstanceOf Opx_PEX_PT_QUERY) {
          New_Query.file = undefined;
          //Gestion des overlays
          for ( var dpobject in New_Query.get("r._pex_ra_query._pex_pt_drop_object")) {
            var possiblequery = dpobject._pex_js_getfinalObject();
            if ( possiblequery instanceof Opx_pex_pt_query) {
              var copiedOverlayName = possiblequery.GenerateQueryCopyName(OldDashboard, this);
              var copiedOverlay = possiblequery._dbb_js_copyQuery(new vector("FILE", undefined, "NAME", copiedOverlayName, "_PEX_RA_OWNER", currentopx2user()), copiedOverlayName);
              if ( copiedOverlay instanceof Opx_pex_pt_query) {
                dpobject._pex_js_setFinalObject(copiedOverlay);
              }
            }
          }
          New_Component.object = New_Query;
          New_Component.Report = this.report;
        }
      }
      else{
        New_Component.object = Query_Copy;
      }
      Query_Arglist.delete();
    }
  }

  if(this InstanceOf OpxComponentGrid ) {
    New_Component.reportName = this.reportName;
  }


  if(this.Components != undefined){
    for(var Component in this.Components){
      Component._dbb_Copy_One_Component(OldDashboard,New_Dashboard,New_Component);
    }
  }
  ComponentArglist.delete();
  New_Component._DBB_AA_S_ORIGIN_ONB = this.Onb.ToString("####");
  return New_Component;
}

function _pex_js_copyWithOriginTracking(plist) {
  var newObj = this.CopyWithPlist(plist);
  newObj.setPlist("_PEX_ORIGIN_OBJ", this);
  return newObj;
}
method _dbb_Copy_One_Component on OpxDashboardComponent(OldDashboard,New_Dashboard,NewComponent){
  var ComponentArglist = new vector("FILE", undefined, "PARENT", ( NewComponent == "") ? New_Dashboard : NewComponent);
  var New_Component = this._pex_js_copyWithOriginTracking(ComponentArglist);  //Copie des composants

  if(this InstanceOf OpxComponentReport){
    //Copie des liens d?finis sur le composant
    this._Dbb_Copy_Component_links(New_Component);
    var Query = this.object;
    if ( Query instanceof opx_pex_pt_query  && query.file != "" && query.internal == false) {
      var Query_Name = Query.GenerateQueryCopyName(OldDashboard, this);
      var Query_Copy = "Opx_PEX_PT_QUERY".get(Query_Name);
      var Query_Arglist = new vector("FILE", undefined, "NAME", Query_Name, "_PEX_RA_OWNER", currentopx2user());

      if (! Query_Copy Instanceof Opx_PEX_PT_QUERY) {
        var overlay = query._pex_ra_overlay;
        if(overlay instanceof Opx_pex_pt_query && overlay.internal == false){//gestion des overlays
          var OverlayName = overlay.GenerateQueryCopyName(OldDashboard, this);
          var OverlayArglist = new vector("FILE", undefined, "NAME", OverlayName, "_PEX_RA_OWNER", currentopx2user());
          var newOverlay = overlay._dbb_js_copyQuery(OverlayArglist,OverlayName);
          Query_Arglist.setplist("_pex_ra_overlay", newOverlay);
          OverlayArglist.delete();
        }

        var New_Query = Query._dbb_js_copyQuery(Query_Arglist, Query_Name);   //Copie des queries et des objets li?s aux queries
        if ( New_Query InstanceOf Opx_PEX_PT_QUERY) {
          New_Query.file = undefined;
          //Gestion des overlays
          for ( var dpobject in New_Query.get("r._pex_ra_query._pex_pt_drop_object")) {
            var possiblequery = dpobject._pex_js_getfinalObject();
            if ( possiblequery instanceof Opx_pex_pt_query) {
              var copiedOverlayName = possiblequery.GenerateQueryCopyName(OldDashboard, this);
              var copiedOverlay = possiblequery._dbb_js_copyQuery(new vector("FILE", undefined, "NAME", copiedOverlayName, "_PEX_RA_OWNER", currentopx2user()), copiedOverlayName);
              if ( copiedOverlay instanceof Opx_pex_pt_query) {
                dpobject._pex_js_setFinalObject(copiedOverlay);
              }
            }
          }
          New_Component.object = New_Query;
          New_Component.Report = this.report;
        }
      }
      else{
        New_Component.object = Query_Copy;
      }
      Query_Arglist.delete();
    }
  }

  if(this InstanceOf OpxComponentGrid ) {
    New_Component.reportName = this.reportName;
  }


  if(this.Components != undefined){
    for(var Component in this.Components){
      Component._dbb_Copy_One_Component(OldDashboard,New_Dashboard,New_Component);
    }
  }
  ComponentArglist.delete();
  New_Component._DBB_AA_S_ORIGIN_ONB = this.Onb.ToString("####");
  return New_Component;
}

function _pex_js_copyWithOriginTracking(plist) {
  var newObj = this.CopyWithPlist(plist);
  newObj.setPlist("_PEX_ORIGIN_OBJ", this);
  return newObj;
}
 
//Adding baseline fields for V6.
//Modified by AMS team on 4 Apr 2019 for ITS-INC2361999
//Modified by MACS team on 3 jan 2013 for Evolution 387 modification
//Modified by YS BULL on 25 Feb for Evolution 393 modification
//Load the OpxRavlAvtivityToQv temporary table	
//Modified by MACS team on 1 Aug 2014 for Evolution 415
//Modified by MACS team on 20 April 2015 for Evolution 460/461
//Modified by AMS team ITS-INC2361999 - Add a filter in Regview export to exclude versions of NV Portfolio


for (var ActLineTemp in "OpxRavlAvtivityToQv") 
	{ 
		ActLineTemp.delete();
	}
		
//Modified by AMS team ITS-INC2361999 - Add a filter in Regview export to exclude versions of NV Portfolio
for( Var vPrj in opxProject where vPrj._INF_NF_S_PRJ_STATE_INTERNAL !="TEMPLATE" && vPrj._INF_NF_S_PRJ_STATE_INTERNAL!="SIMULATION")
{
	Fromobject(vPrj)
	{
		for (var obj in "OpxActivity" where obj.wbs_type.SP_AA_B_RAVL_REGVIEW_EXP) 
		{
			if (obj !=undefined && obj Instanceof OpxActivity)
		   {
				var newActLine = new "OpxRavlAvtivityToQv"(
				"NAME", obj.NAME,
				"SP_AA_ACT_PROD_ASSOCIATE",obj.SP_AA_ACT_PROD_ASSOCIATE,
				"SP_AA_ACT_PROD_COMMENTS",obj.SP_NF_S_RAVL_ACT_CONV_PRODUCT_COMMENTS,
				"SP_NF_CL_ACT_TYPE",obj.SP_NF_CL_ACT_TYPE,
				"SP_NF_D_RAVL_PF_UNDER_ACT",obj.SP_NF_D_RAVL_PF_UNDER_ACT,
				"SP_NF_D_RAVL_PS_UNDER_ACT",obj.SP_NF_D_RAVL_PS_UNDER_ACT,
				"SP_NF_D_RAVL_QV_APP_AF",obj.SP_NF_D_RAVL_QV_APP_AF,
				"SP_NF_D_RAVL_QV_APP_PF",obj.SP_NF_D_RAVL_QV_APP_PF,
				"SP_NF_D_RAVL_QV_ARTAPP",obj.SP_NF_D_RAVL_QV_ARTAPP,
				"SP_NF_D_RAVL_QV_DISPA_AF",obj.SP_NF_D_RAVL_QV_DISPA_AF,
				"SP_NF_D_RAVL_QV_DISPA_PF",obj.SP_NF_D_RAVL_QV_DISPA_PF,
				"SP_NF_D_RAVL_QV_IMPL_PF",obj.SP_NF_D_RAVL_QV_IMPL_PF,
				"SP_NF_D_RAVL_QV_RELFP",obj.SP_NF_D_RAVL_QV_RELFP,
				"SP_NF_D_RAVL_QV_SUB_AF",obj.SP_NF_D_RAVL_QV_SUB_AF,
				"SP_NF_D_RAVL_QV_SUB_PF",obj.SP_NF_D_RAVL_QV_SUB_PF,
				"SP_NF_S_PJT_CODE",obj.SP_NF_S_PJT_CODE,
				"SP_NF_S_RAVL_ACT_DESC",obj.SP_NF_S_RAVL_ACT_DESC,
				"SP_NF_S_RAVL_NAME_ACT",obj.SP_NF_S_RAVL_NAME_ACT,
				"SP_NF_S_RAVL_PROJECT_NAME",obj.SP_NF_S_RAVL_PRJ_NAME_QV,
				"SP_NF_S_RAVL_QV_ACT_ID",obj.SP_NF_S_RAVL_QV_ACT_ID,
				"SP_NF_S_RAVL_QV_COUNTRY",obj.SP_NF_S_RAVL_QV_COUNTRY,
				"SP_NF_S_RAVL_QV_DOSE_PER_CONT",obj.SP_NF_S_RAVL_QV_DOSE_PER_CONT,
				"SP_NF_S_RAVL_QV_PLAN_STA",obj.SP_NF_S_RAVL_QV_PLAN_STA,
				"SP_NF_S_RAVL_QV_PRODUCT",obj.SP_NF_S_RAVL_QV_PRODUCT,
				"SP_NF_S_RAVL_QV_RA_ACT_TYPE",obj.SP_NF_S_RAVL_QV_RA_ACT_TYPE,
				"SP_NF_S_PRJ_TYPE",obj.SP_NF_S_PRJ_TYPE,
				"SP_NF_B_RAVL_SUB_FLAG",obj.SP_NF_B_RAVL_SUB_FLAG,
				"SP_NF_B_RAVL_KEY_ACT_FLAG",obj.SP_NF_B_RAVL_KEY_ACT_FLAG,
				"SP_NF_D_RAVL_QV_ART_PF",obj.SP_NF_D_RAVL_QV_ART_PF,
				"SP_NF_D_RAVL_QV_DOC_AF",obj.SP_NF_D_RAVL_QV_DOC_AF,
				"SP_NF_D_RAVL_QV_DOC_PF",obj.SP_NF_D_RAVL_QV_DOC_PF,
				"SP_NF_D_RAVL_QV_GO_AF",obj.SP_NF_D_RAVL_QV_GO_AF,
				"SP_NF_D_RAVL_QV_GO_PF",obj.SP_NF_D_RAVL_QV_GO_PF,
				"SP_NF_D_RAVL_QV_IMPL_AF",obj.SP_NF_D_RAVL_QV_IMPL_AF,
				"SP_NF_D_RAVL_QV_RELAF",obj.SP_NF_D_RAVL_QV_RELAF,
				"SP_AA_N_PUB_REQ",obj.SP_AA_N_PUB_REQ,
				"SP_NF_S_RAVL_ACT_CONV_NOTEPAD",obj.SP_NF_S_RAVL_ACT_CONV_NOTEPAD,
				"SP_NF_S_RAVL_QV_PACK_SET_NAME",obj.SP_NF_S_RAVL_QV_PACK_SET_NAME,
				"SP_NF_D_RAVL_AS_UNDER_ACT",obj.SP_NF_D_RAVL_AS_UNDER_ACT,
				"SP_NF_D_RAVL_AF_UNDER_ACT",obj.SP_NF_D_RAVL_AF_UNDER_ACT,
				"SP_AA_S_ACT_REG_NUMBER",obj.SP_AA_S_ACT_REG_NUMBER,
				"NOTE_PAD",obj.NOTE_PAD,
				"SP_NF_D_YEARLY_REF_SD",obj.SP_NF_D_RAVL_REF_SD,
				"SP_NF_D_YEARLY_REF_ED",obj.SP_NF_D_RAVL_REF_FD);
			 }
		}
	}
}

// Load the OpxRavlProductsToQV temporary table

for (var PrdtLineTemp in "OpxRavlProductsToQV") 
	{
		PrdtLineTemp.delete()
	}

for (var Prdt in "OpxSPAS_PT_PRODUCT" where Prdt.SP_AA_RAVL_PRODUCT_REF) 
{
	if (Prdt !=undefined && Prdt Instanceof OpxSPAS_PT_PRODUCT)
	 {
		var newPrdtLine = new "OpxRavlProductsToQV"(
		"NAME",Prdt.NAME,
		"SP_NF_S_RAVL_PRODUCT_NAME",Prdt.SP_NF_S_RAVL_PRODUCT_NAME,
		"SP_NF_S_RAVL_PDT_FRANCHISE",Prdt.SP_NF_S_RAVL_PDT_FRANCHISE,
		"SP_NF_S_RAVL_PDT_SITE",Prdt.SP_NF_S_RAVL_PDT_SITE);

	}
}


// Load the OpxRavlGeographicAreaToQV  temporary table

for (var CountLineTemp in "OpxRavlGeographicAreaToQV") 
	{	
	CountLineTemp.delete()
	}

for (var Country in "OpxSP_PT_CL_COUNTRY") 
{
	if (Country !=undefined && Country Instanceof OpxSP_PT_CL_COUNTRY)
   {
	var newCountryLine = new "OpxRavlGeographicAreaToQV"(
	"NAME",Country.NAME,
	"SP_AA_S_CL_COUNTRY_CODE",Country.SP_AA_S_CL_COUNTRY_CODE,
	"SP_NF_S_RAVL_AREA",Country.SP_NF_S_RAVL_AREA,
	"SP_NF_S_RAVL_COUNTRIES_NAME",Country.SP_NF_S_RAVL_COUNTRIES_NAME,
	"SP_NF_S_RAVL_SUBAREA",Country.SP_NF_S_RAVL_SUBAREA);
	}
}			

//Adding baseline fields for V6.
//Modified by AMS team on 4 Apr 2019 for ITS-INC2361999
//Modified by MACS team on 3 jan 2013 for Evolution 387 modification
//Modified by YS BULL on 25 Feb for Evolution 393 modification
//Load the OpxRavlAvtivityToQv temporary table	
//Modified by MACS team on 1 Aug 2014 for Evolution 415
//Modified by MACS team on 20 April 2015 for Evolution 460/461
//Modified by AMS team ITS-INC2361999 - Add a filter in Regview export to exclude versions of NV Portfolio


for (var ActLineTemp in "OpxRavlAvtivityToQv") 
	{ 
		ActLineTemp.delete();
	}
		
//Modified by AMS team ITS-INC2361999 - Add a filter in Regview export to exclude versions of NV Portfolio
for( Var vPrj in opxProject where vPrj._INF_NF_S_PRJ_STATE_INTERNAL !="TEMPLATE" && vPrj._INF_NF_S_PRJ_STATE_INTERNAL!="SIMULATION")
{
	Fromobject(vPrj)
	{
		for (var obj in "OpxActivity" where obj.wbs_type.SP_AA_B_RAVL_REGVIEW_EXP) 
		{
			if (obj !=undefined && obj Instanceof OpxActivity)
		   {
				var newActLine = new "OpxRavlAvtivityToQv"(
				"NAME", obj.NAME,
				"SP_AA_ACT_PROD_ASSOCIATE",obj.SP_AA_ACT_PROD_ASSOCIATE,
				"SP_AA_ACT_PROD_COMMENTS",obj.SP_NF_S_RAVL_ACT_CONV_PRODUCT_COMMENTS,
				"SP_NF_CL_ACT_TYPE",obj.SP_NF_CL_ACT_TYPE,
				"SP_NF_D_RAVL_PF_UNDER_ACT",obj.SP_NF_D_RAVL_PF_UNDER_ACT,
				"SP_NF_D_RAVL_PS_UNDER_ACT",obj.SP_NF_D_RAVL_PS_UNDER_ACT,
				"SP_NF_D_RAVL_QV_APP_AF",obj.SP_NF_D_RAVL_QV_APP_AF,
				"SP_NF_D_RAVL_QV_APP_PF",obj.SP_NF_D_RAVL_QV_APP_PF,
				"SP_NF_D_RAVL_QV_ARTAPP",obj.SP_NF_D_RAVL_QV_ARTAPP,
				"SP_NF_D_RAVL_QV_DISPA_AF",obj.SP_NF_D_RAVL_QV_DISPA_AF,
				"SP_NF_D_RAVL_QV_DISPA_PF",obj.SP_NF_D_RAVL_QV_DISPA_PF,
				"SP_NF_D_RAVL_QV_IMPL_PF",obj.SP_NF_D_RAVL_QV_IMPL_PF,
				"SP_NF_D_RAVL_QV_RELFP",obj.SP_NF_D_RAVL_QV_RELFP,
				"SP_NF_D_RAVL_QV_SUB_AF",obj.SP_NF_D_RAVL_QV_SUB_AF,
				"SP_NF_D_RAVL_QV_SUB_PF",obj.SP_NF_D_RAVL_QV_SUB_PF,
				"SP_NF_S_PJT_CODE",obj.SP_NF_S_PJT_CODE,
				"SP_NF_S_RAVL_ACT_DESC",obj.SP_NF_S_RAVL_ACT_DESC,
				"SP_NF_S_RAVL_NAME_ACT",obj.SP_NF_S_RAVL_NAME_ACT,
				"SP_NF_S_RAVL_PROJECT_NAME",obj.SP_NF_S_RAVL_PRJ_NAME_QV,
				"SP_NF_S_RAVL_QV_ACT_ID",obj.SP_NF_S_RAVL_QV_ACT_ID,
				"SP_NF_S_RAVL_QV_COUNTRY",obj.SP_NF_S_RAVL_QV_COUNTRY,
				"SP_NF_S_RAVL_QV_DOSE_PER_CONT",obj.SP_NF_S_RAVL_QV_DOSE_PER_CONT,
				"SP_NF_S_RAVL_QV_PLAN_STA",obj.SP_NF_S_RAVL_QV_PLAN_STA,
				"SP_NF_S_RAVL_QV_PRODUCT",obj.SP_NF_S_RAVL_QV_PRODUCT,
				"SP_NF_S_RAVL_QV_RA_ACT_TYPE",obj.SP_NF_S_RAVL_QV_RA_ACT_TYPE,
				"SP_NF_S_PRJ_TYPE",obj.SP_NF_S_PRJ_TYPE,
				"SP_NF_B_RAVL_SUB_FLAG",obj.SP_NF_B_RAVL_SUB_FLAG,
				"SP_NF_B_RAVL_KEY_ACT_FLAG",obj.SP_NF_B_RAVL_KEY_ACT_FLAG,
				"SP_NF_D_RAVL_QV_ART_PF",obj.SP_NF_D_RAVL_QV_ART_PF,
				"SP_NF_D_RAVL_QV_DOC_AF",obj.SP_NF_D_RAVL_QV_DOC_AF,
				"SP_NF_D_RAVL_QV_DOC_PF",obj.SP_NF_D_RAVL_QV_DOC_PF,
				"SP_NF_D_RAVL_QV_GO_AF",obj.SP_NF_D_RAVL_QV_GO_AF,
				"SP_NF_D_RAVL_QV_GO_PF",obj.SP_NF_D_RAVL_QV_GO_PF,
				"SP_NF_D_RAVL_QV_IMPL_AF",obj.SP_NF_D_RAVL_QV_IMPL_AF,
				"SP_NF_D_RAVL_QV_RELAF",obj.SP_NF_D_RAVL_QV_RELAF,
				"SP_AA_N_PUB_REQ",obj.SP_AA_N_PUB_REQ,
				"SP_NF_S_RAVL_ACT_CONV_NOTEPAD",obj.SP_NF_S_RAVL_ACT_CONV_NOTEPAD,
				"SP_NF_S_RAVL_QV_PACK_SET_NAME",obj.SP_NF_S_RAVL_QV_PACK_SET_NAME,
				"SP_NF_D_RAVL_AS_UNDER_ACT",obj.SP_NF_D_RAVL_AS_UNDER_ACT,
				"SP_NF_D_RAVL_AF_UNDER_ACT",obj.SP_NF_D_RAVL_AF_UNDER_ACT,
				"SP_AA_S_ACT_REG_NUMBER",obj.SP_AA_S_ACT_REG_NUMBER,
				"NOTE_PAD",obj.NOTE_PAD,
				"SP_NF_D_YEARLY_REF_SD",obj.SP_NF_D_RAVL_REF_SD,
				"SP_NF_D_YEARLY_REF_ED",obj.SP_NF_D_RAVL_REF_FD);
			 }
		}
	}
}

// Load the OpxRavlProductsToQV temporary table

for (var PrdtLineTemp in "OpxRavlProductsToQV") 
	{
		PrdtLineTemp.delete()
	}

for (var Prdt in "OpxSPAS_PT_PRODUCT" where Prdt.SP_AA_RAVL_PRODUCT_REF) 
{
	if (Prdt !=undefined && Prdt Instanceof OpxSPAS_PT_PRODUCT)
	 {
		var newPrdtLine = new "OpxRavlProductsToQV"(
		"NAME",Prdt.NAME,
		"SP_NF_S_RAVL_PRODUCT_NAME",Prdt.SP_NF_S_RAVL_PRODUCT_NAME,
		"SP_NF_S_RAVL_PDT_FRANCHISE",Prdt.SP_NF_S_RAVL_PDT_FRANCHISE,
		"SP_NF_S_RAVL_PDT_SITE",Prdt.SP_NF_S_RAVL_PDT_SITE);

	}
}


// Load the OpxRavlGeographicAreaToQV  temporary table

for (var CountLineTemp in "OpxRavlGeographicAreaToQV") 
	{	
	CountLineTemp.delete()
	}

for (var Country in "OpxSP_PT_CL_COUNTRY") 
{
	if (Country !=undefined && Country Instanceof OpxSP_PT_CL_COUNTRY)
   {
	var newCountryLine = new "OpxRavlGeographicAreaToQV"(
	"NAME",Country.NAME,
	"SP_AA_S_CL_COUNTRY_CODE",Country.SP_AA_S_CL_COUNTRY_CODE,
	"SP_NF_S_RAVL_AREA",Country.SP_NF_S_RAVL_AREA,
	"SP_NF_S_RAVL_COUNTRIES_NAME",Country.SP_NF_S_RAVL_COUNTRIES_NAME,
	"SP_NF_S_RAVL_SUBAREA",Country.SP_NF_S_RAVL_SUBAREA);
	}
}			

 
//	NAME	: sp_nv_portfolio_function
//	AUTHOR  : Ludovic Favre
//  PURPOSE : 
//  
//  HISTORY :
var revision_number ="1.9";
//
//
// Revision 1.9 2019/02/25 MAG
// RITM0902445 - creation of _sp_ojs_get_milestone_monitoring_4 to display the stage gate timelines in monitoring
//
//  Revision 1.8  2019/03/05 mblaise
//	RITM0736427 : - update of  sp_ojs_number_milestone to count the milestones with a end date yearly to 31 december
//
//  Revision 1.7  2019/02/26 mblaise
//	ITS-INC2163272 : - Update of _sp_ojs_get_milestone_monitoring_1 to compute the Milestones of Next Project Stage by approach and to extend the function for Reporting Milestones page (project module)
//					 - Creation of _SP_REL_PROJECT_REPORTING_MILESTONES  
//
//  Revision 1.6  2019/01/15 mblaise
//	RITM0736427 : - creation of sp_ojs_number_milestone
//				  - update of sp_ojs_number_MAJM, sp_ojs_number_PKM, and sp_ojs_number_KPI1 to call the function sp_ojs_number_milestone
//
//  Revision 1.5  2018/12/25 MAG
//	RITM0736427 : - creation of sp_ojs_number_MAJM for performance indicator in MAJM report
//
//  Revision 1.4  2018/12/10 mblaise
//	RITM0736427 : - creation of _sp_ojs_get_proj_list_milestone 
// 				  - creation of _sp_ojs_get_milestone_monitoring_3 to display the major milestone in monitoring
// 				  - update of functions _sp_ojs_get_milestone_monitoring_1,_sp_ojs_get_milestone_monitoring_2, sp_ojs_number_PKM and sp_ojs_number_KPI1 to use _sp_ojs_get_proj_list_milestone
//				  - update of sp_ojs_calc_pk_completion to add majm activities
//
//  Revision 1.3  2019/01/07 bcordel
//	ITS-INC2023392 : update of function sp_month_Lead_Lag_text_color_handler to compare to the date of creation of the yearly baseline.
//
//  Revision 1.2  2018/09/03 bcordel
//	RITM0557509 : update of function sp_ojs_number_PKM to take into account the "not met" status.
//
//  Revision 1.1  11-04-2017 bcordel
//	Modification of function sp_ojs_calc_pk_completion to update calculation of the end Date.
//
//	2018-05-03 LFA - Creation of functions sp_get_project_prio_date_project and sp_get_project_prio_date (ITS-INC0865825)
//	2018-04-25 LFA - Creation of function sp_month_Lead_Lag_text_color_handler 
//	2017-10-14 LFA - Modification of function sp_ojs_number_PKM to not take PKM with empty status or "Cancelled"/"Not met" in total of PKM
//				  - Modification of function sp_ojs_calc_pk_completion
//				  - Creation of function sp_ojs_number_KPI1
//	2017-10-10 LFA - Creation of function sp_ojs_number_PKM for "Performance PKM" report
//					Creation of function sp_ojs_number_month_yearly
//					Creation of function sp_ojs_open_file
//					Creation of function sp_ojs_calc_pk_completion
//	2017-10-05 LFA - Creation of the script 

// function used to get the list of projects  
function _sp_ojs_get_proj_list_milestone()
{
	var vProj_List="";
	
	// We check if there is a project in the project filter
	if (context.SP_AA_S_OC_MNT_PRJ_FILT!="")
	{
		vProj_List=context.SP_AA_S_OC_MNT_PRJ_FILT;
	}
	// Else we get the projects of the portfolio
	else
	{
		vProj_List=sp_js_list_prj_portfolio("");
	}
	
	// We create a list of project
	return vProj_List.parsevector();
}	

// Creation of three dynamic relation to display milestones in tabs of monitoring
function _sp_ojs_get_milestone_monitoring_1(f)
{
	var o_Proj;
	var v_Proj=new vector();
	var s_approach="";
	var h_last_MLS_comp=new hastable();
	var v_approach_comp=new vector();
	var v_approach_uncomp=new vector();
	
	var d_year_start = context.CallDateFormula("PERIOD_START($DATE_OF_THE_DAY,\"YEAR\",0)");
	var d_year_end = context.CallDateFormula("PERIOD_START($DATE_OF_THE_DAY,\"YEAR\",1)");
	var s_cond ="SP_NF_ACT_TYPE_MONIT_1";
	var o_current_obj=this;
		
	// Condition for Mid-Term Objective - Next Project Stage - Submission / License / Launch (Dev) - Milestone 1 & 2 (PreDev) (NV portfolio module)
	if (o_current_obj instanceof OpxContextOpx2)
		v_Proj=_sp_ojs_get_proj_list_milestone();	
	// Condition for Reporting Milestones page (project module)
	else 
	{
		if (o_current_obj instanceof OpxProject)   v_Proj.push(o_current_obj.printattribute());
		if (o_current_obj instanceof OpxVirtualdataset)  v_Proj= o_current_obj.selecteddatasets.parselist();
		
		s_cond+=" OR SP_NF_B_PKM OR SP_AA_B_IS_MAJM OR WBS_TYPE IN (\"MGAT*\",\"MM0\")";
	}
	
	for(var s_Proj_name in v_Proj)
	{
		o_Proj = "OpxProject".get(s_Proj_name);				
		if (o_Proj instanceof OpxProject)	
		{
			fromObject(o_Proj)
			{
				
				// Get Milestones MLIM*, MLAM*, MM1, MM2, MFSM*, MIDOBJ*, SPHA0-I, MPROC (+PKM, MAJM, MM0 and MGAT0 to MAGAT4 for reporting milestones) not yet completed or completed in the ongoing reporting year
				for (var o_MLS in "OpxActivity" where o_MLS.callbooleanformula(s_cond) && o_MLS.PF!=undefined && (o_MLS.AF==undefined || (o_MLS.AF>=d_year_start && o_MLS.AF<d_year_end)))
				{			
					f.call(o_MLS)
				}	
				
				// Get Milestone of Next Project Stage 
				for (var o_MLS in "OpxActivity" where o_MLS.SP_NF_ACT_TYPE_MONIT_2  && o_MLS.PF!=undefined && (o_MLS.AF==undefined || o_MLS.PF>=d_year_start) order By {"PF"}) 
				{	
					s_approach=o_MLS.BREAKDOWN_0.printattribute();
					// Computation of the last milestone completed by approach
					if (o_MLS.AF!=undefined)
					{
						h_last_MLS_comp.set(s_approach,o_MLS);
						if (v_approach_comp.position(s_approach)==undefined) v_approach_comp.push(s_approach);
					}				
					// Add the first milestone not completed by approach
					if (o_MLS.AF==undefined && v_approach_uncomp.position(s_approach)==undefined)
					{
						f.call(o_MLS)
						v_approach_uncomp.push(s_approach);
					}			
				}
				// Add the last milestones completed 
				for (var s_approach in v_approach_comp) f.call(h_last_MLS_comp.get(s_approach)); 
				
				h_last_MLS_comp.clear();
				v_approach_comp.clear();
				v_approach_uncomp.clear();
			}
		}						
	}
}

var nv_port_monitoring_1 = new ObjectRelation("OpxOpx2Context","_SP_REL_NV_PORT_MONITORING_1");
nv_port_monitoring_1.MapMethod = "_sp_ojs_get_milestone_monitoring_1";
nv_port_monitoring_1.ConnectedToClass = "OpxTask";
nv_port_monitoring_1.comment = "NV Portfolio - All key milestones except PKM";

var project_monitoring_reporting_milestones = new ObjectRelation("OpxFILE","_SP_REL_PROJECT_REPORTING_MILESTONES");
project_monitoring_reporting_milestones.MapMethod = "_sp_ojs_get_milestone_monitoring_1";
project_monitoring_reporting_milestones.ConnectedToClass = "OpxTask";
project_monitoring_reporting_milestones.comment = "Project - All key milestones";

function _sp_ojs_get_milestone_monitoring_2(f)
{
	var vProj;
	var vProj_Vec=_sp_ojs_get_proj_list_milestone();
	
	for(var vProj_name in vProj_Vec)
	{
		vProj = "OpxProject".get(vProj_name);
		
		if (vProj instanceof OpxProject)	
		{
			// Get all PKM milestones
			fromObject(vProj)
			{
				for (var vMLS in "OpxActivity" where vMLS.SP_NF_B_PKM)
				{			
					f.call(vMLS)
				}		
			}	
		}
	}
}

var nv_port_monitoring_2 = new ObjectRelation("OpxOpx2Context","_SP_REL_NV_PORT_MONITORING_2");
nv_port_monitoring_2.MapMethod = "_sp_ojs_get_milestone_monitoring_2";
nv_port_monitoring_2.ConnectedToClass = "Opx_Task";
nv_port_monitoring_2.comment = "NV Portfolio - PKM Milestones";

function _sp_ojs_get_milestone_monitoring_3(f)
{

	var vProj;
	var vProj_Vec=_sp_ojs_get_proj_list_milestone();

	for(var vProj_name in vProj_Vec)
	{
		vProj = "OpxProject".get(vProj_name);
		
		if (vProj instanceof OpxProject)	
		{
			// Get all major milestones
			fromObject(vProj)
			{
				for (var vMAJM in "OpxActivity" where vMAJM.SP_AA_B_IS_MAJM)
				{			
					f.call(vMAJM)
				}		
			}	
		}
	}
}

var nv_port_monitoring_2 = new ObjectRelation("OpxOpx2Context","_SP_REL_NV_PORT_MONITORING_3");
nv_port_monitoring_2.MapMethod = "_sp_ojs_get_milestone_monitoring_3";
nv_port_monitoring_2.ConnectedToClass = "Opx_Task";
nv_port_monitoring_2.comment = "NV Portfolio - Major Milestones";

function _sp_ojs_get_milestone_monitoring_4(f)
{

	var vProj;
	var vProj_Vec=_sp_ojs_get_proj_list_milestone();

	for(var vProj_name in vProj_Vec)
	{
		vProj = "OpxProject".get(vProj_name);
		
		if (vProj instanceof OpxProject)	
		{
			// Get all activity with MM* & MGAT* type
			fromObject(vProj)
			{
				for (var vSGT in "OpxActivity" where vSGT.CallBooleanFormula("BELONGS(\"WBS_TYPE\",\"MM0,MM1,MM2,MGAT0,MGAT1,MGAT2,MGAT3,MGAT4\")"))
				{			
					f.call(vSGT)
				}		
			}	
		}
	}
}

var nv_port_monitoring_3 = new ObjectRelation("OpxOpx2Context","_SP_REL_NV_PORT_MONITORING_4");
nv_port_monitoring_3.MapMethod = "_sp_ojs_get_milestone_monitoring_4";
nv_port_monitoring_3.ConnectedToClass = "Opx_Task";
nv_port_monitoring_3.comment = "NV Portfolio - Stage Gate Timelines";

// Function to display categories of milestones in Monitoring
function sp_ojs_monitoring_possible_milestones()
{
	var value = new vector();
	value.push("Milestone 1");
	value.push("Milestone 2");
	value.push("Mid-Term Objective");
	value.push("Preclinical");
	value.push("Phase 1");
	value.push("Phase 2A");
	value.push("Phase 2B");
	value.push("Phase 3");
	value.push("File Submission");
	value.push("License");
	value.push("Launch");
	this.possiblevalues=value;
}

// Function used in Performance Report
function sp_ojs_number_milestone(Type_Proj,Progress,vMilstoneCond,vBoolFilterDateYearly)
{
	var vProj;
	var number_milestone=0;
	var DDYearly=sp_js_year_start(context.SP_NF_LATEST_YEARLY_BASELINE,0);
	var DFYearly=context.callDateFormula("ADD_DURATION(sp_js_year_start(OC.SP_NF_LATEST_YEARLY_BASELINE,1),'1d',\"\")");
	
	var vProj_Vec=_sp_ojs_get_proj_list_milestone();
	if(vMilstoneCond != ""  && vBoolFilterDateYearly instanceof BOOLEAN)
	{
		for(var vProj_name in vProj_Vec)
		{
			vProj = "OpxProject".get(vProj_name);	
			// Filter according to Portfolio selection
			if (vProj!= undefined && Type_Proj=="ALL" || (Type_Proj=="PREDEV" &&  vProj.callbooleanformula("sp_nf_s_project_type in (\"*PREDEV*\")")) || (Type_Proj=="DEV" &&  vProj.callbooleanformula("sp_nf_s_project_type in (\"*NV.LCM*\" , \"*NV.EARLYDEV*\" , \"*NV.LATEDEV*\")")))
			{		
				fromObject(vProj)
				{
					for (var vMilestone in "OpxActivity" where vMilestone.callbooleanformula(vMilstoneCond) && (vBoolFilterDateYearly==false || sp_js_date_in_interval(vMilestone.FD_YEARLY,DDYearly,DFYearly)))
					if (progress=="Achieved" && vMilestone.SP_AA_B_PK_COMPLETED) 
					{
						number_milestone++;
					}
					else if (progress=="All" && vMilestone.SP_AA_S_PRG_COMPLETION_STATUS!="")
					{
						number_milestone++;					
					}
				}
			}
		}
	}
	return number_milestone;
}

// Function used in Performance Report for indicators on PKM
function sp_ojs_number_PKM(Type_Proj,Progress)
{
	return sp_ojs_number_milestone(Type_Proj,Progress,"SP_NF_B_PKM AND SP_AA_S_CANCELLED_OR_NOT_MET<>\"Cancelled\"",false);
}
sp_ojs_number_PKM.exportfunction({"STRING","STRING"},"NUMBER");

// Function used in Performance Report for indicators on KPI 1
function sp_ojs_number_KPI1(Type_Proj,Progress)
{
	return sp_ojs_number_milestone(Type_Proj,Progress,"SP_AA_S_KPI_COMMENT=\"KPI 1\" AND SP_AA_S_CANCELLED_OR_NOT_MET=\"\"",true);
}
sp_ojs_number_KPI1.exportfunction({"STRING","STRING"},"NUMBER");

// Function used in Performance Report for indicators on MAJM
function sp_ojs_number_MAJM(Type_Proj,Progress)
{
	return sp_ojs_number_milestone(Type_Proj,Progress,"SP_AA_B_IS_MAJM AND SP_AA_S_CANCELLED_OR_NOT_MET<>\"Cancelled\"",false);
}
sp_ojs_number_MAJM.exportfunction({"STRING","STRING"},"NUMBER");

function sp_js_date_in_interval(date,D1,D2){
if(date instanceof date && D1 instanceof date && D2 instanceof date){
	if (date > D1 && date < D2) {return true}
	else {return false}
}else return false}
sp_js_date_in_interval.exportfunction({"DATE","DATE","DATE"},"BOOLEAN");

function sp_js_year_start(date,NB){
	"period_start".callmacro(date, "Year", NB)
}
sp_js_year_start.exportfunction({"DATE","NUMBER"},"DATE");

function sp_ojs_number_month_yearly(Yearly_REF_ED)
{
	var vMonth_Number="MONTH_NUMBER".call(Yearly_REF_ED);
	var vMonth_Number_String="";
	
	if (vMonth_Number==1)
		vMonth_Number_String="01-January";
	else if (vMonth_Number==2)
		vMonth_Number_String="02-February";
	else if (vMonth_Number==3)
		vMonth_Number_String="03-March";
	else if (vMonth_Number==4)
		vMonth_Number_String="04-April";
	else if (vMonth_Number==5)
		vMonth_Number_String="05-May";
	else if (vMonth_Number==6)
		vMonth_Number_String="06-June";
	else if (vMonth_Number==7)
		vMonth_Number_String="07-July";
	else if (vMonth_Number==8)
		vMonth_Number_String="08-August";
	else if (vMonth_Number==9)
		vMonth_Number_String="09-September";
	else if (vMonth_Number==10)
		vMonth_Number_String="10-October";
	else if (vMonth_Number==11)
		vMonth_Number_String="11-November";
	else if (vMonth_Number==12)
		vMonth_Number_String="12-December";
	
	return vMonth_Number_String;
		
}
sp_ojs_number_month_yearly.exportfunction({"DATE"},"STRING");

// Creation of function to get file on NV Portfolio HomePage
function sp_ojs_open_file(sPdfDirectory,sPdfName)
{
	
	var Path = sPdfDirectory + "/" + sPdfName;
	
	if (Path != "")
		{
		var symb = new symbol("PDF","KEYWORD");
		var url = lispcall "wttp::get-download-url" (symb);
		var PathString = lispcall "wttp::generate-download-url-ref" (url,Path,context.applet.user);

		var link = new hyperlink("url","page",PathString,"PopUp",true);
		link.go("");
		return true;
	}
}

// Creation of function sp_ojs_calc_pk_completion to store progression of PKM for NV Portfolio Performance
function sp_ojs_calc_pk_completion()
{
	context.GEN_CHART_DD = sp_js_year_start(context.SP_NF_LATEST_YEARLY_BASELINE,0);
	context.GEN_CHART_ED = context.callDateFormula("ADD_DURATION(sp_js_year_start(OC.SP_NF_LATEST_YEARLY_BASELINE,1),'1d',\"\")");
	for (var vAct in "OpxActivity" where vAct.SP_NF_B_PKM || vAct.SP_AA_S_KPI_COMMENT=="KPI 1" || vAct.SP_AA_B_IS_MAJM)
	{
		// We store the Progression Completion Status of the PK
		vAct.SP_AA_S_PRG_COMPLETION_STATUS=vAct.SP_NF_S_PRG_COMPLETION_STATUS;
		// We identify completed PK
		if (vAct.SP_NF_S_PRG_COMPLETION_STATUS=="Ahead of Time and completed" || vAct.SP_NF_S_PRG_COMPLETION_STATUS=="On Time and completed" )
		{
			vAct.SP_AA_B_PK_COMPLETED=true;
		}
		else
		{
			vAct.SP_AA_B_PK_COMPLETED=false;
		}
		// We store Yearly Baseline Month 
		vAct.SP_AA_S_MONTH_YEARLY=vAct.SP_NF_S_MONTH_YEARLY;
	}
	
	// Update of Report Last Update Date
	Context.SP_GS_S_NV_PERF_REPORT_LAST_UPDATE="PRINT_DATE".call(new date(),"DD-MMM-YY HHhMM");
}
sp_ojs_calc_pk_completion.exportfunction();

// Fonction used in NV Portfolio report 
function sp_month_Lead_Lag_text_color_handler(slot) {
	if (this instanceof OpxActivity) 
	{
		if (Slot.descriptor.name.tostring()=="SP_NF_ACT_LEAD_LAG_M")
		{
			if (this.callbooleanformula("YEAR_NUMBER(SP_NF_D_YEARLY_REF_ED)=YEAR_NUMBER(PROJECT.SP_NF_D_YEARLY_BASELINE_DATE) and DURATION(SP_NF_S_LEADS_LAGS_MONTHLY_REF) >'28d'"))
				return color(255,0,0);
			else
			{
				if (this.callbooleanformula("YEAR_NUMBER(SP_NF_D_YEARLY_REF_ED)=YEAR_NUMBER(PROJECT.SP_NF_D_YEARLY_BASELINE_DATE) and DURATION(SP_NF_S_LEADS_LAGS_MONTHLY_REF) < '-28d'"))
					return color(0,192,0);
				else
				{				
					if (this.callbooleanformula("YEAR_NUMBER(SP_NF_D_YEARLY_REF_ED)>YEAR_NUMBER(PROJECT.SP_NF_D_YEARLY_BASELINE_DATE) and DURATION(SP_NF_S_LEADS_LAGS_MONTHLY_REF) > '91,248d'"))
						return color(255,0,0);
					else 
					{
						if (this.callbooleanformula("YEAR_NUMBER(SP_NF_D_YEARLY_REF_ED)>YEAR_NUMBER(PROJECT.SP_NF_D_YEARLY_BASELINE_DATE) and DURATION(SP_NF_S_LEADS_LAGS_MONTHLY_REF) < '-91,248d'"))
							return color(0,192,0);
						else
							return color(0,0,0);
					}				
				}
			}
		}
		else
		{
			if (Slot.descriptor.name.tostring()=="SP_NF_ACT_LEAD_LAG")
			{
				if (this.callbooleanformula("YEAR_NUMBER(SP_NF_D_YEARLY_REF_ED)=YEAR_NUMBER(PROJECT.SP_NF_D_YEARLY_BASELINE_DATE) and DURATION(SP_NF_S_LEADS_LAGS) > '28d'"))
					return color(255,0,0);
				else
				{
					if (this.callbooleanformula("YEAR_NUMBER(SP_NF_D_YEARLY_REF_ED)=YEAR_NUMBER(PROJECT.SP_NF_D_YEARLY_BASELINE_DATE) and DURATION(SP_NF_S_LEADS_LAGS) < '-28d'"))
						return color(0,192,0);
					else
					{				
						if (this.callbooleanformula("YEAR_NUMBER(SP_NF_D_YEARLY_REF_ED)>YEAR_NUMBER(PROJECT.SP_NF_D_YEARLY_BASELINE_DATE) and SP_NF_N_LEAD_LAG_MONTH>3"))
							return color(255,0,0);
						else 
						{
							if (this.callbooleanformula("YEAR_NUMBER(SP_NF_D_YEARLY_REF_ED)>YEAR_NUMBER(PROJECT.SP_NF_D_YEARLY_BASELINE_DATE) and SP_NF_N_LEAD_LAG_MONTH<-3"))
								return color(0,192,0);
							else
								return color(0,0,0);
						}				
					}
				}
			}
		}
    }
}

// Function used to get the global prio date and prio date on project
function sp_get_project_prio_date_project(vProj_ID)
{
	var vProj="OpxProject".get(vProj_ID);
	for (var vPoS in "OpxSP_PT_NV_PRIO_INF" where vPos.PROJECT==vProj order by {{"INVERSE", "SP_AA_D_POS_DATE"}} )
	{
			return "PRINT_DATE".call(vPoS.SP_AA_D_POS_DATE,"JJ-MMM-AA");
	}
	return "";
}
sp_get_project_prio_date_project.exportfunction({"STRING"},"STRING");

function sp_get_project_prio_date(No_Arg)
{
	for (var vPoS in "OpxSP_PT_NV_PRIO_INF" order by {{"INVERSE", "SP_AA_D_POS_DATE"}} )
	{
			return "PRINT_DATE".call(vPoS.SP_AA_D_POS_DATE,"JJ-MMM-AA");
	}
	return "";
}
sp_get_project_prio_date.exportfunction({"STRING"},"STRING");

writetolog("Script SP_NV_PORTFOLIO_FUNCTION loaded with version ~a ", revision_number); 

//	NAME	: sp_nv_portfolio_function
//	AUTHOR  : Ludovic Favre
//  PURPOSE : 
//  
//  HISTORY :
var revision_number ="1.9";
//
//
// Revision 1.9 2019/02/25 MAG
// RITM0902445 - creation of _sp_ojs_get_milestone_monitoring_4 to display the stage gate timelines in monitoring
//
//  Revision 1.8  2019/03/05 mblaise
//	RITM0736427 : - update of  sp_ojs_number_milestone to count the milestones with a end date yearly to 31 december
//
//  Revision 1.7  2019/02/26 mblaise
//	ITS-INC2163272 : - Update of _sp_ojs_get_milestone_monitoring_1 to compute the Milestones of Next Project Stage by approach and to extend the function for Reporting Milestones page (project module)
//					 - Creation of _SP_REL_PROJECT_REPORTING_MILESTONES  
//
//  Revision 1.6  2019/01/15 mblaise
//	RITM0736427 : - creation of sp_ojs_number_milestone
//				  - update of sp_ojs_number_MAJM, sp_ojs_number_PKM, and sp_ojs_number_KPI1 to call the function sp_ojs_number_milestone
//
//  Revision 1.5  2018/12/25 MAG
//	RITM0736427 : - creation of sp_ojs_number_MAJM for performance indicator in MAJM report
//
//  Revision 1.4  2018/12/10 mblaise
//	RITM0736427 : - creation of _sp_ojs_get_proj_list_milestone 
// 				  - creation of _sp_ojs_get_milestone_monitoring_3 to display the major milestone in monitoring
// 				  - update of functions _sp_ojs_get_milestone_monitoring_1,_sp_ojs_get_milestone_monitoring_2, sp_ojs_number_PKM and sp_ojs_number_KPI1 to use _sp_ojs_get_proj_list_milestone
//				  - update of sp_ojs_calc_pk_completion to add majm activities
//
//  Revision 1.3  2019/01/07 bcordel
//	ITS-INC2023392 : update of function sp_month_Lead_Lag_text_color_handler to compare to the date of creation of the yearly baseline.
//
//  Revision 1.2  2018/09/03 bcordel
//	RITM0557509 : update of function sp_ojs_number_PKM to take into account the "not met" status.
//
//  Revision 1.1  11-04-2017 bcordel
//	Modification of function sp_ojs_calc_pk_completion to update calculation of the end Date.
//
//	2018-05-03 LFA - Creation of functions sp_get_project_prio_date_project and sp_get_project_prio_date (ITS-INC0865825)
//	2018-04-25 LFA - Creation of function sp_month_Lead_Lag_text_color_handler 
//	2017-10-14 LFA - Modification of function sp_ojs_number_PKM to not take PKM with empty status or "Cancelled"/"Not met" in total of PKM
//				  - Modification of function sp_ojs_calc_pk_completion
//				  - Creation of function sp_ojs_number_KPI1
//	2017-10-10 LFA - Creation of function sp_ojs_number_PKM for "Performance PKM" report
//					Creation of function sp_ojs_number_month_yearly
//					Creation of function sp_ojs_open_file
//					Creation of function sp_ojs_calc_pk_completion
//	2017-10-05 LFA - Creation of the script 

// function used to get the list of projects  
function _sp_ojs_get_proj_list_milestone()
{
	var vProj_List="";
	
	// We check if there is a project in the project filter
	if (context.SP_AA_S_OC_MNT_PRJ_FILT!="")
	{
		vProj_List=context.SP_AA_S_OC_MNT_PRJ_FILT;
	}
	// Else we get the projects of the portfolio
	else
	{
		vProj_List=sp_js_list_prj_portfolio("");
	}
	
	// We create a list of project
	return vProj_List.parsevector();
}	

// Creation of three dynamic relation to display milestones in tabs of monitoring
function _sp_ojs_get_milestone_monitoring_1(f)
{
	var o_Proj;
	var v_Proj=new vector();
	var s_approach="";
	var h_last_MLS_comp=new hastable();
	var v_approach_comp=new vector();
	var v_approach_uncomp=new vector();
	
	var d_year_start = context.CallDateFormula("PERIOD_START($DATE_OF_THE_DAY,\"YEAR\",0)");
	var d_year_end = context.CallDateFormula("PERIOD_START($DATE_OF_THE_DAY,\"YEAR\",1)");
	var s_cond ="SP_NF_ACT_TYPE_MONIT_1";
	var o_current_obj=this;
		
	// Condition for Mid-Term Objective - Next Project Stage - Submission / License / Launch (Dev) - Milestone 1 & 2 (PreDev) (NV portfolio module)
	if (o_current_obj instanceof OpxContextOpx2)
		v_Proj=_sp_ojs_get_proj_list_milestone();	
	// Condition for Reporting Milestones page (project module)
	else 
	{
		if (o_current_obj instanceof OpxProject)   v_Proj.push(o_current_obj.printattribute());
		if (o_current_obj instanceof OpxVirtualdataset)  v_Proj= o_current_obj.selecteddatasets.parselist();
		
		s_cond+=" OR SP_NF_B_PKM OR SP_AA_B_IS_MAJM OR WBS_TYPE IN (\"MGAT*\",\"MM0\")";
	}
	
	for(var s_Proj_name in v_Proj)
	{
		o_Proj = "OpxProject".get(s_Proj_name);				
		if (o_Proj instanceof OpxProject)	
		{
			fromObject(o_Proj)
			{
				
				// Get Milestones MLIM*, MLAM*, MM1, MM2, MFSM*, MIDOBJ*, SPHA0-I, MPROC (+PKM, MAJM, MM0 and MGAT0 to MAGAT4 for reporting milestones) not yet completed or completed in the ongoing reporting year
				for (var o_MLS in "OpxActivity" where o_MLS.callbooleanformula(s_cond) && o_MLS.PF!=undefined && (o_MLS.AF==undefined || (o_MLS.AF>=d_year_start && o_MLS.AF<d_year_end)))
				{			
					f.call(o_MLS)
				}	
				
				// Get Milestone of Next Project Stage 
				for (var o_MLS in "OpxActivity" where o_MLS.SP_NF_ACT_TYPE_MONIT_2  && o_MLS.PF!=undefined && (o_MLS.AF==undefined || o_MLS.PF>=d_year_start) order By {"PF"}) 
				{	
					s_approach=o_MLS.BREAKDOWN_0.printattribute();
					// Computation of the last milestone completed by approach
					if (o_MLS.AF!=undefined)
					{
						h_last_MLS_comp.set(s_approach,o_MLS);
						if (v_approach_comp.position(s_approach)==undefined) v_approach_comp.push(s_approach);
					}				
					// Add the first milestone not completed by approach
					if (o_MLS.AF==undefined && v_approach_uncomp.position(s_approach)==undefined)
					{
						f.call(o_MLS)
						v_approach_uncomp.push(s_approach);
					}			
				}
				// Add the last milestones completed 
				for (var s_approach in v_approach_comp) f.call(h_last_MLS_comp.get(s_approach)); 
				
				h_last_MLS_comp.clear();
				v_approach_comp.clear();
				v_approach_uncomp.clear();
			}
		}						
	}
}

var nv_port_monitoring_1 = new ObjectRelation("OpxOpx2Context","_SP_REL_NV_PORT_MONITORING_1");
nv_port_monitoring_1.MapMethod = "_sp_ojs_get_milestone_monitoring_1";
nv_port_monitoring_1.ConnectedToClass = "OpxTask";
nv_port_monitoring_1.comment = "NV Portfolio - All key milestones except PKM";

var project_monitoring_reporting_milestones = new ObjectRelation("OpxFILE","_SP_REL_PROJECT_REPORTING_MILESTONES");
project_monitoring_reporting_milestones.MapMethod = "_sp_ojs_get_milestone_monitoring_1";
project_monitoring_reporting_milestones.ConnectedToClass = "OpxTask";
project_monitoring_reporting_milestones.comment = "Project - All key milestones";

function _sp_ojs_get_milestone_monitoring_2(f)
{
	var vProj;
	var vProj_Vec=_sp_ojs_get_proj_list_milestone();
	
	for(var vProj_name in vProj_Vec)
	{
		vProj = "OpxProject".get(vProj_name);
		
		if (vProj instanceof OpxProject)	
		{
			// Get all PKM milestones
			fromObject(vProj)
			{
				for (var vMLS in "OpxActivity" where vMLS.SP_NF_B_PKM)
				{			
					f.call(vMLS)
				}		
			}	
		}
	}
}

var nv_port_monitoring_2 = new ObjectRelation("OpxOpx2Context","_SP_REL_NV_PORT_MONITORING_2");
nv_port_monitoring_2.MapMethod = "_sp_ojs_get_milestone_monitoring_2";
nv_port_monitoring_2.ConnectedToClass = "Opx_Task";
nv_port_monitoring_2.comment = "NV Portfolio - PKM Milestones";

function _sp_ojs_get_milestone_monitoring_3(f)
{

	var vProj;
	var vProj_Vec=_sp_ojs_get_proj_list_milestone();

	for(var vProj_name in vProj_Vec)
	{
		vProj = "OpxProject".get(vProj_name);
		
		if (vProj instanceof OpxProject)	
		{
			// Get all major milestones
			fromObject(vProj)
			{
				for (var vMAJM in "OpxActivity" where vMAJM.SP_AA_B_IS_MAJM)
				{			
					f.call(vMAJM)
				}		
			}	
		}
	}
}

var nv_port_monitoring_2 = new ObjectRelation("OpxOpx2Context","_SP_REL_NV_PORT_MONITORING_3");
nv_port_monitoring_2.MapMethod = "_sp_ojs_get_milestone_monitoring_3";
nv_port_monitoring_2.ConnectedToClass = "Opx_Task";
nv_port_monitoring_2.comment = "NV Portfolio - Major Milestones";

function _sp_ojs_get_milestone_monitoring_4(f)
{

	var vProj;
	var vProj_Vec=_sp_ojs_get_proj_list_milestone();

	for(var vProj_name in vProj_Vec)
	{
		vProj = "OpxProject".get(vProj_name);
		
		if (vProj instanceof OpxProject)	
		{
			// Get all activity with MM* & MGAT* type
			fromObject(vProj)
			{
				for (var vSGT in "OpxActivity" where vSGT.CallBooleanFormula("BELONGS(\"WBS_TYPE\",\"MM0,MM1,MM2,MGAT0,MGAT1,MGAT2,MGAT3,MGAT4\")"))
				{			
					f.call(vSGT)
				}		
			}	
		}
	}
}

var nv_port_monitoring_3 = new ObjectRelation("OpxOpx2Context","_SP_REL_NV_PORT_MONITORING_4");
nv_port_monitoring_3.MapMethod = "_sp_ojs_get_milestone_monitoring_4";
nv_port_monitoring_3.ConnectedToClass = "Opx_Task";
nv_port_monitoring_3.comment = "NV Portfolio - Stage Gate Timelines";

// Function to display categories of milestones in Monitoring
function sp_ojs_monitoring_possible_milestones()
{
	var value = new vector();
	value.push("Milestone 1");
	value.push("Milestone 2");
	value.push("Mid-Term Objective");
	value.push("Preclinical");
	value.push("Phase 1");
	value.push("Phase 2A");
	value.push("Phase 2B");
	value.push("Phase 3");
	value.push("File Submission");
	value.push("License");
	value.push("Launch");
	this.possiblevalues=value;
}

// Function used in Performance Report
function sp_ojs_number_milestone(Type_Proj,Progress,vMilstoneCond,vBoolFilterDateYearly)
{
	var vProj;
	var number_milestone=0;
	var DDYearly=sp_js_year_start(context.SP_NF_LATEST_YEARLY_BASELINE,0);
	var DFYearly=context.callDateFormula("ADD_DURATION(sp_js_year_start(OC.SP_NF_LATEST_YEARLY_BASELINE,1),'1d',\"\")");
	
	var vProj_Vec=_sp_ojs_get_proj_list_milestone();
	if(vMilstoneCond != ""  && vBoolFilterDateYearly instanceof BOOLEAN)
	{
		for(var vProj_name in vProj_Vec)
		{
			vProj = "OpxProject".get(vProj_name);	
			// Filter according to Portfolio selection
			if (vProj!= undefined && Type_Proj=="ALL" || (Type_Proj=="PREDEV" &&  vProj.callbooleanformula("sp_nf_s_project_type in (\"*PREDEV*\")")) || (Type_Proj=="DEV" &&  vProj.callbooleanformula("sp_nf_s_project_type in (\"*NV.LCM*\" , \"*NV.EARLYDEV*\" , \"*NV.LATEDEV*\")")))
			{		
				fromObject(vProj)
				{
					for (var vMilestone in "OpxActivity" where vMilestone.callbooleanformula(vMilstoneCond) && (vBoolFilterDateYearly==false || sp_js_date_in_interval(vMilestone.FD_YEARLY,DDYearly,DFYearly)))
					if (progress=="Achieved" && vMilestone.SP_AA_B_PK_COMPLETED) 
					{
						number_milestone++;
					}
					else if (progress=="All" && vMilestone.SP_AA_S_PRG_COMPLETION_STATUS!="")
					{
						number_milestone++;					
					}
				}
			}
		}
	}
	return number_milestone;
}

// Function used in Performance Report for indicators on PKM
function sp_ojs_number_PKM(Type_Proj,Progress)
{
	return sp_ojs_number_milestone(Type_Proj,Progress,"SP_NF_B_PKM AND SP_AA_S_CANCELLED_OR_NOT_MET<>\"Cancelled\"",false);
}
sp_ojs_number_PKM.exportfunction({"STRING","STRING"},"NUMBER");

// Function used in Performance Report for indicators on KPI 1
function sp_ojs_number_KPI1(Type_Proj,Progress)
{
	return sp_ojs_number_milestone(Type_Proj,Progress,"SP_AA_S_KPI_COMMENT=\"KPI 1\" AND SP_AA_S_CANCELLED_OR_NOT_MET=\"\"",true);
}
sp_ojs_number_KPI1.exportfunction({"STRING","STRING"},"NUMBER");

// Function used in Performance Report for indicators on MAJM
function sp_ojs_number_MAJM(Type_Proj,Progress)
{
	return sp_ojs_number_milestone(Type_Proj,Progress,"SP_AA_B_IS_MAJM AND SP_AA_S_CANCELLED_OR_NOT_MET<>\"Cancelled\"",false);
}
sp_ojs_number_MAJM.exportfunction({"STRING","STRING"},"NUMBER");

function sp_js_date_in_interval(date,D1,D2){
if(date instanceof date && D1 instanceof date && D2 instanceof date){
	if (date > D1 && date < D2) {return true}
	else {return false}
}else return false}
sp_js_date_in_interval.exportfunction({"DATE","DATE","DATE"},"BOOLEAN");

function sp_js_year_start(date,NB){
	"period_start".callmacro(date, "Year", NB)
}
sp_js_year_start.exportfunction({"DATE","NUMBER"},"DATE");

function sp_ojs_number_month_yearly(Yearly_REF_ED)
{
	var vMonth_Number="MONTH_NUMBER".call(Yearly_REF_ED);
	var vMonth_Number_String="";
	
	if (vMonth_Number==1)
		vMonth_Number_String="01-January";
	else if (vMonth_Number==2)
		vMonth_Number_String="02-February";
	else if (vMonth_Number==3)
		vMonth_Number_String="03-March";
	else if (vMonth_Number==4)
		vMonth_Number_String="04-April";
	else if (vMonth_Number==5)
		vMonth_Number_String="05-May";
	else if (vMonth_Number==6)
		vMonth_Number_String="06-June";
	else if (vMonth_Number==7)
		vMonth_Number_String="07-July";
	else if (vMonth_Number==8)
		vMonth_Number_String="08-August";
	else if (vMonth_Number==9)
		vMonth_Number_String="09-September";
	else if (vMonth_Number==10)
		vMonth_Number_String="10-October";
	else if (vMonth_Number==11)
		vMonth_Number_String="11-November";
	else if (vMonth_Number==12)
		vMonth_Number_String="12-December";
	
	return vMonth_Number_String;
		
}
sp_ojs_number_month_yearly.exportfunction({"DATE"},"STRING");

// Creation of function to get file on NV Portfolio HomePage
function sp_ojs_open_file(sPdfDirectory,sPdfName)
{
	
	var Path = sPdfDirectory + "/" + sPdfName;
	
	if (Path != "")
		{
		var symb = new symbol("PDF","KEYWORD");
		var url = lispcall "wttp::get-download-url" (symb);
		var PathString = lispcall "wttp::generate-download-url-ref" (url,Path,context.applet.user);

		var link = new hyperlink("url","page",PathString,"PopUp",true);
		link.go("");
		return true;
	}
}

// Creation of function sp_ojs_calc_pk_completion to store progression of PKM for NV Portfolio Performance
function sp_ojs_calc_pk_completion()
{
	context.GEN_CHART_DD = sp_js_year_start(context.SP_NF_LATEST_YEARLY_BASELINE,0);
	context.GEN_CHART_ED = context.callDateFormula("ADD_DURATION(sp_js_year_start(OC.SP_NF_LATEST_YEARLY_BASELINE,1),'1d',\"\")");
	for (var vAct in "OpxActivity" where vAct.SP_NF_B_PKM || vAct.SP_AA_S_KPI_COMMENT=="KPI 1" || vAct.SP_AA_B_IS_MAJM)
	{
		// We store the Progression Completion Status of the PK
		vAct.SP_AA_S_PRG_COMPLETION_STATUS=vAct.SP_NF_S_PRG_COMPLETION_STATUS;
		// We identify completed PK
		if (vAct.SP_NF_S_PRG_COMPLETION_STATUS=="Ahead of Time and completed" || vAct.SP_NF_S_PRG_COMPLETION_STATUS=="On Time and completed" )
		{
			vAct.SP_AA_B_PK_COMPLETED=true;
		}
		else
		{
			vAct.SP_AA_B_PK_COMPLETED=false;
		}
		// We store Yearly Baseline Month 
		vAct.SP_AA_S_MONTH_YEARLY=vAct.SP_NF_S_MONTH_YEARLY;
	}
	
	// Update of Report Last Update Date
	Context.SP_GS_S_NV_PERF_REPORT_LAST_UPDATE="PRINT_DATE".call(new date(),"DD-MMM-YY HHhMM");
}
sp_ojs_calc_pk_completion.exportfunction();

// Fonction used in NV Portfolio report 
function sp_month_Lead_Lag_text_color_handler(slot) {
	if (this instanceof OpxActivity) 
	{
		if (Slot.descriptor.name.tostring()=="SP_NF_ACT_LEAD_LAG_M")
		{
			if (this.callbooleanformula("YEAR_NUMBER(SP_NF_D_YEARLY_REF_ED)=YEAR_NUMBER(PROJECT.SP_NF_D_YEARLY_BASELINE_DATE) and DURATION(SP_NF_S_LEADS_LAGS_MONTHLY_REF) >'28d'"))
				return color(255,0,0);
			else
			{
				if (this.callbooleanformula("YEAR_NUMBER(SP_NF_D_YEARLY_REF_ED)=YEAR_NUMBER(PROJECT.SP_NF_D_YEARLY_BASELINE_DATE) and DURATION(SP_NF_S_LEADS_LAGS_MONTHLY_REF) < '-28d'"))
					return color(0,192,0);
				else
				{				
					if (this.callbooleanformula("YEAR_NUMBER(SP_NF_D_YEARLY_REF_ED)>YEAR_NUMBER(PROJECT.SP_NF_D_YEARLY_BASELINE_DATE) and DURATION(SP_NF_S_LEADS_LAGS_MONTHLY_REF) > '91,248d'"))
						return color(255,0,0);
					else 
					{
						if (this.callbooleanformula("YEAR_NUMBER(SP_NF_D_YEARLY_REF_ED)>YEAR_NUMBER(PROJECT.SP_NF_D_YEARLY_BASELINE_DATE) and DURATION(SP_NF_S_LEADS_LAGS_MONTHLY_REF) < '-91,248d'"))
							return color(0,192,0);
						else
							return color(0,0,0);
					}				
				}
			}
		}
		else
		{
			if (Slot.descriptor.name.tostring()=="SP_NF_ACT_LEAD_LAG")
			{
				if (this.callbooleanformula("YEAR_NUMBER(SP_NF_D_YEARLY_REF_ED)=YEAR_NUMBER(PROJECT.SP_NF_D_YEARLY_BASELINE_DATE) and DURATION(SP_NF_S_LEADS_LAGS) > '28d'"))
					return color(255,0,0);
				else
				{
					if (this.callbooleanformula("YEAR_NUMBER(SP_NF_D_YEARLY_REF_ED)=YEAR_NUMBER(PROJECT.SP_NF_D_YEARLY_BASELINE_DATE) and DURATION(SP_NF_S_LEADS_LAGS) < '-28d'"))
						return color(0,192,0);
					else
					{				
						if (this.callbooleanformula("YEAR_NUMBER(SP_NF_D_YEARLY_REF_ED)>YEAR_NUMBER(PROJECT.SP_NF_D_YEARLY_BASELINE_DATE) and SP_NF_N_LEAD_LAG_MONTH>3"))
							return color(255,0,0);
						else 
						{
							if (this.callbooleanformula("YEAR_NUMBER(SP_NF_D_YEARLY_REF_ED)>YEAR_NUMBER(PROJECT.SP_NF_D_YEARLY_BASELINE_DATE) and SP_NF_N_LEAD_LAG_MONTH<-3"))
								return color(0,192,0);
							else
								return color(0,0,0);
						}				
					}
				}
			}
		}
    }
}

// Function used to get the global prio date and prio date on project
function sp_get_project_prio_date_project(vProj_ID)
{
	var vProj="OpxProject".get(vProj_ID);
	for (var vPoS in "OpxSP_PT_NV_PRIO_INF" where vPos.PROJECT==vProj order by {{"INVERSE", "SP_AA_D_POS_DATE"}} )
	{
			return "PRINT_DATE".call(vPoS.SP_AA_D_POS_DATE,"JJ-MMM-AA");
	}
	return "";
}
sp_get_project_prio_date_project.exportfunction({"STRING"},"STRING");

function sp_get_project_prio_date(No_Arg)
{
	for (var vPoS in "OpxSP_PT_NV_PRIO_INF" order by {{"INVERSE", "SP_AA_D_POS_DATE"}} )
	{
			return "PRINT_DATE".call(vPoS.SP_AA_D_POS_DATE,"JJ-MMM-AA");
	}
	return "";
}
sp_get_project_prio_date.exportfunction({"STRING"},"STRING");

writetolog("Script SP_NV_PORTFOLIO_FUNCTION loaded with version ~a ", revision_number); 

 
//  HISTORY :
//  Modified  by ksk 08:49 05/09/2014 added SP_MA_BATCHS_CL_QC_EXPORT for evol 363.
//  Modified  by ksk 09:52 22/10/2014 added SP_MA_BATCHS_SHARE_ACTUAL_IMPORT for evol 425.

function GetReadyToLaunch(myBatch){
  writeln(myBatch +" run test launch");	
  var myday = context.callstringformula("PRINT_DATE($DATE_OF_THE_DAY,\"Day DD-MM-YY\")");
  var mydaynum = context.callstringformula("PRINT_DATE($DATE_OF_THE_DAY,\"DD-MM-YY\")");
  var mymonth = context.callstringformula("PRINT_DATE($DATE_OF_THE_DAY,\"DD-MM-YY\")");
  
  myday = myday.substring(0,3);
  mydaynum = mydaynum.substring(0,2);

  mymonth=mymonth.substring(3,5);

  // test all batchs
  // true for all

  // if (myBatch =="SP_MA_BATCHS_SHARE_ACTUAL_IMPORT") {
  // return true;
  // } else {return false}
  
  // SHARE Actual import 
  if myBatch=="SP_MA_BATCHS_SHARE_ACTUAL_IMPORT" 
  {
    writeln("Batch SP_MA_BATCHS_SHARE_ACTUAL_IMPORT OK");
    return true
  }  
  
  // RAVL Export to QlikView
  if myBatch=="SP_MA_BATCHS_RAVL_QV_EXPORT" 
  {
    writeln("Batch SP_MA_BATCHS_RAVL_QV_EXPORT OK");
    return true
  }
  
  if myBatch == "SP_MA_BATCHS_UPD_LANG" {
    writeln("Batch SP_MA_BATCHS_UPD_LANG OK");
    return true;
  }
  
  if myBatch == "SP_MA_BATCHS_BROADCAST" {
    writeln("Batch SP_MA_BATCHS_BROADCAST OK");
    return true;
  }

  if ( myBatch == "SP_MA_BATCHS_APPLY_EQUATION") 
  {
    var next_friday_month = context.callstringformula("print_number(month_number(day_of_week(add_duration($DATE_OF_THE_DAY,10080,\"\"),5)),\"####\")");
    var friday_month = context.callstringformula("print_number(month_number(day_of_week($DATE_OF_THE_DAY,5)),\"####\")");
    if (myday.ToUpperCase() == "MON" && next_friday_month != friday_month)
    {
      writeln("Batch SP_MA_BATCHS_APPLY_EQUATION NOK");
      return false;
    }
    else
    {
      writeln("Batch SP_MA_BATCHS_APPLY_EQUATION OK");
      return true;
    }
  }
  
  if myBatch == "SP_MA_BATCHS_REMOVE_PRJ" {
    writeln("Batch SP_MA_BATCHS_REMOVE_PRJ OK");
    return true;
  }
  
  if myday.ToUpperCase() == "MON" && myBatch == "SP_MA_BATCHS_INTEGRATION" {
    writeln("Batch SP_MA_BATCHS_INTEGRATION OK");
    //Recherche si le dernier vendredi avant le lundi et le dernier vendredi du mois
    //Pour cela on recherche le day of week actuel et celui de la semaine prochaine 
    //10080 = 24*60*7
    var next_friday_month = 
    context.callstringformula("print_number(month_number(day_of_week(add_duration($DATE_OF_THE_DAY,10080,\"\"),5)),\"####\")");
    var friday_month = 
    context.callstringformula("print_number(month_number(day_of_week($DATE_OF_THE_DAY,5)),\"####\")");
    if next_friday_month != friday_month {
      return true;
    }
    
    
  }
  
  // avant le dernier samedi du mois, maintenant tous les 5 du mois
  //if myday.ToUpperCase() == "SAT" && myBatch == "SP_MA_BATCHS_SP_BT_MONTHLY_BASELINE" {
  //Recherche s il s agit du dernier samedi du mois.
  //Pour cela on rajoute 7j par rapport a la date courante et on regarde si on a change de mois 
  //10080 = 24*60*7
  //var next_week_month = 
  context.callstringformula("print_number(month_number(add_duration($DATE_OF_THE_DAY,10080,\"\")),\"####\")");
  //var week_month = context.callstringformula("print_number(month_number($DATE_OF_THE_DAY),\"####\")");
  //if next_week_month != week_month {
  //	return true;
  //}
  
  if mydaynum == "05"  && myBatch == "SP_MA_BATCHS_SP_BT_MONTHLY_BASELINE" {
    writeln("Batch SP_MA_BATCHS_SP_BT_MONTHLY_BASELINE OK");
    return true;
  }
  

  //tous les samedis
  if myBatch == "SP_MA_BATCHS_SPEC_PRJ_STAGE" && myday.ToUpperCase() == "SAT" {
    writeln("Batch SP_MA_BATCHS_SPEC_PRJ_STAGE OK");
    return true;
  }
  
  // Evol 363 Clinical QC is run every SAT
  if myBatch == "SP_MA_BATCHS_CL_QC_EXPORT" && myday.ToUpperCase() == "SAT"
  {
    writeln("Batch SP_MA_BATCHS_CL_QC_EXPORT OK");
    return true;
  }
  

  //le dernier jour du mois
  if myBatch == "SP_MA_BATCHS_QC_EXPORT"  {
    //Recherche s il s agit du dernier jour du mois.
    //Pour cela on rajoute 1j par rapport a la date courante et on regarde si on a change de mois 
    //10080 = 24*60
    var next_day_month = 
    context.callstringformula("print_number(month_number(add_duration($DATE_OF_THE_DAY,1440,\"\")),\"####\")");
    var day_month = context.callstringformula("print_number(month_number($DATE_OF_THE_DAY),\"####\")");
    if next_day_month != day_month {	
      return true;
    }
  } 
  
  //tous les dimanches
  if myBatch == "SP_MA_BATCHS_DKM_BW_EXPORT" && myday.ToUpperCase() == "SUN" {
    writeln("Batch SP_MA_BATCHS_DKM_BW_EXPORT OK");
    return true;
  } 

  //tous les jours
  if myBatch == "SP_MA_BATCHS_IMPACT_EXPORT"  {
    writeln("Batch SP_MA_BATCHS_IMPACT_EXPORT OK");
    return true;
  } 
  //tous les 1er du mois
  if myBatch == "SP_MA_BATCHS_NV_QC_EXPORT" && mydaynum == "01" {	
    writeln("Batch SP_MA_BATCHS_NV_QC_EXPORT OK");
    return true;
  } 

  //tous les 1er du mois
  if myBatch == "SP_MA_BATCHS_EDC_EXPORT" && mydaynum == "03" {
    
    writeln("Batch SP_MA_BATCHS_EDC_EXPORT OK");
    return true;
  } 


  //on attend de savoir quand on le passe
  if myBatch == "SP_MA_BATCHS_RBS_UPDATE"  {
    writeln("Batch SP_MA_BATCHS_RBS_UPDATE OK");
    return false;
  } 


  if mydaynum == "05" && mymonth == "03" && myBatch == "SP_MA_BATCH_YEARLY_BASELINE" {
    return true;
  }

  writeln(myBatch);
  writeln("Return False");
  writeln(myBatch +" end test launch");	
  return false;
  
}


withoutLocking
{
  GetReadyToLaunch.exportfunction({"STRING"},"BOOLEAN",#/E"This function returns yes or no if the batch has to be launch, 
it returns Boolean"F"Cette fonction retourne vrai ou faux selon le batch a lancer ou non"/);
}
//  HISTORY :
//  Modified  by ksk 08:49 05/09/2014 added SP_MA_BATCHS_CL_QC_EXPORT for evol 363.
//  Modified  by ksk 09:52 22/10/2014 added SP_MA_BATCHS_SHARE_ACTUAL_IMPORT for evol 425.

function GetReadyToLaunch(myBatch){
  writeln(myBatch +" run test launch");	
  var myday = context.callstringformula("PRINT_DATE($DATE_OF_THE_DAY,\"Day DD-MM-YY\")");
  var mydaynum = context.callstringformula("PRINT_DATE($DATE_OF_THE_DAY,\"DD-MM-YY\")");
  var mymonth = context.callstringformula("PRINT_DATE($DATE_OF_THE_DAY,\"DD-MM-YY\")");
  
  myday = myday.substring(0,3);
  mydaynum = mydaynum.substring(0,2);

  mymonth=mymonth.substring(3,5);

  // test all batchs
  // true for all

  // if (myBatch =="SP_MA_BATCHS_SHARE_ACTUAL_IMPORT") {
  // return true;
  // } else {return false}
  
  // SHARE Actual import 
  if myBatch=="SP_MA_BATCHS_SHARE_ACTUAL_IMPORT" 
  {
    writeln("Batch SP_MA_BATCHS_SHARE_ACTUAL_IMPORT OK");
    return true
  }  
  
  // RAVL Export to QlikView
  if myBatch=="SP_MA_BATCHS_RAVL_QV_EXPORT" 
  {
    writeln("Batch SP_MA_BATCHS_RAVL_QV_EXPORT OK");
    return true
  }
  
  if myBatch == "SP_MA_BATCHS_UPD_LANG" {
    writeln("Batch SP_MA_BATCHS_UPD_LANG OK");
    return true;
  }
  
  if myBatch == "SP_MA_BATCHS_BROADCAST" {
    writeln("Batch SP_MA_BATCHS_BROADCAST OK");
    return true;
  }

  if ( myBatch == "SP_MA_BATCHS_APPLY_EQUATION") 
  {
    var next_friday_month = context.callstringformula("print_number(month_number(day_of_week(add_duration($DATE_OF_THE_DAY,10080,\"\"),5)),\"####\")");
    var friday_month = context.callstringformula("print_number(month_number(day_of_week($DATE_OF_THE_DAY,5)),\"####\")");
    if (myday.ToUpperCase() == "MON" && next_friday_month != friday_month)
    {
      writeln("Batch SP_MA_BATCHS_APPLY_EQUATION NOK");
      return false;
    }
    else
    {
      writeln("Batch SP_MA_BATCHS_APPLY_EQUATION OK");
      return true;
    }
  }
  
  if myBatch == "SP_MA_BATCHS_REMOVE_PRJ" {
    writeln("Batch SP_MA_BATCHS_REMOVE_PRJ OK");
    return true;
  }
  
  if myday.ToUpperCase() == "MON" && myBatch == "SP_MA_BATCHS_INTEGRATION" {
    writeln("Batch SP_MA_BATCHS_INTEGRATION OK");
    //Recherche si le dernier vendredi avant le lundi et le dernier vendredi du mois
    //Pour cela on recherche le day of week actuel et celui de la semaine prochaine 
    //10080 = 24*60*7
    var next_friday_month = 
    context.callstringformula("print_number(month_number(day_of_week(add_duration($DATE_OF_THE_DAY,10080,\"\"),5)),\"####\")");
    var friday_month = 
    context.callstringformula("print_number(month_number(day_of_week($DATE_OF_THE_DAY,5)),\"####\")");
    if next_friday_month != friday_month {
      return true;
    }
    
    
  }
  
  // avant le dernier samedi du mois, maintenant tous les 5 du mois
  //if myday.ToUpperCase() == "SAT" && myBatch == "SP_MA_BATCHS_SP_BT_MONTHLY_BASELINE" {
  //Recherche s il s agit du dernier samedi du mois.
  //Pour cela on rajoute 7j par rapport a la date courante et on regarde si on a change de mois 
  //10080 = 24*60*7
  //var next_week_month = 
  context.callstringformula("print_number(month_number(add_duration($DATE_OF_THE_DAY,10080,\"\")),\"####\")");
  //var week_month = context.callstringformula("print_number(month_number($DATE_OF_THE_DAY),\"####\")");
  //if next_week_month != week_month {
  //	return true;
  //}
  
  if mydaynum == "05"  && myBatch == "SP_MA_BATCHS_SP_BT_MONTHLY_BASELINE" {
    writeln("Batch SP_MA_BATCHS_SP_BT_MONTHLY_BASELINE OK");
    return true;
  }
  

  //tous les samedis
  if myBatch == "SP_MA_BATCHS_SPEC_PRJ_STAGE" && myday.ToUpperCase() == "SAT" {
    writeln("Batch SP_MA_BATCHS_SPEC_PRJ_STAGE OK");
    return true;
  }
  
  // Evol 363 Clinical QC is run every SAT
  if myBatch == "SP_MA_BATCHS_CL_QC_EXPORT" && myday.ToUpperCase() == "SAT"
  {
    writeln("Batch SP_MA_BATCHS_CL_QC_EXPORT OK");
    return true;
  }
  

  //le dernier jour du mois
  if myBatch == "SP_MA_BATCHS_QC_EXPORT"  {
    //Recherche s il s agit du dernier jour du mois.
    //Pour cela on rajoute 1j par rapport a la date courante et on regarde si on a change de mois 
    //10080 = 24*60
    var next_day_month = 
    context.callstringformula("print_number(month_number(add_duration($DATE_OF_THE_DAY,1440,\"\")),\"####\")");
    var day_month = context.callstringformula("print_number(month_number($DATE_OF_THE_DAY),\"####\")");
    if next_day_month != day_month {	
      return true;
    }
  } 
  
  //tous les dimanches
  if myBatch == "SP_MA_BATCHS_DKM_BW_EXPORT" && myday.ToUpperCase() == "SUN" {
    writeln("Batch SP_MA_BATCHS_DKM_BW_EXPORT OK");
    return true;
  } 

  //tous les jours
  if myBatch == "SP_MA_BATCHS_IMPACT_EXPORT"  {
    writeln("Batch SP_MA_BATCHS_IMPACT_EXPORT OK");
    return true;
  } 
  //tous les 1er du mois
  if myBatch == "SP_MA_BATCHS_NV_QC_EXPORT" && mydaynum == "01" {	
    writeln("Batch SP_MA_BATCHS_NV_QC_EXPORT OK");
    return true;
  } 

  //tous les 1er du mois
  if myBatch == "SP_MA_BATCHS_EDC_EXPORT" && mydaynum == "03" {
    
    writeln("Batch SP_MA_BATCHS_EDC_EXPORT OK");
    return true;
  } 


  //on attend de savoir quand on le passe
  if myBatch == "SP_MA_BATCHS_RBS_UPDATE"  {
    writeln("Batch SP_MA_BATCHS_RBS_UPDATE OK");
    return false;
  } 


  if mydaynum == "05" && mymonth == "03" && myBatch == "SP_MA_BATCH_YEARLY_BASELINE" {
    return true;
  }

  writeln(myBatch);
  writeln("Return False");
  writeln(myBatch +" end test launch");	
  return false;
  
}


withoutLocking
{
  GetReadyToLaunch.exportfunction({"STRING"},"BOOLEAN",#/E"This function returns yes or no if the batch has to be launch, 
it returns Boolean"F"Cette fonction retourne vrai ou faux selon le batch a lancer ou non"/);
}
 
function sp_get_act_date_trial(act_type,date_type,step_acttype)
{
var result = "-1";
var curr_act=this;
	if (this!=undefined && this Instanceof OpxActivity)
	{
			fromobject(curr_act)
			{
				for (var each in "OpxActivity" where each.wbs_type.index==act_type && each.CallStringFormula("STRING_VALUE(\"ACTIVITY\",SP_GET_ACTIVITY_STEP(\"\"),\"WBS_TYPE\")")==step_acttype order by {"PS"})
				{
				
				result=each.get(date_type);
				break;
				}
			}
	}
return result;
}

withoutlocking
{
sp_get_act_date_trial.exportfunction({"STRING","STRING","STRING"},"DATE");
}

function math_ceil(number) {
  return math.ceil(number);
}
"math_ceil".exportfunction({"NUMBER"},"NUMBER","Computes the ceil value of Argument");

function sp_js_pref_rbs_filter(useless){
var oRes = this;
var result = false;
if(context.SP_NF_PREF_RBS==""){return true}
for (var each in context.SP_NF_PREF_RBS.split(",")){
if (oRes.callbooleanformula("from(\""+each+"\")"))
{result = true;
break;}
}
return result
}
sp_js_pref_rbs_filter.exportfunction({"STRING"},"BOOLEAN")
function sp_get_act_date_trial(act_type,date_type,step_acttype)
{
var result = "-1";
var curr_act=this;
	if (this!=undefined && this Instanceof OpxActivity)
	{
			fromobject(curr_act)
			{
				for (var each in "OpxActivity" where each.wbs_type.index==act_type && each.CallStringFormula("STRING_VALUE(\"ACTIVITY\",SP_GET_ACTIVITY_STEP(\"\"),\"WBS_TYPE\")")==step_acttype order by {"PS"})
				{
				
				result=each.get(date_type);
				break;
				}
			}
	}
return result;
}

withoutlocking
{
sp_get_act_date_trial.exportfunction({"STRING","STRING","STRING"},"DATE");
}

function math_ceil(number) {
  return math.ceil(number);
}
"math_ceil".exportfunction({"NUMBER"},"NUMBER","Computes the ceil value of Argument");

function sp_js_pref_rbs_filter(useless){
var oRes = this;
var result = false;
if(context.SP_NF_PREF_RBS==""){return true}
for (var each in context.SP_NF_PREF_RBS.split(",")){
if (oRes.callbooleanformula("from(\""+each+"\")"))
{result = true;
break;}
}
return result
}
sp_js_pref_rbs_filter.exportfunction({"STRING"},"BOOLEAN")
 
//Script for the Clinical reporting section
//SG 26-JUL-13: addition of new functions for returning planned finish date of last activity and next activity under a trial, of activity type S_STAT
//MF 2-JUL-07: addition of a function to check if at least one activity is Outsourced under the step (for Clinical reporting Outsourcing)
//MF 31-MAY-07: addition of function to retrieve last DB Lock of same Step inside a trial
//MF 11-MAY-07: modification for KPI report : add a new function SP_get_act_finished_date_under_step
//MF 17-AVR-07: performance improvement : function Sp_get_study_design
//MF 17-AVR-07: performance improvement on Sp_get_primo_step_info
//MF 26-MAR-07: add function to retrieve last date of a trial
//MF 8-FEB-07: script update to add function to retrieve Booster step
//MF 10-JAN-07: script update to add checkin in function SP_CL_CALCULATE_MEDIAN
//MF 21-DEC-06: add function to calculate the median value
//MF 18-DEC-06: add script to retrieve date of activity under a step.
//MF 15-DEC-06: script creation
//SG 5-FEB-14: function getlangforcountries creation
// Updated by YS & KSK (BULL) 04/03/2014 :  Initialize the variables ACT (SP3 Migration project)


function SP_get_dblocked_under_trial_same_step(test)
{
var cur_act=this;
var result;
var act_trial = "OpxActivity".get(cur_act.SP_NF_CL_TRIAL_ID);
if (act_trial!=undefined && act_trial Instanceof OpxActivity)
{
	fromobject(act_trial)
	{
		 for (var act in "OpxActivity" where act.SP_NF_CL_STEP && act.SP_NF_CL_STEP_CODE==cur_act.SP_NF_CL_STEP_CODE && act.CallBooleanFormula("SP_NF_CL_DBLOCKED_BY_STEP_PF<>-1") order by {{"INVERSE","SP_NF_CL_DBLOCKED_BY_STEP_PF"}})
		 {
		 result=act.get("SP_NF_CL_DBLOCKED_BY_STEP_PF");
		 break;
		 }
	}
}
return result;

}

withoutlocking
{
SP_get_dblocked_under_trial_same_step.exportfunction({"STRING"},"DATE");
}




function SP_get_last_act_date_under_act(date_field,act_type)
{
var cur_act=this;
var result;
var orderList = new Vector();


if (cur_act!=undefined && cur_act Instanceof OpxActivity)
{
	fromobject(cur_act)
	{
	if (act_type == "S_CTREV")
		{
		 for (var act in "OpxActivity" where act.CallBooleanFormula("BELONGS(\"WBS_TYPE\",\""+ act_type +"\")") && act.get(date_field)!=undefined && act.callstringformula("SP_NF_CL_STEP_CODE")!="PREP" order by {{"INVERSE","PF"}})
		 {
		 result=act.get(date_field);
		 break;
		 }

		}
	else
	    {
		 for (var act in "OpxActivity" where act.CallBooleanFormula("BELONGS(\"WBS_TYPE\",\""+ act_type +"\")") && act.get(date_field)!=undefined order by {{"INVERSE","PF"}})
		 {
		 result=act.get(date_field);
		 break;
		 }
	     }
	}
}
return result;

}

withoutlocking
{
SP_get_last_act_date_under_act.exportfunction({"STRING","STRING"},"DATE");
}

function Sp_get_primo_step_info()
{
var result = "";
var cur_act=this;

if (cur_act!=undefined && cur_act Instanceof OpxActivity)
{
	fromobject(cur_act)
	{
		for (var act in "OpxActivity" where act.CallBooleanFormula("BELONGS(\"WBS_TYPE\",\"S_PR,M_PR\")") order by {"PS"})
		{
		result= act.index;
		break;
		}

	}
}
	return result;
}


withoutlocking
{
Sp_get_primo_step_info.exportfunction({"STRING"},"STRING");
}

function Sp_get_study_design()
{

var vect = new Vector();
var result="";
var cur_act=this;
if (cur_act!=undefined && cur_act Instanceof OpxActivity)
{
	fromobject(cur_act)
	{
		for (var act in"OpxActivity" where act.SP_NF_B_OBS_CLIN_ACT && act.SP_NF_CL_STEP)
		{
			vect.push(act.WBS_TYPE.DESC);
		}

	}
}
	if (vect.length !=0)
	{
		vect=vect.removeduplicates();
		vect=vect.sort("<");
		result = vect.parselist().tostring();
		result=result.remove("\"");
		result=result.remove("(,");
		result=result.remove(")");
	}
	
	return result;
}


withoutlocking
{
Sp_get_study_design.exportfunction({"STRING"},"STRING");
}


function SP_CL_CALCULATE_MEDIAN(filter,field)
{
var V=new Vector();
var ReturnValue=0;
	for (var each in "OpxActivity" where each.CallBooleanFormula(filter))
	{
	V.push(each.get(field));
	}
		
	var VectorLength = V.length;
		 if (VectorLength > 0)
		 {
		  var Median = VectorLength / 2;
		  var RoundMedian = math.floor(Median);
		  var Remaining = Median - RoundMedian;

		  //writeln("Median : " + Median + " - RoundMedian : " + RoundMedian + " - Remaining : " + Remaining);

		  V.sort("<");

		  var CurrentEntry = undefined;

				  if (Remaining == 0)
				    {
				      CurrentEntry = V[RoundMedian];
				      var FirstValue = 0;
				      if (CurrentEntry != undefined)
					FirstValue = CurrentEntry;

				      CurrentEntry = V[RoundMedian - 1];
				      var SecondValue = 0;
				      if (CurrentEntry != undefined)
					SecondValue = CurrentEntry;

				      ReturnValue = FirstValue + SecondValue;

				      ReturnValue = ReturnValue / 2;
				    }
				  else
				    {
				    CurrentEntry = V[RoundMedian];

				    if (CurrentEntry != undefined)
				      ReturnValue = CurrentEntry;
				    }
		 }
		 
		return ReturnValue;
		
}

withoutlocking
{
SP_CL_CALCULATE_MEDIAN.exportfunction({"STRING","STRING"},"NUMBER");
}


function SP_CL_TRIAL_COUNT(test)
{
var act=this;
var result=0;
	if (act.SP_NF_B_CLIN_ACT)
	{
		var act_trial = "OpxActivity".get(act.SP_NF_CL_TRIAL_ID);
		var trial_list= new Vector();
		if(context.Trial_list_HashTable == undefined )
		{
		SP_CL_FILL_HASHTABLE();
		}
		result = context.Trial_list_HashTable.get(act_trial);
		
	}
return result;
}

withoutlocking
{
SP_CL_TRIAL_COUNT.exportfunction({"STRING"},"NUMBER");
}

function SP_CL_FILL_HASHTABLE()
{
    if(context.Trial_list_HashTable == undefined )
    {
      Context.Trial_list_HashTable = new hashtable ("STRING");
    }
    var position=1;
	    for (var each in "OpxActivity" where each.SP_NF_CL_TRIAL order by {"NAME"})
	    {
	    Context.Trial_list_HashTable.set(each,position);
	    position = position+1;
	    }
    		
}

function SP_GET_POPULATION_UNDER_TRIAL(){
	var cur_act=this;
	var result;
	Var populations="";
	var act_trial = "OpxActivity".get(cur_act.SP_NF_CL_TRIAL_ID);
	if (act_trial !=undefined && act_trial Instanceof OpxActivity){
		fromobject(act_trial){
			for (var act in "OpxActivity" where act.SP_NF_CL_STEP && (act.SP_AA_CL_POPULATION != undefined || act.SP_AA_CL_POPULATION !="") ){
				 populations =populations + act.SP_AA_CL_POPULATION+",";

			}			

		}
		
	}
	populations=populations.substring(0,populations.length-1);	
	var populvect=populations.split(",");
	var resultvect = populvect.removeduplicates();
               result=resultvect.join(","); 
	
return result;

}

withoutlocking
{
"SP_GET_POPULATION_UNDER_TRIAL".exportfunction("","STRING");
}

function sp_get_act_pf_last_stat_analysis(date_field,act_type)
{
var result = -1;
var cur_act=this;
if (cur_act!=undefined && cur_act Instanceof OpxActivity)
{
	fromobject(cur_act)
	{
		
        for (var act in "OpxActivity" where act.WBS_TYPE.index==act_type order by {{"INVERSE","PF"}})
		{
		result=act.get(date_field);
		break;
		}

    }
}
return result;
}

withoutlocking
{
sp_get_act_pf_last_stat_analysis.exportfunction({"STRING","STRING"},"DATE");
}

function sp_get_act_pf_next_stat_analysis(date_field,act_type)
{

var cur_act=this;
var result2;
var childVal=-1;
var orderList = new Vector();
orderList.push(date_field);
//var date = context.calldateformula("$date_of_the_day");
//ALM 1067
var date = cur_act.S_STAT_PLANNED_FINISH_FIRST_TRIAL
if (cur_act!=undefined && cur_act Instanceof OpxActivity)
{
	fromobject(cur_act)
	{ 
for (var act in "OpxActivity" where act.WBS_TYPE.index==act_type  && (act.get(date_field)!=undefined) 
order by orderList)
		  {
		   childVal=act.get(date_field);
				if (date < childVal)
					{
					result2=act.get(date_field);
					break; 
					}
		   }
	}
}
return result2;
}

withoutlocking
{
sp_get_act_pf_next_stat_analysis.exportfunction({"STRING","STRING"},"DATE");
}

//Script for the Clinical reporting section
//SG 26-JUL-13: addition of new functions for returning planned finish date of last activity and next activity under a trial, of activity type S_STAT
//MF 2-JUL-07: addition of a function to check if at least one activity is Outsourced under the step (for Clinical reporting Outsourcing)
//MF 31-MAY-07: addition of function to retrieve last DB Lock of same Step inside a trial
//MF 11-MAY-07: modification for KPI report : add a new function SP_get_act_finished_date_under_step
//MF 17-AVR-07: performance improvement : function Sp_get_study_design
//MF 17-AVR-07: performance improvement on Sp_get_primo_step_info
//MF 26-MAR-07: add function to retrieve last date of a trial
//MF 8-FEB-07: script update to add function to retrieve Booster step
//MF 10-JAN-07: script update to add checkin in function SP_CL_CALCULATE_MEDIAN
//MF 21-DEC-06: add function to calculate the median value
//MF 18-DEC-06: add script to retrieve date of activity under a step.
//MF 15-DEC-06: script creation
//SG 5-FEB-14: function getlangforcountries creation
// Updated by YS & KSK (BULL) 04/03/2014 :  Initialize the variables ACT (SP3 Migration project)


function SP_get_dblocked_under_trial_same_step(test)
{
var cur_act=this;
var result;
var act_trial = "OpxActivity".get(cur_act.SP_NF_CL_TRIAL_ID);
if (act_trial!=undefined && act_trial Instanceof OpxActivity)
{
	fromobject(act_trial)
	{
		 for (var act in "OpxActivity" where act.SP_NF_CL_STEP && act.SP_NF_CL_STEP_CODE==cur_act.SP_NF_CL_STEP_CODE && act.CallBooleanFormula("SP_NF_CL_DBLOCKED_BY_STEP_PF<>-1") order by {{"INVERSE","SP_NF_CL_DBLOCKED_BY_STEP_PF"}})
		 {
		 result=act.get("SP_NF_CL_DBLOCKED_BY_STEP_PF");
		 break;
		 }
	}
}
return result;

}

withoutlocking
{
SP_get_dblocked_under_trial_same_step.exportfunction({"STRING"},"DATE");
}




function SP_get_last_act_date_under_act(date_field,act_type)
{
var cur_act=this;
var result;
var orderList = new Vector();


if (cur_act!=undefined && cur_act Instanceof OpxActivity)
{
	fromobject(cur_act)
	{
	if (act_type == "S_CTREV")
		{
		 for (var act in "OpxActivity" where act.CallBooleanFormula("BELONGS(\"WBS_TYPE\",\""+ act_type +"\")") && act.get(date_field)!=undefined && act.callstringformula("SP_NF_CL_STEP_CODE")!="PREP" order by {{"INVERSE","PF"}})
		 {
		 result=act.get(date_field);
		 break;
		 }

		}
	else
	    {
		 for (var act in "OpxActivity" where act.CallBooleanFormula("BELONGS(\"WBS_TYPE\",\""+ act_type +"\")") && act.get(date_field)!=undefined order by {{"INVERSE","PF"}})
		 {
		 result=act.get(date_field);
		 break;
		 }
	     }
	}
}
return result;

}

withoutlocking
{
SP_get_last_act_date_under_act.exportfunction({"STRING","STRING"},"DATE");
}

function Sp_get_primo_step_info()
{
var result = "";
var cur_act=this;

if (cur_act!=undefined && cur_act Instanceof OpxActivity)
{
	fromobject(cur_act)
	{
		for (var act in "OpxActivity" where act.CallBooleanFormula("BELONGS(\"WBS_TYPE\",\"S_PR,M_PR\")") order by {"PS"})
		{
		result= act.index;
		break;
		}

	}
}
	return result;
}


withoutlocking
{
Sp_get_primo_step_info.exportfunction({"STRING"},"STRING");
}

function Sp_get_study_design()
{

var vect = new Vector();
var result="";
var cur_act=this;
if (cur_act!=undefined && cur_act Instanceof OpxActivity)
{
	fromobject(cur_act)
	{
		for (var act in"OpxActivity" where act.SP_NF_B_OBS_CLIN_ACT && act.SP_NF_CL_STEP)
		{
			vect.push(act.WBS_TYPE.DESC);
		}

	}
}
	if (vect.length !=0)
	{
		vect=vect.removeduplicates();
		vect=vect.sort("<");
		result = vect.parselist().tostring();
		result=result.remove("\"");
		result=result.remove("(,");
		result=result.remove(")");
	}
	
	return result;
}


withoutlocking
{
Sp_get_study_design.exportfunction({"STRING"},"STRING");
}


function SP_CL_CALCULATE_MEDIAN(filter,field)
{
var V=new Vector();
var ReturnValue=0;
	for (var each in "OpxActivity" where each.CallBooleanFormula(filter))
	{
	V.push(each.get(field));
	}
		
	var VectorLength = V.length;
		 if (VectorLength > 0)
		 {
		  var Median = VectorLength / 2;
		  var RoundMedian = math.floor(Median);
		  var Remaining = Median - RoundMedian;

		  //writeln("Median : " + Median + " - RoundMedian : " + RoundMedian + " - Remaining : " + Remaining);

		  V.sort("<");

		  var CurrentEntry = undefined;

				  if (Remaining == 0)
				    {
				      CurrentEntry = V[RoundMedian];
				      var FirstValue = 0;
				      if (CurrentEntry != undefined)
					FirstValue = CurrentEntry;

				      CurrentEntry = V[RoundMedian - 1];
				      var SecondValue = 0;
				      if (CurrentEntry != undefined)
					SecondValue = CurrentEntry;

				      ReturnValue = FirstValue + SecondValue;

				      ReturnValue = ReturnValue / 2;
				    }
				  else
				    {
				    CurrentEntry = V[RoundMedian];

				    if (CurrentEntry != undefined)
				      ReturnValue = CurrentEntry;
				    }
		 }
		 
		return ReturnValue;
		
}

withoutlocking
{
SP_CL_CALCULATE_MEDIAN.exportfunction({"STRING","STRING"},"NUMBER");
}


function SP_CL_TRIAL_COUNT(test)
{
var act=this;
var result=0;
	if (act.SP_NF_B_CLIN_ACT)
	{
		var act_trial = "OpxActivity".get(act.SP_NF_CL_TRIAL_ID);
		var trial_list= new Vector();
		if(context.Trial_list_HashTable == undefined )
		{
		SP_CL_FILL_HASHTABLE();
		}
		result = context.Trial_list_HashTable.get(act_trial);
		
	}
return result;
}

withoutlocking
{
SP_CL_TRIAL_COUNT.exportfunction({"STRING"},"NUMBER");
}

function SP_CL_FILL_HASHTABLE()
{
    if(context.Trial_list_HashTable == undefined )
    {
      Context.Trial_list_HashTable = new hashtable ("STRING");
    }
    var position=1;
	    for (var each in "OpxActivity" where each.SP_NF_CL_TRIAL order by {"NAME"})
	    {
	    Context.Trial_list_HashTable.set(each,position);
	    position = position+1;
	    }
    		
}

function SP_GET_POPULATION_UNDER_TRIAL(){
	var cur_act=this;
	var result;
	Var populations="";
	var act_trial = "OpxActivity".get(cur_act.SP_NF_CL_TRIAL_ID);
	if (act_trial !=undefined && act_trial Instanceof OpxActivity){
		fromobject(act_trial){
			for (var act in "OpxActivity" where act.SP_NF_CL_STEP && (act.SP_AA_CL_POPULATION != undefined || act.SP_AA_CL_POPULATION !="") ){
				 populations =populations + act.SP_AA_CL_POPULATION+",";

			}			

		}
		
	}
	populations=populations.substring(0,populations.length-1);	
	var populvect=populations.split(",");
	var resultvect = populvect.removeduplicates();
               result=resultvect.join(","); 
	
return result;

}

withoutlocking
{
"SP_GET_POPULATION_UNDER_TRIAL".exportfunction("","STRING");
}

function sp_get_act_pf_last_stat_analysis(date_field,act_type)
{
var result = -1;
var cur_act=this;
if (cur_act!=undefined && cur_act Instanceof OpxActivity)
{
	fromobject(cur_act)
	{
		
        for (var act in "OpxActivity" where act.WBS_TYPE.index==act_type order by {{"INVERSE","PF"}})
		{
		result=act.get(date_field);
		break;
		}

    }
}
return result;
}

withoutlocking
{
sp_get_act_pf_last_stat_analysis.exportfunction({"STRING","STRING"},"DATE");
}

function sp_get_act_pf_next_stat_analysis(date_field,act_type)
{

var cur_act=this;
var result2;
var childVal=-1;
var orderList = new Vector();
orderList.push(date_field);
//var date = context.calldateformula("$date_of_the_day");
//ALM 1067
var date = cur_act.S_STAT_PLANNED_FINISH_FIRST_TRIAL
if (cur_act!=undefined && cur_act Instanceof OpxActivity)
{
	fromobject(cur_act)
	{ 
for (var act in "OpxActivity" where act.WBS_TYPE.index==act_type  && (act.get(date_field)!=undefined) 
order by orderList)
		  {
		   childVal=act.get(date_field);
				if (date < childVal)
					{
					result2=act.get(date_field);
					break; 
					}
		   }
	}
}
return result2;
}

withoutlocking
{
sp_get_act_pf_next_stat_analysis.exportfunction({"STRING","STRING"},"DATE");
}

 
//Script used to create functions for IMPACT Interface
// MF  8-DEC-06 : script update following change of Step definition for Impact interface
// MF  29-NOV-06: script creation
// JBE 12-Oct-2017 : Update function Sp_get_trial_cpm 




function Sp_get_act_percentage_elapsed_time_first_protocol(percentElapsedTime,act_type) {
	var result = -1;
	var cur_act=this;

	if (cur_act!=undefined && cur_act Instanceof OpxActivity) {
		fromobject(cur_act) {
			for (var act in "OpxActivity" where act.WBS_TYPE.index==act_type order by {"PF"}) {
				result=act.get(percentElapsedTime);
				break;
			}
		}
	}
	return result;
}
withoutlocking
{
	Sp_get_act_percentage_elapsed_time_first_protocol.exportfunction({"STRING","STRING"},"NUMBER");
}

function SP_get_act_date_first_step(date_field,act_type)
{
var cur_act=this;
var result=-1;
var ok = 0;
var count=0;

if (cur_act!=undefined && cur_act Instanceof OpxActivity)
{
	fromobject(cur_act)
	{
                                for (var step in "OpxActivity" where step.SP_NF_CL_STEP_PRIMARY_IMPACT order by {"PS"})
		{
                                                count=1;
			if (ok==0)
			{
				fromobject(step)
				{
					 for (var act in "OpxActivity" where act.WBS_TYPE.index==act_type order by {"PS"})
					 {
					 result=act.get(date_field);
					 ok=1;
					 break;
					 }

				}
			}
			else
			{
			break;
			}
		}

                                if (count==0)
		{
                                                for (var step in "OpxActivity" where step.SP_NF_CL_STEP_IMPACT order by {"PS"})
		                {
			                if (ok==0)
			                {
				               fromobject(step)
				               {
					                 for (var act in "OpxActivity" where act.WBS_TYPE.index==act_type order by {"PS"})
					                 {
					                  result=act.get(date_field);
					                 ok=1;
					                 break;
					                 }

				             }
			                }
			               else
			               {
			               break;
			               }
		               }
                                }
	}
}
return result;

}

withoutlocking
{
SP_get_act_date_first_step.exportfunction({"STRING","STRING"},"DATE");
}

function SP_get_act_date_last_step(date_field,act_type)
{
var cur_act=this;
var result;
var ok=0;
if (cur_act!=undefined && cur_act Instanceof OpxActivity)
{
	fromobject(cur_act)
	{
		for (var step in "OpxActivity" where step.SP_NF_CL_STEP_IMPACT order by {{"INVERSE","PS"}} )
		{
		 	if (ok==0)
		 	{
				fromobject(step)
				{
					 for (var act in "OpxActivity" where act.WBS_TYPE.index==act_type)
					 {
					 result=act.get(date_field);
					 ok=1;
					 break;
					 }

				}
			}
			else
			{
			break;
			}
		}

	}
}
return result;

}

withoutlocking
{
SP_get_act_date_last_step.exportfunction({"STRING","STRING"},"DATE");
}


withoutlocking
{
SP_get_act_type_in_last_step.exportfunction({"STRING","STRING","STRING"},"DATE");
}


function Sp_get_trial_cpm(field)
{
var result = "";
var cur_act;
var CPM;
if (this InstanceOf OpxActivity)
{
cur_act= this;
}
else
{
cur_act=this.ACTIVITY;
}
	if (cur_act!=undefined && cur_act Instanceof OpxActivity)
	{
		if (cur_act != undefined && cur_act Instanceof OpxActivity)
		{
		var act_level=cur_act.LEVEL;
		var exit=0;
			while (act_level>=1 && (cur_act.SP_NF_B_OBS_CLIN_ACT || cur_act.SP_NF_B_CLIN_ACT) && exit==0)
			{
				if (cur_act.SP_NF_CL_TRIAL)
				{
					
					
                    CPM= cur_act.SP_NF_S_ACT_CL_CPM_NAME;
					result=CPM;

					
					exit=1;
				}
				else
				{

					cur_act=cur_act.WBS_ELEMENT;
					act_level=cur_act.LEVEL;
				}
			}
		}
	}
return result;
}



withoutlocking
{
Sp_get_trial_cpm.exportfunction({"STRING"},"STRING");
}

function Sp_get_CRF_total(formula){

var result = 0;
var cur_act;

if (this InstanceOf OpxActivity)
{
cur_act= this;
}
else
{
cur_act=this.ACTIVITY;
}
if (cur_act!=undefined && cur_act Instanceof OpxActivity)
   {
   fromobject(cur_act)
                      {
                      for (var act in OpxActivity where act.CallBooleanFormula(formula))
                          {
                          result=result+act.SP_NF_CRF_SUBJECT_PAGES_STEP
                          }
                      }
   }
return result;
}

withoutlocking
{
Sp_get_CRF_total.exportfunction({"STRING"},"NUMBER");
}




function Sp_get_trial_ONB(field)
{
var result = 0;
var cur_act;
if (this InstanceOf OpxActivity)
{
cur_act= this;
}
else
{
cur_act=this.ACTIVITY;
}
	if (cur_act!=undefined && cur_act Instanceof OpxActivity)
	{
		if (cur_act != undefined && cur_act Instanceof OpxActivity)
		{
		var act_level=cur_act.LEVEL;
		var exit=0;
			while (act_level>=1 && (cur_act.SP_NF_B_OBS_CLIN_ACT || cur_act.SP_NF_B_CLIN_ACT) && exit==0)
			{
				if (cur_act.SP_NF_CL_TRIAL)
				{
					if (field!="")
					{
					result=cur_act.get(field);
					}
					else
					{
					result=cur_act.index;

					}
					exit=1;
				}
				else
				{
					cur_act=cur_act.WBS_ELEMENT;
					act_level=cur_act.LEVEL;
				}
			}
		}
	}
return result;
}



withoutlocking
{
Sp_get_trial_ONB.exportfunction({"STRING"},"NUMBER");
}

function SP_LAST_STEP(act_type2) {
	var trial_Id=This.sp_get_trial_id("");
	var Ind_final="";
	var trial="";
	if (trial_Id !="" || trial_Id !=undefined)
	{
		trial="OpxActivity".get(trial_Id);
		
		if (trial!=undefined && trial instanceof OpxActivity)
		{
			Ind_final=trial.SP_LAST_STEP_TRIAL(act_type2);
			
					if (Ind_final==undefined)
					{
						Ind_final="";
					}
		}
		
	}
	Return Ind_final;
}

withoutlocking
{
	SP_LAST_STEP.exportfunction({"STRING"},"STRING");
}
function SP_LAST_STEP_TRIAL(act_type1) {
	var Ind="";
	fromObject(This)
	{
		for (var act in "OpxActivity" where act.WBS_TYPE.Index==act_type1 order by {{"inverse","PF"}})
		{
			Ind=act.CallStringFormula("ID");
			Break;
		}
		if (Ind==undefined)
		{
			Ind="";
		}
		Return Ind;
	}
}

withoutlocking
{
	SP_LAST_STEP_TRIAL.exportfunction({"STRING"},"STRING");
}


//Script used to create functions for IMPACT Interface
// MF  8-DEC-06 : script update following change of Step definition for Impact interface
// MF  29-NOV-06: script creation
// JBE 12-Oct-2017 : Update function Sp_get_trial_cpm 




function Sp_get_act_percentage_elapsed_time_first_protocol(percentElapsedTime,act_type) {
	var result = -1;
	var cur_act=this;

	if (cur_act!=undefined && cur_act Instanceof OpxActivity) {
		fromobject(cur_act) {
			for (var act in "OpxActivity" where act.WBS_TYPE.index==act_type order by {"PF"}) {
				result=act.get(percentElapsedTime);
				break;
			}
		}
	}
	return result;
}
withoutlocking
{
	Sp_get_act_percentage_elapsed_time_first_protocol.exportfunction({"STRING","STRING"},"NUMBER");
}

function SP_get_act_date_first_step(date_field,act_type)
{
var cur_act=this;
var result=-1;
var ok = 0;
var count=0;

if (cur_act!=undefined && cur_act Instanceof OpxActivity)
{
	fromobject(cur_act)
	{
                                for (var step in "OpxActivity" where step.SP_NF_CL_STEP_PRIMARY_IMPACT order by {"PS"})
		{
                                                count=1;
			if (ok==0)
			{
				fromobject(step)
				{
					 for (var act in "OpxActivity" where act.WBS_TYPE.index==act_type order by {"PS"})
					 {
					 result=act.get(date_field);
					 ok=1;
					 break;
					 }

				}
			}
			else
			{
			break;
			}
		}

                                if (count==0)
		{
                                                for (var step in "OpxActivity" where step.SP_NF_CL_STEP_IMPACT order by {"PS"})
		                {
			                if (ok==0)
			                {
				               fromobject(step)
				               {
					                 for (var act in "OpxActivity" where act.WBS_TYPE.index==act_type order by {"PS"})
					                 {
					                  result=act.get(date_field);
					                 ok=1;
					                 break;
					                 }

				             }
			                }
			               else
			               {
			               break;
			               }
		               }
                                }
	}
}
return result;

}

withoutlocking
{
SP_get_act_date_first_step.exportfunction({"STRING","STRING"},"DATE");
}

function SP_get_act_date_last_step(date_field,act_type)
{
var cur_act=this;
var result;
var ok=0;
if (cur_act!=undefined && cur_act Instanceof OpxActivity)
{
	fromobject(cur_act)
	{
		for (var step in "OpxActivity" where step.SP_NF_CL_STEP_IMPACT order by {{"INVERSE","PS"}} )
		{
		 	if (ok==0)
		 	{
				fromobject(step)
				{
					 for (var act in "OpxActivity" where act.WBS_TYPE.index==act_type)
					 {
					 result=act.get(date_field);
					 ok=1;
					 break;
					 }

				}
			}
			else
			{
			break;
			}
		}

	}
}
return result;

}

withoutlocking
{
SP_get_act_date_last_step.exportfunction({"STRING","STRING"},"DATE");
}


withoutlocking
{
SP_get_act_type_in_last_step.exportfunction({"STRING","STRING","STRING"},"DATE");
}


function Sp_get_trial_cpm(field)
{
var result = "";
var cur_act;
var CPM;
if (this InstanceOf OpxActivity)
{
cur_act= this;
}
else
{
cur_act=this.ACTIVITY;
}
	if (cur_act!=undefined && cur_act Instanceof OpxActivity)
	{
		if (cur_act != undefined && cur_act Instanceof OpxActivity)
		{
		var act_level=cur_act.LEVEL;
		var exit=0;
			while (act_level>=1 && (cur_act.SP_NF_B_OBS_CLIN_ACT || cur_act.SP_NF_B_CLIN_ACT) && exit==0)
			{
				if (cur_act.SP_NF_CL_TRIAL)
				{
					
					
                    CPM= cur_act.SP_NF_S_ACT_CL_CPM_NAME;
					result=CPM;

					
					exit=1;
				}
				else
				{

					cur_act=cur_act.WBS_ELEMENT;
					act_level=cur_act.LEVEL;
				}
			}
		}
	}
return result;
}



withoutlocking
{
Sp_get_trial_cpm.exportfunction({"STRING"},"STRING");
}

function Sp_get_CRF_total(formula){

var result = 0;
var cur_act;

if (this InstanceOf OpxActivity)
{
cur_act= this;
}
else
{
cur_act=this.ACTIVITY;
}
if (cur_act!=undefined && cur_act Instanceof OpxActivity)
   {
   fromobject(cur_act)
                      {
                      for (var act in OpxActivity where act.CallBooleanFormula(formula))
                          {
                          result=result+act.SP_NF_CRF_SUBJECT_PAGES_STEP
                          }
                      }
   }
return result;
}

withoutlocking
{
Sp_get_CRF_total.exportfunction({"STRING"},"NUMBER");
}




function Sp_get_trial_ONB(field)
{
var result = 0;
var cur_act;
if (this InstanceOf OpxActivity)
{
cur_act= this;
}
else
{
cur_act=this.ACTIVITY;
}
	if (cur_act!=undefined && cur_act Instanceof OpxActivity)
	{
		if (cur_act != undefined && cur_act Instanceof OpxActivity)
		{
		var act_level=cur_act.LEVEL;
		var exit=0;
			while (act_level>=1 && (cur_act.SP_NF_B_OBS_CLIN_ACT || cur_act.SP_NF_B_CLIN_ACT) && exit==0)
			{
				if (cur_act.SP_NF_CL_TRIAL)
				{
					if (field!="")
					{
					result=cur_act.get(field);
					}
					else
					{
					result=cur_act.index;

					}
					exit=1;
				}
				else
				{
					cur_act=cur_act.WBS_ELEMENT;
					act_level=cur_act.LEVEL;
				}
			}
		}
	}
return result;
}



withoutlocking
{
Sp_get_trial_ONB.exportfunction({"STRING"},"NUMBER");
}

function SP_LAST_STEP(act_type2) {
	var trial_Id=This.sp_get_trial_id("");
	var Ind_final="";
	var trial="";
	if (trial_Id !="" || trial_Id !=undefined)
	{
		trial="OpxActivity".get(trial_Id);
		
		if (trial!=undefined && trial instanceof OpxActivity)
		{
			Ind_final=trial.SP_LAST_STEP_TRIAL(act_type2);
			
					if (Ind_final==undefined)
					{
						Ind_final="";
					}
		}
		
	}
	Return Ind_final;
}

withoutlocking
{
	SP_LAST_STEP.exportfunction({"STRING"},"STRING");
}
function SP_LAST_STEP_TRIAL(act_type1) {
	var Ind="";
	fromObject(This)
	{
		for (var act in "OpxActivity" where act.WBS_TYPE.Index==act_type1 order by {{"inverse","PF"}})
		{
			Ind=act.CallStringFormula("ID");
			Break;
		}
		if (Ind==undefined)
		{
			Ind="";
		}
		Return Ind;
	}
}

withoutlocking
{
	SP_LAST_STEP_TRIAL.exportfunction({"STRING"},"STRING");
}


 
context.callmacro("SP_TO_OC_GZIP_EDC_CSV")
context.callmacro("SP_TO_OC_GZIP_EDC_CSV")
 
//	NAME	: SP_OJS_RAVL_QLIKVIEW_INTERFACE
//	AUTHOR  : 
//  PURPOSE : 
//  
//  HISTORY :
var revision_number ="1.1";
//
//  Revision 1.1  2018/06/28 bcordel
//	modification of function : sp_sbs_load_temp_table, ITS-INC0616187  ITS-INC0423097 : changing the last modification calculation
//
//-------------- old logs--------------
//updated by cjs for EVOL 422 - Update in Regview export on 11/12/2014
//updated by YSA for EVOL 446 on 06/30/2015  ravl_QV_convertNotepad
// Modified by ksk 14:21 02/02/2016  523 - SBS Export Zone Interface--

global var RuleAcType= new hashtable("STRING");
var TypeDateTab=new vector("Approval","Submission","Dispatch","Implementation","Artwork","FinishProduct","ExpectedStart","Decision","Available");

/*
Approval ------------------0
Submission ----------------1
Dispatch ------------------2
Implementation ----------3
Artwork -------------------4
FinishProduct -------------5
ExpectedStart------------6
Decision-------------------7
Available------------------8
*/

//for VAR_ACT
RuleAcType.set("VAR_ACT"+TypeDateTab[0],"VAR_APP,VAR_NATAPP,VAR_EUCOMM");
RuleAcType.set("VAR_ACT"+TypeDateTab[1],"VAR_SUBHA");
RuleAcType.set("VAR_ACT"+TypeDateTab[2],"VAR_SENT");
RuleAcType.set("VAR_ACT"+TypeDateTab[5],"VAR_RELFP");
RuleAcType.set("VAR_ACT"+TypeDateTab[3],"VAR_MCMIMP");
RuleAcType.set("VAR_ACT"+TypeDateTab[4],"VAR_ARTAPP");
RuleAcType.set("VAR_ACT"+TypeDateTab[7],"VAR_GO");
RuleAcType.set("VAR_ACT"+TypeDateTab[8],"VAR_LASTDOC");
//for DSURSUB
RuleAcType.set("DSURSUB"+TypeDateTab[1],"DSURSUB");
RuleAcType.set("DSURSUB"+TypeDateTab[6],"DSURPREP");
//for RSUBMPCL
RuleAcType.set("RSUBMPCL"+TypeDateTab[1],"RDSPCL");
RuleAcType.set("RSUBMPCL"+TypeDateTab[0],"RDRHAPCL");
//for RSUBM1
RuleAcType.set("RSUBM1"+TypeDateTab[1],"RDS1");
RuleAcType.set("RSUBM1"+TypeDateTab[0],"RDRHA1");
//for RSUBM2
RuleAcType.set("RSUBM2"+TypeDateTab[1],"RDS2");
RuleAcType.set("RSUBM2"+TypeDateTab[0],"RDRHA2");
//for RSUBM3
RuleAcType.set("RSUBM3"+TypeDateTab[1],"RDS3");
RuleAcType.set("RSUBM3"+TypeDateTab[0],"RDRHA3");
//for CTASUB1
RuleAcType.set("CTASUB1"+TypeDateTab[1],"CTADS1");
RuleAcType.set("CTASUB1"+TypeDateTab[0],"CTADRHA1");
RuleAcType.set("CTASUB1"+TypeDateTab[6],"CTASP1");
//for CTASUB2
RuleAcType.set("CTASUB2"+TypeDateTab[1],"CTADS2");
RuleAcType.set("CTASUB2"+TypeDateTab[0],"CTADRHA2");
RuleAcType.set("CTASUB2"+TypeDateTab[6],"CTASP2");
//for CTASUB3
RuleAcType.set("CTASUB3"+TypeDateTab[1],"CTADS3");
RuleAcType.set("CTASUB3"+TypeDateTab[0],"CTADRHA3");
RuleAcType.set("CTASUB3"+TypeDateTab[6],"CTASP3");
//for RSUBMREG
RuleAcType.set("RSUBMREG"+TypeDateTab[1],"RDSREG");
RuleAcType.set("RSUBMREG"+TypeDateTab[0],"RDRHAREG");
//for INDSUB1
RuleAcType.set("INDSUB1"+TypeDateTab[1],"INDDS1");
RuleAcType.set("INDSUB1"+TypeDateTab[0],"INDDRHA1");
RuleAcType.set("INDSUB1"+TypeDateTab[6],"INDPRP1");
//for INDSUB2
RuleAcType.set("INDSUB2"+TypeDateTab[1],"INDDS2");
RuleAcType.set("INDSUB2"+TypeDateTab[0],"INDDRHA2");
RuleAcType.set("INDSUB2"+TypeDateTab[6],"INDPRP2");
//for INDSUB3
RuleAcType.set("INDSUB3"+TypeDateTab[1],"INDDS3");
RuleAcType.set("INDSUB3"+TypeDateTab[0],"INDDRHA3");
RuleAcType.set("INDSUB3"+TypeDateTab[6],"INDPRP3");
//for SUBAM1
RuleAcType.set("SUBAM1"+TypeDateTab[1],"AMSDS1");
RuleAcType.set("SUBAM1"+TypeDateTab[0],"AMRHA1");
RuleAcType.set("SUBAM1"+TypeDateTab[6],"AMSP1");
//for SUBAM2
RuleAcType.set("SUBAM2"+TypeDateTab[1],"AMSDS2");
RuleAcType.set("SUBAM2"+TypeDateTab[0],"AMRHA2");
RuleAcType.set("SUBAM2"+TypeDateTab[6],"AMSP2");
//for SUBAM3
RuleAcType.set("SUBAM3"+TypeDateTab[1],"AMSDS3");
RuleAcType.set("SUBAM3"+TypeDateTab[0],"AMRHA3");
RuleAcType.set("SUBAM3"+TypeDateTab[6],"AMSP3");
//for RQSPCL
RuleAcType.set("RQSPCL"+TypeDateTab[1],"RQPCL-GPKM");
RuleAcType.set("RQSPCL"+TypeDateTab[6],"RQSPPCL");
//for RQS1
RuleAcType.set("RQS1"+TypeDateTab[1],"RQ1-GPKM");
RuleAcType.set("RQS1"+TypeDateTab[6],"RQSP1");
//for RQS2
RuleAcType.set("RQS2"+TypeDateTab[1],"RQ2-GPKM");
RuleAcType.set("RQS2"+TypeDateTab[6],"RQSP2");
//for RQS3
RuleAcType.set("RQS3"+TypeDateTab[1],"RQ3-GPKM");
RuleAcType.set("RQS3"+TypeDateTab[6],"RQSP3");
//for RQSREG
RuleAcType.set("RQSREG"+TypeDateTab[1],"RQREG-GPKM");
RuleAcType.set("RQSREG"+TypeDateTab[1],"RQSPREG");
//for PIPSUB
RuleAcType.set("PIPSUB"+TypeDateTab[1],"PIPDS");
RuleAcType.set("PIPSUB"+TypeDateTab[0],"PIPAPP");
RuleAcType.set("PIPSUB"+TypeDateTab[6],"LPREP");
//for PIPAM2
RuleAcType.set("PIPAM2"+TypeDateTab[1],"PIPDS,PIPDS-P3");
RuleAcType.set("PIPAM2"+TypeDateTab[0],"PIPAPP");
RuleAcType.set("PIPAM2"+TypeDateTab[6],"LPREP");
//for PIPAM3
RuleAcType.set("PIPAM3"+TypeDateTab[1],"PIPDS-P3,PIPDS");
RuleAcType.set("PIPAM3"+TypeDateTab[0],"PIPAPP");
RuleAcType.set("PIPAM3"+TypeDateTab[6],"LPREP");
//for MAAP
RuleAcType.set("MAAP"+TypeDateTab[1],"CTDSUB,SUB2EMEA,MAA2HA");
RuleAcType.set("MAAP"+TypeDateTab[0],"NMALIC,LICR,D255,D210REP");
//for MRPR
RuleAcType.set("MRPR"+TypeDateTab[1],"D0");
RuleAcType.set("MRPR"+TypeDateTab[0],"LICR");
//for CPRO
RuleAcType.set("CPRO"+TypeDateTab[1],"SUB2EMEA");
RuleAcType.set("CPRO"+TypeDateTab[0],"D255");
//for DPRO
RuleAcType.set("DPRO"+TypeDateTab[1],"D0");
RuleAcType.set("DPRO"+TypeDateTab[0],"D210REP");
//for NRG
RuleAcType.set("NRG"+TypeDateTab[2],"NRGPREP");
RuleAcType.set("NRG"+TypeDateTab[1],"MAA2HA");
RuleAcType.set("NRG"+TypeDateTab[0],"NMALIC,NRGLOC");
//for RNW
RuleAcType.set("RNW"+TypeDateTab[2],"RNWPREP");
RuleAcType.set("RNW"+TypeDateTab[0],"RNWLOC");
//for CTDPSAREG
RuleAcType.set("CTDPSAREG"+TypeDateTab[1],"PSMR");
//for EPHA2ME
RuleAcType.set("EPHA2ME"+TypeDateTab[1],"EPH2MR");
//for ADCOMREG
RuleAcType.set("ADCOMREG"+TypeDateTab[1],"FINSUB");
//for HAMPCL
RuleAcType.set("HAMPCL"+TypeDateTab[1],"HAMRPCL");
//for HAMEET1
RuleAcType.set("HAMEET1"+TypeDateTab[1],"HAMR1");
//for HAMEET2
RuleAcType.set("HAMEET2"+TypeDateTab[1],"HAMR2");
//for HAMEET3
RuleAcType.set("HAMEET3"+TypeDateTab[1],"HAMR3");
//for HAMEETREG
RuleAcType.set("HAMEETREG"+TypeDateTab[1],"HAMRREG");
//for RA_CTD_TEMPLATE
RuleAcType.set("RA_CTD_TEMPLATE"+TypeDateTab[1],"CTDSUBMI");
//for SUMREP1
RuleAcType.set("SUMREP1"+TypeDateTab[1],"SRS1");
//for SUMREP2
RuleAcType.set("SUMREP2"+TypeDateTab[1],"SRS2");
//for SUMREP3
RuleAcType.set("SUMREP3"+TypeDateTab[1],"SRS3");
//for TDR	
RuleAcType.set("TDR"+TypeDateTab[2],"TDPREP");
//for SUBHA1
RuleAcType.set("SUBHA1"+TypeDateTab[1],"SUBHA1");
//for SUBHA2
RuleAcType.set("SUBHA2"+TypeDateTab[1],"SUBHA2");
//for SUBHA3
RuleAcType.set("SUBHA3"+TypeDateTab[1],"SUBHA3");
// for ANN_REP_INTL
RuleAcType.set("ANN_REP_INTL"+TypeDateTab[2],"ANN_REP_PREP");
RuleAcType.set("ANN_REP_INTL"+TypeDateTab[1],"ANN_REP_SUB");

function HASHTABLE_VALUE(key){
  var Result ="";
  var TabTemp=RuleAcType.get(key);
  if (TabTemp!="" && TabTemp!=undefined)
  Result=TabTemp;
  return Result;
}
withoutlocking
{
  HASHTABLE_VALUE.exportfunction({"STRING"},"STRING")
}

//Function return Date

function RAVL_QV_GETDATE (DateType,EvalDate)
{
  var Act=this;
  var key="";
  var Values="";
  var myDate ="";
  var NMALIC_FOUND="";
  var orderList=new vector();
  orderList.push(EvalDate);
  if (Act!=undefined && Act Instanceof OpxActivity)
  {
    key=Act.Wbs_Type.name+DateType;
    values=HASHTABLE_VALUE(key);
    if (values!="")
    {
      var TabValues=values.parsevector();
      fromobject(Act)
      {
        for (var task in OpxActivity where task.get(EvalDate)!=undefined order by orderList)
        {
          for (var TempValue in TabValues)
          {
            if (TempValue==task.Wbs_Type.name)
            {
              if(key=="NRGApproval")
              {
                if(task.Wbs_Type.name=="NMALIC" )
                {
                  myDate=task.get(EvalDate);
                  NMALIC_FOUND=1; 
                }
                else if(NMALIC_FOUND!=1 && task.Wbs_Type.name=="NRGLOC")
                {
                  myDate=task.get(EvalDate);
                }
              }
              else
              {
                myDate=task.get(EvalDate);
              }
            }
          }
        }
      }
      
    }
  }
  return myDate;
}
withoutlocking
{
  RAVL_QV_GETDATE.exportfunction({"STRING","STRING"},"DATE")
}

//Function return attributes

function RAVL_QV_GETATTRIBUTES(ActAtt,VartAtt,IsList) {
  var Act=this;
  var ListElement= new Vector();
  var result = "";
  if (Act!=undefined && Act Instanceof OpxActivity)
  {         
    if( Act.CallBooleanFormula("SP_NF_B_IS_RAVL_ACT"))
    {
      if (VartAtt!=undefined && VartAtt!="")
      {
        //Return attribut on Variation (Go to Activity -> Worksharing->Variation)
        var Variation= Act.SP_RA_RAVL_WORKSHARING.get("r.SP_RA_RAVL_WORKSHARING1.SP_PT_RAVL");
        for (Var Vrt in Variation)
        {
          if (Vrt.get(VartAtt)!=undefined)
          ListElement.push(Vrt.get(VartAtt));
          
        }
        if (!IsList)
        {
          for (var Element in ListElement where (Element!="" && Element!=undefined))
          {
            result=Element;
            break;
          }
        }
        else
        {
          result = ListElement.join("|");
        }
      }

    }
    else 
    {
      //Return attribut on Activity Compass with PINFOLINK_POPUP equal True
      if (Act.wbs_type.SP_AA_AT_B_PINFOLINK_POPUP && (ActAtt!=undefined && ActAtt!="") && (Act.get(ActAtt)!=undefined) )
      result= Act.get(ActAtt);
    }
  }

  return result;
}
withoutlocking
{
  RAVL_QV_GETATTRIBUTES.exportfunction({"STRING","STRING","BOOLEAN"},"STRING")
}

function SP_GET_DATE_UNDER_RAVL_ACT(date_field,act_type)
{
  var cur_act=this;
  var result="";
  var orderList = new Vector();
  orderList.push(date_field);

  if (cur_act!=undefined && cur_act Instanceof OpxActivity)
  {
    fromobject(cur_act)
    {
      for (var act in "OpxActivity" where act.CallBooleanFormula("BELONGS(\"WBS_TYPE\",\""+ act_type +"\")") && act.get(date_field)!=undefined order by orderList)
      {
        result=act.get(date_field);
        break;
      }
    }
  }
  return result;

}

withoutlocking
{
  SP_GET_DATE_UNDER_RAVL_ACT.exportfunction({"STRING","STRING"},"DATE");
}


function ravl_QV_convertNotepad(ValNotPad)
{
  var result="";
  var v1=ValNotPad;
  v1=v1.replaceregexp("\b\b+"," ");
  v1=v1.replaceregexp(context.CallStringFormula("GET_CHAR(10)")," ");
  v1=v1.replaceregexp("\;",",");
  v1=v1.replaceregexp("\""," ");
  result=v1;
  return result;
}
withoutlocking
{
  ravl_QV_convertNotepad.exportfunction({"STRING"},"STRING");
}

function sp_sbs_get_last_modification_date(dummy)
{
  var wbs_type_vect = new vector();
  var  dateType = new vector("Approval","Submission");
  var at;
  var res = new Date();
  // alert("Ini>>"+res);
  
  if (this instanceof OpxActivity && this.wbs_type.SP_AA_B_RAVL_REGVIEW_EXP)
  {
    for (var dt in dateType)
    {
      at = RuleAcType.get(this.wbs_type.name+dt);
      if (at instanceof String && at != "")
      {
        wbs_type_vect.push(at);
      }
      
    }
    // alert(wbs_type_vect.join(","));
    // res = this.get("LAST_MODIFICATION_DATE");
    // res = this.SP_GET_DATE_UNDER_RAVL_ACT("LAST_MODIFICATION_DATE",wbs_type_vect.join(","));
    fromObject(this)
    {
      for (var a in "OpxActivity" where a.CallBooleanFormula("BELONGS(\"WBS_TYPE\",\""+ wbs_type_vect.join(",") +"\")") order by {{"INVERSE","LAST_MODIFICATION_DATE"}} )
      {
        res = a.get("LAST_MODIFICATION_DATE");
        break;
        // alert(a.LAST_MODIFICATION_DATE);
      }
    }
    return res;
  }
  // alert("return>>"+res);
  
}

sp_sbs_get_last_modification_date.exportfunction({"STRING"},"DATE");

function sp_sbs_load_temp_table()
{
	var wt = "OpxActivityType".findclass().get("VAR_ACT");
	var actList;
	var c = 0;
	var ct = 0;
	var esd;
	var ead;
	var lmd;
	var plist = new Vector();
	var o;
	var d_date_of_day = new date();
	
	withoutlocking{
	fromObject(wt)
	{
		for (var a in "OpxActivity" )
		{
		  actList = a.SP_NF_S_RAVL_QV_ACT_ID.split("|");
		  esd = a.SP_NF_D_RAVL_QV_SUB_PF;
		  ead = a.SP_NF_D_RAVL_QV_APP_PF;
		  //changing calculation of last modification date to use the new fields.
		  // old : lmd = a.sp_sbs_get_last_modification_date("");
		  if (a.CallBooleanFormula("SP_NF_D_RAVL_QV_SUB_PF<>SP_AA_D_ACT_LAST_EXP_SD_EXPORT") || a.CallBooleanFormula("SP_NF_D_RAVL_QV_APP_PF<>SP_AA_D_ACT_LAST_EXP_AD_EXPORT") )
		  {
			a.SP_AA_D_ACT_LAST_MOD_ASD_SBS = d_date_of_day;
			a.SP_AA_D_ACT_LAST_EXP_SD_EXPORT=a.SP_NF_D_RAVL_QV_SUB_PF;
			a.SP_AA_D_ACT_LAST_EXP_AD_EXPORT=a.SP_NF_D_RAVL_QV_APP_PF;
		  }
		  lmd = a.SP_AA_D_ACT_LAST_MOD_ASD_SBS;
		  
		  for (var ra in actList)
		  {
			if (ra instanceof String && ra != "")
			{
			  plist.push("NAME");          plist.push(a.SP_NF_S_RAVL_QV_ACT_ID);
			  plist.push("SP_NF_S_RAVL_QV_ACT_ID");          plist.push(ra);
			  plist.push("SP_NF_D_RAVL_QV_SBS_LAST_MOD");          plist.push(lmd);
			  if (esd.SDATE >0)
			  {
				plist.push("SP_NF_D_RAVL_QV_SUB_PF");          plist.push(esd);
			  }
			  if (ead.SDATE >0)
			  {
				plist.push("SP_NF_D_RAVL_QV_APP_PF");          plist.push(ead);
			  }
			  o = "OpxSP_TT_ACT_RAVL_TO_SBS".findclass().Makeopx2objectwithplist(plist);
			  if (o instanceof OpxRAVLActivitytoSBS) ct++;
			  plist.clear();
			}
		  }
		  c++;
		}
	}
	}
	writeln("SBS Processed activities>>"+c);
	writeln("SBS inserted rows>>"+ct);
}
sp_sbs_load_temp_table.exportfunction();



writetolog("Script SP_OJS_RAVL_QLIKVIEW_INTERFACE loaded with version ~a ", revision_number);

//	NAME	: SP_OJS_RAVL_QLIKVIEW_INTERFACE
//	AUTHOR  : 
//  PURPOSE : 
//  
//  HISTORY :
var revision_number ="1.1";
//
//  Revision 1.1  2018/06/28 bcordel
//	modification of function : sp_sbs_load_temp_table, ITS-INC0616187  ITS-INC0423097 : changing the last modification calculation
//
//-------------- old logs--------------
//updated by cjs for EVOL 422 - Update in Regview export on 11/12/2014
//updated by YSA for EVOL 446 on 06/30/2015  ravl_QV_convertNotepad
// Modified by ksk 14:21 02/02/2016  523 - SBS Export Zone Interface--

global var RuleAcType= new hashtable("STRING");
var TypeDateTab=new vector("Approval","Submission","Dispatch","Implementation","Artwork","FinishProduct","ExpectedStart","Decision","Available");

/*
Approval ------------------0
Submission ----------------1
Dispatch ------------------2
Implementation ----------3
Artwork -------------------4
FinishProduct -------------5
ExpectedStart------------6
Decision-------------------7
Available------------------8
*/

//for VAR_ACT
RuleAcType.set("VAR_ACT"+TypeDateTab[0],"VAR_APP,VAR_NATAPP,VAR_EUCOMM");
RuleAcType.set("VAR_ACT"+TypeDateTab[1],"VAR_SUBHA");
RuleAcType.set("VAR_ACT"+TypeDateTab[2],"VAR_SENT");
RuleAcType.set("VAR_ACT"+TypeDateTab[5],"VAR_RELFP");
RuleAcType.set("VAR_ACT"+TypeDateTab[3],"VAR_MCMIMP");
RuleAcType.set("VAR_ACT"+TypeDateTab[4],"VAR_ARTAPP");
RuleAcType.set("VAR_ACT"+TypeDateTab[7],"VAR_GO");
RuleAcType.set("VAR_ACT"+TypeDateTab[8],"VAR_LASTDOC");
//for DSURSUB
RuleAcType.set("DSURSUB"+TypeDateTab[1],"DSURSUB");
RuleAcType.set("DSURSUB"+TypeDateTab[6],"DSURPREP");
//for RSUBMPCL
RuleAcType.set("RSUBMPCL"+TypeDateTab[1],"RDSPCL");
RuleAcType.set("RSUBMPCL"+TypeDateTab[0],"RDRHAPCL");
//for RSUBM1
RuleAcType.set("RSUBM1"+TypeDateTab[1],"RDS1");
RuleAcType.set("RSUBM1"+TypeDateTab[0],"RDRHA1");
//for RSUBM2
RuleAcType.set("RSUBM2"+TypeDateTab[1],"RDS2");
RuleAcType.set("RSUBM2"+TypeDateTab[0],"RDRHA2");
//for RSUBM3
RuleAcType.set("RSUBM3"+TypeDateTab[1],"RDS3");
RuleAcType.set("RSUBM3"+TypeDateTab[0],"RDRHA3");
//for CTASUB1
RuleAcType.set("CTASUB1"+TypeDateTab[1],"CTADS1");
RuleAcType.set("CTASUB1"+TypeDateTab[0],"CTADRHA1");
RuleAcType.set("CTASUB1"+TypeDateTab[6],"CTASP1");
//for CTASUB2
RuleAcType.set("CTASUB2"+TypeDateTab[1],"CTADS2");
RuleAcType.set("CTASUB2"+TypeDateTab[0],"CTADRHA2");
RuleAcType.set("CTASUB2"+TypeDateTab[6],"CTASP2");
//for CTASUB3
RuleAcType.set("CTASUB3"+TypeDateTab[1],"CTADS3");
RuleAcType.set("CTASUB3"+TypeDateTab[0],"CTADRHA3");
RuleAcType.set("CTASUB3"+TypeDateTab[6],"CTASP3");
//for RSUBMREG
RuleAcType.set("RSUBMREG"+TypeDateTab[1],"RDSREG");
RuleAcType.set("RSUBMREG"+TypeDateTab[0],"RDRHAREG");
//for INDSUB1
RuleAcType.set("INDSUB1"+TypeDateTab[1],"INDDS1");
RuleAcType.set("INDSUB1"+TypeDateTab[0],"INDDRHA1");
RuleAcType.set("INDSUB1"+TypeDateTab[6],"INDPRP1");
//for INDSUB2
RuleAcType.set("INDSUB2"+TypeDateTab[1],"INDDS2");
RuleAcType.set("INDSUB2"+TypeDateTab[0],"INDDRHA2");
RuleAcType.set("INDSUB2"+TypeDateTab[6],"INDPRP2");
//for INDSUB3
RuleAcType.set("INDSUB3"+TypeDateTab[1],"INDDS3");
RuleAcType.set("INDSUB3"+TypeDateTab[0],"INDDRHA3");
RuleAcType.set("INDSUB3"+TypeDateTab[6],"INDPRP3");
//for SUBAM1
RuleAcType.set("SUBAM1"+TypeDateTab[1],"AMSDS1");
RuleAcType.set("SUBAM1"+TypeDateTab[0],"AMRHA1");
RuleAcType.set("SUBAM1"+TypeDateTab[6],"AMSP1");
//for SUBAM2
RuleAcType.set("SUBAM2"+TypeDateTab[1],"AMSDS2");
RuleAcType.set("SUBAM2"+TypeDateTab[0],"AMRHA2");
RuleAcType.set("SUBAM2"+TypeDateTab[6],"AMSP2");
//for SUBAM3
RuleAcType.set("SUBAM3"+TypeDateTab[1],"AMSDS3");
RuleAcType.set("SUBAM3"+TypeDateTab[0],"AMRHA3");
RuleAcType.set("SUBAM3"+TypeDateTab[6],"AMSP3");
//for RQSPCL
RuleAcType.set("RQSPCL"+TypeDateTab[1],"RQPCL-GPKM");
RuleAcType.set("RQSPCL"+TypeDateTab[6],"RQSPPCL");
//for RQS1
RuleAcType.set("RQS1"+TypeDateTab[1],"RQ1-GPKM");
RuleAcType.set("RQS1"+TypeDateTab[6],"RQSP1");
//for RQS2
RuleAcType.set("RQS2"+TypeDateTab[1],"RQ2-GPKM");
RuleAcType.set("RQS2"+TypeDateTab[6],"RQSP2");
//for RQS3
RuleAcType.set("RQS3"+TypeDateTab[1],"RQ3-GPKM");
RuleAcType.set("RQS3"+TypeDateTab[6],"RQSP3");
//for RQSREG
RuleAcType.set("RQSREG"+TypeDateTab[1],"RQREG-GPKM");
RuleAcType.set("RQSREG"+TypeDateTab[1],"RQSPREG");
//for PIPSUB
RuleAcType.set("PIPSUB"+TypeDateTab[1],"PIPDS");
RuleAcType.set("PIPSUB"+TypeDateTab[0],"PIPAPP");
RuleAcType.set("PIPSUB"+TypeDateTab[6],"LPREP");
//for PIPAM2
RuleAcType.set("PIPAM2"+TypeDateTab[1],"PIPDS,PIPDS-P3");
RuleAcType.set("PIPAM2"+TypeDateTab[0],"PIPAPP");
RuleAcType.set("PIPAM2"+TypeDateTab[6],"LPREP");
//for PIPAM3
RuleAcType.set("PIPAM3"+TypeDateTab[1],"PIPDS-P3,PIPDS");
RuleAcType.set("PIPAM3"+TypeDateTab[0],"PIPAPP");
RuleAcType.set("PIPAM3"+TypeDateTab[6],"LPREP");
//for MAAP
RuleAcType.set("MAAP"+TypeDateTab[1],"CTDSUB,SUB2EMEA,MAA2HA");
RuleAcType.set("MAAP"+TypeDateTab[0],"NMALIC,LICR,D255,D210REP");
//for MRPR
RuleAcType.set("MRPR"+TypeDateTab[1],"D0");
RuleAcType.set("MRPR"+TypeDateTab[0],"LICR");
//for CPRO
RuleAcType.set("CPRO"+TypeDateTab[1],"SUB2EMEA");
RuleAcType.set("CPRO"+TypeDateTab[0],"D255");
//for DPRO
RuleAcType.set("DPRO"+TypeDateTab[1],"D0");
RuleAcType.set("DPRO"+TypeDateTab[0],"D210REP");
//for NRG
RuleAcType.set("NRG"+TypeDateTab[2],"NRGPREP");
RuleAcType.set("NRG"+TypeDateTab[1],"MAA2HA");
RuleAcType.set("NRG"+TypeDateTab[0],"NMALIC,NRGLOC");
//for RNW
RuleAcType.set("RNW"+TypeDateTab[2],"RNWPREP");
RuleAcType.set("RNW"+TypeDateTab[0],"RNWLOC");
//for CTDPSAREG
RuleAcType.set("CTDPSAREG"+TypeDateTab[1],"PSMR");
//for EPHA2ME
RuleAcType.set("EPHA2ME"+TypeDateTab[1],"EPH2MR");
//for ADCOMREG
RuleAcType.set("ADCOMREG"+TypeDateTab[1],"FINSUB");
//for HAMPCL
RuleAcType.set("HAMPCL"+TypeDateTab[1],"HAMRPCL");
//for HAMEET1
RuleAcType.set("HAMEET1"+TypeDateTab[1],"HAMR1");
//for HAMEET2
RuleAcType.set("HAMEET2"+TypeDateTab[1],"HAMR2");
//for HAMEET3
RuleAcType.set("HAMEET3"+TypeDateTab[1],"HAMR3");
//for HAMEETREG
RuleAcType.set("HAMEETREG"+TypeDateTab[1],"HAMRREG");
//for RA_CTD_TEMPLATE
RuleAcType.set("RA_CTD_TEMPLATE"+TypeDateTab[1],"CTDSUBMI");
//for SUMREP1
RuleAcType.set("SUMREP1"+TypeDateTab[1],"SRS1");
//for SUMREP2
RuleAcType.set("SUMREP2"+TypeDateTab[1],"SRS2");
//for SUMREP3
RuleAcType.set("SUMREP3"+TypeDateTab[1],"SRS3");
//for TDR	
RuleAcType.set("TDR"+TypeDateTab[2],"TDPREP");
//for SUBHA1
RuleAcType.set("SUBHA1"+TypeDateTab[1],"SUBHA1");
//for SUBHA2
RuleAcType.set("SUBHA2"+TypeDateTab[1],"SUBHA2");
//for SUBHA3
RuleAcType.set("SUBHA3"+TypeDateTab[1],"SUBHA3");
// for ANN_REP_INTL
RuleAcType.set("ANN_REP_INTL"+TypeDateTab[2],"ANN_REP_PREP");
RuleAcType.set("ANN_REP_INTL"+TypeDateTab[1],"ANN_REP_SUB");

function HASHTABLE_VALUE(key){
  var Result ="";
  var TabTemp=RuleAcType.get(key);
  if (TabTemp!="" && TabTemp!=undefined)
  Result=TabTemp;
  return Result;
}
withoutlocking
{
  HASHTABLE_VALUE.exportfunction({"STRING"},"STRING")
}

//Function return Date

function RAVL_QV_GETDATE (DateType,EvalDate)
{
  var Act=this;
  var key="";
  var Values="";
  var myDate ="";
  var NMALIC_FOUND="";
  var orderList=new vector();
  orderList.push(EvalDate);
  if (Act!=undefined && Act Instanceof OpxActivity)
  {
    key=Act.Wbs_Type.name+DateType;
    values=HASHTABLE_VALUE(key);
    if (values!="")
    {
      var TabValues=values.parsevector();
      fromobject(Act)
      {
        for (var task in OpxActivity where task.get(EvalDate)!=undefined order by orderList)
        {
          for (var TempValue in TabValues)
          {
            if (TempValue==task.Wbs_Type.name)
            {
              if(key=="NRGApproval")
              {
                if(task.Wbs_Type.name=="NMALIC" )
                {
                  myDate=task.get(EvalDate);
                  NMALIC_FOUND=1; 
                }
                else if(NMALIC_FOUND!=1 && task.Wbs_Type.name=="NRGLOC")
                {
                  myDate=task.get(EvalDate);
                }
              }
              else
              {
                myDate=task.get(EvalDate);
              }
            }
          }
        }
      }
      
    }
  }
  return myDate;
}
withoutlocking
{
  RAVL_QV_GETDATE.exportfunction({"STRING","STRING"},"DATE")
}

//Function return attributes

function RAVL_QV_GETATTRIBUTES(ActAtt,VartAtt,IsList) {
  var Act=this;
  var ListElement= new Vector();
  var result = "";
  if (Act!=undefined && Act Instanceof OpxActivity)
  {         
    if( Act.CallBooleanFormula("SP_NF_B_IS_RAVL_ACT"))
    {
      if (VartAtt!=undefined && VartAtt!="")
      {
        //Return attribut on Variation (Go to Activity -> Worksharing->Variation)
        var Variation= Act.SP_RA_RAVL_WORKSHARING.get("r.SP_RA_RAVL_WORKSHARING1.SP_PT_RAVL");
        for (Var Vrt in Variation)
        {
          if (Vrt.get(VartAtt)!=undefined)
          ListElement.push(Vrt.get(VartAtt));
          
        }
        if (!IsList)
        {
          for (var Element in ListElement where (Element!="" && Element!=undefined))
          {
            result=Element;
            break;
          }
        }
        else
        {
          result = ListElement.join("|");
        }
      }

    }
    else 
    {
      //Return attribut on Activity Compass with PINFOLINK_POPUP equal True
      if (Act.wbs_type.SP_AA_AT_B_PINFOLINK_POPUP && (ActAtt!=undefined && ActAtt!="") && (Act.get(ActAtt)!=undefined) )
      result= Act.get(ActAtt);
    }
  }

  return result;
}
withoutlocking
{
  RAVL_QV_GETATTRIBUTES.exportfunction({"STRING","STRING","BOOLEAN"},"STRING")
}

function SP_GET_DATE_UNDER_RAVL_ACT(date_field,act_type)
{
  var cur_act=this;
  var result="";
  var orderList = new Vector();
  orderList.push(date_field);

  if (cur_act!=undefined && cur_act Instanceof OpxActivity)
  {
    fromobject(cur_act)
    {
      for (var act in "OpxActivity" where act.CallBooleanFormula("BELONGS(\"WBS_TYPE\",\""+ act_type +"\")") && act.get(date_field)!=undefined order by orderList)
      {
        result=act.get(date_field);
        break;
      }
    }
  }
  return result;

}

withoutlocking
{
  SP_GET_DATE_UNDER_RAVL_ACT.exportfunction({"STRING","STRING"},"DATE");
}


function ravl_QV_convertNotepad(ValNotPad)
{
  var result="";
  var v1=ValNotPad;
  v1=v1.replaceregexp("\b\b+"," ");
  v1=v1.replaceregexp(context.CallStringFormula("GET_CHAR(10)")," ");
  v1=v1.replaceregexp("\;",",");
  v1=v1.replaceregexp("\""," ");
  result=v1;
  return result;
}
withoutlocking
{
  ravl_QV_convertNotepad.exportfunction({"STRING"},"STRING");
}

function sp_sbs_get_last_modification_date(dummy)
{
  var wbs_type_vect = new vector();
  var  dateType = new vector("Approval","Submission");
  var at;
  var res = new Date();
  // alert("Ini>>"+res);
  
  if (this instanceof OpxActivity && this.wbs_type.SP_AA_B_RAVL_REGVIEW_EXP)
  {
    for (var dt in dateType)
    {
      at = RuleAcType.get(this.wbs_type.name+dt);
      if (at instanceof String && at != "")
      {
        wbs_type_vect.push(at);
      }
      
    }
    // alert(wbs_type_vect.join(","));
    // res = this.get("LAST_MODIFICATION_DATE");
    // res = this.SP_GET_DATE_UNDER_RAVL_ACT("LAST_MODIFICATION_DATE",wbs_type_vect.join(","));
    fromObject(this)
    {
      for (var a in "OpxActivity" where a.CallBooleanFormula("BELONGS(\"WBS_TYPE\",\""+ wbs_type_vect.join(",") +"\")") order by {{"INVERSE","LAST_MODIFICATION_DATE"}} )
      {
        res = a.get("LAST_MODIFICATION_DATE");
        break;
        // alert(a.LAST_MODIFICATION_DATE);
      }
    }
    return res;
  }
  // alert("return>>"+res);
  
}

sp_sbs_get_last_modification_date.exportfunction({"STRING"},"DATE");

function sp_sbs_load_temp_table()
{
	var wt = "OpxActivityType".findclass().get("VAR_ACT");
	var actList;
	var c = 0;
	var ct = 0;
	var esd;
	var ead;
	var lmd;
	var plist = new Vector();
	var o;
	var d_date_of_day = new date();
	
	withoutlocking{
	fromObject(wt)
	{
		for (var a in "OpxActivity" )
		{
		  actList = a.SP_NF_S_RAVL_QV_ACT_ID.split("|");
		  esd = a.SP_NF_D_RAVL_QV_SUB_PF;
		  ead = a.SP_NF_D_RAVL_QV_APP_PF;
		  //changing calculation of last modification date to use the new fields.
		  // old : lmd = a.sp_sbs_get_last_modification_date("");
		  if (a.CallBooleanFormula("SP_NF_D_RAVL_QV_SUB_PF<>SP_AA_D_ACT_LAST_EXP_SD_EXPORT") || a.CallBooleanFormula("SP_NF_D_RAVL_QV_APP_PF<>SP_AA_D_ACT_LAST_EXP_AD_EXPORT") )
		  {
			a.SP_AA_D_ACT_LAST_MOD_ASD_SBS = d_date_of_day;
			a.SP_AA_D_ACT_LAST_EXP_SD_EXPORT=a.SP_NF_D_RAVL_QV_SUB_PF;
			a.SP_AA_D_ACT_LAST_EXP_AD_EXPORT=a.SP_NF_D_RAVL_QV_APP_PF;
		  }
		  lmd = a.SP_AA_D_ACT_LAST_MOD_ASD_SBS;
		  
		  for (var ra in actList)
		  {
			if (ra instanceof String && ra != "")
			{
			  plist.push("NAME");          plist.push(a.SP_NF_S_RAVL_QV_ACT_ID);
			  plist.push("SP_NF_S_RAVL_QV_ACT_ID");          plist.push(ra);
			  plist.push("SP_NF_D_RAVL_QV_SBS_LAST_MOD");          plist.push(lmd);
			  if (esd.SDATE >0)
			  {
				plist.push("SP_NF_D_RAVL_QV_SUB_PF");          plist.push(esd);
			  }
			  if (ead.SDATE >0)
			  {
				plist.push("SP_NF_D_RAVL_QV_APP_PF");          plist.push(ead);
			  }
			  o = "OpxSP_TT_ACT_RAVL_TO_SBS".findclass().Makeopx2objectwithplist(plist);
			  if (o instanceof OpxRAVLActivitytoSBS) ct++;
			  plist.clear();
			}
		  }
		  c++;
		}
	}
	}
	writeln("SBS Processed activities>>"+c);
	writeln("SBS inserted rows>>"+ct);
}
sp_sbs_load_temp_table.exportfunction();



writetolog("Script SP_OJS_RAVL_QLIKVIEW_INTERFACE loaded with version ~a ", revision_number);

 
//	NAME	: SP_OJS_RPP_INTERFACE
//	AUTHOR  : 
//  PURPOSE : Script for RPP export
//  
//  HISTORY :
var revision_number ="1.1";
//
//	Revision 1.1  2019/06/07 mblaise - ITS-INC2707588 - Change RuleactypeRPP values for DPRO,PIPAMn and PIPSUB
//	Revision 1.0  2019/05/15 mblaise
//  RITM1049941 : creation
//


global var RuleactypeRPP= new hashtable("STRING");
var TypeDateTabRPP=new vector("Approval","Submission","Dispatch","Meeting");

/*
Approval ------------------0
Submission ---------------1
Dispatch ------------------2
Meeting -------------------3
*/

//for DSURSUB
RuleactypeRPP.set("DSURSUB"+TypeDateTabRPP[1],"DSURSUB");
//for RSUBMPCL
RuleactypeRPP.set("RSUBMPCL"+TypeDateTabRPP[1],"RDSPCL");
RuleactypeRPP.set("RSUBMPCL"+TypeDateTabRPP[0],"RDRHAPCL");
//for RSUBM1
RuleactypeRPP.set("RSUBM1"+TypeDateTabRPP[1],"RDS1");
RuleactypeRPP.set("RSUBM1"+TypeDateTabRPP[0],"RDRHA1");
//for RSUBM2
RuleactypeRPP.set("RSUBM2"+TypeDateTabRPP[1],"RDS2");
RuleactypeRPP.set("RSUBM2"+TypeDateTabRPP[0],"RDRHA2");
//for RSUBM3
RuleactypeRPP.set("RSUBM3"+TypeDateTabRPP[1],"RDS3");
RuleactypeRPP.set("RSUBM3"+TypeDateTabRPP[0],"RDRHA3");
//for CTASUB1
RuleactypeRPP.set("CTASUB1"+TypeDateTabRPP[1],"CTADS1");
RuleactypeRPP.set("CTASUB1"+TypeDateTabRPP[0],"CTADRHA1");
//for CTASUB2
RuleactypeRPP.set("CTASUB2"+TypeDateTabRPP[1],"CTADS2");
RuleactypeRPP.set("CTASUB2"+TypeDateTabRPP[0],"CTADRHA2");
//for CTASUB3
RuleactypeRPP.set("CTASUB3"+TypeDateTabRPP[1],"CTADS3");
RuleactypeRPP.set("CTASUB3"+TypeDateTabRPP[0],"CTADRHA3");
//for RSUBMREG
RuleactypeRPP.set("RSUBMREG"+TypeDateTabRPP[1],"RDSREG");
RuleactypeRPP.set("RSUBMREG"+TypeDateTabRPP[0],"RDRHAREG");
//for INDSUB1
RuleactypeRPP.set("INDSUB1"+TypeDateTabRPP[1],"INDDS1");
RuleactypeRPP.set("INDSUB1"+TypeDateTabRPP[0],"INDDRHA1");
//for INDSUB2
RuleactypeRPP.set("INDSUB2"+TypeDateTabRPP[1],"INDDS2");
RuleactypeRPP.set("INDSUB2"+TypeDateTabRPP[0],"INDDRHA2");
//for INDSUB3
RuleactypeRPP.set("INDSUB3"+TypeDateTabRPP[1],"INDDS3");
RuleactypeRPP.set("INDSUB3"+TypeDateTabRPP[0],"INDDRHA3");
//for SUBAM1
RuleactypeRPP.set("SUBAM1"+TypeDateTabRPP[1],"AMSDS1");
RuleactypeRPP.set("SUBAM1"+TypeDateTabRPP[0],"AMRHA1");
//for SUBAM2
RuleactypeRPP.set("SUBAM2"+TypeDateTabRPP[1],"AMSDS2");
RuleactypeRPP.set("SUBAM2"+TypeDateTabRPP[0],"AMRHA2");
//for SUBAM3
RuleactypeRPP.set("SUBAM3"+TypeDateTabRPP[1],"AMSDS3");
RuleactypeRPP.set("SUBAM3"+TypeDateTabRPP[0],"AMRHA3");
//for PIPSUB
RuleactypeRPP.set("PIPSUB"+TypeDateTabRPP[1],"PIP_GPKM100,PIPDS");
RuleactypeRPP.set("PIPSUB"+TypeDateTabRPP[0],"PIPAPP");
RuleactypeRPP.set("PIPSUB"+TypeDateTabRPP[6],"LPREP");
//for PIPAM1
RuleactypeRPP.set("PIPAM1"+TypeDateTabRPP[1],"PIPDS,PIPDS-P3");
RuleactypeRPP.set("PIPAM1"+TypeDateTabRPP[0],"PIP_GPKM101,PIPAPP");
//for PIPAM2
RuleactypeRPP.set("PIPAM2"+TypeDateTabRPP[1],"PIPDS,PIPDS-P3");
RuleactypeRPP.set("PIPAM2"+TypeDateTabRPP[0],"PIP_GPKM101,PIPAPP");
//for PIPAM3
RuleactypeRPP.set("PIPAM3"+TypeDateTabRPP[1],"PIPDS,PIPDS-P3");
RuleactypeRPP.set("PIPAM3"+TypeDateTabRPP[0],"PIP_GPKM101,PIPAPP");
//for MAAP
RuleactypeRPP.set("MAAP"+TypeDateTabRPP[1],"MAA2HA");
RuleactypeRPP.set("MAAP"+TypeDateTabRPP[0],"NMALIC");
//for MRPR
RuleactypeRPP.set("MRPR"+TypeDateTabRPP[1],"D0");
RuleactypeRPP.set("MRPR"+TypeDateTabRPP[0],"LICR");
//for CPRO
RuleactypeRPP.set("CPRO"+TypeDateTabRPP[1],"SUB2EMEA");
RuleactypeRPP.set("CPRO"+TypeDateTabRPP[0],"D255");
//for DPRO
RuleactypeRPP.set("DPRO"+TypeDateTabRPP[1],"D0");
RuleactypeRPP.set("DPRO"+TypeDateTabRPP[0],"D210REC");
//for NRG
RuleactypeRPP.set("NRG"+TypeDateTabRPP[2],"NRGPREP");
RuleactypeRPP.set("NRG"+TypeDateTabRPP[1],"MAA2HA");
RuleactypeRPP.set("NRG"+TypeDateTabRPP[0],"NMALIC,NRGLOC");
//for EPHA2MEET
RuleactypeRPP.set("EPHA2MEET"+TypeDateTabRPP[1],"EPH2MR");
RuleactypeRPP.set("EPHA2MEET"+TypeDateTabRPP[3],"EPHA2-GPKM");
//for ADCOMREG
RuleactypeRPP.set("ADCOMREG"+TypeDateTabRPP[1],"FINSUB");
RuleactypeRPP.set("ADCOMREG"+TypeDateTabRPP[3],"ADCOM-GPKM");
//for HAMPCL
RuleactypeRPP.set("HAMPCL"+TypeDateTabRPP[1],"HAMRPCL");
RuleactypeRPP.set("HAMPCL"+TypeDateTabRPP[3],"HAMPCL");
//for HAMEET1
RuleactypeRPP.set("HAMEET1"+TypeDateTabRPP[1],"HAMR1");
RuleactypeRPP.set("HAMEET1"+TypeDateTabRPP[3],"HAM1");
//for HAMEET2
RuleactypeRPP.set("HAMEET2"+TypeDateTabRPP[1],"HAMR2");
RuleactypeRPP.set("HAMEET2"+TypeDateTabRPP[3],"HAM2");
//for HAMEET3
RuleactypeRPP.set("HAMEET3"+TypeDateTabRPP[1],"HAMR3");
RuleactypeRPP.set("HAMEET3"+TypeDateTabRPP[3],"HAM3");
//for HAMEETREG
RuleactypeRPP.set("HAMEETREG"+TypeDateTabRPP[1],"HAMRREG");
RuleactypeRPP.set("HAMEETREG"+TypeDateTabRPP[3],"HAMREG");

// Function to retrieve values from RuleactypeRPP hastable
function RPP_HASHTABLE_VALUE(key)
{
	var Result = "";
	var TabTemp = RuleactypeRPP.get(key);
	if (TabTemp != "" && TabTemp != undefined)
		Result = TabTemp;
	return Result;
}
RPP_HASHTABLE_VALUE.exportfunction({"STRING"},"STRING")


// Function to retrieve the Approval, Submission, Dispatch and Meeting dates according to the activity type
function RPP_GETDATE (TypeDateRPP,DateField)
{
	var o_act = this;
	var s_key = "";
	var Values = "";
	var b_found = "";
	var orderList = new vector(DateField);
	var class_act = (typeOf this);
	var date_type = class_act.getSlot(DateField).descriptor.type.name.toString();

	if(o_act instanceof OpxActivity && (date_type=="DATE" || date_type=="END-DATE"))
	{
		s_key=o_act.Wbs_Type.name+TypeDateRPP;
		values=RPP_HASHTABLE_VALUE(s_key);
		if (values!="")
		{
			var TabValues=values.parsevector();
			fromobject(o_act)
			{
				for (var o_task in OpxActivity where o_task.get(DateField)!=undefined order by orderList)
				{
					for (var TempValue in TabValues)
					{
						if (TempValue==o_task.Wbs_Type.name)
						{
							if (date_type=="END-DATE") return o_task.get(DateField).previous("day");
							else return o_task.get(DateField);
						}
					}
				}
			}
		}
	}
	return "";
}
RPP_GETDATE.exportfunction({"STRING","STRING"},"DATE")


// Function to load RPP data in temporay table
function SP_JS_RPP_LOAD_TT()
{
	// Empty temporary table
	for (var o_LineTemp in "OpxSP_TT_ACT_TO_RPP")  o_LineTemp.delete();
	
	// Fill the table 
	for (var o_project in opxProject where o_project.getinternalvalue("STATE").ToString()=="ACTIVE") 
	{
		fromobject(o_project)
		{
			for (var o_act in "OpxActivity" where o_act.wbs_type.SP_AA_B_RPP_EXP) 
			{
				var newactLine = new "OpxSP_TT_ACT_TO_RPP"(
					"NAME", o_act.NAME,
					"SP_AA_S_RPP_PJT_CODE",o_act.SP_NF_S_PJT_CODE,
					"SP_AA_S_RPP_PJT_NAME",o_act.SP_NF_S_ACT_CL_PROJ_NAME,
					"SP_AA_S_RPP_ACT_DESC",ravl_QV_convertNotepad(o_act.DESC),
					"SP_AA_D_RPP_ACT_PS",o_act.PS,
					"SP_AA_D_RPP_ACT_PF",o_act.calldateformula("add_duration(PF,'-1d',\"\")"),
					"SP_AA_D_RPP_ACT_AS",o_act.AS,
					"SP_AA_D_RPP_ACT_AF",o_act.calldateformula("add_duration(AF,'-1d',\"\")"),
					"SP_AA_D_RPP_PLANNED_DISP",o_act.SP_NF_D_RPP_DISPA_PF,
					"SP_AA_D_RPP_ACTUAL_DISP",o_act.SP_NF_D_RPP_DISPA_AF ,
					"SP_AA_D_RPP_YEARLY_DISP",o_act.SP_NF_D_RPP_YEARLY_DISPA,
					"SP_AA_D_RPP_PLANNED_SUB",o_act.SP_NF_D_RPP_SUB_PF,
					"SP_AA_D_RPP_ACTUAL_SUB",o_act.SP_NF_D_RPP_SUB_AF,
					"SP_AA_D_RPP_YEARLY_SUB",o_act.SP_NF_D_RPP_YEARLY_SUB,
					"SP_AA_D_RPP_PLANNED_APP",o_act.SP_NF_D_RPP_APP_PF,
					"SP_AA_D_RPP_ACTUAL_APP",o_act.SP_NF_D_RPP_APP_AF,
					"SP_AA_D_RPP_YEARLY_APP",o_act.SP_NF_D_RPP_YEARLY_APP,
					"SP_AA_D_RPP_DATE_MEET",o_act.SP_NF_D_RPP_MEETING,
					"SP_AA_S_RPP_ACT_TYPE",o_act.WBS_TYPE.NAME,
					"SP_AA_S_RPP_ACT_OBS",o_act.SP_NF_S_ACT_OBS_NAME,
					"SP_AA_S_RPP_ACT_COUNTRY",o_act.SP_AA_ACT_COUNTRY,
					"SP_AA_S_RPP_ACT_ISO_CODE_2",o_act.SP_NF_RPP_COUNTRY,
					"SP_AA_S_RPP_ACT_PRODUCT",o_act.SP_AA_ACT_PRODUCT,
					"SP_AA_S_RPP_ACT_PRODUCT_CODE",o_act.SP_NF_S_RPP_PRODUCT_CODE,
					"SP_AA_D_RPP_PRJ_YEARLY_DATE",o_project.SP_NF_D_YEARLY_BASELINE_DATE,
					"SP_AA_S_RPP_PORTFOLIO",o_act.SP_NF_S_PRJ_TYPE,
					"SP_AA_S_RPP_ACT_DOSE_PER_CONT",o_act.SP_AA_ACT_DOSE_PER_PRIM_CONT,
					"SP_AA_S_RPP_ACT_PACK_SET_NAME",o_act.SP_AA_ACT_PACK_SET_NAME,
					"SP_AA_S_RPP_ACT_MAR_STATUS",o_act.SP_AA_ACT_MAR_STATUS,
					"SP_AA_S_RPP_PRJ_STAGE",o_project.SP_AA_S_PRJ_STAGE,
					"SP_AA_S_RPP_PRJ_STATUS",o_project._INF_NF_S_PRJ_STATE_INTERNAL,
					"SP_AA_S_RPP_LCY_STATUS",o_project.SP_AA_S_LC_STATUS);
			}
		}
	}
}
SP_JS_RPP_LOAD_TT .exportfunction()


//	NAME	: SP_OJS_RPP_INTERFACE
//	AUTHOR  : 
//  PURPOSE : Script for RPP export
//  
//  HISTORY :
var revision_number ="1.1";
//
//	Revision 1.1  2019/06/07 mblaise - ITS-INC2707588 - Change RuleactypeRPP values for DPRO,PIPAMn and PIPSUB
//	Revision 1.0  2019/05/15 mblaise
//  RITM1049941 : creation
//


global var RuleactypeRPP= new hashtable("STRING");
var TypeDateTabRPP=new vector("Approval","Submission","Dispatch","Meeting");

/*
Approval ------------------0
Submission ---------------1
Dispatch ------------------2
Meeting -------------------3
*/

//for DSURSUB
RuleactypeRPP.set("DSURSUB"+TypeDateTabRPP[1],"DSURSUB");
//for RSUBMPCL
RuleactypeRPP.set("RSUBMPCL"+TypeDateTabRPP[1],"RDSPCL");
RuleactypeRPP.set("RSUBMPCL"+TypeDateTabRPP[0],"RDRHAPCL");
//for RSUBM1
RuleactypeRPP.set("RSUBM1"+TypeDateTabRPP[1],"RDS1");
RuleactypeRPP.set("RSUBM1"+TypeDateTabRPP[0],"RDRHA1");
//for RSUBM2
RuleactypeRPP.set("RSUBM2"+TypeDateTabRPP[1],"RDS2");
RuleactypeRPP.set("RSUBM2"+TypeDateTabRPP[0],"RDRHA2");
//for RSUBM3
RuleactypeRPP.set("RSUBM3"+TypeDateTabRPP[1],"RDS3");
RuleactypeRPP.set("RSUBM3"+TypeDateTabRPP[0],"RDRHA3");
//for CTASUB1
RuleactypeRPP.set("CTASUB1"+TypeDateTabRPP[1],"CTADS1");
RuleactypeRPP.set("CTASUB1"+TypeDateTabRPP[0],"CTADRHA1");
//for CTASUB2
RuleactypeRPP.set("CTASUB2"+TypeDateTabRPP[1],"CTADS2");
RuleactypeRPP.set("CTASUB2"+TypeDateTabRPP[0],"CTADRHA2");
//for CTASUB3
RuleactypeRPP.set("CTASUB3"+TypeDateTabRPP[1],"CTADS3");
RuleactypeRPP.set("CTASUB3"+TypeDateTabRPP[0],"CTADRHA3");
//for RSUBMREG
RuleactypeRPP.set("RSUBMREG"+TypeDateTabRPP[1],"RDSREG");
RuleactypeRPP.set("RSUBMREG"+TypeDateTabRPP[0],"RDRHAREG");
//for INDSUB1
RuleactypeRPP.set("INDSUB1"+TypeDateTabRPP[1],"INDDS1");
RuleactypeRPP.set("INDSUB1"+TypeDateTabRPP[0],"INDDRHA1");
//for INDSUB2
RuleactypeRPP.set("INDSUB2"+TypeDateTabRPP[1],"INDDS2");
RuleactypeRPP.set("INDSUB2"+TypeDateTabRPP[0],"INDDRHA2");
//for INDSUB3
RuleactypeRPP.set("INDSUB3"+TypeDateTabRPP[1],"INDDS3");
RuleactypeRPP.set("INDSUB3"+TypeDateTabRPP[0],"INDDRHA3");
//for SUBAM1
RuleactypeRPP.set("SUBAM1"+TypeDateTabRPP[1],"AMSDS1");
RuleactypeRPP.set("SUBAM1"+TypeDateTabRPP[0],"AMRHA1");
//for SUBAM2
RuleactypeRPP.set("SUBAM2"+TypeDateTabRPP[1],"AMSDS2");
RuleactypeRPP.set("SUBAM2"+TypeDateTabRPP[0],"AMRHA2");
//for SUBAM3
RuleactypeRPP.set("SUBAM3"+TypeDateTabRPP[1],"AMSDS3");
RuleactypeRPP.set("SUBAM3"+TypeDateTabRPP[0],"AMRHA3");
//for PIPSUB
RuleactypeRPP.set("PIPSUB"+TypeDateTabRPP[1],"PIP_GPKM100,PIPDS");
RuleactypeRPP.set("PIPSUB"+TypeDateTabRPP[0],"PIPAPP");
RuleactypeRPP.set("PIPSUB"+TypeDateTabRPP[6],"LPREP");
//for PIPAM1
RuleactypeRPP.set("PIPAM1"+TypeDateTabRPP[1],"PIPDS,PIPDS-P3");
RuleactypeRPP.set("PIPAM1"+TypeDateTabRPP[0],"PIP_GPKM101,PIPAPP");
//for PIPAM2
RuleactypeRPP.set("PIPAM2"+TypeDateTabRPP[1],"PIPDS,PIPDS-P3");
RuleactypeRPP.set("PIPAM2"+TypeDateTabRPP[0],"PIP_GPKM101,PIPAPP");
//for PIPAM3
RuleactypeRPP.set("PIPAM3"+TypeDateTabRPP[1],"PIPDS,PIPDS-P3");
RuleactypeRPP.set("PIPAM3"+TypeDateTabRPP[0],"PIP_GPKM101,PIPAPP");
//for MAAP
RuleactypeRPP.set("MAAP"+TypeDateTabRPP[1],"MAA2HA");
RuleactypeRPP.set("MAAP"+TypeDateTabRPP[0],"NMALIC");
//for MRPR
RuleactypeRPP.set("MRPR"+TypeDateTabRPP[1],"D0");
RuleactypeRPP.set("MRPR"+TypeDateTabRPP[0],"LICR");
//for CPRO
RuleactypeRPP.set("CPRO"+TypeDateTabRPP[1],"SUB2EMEA");
RuleactypeRPP.set("CPRO"+TypeDateTabRPP[0],"D255");
//for DPRO
RuleactypeRPP.set("DPRO"+TypeDateTabRPP[1],"D0");
RuleactypeRPP.set("DPRO"+TypeDateTabRPP[0],"D210REC");
//for NRG
RuleactypeRPP.set("NRG"+TypeDateTabRPP[2],"NRGPREP");
RuleactypeRPP.set("NRG"+TypeDateTabRPP[1],"MAA2HA");
RuleactypeRPP.set("NRG"+TypeDateTabRPP[0],"NMALIC,NRGLOC");
//for EPHA2MEET
RuleactypeRPP.set("EPHA2MEET"+TypeDateTabRPP[1],"EPH2MR");
RuleactypeRPP.set("EPHA2MEET"+TypeDateTabRPP[3],"EPHA2-GPKM");
//for ADCOMREG
RuleactypeRPP.set("ADCOMREG"+TypeDateTabRPP[1],"FINSUB");
RuleactypeRPP.set("ADCOMREG"+TypeDateTabRPP[3],"ADCOM-GPKM");
//for HAMPCL
RuleactypeRPP.set("HAMPCL"+TypeDateTabRPP[1],"HAMRPCL");
RuleactypeRPP.set("HAMPCL"+TypeDateTabRPP[3],"HAMPCL");
//for HAMEET1
RuleactypeRPP.set("HAMEET1"+TypeDateTabRPP[1],"HAMR1");
RuleactypeRPP.set("HAMEET1"+TypeDateTabRPP[3],"HAM1");
//for HAMEET2
RuleactypeRPP.set("HAMEET2"+TypeDateTabRPP[1],"HAMR2");
RuleactypeRPP.set("HAMEET2"+TypeDateTabRPP[3],"HAM2");
//for HAMEET3
RuleactypeRPP.set("HAMEET3"+TypeDateTabRPP[1],"HAMR3");
RuleactypeRPP.set("HAMEET3"+TypeDateTabRPP[3],"HAM3");
//for HAMEETREG
RuleactypeRPP.set("HAMEETREG"+TypeDateTabRPP[1],"HAMRREG");
RuleactypeRPP.set("HAMEETREG"+TypeDateTabRPP[3],"HAMREG");

// Function to retrieve values from RuleactypeRPP hastable
function RPP_HASHTABLE_VALUE(key)
{
	var Result = "";
	var TabTemp = RuleactypeRPP.get(key);
	if (TabTemp != "" && TabTemp != undefined)
		Result = TabTemp;
	return Result;
}
RPP_HASHTABLE_VALUE.exportfunction({"STRING"},"STRING")


// Function to retrieve the Approval, Submission, Dispatch and Meeting dates according to the activity type
function RPP_GETDATE (TypeDateRPP,DateField)
{
	var o_act = this;
	var s_key = "";
	var Values = "";
	var b_found = "";
	var orderList = new vector(DateField);
	var class_act = (typeOf this);
	var date_type = class_act.getSlot(DateField).descriptor.type.name.toString();

	if(o_act instanceof OpxActivity && (date_type=="DATE" || date_type=="END-DATE"))
	{
		s_key=o_act.Wbs_Type.name+TypeDateRPP;
		values=RPP_HASHTABLE_VALUE(s_key);
		if (values!="")
		{
			var TabValues=values.parsevector();
			fromobject(o_act)
			{
				for (var o_task in OpxActivity where o_task.get(DateField)!=undefined order by orderList)
				{
					for (var TempValue in TabValues)
					{
						if (TempValue==o_task.Wbs_Type.name)
						{
							if (date_type=="END-DATE") return o_task.get(DateField).previous("day");
							else return o_task.get(DateField);
						}
					}
				}
			}
		}
	}
	return "";
}
RPP_GETDATE.exportfunction({"STRING","STRING"},"DATE")


// Function to load RPP data in temporay table
function SP_JS_RPP_LOAD_TT()
{
	// Empty temporary table
	for (var o_LineTemp in "OpxSP_TT_ACT_TO_RPP")  o_LineTemp.delete();
	
	// Fill the table 
	for (var o_project in opxProject where o_project.getinternalvalue("STATE").ToString()=="ACTIVE") 
	{
		fromobject(o_project)
		{
			for (var o_act in "OpxActivity" where o_act.wbs_type.SP_AA_B_RPP_EXP) 
			{
				var newactLine = new "OpxSP_TT_ACT_TO_RPP"(
					"NAME", o_act.NAME,
					"SP_AA_S_RPP_PJT_CODE",o_act.SP_NF_S_PJT_CODE,
					"SP_AA_S_RPP_PJT_NAME",o_act.SP_NF_S_ACT_CL_PROJ_NAME,
					"SP_AA_S_RPP_ACT_DESC",ravl_QV_convertNotepad(o_act.DESC),
					"SP_AA_D_RPP_ACT_PS",o_act.PS,
					"SP_AA_D_RPP_ACT_PF",o_act.calldateformula("add_duration(PF,'-1d',\"\")"),
					"SP_AA_D_RPP_ACT_AS",o_act.AS,
					"SP_AA_D_RPP_ACT_AF",o_act.calldateformula("add_duration(AF,'-1d',\"\")"),
					"SP_AA_D_RPP_PLANNED_DISP",o_act.SP_NF_D_RPP_DISPA_PF,
					"SP_AA_D_RPP_ACTUAL_DISP",o_act.SP_NF_D_RPP_DISPA_AF ,
					"SP_AA_D_RPP_YEARLY_DISP",o_act.SP_NF_D_RPP_YEARLY_DISPA,
					"SP_AA_D_RPP_PLANNED_SUB",o_act.SP_NF_D_RPP_SUB_PF,
					"SP_AA_D_RPP_ACTUAL_SUB",o_act.SP_NF_D_RPP_SUB_AF,
					"SP_AA_D_RPP_YEARLY_SUB",o_act.SP_NF_D_RPP_YEARLY_SUB,
					"SP_AA_D_RPP_PLANNED_APP",o_act.SP_NF_D_RPP_APP_PF,
					"SP_AA_D_RPP_ACTUAL_APP",o_act.SP_NF_D_RPP_APP_AF,
					"SP_AA_D_RPP_YEARLY_APP",o_act.SP_NF_D_RPP_YEARLY_APP,
					"SP_AA_D_RPP_DATE_MEET",o_act.SP_NF_D_RPP_MEETING,
					"SP_AA_S_RPP_ACT_TYPE",o_act.WBS_TYPE.NAME,
					"SP_AA_S_RPP_ACT_OBS",o_act.SP_NF_S_ACT_OBS_NAME,
					"SP_AA_S_RPP_ACT_COUNTRY",o_act.SP_AA_ACT_COUNTRY,
					"SP_AA_S_RPP_ACT_ISO_CODE_2",o_act.SP_NF_RPP_COUNTRY,
					"SP_AA_S_RPP_ACT_PRODUCT",o_act.SP_AA_ACT_PRODUCT,
					"SP_AA_S_RPP_ACT_PRODUCT_CODE",o_act.SP_NF_S_RPP_PRODUCT_CODE,
					"SP_AA_D_RPP_PRJ_YEARLY_DATE",o_project.SP_NF_D_YEARLY_BASELINE_DATE,
					"SP_AA_S_RPP_PORTFOLIO",o_act.SP_NF_S_PRJ_TYPE,
					"SP_AA_S_RPP_ACT_DOSE_PER_CONT",o_act.SP_AA_ACT_DOSE_PER_PRIM_CONT,
					"SP_AA_S_RPP_ACT_PACK_SET_NAME",o_act.SP_AA_ACT_PACK_SET_NAME,
					"SP_AA_S_RPP_ACT_MAR_STATUS",o_act.SP_AA_ACT_MAR_STATUS,
					"SP_AA_S_RPP_PRJ_STAGE",o_project.SP_AA_S_PRJ_STAGE,
					"SP_AA_S_RPP_PRJ_STATUS",o_project._INF_NF_S_PRJ_STATE_INTERNAL,
					"SP_AA_S_RPP_LCY_STATUS",o_project.SP_AA_S_LC_STATUS);
			}
		}
	}
}
SP_JS_RPP_LOAD_TT .exportfunction()


 
//  FILE    : SP_OJS_WPM_FUNCTIONS.ojs
// 
//  AUTHOR  : Atos team
// 
//  VERSION : 1.2
// 
//  PURPOSE : Functions for workpackage management
//
var revision_number ="1.3";

//  Revision 1.3  2019/01/22 bcordel
//  RITM0780557 1799 modifying sp_pm_set_default_access_rights to add G_PORTFULL to NV project in reading mode
//
// FLC : Last modification 10:30 20/July/2017
//  1.2 Modification of 'sp_pm_set_default_access_rights' method to set RIGHTS field
//
// FLC : Last modification 10:30 20/July/2017
//  1.1 Modification of 'sp_wpm_set_delegate_to' method
//      Add of method
//       - sp_wpm_set_delegate_to_obs_prj_user_groups
//       - sp_wpm_set_delegate_to_obs_prj_user
//       - sp_wpm_set_default_read_only_groups
//       - sp_pm_set_default_access_rights
//      Move of function 'sp_wpm_reset_delegate_to_on_all_project' to sp_js_dr_v6.ojs

// Method used for automatic delegation on modification of OBS associated to the activity
method sp_wpm_set_delegate_to on opxActivity ()
{
	var vAct = this;
	if(vAct instanceof opxActivity && vAct != undefined && vAct.WBS_ELEMENT instanceof opxActivity && vAct.WBS_ELEMENT != undefined)
	{
		// Delegation is set only for first level of activity associated to OBS
		if(vAct.OBS != vAct.WBS_ELEMENT.OBS)
		{
			// Method for automatic workpackage manager delegation to user groups for all activities associated to the considered OBS
			this.sp_wpm_set_delegate_to_obs_prj_user_groups();
			this.sp_wpm_set_delegate_to_obs_prj_user();
			this.sp_wpm_set_default_read_only_groups();
		}
	}
}

// Method used for automatic delegation on modification of users in read access associated to the project
method sp_wpm_set_delegate_to on opxProject ()
{
	var vProject = this;
	if(vProject instanceof opxProject && vProject != undefined)
	{
		fromobject(vProject)
		{
			for(var vAct in opxActivity)
			{
				vAct.sp_wpm_set_delegate_to();
			}
		}
	}
}

// Method for automatic workpackage manager delegation to user groups for all activities associated to the considered OBS
method sp_wpm_set_delegate_to_obs_prj_user_groups on opxActivity ()
{
	var vAct = this;
	var vDelegatedToVect = new vector();
	var vReadOnlyGroups = new vector();
	if(vAct instanceof opxActivity && vAct != undefined)
	{
		if(vAct.OBS instanceof opxOBSElement && vAct.OBS != undefined)
		{
			if(vAct.OBS.SP_AA_S_WPM_PRJ_DEFAULT_GROUPS != "")
			{
				// Automatic workpackage manager delegation to selected user groups for all activities associated to the considered OBS
				for(var UserOrGroup in vAct._WPM_RO_WORKPACKAGE_MANAGER.parselist()) {
					vDelegatedToVect.push(UserOrGroup);
				}
				for(var UserOrGroup in vAct.OBS.SP_AA_S_WPM_PRJ_DEFAULT_GROUPS.parselist()) {
					vDelegatedToVect.push(UserOrGroup);
				}
				vDelegatedToVect = vDelegatedToVect.removeduplicates();
				vAct._WPM_RO_WORKPACKAGE_MANAGER = vDelegatedToVect.join(",");
				
				// The list of user groups is also added to the list of "User groups with read permission" at a project level
				for(var UserOrGroup in vAct.project.READ_ONLY_GROUPS.parselist()) {
					vReadOnlyGroups.push(UserOrGroup);
				}
				for(var UserOrGroup in vAct.OBS.SP_AA_S_WPM_PRJ_DEFAULT_GROUPS.parselist()) {
					vReadOnlyGroups.push(UserOrGroup);
				}
				vReadOnlyGroups = vReadOnlyGroups.removeduplicates();
				vAct.project.READ_ONLY_GROUPS = vReadOnlyGroups.join(",");
			}
		}
	}
}

// Method for automatic workpackage manager delegation to users associated to the selected user groups for all activities associated to the considered OBS. Automatic delegation is triggered if user is added to the list of "User groups with read permission" list at a project level. Therefore, user has access to the whole project in read mode and to the activities associated to the considered OBS in write mode.
method sp_wpm_set_delegate_to_obs_prj_user on opxActivity ()
{
	var vAct = this;
	var vDelegatedToVect = new vector();
	if(vAct instanceof opxActivity && vAct != undefined)
	{
		if(vAct.OBS instanceof opxOBSElement && vAct.OBS != undefined)
		{
			if(vAct.OBS.SP_AA_S_WPM_PRJ_DEFAULT_USERS != "")
			{
				// Automatic workpackage manager delegation to users associated to the selected user groups for all activities associated to the considered OBS. Automatic delegation is triggered if user is added to the list of "User groups with read permission" list at a project level.
				for(var UserOrGroup in vAct._WPM_RO_WORKPACKAGE_MANAGER.parselist()) {
					vDelegatedToVect.push(UserOrGroup);
				}
				// loop on the list of user in field READ_ONLY_GROUPS
				for(var vU in vAct.project.READ_ONLY_GROUPS.parselist())
				{
					var vUser = opxUser.get(vU);
					if(vUser instanceof opxUser && vUser!=undefined)
					{
						// loop on the list of user groups in field SP_AA_S_WPM_PRJ_DEFAULT_USERS
						for(var UserOrGroup in vAct.OBS.SP_AA_S_WPM_PRJ_DEFAULT_USERS.parselist()) {
							if ("USER_IN_GROUP".call(vUser.printattribute(), UserOrGroup))
							{
								vDelegatedToVect.push(UserOrGroup);
							}
						}
					}
				}
				vDelegatedToVect = vDelegatedToVect.removeduplicates();
				vAct._WPM_RO_WORKPACKAGE_MANAGER = vDelegatedToVect.join(",");
			}
		}
	}
}

// Method for automatic read only access provided to selected user groups if project contains activities associated to the considered OBS.
method sp_wpm_set_default_read_only_groups on opxActivity ()
{
	var vAct = this;
	var vReadOnlyGroups = new vector();
	if(vAct instanceof opxActivity && vAct != undefined)
	{
		if(vAct.OBS instanceof opxOBSElement && vAct.OBS != undefined)
		{
			if(vAct.OBS.SP_AA_S_PRJ_DEFAULT_READ_GR != "")
			{
				// Automatic read only access provided to selected user groups if project contains activities associated to the considered OBS
				for(var UserOrGroup in vAct.project.READ_ONLY_GROUPS.parselist()) {
					vReadOnlyGroups.push(UserOrGroup);
				}
				for(var UserOrGroup in vAct.OBS.SP_AA_S_PRJ_DEFAULT_READ_GR.parselist()) {
					vReadOnlyGroups.push(UserOrGroup);
				}
				vReadOnlyGroups = vReadOnlyGroups.removeduplicates();
				vAct.READ_ONLY_GROUPS = vReadOnlyGroups.join(",");
			}
		}
	}
}

// Method used for project access rights initialization
method sp_pm_set_default_access_rights on opxProject ()
{
	var vProject = this;
	var vReadOnlyGroups = new vector();
	var vReadWriteGroups = new vector();
	
	if(vProject instanceof opxProject && vProject != undefined)
	{
		if(context.SP_GS_S_PRJ_DEFAULT_WRITE_GROUPS != "")
		{
			// Setting used to set the default read/write groups for a project after project creation
			for(var UserOrGroup in vProject.READ_WRITE_GROUPS.parselist()) {
				vReadWriteGroups.push(UserOrGroup);
			}
			for(var UserOrGroup in context.SP_GS_S_PRJ_DEFAULT_WRITE_GROUPS.parselist()) {
				vReadWriteGroups.push(UserOrGroup);
			}
			vReadWriteGroups = vReadWriteGroups.removeduplicates();
			vProject.READ_WRITE_GROUPS = vReadWriteGroups.join(",");
		}
		
		if(context.SP_GS_S_PRJ_DEFAULT_READ_GROUPS != "")
		{
			// Setting used to set the default read only groups for a project after project creation
			for(var UserOrGroup in vProject.READ_ONLY_GROUPS.parselist()) {
				vReadOnlyGroups.push(UserOrGroup);
			}
			for(var UserOrGroup in context.SP_GS_S_PRJ_DEFAULT_READ_GROUPS.parselist()) {
				vReadOnlyGroups.push(UserOrGroup);
			}
			if (vProject.CallBooleanFormula("Belongs(\"BS2\",\"ALL.NV\")"))
			{
				vReadOnlyGroups.push("G_PORTFULL"); 
			}
			vReadOnlyGroups = vReadOnlyGroups.removeduplicates();
			vProject.READ_ONLY_GROUPS = vReadOnlyGroups.join(",");
		}
		
		if(vProject.STATE=="Active")
		{
			vProject.RIGHTS = "Read only access";
		}
	}
}
writetolog("Loading script SP_OJS_WPM_FUNCTIONS in revision ~a.",revision_number);

//  FILE    : SP_OJS_WPM_FUNCTIONS.ojs
// 
//  AUTHOR  : Atos team
// 
//  VERSION : 1.2
// 
//  PURPOSE : Functions for workpackage management
//
var revision_number ="1.3";

//  Revision 1.3  2019/01/22 bcordel
//  RITM0780557 1799 modifying sp_pm_set_default_access_rights to add G_PORTFULL to NV project in reading mode
//
// FLC : Last modification 10:30 20/July/2017
//  1.2 Modification of 'sp_pm_set_default_access_rights' method to set RIGHTS field
//
// FLC : Last modification 10:30 20/July/2017
//  1.1 Modification of 'sp_wpm_set_delegate_to' method
//      Add of method
//       - sp_wpm_set_delegate_to_obs_prj_user_groups
//       - sp_wpm_set_delegate_to_obs_prj_user
//       - sp_wpm_set_default_read_only_groups
//       - sp_pm_set_default_access_rights
//      Move of function 'sp_wpm_reset_delegate_to_on_all_project' to sp_js_dr_v6.ojs

// Method used for automatic delegation on modification of OBS associated to the activity
method sp_wpm_set_delegate_to on opxActivity ()
{
	var vAct = this;
	if(vAct instanceof opxActivity && vAct != undefined && vAct.WBS_ELEMENT instanceof opxActivity && vAct.WBS_ELEMENT != undefined)
	{
		// Delegation is set only for first level of activity associated to OBS
		if(vAct.OBS != vAct.WBS_ELEMENT.OBS)
		{
			// Method for automatic workpackage manager delegation to user groups for all activities associated to the considered OBS
			this.sp_wpm_set_delegate_to_obs_prj_user_groups();
			this.sp_wpm_set_delegate_to_obs_prj_user();
			this.sp_wpm_set_default_read_only_groups();
		}
	}
}

// Method used for automatic delegation on modification of users in read access associated to the project
method sp_wpm_set_delegate_to on opxProject ()
{
	var vProject = this;
	if(vProject instanceof opxProject && vProject != undefined)
	{
		fromobject(vProject)
		{
			for(var vAct in opxActivity)
			{
				vAct.sp_wpm_set_delegate_to();
			}
		}
	}
}

// Method for automatic workpackage manager delegation to user groups for all activities associated to the considered OBS
method sp_wpm_set_delegate_to_obs_prj_user_groups on opxActivity ()
{
	var vAct = this;
	var vDelegatedToVect = new vector();
	var vReadOnlyGroups = new vector();
	if(vAct instanceof opxActivity && vAct != undefined)
	{
		if(vAct.OBS instanceof opxOBSElement && vAct.OBS != undefined)
		{
			if(vAct.OBS.SP_AA_S_WPM_PRJ_DEFAULT_GROUPS != "")
			{
				// Automatic workpackage manager delegation to selected user groups for all activities associated to the considered OBS
				for(var UserOrGroup in vAct._WPM_RO_WORKPACKAGE_MANAGER.parselist()) {
					vDelegatedToVect.push(UserOrGroup);
				}
				for(var UserOrGroup in vAct.OBS.SP_AA_S_WPM_PRJ_DEFAULT_GROUPS.parselist()) {
					vDelegatedToVect.push(UserOrGroup);
				}
				vDelegatedToVect = vDelegatedToVect.removeduplicates();
				vAct._WPM_RO_WORKPACKAGE_MANAGER = vDelegatedToVect.join(",");
				
				// The list of user groups is also added to the list of "User groups with read permission" at a project level
				for(var UserOrGroup in vAct.project.READ_ONLY_GROUPS.parselist()) {
					vReadOnlyGroups.push(UserOrGroup);
				}
				for(var UserOrGroup in vAct.OBS.SP_AA_S_WPM_PRJ_DEFAULT_GROUPS.parselist()) {
					vReadOnlyGroups.push(UserOrGroup);
				}
				vReadOnlyGroups = vReadOnlyGroups.removeduplicates();
				vAct.project.READ_ONLY_GROUPS = vReadOnlyGroups.join(",");
			}
		}
	}
}

// Method for automatic workpackage manager delegation to users associated to the selected user groups for all activities associated to the considered OBS. Automatic delegation is triggered if user is added to the list of "User groups with read permission" list at a project level. Therefore, user has access to the whole project in read mode and to the activities associated to the considered OBS in write mode.
method sp_wpm_set_delegate_to_obs_prj_user on opxActivity ()
{
	var vAct = this;
	var vDelegatedToVect = new vector();
	if(vAct instanceof opxActivity && vAct != undefined)
	{
		if(vAct.OBS instanceof opxOBSElement && vAct.OBS != undefined)
		{
			if(vAct.OBS.SP_AA_S_WPM_PRJ_DEFAULT_USERS != "")
			{
				// Automatic workpackage manager delegation to users associated to the selected user groups for all activities associated to the considered OBS. Automatic delegation is triggered if user is added to the list of "User groups with read permission" list at a project level.
				for(var UserOrGroup in vAct._WPM_RO_WORKPACKAGE_MANAGER.parselist()) {
					vDelegatedToVect.push(UserOrGroup);
				}
				// loop on the list of user in field READ_ONLY_GROUPS
				for(var vU in vAct.project.READ_ONLY_GROUPS.parselist())
				{
					var vUser = opxUser.get(vU);
					if(vUser instanceof opxUser && vUser!=undefined)
					{
						// loop on the list of user groups in field SP_AA_S_WPM_PRJ_DEFAULT_USERS
						for(var UserOrGroup in vAct.OBS.SP_AA_S_WPM_PRJ_DEFAULT_USERS.parselist()) {
							if ("USER_IN_GROUP".call(vUser.printattribute(), UserOrGroup))
							{
								vDelegatedToVect.push(UserOrGroup);
							}
						}
					}
				}
				vDelegatedToVect = vDelegatedToVect.removeduplicates();
				vAct._WPM_RO_WORKPACKAGE_MANAGER = vDelegatedToVect.join(",");
			}
		}
	}
}

// Method for automatic read only access provided to selected user groups if project contains activities associated to the considered OBS.
method sp_wpm_set_default_read_only_groups on opxActivity ()
{
	var vAct = this;
	var vReadOnlyGroups = new vector();
	if(vAct instanceof opxActivity && vAct != undefined)
	{
		if(vAct.OBS instanceof opxOBSElement && vAct.OBS != undefined)
		{
			if(vAct.OBS.SP_AA_S_PRJ_DEFAULT_READ_GR != "")
			{
				// Automatic read only access provided to selected user groups if project contains activities associated to the considered OBS
				for(var UserOrGroup in vAct.project.READ_ONLY_GROUPS.parselist()) {
					vReadOnlyGroups.push(UserOrGroup);
				}
				for(var UserOrGroup in vAct.OBS.SP_AA_S_PRJ_DEFAULT_READ_GR.parselist()) {
					vReadOnlyGroups.push(UserOrGroup);
				}
				vReadOnlyGroups = vReadOnlyGroups.removeduplicates();
				vAct.READ_ONLY_GROUPS = vReadOnlyGroups.join(",");
			}
		}
	}
}

// Method used for project access rights initialization
method sp_pm_set_default_access_rights on opxProject ()
{
	var vProject = this;
	var vReadOnlyGroups = new vector();
	var vReadWriteGroups = new vector();
	
	if(vProject instanceof opxProject && vProject != undefined)
	{
		if(context.SP_GS_S_PRJ_DEFAULT_WRITE_GROUPS != "")
		{
			// Setting used to set the default read/write groups for a project after project creation
			for(var UserOrGroup in vProject.READ_WRITE_GROUPS.parselist()) {
				vReadWriteGroups.push(UserOrGroup);
			}
			for(var UserOrGroup in context.SP_GS_S_PRJ_DEFAULT_WRITE_GROUPS.parselist()) {
				vReadWriteGroups.push(UserOrGroup);
			}
			vReadWriteGroups = vReadWriteGroups.removeduplicates();
			vProject.READ_WRITE_GROUPS = vReadWriteGroups.join(",");
		}
		
		if(context.SP_GS_S_PRJ_DEFAULT_READ_GROUPS != "")
		{
			// Setting used to set the default read only groups for a project after project creation
			for(var UserOrGroup in vProject.READ_ONLY_GROUPS.parselist()) {
				vReadOnlyGroups.push(UserOrGroup);
			}
			for(var UserOrGroup in context.SP_GS_S_PRJ_DEFAULT_READ_GROUPS.parselist()) {
				vReadOnlyGroups.push(UserOrGroup);
			}
			if (vProject.CallBooleanFormula("Belongs(\"BS2\",\"ALL.NV\")"))
			{
				vReadOnlyGroups.push("G_PORTFULL"); 
			}
			vReadOnlyGroups = vReadOnlyGroups.removeduplicates();
			vProject.READ_ONLY_GROUPS = vReadOnlyGroups.join(",");
		}
		
		if(vProject.STATE=="Active")
		{
			vProject.RIGHTS = "Read only access";
		}
	}
}
writetolog("Loading script SP_OJS_WPM_FUNCTIONS in revision ~a.",revision_number);

 
//Alignement handler for _TC_NF_B_ACT_IS_INSERTED
function SP_tc_QuickSearchHAlignementHandler(Slot) {
	if (Slot.descriptor.name.tostring()=="_TC_NF_B_ACT_IS_INSERTED"){
		//NATIVE :
		//return new symbol("RIGHT","KEYWORD");
		//SANOFI :
		return new symbol("CENTER","KEYWORD"); 
	}
	return false;
}

//Font ColorHandler for _TC_NF_B_ACT_IS_INSERTED
function SP_tc_QuickSearchFontColorHandler(Slot) {
	if (Slot.descriptor.name.tostring()=="_TC_NF_B_ACT_IS_INSERTED"){
		if (this._tcm_CheckAlreadyInserted("")==false) {
		  return color("MOBMAG");
		}
		else {
		  return color("MOBGR");
		}
	}
	//SANOFI :
	else{
		if (this._tcm_CheckAlreadyInserted("")!=false) {
		  return color("MOBGR");
		}		
	}
  return false;
}

function SP_tc_display_act_quick_search() {
  if (this.grid instanceof ObjectGrid) {
    var ListOfAttributes=context.getinternalvalue("WS-ATTRIBUTES-IN-LIST");
    //Add/insert field also added
    var SymbolAtt=new symbol("_TC_NF_B_ACT_IS_INSERTED","KEYWORD");
    if (!(ListOfAttributes.position(SymbolAtt) instanceof Number)) {
      ListOfAttributes.push(SymbolAtt);
    }
    if (ListOfAttributes!=undefined) {
      this.grid.attributelist = ListOfAttributes;
    }
    //If not using standard opx2rights => change mapper to bypass kernel standard mapping
    //Other solution is to change Intranet page access rights but as it is also used for agenda, it is complex
    if (context.getinternalvalue("FILTER_VIEW_WITH_USER_READ_ACCESS")==false) {
      //NATIVE:
	  //this.grid.changeobjectgridmapper("_TC_filter_my_contextual_projects_activities_map");
	  //SANOFI:
	  this.grid.changeobjectgridmapper("SP_tc_QuickSearchFontColorHandler");
    }
    //Color font handler and alignement handler for _TC_NF_B_ACT_IS_INSERTED
      //NATIVE:
	  //this.grid.AddTextColorHandler("_tc_QuickSearchFontColorHandler");
	  //SANOFI:
	  this.grid.AddTextColorHandler("SP_tc_QuickSearchFontColorHandler");
	//NATIVE:
    //this.grid.AddHAlignHandler("_tc_QuickSearchHAlignementHandler");
	//SANOFI:
    this.grid.AddHAlignHandler("SP_tc_QuickSearchHAlignementHandler");
 }
}

// Functions for Time Tracking Requirement 4.3.L If an activity is closed to timecard, display an alert to the end user in addition to the little padlock displayed after the activity

// Function used in 'sp_tc_input_grid_additional_color_handler' to add a color handler on OpxTimeInputLine
function sp_tc_color_handler(slot) {
  var current_tc=context._tc_da_current_tc;
  var user = context.applet.user.name;
  var res=current_tc.resource;
  if (this.activity instanceof OpxActivity && res instanceof OpxResource) {
    if (this.activity.CheckActivityVisibleInTimeCard(user,res,false)==false && this.activity.CheckPermanentActivityVisibleInTimeCardWithRights(user,res)==false && this.activity!=_tc_fetch_total_activity()) {
      return color("_IHM_PA_HIGHLIGHT");
    }
  }
}

// Function used in 'SP_TC_REPORT_TIME_CARD_TABLE' report, after ' _tc_input_grid_1()' function to add a color handler on OpxTimeInputLine (light purple if the activity is closed to timecard)
function sp_tc_input_grid_additional_color_handler() {
	if (this.grid instanceof ObjectGrid) {
		this.grid.addcolorhandler(sp_tc_color_handler);
	}
}
// Chargement de la liste des portfolio pour affichage du Dashboard PEX dans Timecard
function sp_js_list_TC_portfolio(useless){
	var vListPort = new vector();
	for(var port in "Opx_FF_PT_FAVOR_FILTERS") 
	{
		vListPort.push(port.printattribute());
	}
	//Affichage du dashboard sur l'ensemble des portfolios
	context._ff_aa_s_list_name = vListPort.join(",")
	return context._ff_aa_s_list_name;
}
sp_js_list_TC_portfolio.exportfunction({"STRING"},"STRING");

//Alignement handler for _TC_NF_B_ACT_IS_INSERTED
function SP_tc_QuickSearchHAlignementHandler(Slot) {
	if (Slot.descriptor.name.tostring()=="_TC_NF_B_ACT_IS_INSERTED"){
		//NATIVE :
		//return new symbol("RIGHT","KEYWORD");
		//SANOFI :
		return new symbol("CENTER","KEYWORD"); 
	}
	return false;
}

//Font ColorHandler for _TC_NF_B_ACT_IS_INSERTED
function SP_tc_QuickSearchFontColorHandler(Slot) {
	if (Slot.descriptor.name.tostring()=="_TC_NF_B_ACT_IS_INSERTED"){
		if (this._tcm_CheckAlreadyInserted("")==false) {
		  return color("MOBMAG");
		}
		else {
		  return color("MOBGR");
		}
	}
	//SANOFI :
	else{
		if (this._tcm_CheckAlreadyInserted("")!=false) {
		  return color("MOBGR");
		}		
	}
  return false;
}

function SP_tc_display_act_quick_search() {
  if (this.grid instanceof ObjectGrid) {
    var ListOfAttributes=context.getinternalvalue("WS-ATTRIBUTES-IN-LIST");
    //Add/insert field also added
    var SymbolAtt=new symbol("_TC_NF_B_ACT_IS_INSERTED","KEYWORD");
    if (!(ListOfAttributes.position(SymbolAtt) instanceof Number)) {
      ListOfAttributes.push(SymbolAtt);
    }
    if (ListOfAttributes!=undefined) {
      this.grid.attributelist = ListOfAttributes;
    }
    //If not using standard opx2rights => change mapper to bypass kernel standard mapping
    //Other solution is to change Intranet page access rights but as it is also used for agenda, it is complex
    if (context.getinternalvalue("FILTER_VIEW_WITH_USER_READ_ACCESS")==false) {
      //NATIVE:
	  //this.grid.changeobjectgridmapper("_TC_filter_my_contextual_projects_activities_map");
	  //SANOFI:
	  this.grid.changeobjectgridmapper("SP_tc_QuickSearchFontColorHandler");
    }
    //Color font handler and alignement handler for _TC_NF_B_ACT_IS_INSERTED
      //NATIVE:
	  //this.grid.AddTextColorHandler("_tc_QuickSearchFontColorHandler");
	  //SANOFI:
	  this.grid.AddTextColorHandler("SP_tc_QuickSearchFontColorHandler");
	//NATIVE:
    //this.grid.AddHAlignHandler("_tc_QuickSearchHAlignementHandler");
	//SANOFI:
    this.grid.AddHAlignHandler("SP_tc_QuickSearchHAlignementHandler");
 }
}

// Functions for Time Tracking Requirement 4.3.L If an activity is closed to timecard, display an alert to the end user in addition to the little padlock displayed after the activity

// Function used in 'sp_tc_input_grid_additional_color_handler' to add a color handler on OpxTimeInputLine
function sp_tc_color_handler(slot) {
  var current_tc=context._tc_da_current_tc;
  var user = context.applet.user.name;
  var res=current_tc.resource;
  if (this.activity instanceof OpxActivity && res instanceof OpxResource) {
    if (this.activity.CheckActivityVisibleInTimeCard(user,res,false)==false && this.activity.CheckPermanentActivityVisibleInTimeCardWithRights(user,res)==false && this.activity!=_tc_fetch_total_activity()) {
      return color("_IHM_PA_HIGHLIGHT");
    }
  }
}

// Function used in 'SP_TC_REPORT_TIME_CARD_TABLE' report, after ' _tc_input_grid_1()' function to add a color handler on OpxTimeInputLine (light purple if the activity is closed to timecard)
function sp_tc_input_grid_additional_color_handler() {
	if (this.grid instanceof ObjectGrid) {
		this.grid.addcolorhandler(sp_tc_color_handler);
	}
}
// Chargement de la liste des portfolio pour affichage du Dashboard PEX dans Timecard
function sp_js_list_TC_portfolio(useless){
	var vListPort = new vector();
	for(var port in "Opx_FF_PT_FAVOR_FILTERS") 
	{
		vListPort.push(port.printattribute());
	}
	//Affichage du dashboard sur l'ensemble des portfolios
	context._ff_aa_s_list_name = vListPort.join(",")
	return context._ff_aa_s_list_name;
}
sp_js_list_TC_portfolio.exportfunction({"STRING"},"STRING");

 
var CurrentReference= context.date1
var FieldList = {":START-",":FINISH-"};
for (var each in FieldList){
  var field= CurrentReference.ComputeField(each);
  alert(each);
  alert(field);
  //this.AddAttribute(field);
}

AddAttribute(CurrentFieldName);
var CurrentReference= context.date1
var FieldList = {":START-",":FINISH-"};
for (var each in FieldList){
  var field= CurrentReference.ComputeField(each);
  alert(each);
  alert(field);
  //this.AddAttribute(field);
}

AddAttribute(CurrentFieldName);
 

// -*- coding: windows-1252 -*- 
//  COPYRIGHT (C) PLANISWARE 2020
//
//  All Rights Reserved
//
//  This program and the information contained herein are confidential to
//  and the property of PLANISWARE and are made available only to PLANISWARE
//  employees for the sole purpose of conducting PLANISWARE business.
//
//**************************************************************************

// PLWSCRIPT: _BA_JS2_RESTAPI | GENDEPS
// DEPENDENCIES: _BA_JS_BATCH

namespace batchapiMod;

// Batches REST API
//-----------------

// All the functions take a json vector of ONB / batches id as input and will return a vector of corresponding batch status (see examples)

// Available URIs :
// RUN_BATCH : Manually run a batch (same as clicking on "Run" in the batch popup)
// PAUSE_BATCH : Set the "Stopped" field of the batch to true
// UNPAUSE_BATCH : Set the "Stopped" field of the batch to false
// UNLOCK_BATCH : Unlock the batch if needed. Be carefule when using this function !
// BATCH_STATUS : Returns the following information on the batch :
//                ONB
//                ID
//                NEXT_RUN_DATE : next schedulred run date. Can be empty if scheduling is "Never" or if the batch is stopped or finished
//                LAST_RUN_DATE
//                PAUSED
//                LOCKED : see below
//                LAST_RUN_CODE : state of the last execution (0 = Successful / 1 = Error)
//                LAST_RUN_LABEL : The label corresponding to the code

// About the "Locked" state : When a batch is started, it is locked in the database, and will appear as "LOCKED" in the status. When the batch is finished, it will be unlocked in the database.
// However, if the batch fails to finish (for example if the master crashes during the batch), the batch will never be unlocked and will still appear as "LOCKED". In this case, it needs to be "manually" unlocked.

// About the "Started" field : when you manually run a batch, here what is happening :
// * The field _ba_aa_b_run_batch is set to true on the slave
// * The modification is saved in the database
// * The modification is reloaded on the master
// * The batch scheduler (that runs every minute on the master) will then start the batch that is marked _ba_aa_b_run_batch
// Therefore, when you manually run a batch, it will not start immediately ! That is why the batch status that is returned will say "STARTED" : true / "LOCKED" : false.
// When the batch has actually started, it will switch to "LOCKED" : true / "STARTED" : false

// Example : 
// curl -X POST -H 'Content-Type: application/json' -u troche:only4plw http://serenity/otd/OPX2/localhost:7500/BATCH_STATUS --data '[118281825497, 118282058097]'
// curl -X POST -H 'Content-Type: application/json' -u troche:only4plw http://serenity/otd/OPX2/localhost:7500/BATCH_STATUS --data '[118281825497, 118282058097]'
// [{"ONB":118281825497,"NEXT_RUN_DATE":"","LAST_RUN_DATE":"","PAUSED":false,"LOCKED":false,"STARTED":true,"LAST_RUN_CODE":"UNKNOWN","LAST_RUN_LABEL":"UNKNOWN"},{"ONB":118282058097,"NEXT_RUN_DATE":"","LAST_RUN_DATE":"2020\/06\/16 15:11","PAUSED":false,"LOCKED":false,"STARTED":true,"LAST_RUN_CODE":0.0,"LAST_RUN_LABEL":"Successful"}]


function generate_json_status(plc._INF_PT_REQ batch){
  if ( batch instanceof plc._INF_PT_REQ){

    var detail = undefined;
    
    for ( var detail_ in batch.get("r._INF_RA_BATCH._BA_PT_BATCH_DETAILS") order by [["INVERSE", "_BA_AA_D_START_DATE"]]){
      detail = detail_;
      break;
    }
    
    return {
      "ONB" : batch.object_number,
      "ID" : batch.printattribute(),
      "NEXT_RUN_DATE" : batch._BA_AA_D_NEXT_RUN instanceof date ? batch._BA_AA_D_NEXT_RUN.tostring("YYYY/MM/DD HH:MM") : "",
      "LAST_RUN_DATE" : batch._BA_NF_D_LAST_RUN instanceof date ? batch._BA_NF_D_LAST_RUN.tostring("YYYY/MM/DD HH:MM") : "",
      "PAUSED" : batch._BA_AA_B_STOPPED,
      "LOCKED" : plw._ba_sql_select_lock(batch),
      "STARTED" : batch._ba_aa_b_run_batch,
      "LAST_RUN_CODE" : detail ? detail.getinternalvalue(#_BA_AA_AT_BATCH_STATE#) : "UNKNOWN",
      "LAST_RUN_LABEL" : detail ? detail._BA_AA_AT_BATCH_STATE : "UNKNOWN"
    };    
  }else{
    return false;
  }
}

function batch_status(json){
  var res = [];
  for( var batchid in json ) {
    var plc._INF_PT_REQ batch = plc._INF_PT_REQ.get(batchid);
    if( batch instanceof plc._INF_PT_REQ){
      var plc._INF_PT_REQ mainbatch = batch._ba_js_return_main_batch();
      var status = generate_json_status(batch);
      if ( status) {
	res.push(status);
      }
    }
  }
  return res;
}

function start_batch(json){
  for( var batchid in json ) {
    var plc._INF_PT_REQ batch = plc._INF_PT_REQ.get(batchid);
    if( batch instanceof plc._INF_PT_REQ){
      var plc._INF_PT_REQ mainbatch = batch._ba_js_return_main_batch();
      mainbatch._Ba_run_batch_macro();
    }
  }
  return batch_status(json);
}

function pause_batch(json){
  for( var batchid in json ) {
    var plc._INF_PT_REQ batch = plc._INF_PT_REQ.get(batchid);
    if( batch instanceof plc._INF_PT_REQ){
      var plc._INF_PT_REQ mainbatch = batch._ba_js_return_main_batch();
      mainbatch._BA_AA_B_STOPPED = true;
    }
  }
  return batch_status(json);
}

function unpause_batch(json){
  for( var batchid in json ) {
    var plc._INF_PT_REQ batch = plc._INF_PT_REQ.get(batchid);
    if( batch instanceof plc._INF_PT_REQ){
      var plc._INF_PT_REQ mainbatch = batch._ba_js_return_main_batch();
      mainbatch._BA_AA_B_STOPPED = false;
    }
  }
  return batch_status(json);
}

function unlock_batch(json){
  for( var batchid in json ) {
    var plc._INF_PT_REQ batch = plc._INF_PT_REQ.get(batchid);
    if( batch instanceof plc._INF_PT_REQ){
      var plc._INF_PT_REQ mainbatch = batch._ba_js_return_main_batch();
      plw._ba_sql_unlock(mainbatch);
    }
  }
  return batch_status(json);
}


function batch_api_definition(){
  plw.writetolog("Define Rest API for batch");
  Rest.defineAPI("RUN_BATCH",false,start_batch);
  Rest.defineAPI("PAUSE_BATCH",false,pause_batch);
  Rest.defineAPI("UNPAUSE_BATCH",false,unpause_batch);
  Rest.defineAPI("UNLOCK_BATCH",false,unlock_batch);
  
  Rest.defineAPI("BATCH_STATUS",false,batch_status);
}

batch_api_definition();
 
namespace changeOfScopeMod;

//First, change the optional option of the field
var o_change_RA_Activity = "opxATTRIBUTE_RELATION".get(117983552399);
with(plw.no_locking){o_change_RA_Activity.OPTIONAL = true;}

// Functions definition of 'change_new_change_on_activity' has been updated in E7 in scipt _CHG_JS2_CHANGE_OF_SCOPE

function change_compute_project_default_value(){
  var plc.ordo_project current_object = plw.currentpageobject();
  if( current_object instanceof plc.ordo_project || current_object instanceof plc.virtual_dataset){
    with( current_object.fromobject() ){
      for( var act in plc.work_structure order by ['LEVEL'] ){
	return act.dataset.name;
      }
    }
  }
  return "";
}

function change_new_change_on_activity( default_activity, default_dataset ){
   var hyperlink link = new Hyperlink("CreationForm",
                           "Class","_CHG_PT_CHANGE_OF_SCOPE",
                           "EditorType","_CHG_POPUP_CREATE_CHANGE",
                           "DefaultA1","DATASET",
                           "DefaultV1",default_dataset, 
                           "DefaultA2","_CHG_RA_CHANGE_ACT",
                           "DefaultV2",default_activity
                           );
  link.go(context);
}

//Extract form generate risk link
function change_new_change_hyperlink(){
  var string default_dataset = change_compute_project_default_value();
  change_new_change_on_activity( "", default_dataset );
}

function change_filter_activity_change(){  
 
  return true;
}
change_filter_activity_change.exportfunction([], "BOOLEAN", "Change activity picklist filter");
 
// PLWSCRIPT : _PSI3_JS2_EXPORT_RVA
// -------------------------------------
// /!\ Script V2 /!\
// 
// v1.4 2021-09-06 sse - v3.11.0_06
// Modification _psi3_js2_av_pln_status pour prendre en compte les t ches de type de livrable ESSAI (US8501)
// Modificatio _psi3_js2_av_pln_date pour calculer la date "D but SPJESSAI publi " (US8561)
//
// v1.3 2021-07-01 David - v3.11.0_02
// Modification de psi3_js2_flux2_export_rva et _psi3_js2_set_attributes_rva; suppression de validationActivity suite aux 1ers tests avec sacre
//
// v1.2 2021-06-29 sse - v3.11.0_01 US8414
// Modification psi3_js2_flux2_export_rva, _psi3_js2_av_pln_date pour les planned dates
//
// v1.1 2021-06-22 David - v3.11.0_01
// Modification de _psi3_js2_set_attributes_rva et _psi3_js2_format_date_api pour g rer les cas dates de fin et prises en comptes des defect (8439, 8430, 8431, 8432)
// Modification de psi3_js2_flux2_export_rva pour n'envoyer qu'1 fois
//
// v1.0 2021-06-07 sse - v3.11.0_00 US8364
// Creation
// -------------------------------------
namespace _oneval;

// US8364 : La fonction retourne ipn du publieur pour un livrable
function _psi3_js_get_del_last_publisher_ipn(del_onb)
{
	var result="";
	var vDel=plc._DEL_PT_DELIVERABLES.get(del_onb);
	if (vDel instanceof plc._DEL_PT_DELIVERABLES && vDel.internal==false)
	{
		for (var plc._del_pt_sp_log vPubLog in vDel.get("r._DEL_RA_DELIVERABLE._del_pt_sp_log")  order by [['Inverse', '_DEL_AA_D_ACTION_DATE']])
		{
			if (vPubLog instanceof plc._del_pt_sp_log && vPubLog.internal==false)
				return vPubLog._DEL_RA_USER.printattribute();
		}
	}
	return result;
}

// US8364 : La fonction retourne la date format e pour api
function _psi3_js2_format_date_api(vDate,type)
{
	var s_date="";
	if(vDate!=undefined && vDate!="" && vDate!=-1)
	{
		if(vDate instanceof Date)
		{
			if (type=="end") s_date="PRINT_END_DATE".callmacro(vDate,"AAAA-MM-JJ HH:MM:SS");
			else s_date="PRINT_DATE".callmacro(vDate,"AAAA-MM-JJ HH:MM:SS");
		}
		else
			s_date=vDate;
		s_date=s_date.replaceregexp(" ","T")+"Z";
	}
	return s_date;
}

// US8364 : La fonction retourne la liste des R_VA d'une activit  de validation
function _psi3_js2_av_rva_list(vIdSrc)
{
	var l_rva=new vector();
	var tablekey_IdSrc = new plw.keyattribute(plc._DEL_PT_DELIV_LINKS,"_PSI3_AA_S_DEM_ID_SOURCE",vIdSrc);
	with(tablekey_IdSrc.fromobject())
	{
		for(var Dva in plc._DEL_PT_DELIV_LINKS where Dva._PSI3_AA_S_DEM_ID_SOURCE==vIdSrc && Dva._DEL_AA_X_DELIVERABLE instanceof plc._DEL_PT_DELIVERABLES)
		{
			l_rva.pushifnotpresent(Dva._DEL_AA_X_DELIVERABLE);	
		}
	}
	return l_rva;
}

// US8364 : La fonction retourne url du dossier des doc
function _psi3_js2_av_rep_url(rva_list)
{
	var result="";
	for(var Rva in rva_list where Rva._DEL_AA_B_PUBLISHED==true)
	{
		result=Rva._PSI3_AA_S_NEW_PDM;
		break;
	}
	return result;
}

// US8364 : La fonction retourne Date minimum de d but SPJESSAI publi  du livrable et Date maximum des fin publi es des livrables
function _psi3_js2_av_pln_date(rva_list)
{
	var result="";
	var pln_date=new vector(-1,-1);
	var vAct;
	var d_deb_spjess_pub=-1;
	
	for(var Rva in rva_list)
	{
		// ActivityPlannedFinishDate : maximum des fin publi es (  la place de la fin calcul e de l'activit  productrice R_VA) 
		// sur l'ensemble des R_VA rattach s   l'id source de la D_VA correspondant au livrable publi 
		var fin_pub=Rva._PSI3_LIV_NF_D_FIN_PUB;
		if(fin_pub instanceof Date)
		{
			if(pln_date[1]==-1)
				pln_date[1]=fin_pub;
			else if(fin_pub > pln_date[1])
				pln_date[1]=fin_pub;
		}
		
		// ActivityPlannedStartDate : minimum des "D but SPJESSAI publi " (  la place du d but calcul ) sur l'ensemble des R_VA 
		// rattach s   l'id source de la D_VA correspondant au livrable publi 
		// US8561 : calculer la date "D but SPJESSAI publi " (Rva._PSI3_AA_D_DEB_SPJES_PUB)
		if(Rva._DEL_AA_N_PROD_ONB!=0 && Rva._DEL_AA_N_PROD_ONB instanceof number)
			vAct=plc.task.get(Rva._DEL_AA_N_PROD_ONB);
		if(vAct instanceof plc.Task)
		{
			d_deb_spjess_pub=plw.psi3_ojs_liv_set_deb_spjes_pub(vAct);
			if(d_deb_spjess_pub instanceof Date)
			{
				if(pln_date[0]==-1)
					pln_date[0]=d_deb_spjess_pub;
				else if(d_deb_spjess_pub<pln_date[0])
					pln_date[0]=d_deb_spjess_pub;
			}
		}
	}
	if(pln_date[0]==-1)
		pln_date[0]="";
	else
		pln_date[0]=_psi3_js2_format_date_api(pln_date[0],""); // on formate pour API
	if(pln_date[1]==-1)
		pln_date[1]="";
	else
		pln_date[1]=_psi3_js2_format_date_api(pln_date[1],"end"); //  on formate pour API
	return pln_date;
}	

// US8364 : La fonction retourne plannedStatus de l'activit  de validation (NOT STARTED/STARTED/FINISHED/CLOSED)
function _psi3_js2_av_pln_status(rva_list)
{
	var result="NOT STARTED";
	var nb_task=0;
	var nb_dde=0;
	var nb_dfe=0;
	var nb_url=0;
	
	//plw.alert("rva_list="+rva_list);
	for(var Rva in rva_list)
	{
		var vAct=undefined;

		if(Rva._DEL_AA_N_PROD_ONB!=0 && Rva._DEL_AA_N_PROD_ONB instanceof number)
			vAct=plc.task.get(Rva._DEL_AA_N_PROD_ONB);

		if(vAct instanceof plc.Task)
		{
			nb_task++;
			if(Rva._PSI3_AA_S_NEW_PDM!="")
				nb_url++;
			with(vAct.spj.fromobject())
			{
				// US8501 : for(var vTask in plc.Task where vTask.wbs_type.name=="ESSAI" || vTask.wbs_type.name=="BPP")
				for(var vTask in plc.Task where (vTask._PSI3_RA_DELIV_TYPE.internal==false && vTask._PSI3_RA_DELIV_TYPE.printattribute()=="ESSAI") || (vTask.wbs_type.internal==false && vTask.wbs_type.printattribute()=="BPP"))
				{
					// US8501 : 
					var b_vTask_ess=(vTask._PSI3_RA_DELIV_TYPE.internal==false && vTask._PSI3_RA_DELIV_TYPE.printattribute()=="ESSAI") ? true : false;
					var b_vTask_bpp=(vTask.wbs_type.internal==false && vTask.wbs_type.printattribute()=="BPP") ? true : false;
					if((b_vTask_ess || b_vTask_bpp) && vTask.DDE!=-1 && vTask.DDE!="" && vTask.DDE!=undefined) {nb_dde++;}
					if(b_vTask_ess && vTask.DFE!=-1 && vTask.DFE!="" && vTask.DFE!=undefined) {nb_dfe++;}
				}
			}
		}
	}
	if(nb_dde+nb_dfe>0 && nb_task>0)
	{
		if(nb_dfe==nb_task)
		{
			if(nb_url>0)
				result="CLOSED";
			else
				result="FINISHED";
		}
		else 
		if(nb_dde>0)
			result="STARTED";
	}
	return result;
}

// US8364 : La fonction retourne une hashtables des attributs du flux2 R_VA
function _psi3_js2_set_attributes_rva(liv_onb,dl_onb) 
{
	var attributes = new hashtable("string");
	var liv_attr = new hashtable("string");
	var l_rva=new vector();
	var v_pln_date=new vector("","");
	
	var vLiv=plc._DEL_PT_DELIVERABLES.get(liv_onb);
	if(vLiv instanceof plc._DEL_PT_DELIVERABLES)
	{
		// V rifier la pr sence de ht des attributs li s au livrable dans la cache :
		liv_attr=plw.gettemporaryobject(vLiv.onb,"R_VA");
		if (liv_attr==undefined)
		{
			liv_attr = new hashtable("string");
			//"testId": "string" - Id de R_VA
			liv_attr.set("testId", vLiv.name);

			// Les champs de la tache essai :
			var number act_onb=vLiv._DEL_AA_N_PROD_ONB;
			var vAct=plc.Task.get(act_onb);
			with(vAct.spj.fromobject())
			{
				// on se base sur le type de livrable car parfois l'act type ne sera pas ESSAI
				for(var vTask in plc.Task where vTask.internal==false && vTask._PSI3_RA_DELIV_TYPE.name=="ESSAI")
				{
					//"targetEndDate": "2019-08-24T14:15:22Z" - Fin Cible de la tache essai
					liv_attr.set("targetEndDate", _psi3_js2_format_date_api(vTask._PSI3_PRT_GP_AA_D_FIN_CIB,"end"));
					
					//"actualStartDate": "2019-08-24T14:15:22Z", - D but effectu  de la tache essai
					liv_attr.set("actualStartDate", _psi3_js2_format_date_api(vTask.DDE,""));

					//"actualEndDate": "2019-08-24T14:15:22Z", - Fin effectu  de la tache essai
					liv_attr.set("actualEndDate", _psi3_js2_format_date_api(vTask.DFE,"end"));

					//"plannedStartDate": "2019-08-24T14:15:22Z", - D but publi  de la tache essai
					liv_attr.set("plannedStartDate", _psi3_js2_format_date_api(vTask.PS,""));

					//"plannedEndDate": "2019-08-24T14:15:22Z", - Fin publi e de la tache essai
					liv_attr.set("plannedEndDate", _psi3_js2_format_date_api(vTask.PF,"end"));

					//"progress": "string", - Avancement physique de la tache de type d'activit  essai
					liv_attr.set("progress", "PRINT_NUMBER".callmacro(vTask.AVANCEMENT_PHYSIQUE,"####"));

					
				}
			}
			//"udpateDate": "2019-08-24T14:15:22Z",
			// la publication n'est pas encore faite donc on prend la date en cours et le user en cours
			var vNow=new date();
			//liv_attr.set("updatedDate", _psi3_js2_format_date_api(vLiv._PSI3_DEL_NF_D_LAST_PUB,""));
			liv_attr.set("updateDate", _psi3_js2_format_date_api(vNow,""));
			//"updatedBy": "string", - IPN du publieur
			//liv_attr.set("updatedBy", _psi3_js_get_del_last_publisher_ipn(vLiv.onb));
			liv_attr.set("updatedBy", context.callstringformula("$CURRENT_USER"));

			// sauvegarder ht des attributs li s au livrable dans la cache :
			liv_attr.storetemporaryobject(vLiv.onb,"R_VA");
		}

	}
	// ht de r sultat :
	attributes=liv_attr;
	
	// Objet validationActivity :
	var vDL=plc._DEL_PT_DELIV_LINKS.get(dl_onb);
	if(vDL instanceof plc._DEL_PT_DELIV_LINKS)
	{
		// V rifier dans le cache :
		var vObjValAct=plw.gettemporaryobject(vDL._PSI3_AA_S_DEM_ID_SOURCE,"VAobject");
		if (vObjValAct==undefined)
		{
			l_rva=_psi3_js2_av_rva_list(vDL._PSI3_AA_S_DEM_ID_SOURCE);
			//plw.alert("l_rva="+l_rva);
			vObjValAct=new hashtable("string");

			//  "activityId": "string", - Id source de la D_VA
			vObjValAct.set("activityId",vDL._PSI3_AA_S_DEM_ID_SOURCE);
			
			//"planningStatus": "NOT STARTED", STARTED, FINISHED, CLOSED
			vObjValAct.set("planningStatus",_psi3_js2_av_pln_status(l_rva));
			
			// Calcule planned dates :
			v_pln_date=_psi3_js2_av_pln_date(l_rva); 

			//"activityPlannedStartDate": "2019-08-24T14:15:22Z", - Date minimum de d but calcul  du sous projet de type SPJESSAI
			vObjValAct.set("activityPlannedStartDate",v_pln_date[0]);

			//"activityPlannedFinishDate": "2019-08-24T14:15:22Z", - Date maximum de fin calcul e du sous projet VA
			vObjValAct.set("activityPlannedFinishDate",v_pln_date[1]);

			//"activityReportFolderURL": "string" - Premier champ New PDM resneign  sur un des R_VA
			var rep_url=vLiv._PSI3_AA_S_NEW_PDM;
			if(rep_url=="")
				rep_url=_psi3_js2_av_rep_url(l_rva);
			vObjValAct.set("activityReportFolderURL",rep_url);
			
			// sauvegarder VA dans la cache :
			vObjValAct.storetemporaryobject(vDL._PSI3_AA_S_DEM_ID_SOURCE,"VAobject");
		} 
		// On ajoute objet VA dans la ht de r sultat :
		attributes.set("validationActivity",vObjValAct);
	}
	return attributes;
}

// US8364 : Export des RVA par API
function psi3_js2_flux2_export_rva(vLiv)
{
	var vEnvoiLiv=plw.gettemporaryobject(vLiv,"EnvoiRVA");
	// on ne fait qu'un envoi par transaction
	if (vEnvoiLiv==undefined)
	{
		var res_api="";
		var vResult=false;
		var vJsonObj=undefined;
		// hashtable pour  viter les doublons
		var vHashCheck=new hashtable();		

		// Pour chaque D_VA li e   R_VA :
		var tablekey_dl = new plw.keyattribute(plc._DEL_PT_DELIV_LINKS,"_DEL_AA_N_DEL_ONB",vLiv.ONB);
		with(tablekey_dl.fromobject())
		{		
			for (var vDL in plc._DEL_PT_DELIV_LINKS where vDL._DEL_AA_N_DEL_ONB==vLiv.ONB)
			{
				var vResultRet = undefined;
				// si pas d j  trait 
				var vDL_onb=vHashCheck.get("PRINT_NUMBER".callmacro(vLiv.onb,"####"));
				if (vDL_onb!=vDL.onb)
				{
					// Construction du vector json :
					//vJsonObj=this._psi3_js2_get_flux2_rva_json(vDL.onb);
					with(plw.no_locking){
						vResultRet=_psi3_js2_set_attributes_rva(vLiv.onb,vDL.onb); // cette fonction doit renvoyer une hashtable
					}
					vJsonObj=rest.json(vResultRet); 			
					
					// Appel de l'API
					var string vReq="sh /$HOME/vcours/bin/gps_api_oneval_new.sh 'TESTS_SCHEDULED_CHANGED' '"+vJsonObj+"'";
					plw.writetolog(vLiv.name+" - "+vDL._PSI3_LIV_AA_S_NOM+" - Appel TESTS_SCHEDULED_CHANGED avec R_VA Json : "+vJsonObj);
					vResult = systemklib.commandoutput(vReq);
					plw.writetolog(this.name+" - "+vDL._PSI3_LIV_AA_S_NOM+" - Retour TESTS_SCHEDULED_CHANGED : "+vResult);

					// Gestion des erreurs ?
					/*if (vResult!=false)
					{
						vResObj=rest.parse(vResult[0]);
						//Si erreur est retourn  par API :
						if(vResObj.get("errors")!=undefined)
						{
							var vErrList=vResObj.get("errors");
							res_api=psi3_js2_flux1_api_err(vErrList);
						} 
					}
					*/
					
					// on stocke les ONB pour ne pas envoyer des doublons
					vHashCheck.set("PRINT_NUMBER".callmacro(vLiv.onb,"####"),"PRINT_NUMBER".callmacro(vDL.onb,"####"));
				}		
			}
		}
		var string vEnvoye="envoye";
		vEnvoye.storetemporaryobject(vLiv,"EnvoiRVA");
	}
	else plw.writetolog(vLiv.name+" deja envoye");
	//return res_api;
} 
// PLWSCRIPT : _PSI3_JS2_IMPORT_DVA
// -------------------------------------
// /!\ Script V2 /!\
// 
// v1.9 2021-09-09 David - v3.11.0_07
// Modification de _psi3_js2_get_dva pour corriger le concat nation de Uceps
//
// v1.8 2021-08-25 David - v3.11.0_06
// Modification de _psi3_js2_get_dva pour ajouter des traces dans les logs sur le fichier d'entr e et modifier le format de ActivitySafetyTechnicalPerimeterUceps
//
// v1.7 2021-08-19 David - v3.11.0_05
// Creation de psi3_js2_remove_ret_ligne et modification de _psi3_js2_get_dva;psi3_ojs_ctrl_maj_d_va_imp pour g rer les retours   la lignes de certains champs (US8493) et pour traiter le non pris en compte si UET pas li    un secteur (US8353/CA8492)
//
// v1.6 2021-08-02 sse - v3.11.0_04 US8472
// Modification _psi3_js2_get_vsn_for_add_ass pour ajouter l'appel de la _psi3_ojs_copy_dva
// 
// v1.5 2021-07-21 David - v3.11.0_04
// Modification de psi3_ojs_ctrl_maj_d_va_imp pour envoyer le notif de non prise en compte
//
// v1.4 2021-07-15 sse - v3.11.0_03
// Ajout _psi3_js2_get_vsn_ctrl_va pour les controle de VA (US8367,8368)
// Ajout _psi3_js2_get_vsn_ctrl_vsn pour les controle de VSN import  (8472)
// Ajout _psi3_js2_get_vsn_for_add_ass : import via api pour ajouter l'association  d'une VSN aux D_VA d'une VA (US8367,8472)
// Ajout _psi3_js2_get_vsn_for_delete_ass : import via api pour ajouter l'dissociation  d'une VSN aux D_VA d'une VA (US8368)
// 
// v1.3 2021-06-21 David - v3.11.0_01
// Modification psi3_ojs_ctrl_maj_d_va_imp et _psi3_js2_get_dva pour ajouter ds contr les 
//
// v1.2 2021-06-14 David - v3.11.0_00
// Creation de _psi3_js2_get_dva, modification de psi3_ojs_ctrl_maj_d_va_imp pour g rer les import DVA par api
//
// v1.1 2021-05-25 David - v3.10.0_07
// Modification de psi3_ojs_ctrl_maj_d_va_imp pour le message du KO et supprimer tous les espaces du id vsn
//
// v1.0 2021-04-19 David - v3.10.0_06
// Creation
// -------------------------------------
namespace _import_dva;

// fonction permettant de r cup rer le nom d'un fichier   partir de son chemin
function psi3_ojs_getfilename(vPath)
{
	var vResult = vPath;
	if (vPath instanceof string || vPath instanceof pathname)
	{
		var number vPos = 0;
		// on cherche le dernier s parateur
		vPos = vPath.position("\\",true);
		if ( !(vPos instanceof Number)) vPos = vPath.position("/",true);
		// on r cup re la fin
		if (vPos instanceof Number)
		{
			vResult= vPath.substring(vPos+1,vPath.length);
		}
	}
	return vResult;
}

// correspondance colonne / attr pour l'import csv et api
function psi3_js2_set_import_dva_attr_ht() 
{
	var dva_attr_ht = new hashtable("string");
	dva_attr_ht.set("0","_PSI3_TT_DEM_SOURCE"); //source
	dva_attr_ht.set("1","_PSI3_TT_S_DEM_ID_SOURCE"); //activity_code_id
	dva_attr_ht.set("2","_PSI3_TT_S_NO_DEM_ESS"); //No demande d'essai
	dva_attr_ht.set("3","_PSI3_TT_S_CODE_ACT_VALID"); //Validation Activity Code
	dva_attr_ht.set("4","_PSI3_TT_S_DESC_FR"); //Validation_activity_name_fr
	dva_attr_ht.set("5","_PSI3_TT_S_DESC_EN"); //Validation_activity_name_en
	dva_attr_ht.set("6","_PSI3_TT_STATUT_SOURCE"); //Activity state
	dva_attr_ht.set("7","_PSI3_LIV_TT_TYPVAG"); //activity_batch_type
	dva_attr_ht.set("8","_PSI3_TT_S_NO_PROC_SRC"); //Procedure or method
	dva_attr_ht.set("9","_PSI3_TT_S_CODE_OFFRE"); //Code offre
	dva_attr_ht.set("10","_PSI3_LIV_TT_MIL"); //Milestone
	dva_attr_ht.set("11","_PSI3_TT_N_NB_SEM_AVANT"); //Nb weeks before
	dva_attr_ht.set("12","_PSI3_LIV_TT_D_FIN_CIB"); //end_stop_date
	dva_attr_ht.set("13","_PSI3_TT_D_DATE_MADC_SV"); //Date MADC SV (VUCK)
	dva_attr_ht.set("14","_PSI3_TT_S_OVAL_LINK_VA"); //validation_activity_details
	dva_attr_ht.set("15","_PSI3_TT_S_DOM_REGLEM"); //Regulatory subjects / Domaine r glementaire
	dva_attr_ht.set("16","_PSI3_TT_S_PERIM_SECUR"); //Safety perimeter & EICps/UCEps
	dva_attr_ht.set("17","_PSI3_TT_S_NO_DEROG_PROC"); //No d rogation   la proc dure d'essai
	dva_attr_ht.set("18","_PSI3_TT_S_SV_CONFIDENT"); //Confidentialit  du SV
	dva_attr_ht.set("19","_PSI3_TT_S_SIGLE_CSR"); //Sigle CSR
	dva_attr_ht.set("20","_PSI3_TT_S_ID_LGN_VAL"); //line_code_id**
	dva_attr_ht.set("21","_PSI3_TT_S_CODE_LGN_VAL"); //Validation Line Code**
	dva_attr_ht.set("22","_PSI3_TT_S_NOM_LGN_VAL"); //Validation Line Name**
	dva_attr_ht.set("23","_PSI3_TT_S_CDC"); //Design Specification reference
	dva_attr_ht.set("24","_PSI3_TT_S_CODE_PLN_VALID"); //Validation_plan
	dva_attr_ht.set("25","_PSI3_TT_S_LIB_PLN_VALID"); //Name
	dva_attr_ht.set("26","_PSI3_TT_S_DEM_DESC_DEM"); //Direction
	dva_attr_ht.set("27","_PSI3_TT_S_TYPE_PLAN_VAL"); //Plan Type
	dva_attr_ht.set("28","_PSI3_TT_DEM_ID_PRJ_VALID"); //ID projet de validation
	dva_attr_ht.set("29","_PSI3_TT_DEM_PRJ_VALID"); //project_code
	dva_attr_ht.set("30","_PSI3_LIV_TT_FAMILLE"); //code
	dva_attr_ht.set("31","_PSI3_TT_S_DEM_SRV_RSP_EX"); //Execution service or UET
	dva_attr_ht.set("32","_PSI3_TT_S_IPN_REX_OVAL"); //execution_responsible id
	dva_attr_ht.set("33","_PSI3_TT_S_REX_OVAL"); //execution_responsible_name
	dva_attr_ht.set("34","_PSI3_TT_S_IPN_RSP_EXE_D"); //Delegate IPN Execution Responsible
	dva_attr_ht.set("35","_PSI3_TT_S_RESP_EXE_DEL"); //Delegate Execution Responsible
	dva_attr_ht.set("36","_PSI3_TT_S_SUET_RESP_VAL"); //Validation Responsible Service or UET
	dva_attr_ht.set("37","_PSI3_TT_S_IPN_RESP_VAL"); //validation responsible id
	dva_attr_ht.set("38","_PSI3_TT_S_RESP_VAL"); //Validation Responsible Name
	dva_attr_ht.set("39","_PSI3_TT_S_IPN_RSP_VAL_D"); //Delegate IPN Validation Responsible
	dva_attr_ht.set("40","_PSI3_TT_S_RESP_VAL_DELEG"); //Delegate Validation Responsible
	dva_attr_ht.set("41","_PSI3_TT_S_ID_VSN"); //pro_vsn_id
	dva_attr_ht.set("42","_PSI3_TT_S_REF_SV"); //SV Code
	return dva_attr_ht;
}

// US2434 : fonction g rant l'import des d_va via csv
function psi3_js2_import_csv_dva()
{
	plw.writetolog(" --- IMPORT DVA --- Debut de l'import des D_VA en CSV --- ");
	var number NbrTotal=0;
	var number NbrKO=0;
	var string MsgKO="";
	var string vKOext="_KO.csv";
	var string vTRAIText="_TRAITE_GPS.csv";
	var vRepImport=new pathname(context._PSI3_AA_S_OVAL_IMPORT_FOLDER+"/");
	var boolean vError=false;
	var string CR_chr = context.callstringformula("GET_CHAR(13)");
	var string LF_chr = context.callstringformula("GET_CHAR(10)");
	if (vRepImport.probefile()!=false)
	{
		var vVectFile=new vector();
		
		// liste des champs r f rentiels   v rifier 
		var vector vFieldRA=new vector("_PSI3_RA_DEM_SOURCE","_PSI3_RA_STATUT_SOURCE","_PSI3_LIV_RA_TYPVAG","_PSI3_LIV_RA_MIL","_PSI3_LIV_RA_FAMILLE");
								
		// hashtable des champs   v rif
		var vHash=new hashtable("STRING");
		vHash=plw._psi3_js_hashtable_regle_attribut("_DEL_PT_DELIV_LINKS","psi3_js2_import_csv_dva");
		
		// recup des fichiers : les csv hors KO et TRAITE_GPS
		for (var vFileCsv in vRepImport where vFileCsv.tostring().search(".csv")!=false && vFileCsv.tostring().search(vKOext)==false && vFileCsv.tostring().search(vTRAIText)==false)
			vVectFile.push(vFileCsv);
		
		plw.writetolog(" --- IMPORT DVA --- Nombre de fichiers a traiter : "+vVectFile.length);
		
		// Hashtables de correspondances des attributs flux1 (json - TT)
		var vDVA_attr_ht = new hashtable("string");
		vDVA_attr_ht=psi3_js2_set_import_dva_attr_ht();
		
		for (var vFile in vVectFile)
		{
			var string vFileName=psi3_ojs_getfilename(vFile.tostring());
			plw.writetolog("  --- IMPORT DVA --- 01. Vider la table temporaire - ");
			for (var vTemp in plc._PSI3_TT_DVA_IMPORT_BATCH)
				with(plw.no_locking) { vTemp.delete(); }
			
			plw.writetolog(" --- IMPORT DVA --- 02. Import du fichier : "+vFile.tostring());
			var InFile = new plw.FileInputStream(vFile);
			var number vTotal=0;
			var string vFirstLine="";
			try{
			for (var line = InFile.readline(); line != undefined; line = InFile.readline())
			{
				vTotal++;
				// recup ligne en tete 
				if (vTotal==1) vFirstLine=line.rtrim(CR_chr).rtrim(LF_chr);
				else if (vTotal>1 && line.search(";")!=false)
				{	
					var el=line.split(";");
					var vArg=new vector();
					for (var i=0;i<=42;i++)
					{
						var vVal="";
						//nombres
						if (i==11) vVal=el[i].parsenumber(); 
						//date : finalement ok traite comme il faut
						//else if ((i==12 || i==13) && el[i]!="") vVal=el[i].parsedate("JJ/MM/AAAA");
						else vVal=el[i];
						var vnum="PRINT_NUMBER".callmacro(i,"####");
						vArg.push(vDVA_attr_ht.get(vnum));
						vArg.push(vVal);
					}
					var vNewTemp=plc._PSI3_TT_DVA_IMPORT_BATCH.makeopx2objectwithplist(vArg);
				}
			}}
			catch(error err)
			{
				plw.writetolog(" --- IMPORT DVA --- Erreur lors de l'import DVA");
				plw.writetolog(" --- IMPORT DVA --- code erreur : "+err);
				vError=true;
			}
			InFile.close();
			// on renomme le fichier
			var string vNewName=vFileName.Replaceregexp(".csv",vTRAIText);
			vFile.RenameFile(vNewName);
			if (vError!=true)
			{
				// fichier KO
				var string vFileNameKO=vFileName.Replaceregexp(".csv",vKOext);
				var vPath=new pathname(vRepImport.tostring()+vFileNameKO);
				var vFileOutput = new plw.fileOutputSTream(vPath,"overwrite");
				plw.writetolog(" --- IMPORT DVA --- 03. Traitement de la table temp - ");
				vFileOutput.writeln(vFirstLine+";ERROR");
				try{
				for (var vObj in plc._PSI3_TT_DVA_IMPORT_BATCH order by ['ID'])
				{
					var string vLine="";
					for (var i=0;i<=42;i++)
					{
						var vnum="PRINT_NUMBER".callmacro(i,"####");
						var vValT=vObj.get(vDVA_attr_ht.get(vnum));
						var vValExp="";
						//nombres
						if (i==11 && vValT instanceof number) vValExp=vValT.tostring("####"); 
						//date
						else if (i==12 && vValT!=undefined && vValT!="" && vValT instanceof date) vValExp="PRINT_END_DATE".callmacro(vValT,"JJ/MM/AAAA");
						else if (i==13 && vValT!=undefined && vValT!="" && vValT instanceof date) vValExp="PRINT_DATE".callmacro(vValT,"JJ/MM/AAAA");
						else vValExp=(vValT!=undefined)? vValT : "";
						vLine=vLine+vValExp+";";
					}
					MsgKO="";
					MsgKo=psi3_ojs_ctrl_maj_d_va_imp(vObj,vFieldRA,vHash,vDVA_attr_ht);
					vLine+=vObj._PSI3_TT_ERROR;	
					vFileOutput.writeln(vLine);
					NbrTotal++;
					if(MsgKO!="")	NbrKO++;
				}}
				catch (error err)
				{
					plw.writetolog(" --- IMPORT DVA --- Erreur lors du traitement des DVA");
					plw.writetolog(" --- IMPORT DVA --- code erreur : "+err);
					vError=true;
				}
				vFileOutput.close();
			}
		}
		plw.writetolog(" --- IMPORT DVA --- "+NbrTotal + " D_VA traitees; " + NbrKO + " non importes");
		vHash.clear();
		vDVA_attr_ht.clear();
	}
	else plw.writetolog(" --- IMPORT DVA --- le repertoire "+context._PSI3_AA_S_OVAL_IMPORT_FOLDER+" n'existe pas!");
	plw.writetolog(" --- IMPORT DVA ---  Fin de l'import des D_VA en csv");
}
psi3_js2_import_csv_dva.exportfunction();

// fonction permettant de remplacer les retour   la ligne par des espaces
function psi3_js2_remove_ret_ligne(vStr)
{
	var vResult=vStr;
	var string CR_chr = context.callstringformula("GET_CHAR(13)");
	var string LF_chr = context.callstringformula("GET_CHAR(10)");
	if (vStr!=undefined && vStr!="")
	{
		vResult=vResult.replaceregexp(CR_chr," ");
		vResult=vResult.replaceregexp(LF_chr," ");
	}
	return vResult;
}

// US2434 : fonction g rant l'import des d_va via api
function _psi3_js2_get_dva(vEntry)
{
	plw.writetolog(" --- IMPORT DVA --- Debut de l'import des D_VA en API --- ");
	var number NbrTotal=0;
	var number NbrKO=0;
	var string MsgKO="";
	var string CR_chr = context.callstringformula("GET_CHAR(13)");
	var string LF_chr = context.callstringformula("GET_CHAR(10)");
	var vNewTemp=undefined;
	// liste des champs r f rentiels   v rifier 
	var vector vFieldRA=new vector("_PSI3_RA_DEM_SOURCE","_PSI3_RA_STATUT_SOURCE","_PSI3_LIV_RA_TYPVAG","_PSI3_LIV_RA_MIL","_PSI3_LIV_RA_FAMILLE");
							
	// hashtable des champs   v rif
	var vHash=new hashtable("STRING");
	vHash=plw._psi3_js_hashtable_regle_attribut("_DEL_PT_DELIV_LINKS","psi3_js2_import_csv_dva");
	
	// Hashtables de correspondances des attributs flux1 (json - TT)
	var vDVA_attr_ht = new hashtable("string");
	vDVA_attr_ht=psi3_js2_set_import_dva_attr_ht();
		
	plw.writetolog(" --- IMPORT DVA --- 01. Import API : "+vEntry);
	var vVProj=vEntry.validationProject;
	var vVAct=vEntry.validationActivity;
	var vVPlan=vEntry.validationPlan;
	var vVLine=vEntry.validationLines;
	plw.writetolog(" --- IMPORT DVA --- detail entry : ");
	plw.writetolog(" --- IMPORT DVA ----- validationActivity : "+vVAct);
	plw.writetolog(" --- IMPORT DVA ----- validationProject : "+vVProj);
	plw.writetolog(" --- IMPORT DVA ----- validationPlan : "+vVPlan);
	plw.writetolog(" --- IMPORT DVA ----- validationLines : "+vVLine);
	if (vVProj!=undefined && vVAct!=undefined && vVAct.activityId!=undefined && vVAct.activityId!="")
	{
		// traitement des listes
		var string vURL=(vVAct._links!=undefined && vVAct._links.details!=undefined && vVAct._links.details.url!=undefined) ? vVAct._links.details.url : "";
		var string vDomReg="";
		if (vVAct.existingRegulatorySubjects!=undefined)
		{
			for (var vDom in vVAct.existingRegulatorySubjects)
				vDomReg=vDomReg+vDom+",";
			vDomReg=vDomReg.rtrim(",");
		}
		var string vTechParams="";
		if (vVAct.existingSafetyTechnicalPerimetersUceps!=undefined)
		{
			for (var vTP in vVAct.existingSafetyTechnicalPerimetersUceps)
			{
				var string vToAdd1=(vTP.technicalPerimeter!=undefined) ? vTP.technicalPerimeter+"," : "";
				var string vToAdd2="";
				if (vTP.eicpsUceps!=undefined)
				{
					for (var vUcep in vTP.eicpsUceps)
					{
						if (vUcep!=undefined) vToAdd2=vToAdd2+vUcep+",";
					}
				}
				vTechParams=vTechParams+vToAdd1+vToAdd2;
			}
			vTechParams=vTechParams.rtrim(",");
		}
		var string vVSNids="";
		if (vVAct.VSNs!=undefined)
		{
			for (var vVSNi in vVAct.VSNs)
				vVSNids=vVSNids+vVSNi+",";
			vVSNids=vVSNids.rtrim(",");
		}
		
		// d calage de 1j pour date de fin
		var vDateDead=(vVAct.deadline!=undefined && vVAct.deadline!=undefined!="") ? "PERIOD_START".callmacro("DATE".callmacro("NTH".callmacro(vVAct.deadline,0,"T"),"AAAA-MM-JJ"),"Day",1) : -1;
		
		// verif si champs def
		var vCode=(vVAct.code!=undefined) ? vVAct.code : ""; 						var vRespUET=(vVAct.responsibleUET!=undefined) ? vVAct.responsibleUET : "";
		var vBatchT=(vVAct.batchType!=undefined) ? vVAct.batchType : ""; 			var vProc=(vVAct.procedure!=undefined) ? psi3_js2_remove_ret_ligne(vVAct.procedure) : "";
		var vSupplyCode=(vVProj.supplyCode!=undefined) ? vVProj.supplyCode : ""; 	var vMilestone=(vVAct.milestone!=undefined) ? vVAct.milestone : "";
		var vProjId=(vVProj.id!=undefined) ? vVProj.id : "";						var vNbWkMil=(vVAct.nbWeeksBeforeMilestone!=undefined) ? vVAct.nbWeeksBeforeMilestone : 0;
		var vProjCode=(vVProj.code!=undefined) ? vVProj.code : ""; 					var vFamilyCode=(vVProj.familyCode!=undefined) ? vVProj.familyCode : "";
		var vExeUET=(vVAct.executionUET!=undefined) ? vVAct.executionUET : ""; 		var vExeResp=(vVAct.executionResponsible!=undefined) ? vVAct.executionResponsible : "";
		var vState=(vVAct.state!=undefined) ? vVAct.state : "";						var vDelegExeResp=(vVAct.delegateExecutionResponsible!=undefined) ? vVAct.delegateExecutionResponsible : ""; 
		var vRespon=(vVAct.responsible!=undefined) ? vVAct.responsible : ""; 		var vDelegResp=(vVAct.delegateResponsible!=undefined) ? vVAct.delegateResponsible : ""; 
		
		var vArg=new vector("_PSI3_TT_DEM_SOURCE","OneVAL","_PSI3_TT_S_DEM_ID_SOURCE",vVAct.activityId,"_PSI3_TT_S_CODE_ACT_VALID",vCode,"_PSI3_TT_STATUT_SOURCE",vState,"_PSI3_LIV_TT_TYPVAG",vBatchT,"_PSI3_TT_S_NO_PROC_SRC",vProc,"_PSI3_TT_S_CODE_OFFRE",vSupplyCode,"_PSI3_LIV_TT_MIL",vMilestone,"_PSI3_TT_N_NB_SEM_AVANT",vNbWkMil,"_PSI3_LIV_TT_D_FIN_CIB",vDateDead,"_PSI3_TT_S_OVAL_LINK_VA",vURL,"_PSI3_TT_S_DOM_REGLEM",vDomReg,"_PSI3_TT_S_PERIM_SECUR",vTechParams,"_PSI3_TT_DEM_ID_PRJ_VALID",vProjId,"_PSI3_TT_DEM_PRJ_VALID",vProjCode,"_PSI3_LIV_TT_FAMILLE",vFamilyCode,"_PSI3_TT_S_DEM_SRV_RSP_EX",vExeUET,"_PSI3_TT_S_IPN_REX_OVAL",vExeResp,"_PSI3_TT_S_IPN_RSP_EXE_D",vDelegExeResp,"_PSI3_TT_S_SUET_RESP_VAL",vRespUET,"_PSI3_TT_S_IPN_RESP_VAL",vRespon,"_PSI3_TT_S_IPN_RSP_VAL_D",vDelegResp,"_PSI3_TT_S_ID_VSN",vVSNids);
		// gestion objet name
		if (vVAct.name!=undefined)
		{
			if (vVAct.name.nameFr!=undefined){ vArg.push("_PSI3_TT_S_DESC_FR");vArg.push(psi3_js2_remove_ret_ligne(vVAct.name.nameFr));}
			if (vVAct.name.nameEn!=undefined){ vArg.push("_PSI3_TT_S_DESC_EN");vArg.push(psi3_js2_remove_ret_ligne(vVAct.name.nameEn));}
		}
		// gestion objet plan de validation
		if (vVPlan!=undefined)
		{
			if (vVPlan.code!=undefined){ vArg.push("_PSI3_TT_S_CODE_PLN_VALID");vArg.push(vVPlan.code);}
			if (vVPlan.name!=undefined){ vArg.push("_PSI3_TT_S_LIB_PLN_VALID");vArg.push(psi3_js2_remove_ret_ligne(vVPlan.name));}
			if (vVPlan.direction!=undefined){ vArg.push("_PSI3_TT_S_DEM_DESC_DEM");vArg.push(vVPlan.direction);}
			if (vVPlan.type!=undefined){ vArg.push("_PSI3_TT_S_TYPE_PLAN_VAL");vArg.push(vVPlan.type);}
		}
		// gestion listes des lignes de val : on concat ne avec | en s parateur
		if (vVLine!=undefined)
		{
			var string vLineID="";
			var string vLineCode="";
			var string vLineName="";
			var string vLineRef="";
			var string vLineCSR="";
			for (var vLi in vVLine)
			{
				if (vLi.id!=undefined && vLi.id!="")
				{
					vLineID=vLineID+vLi.id+"|";
					vLineCode=vLineCode+vLi.code+"|";
					vLineName=vLineName+vLi.name+"|";
					vLineRef=vLineRef+vLi.designSpecificationReference+"|";
					vLineCSR=vLineCSR+vLi.requirementCharacteristics+"|";
				}
			}
			vArg.push("_PSI3_TT_S_ID_LGN_VAL");vArg.push(vLineID);
			vArg.push("_PSI3_TT_S_CODE_LGN_VAL");vArg.push(vLineCode);
			vArg.push("_PSI3_TT_S_NOM_LGN_VAL");vArg.push(psi3_js2_remove_ret_ligne(vLineName));
			vArg.push("_PSI3_TT_S_CDC");vArg.push(psi3_js2_remove_ret_ligne(vLineRef));
			vArg.push("_PSI3_TT_S_SIGLE_CSR");vArg.push(vLineCSR);
		}
		
		vNewTemp=plc._PSI3_TT_DVA_IMPORT_BATCH.makeopx2objectwithplist(vArg);
	}
	else 
	{
		plw.writetolog(" --- IMPORT DVA --- Erreur : format d'entree incorrect");
	}

	if (vNewTemp!=undefined)
	{
		plw.writetolog(" --- IMPORT DVA --- 02. Traitement de la table temp - ");
		try{
			MsgKO="";
			MsgKo=psi3_ojs_ctrl_maj_d_va_imp(vNewTemp,vFieldRA,vHash,vDVA_attr_ht);
			if (MsgKO!="")
			{
				if (MsgKO!="non pris en compte")
				{
					plw.writetolog(" --- IMPORT DVA --- Erreur : "+MsgKO);
				}
				else 
				{
					plw.writetolog(" --- IMPORT DVA --- "+MsgKO);
					// on envoie un notif de non prise en compte
					try{
						_oneval.psi3_js2_api_pec_dva(vNewTemp._PSI3_TT_S_DEM_ID_SOURCE,false);
					}
					catch (error err)
					{
						plw.writetolog(" -- Erreur lors de l'envoi d'une non prise en compte pour "+vNewTemp._PSI3_TT_S_DEM_ID_SOURCE);
						plw.writetolog(" -- code erreur : "+err);
					}
				}
			}
		}
		catch (error err)
		{
			plw.writetolog(" --- IMPORT DVA --- Erreur lors du traitement de la DVA");
			plw.writetolog(" --- IMPORT DVA --- code erreur : "+err);
		}
	}
	vHash.clear();
	vDVA_attr_ht.clear();
	plw.writetolog(" --- IMPORT DVA ---  Fin de l'import des D_VA en api");
	return 200;
}
//definition de l'api
plw.writetolog("Definition import DVA GPS: _psi3_js2_get_dva");
rest.defineapi("_psi3_js2_get_dva",false,_psi3_js2_get_dva);


// Ctrl des D_VA import es et maj des D_VA
function psi3_ojs_ctrl_maj_d_va_imp(vObj,vFieldRA,vHash,vDVA_attr_ht) 
{
	var string MsgKO="";
	var boolean vTest=true;
	var vLivOK=undefined;
	var d_today=new date();
	var string vMsgNPEC="non pris en compte";
	//var string LF_chr = context.callstringformula("GET_CHAR(10)");
	
	// controle des champs obligatoire
	if (vObj._PSI3_TT_S_DEM_ID_SOURCE==undefined || vObj._PSI3_TT_S_DEM_ID_SOURCE=="")
	{
		MsgKO="Le champ ID source est obligatoire!";
	}
	else
	{
		var vListRATT=new vector();
		// verif des champs relation 
		for (var vField in vFieldRA)
		{
			// nom du champ dans la table temp (on remplace les RA par un TT)
			var vFieldTT=vField.replaceregexp("_RA_","_TT_");
			vListRATT.push(vFieldTT);
			// r cup du champ cl  sur table si on passe par un code interface
			var vCodeInter = "";
			// exemple code interface Cote de direction
			//if (vField=="_PSI3_RA_DEM_DR_COTE") vCodeInter="_PSI3_AA_S_CODE_INTERFACE";
			// Controle du champ
			var vVectR=plw._psi3_js_test_regle_attribut(vHash,"_DEL_PT_DELIV_LINKS",vField,vObj.get(vFieldTT),vCodeInter);
			if (vVectR[0]!="OK")
			{
				MsgKO=MsgKO+vVectR[1]+"/";
				vVectR.push(undefined);
			}
			else 
			{
				if (vVectR[1]!="" && vVectR[1]!= undefined) 
					vObj.set(vFieldTT,vVectR[1].printattribute());
			}
		}
		MsgKO=MsgKO.rtrim("/");
		// si OK, on cr e/modif l'objet
		if (MsgKO=="")
		{
			// remplacement des caract res dans les champs de TT pour  viter la cr ation des traces
			// enl ver CR dans les bloc-notes
			//var vBlocnotes=new vector("_PSI3_TT_S_DEM_ECART_DT", "_PSI3_TT_S_DEM_TYP_VALID","_PSI3_TT_S_DEM_CARACT_IMP","_PSI3_LIV_TT_S_RMQ","_PSI3_TT_S_DEM_RISK_LEVER");
			//plw._psi3_ojs_vsn_imp_set_text_fields(vObj,vBlocnotes,"","");
			
			// remplacer les LF par un espace pour les champs cible de type chaine :
			//var vChaines=new vector("_PSI3_TT_S_DEM_CLIENT","_PSI3_TT_S_OPT_OBLIG","_PSI3_TT_S_DEM_OPT_INTERD","_PSI3_TT_S_DEM_LIEU_LIV","_PSI3_TT_S_DEM_DESC_DEG");;
			//plw._psi3_ojs_vsn_imp_set_text_only_fields(vObj,vChaines,LF_chr," ");
							
			// Vecteur sp cifique cr e 
			var vArgCrea=new vector("FILE","_PSI3_CF_DATA","_PSI3_AA_S_DEM_ID_SOURCE",vObj._PSI3_TT_S_DEM_ID_SOURCE,"_PSI3_RA_DELIV_TYPE","VA","_PSI3_LIV_AA_S_NOM","","_PSI3_LIV_AA_B_NEW_VERS",true,"_PSI3_LIV_AA_D_DATE_CREA",d_today);
			var vArg=new vector();
			var vArgAVLVCrea=new vector("FILE","_PSI3_CF_DATA","_PSI3_AA_S_ID_ACT_VAL",vObj._PSI3_TT_S_DEM_ID_SOURCE);
			var vArgAVLV=new vector();
			var vListLigneVal=new hashtable("STRING");
			var number vNbLigneVal=0;
			var boolean vAVLVToCreate=false;
			var string vSource="";
			var string vDesc="";
			// Vecteur de crea/modif 
			for (var i=0;i<=42;i++)
			{
				var string vnum="PRINT_NUMBER".callmacro(i,"####");
				var string vFieldName=vDVA_attr_ht.get(vnum);
				// desc fr
				if (i==4)
				{
					vDesc="{/F"+vObj.get(vFieldName);
				}
				// desc en 
				else if (i==5)
				{
					vDesc=vDesc+"/E"+vObj.get(vFieldName)+"}";
				}
				// relation activite ligne de val et CDC /sigle CSR RPIF sur la demande sinon table Activit  de validation / ligne de validation
				else if (i==20 || i==21 || i==22 || ((i==23 || i==19) && vSource.touppercase()=="ONEVAL"))
				{
					var string vFieldNameAVLV=(vListRATT.position(vFieldName)!=undefined) ? vFieldName.replaceregexp("_TT_","_RA_") : vFieldName.replaceregexp("_TT_","_AA_");
					// CDC
					if (i==23) {vFieldNameAVLV="_PSI3_AA_S_CHR_CHARGE";}
					var vFieldValue=vObj.get(vFieldName);
					// prendre en compte que si id ligne val non vide
					if (i==20 && vFieldValue!="") 
					{
						vAVLVToCreate=true;
						// on retire le dernier s parateur
						vFieldValue=vFieldValue.rtrim("|");
						var vDecoup=vFieldValue.split("|");
						vNbLigneVal=vDecoup.length;
					}
					// ion ajoute le 19e car on n'a pas verif le 20
					if (vAVLVToCreate==true || i==19)
					{
						vListLigneVal.set(vFieldNameAVLV,vFieldValue);
					}
				}
				else
				{
					var string vFieldNameDVA=(vListRATT.position(vFieldName)!=undefined) ? vFieldName.replaceregexp("_TT_","_RA_") : vFieldName.replaceregexp("_TT_","_AA_");
					// retirer espace de id vsn
					var vFieldValue=(i==41) ? vObj.get(vFieldName).Replaceregexp(" ","") : vObj.get(vFieldName);
					// on recup la source
					if (i==0) vSource=vFieldValue;
					vArg.push(vFieldNameDVA);
					vArg.push(vFieldValue);
					// RPIF et pas PI 
					if (i==28 && vSource.touppercase()=="RPIF")
					{
						var vIDprjCodeVal=vObj._PSI3_TT_DEM_ID_PRJ_VALID;
						var vOKIdProj=false;
						if (vIDprjCodeVal!="")
						{
							var vKeyP=new plw.keyattribute(plc.ordo_project,"_PSI3_AA_S_SPR_DEF_CODE",vIDprjCodeVal);
							with(vKeyP.fromObject()) 
							{
								for (var vProj in plc.ordo_project where vProj._PSI3_AA_S_SPR_DEF_CODE==vIDprjCodeVal)
								{
									vOKIdProj=true;
									break;
								}
							}	
						}
						if (vOKIdProj!=true) 
						{
							MsgKO="ID code projet validation "+vIDprjCodeVal+" non trouv ";
							break;
						}
					}
					//code offre
					else if (i==9 && vFieldValue!="")
					{
						var vOffre=plc.ordo_project.get(vFieldValue);
						if ( !(vOffre instanceof plc.ordo_project) )
						{
							MsgKO="Code offre "+vFieldValue+" non trouv ";
							break;
						}
					}
					// cas Service ou UET du responsable d'ex cution doit remplir org fourn
					else if (i==31)
					{
						var vResp=plc.obsnode.get(vFieldValue);
						if(vFieldValue!="" && !(vResp instanceof plc.obsnode) )
						{
							var vKeyR=new plw.keyattribute(plc.obsnode,"_PSI3_AA_S_CODE_INTER_SOU",vFieldValue);
							with(vKeyR.fromObject()) 
							{
								for (var vResp2 in plc.obsnode where vResp2._PSI3_AA_S_CODE_INTER_SOU==vFieldValue)
									vResp=vResp2;
							}
						}
						// si trouv  avec nom ou id source
						if (vResp instanceof plc.obsnode)
						{
							vArg.push("_PSI3_LIV_RA_ORG_FOURN");
							vArg.push(vResp);
							//dans le cas de Oneval on regarde aussi si l'UET est li    un secteur
							if (vSource.touppercase()=="ONEVAL")
							{
								var boolean vFind=false;
								// on regarde uniquement les secteurs (niveau 3) sous PERIMETRE dans la table des profils
								for (var vProf in vResp.get("r._PSI3_RA_PERSONAS_RESP._PSI3_PT_PERSONAS") where vProf.callbooleanformula("FROM(\"PERIMETRE\") AND LEVEL=3")==true)
								{
									vFind=true;
									break;
								}
								if (vFind!=true) MsgKO=vMsgNPEC;
							}
						}
						else 
						{
							// pour oneval on prend pas en compte la ligne mais on ne trace rien dans les logs
							if (vSource.touppercase()!="ONEVAL")
							{
								MsgKO="Service ou UET du responsable d'ex cution non reconnu :"+vFieldValue;
								break;
							}
							else 
							{
								MsgKO=vMsgNPEC;	
							}
						}
					}
				}
			}
			// si pas de message KO, on cr e ou maj, si non pris en compte on maj uiquement
			if (MsgKO=="" || MsgKO==vMsgNPEC)
			{
				// v rif si Id source existe
				var boolean vExist=false;
				var vListDliv=new vector();
				var vObjAffchKO=(vSource.touppercase()=="RPIF") ? vObj._PSI3_TT_S_NO_DEM_ESS : vObj._PSI3_TT_S_CODE_ACT_VALID ;
				var vKey=new plw.keyattribute(plc._DEL_PT_DELIV_LINKS,"_PSI3_AA_S_DEM_ID_SOURCE",vObj._PSI3_TT_S_DEM_ID_SOURCE);
				with(vKey.fromObject()) 
				{
					for (var vLiv in plc._DEL_PT_DELIV_LINKS where vLiv._PSI3_AA_S_DEM_ID_SOURCE==vObj._PSI3_TT_S_DEM_ID_SOURCE)
					{
						plw.writetolog(" --- IMPORT DVA --- MODIF DVA : "+ vObj._PSI3_TT_S_DEM_ID_SOURCE+" - "+vLiv._PSI3_LIV_AA_S_NOM);
						with(plw.no_locking) {vTest=vLiv.modifywithplist(vArg);}
						if(vTest==false) {
							MsgKO="Modification de la demande " + vObjAffchKO+ " a  chou e";
						}
						vExist=true;
						vLivOK=vLiv;
						vListDliv.push(vLiv);
					}
				}
				if (vExist==false)
				{
					vTest=false;
					// on ne cr e pas dans le cas non pris en compte
					if (MsgKO=="") 
					{
						var vector vArgNew=vArgCrea+vArg;
						plw.writetolog(" --- IMPORT DVA --- CREATION DVA : " + vObj._PSI3_TT_S_DEM_ID_SOURCE);
						with(plw.no_locking) {vLivOK=plc._DEL_PT_DELIV_LINKS.makeopx2objectwithplist(vArgNew);}
						if (vLivOK!=undefined && vLivOK instanceof plc._DEL_PT_DELIV_LINKS) {
							vListDliv.push(vLivOK);
							vTest=true;
						} else 	{
							MsgKO="Cr ation de la demande " + vObjAffchKO + " a  chou e";
						}
					}
				}
				if ((MsgKO=="" || MsgKO==vMsgNPEC) && vListDliv.length>0) 
				{
					for (var vDlivIn in vListDliv where vDlivIn instanceof plc._DEL_PT_DELIV_LINKS)
					{
						// Pour  viter declencher l'alerte _PSI3_LIV_DL_AL_MAJ_DESC pour le Descriptif
						with(plw.no_alerts) {vDlivIn.set("_PSI3_LIV_AA_S_DESC",vDesc);}
					}
					// ajout ligne act val / ligne val 
					if (vAVLVToCreate==true)
					{
						for (var i=0;i<vNbLigneVal;i++)
						{
							vArgAVLV=new vector();
							var vIDLigneVal="";
							// on parcours le vete
							for (var vLigne in vListLigneVal)
							{
								vArgAVLV.push(vLigne);
								var vDecoup=vListLigneVal.get(vLigne).split("|");
								vArgAVLV.push(vDecoup[i]);					
								if (vLigne=="_PSI3_AA_S_ID_LGN_VAL") vIDLigneVal=vDecoup[i];
							}
							var vExistVAVL=false;
							var vKeyarg=new vector("_PSI3_AA_S_ID_ACT_VAL","_PSI3_AA_S_ID_LGN_VAL");
							var vKeyVal=new vector(vObj._PSI3_TT_S_DEM_ID_SOURCE,vIDLigneVal);
							var vKeyAVLV=new plw.keyattribute(plc._PSI3_PT_LINK_ACT_LGN_VAL,vKeyarg,vKeyVal);
							with(vKeyAVLV.fromObject())
							{
								for (var vAVLV in plc._PSI3_PT_LINK_ACT_LGN_VAL where vIDLigneVal!="" && vAVLV._PSI3_AA_S_ID_ACT_VAL==vObj._PSI3_TT_S_DEM_ID_SOURCE && vAVLV._PSI3_AA_S_ID_LGN_VAL==vIDLigneVal)
								{
									plw.writetolog(" --- IMPORT DVA ----- MODIF Act Val / Ligne Val : "+ vObj._PSI3_TT_S_DEM_ID_SOURCE + "/"+ vIDLigneVal);
									with(plw.no_locking) {var vTestAVLV=vAVLV.modifywithplist(vArgAVLV);}
									vExistVAVL=true;
								}
							}
							if (vExistVAVL==false && vIDLigneVal!="")
							{
								var vector vArgAVLVNew=vArgAVLVCrea+vArgAVLV;
								plw.writetolog(" --- IMPORT DVA ----- CREA Act Val / Ligne Val : " + vObj._PSI3_TT_S_DEM_ID_SOURCE + "/"+ vIDLigneVal);
								with(plw.no_locking) {var vNewAVLV=plc._PSI3_PT_LINK_ACT_LGN_VAL.makeopx2objectwithplist(vArgAVLVNew);}
							}
						}
					}
				}
			}
			vListLigneVal.clear();
			
		}
	}
	// ecrire dans le fichier de sortie
	if(MsgKO == "" && vLivOK!=undefined) 
		vObj._PSI3_TT_ERROR="OK";
	else 
		vObj._PSI3_TT_ERROR=MsgKO;
	return MsgKO;
}

// US8367,8368 : fonction retourne la liste de D_VA d'une VA pour associer/dissocier VSN
function _psi3_js2_get_vsn_ctrl_va(id_va, s_msg)
{
	var vResult="";
	var nb_dva=0;
	var l_dva = new vector();
	var tablekey_VA = new plw.keyattribute(plc._DEL_PT_DELIV_LINKS,"_PSI3_AA_S_DEM_ID_SOURCE",id_va);
	with(tablekey_VA.fromobject())
	{
		for(var vDva in plc._DEL_PT_DELIV_LINKS where vDva._PSI3_AA_S_DEM_ID_SOURCE==id_va && vDva._PSI3_RA_DELIV_TYPE.internal==false && vDva._PSI3_RA_DELIV_TYPE.name=="VA")
		{
			nb_dva++;
			l_dva.push(vDva);
		}
	}
	if(s_msg!="" && nb_dva==0)
		plw.writetolog(s_msg);
	if(nb_dva>0)
		vResult=l_dva;
	return vResult;
}
// US8472 : contr le Vsn   associer/dissocier
function _psi3_js2_get_vsn_ctrl_vsn(id_vsn, s_msg)
{
	var vResult=undefined;
	var tablekey_VSN = new plw.keyattribute(plc._DEL_PT_DELIV_LINKS,"_PSI3_AA_S_DEM_ID_SOURCE",id_vsn);
	with(tablekey_VSN.fromobject())
	{
		for(var vVsn in plc._DEL_PT_DELIV_LINKS where vVsn._PSI3_AA_S_DEM_ID_SOURCE==id_vsn && vVsn._PSI3_RA_DELIV_TYPE.internal==false && vVsn._PSI3_RA_DELIV_TYPE.name=="VSN")
		{
			vResult=vVsn;
		}
	}
	if(s_msg!="" && vResult==undefined)
		plw.writetolog(s_msg);
	return vResult;
}

// US8367 : fonction g rant l'import via api pour ajouter l'association  d'une VSN aux D_VA d'une VA 
function _psi3_js2_get_vsn_for_add_ass(vEntry)
{
	plw.writetolog(" --- IMPORT VSN ADD ASS --- Debut de l'import des VSN   associer en API --- ");
	var nb_dva_maj=0;
	var nb_dva_cre=0;
	var b_add_dva=true;
	
	plw.writetolog(" --- IMPORT VSN ADD ASS --- 01. Import API : "+vEntry);
	var vVA_Id=vEntry.activityId;
	var vVSN_Id=vEntry.supportNeedId;
	var vUpdated_date=vEntry.editedAt;
	var vUpdated_By=vEntry.editedBy;
	
	plw.writetolog(" --- IMPORT VSN ADD ASS --- 02. CONTROLES : ");
	if (vVA_Id==undefined || vVSN_Id==undefined)
		plw.writetolog(" --- IMPORT VSN ADD ASS --- Erreur : format d'entree incorrect");
	else
	{
		// Ctrl de VA :
		var msg_err=" --- IMPORT VSN ADD ASS --- Error : aucune D_VA trouv  pour VA "+vVA_Id+". Association est impossible.";
		var l_dva = new vector();
		l_dva=_psi3_js2_get_vsn_ctrl_va(vVA_Id, msg_err);

		// US8472 : Ctrl de VSN :
		var msg_err=" --- IMPORT VSN ADD ASS --- Warnning : VSN " + vVSN_Id + " n'est pas trouv  dans GPS.";
		var vVSN_ok=_psi3_js2_get_vsn_ctrl_vsn(vVSN_Id, msg_err);
		if(vVSN_ok==undefined)
			b_add_dva=false; // pas d'ajout d'une D_VA si VSN inexistante
			
		if(l_dva!="")
		{
			// Si VA existent dans GPS :
			plw.writetolog(" --- IMPORT VSN ADD ASS --- 03. ADD ASS VSN : "+vVSN_Id);
			var vDva_rep=undefined;
			for(var vDva in l_dva)
			{
				nb_dva_maj++;
				// M j des D_VA :
				if(vDva._PSI3_AA_S_ID_VSN!="" && vDva._PSI3_AA_S_ID_VSN!=undefined)
				{
					var vIdVSNs=new vector();
					vIdVSNs=vDva._PSI3_AA_S_ID_VSN.parsevector();
					vIdVSNs.pushifnotpresent(vVSN_Id);
					vDva._PSI3_AA_S_ID_VSN=vIdVSNs.join(",");
				}
				else
					vDva._PSI3_AA_S_ID_VSN=vVSN_Id;

				// US8472 : on v rifie si la DVA est repondue :
				if(b_add_dva==true)
				{
					if(vDva._DEL_AA_N_DEL_ONB==0)
						b_add_dva=false; // toutes les demandes ne sont pas repondues
				}
				if(b_add_dva==true && vDva_rep==undefined) 
					vDva_rep=vDva; // on sauvegarde la 1ere D_VA repondue
			}
			// US8472 : Ajout d'une nouvelle D_VA (copy de la 1ere D_VA repondue) si toutes les autres sont repondues
			if(b_add_dva==true && vDva_rep!=undefined)
			{
				// On copie la 1ere D_VA r pondue :
				var vNewDva=plw._psi3_ojs_copy_dva(vDva_rep);
				if(vNewDva instanceof plc._DEL_PT_DELIV_LINKS)
				{
					nb_dva_cre++;
					plw.writetolog(" --- IMPORT VSN ADD ASS --- 04. ADD NEW D_VA : une copie de la D_VA "+vDva_rep._PSI3_LIV_AA_S_NOM+" est cr  e : "+vNewDva._PSI3_LIV_AA_S_NOM);
				}
			}
		}
	}
	plw.writetolog(" --- IMPORT VSN ADD ASS ---  Fin de l'import des VSN   associer en API : "+nb_dva_maj+" D_VA modifi e(s)."+nb_dva_cre+" D_VA cr  e.");
	return 200;
}
//definition de l'api
plw.writetolog("Definition import VSN ADD ASS GPS: _psi3_js2_get_vsn_for_ADD_ass");
rest.defineapi("_psi3_js2_get_vsn_for_add_ass",false,_psi3_js2_get_vsn_for_add_ass);

// US8368 : fonction g rant l'import via api pour supprimer l'association  d'une VSN aux D_VA d'une VA 
function _psi3_js2_get_vsn_for_delete_ass(vEntry)
{
	plw.writetolog(" --- IMPORT VSN DELETE ASS --- Debut de l'import des VSN   dissocier en API --- ");
	var nb_dva=0;
	var nb_dva_maj=0;
	
	plw.writetolog(" --- IMPORT VSN DELETE ASS --- 01. Import API : "+vEntry);
	var vVA_Id=vEntry.activityId;
	var vVSN_Id=vEntry.supportNeedId;
	var vUpdated_date=vEntry.editedAt;
	var vUpdated_By=vEntry.editedBy;
	
	plw.writetolog(" --- IMPORT VSN DELETE ASS --- 02. CONTROLES : ");
	if (vVA_Id==undefined || vVSN_Id==undefined)
	{
		plw.writetolog(" --- IMPORT VSN DELETE ASS --- Erreur : format d'entree incorrect");
		plw.alert(" --- IMPORT VSN DELETE ASS --- Erreur : format d'entree incorrect");
	}
	else
	{
		// Ctrl de VA :
		var msg_err=" --- IMPORT VSN DELETE ASS --- Error : aucune D_VA trouv  pour VA "+vVA_Id+". Dissociation est impossible.";
		var l_dva = new vector();
		l_dva=_psi3_js2_get_vsn_ctrl_va(vVA_Id, msg_err);

		if(l_dva!="")  
		{
			// Si VA existe dans GPS :
			plw.writetolog(" --- IMPORT VSN DELETE ASS --- 03.DELETE ASS VSN : "+vVSN_Id);
			// M j des D_VA :
			for(var vDva in l_dva)
			{
				nb_dva++;
				if(vDva._PSI3_AA_S_ID_VSN!="" && vDva._PSI3_AA_S_ID_VSN!=undefined)
				{
					if(vDva._PSI3_AA_S_ID_VSN==vVSN_Id)
						vDva._PSI3_AA_S_ID_VSN="";
					else
					{
						var vIdVSNs=new vector();
						vIdVSNs=vDva._PSI3_AA_S_ID_VSN.parsevector();
						if(vIdVSNs.isinlist(vVSN_Id)==true)
						{
							nb_dva_maj++;
							vIdVSNs.remove(vVSN_Id);
							vDva._PSI3_AA_S_ID_VSN=vIdVSNs.join(",");
						}
					}
				}
			}
		}
	}
	plw.writetolog(" --- IMPORT VSN DELETE ASS ---  Fin de l'import des VSN   dissocier en API : "+nb_dva+" D_VA trouv es; "+nb_dva_maj+" D_VA modifi e(s).");
	plw.alert(" --- IMPORT VSN DELETE ASS ---  Fin de l'import des VSN   dissocier en API : "+nb_dva+" D_VA trouv es; "+nb_dva_maj+" D_VA modifi e(s).");
	return 200;
}
//definition de l'api
plw.writetolog("Definition import VSN DELETE ASS GPS: _psi3_js2_get_vsn_for_delete_ass");
rest.defineapi("_psi3_js2_get_vsn_for_delete_ass",false,_psi3_js2_get_vsn_for_delete_ass);
 
// PLWSCRIPT : _PSI3_JS2_ONEVAL_API
// -------------------------------------
// /!\ Script V2 /!\
// -------------------------------------
//
// V1.40 2021-08-07 sse v3.11.0_06 US8572
// Modification psi3_js2_hook_publication_SV pour exporter plusieurs R_VA 
//
// V1.39 2021-08-03 sse/David v3.11.0_06
// Modification psi3_js2_flux1_charge_dvsn, _psi3_js2_set_flux1_attr_ht pour ajouter Besoin BE dans le flux1 et g rer les vrais booleens (US8270)
//
// V1.38 2021-06-29 sse v3.11.0_01
// Modification psi3_js2_hook_publication_SV pour n'exporter R_VA que   la derni re publication
//
// V1.37 2021-06-11 sse v3.11.0_00
// Modification de psi3_js2_hook_publication_SV pour la publication des R_VA
//
// V1.36 2020-12-17 David v3.09.0_06
// Modification de psi3_js2_charge_config_support, psi3_js2_maj_conf_support_dsv_api pour ajouter d'autres traces (US7909)
//
// V1.35 2020-12-10 David v3.09.0_05
// Modification de psi3_js2_charge_config_support, psi3_js2_maj_conf_support_dsv_api pour ajouter des traces (US7909)
//
// V1.34 2020-10-29 sse v3.08.0_16 US7807
// Ajout psi3_js2_calcule_dvsn_marque pour calculer Marque avec code interface re u d'Oneval
// Modification psi3_js2_flux1_charge_dvsn pour calculer Marque avec code interface re u d'Oneval
// Modification psi3_js2_charge_config_support, psi3_js2_maj_conf_support_dsv_api : remplacement de calcule de Marque par la fonction psi3_js2_calcule_dvsn_marque
// Modification psi3_ojs_select_config_support : vider le filtre de demandes initiale (VSN) avant l'ouverture du pop-up
//
// V1.34 2020-09-01 David v3.08.0_08
// Modification de psi3_js2_maj_conf_support_dsv_api pour utiliser la nouvel API avec ID Config support en argument
//
// V1.33 2020-08-20 sse v3.08.0_07
// Modification des fonctions psi3_js2_maj_conf_support_dsv_api pour les champs number (US7573)
//
// V1.32 2020-08-18 David v3.08.0_06
// Modification de psi3_js2_import_api_d_vsn pour v rifier si un autre batch est d j  en cours (US7534)
//
// V1.31 2020-07-10 sse v3.08.0_02
// Modification des fonctions psi3_ojs_config_support_selected_2, psi3_js2_maj_conf_support_dsv_api
//
// V1.30 2020-06-30 sse v3.08.0_01 
// Modification des fonctions psi3_js2_import_api_d_vsn, psi3_js2_flux1_charge_dvsn, _psi3_js2_set_flux1_attr_ht pour ajouter les nouveaux champs au flux1 (US6969)
// Remplacement de la fonction psi3_js2_maj_conf_support_dsv_cuk par psi3_js2_maj_conf_support_dsv_api pour la m j des champs config support sur les SV_VEH par API (US6972)
//
// V1.29 2020-06-17 sse v3.08.0_00 US7391
// Modification de la fonction psi3_js2_maj_conf_support_dsv_cuk  pour optimiser le traitement
//
// V1.28 2020-06-09 sse PROTO US7381
// Cr ation de la fonction psi3_js2_maj_conf_support_dsv_cuk  pour m j des champ config support sur les D_SV CUK avec l'appel d'API
// Modification de la fonction psi3_ojs_config_support_selected_2 pour ne pas decloncher l'alerte de m j des D_SV CUK lorsque la m j manuelle des conf support
//
// V1.27 2020-05-12 David v3.07.0_09 
// Modification de _psi3_js2_get_flux2_attributes pour adapter les traces du bloc 2 (US7341)
//
// V1.26 2020-04-24 David v3.07.0_07 (reinteg v3.06.2_00)
// Modification de psi3_js2_hook_publication_SV et cr ation de psi3_ojs_run_hook_publi pour g rer un d lai avant d'envoyer le hook (US7289)
// Modification de _psi3_js2_get_flux2_attributes pour ajouter des traces avant envoi du flux2 (US7288)
//
// V1.25 2020-01-22 sse - v3.06.0_08
// Suppression des lignes en double
//
// V1.24 2020-01-21 sse - v3.06.0_07 US2690
// Modification de psi3_js2_charge_config_support pour integrer les champs marque, chargeur batterie, capacit  batterie
//
// V1.23 2019-12-10 David - v3.06.0_04 (reinteg v3.05.5_00)
// Modification de psi3_js2_flux1_charge_dvsn, _psi3_js2_webhook, _psi3_js2_get_validation_supports pour ajouter des traces (US2871)
//
// V1.22 2019-11-27 David - v3.06.0_03 (reinteg v3.05.4_02)
// Modification de psi3_js2_hook_publication_SV pour ne faire qu'un seul hook en cas de multipublication (US2434/CA2820)
//
// V1.21 2019-11-15 David - v3.06.0_02 (reinteg v3.05.4_00)
// Modification de _psi3_js2_get_flux2_attributes et psi3_js2_flux1_charge_dvsn pour corriger les erreurs suite aux premiers tests avec OneVAL
//
// V1.20 2019-11-04 sse - v3.06.0_00 US2618;2635
// Modification _psi3_js2_vect_prj_valid_sel_d_sv; psi3_js2_charge_config_support; psi3_ojs_select_config_support; 
// Ajout de la fonction psi3_ojs_config_support_selected_2 pour M j conf support sur les D_SV coch es; psi3_js2_sel_config_support
//
// V1.19 2019-10-03 sse - v3.05.0_12 US2426
// Modification de la fonction _psi3_js2_get_flux2_attributes pour corriger les R_VSN qui n  taient pas export s car on regardait le statut du SV dans tous les cas
//
// V1.18 2019-10-01 David - v3.05.0_11 
// Modification de psi3_js2_flux1_charge_dvsn pour  viter les crash si pas "errors", g rer les boool en et ne pas prendre "values"
//
// V1.17 2019-09-24 David - v3.05.0_10 US2426/CA2563
// Modification de _psi3_js2_set_attributes_rvsn pour changer le format de toutes les dates
//
// V1.16 2019-09-20 sse - v3.05.0_10 US2434
// Ajout des fonctions psi3_js2_import_api_d_vsn, _psi3_js2_set_flux1_attr_ht, psi3_js2_flux1_api_err, psi3_js2_flux1_charge_dvsn pour import flux1 via API
// Ajout la fonction psi3_js2_debug_flux1_json pour simuler l'appel   l'API (utilis e en mode DEBUG)
//
// V1.15 2019-09-12 David - v3.05.0_09
// Modification de _psi3_js2_get_validation_supports pour passer au format API et _psi3_js2_set_attributes_rvsn pour renommer les champs (US2426/CA2523)
// Cr ation de _psi3_js2_webhook pour g rer le hook GPS (US2526)
// Modification de psi3_js2_charge_config_support pour ajouter le nouvel argument du sh
//
// V1.14 2019-08-26 David - v3.05.0_08 US2426, US2477
// Cr ation de _psi3_js2_set_attributes_rvsn, _psi3_js2_get_flux2_attributes et modification de _psi3_js2_get_validation_supports, psi3_js2_hook_publication_SV pour ajouter le flux 2 et d sactiver le flux 4
//
// V1.13 2019-08-20 sse - v3.05.0_06 US2336
// Modification des fonctions psi3_js2_choix_config_support, psi3_js2_charge_config_support, _psi3_js2_vect_prj_valid_sel_d_sv, method psi3_ojs_select_config_support pour afficher l'union de confs dans la liste
//
// V1.12 2019-08-07 sse - v3.05.0_05 US2320
// Ajout de la fonction _psi3_js2_vect_prj_valid_sel_d_sv pour constituer un vecteurs de projets de validation   charger
// M thode psi3_ojs_select_config_support modifi  pour appeler la fonction psi3_js2_charge_config_support
//
// V1.11 2019-07-29 sse - v3.05.0_04 US2229
// Modification des fonctions psi3_ojs_select_config_support et psi3_ojs_config_support_selected pour g rer les configurations de support dans les s lection de plusieur D_SV 
// Ajout de la fonction psi3_js2_charge_config_support_dsv : chargement des conf pour une D_SV
//
// V1.10 2019-04-09 David - v3.03.3_08 (reinteg v3.02.5)
// Modification de psi3_ojs_config_support_selected pour g rer le EnginePower comme un nombre (US1988) et rajouter plw devant le write_text_key (US1989) ; et psi3_ojs_select_config_support pour utiliser values au lieu de supportConfigurations (US1988)
//
// V1.9 2018-12-05 David - v3.02.3_00 US1779 (CA1632)
// Modification de psi3_ojs_maj_dl pour ajouter un withoulocking
//
// V1.8 2018-11-22 David - v3.02.1_04 US1567
// Cr ation de psi3_js2_hook_publication_SV pour le hook lors de la publication d'un SV/D_SV VEH et _psi3_js2_get_flux4_attributes pour optimisation perf (US1567) et modification de psi3_ojs_config_support_selected pour g rer le power vide (US1594) et cr ation de _psi3_js2_get_validation_supports et modif de _psi3_js2_set_attributes_ht (US1567)
//
// v1.7 2018-11-21 SSE - v3.02.1_03 US1567
// Cr ation des fonctions _psi3_js2_find_dc_madc_from_sv, _psi3_js2_set_attributes_ht, _psi3_js2_get_flux4_attributes
//
// v1.6 2018-11-20 David - v3.02.1_03
// Modification de psi3_ojs_config_support_selected pour remplacer le "Number".callmacro par un parsenumber (US1580) et psi3_ojs_select_config_support pour modifier le chemin du sh et v rifier que la r ponse n'est pas false
//
// v1.5 2018-11-13 David - v3.02.1_02 US1543
// Correction de psi3_ojs_select_config_support suite TU et psi3_ojs_maj_dl pour reinit le champ en cas de mauvaise valeur
//
// v1.4 2018-11-08 David - v3.02.1_01 
// Passage en Script V2 pour utilisation de la fonction systemklib.commandoutput (patch sc10358 v3.1 requis) - US1543
// PPO : Modif de psi3_ojs_select_config_support et psi3_ojs_config_support_selected pour ajouter les nouveau champ - US1479
//
// v1.3 2018-10-24 sse - v3.02.1_00 US1430
// Modification de psi3_ojs_config_support_selected suite au remplacement des AA Indice CC/BT/MOT par les RA
//
// v1.2 2018-08-21 David - v3.02.0_05
// Modification de psi3_ojs_select_config_support pour g rer l'appel   l'API et ajout du setting pour d finir l'url de l'api
//
// v1.1 2018-08-20 Patrick - v3.02.0_05 - IRN50600-1301
// Modification de la fonction psi3_ojs_config_support_selected pour mise   jour des champs sur la demande
// Ajout function psi3_ojs_maj_dl de mise   jour des champs de la dl avec try catch
//
// v1.0 2018-08-14 David - v3.02.0_04
// Creation
// -------------------------------------
namespace _oneval;
// US2229;2320;2618 : Charger dans TT les configurations de support d'un prj de validation
function psi3_js2_charge_config_support(vProjVal,vProjVal_desc)
{
	var string vUser=context.callstringformula("$CURRENT_USER").ToUpperCase();
	plw.writetolog(" -- choix_de_config : --"+vProjVal+"--");
	// Appel de l'API avce le premier arguemnt CONFIG_SUPPORT 
	var string vReq="sh /$HOME/vcours/bin/gps_api_oneval_new.sh 'CONFIG_SUPPORT' "+vProjVal;
	var vResult = systemklib.commandoutput(vReq); 
	plw.writetolog(" -- choix_de_config retour du shell : "+vResult);
	if (vResult!=false)
	{
		// recup du r sultat
		var vJsonObj=rest.parse(vResult[0]);
		// objet liste des config support
		var vConfigSupList=vJsonObj.values;
		if (vConfigSupList!=undefined && vConfigSupList!="")
		{
			//var list_cs_temp=new vector();
			var s_list_cs_temp="";
			// liste des attributs   r cup rer
			var vector vListField=new vector("ID","configName","market","engine","engineRenault","enginePower","emissionLevel","battery","batteryRenault","gearbox","gearboxRenault","axle","equipmentLevel","handle","optionalTests","numberOfRow","suspension","body","dimensions","grossVehicleWeight","status","engineIndice","gearboxIndice","batteryIndice","brand","batteryCharger","batteryCapacity");
			 // config support
			for (var vObj in vConfigSupList)
			{
				// on remplit la liste de confs du projet de validation
				var b_to_load=true;
				if(s_list_cs_temp=="")
					s_list_cs_temp=vObj.configName; //"\""+vObj.configName+"\"";
				else
				{
					if(context.callNumberFormula("POSITION(\""+vObj.configName+"\",\""+s_list_cs_temp+"\")")>0)
						b_to_load=false;
					else
						s_list_cs_temp=s_list_cs_temp+","+vObj.configName; 
				}
				// US2336 : on charge la conf si elle n'est pas d j  charg e
				if(b_to_load)
				{
					// US2618 : var vector vArgCrea=new vector("USER",vUser);               //,"ONB_DEMANDE",vDL.ONB);
					var vector vArgCrea=new vector("USER",vUser,"ID_PRJ_VALID",vProjVal,"PRJ_VALID",vProjVal_desc);   
					for (var vField in vListField)
					{
						//nom du champ
						var vFieldName=vField;
						// le champ ID correspond au nom dans la table temp et config name   desc
						if (vField=="ID") vFieldName="NAME";
						vArgCrea.push(vFieldName);
						//valeur du champ
						var vValue="";
						//si cot  de direction on r cup re le r f rentiel (via le code interface) 
						if(vFieldName=="handle")
						{
							var vValueTemp=(vObj.get(vField)!=undefined && vObj.get(vField)!="Null" && vObj.get(vField)!=NIL) ? vObj.get(vField) : ""; 
							if(vValueTemp!="")
							{
								var tablekey_dl = new plw.keyattribute(plc._PSI3_PT_DR_SIDE,"_PSI3_AA_S_CODE_INTERFACE",vValueTemp);
								with(tablekey_dl.fromobject())
								{
									for (var plc._PSI3_PT_DR_SIDE vDir in plc._PSI3_PT_DR_SIDE where vDir._PSI3_AA_S_CODE_INTERFACE==vValueTemp)
									{
										vValue=vDir.printattribute();
									}
								}
							}
						} else if(vFieldName=="brand") // US2690 : si Marque on r cup re le r f rentiel (via le code interface)
							{
								vValue=psi3_js2_calcule_dvsn_marque(vObj,vField);
							} else
								{
								vValue=(vObj.get(vField)!=undefined && vObj.get(vField)!="Null" && vObj.get(vField)!=NIL) ? vObj.get(vField) : ""; 
								}
						vArgCrea.push(vValue);
					}
					var vNewTemp=plc._PSI3_TT_CONFIG_SUPPORT_V2.makeopx2objectwithplist(vArgCrea);
				}
			}
			// on sauvegard la liste de conf dans le context
			context._PSI3_AA_S_TEMP_CS_NOM_LST=s_list_cs_temp; //list_cs_temp.join(",");
			plw.writetolog(" -- choix_de_config liste de conf : "+s_list_cs_temp);
		}
	}
}


// US2229;2320 : m thode modifi  g rer les confs commune dans la s lection de D_SV
// fonction appel e lors de la s lection d'une configuration de support depuis une D_SV
method psi3_ojs_select_config_support on plc._DEL_PT_DELIV_LINKS()
{
	var ht_pv=new hashtable("STRING");
	var plc._DEL_PT_DELIV_LINKS vDL=this;
	var string vUser=context.callstringformula("$CURRENT_USER").ToUpperCase();
	var list_PV=new vector();
	
	if (vDL instanceof plc._DEL_PT_DELIV_LINKS && vDL.internal==false)
	{
		// US2229 : on vide la table temp pour ce user 
		for (var vTemp in plc._PSI3_TT_CONFIG_SUPPORT_V2 where vTemp.USER.ToUpperCase()==vUser) // && vTemp.ONB_DEMANDE==vDL.ONB)
		{
			with(plw.no_locking) { vTemp.delete(); }
		}
		// US2229 : context._PSI3_AA_S_TEMP_ONB_DL=vDL.ONB;
		var onb_str="PRINT_NUMBER".callmacro(vDL.ONB,"####");
		context._PSI3_AA_S_TEMP_ONB_DL_LST=onb_str;
		context._PSI3_AA_S_TEMP_CS_NOM_LST="";
		context._PSI3_AA_S_TEMP_ID_PV_LST="";

		// recup du champ projet de validation

		// US2336 : on r cup res tous le projets de validation
		//var string vProjVal=plw.psi3_ojs_get_str_field_dvsn_from_dsv_l(vDL.ONB,"_PSI3_AA_DEM_ID_PRJ_VALID");
		
		// US2618 :
		ht_pv=plw.psi3_ojs_get_str_field_dvsn_from_dsv_ht(vDL.ONB,"_PSI3_AA_DEM_ID_PRJ_VALID","_PSI3_AA_DEM_PRJ_VALID");
		//plw.alert(ht_pv);
		
		// US2229 : charger TT de config support
		// US2618 :
		var vCount=0;
		var vPRJ_desc="";
		for(var vPRJ_id in ht_pv)
		{
			vPRJ_desc=ht_pv.get(vPRJ_id);
			psi3_js2_charge_config_support(vPRJ_id,vPRJ_desc);
			list_PV.Push(vPRJ_id);
			vCount++;
		}
		context._PSI3_AA_S_TEMP_ID_PV_LST=list_PV.join(",");
		
		if(vCount>0)
		{
			// US2618 : Cocher la D_SV
			vDL._PSI3_AA_B_DL_SEL_CS=true;
			context._PSI3_AA_S_TEMP_CS_DL_LST=onb_str;		
		}
		// Vider le filtre de demandes initiale (VSN)
		context._PSI3_AA_S_FILTRE_DEM_INI="";
		var vLink = new hyperlink("Fvalue",       
							"Attribute","ID",       
							"EditorType","_PSI3_RE_POPUP_SEL_CONFIG_SUPPORT",       
							"popup",true);       
		vLink.go(Context);
		ht_pv.clear();
	}
}
//US2320 Returne la hashtable de projet de validation (id, desc) dans la s lection D_SV/spj/tache 
function _psi3_js2_vect_prj_valid_sel_d_sv()
{
	var selection=new symbol("SELECTION-ATOM","TOOL-BAR");
	var ht_pv=new hashtable("STRING");
	var ht_pv_res=new hashtable("STRING");
	var vecteur_object = new vector();
	var l_vProjVal=new vector();
	var result="";
	var nb_sel=0;
	var number vCount=0;
	var b_pv_ok=false;
	var vDSV_uni=undefined;

	//Initialiser les champs du context :
	context._PSI3_AA_S_TEMP_ONB_DL_LST=""; // Liste des ONB de D_SV dans les spj/act/Livrables demand es pr -s lectonn es et li e   un projet de validation
	context._PSI3_AA_S_TEMP_CS_DL_LST="";  // Liste des D_SV coch es
	context._PSI3_AA_S_TEMP_ID_PV_LST=""; // Liste des projet de validation li es aux D_SV coch es
	context._PSI3_AA_S_TMP_DSV_QUAL="";   // Nom de la D_SV avec D_VSN affich e
	context._PSI3_AA_S_FILTRE_DEM_INI="";  // ONB de la D_SV avec D_VSN affich e
	//context._PSI3_AA_S_TEMP_ONB_DL=0;
	
	// Remplir la liste de D_SV   partir de  D_SV et/ou spj et/ou taches s lectionn s
	for (var object in selection)
	{
		if (object instanceof plc._DEL_PT_DELIV_LINKS && (object._PSI3_RA_DELIV_TYPE.name=="SV_VEH" || object._PSI3_RA_DELIV_TYPE.name=="SV_ORG"))
		{
			nb_sel++;

			// US2336 : hashtable de projets de validation
			ht_pv=plw.psi3_ojs_get_str_field_dvsn_from_dsv_ht(object.ONB,"_PSI3_AA_DEM_ID_PRJ_VALID","_PSI3_AA_DEM_PRJ_VALID");
			var ht_count=0;
			//var l_vProjVal=new vector();
			for(var each in ht_pv)
			{
				if(ht_pv_res.get(each)==undefined)
					ht_pv_res.set(each,ht_pv.get(each));
				l_vProjVal.push(each);
				ht_count++;
			}
			if(ht_count>0)
			{
				vCount++;
				b_pv_ok=true;
				vecteur_object.pushifnotpresent(object.ONB);
				object._PSI3_AA_B_DL_SEL_CS=false;
				// US2618 : on sauvegarde la 1ere D_SV
				if(vCount==1)
					vDSV_uni=object;
				else
					vDSV_uni=undefined;
			}
		}
		else 
			{
				if (object instanceof plc.network) 
				{
					nb_sel++;
					with(object.fromobject())
					{
						// Ajouter les D_SV dans le vector 
						for (var task in plc.Task where task.callStringFormula("SPJ="+"\"*"+object.name+"*\"") && task._PSI3_LIV_NF_S_DEM_ASS_ID!="")
						{ 
							//vCount++;
							var vDSV=plc._DEL_PT_DELIV_LINKS.get(task._PSI3_LIV_NF_S_DEM_ASS_ID.parsenumber());
							if(vDSV instanceof plc._DEL_PT_DELIV_LINKS && (vDSV._PSI3_RA_DELIV_TYPE.name=="SV_VEH" || vDSV._PSI3_RA_DELIV_TYPE.name=="SV_ORG")) // && (vecteur_object.length==0 || !(vecteur_object.Isinlist(vDSV))))
							{
								// US2336 : hashtable de projets de validation
								ht_pv=plw.psi3_ojs_get_str_field_dvsn_from_dsv_ht(vDSV.ONB,"_PSI3_AA_DEM_ID_PRJ_VALID","_PSI3_AA_DEM_PRJ_VALID");
								//plw.alert("ht_pv="+ht_pv);
								var ht_count=0;
								//var l_vProjVal=new vector();
								for(var each in ht_pv)
								{
									if(ht_pv_res.get(each)==undefined)
										ht_pv_res.set(each,ht_pv.get(each));
									l_vProjVal.push(each);
									ht_count++;
								}
								if(ht_count>0)
								{
									b_pv_ok=true;
									vCount++;
									vecteur_object.pushifnotpresent(vDSV.ONB);
									vDSV._PSI3_AA_B_DL_SEL_CS=false;
									// US2618 : on sauvegarde la 1ere D_SV
									if(vCount==1)
										vDSV_uni=vDSV;
									else
										vDSV_uni=undefined;
								}								
							}
						}			
					}
				} 
				else if (object instanceof plc.Task) 
					{
						nb_sel++;
						var vDSV=plc._DEL_PT_DELIV_LINKS.get(object._PSI3_LIV_NF_S_DEM_ASS_ID.parsenumber());
						if(vDSV instanceof plc._DEL_PT_DELIV_LINKS && (vDSV._PSI3_RA_DELIV_TYPE.name=="SV_VEH" || vDSV._PSI3_RA_DELIV_TYPE.name=="SV_ORG")) // && (vecteur_object.length==0 || !(vecteur_object.Isinlist(vDSV))))
						{
							// US2336 : hashtable de projets de validation
							ht_pv=plw.psi3_ojs_get_str_field_dvsn_from_dsv_ht(vDSV.ONB,"_PSI3_AA_DEM_ID_PRJ_VALID","_PSI3_AA_DEM_PRJ_VALID");
							var ht_count=0;
							for(var each in ht_pv)
							{
								if(ht_pv_res.get(each)==undefined)
									ht_pv_res.set(each,ht_pv.get(each));
								l_vProjVal.push(each);
								ht_count++;
							}
							if(ht_count>0)
							{
								b_pv_ok=true;
								vCount++;
								vecteur_object.pushifnotpresent(vDSV.ONB);
								vDSV._PSI3_AA_B_DL_SEL_CS=false;
								// US2618 : on sauvegarde la 1ere D_SV
								if(vCount==1)
									vDSV_uni=vDSV;
								else
									vDSV_uni=undefined;
							}								
						}
					} 
			}
	}
	// Si aucune ligne n'est s lectionn e : msg
	if(nb_sel==0)
	{
		var mess = plw.write_text_key("_PSI3_TK_.MSG_CS_SELECT_DEM");
	} else { 
		// US2336 : Si les D_SV s lectionn es sont avec un projet de validation
		if(b_pv_ok)
			context._PSI3_AA_S_TEMP_ONB_DL_LST=vecteur_object.join(",");
			// US2618 : si une seule ligne, cocher D_SV et sauvegarder le projet de validation
			if(vCount==1 && vDSV_uni!=undefined)
			{
				vDSV_uni._PSI3_AA_B_DL_SEL_CS=true;
				var onb_str="PRINT_NUMBER".callmacro(vDSV_uni.ONB,"####");
				context._PSI3_AA_S_TEMP_CS_DL_LST=onb_str;
				context._PSI3_AA_S_TEMP_ID_PV_LST=l_vProjVal.join(",");
			}
	}
	ht_pv.clear();
	return ht_pv_res;
}	
// US2229;2320 : fonction appel  dans le menu Livrable et sur le bouton "?" d'une D_SV pour afficher la liste de config support
/*function psi3_js2_choix_config_support()
{
	// on definie le vector des projets de validations des demandes s lectionn es
	var list_prj=new vector();
	list_prj=_psi3_js2_vect_prj_valid_sel_d_sv();

	// on vide la table temp pour ce user et la liste de conf sauvegard e dans le context
	var string vUser=context.callstringformula("$CURRENT_USER").ToUpperCase();
	for (var vTemp in plc._PSI3_TT_CONFIG_SUPPORT_V2 where vTemp.USER.ToUpperCase()==vUser) 
	{
		with(plw.no_locking) { vTemp.delete(); }
	}
	context._PSI3_AA_S_TEMP_CS_NOM_LST="";
	
	if(list_prj!="" && list_prj.length>0)
	{
		for(var vPRJ in list_prj)
		{
			// Remplir la table temporaire de config support
			psi3_js2_charge_config_support(vPRJ);
		}
	}
	// Ouvrir le formulaire
	var vLink = new hyperlink("Fvalue",       
							"Attribute","ID",       
							"EditorType","_PSI3_RE_POPUP_LIST_CONFIG_SUPPORT",       
							"popup",true);       
	vLink.go(Context);
}
psi3_js2_choix_config_support.exportfunction();
*/

// fonction appel  une fois une configuration de support s lectionn e
function psi3_ojs_config_support_selected()
{
	// on definie le vector de demandes s lectionn es
	var list_DSV=new vector();
	list_DSV=context._PSI3_AA_S_TEMP_ONB_DL_LST.parselist();
	// Recup s lection
	var SelectionAtom = new symbol("SELECTION-ATOM","TOOL-BAR"); 
	var vSelectedConfig=undefined;
	var number vCount=0;
	for(var vObj in SelectionAtom )
	{
		vSelectedConfig=vObj;
		vCount++;
		if (vCount>1) break;
	}
	// si plus d'une ligne s lectionn e, message
	if (vCount>1)
	{
		plw.alert(plw.write_text_key("_PSI3_TK_.MSG_SELECT_1CONFIG_SUPPORT"));
	}
	else if (vCount==1 && vSelectedConfig instanceof plc._PSI3_TT_CONFIG_SUPPORT_V2)
	{
		// US2229 : var DL_select = plc._DEL_PT_DELIV_LINKS.get(context._PSI3_AA_S_TEMP_ONB_DL);
		// M j de l'ensemble de demandes s lectionn es 
		for(var DL_onb in list_DSV)
		{
			// US2229 : M j de chaque demande s lectionn e avant l'ouverture du formulaire avec config de support s lectionn e dans le formulaire
			var DL_select=plc._DEL_PT_DELIV_LINKS.get(DL_onb.parsenumber("####"));
			if(DL_select instanceof plc._DEL_PT_DELIV_LINKS)
			{
				// US1988 : EnginePower est maintenant un nombre 
				//var number vPower=(vSelectedConfig.ENGINEPOWER!=undefined && vSelectedConfig.ENGINEPOWER!="") ? vSelectedConfig.ENGINEPOWER.parsenumber("####") : 0;
				var number vPower=vSelectedConfig.ENGINEPOWER;
				//mise   jour des champs avec catch des champs non mis   jour via la function psi3_ojs_maj_dl
				psi3_ojs_maj_dl(DL_select,"_PSI3_AA_S_DEM_SUP_CONFIG",vSelectedConfig.NAME);
				psi3_ojs_maj_dl(DL_select,"_PSI3_AA_S_DEM_NOM_CONFIG",vSelectedConfig.CONFIGNAME);
				psi3_ojs_maj_dl(DL_select,"_PSI3_RA_DEM_TRANS",vSelectedConfig.AXLE);
				psi3_ojs_maj_dl(DL_select,"_PSI3_RA_DEM_TYP_BT_ALLCE",vSelectedConfig.BATTERY);
				psi3_ojs_maj_dl(DL_select,"_PSI3_LIV_RA_BT",vSelectedConfig.BATTERYRENAULT);
				psi3_ojs_maj_dl(DL_select,"_PSI3_RA_DEM_IND_BT",vSelectedConfig.BATTERYINDICE); //US1430
				psi3_ojs_maj_dl(DL_select,"_PSI3_LIV_RA_CAISSE",vSelectedConfig.BODY);
				psi3_ojs_maj_dl(DL_select,"_PSI3_RA_DEM_DIM",vSelectedConfig.DIMENSIONS);
				psi3_ojs_maj_dl(DL_select,"_PSI3_RA_DEM_CODE_DEPOL",vSelectedConfig.EMISSIONLEVEL);
				psi3_ojs_maj_dl(DL_select,"_PSI3_RA_DEM_TYP_MOT_ALLC",vSelectedConfig.ENGINE);
				psi3_ojs_maj_dl(DL_select,"_PSI3_LIV_RA_MOT",vSelectedConfig.ENGINERENAULT);
				psi3_ojs_maj_dl(DL_select,"_PSI3_RA_DEM_IND_MOT",vSelectedConfig.ENGINEINDICE); //US1430
				psi3_ojs_maj_dl(DL_select,"_PSI3_AA_N_POWER",vPower);
				psi3_ojs_maj_dl(DL_select,"_PSI3_RA_DEM_NIV_EQPT",vSelectedConfig.EQUIPMENTLEVEL);
				psi3_ojs_maj_dl(DL_select,"_PSI3_RA_DEM_TYP_CC_ALLCE",vSelectedConfig.GEARBOX);
				psi3_ojs_maj_dl(DL_select,"_PSI3_LIV_RA_CC",vSelectedConfig.GEARBOXRENAULT);
				psi3_ojs_maj_dl(DL_select,"_PSI3_RA_DEM_IND_CC",vSelectedConfig.GEARBOXINDICE); //US1430
				psi3_ojs_maj_dl(DL_select,"_PSI3_RA_DEM_MMAC",vSelectedConfig.GROSSVEHICLEWEIGHT);
				psi3_ojs_maj_dl(DL_select,"_PSI3_RA_DEM_DR_COTE",vSelectedConfig.HANDLE);
				psi3_ojs_maj_dl(DL_select,"_PSI3_RA_DEM_PAYS_COM",vSelectedConfig.MARKET);
				psi3_ojs_maj_dl(DL_select,"_PSI3_AA_N_DEM_NB_RANG",vSelectedConfig.NUMBEROFROW);
				psi3_ojs_maj_dl(DL_select,"_PSI3_AA_S_DEM_OPT_TEST",vSelectedConfig.OPTIONALTESTS);
				psi3_ojs_maj_dl(DL_select,"_PSI3_AA_S_DEM_SUSP",vSelectedConfig.SUSPENSION); 
			}
		}
	} 
}

//fonction de mise   jour des champs de la dl avec try catch
function psi3_ojs_maj_dl(DL_select,a_dl,a_support)
{
	try
	{
		with(plw.no_locking) { DL_select.set(a_dl,a_support); }
	}
	catch (error e)
	{
		var slot_dem_mes_eb = plc._DEL_PT_DELIV_LINKS.getslotbyid(a_dl);
		// reset du champ
		var vNewVal=(slot_dem_mes_eb.type=="NUMBER") ? 0 : "";
		with(plw.no_locking) { DL_select.set(a_dl,vNewVal); }
		plw.alert(#@"_PSI3_TK_.LABEL_ID_CONFIG_PB".current+" " + slot_dem_mes_eb.comment);
	}
}

// US1567 :
// La fonction retourne la date de d but calcul e d'une activit  de type MADC   partir d'une D_SV
function _psi3_js2_find_dc_madc_from_sv(onb)
{
	var vDem=plc._DEL_PT_DELIV_LINKS.get(onb);
	var date date_madc=new date();
	if (vDem instanceof plc._DEL_PT_DELIV_LINKS && vDem.internal==false)
	{
		var task=plc.workstructure.get(vDem._DEL_AA_N_ACT_ONB);
		if (task instanceof plc.workstructure && task.internal==false) {
			with(task.spj.fromobject()) {
				for( var task_madc in plc.workstructure where task_madc.wbs_type.name=="MADC" && task_madc.spj==task.spj && task_madc.project==task.project)
				{
					date_madc=task_madc.DC;
				}
			}
		}
	}
	return date_madc;
}	

// US1567 :
// La fonction retourne une hashtables des attributs du flux4
function _psi3_js2_set_attributes_ht(vLiv,vDEM) {
	var attributes = new hashtable("string");
	var date dc_madc=_psi3_js2_find_dc_madc_from_sv(vDEM.onb);
	attributes.set("dLivSvName", vDem._PSI3_LIV_AA_S_NOM); 
	attributes.set("livSvName", vLiv.NOM); 
	attributes.set("livSvPmSpm", vLiv._PSI3_PRT_AA_S_NOM_PM  + "/" +  vLiv._PSI3_PRT_AA_S_NOM_SPM); 
	attributes.set("livSvTypFab", vLiv._PSI3_LIV_AA_S_TYP_FAB); 
	attributes.set("livSvInstrum", vDem._PSI3_DA_S_INSTRUMENT_VSN); 
	attributes.set("livSvDem", vDem._PSI3_DEM_NF_DEMANDEUR_VSN);
	attributes.set("livSvDemIpn", vDem._PSI3_DEM_NF_ID_DEMANDEUR_VSN); 
	attributes.set("livSvDemDir", vDem._PSI3_DEM_NF_DIR_CLI_VSN); 
	attributes.set("livSvDemServ", vDem._PSI3_DEM_NF_SRV_CLI_VSN); 
	attributes.set("livSvUtil",vDem._PSI3_DEM_NF_UTILISATION_VSN); 
	if(dc_madc == undefined)
		attributes.set("livSvCliMadc", "");
	else 
		attributes.set("livSvCliMadc", dc_madc.tostring("JJ/MM/AA")); 
	attributes.set("livSvLieuLivr", vDem._PSI3_NF_DEM_PREM_LIEU); 
	attributes.set("livSvGestParc", vDem._PSI3_AA_S_GEST_PARC); 
	attributes.set("livSvCliRec", vDem._PSI3_DEM_NF_CLI_RCPR_VSN); 
	attributes.set("livSvSvCrontrib", vLiv._PSI3_LIV_NF_S_USED_SV); 
	return attributes;
}

// US1567 :
// La fonction retourne un vector json pour la flux4 (exports des SV)
function _psi3_js2_get_flux4_attributes(d_pub)
{
	var vResultVect = new vector();
	// hashtable pour  viter les doublons
	var vHashCheck=new hashtable("STRING");
	// on commence par les SV publi s
	var p_date=new date(d_pub,"JJ/MM/AA");
	// SV VEH uniquement
 	var plc._PSI3_PT_DELIV_TYPE vTypeSV=plc._PSI3_PT_DELIV_TYPE.get("SV_VEH");
	if (vTypeSV instanceof plc._PSI3_PT_DELIV_TYPE)
	{
	 // on ne regarde pas les droits en lecture sur les livrables (perf)
	 with(plw.no_locking){
	  for (var plc._DEL_PT_DELIVERABLES vLiv in vTypeSV.get("r._PSI3_RA_DELIV_TYPE._DEL_PT_DELIVERABLES") where vLiv._PSI3_RA_DELIV_TYPE._PSI3_NF_B_TYPE_SV==true && vLiv._PSI3_NF_UA_B_FORUM==true && vLiv._DEL_AA_B_PUBLISHED==true && vLiv._PSI3_DEL_NF_D_LAST_PUB >= p_date) 
	  {
		//listes des demandes
		var vVectDem=plw._psi3_js_utils_ass_from_liv(vLiv);
		for (var vDem in vVectDem)
		{
			if(vDem instanceof plc._DEL_PT_DELIV_LINKS && vDem.internal==false) 
			{
				//on ajoute les attributs du couple vLiv et vDem dans ht
				vResultVect.push(_psi3_js2_set_attributes_ht(vLiv,vDem)); 
				// on stocke les ONB pour ne pas envoyer des doublons
				vHashCheck.set("PRINT_NUMBER".callmacro(vLiv.ONB,"####")+"_"+"PRINT_NUMBER".callmacro(vDem.ONB,"####"),1);
			}
		} 
	  }
	  //puis les d_sv publi s
	  for (var plc._DEL_PT_DELIV_LINKS vDem in vTypeSV.get("r._PSI3_RA_DELIV_TYPE._DEL_PT_DELIV_LINKS") where vDem._PSI3_RA_DELIV_TYPE._PSI3_NF_B_TYPE_SV==true && vDem._DEL_AA_B_PUBLISHED==true && vDem._PSI3_LIV_AA_D_DATE_PUB >= p_date)
	  {
		//SV
		var vLiv=plc._DEL_PT_DELIVERABLES.get(vDem._DEL_AA_N_DEL_ONB);
		if(vLiv instanceof plc._DEL_PT_DELIVERABLES && vLiv.internal==false) {
			if(vLiv._PSI3_NF_UA_B_FORUM == true) { 
				// si pas d j  trait 
				if (vHashCheck.get("PRINT_NUMBER".callmacro(vLiv.ONB,"####")+"_"+"PRINT_NUMBER".callmacro(vDem.ONB,"####"))==undefined)
				{
					vResultVect.push(_psi3_js2_set_attributes_ht(vLiv,vDem)); // cette fonction doit renvoyer une hashtable
					// on stocke les ONB pour ne pas envoyer des doublons
					vHashCheck.set("PRINT_NUMBER".callmacro(vLiv.ONB,"####")+"_"+"PRINT_NUMBER".callmacro(vDem.ONB,"####"),1);
				}
			}
		}
	  }
	}}
	return rest.json(vResultVect); 
}

// La fonction retourne une hashtables des attributs du flux2
function _psi3_js2_set_attributes_rvsn(vLiv) {
	var attributes = new hashtable("string");
	attributes.set("VSNID", vLiv._PSI3_NF_S_LIV_ID_SOURCE); 
	attributes.set("RVSNDELIVERYPLACE", vLiv._PSI3_AA_S_LIV_LIEU_LIV); 
	if(vLiv._PSI3_LIV_NF_D_DEB_PUB == undefined)
		attributes.set("RVSNSTARTDATE", "");
	else 
		attributes.set("RVSNSTARTDATE", "PRINT_DATE".callmacro(vLiv._PSI3_LIV_NF_D_DEB_PUB,"AAAA-MM-JJ HH:MM:SS")); 
	if(vLiv._PSI3_LIV_NF_D_FIN_PUB == undefined)
		attributes.set("RVSNENDDATE", "");
	else 
		attributes.set("RVSNENDDATE", "PRINT_END_DATE".callmacro(vLiv._PSI3_LIV_NF_D_FIN_PUB,"AAAA-MM-JJ HH:MM:SS")); 
	attributes.set("SVREQUESTID", vLiv._PSI3_NF_LIV_DEM_LIEE); 
	attributes.set("RVSNNBOFUSAGEWORKINGDAYS", "PRINT_NUMBER".callmacro(vLiv._PSI3_LIV_NF_D_EFF_DU_EXP,"####"));
	attributes.set("RVSNSTATUS", vLiv._PSI3_LIV_NF_S_LIV_STATUS); 
	attributes.set("SVREQUESTCONFIGID", vLiv._PSI3_NF_S_CA_SUPCONFIGID); 
	attributes.set("SVNAME", vLiv._PSI3_NF_S_LIV_NOM_SV); 
	if(vLiv._PSI3_LIV_NF_DC_MADC == undefined)
		attributes.set("PUSEMADCDATE", "");
	else 
		attributes.set("PUSEMADCDATE", "PRINT_DATE".callmacro(vLiv._PSI3_LIV_NF_DC_MADC,"AAAA-MM-JJ HH:MM:SS"));
	// Date evenement : max entre date publication R_VSN et SV li  
	var vDateEv=vLiv._PSI3_DEL_NF_D_LAST_PUB;
	var vDatePubSV=vLiv._psi3_js_get_field_sv_from_liv("_PSI3_DEL_NF_D_LAST_PUB");
	if (vDateEv==undefined || vDateEv==-1 || (!(vDateEv instanceof date)) || (vDatePubSV instanceof date && vDateEv<vDatePubSV)) vDateEv=vDatePubSV;
	attributes.set("EVENTDATE", "PRINT_DATE".callmacro(vDateEv,"AAAA-MM-JJ HH:MM:SS")); 
	return attributes;
}

// US1567 :
// La fonction retourne un vector json pour la flux2 (exports des R_VSN)
function _psi3_js2_get_flux2_attributes(d_pub)
{
	var vResultVect = new vector();
	// hashtable pour  viter les doublons
	var vHashCheck=new hashtable("STRING");
	// on commence par les SV publi s
	var p_date=new date(d_pub,"JJ/MM/AA HH:MM");
	// on met la date dans le champ du contexte utilis e dans la NF _PSI3_NF_UA_B_LIV_EXPORT
	context._PSI3_AA_D_DEB_EXP_RVSN=p_date;
	// R_VSN uniquement
 	var plc._PSI3_PT_DELIV_TYPE vTypeVSN=plc._PSI3_PT_DELIV_TYPE.get("VSN");
	if (vTypeVSN instanceof plc._PSI3_PT_DELIV_TYPE)
	{
	 // on ne regarde pas les droits en lecture sur les livrables (perf)
	 with(plw.no_locking){
	  for (var plc._DEL_PT_DELIVERABLES vLiv in vTypeVSN.get("r._PSI3_RA_DELIV_TYPE._DEL_PT_DELIVERABLES")) 
	  {
		var vStatusSV=vLiv._psi3_js_get_field_sv_from_liv("_PSI3_LIV_AA_S_STATUS");
		var vLivPubSV=vLiv._psi3_js_get_field_sv_from_liv("_PSI3_DEL_NF_D_LAST_PUB");
		if (p_date instanceof date && ( (vLiv._PSI3_DEL_NF_D_LAST_PUB instanceof date && p_date<=vLiv._PSI3_DEL_NF_D_LAST_PUB) || (vLivPubSV instanceof date && p_date<=vLivPubSV && vStatusSV!=undefined && vStatusSV!="" && vStatusSV.search("10")==0) ))
		{
			// Filtre date unqiuement pour afficher des traces sur le d tail de la valeur du champ _PSI3_NF_UA_B_LIV_EXPORT
			plw.writetolog(vLiv.name +" - "+vLiv._PSI3_NF_UA_B_LIV_EXPORT);
			if (vLiv._PSI3_NF_UA_B_LIV_EXPORT==true)
			{
				// si pas d j  trait 
				if (vHashCheck.get("PRINT_NUMBER".callmacro(vLiv.ONB,"####"))==undefined)
				{
					vResultVect.push(_psi3_js2_set_attributes_rvsn(vLiv)); // cette fonction doit renvoyer une hashtable
					// on stocke les ONB pour ne pas envoyer des doublons
					vHashCheck.set("PRINT_NUMBER".callmacro(vLiv.ONB,"####"),1);
				}
			}
			else
			{
				try{
				var vBloc1="_PSI3_LIV_NF_B_HAS_ASS_CONT ET NON _PSI3_LIV_NF_S_PROJ_PROD_PUB DANS (\"PM1800320\")";
				var vBloc2="(_psi3_comp_date_field(\"_PSI3_NF_UA_D_DATE_MODIF_PUSE\",\"_PSI3_NF_UA_D_LAST_PUB\") <> 1 ET _psi3_comp_date_field(\"_PSI3_LIV_DA_DEM_LIEE_LAST_TRACE\",\"_PSI3_NF_UA_D_LAST_PUB\") <> 1)";
				var vBloc3="_psi3_comp_date_field(\"_PSI3_NF_UA_D_LAST_PUB\",\"_PSI3_LIV_DA_DEM_LAST_TRACE\") = 1";
				var vBloc4="_PSI3_RA_DELIV_TYPE = \"VSN\" ET _PSI3_LIV_DA_STATUT_SOURCE_LIV DANS (\"WAITING_PLAN\",\"ACCEPTED\",\"WAITING_DECISION\") ET GET_INTERNAL_VALUE(\"_PSI3_LIV_AA_S_STATUS\") <> \"70\"";
				plw.writeln(" -- BLOC 1 : "+vBloc1);
				plw.writeln(vLiv.callbooleanformula(vBloc1));
				plw.writeln(" -- BLOC 2 : "+vBloc2);
				plw.writeln(vLiv.callbooleanformula(vBloc2));
				plw.writeln(" ------ detail BLOC 2 : _PSI3_NF_UA_D_DATE_MODIF_PUSE : "+vLiv._PSI3_NF_UA_D_DATE_MODIF_PUSE.tostring("JJ/MM/AAAA HH:II:SS")+" -- _PSI3_NF_UA_D_LAST_PUB : "+vLiv._PSI3_NF_UA_D_LAST_PUB.tostring("JJ/MM/AAAA HH:II:SS")+" -- _PSI3_LIV_DA_DEM_LIEE_LAST_TRACE : "+vLiv.get("_PSI3_LIV_DA_DEM_LIEE_LAST_TRACE").tostring("JJ/MM/AAAA HH:II:SS"));
				plw.writeln(" -- BLOC 3 : "+vBloc3);
				plw.writeln(vLiv.callbooleanformula(vBloc3));
				plw.writeln(" -- BLOC 4 : "+vBloc4);
				plw.writeln(vLiv.callbooleanformula(vBloc4));
				}
				catch (error e)
				{
					plw.writeln("Error while writing details into logs on formula _PSI3_NF_UA_B_LIV_EXPORT: "+e);
				}
			}
		}
	  }
	}}
	return rest.json(vResultVect); 
}

// fonction g n rique d'appel du WS 
function _psi3_js2_get_validation_supports(vEntry)
{
	plw.writetolog("API _psi3_js2_get_validation_supports - start : "+vEntry);
	var vResult="";
	// recup des arguments en entr e
	var b_type=vEntry.b_type;
	var d_pub=vEntry.d_pub;
	if (b_type!=undefined && b_type!="" && d_pub!=undefined)
	{
		plw.writetolog("b_type : "+b_type);
		plw.writetolog("d_pub : "+d_pub);
		if (b_type.ToUpperCase()=="FORUM") vResult=_psi3_js2_get_flux4_attributes(d_pub);
		else if (b_type.ToUpperCase()=="PUSE") vResult=_psi3_js2_get_flux2_attributes(d_pub);
		else plw.writetolog(" _psi3_js2_get_validation_supports : "+b_type+" not valid!");
	}
	else plw.writetolog(" Error _psi3_js2_get_validation_supports with "+b_type);
	plw.writetolog("API _psi3_js2_get_validation_supports - end : "+vResult);
	return rest.parse(vResult);
}
// Mise   dispo du WS -> annul  pour passage API
// _psi3_js2_get_validation_supports.exportWebService(["String","String"], "String", "API Oneval - Get Validation supports");
// d finition de l'api
plw.writetolog("Definition API : _psi3_js2_get_validation_supports");
rest.defineapi("_psi3_js2_get_validation_supports",false,_psi3_js2_get_validation_supports);

// fonction appelant le shell de publication avec le delai en argument
function psi3_ojs_run_hook_publi(delay)
{
	
	if (delay!=undefined && delay instanceof number && delay>0)
	{
		plw.writetolog(" ------- Hook with delay : "+delay.tostring("####")+"s");
		plw.processSleep(delay);
		plw.writetolog(" ------- end of delay");
	}
	// appel du sh d clenchant le hook sans attendre de r ponse
	var string vReq="sh /$HOME/vcours/bin/gps_hook_oneval_publi_sv.sh";
	vReq.execute("",false);
	plw.writetolog(" --> Hook publication done");
}

// fonction d clenchant le hook sur publication D_SV / SV VEH
function psi3_js2_hook_publication_SV(vObj)
{
	// v rif Livrable ou lien conso
	if (vObj instanceof plc._DEL_PT_DELIVERABLES || vObj instanceof plc._DEL_PT_DELIV_LINKS)
	{
		// v rif du cache pour savoir si on a d j  lanc  un hook
		var vHookSend=plw.gettemporaryobject("HookPublication");
		if (vHookSend==undefined)
		{
			var boolean vVerif=false;
			//on v rif la formule utilisateur sur le SV et que le SV a une D_SV
			if (vObj instanceof plc._DEL_PT_DELIVERABLES) 
			{
				// verif type VEH
				if (vObj._PSI3_RA_DELIV_TYPE._PSI3_NF_B_TYPE_SV==true)
				{
					var vVectDem=plw._psi3_js_utils_ass_from_liv(vObj);
					if (vVectDem!=undefined && vVectDem.length>0)
					{
						//boolean forum pour le flux 4 -> US2477 : d sactiver
						//if (vObj._PSI3_NF_UA_B_FORUM==true) vVerif=true;
						// else 
						// pour le flux 2
						if (vObj._PSI3_LIV_AA_S_STATUS!=undefined && vObj._PSI3_LIV_AA_S_STATUS!="" && vObj._PSI3_LIV_AA_S_STATUS.search("10")==0)
						{
							// rattach    un R_VSN r pondant au filtre
							for (var vDem in vVectDem)
							{
								for(var vTemp in vDem.get("r._PSI3_RA_LINK_DEM._PSI3_PT_LIV_LINK_DEM") where vTemp._PSI3_RA_LINK_LIV._PSI3_NF_UA_B_LIV_EXPORT==true)
								{
									vVerif=true;
									break;
								}
							}
						}
					}
				}
				// ou R_VSN (flux 2
				else 
				if (vObj._PSI3_RA_DELIV_TYPE.printattribute()=="VSN")
				{
					// _PSI3_NF_UA_B_LIV_EXPORT=_PSI3_LIV_NF_B_HAS_ASS_CONT ET NON _PSI3_LIV_NF_S_PROJ_PROD_PUB DANS ("PM1800320") ET (_psi3_comp_date_field("_PSI3_NF_UA_D_DATE_MODIF_PUSE","_PSI3_NF_UA_D_LAST_PUB") <> 1 ET _psi3_comp_date_field("_PSI3_LIV_DA_DEM_LIEE_LAST_TRACE","_PSI3_NF_UA_D_LAST_PUB") <> 1) ET _psi3_comp_date_field("_PSI3_NF_UA_D_LAST_PUB","_PSI3_LIV_DA_DEM_LAST_TRACE") = 1 ET _PSI3_RA_DELIV_TYPE = "VSN" ET _PSI3_LIV_DA_STATUT_SOURCE_LIV DANS ("WAITING_PLAN","ACCEPTED","WAITING_DECISION","CANCELLED") ET NON GET_INTERNAL_VALUE("_PSI3_LIV_AA_S_STATUS") DANS ("70","10")
					vVerif=(vObj._PSI3_NF_UA_B_LIV_EXPORT==true) ? true : false;
				}
				else 
				if (vObj._PSI3_RA_DELIV_TYPE.printattribute()=="VA") // US8364 ???
				{
					// Conditions de publication ? Les status ?
					// DEBUG :
					vVerif=true;
				}
			}
			/* // US2477 : flux 4 d sactiv 
			else
			{
				// verif type VEH
				if (vObj._PSI3_RA_DELIV_TYPE._PSI3_NF_B_TYPE_SV==true)
				{
					var vLiv=plc._DEL_PT_DELIVERABLES.get(vObj._DEL_AA_N_DEL_ONB);
					if(vLiv instanceof plc._DEL_PT_DELIVERABLES && vLiv.internal==false)
					{
						vVerif=(vLiv._PSI3_NF_UA_B_FORUM==true) ? true : false;
					}
				}
			}
			*/
			if (vVerif==true)
			{
				// US8364 : export R_VA
				if (vObj._PSI3_RA_DELIV_TYPE.printattribute()=="VA")
				{
					// US8436 : si c'est la derni re publication du livrable, on export
					if(vObj instanceof plc._DEL_PT_DELIVERABLES && vObj.onb>0)
					{
						plw.writetolog(" --> API publication RVA");
						psi3_js2_flux2_export_rva(vObj);
						// on remplit le cache pour ne pas lancer d'autres hook durant cette transaction
						// 8572 : var string vHook = "Hook";
						// 8572 : vHook.storetemporaryobject("HookPublication");
					}
				}
                else
                {
					//var string vName = (vObj instanceof plc._DEL_PT_DELIVERABLES) ? vObj.printattribute() : vObj._PSI3_LIV_AA_S_NOM;
					plw.writetolog(" --> Hook publication");
					// si port finit par 0, c'est celui de l'API donc on envoie le hook imm diatement sinon on passe par un background avec un d lai (le temps que la transaction de publi soit relu par le port de l'API)
					var vPort=plw._psi3_port_intranet();
					if (vPort!=undefined && "ENDSUBSTRING".callmacro(vPort,1,0)=="0")
						psi3_ojs_run_hook_publi(undefined);
					else
					{
						var number vDelay=math.round(context._PSI3_NF_UA_N_DELAY_HOOK);
						var vTrait="namespace _oneval; psi3_ojs_run_hook_publi("+vDelay+");";
						var vDate=new date();
						var vDatestr=vDate.tostring("AAAA-MM-JJ HH:MM:SS");
						vDatestr= vDatestr.Replaceregexp(" ","_").Replaceregexp(":","");
						var vTraitName="HOOK_"+vDatestr;
						plw.runbackgroundprocess(vTraitName,vTrait,0);
					}
					// on remplit le cache pour ne pas lancer d'autres hook durant cette transaction
					var string vHook = "Hook";
					vHook.storetemporaryobject("HookPublication");
				}
			}
		}
	}
}

// fonction g rant le hook de GPS (Flux 1)
function _psi3_js2_webhook(vEntry)
{
	plw.writetolog("Hook _psi3_js2_webhook - start : "+vEntry);
	var vResult="";
	// recup des arguments en entr e
	var b_type=vEntry.b_type;
	plw.writetolog("--- b_type : "+b_type);
	if (b_type!=undefined && b_type!="")
	{
		var string vNameBatch="";
		if (b_type.ToUpperCase()=="VSN-PUBLICATION")
		{
			// on active le batch intranet flux 1
			vNameBatch="ONEVAL_IMPORT_DVSN_API_BATCH";
		}
		else plw.writetolog(" _psi3_js2_webhook : "+b_type+" not valid!");
		// si un batch a  t  activ , on le lance
		if (vNameBatch!=undefined && vNameBatch!="")
		{
			var vBatch=plc._INF_PT_REQ.get(vNameBatch);
			if (vBatch instanceof plc._INF_PT_REQ && vBatch.internal==false)
			{
				// on simule le clic sur Executer
				vBatch.callmacro("_BA_TO_EXEC_BATCH");
			}
		}
	}
	else plw.writetolog(" Error _psi3_js2_webhook with "+b_type);
	plw.writetolog("Hook _psi3_js2_webhook - end");
	return rest.parse(vResult);
}
// d finition de l'api
plw.writetolog("Definition Hook GPS: _psi3_js2_webhook");
rest.defineapi("_psi3_js2_webhook",false,_psi3_js2_webhook);

// US2434 : La fonction retourne une hashtables de correspondances des attributs flux1 (json-TT)
function _psi3_js2_set_flux1_attr_ht() {
	var flux1_attr_ht = new hashtable("string");
	// on ignore parentIdVsnNumber
	flux1_attr_ht.set("id","_PSI3_TT_S_DEM_ID_SOURCE");
	flux1_attr_ht.set("idVsnNumber","_PSI3_TT_S_CA_VSN_NUMBER");
	flux1_attr_ht.set("customerName","_PSI3_TT_S_DEM_CLIENT");
	flux1_attr_ht.set("customerIpn","_PSI3_TT_S_DEM_CLI_IPN");
	flux1_attr_ht.set("technicalDefinitionGap","_PSI3_TT_S_DEM_ECART_DT");
	flux1_attr_ht.set("validationActivityName","_PSI3_TT_S_DEM_TYP_VALID");
	flux1_attr_ht.set("requirement","_PSI3_TT_S_DEM_RISK_LEVER");
	flux1_attr_ht.set("nature","_PSI3_LIV_TT_NATURE_SV");
	flux1_attr_ht.set("mandatoryOptions","_PSI3_TT_S_OPT_OBLIG");
	flux1_attr_ht.set("forbiddenOptions","_PSI3_TT_S_DEM_OPT_INTERD");
	flux1_attr_ht.set("batchTypeName","_PSI3_LIV_TT_TYPVAG");
	flux1_attr_ht.set("batchNumberName","_PSI3_TT_S_DEM_LOT_VAGUE");
	flux1_attr_ht.set("deliveryDateMilestoneName","_PSI3_TT_DEM_JAL_TOT");
	flux1_attr_ht.set("deliveryDate","_PSI3_TT_DU_DEM_DELAI_TOT");
	flux1_attr_ht.set("numberOfUsageWorkingDays","_PSI3_TT_DU_DEM_DUREE_DEM");
	flux1_attr_ht.set("deliveryPlace","_PSI3_TT_S_DEM_LIEU_LIV");
	flux1_attr_ht.set("importantCharacteristics","_PSI3_TT_S_DEM_CARACT_IMP");
	flux1_attr_ht.set("comment","_PSI3_LIV_TT_S_RMQ");
	flux1_attr_ht.set("outOfTspr","_PSI3_TT_B_HORS_RPSE");
	flux1_attr_ht.set("parentId","_PSI3_TT_S_DEM_CONT_ID_S");
	flux1_attr_ht.set("conditionOfTheSupportAfterTest","_PSI3_TT_S_DEM_ETAT_SUPP");
	flux1_attr_ht.set("damagesDescription","_PSI3_TT_S_DEM_DESC_DEG");
	flux1_attr_ht.set("status","_PSI3_TT_STATUT_SOURCE");
	flux1_attr_ht.set("requesterFunctionName","_PSI3_TT_S_DEM_DESC_DEM");
	flux1_attr_ht.set("configName","_PSI3_TT_S_DEM_NOM_CONFIG");
	flux1_attr_ht.set("configId","_PSI3_TT_S_DEM_SUP_CONFIG");
	flux1_attr_ht.set("validationProjectCode","_PSI3_LIV_TT_FAMILLE");
	flux1_attr_ht.set("engine","_PSI3_TT_DEM_TYP_MOT_ALLC");
	flux1_attr_ht.set("gearbox","_PSI3_TT_DEM_TYP_CC_ALLCE");
	flux1_attr_ht.set("battery","_PSI3_TT_DEM_TYP_BT_ALLCE");
	flux1_attr_ht.set("enginePower","_PSI3_TT_N_POWER");
	flux1_attr_ht.set("handle","_PSI3_TT_DEM_DR_COTE");
	flux1_attr_ht.set("axle","_PSI3_TT_DEM_TRANS");
	flux1_attr_ht.set("suspension","_PSI3_TT_S_DEM_SUSP");
	flux1_attr_ht.set("body","_PSI3_LIV_TT_CAISSE");
	flux1_attr_ht.set("optionalTests","_PSI3_TT_S_DEM_OPT_TEST");
	flux1_attr_ht.set("dimensions","_PSI3_TT_DEM_DIM");
	flux1_attr_ht.set("numberOfRow","_PSI3_TT_N_DEM_NB_RANG");
	flux1_attr_ht.set("grossVehicleWeight","_PSI3_TT_DEM_MMAC");
	flux1_attr_ht.set("emissionLevel","_PSI3_TT_DEM_CODE_DEPOL");
	flux1_attr_ht.set("equipmentLevel","_PSI3_TT_DEM_NIV_EQPT");
	flux1_attr_ht.set("deadlineDeliveryDateMilestoneName","_PSI3_TT_DEM_JAL_TARD");
	flux1_attr_ht.set("deadlineDeliveryDate","_PSI3_TT_DU_DEM_DEL_TARD");
	flux1_attr_ht.set("market","_PSI3_TT_DEM_PAYS_COM");
	flux1_attr_ht.set("validationProject","_PSI3_TT_DEM_PRJ_VALID");
	flux1_attr_ht.set("engineRenault","_PSI3_LIV_TT_MOT");
	flux1_attr_ht.set("gearboxRenault","_PSI3_LIV_TT_CC");
	flux1_attr_ht.set("batteryRenault","_PSI3_LIV_TT_BT");
	flux1_attr_ht.set("projectId","_PSI3_TT_DEM_ID_PRJ_VALID");
	// US6969 : ajout de champs
	flux1_attr_ht.set("brand","_PSI3_TT_S_MARQUE");
	flux1_attr_ht.set("batteryCharger","_PSI3_TT_N_CHRGR_BT");
	flux1_attr_ht.set("batteryCapacity","_PSI3_TT_N_CAPA_BT");
	flux1_attr_ht.set("engineIndice","_PSI3_TT_DEM_IND_MOT");
	flux1_attr_ht.set("gearboxIndice","_PSI3_TT_DEM_IND_CC");
	flux1_attr_ht.set("batteryIndice","_PSI3_TT_DEM_IND_BT");
	// US8270 : ajout beNeed
	flux1_attr_ht.set("beNeed","_PSI3_TT_B_BESOIN_BE");

	return flux1_attr_ht;
}

// US2434 : retourn l'erreur d'API
function psi3_js2_flux1_api_err(vErrList)
{
	var vector vJsonErrField=new vector("errorCode","message","requestUrl","documentationUrl");
	var s_err="";
	for (var vObj in vErrList)
	{
		for (var vField in vJsonErrField)
		{
			var s_Field_value=(vObj.get(vField)!=undefined && vObj.get(vField)!="Null" && vObj.get(vField)!=NIL) ? vObj.get(vField) : "";
			if(s_err=="")
				s_err=s_Field_value;
			else
				s_err=s_err+" - "+s_Field_value;
		}
	}
	s_err="Code="+s_err;
	return s_err;
}

// US7807 : Retourne marque avec code interface re u d'Oneval
function psi3_js2_calcule_dvsn_marque(vObj,vField)
{
	var result="";
	var vValueTemp=(vObj.get(vField)!=undefined && vObj.get(vField)!="Null" && vObj.get(vField)!=NIL) ? vObj.get(vField) : ""; 
	if(vValueTemp!="")
	{
		var tablekey_mrq = new plw.keyattribute(plc._PSI3_PT_REFERENTIEL,"_PSI3_AA_S_CODE_INTERFACE",vValueTemp);
		with(tablekey_mrq.fromobject())
		{
			for (var vMrq in plc._PSI3_PT_REFERENTIEL where vMrq.Parent.name=="Badge" && vMrq._PSI3_AA_S_CODE_INTERFACE==vValueTemp)
			{
				result=vMrq.name; 
			}
		}
	} 
	return result;
}

// US2434 : Charger les D_VSN recup r es via API dans TT
function psi3_js2_flux1_charge_dvsn(flux1_attr_ht)
{
	var res_api="";
	var b_debug=false; // DEBUG
	var vResult=false;
	var vJsonObj=undefined;
	
	var string vDateImport=context._PSI3_AA_D_LAST_UPD_DVSN;
	if(b_debug)
		vResult = true; //DEBUG
	else
	{
		// Appel de l'API
		plw.writetolog("Appel Shell gps_api_oneval_new.sh avec date _PSI3_AA_D_LAST_UPD_DVSN : "+vDateImport);
		var string vReq="sh /$HOME/vcours/bin/gps_api_oneval_new.sh 'IMPORT_VSN' "+vDateImport;
		vResult = systemklib.commandoutput(vReq); 
		plw.writetolog("Retour Shell gps_api_oneval_new.sh : "+vResult);
	}
	if (vResult!=false)
	{
		// recup du r sultat
		if(b_debug)
		{
			//DEBUG : simuler le retour d'API
			var vTest=psi3_js2_debug_flux1_json();
			vJsonObj=rest.parse(vTest); 
		} else {
			vJsonObj=rest.parse(vResult[0]);
		}
		//Si erreur est retourn  par API :
		if(vJsonObj.get("errors")!=undefined)
		{
			var vErrList=vJsonObj.get("errors");
			res_api=psi3_js2_flux1_api_err(vErrList);
		} else {
			// objet liste des D_VSN
			var vDvsnList=vJsonObj;
			if (vDvsnList!=undefined && vDvsnList!="")
			{
				var s_ListUpdDates="";
				// liste des attributs   r cup rer
				// US6969;8270 : ajout de nouveaux champs
				var vector vListJsonField=new vector("id","idVsnNumber","customerName","customerIpn","technicalDefinitionGap","validationActivityName","requirement","nature","mandatoryOptions","forbiddenOptions","batchTypeName","batchNumberName","deliveryDateMilestoneName","deliveryDate","numberOfUsageWorkingDays","deliveryPlace","importantCharacteristics","comment","outOfTspr","parentId","parentIdVsnNumber","conditionOfTheSupportAfterTest","damagesDescription","status","requesterFunctionName","configName","configId","validationProjectCode","engine","gearbox","battery","enginePower","handle","axle","suspension","body","optionalTests","dimensions","numberOfRow","grossVehicleWeight","emissionLevel","equipmentLevel","deadlineDeliveryDateMilestoneName","deadlineDeliveryDate","market","validationProject","engineRenault","gearboxRenault","batteryRenault","brand","batteryCharger","batteryCapacity","engineIndice","gearboxIndice","batteryIndice","projectId","lastModifiedDate","dateChangeStatus","beNeed");
				// pour chaque D_VSN :
				for (var vObj in vDvsnList)
				{
					// liste de attributs de TT
					var vector vArgCrea=new vector();
					for (var vField in vListJsonField)
					{
						var vValue=(vObj.get(vField)!=undefined && vObj.get(vField)!=NIL && vObj.get(vField)!="") ? vObj.get(vField) : "";
						if (vValue instanceof string && vValue.touppercase()=="NULL") vValue="";
						//gestion des booleens
						if (vValue!=undefined && vValue!="" && vValue instanceof string)
						{
							if (vValue.touppercase()=="TRUE") vValue=true;
							else if (vValue.touppercase()=="FALSE") vValue=false;
						}
						if(vValue!="" && (vField=="lastModifiedDate" || vField=="dateChangeStatus"))
						{
							// Sauvegarder les dates de modif de toutes les D_VSN :
							if(s_ListUpdDates=="")
								s_ListUpdDates=vValue;
							else
								s_ListUpdDates=s_ListUpdDates+","+vValue;
						} else if(vField!="parentIdVsnNumber") // On ignore  parentIdVsnNumber
							{
								if(vField=="brand") // US2690->7807 : si Marque on r cup re le r f rentiel (via le code interface)
								{
									vValue=psi3_js2_calcule_dvsn_marque(vObj,vField);
								} 
								// Remplir la liste de attributs de TT
								//nom du champ dans TT :
								var vFieldName=flux1_attr_ht.get(vField);
								vArgCrea.push(vFieldName);
								//valeur du champ
								vArgCrea.push(vValue);
							}
					}
					// Cr er une ligne D_VSN dans la TT
					var vNewTemp=plc._PSI3_TT_VSN_IMPORT_BATCH.makeopx2objectwithplist(vArgCrea);
				}
				// on sauvegarde la date de derniere modif des D_VSN import es dans le champ context
				if(s_ListUpdDates!="")
				{
					if(s_ListUpdDates.parselist().length>0)
					{
						var vector vListUpdDatesTrie=new vector();
						// On trie
						vListUpdDatesTrie=context.callstringformula("LISTE_TRI(\""+s_ListUpdDates+"\")");
						var i_last=vListUpdDatesTrie.parselist().length-1;
						// et on sauvegarde la plus grande
						context._PSI3_AA_D_LAST_UPD_DVSN=vListUpdDatesTrie.parselist()[i_last];
						plw.writetolog("Nouvelle date _PSI3_AA_D_LAST_UPD_DVSN : "+context._PSI3_AA_D_LAST_UPD_DVSN);
					} 
				}	
			}
		}
	}
	return res_api;
}

// US2434 : Fonction de simulation pour tester l'import sans l'acces   l'API (mode DEBUG) 
function psi3_js2_debug_flux1_json()
{
	// Test 500_error.json :
	//var vTest="{\"errors\": [    {      \"errorCode\": 999159856,      \"message\": \"Unparseable date: BAD_FORMAT\",      \"requestUrl\": \"/api/engineering/prototype/v1/companies/renault/validationsupportneeds\",      \"documentationUrl\": null    }  ]}";

	// Test 200_ok.json :
	var vTest="{\"values\": [{ \"id\": \"2c91808d647f83d30164838bfa8c002f\",    \"idVsnNumber\": \"XHP-Kadjar-00456\",    \"customerName\": null,    \"customerIpn\": null,    \"technicalDefinitionGap\": \"nouvelle face avant\",   \"validationActivityName\": null,    \"requirement\": \"demarrage   froid\",    \"nature\": \"V\",    \"mandatoryOptions\": \"CAREG\",    \"forbiddenOptions\": \"CAMAN\",    \"batchTypeName\": \"\",    \"batchNumberName\": null,   \"deliveryDateMilestoneName\": \"ABPT1\",    \"deliveryDate\": -15,   \"numberOfUsageWorkingDays\": 25,   \"deliveryPlace\": \"KIRUNA\",    \"importantCharacteristics\": \"\",    \"comment\": \"\",    \"outOfTspr\": false,   \"parentId\": null,    \"parentIdVsnNumber\": \"\",    \"conditionOfTheSupportAfterTest\": \"DAMAGING_TEST\",    \"damagesDescription\": \"face avant\",    \"status\": \"ACCEPTED\",    \"requesterFunctionName\": \"DEA-M\",    \"configName\": \"FULL PFC lot : config 1\",    \"configId\": \"171f50b8-c44a-480e-b8c3-3e35ca3f65c6\",    \"validationProjectCode\": \"XHP\",    \"engine\": \"MR15DDT\",    \"gearbox\": \"FK33\",    \"battery\": null,    \"enginePower\": \"150\",    \"handle\": \"LHDG\",    \"axle\": \"A2X2\",    \"suspension\": \"Standard\",    \"body\": null,    \"optionalTests\": null,    \"dimensions\": null,    \"numberOfRow\": 1,    \"grossVehicleWeight\": null,    \"emissionLevel\": \"E06U\",    \"equipmentLevel\": \"\",    \"deadlineDeliveryDateMilestoneName\": \"CF\",    \"deadlineDeliveryDate\": -5,    \"market\": null,    \"validationProject\": \"XHP-Kadjar\",    \"engineRenault\": null,    \"gearboxRenault\": null,    \"batteryRenault\": null,    \"projectId\": \"39416543-6b07-4e92-afd5-afacb1f18975\",    \"lastModifiedDate\": \"2019-07-12T09:56:42.000+0000\",    \"dateChangeStatus\": \"2018-07-11T09:56:42.582+0000\" },{\"id\": \"e7f0d01e-fe2a-4af5-b1e2-5c5ea1883280\",    \"idVsnNumber\": \"XHP-Kadjar-00457\",    \"customerName\": null,    \"customerIpn\": null,    \"technicalDefinitionGap\": \"nouvelle face avant\",    \"validationActivityName\": null,    \"requirement\": \"demarrage   froid\",    \"nature\": \"V\",    \"mandatoryOptions\": \"CAREG\",    \"forbiddenOptions\": \"CAMAN\",    \"batchTypeName\": \"\",    \"batchNumberName\": null,    \"deliveryDateMilestoneName\": \"ABPT1\",    \"deliveryDate\": -15,    \"numberOfUsageWorkingDays\": 25,    \"deliveryPlace\": \"KIRUNA\",    \"importantCharacteristics\": \"\",    \"comment\": \"\",    \"outOfTspr\": false,    \"parentId\": null,    \"parentIdVsnNumber\": \"\",    \"conditionOfTheSupportAfterTest\": \"DAMAGING_TEST\",    \"damagesDescription\": \"face avant\",    \"status\": \"ACCEPTED\",    \"requesterFunctionName\": \"DEA-M\",    \"configName\": \"FULL PFC lot : config 1\",    \"configId\": \"171f50b8-c44a-480e-b8c3-3e35ca3f65c6\",    \"validationProjectCode\": \"XHP\",    \"engine\": \"MR15DDT\",    \"gearbox\": \"FK33\",    \"battery\": null,    \"enginePower\": \"150\",    \"handle\": \"LHDG\",    \"axle\": \"A2X2\",    \"suspension\": \"Standard\",    \"body\": null,    \"optionalTests\": null,    \"dimensions\": null,    \"numberOfRow\": 1,    \"grossVehicleWeight\": null,    \"emissionLevel\": \"E06U\",    \"equipmentLevel\": \"\",    \"deadlineDeliveryDateMilestoneName\": \"CF\",    \"deadlineDeliveryDate\": -5,    \"market\": null,    \"validationProject\": \"XHP-Kadjar\",    \"engineRenault\": null,    \"gearboxRenault\": null,    \"batteryRenault\": null,    \"projectId\": \"39416543-6b07-4e92-afd5-afacb1f18975\",    \"lastModifiedDate\": \"2019-07-10T09:56:42.000+0000\",    \"dateChangeStatus\": \"2018-07-09T09:56:42.582+0000\"}]}";
	//var vTest="[{ \"id\": \"2c91808d647f83d30164838bfa8c002f\",\"idVsnNumber\": \"XHP-Kadjar-00456\",\"customerName\": null,\"customerIpn\": null,\"technicalDefinitionGap\": \"nouvelle face avant\",\"validationActivityName\": null,\"requirement\": \"demarrage   froid\",\"nature\": \"V\",\"mandatoryOptions\": \"CAREG\",\"forbiddenOptions\": \"CAMAN\",\"batchTypeName\": \"\",\"batchNumberName\": null,\"deliveryDateMilestoneName\": \"ABPT1\",\"deliveryDate\": -15,\"numberOfUsageWorkingDays\": 25,\"deliveryPlace\": \"KIRUNA\",\"importantCharacteristics\": \"\",\"comment\": \"\",\"outOfTspr\": false,\"parentId\": null,\"parentIdVsnNumber\": \"\",\"conditionOfTheSupportAfterTest\": \"DAMAGING_TEST\",\"damagesDescription\": \"face avant\",\"status\": \"ACCEPTED\",\"requesterFunctionName\": \"DEA-M\",\"configName\": \"FULL PFC lot : config 1\",\"configId\": \"171f50b8-c44a-480e-b8c3-3e35ca3f65c6\",\"validationProjectCode\": \"XHP\",\"engine\": \"MR15DDT\",\"gearbox\": \"FK33\",\"battery\": null,\"enginePower\": \"150\",\"handle\": \"LHDG\",\"axle\": \"A2X2\",\"suspension\": \"Standard\",\"body\": null,\"optionalTests\": null,\"dimensions\": null,\"numberOfRow\": 1,\"grossVehicleWeight\": null,\"emissionLevel\": \"E06U\",\"equipmentLevel\": \"EA1\",\"deadlineDeliveryDateMilestoneName\": \"CF\",\"deadlineDeliveryDate\": -5,\"market\": null,\"validationProject\": \"XHP-Kadjar\",\"engineRenault\": null,\"gearboxRenault\": null,\"batteryRenault\": null,\"projectId\": \"39416543-6b07-4e92-afd5-afacb1f18975\",\"lastModifiedDate\": \"2019-07-10T09:56:42.000+0000\",\"dateChangeStatus\": \"2018-07-10T09:56:42.582+0000\"}]";

	// Test M j status Rvsn si status=WAITING_PLAN : D_VSN18014367; R_VSN18001551; PM1800862
	//var vTest="{\"values\": [{ \"id\": \"9580a0ec63d079450163d0afe13c0453\",\"idVsnNumber\": \"X62-00386\",\"customerName\": null,\"customerIpn\": null,\"technicalDefinitionGap\": \"nouvelle face avant\",\"validationActivityName\": null,\"requirement\": \"demarrage   froid\",\"nature\": \"V\",\"mandatoryOptions\": \"CAREG\",\"forbiddenOptions\": \"CAMAN\",\"batchTypeName\": \"\",\"batchNumberName\": null,\"deliveryDateMilestoneName\": \"ABPT1\",\"deliveryDate\": -15,\"numberOfUsageWorkingDays\": 25,\"deliveryPlace\": \"KIRUNA\",\"importantCharacteristics\": \"\",\"comment\": \"\",\"outOfTspr\": false,\"parentId\": null,\"parentIdVsnNumber\": \"\",\"conditionOfTheSupportAfterTest\": \"DAMAGING_TEST\",\"damagesDescription\": \"face avant\",\"status\": \"WAITING_PLAN\",\"requesterFunctionName\": \"DEA-M\",\"configName\": \"FULL PFC lot : config 1\",\"configId\": \"171f50b8-c44a-480e-b8c3-3e35ca3f65c6\",\"validationProjectCode\": \"X62\",\"engine\": \"MR15DDT\",\"gearbox\": \"FK33\",\"battery\": null,\"enginePower\": \"150\",\"handle\": \"LHDG\",\"axle\": \"A2X2\",\"suspension\": \"Standard\",\"body\": null,\"optionalTests\": null,\"dimensions\": null,\"numberOfRow\": 1,\"grossVehicleWeight\": null,\"emissionLevel\": \"E06U\",\"equipmentLevel\": \"\",\"deadlineDeliveryDateMilestoneName\": \"CF\",\"deadlineDeliveryDate\": -5,\"market\": null,\"validationProject\": \"XHP-Kadjar\",\"engineRenault\": \"M9T\",\"gearboxRenault\": \"PF6\",\"batteryRenault\": null,\"projectId\": \"39416543-6b07-4e92-afd5-afacb1f18975\",\"lastModifiedDate\": \"2019-07-10T09:56:42.000+0000\",\"dateChangeStatus\": \"2018-07-10T09:56:42.582+0000\"}]}";
	
	return vTest;
}

// US2434 : fonction g rant l'import des d_vsn via API
function psi3_js2_import_api_d_vsn()
{
	var NbrTotal=0;
	var NbrKO=0;
	var MsgKO="";
	var vFileNameIn = context._PSI3_NF_S_ONEVAL_FILENAME;
	
	plw.writetolog(" --- D but de l'import des D_VSN par API --- ");
	
	// verif si autre batch d j  en cours : si les 2 sont verrouill s on stop
	var vBatchName1="ONEVAL_IMPORT_DVSN_API_BATCH";
	var vBatchName2="ONEVAL_IMPORT_DVSN_API_BATCH_STARTUP";
	if (plw._ba_sql_select_lock_NF(vBatchName1)==true && plw._ba_sql_select_lock_NF(vBatchName2)==true)
	{
		plw.writetolog(" --- Fin de l'import des D_VSN --- : un autre import est deja en cours");
		return false;
	}

	// liste des champs r f rentiels   v rifier 
	// US6969 : ajout de nouveaux champs
	var vector vFieldRA=new vector("_PSI3_LIV_RA_NATURE_SV","_PSI3_LIV_RA_TYPVAG","_PSI3_RA_DEM_JAL_TOT","_PSI3_LIV_RA_FAMILLE","_PSI3_LIV_RA_MOT","_PSI3_LIV_RA_CC","_PSI3_LIV_RA_BT",
	                        "_PSI3_RA_DEM_DR_COTE","_PSI3_RA_DEM_TRANS","_PSI3_LIV_RA_CAISSE","_PSI3_RA_DEM_DIM","_PSI3_RA_DEM_MMAC","_PSI3_RA_DEM_CODE_DEPOL","_PSI3_RA_DEM_NIV_EQPT",
							"_PSI3_RA_DEM_JAL_TARD","_PSI3_RA_DEM_PAYS_COM","_PSI3_RA_STATUT_SOURCE","_PSI3_RA_DEM_TYP_CC_ALLCE","_PSI3_RA_DEM_TYP_BT_ALLCE","_PSI3_RA_DEM_TYP_MOT_ALLC",
							"_PSI3_RA_DEM_IND_MOT","_PSI3_RA_DEM_IND_CC","_PSI3_RA_DEM_IND_BT","_PSI3_RA_S_MARQUE");
							//US1430;US2434 :
							//"_PSI3_RA_DEM_INSTRUM","_PSI3_RA_DEM_PRECIS_BT","_PSI3_RA_DEM_IND_MOT","_PSI3_RA_DEM_IND_CC","_PSI3_RA_DEM_IND_BT");

							
	// hashtable des champs   v rif
	var vHash=new hashtable("STRING");
	vHash=plw._psi3_js_hashtable_regle_attribut("_DEL_PT_DELIV_LINKS","psi3_ojs_import_d_vsn");
	
	plw.writetolog(" - 01. Vider la table temporaire - ");
	for (var vTemp in plc._PSI3_TT_VSN_IMPORT_BATCH)
		with(plw.no_locking) { vTemp.delete(); }
	
	plw.writetolog(" - 02. Import des donn es via api - ");
	// Hashtables de correspondances des attributs flux1 (json - TT)
	var flux1_attr_ht = new hashtable("string");
	flux1_attr_ht=_psi3_js2_set_flux1_attr_ht();
	// Import des donn es via api dans TT
	var res_api=psi3_js2_flux1_charge_dvsn(flux1_attr_ht);
	if(res_api!="")
		plw.writetolog(" - ERREUR Import des D_VSN via API - : " + res_api);
	else {	
		plw.writetolog(" - 03. Traitement de la table temp - ");
		for (var vObj in plc._PSI3_TT_VSN_IMPORT_BATCH)
		{
			MsgKO="";
			// ctrl des D_VSN import es et m j des demandes VSN
			MsgKo=plw.psi3_ojs_ctrl_maj_d_vsn_imp_api(vObj,vFieldRA,vHash,"");
			NbrTotal++;

			// on  crit dans le fichier de sortie 
			if(MsgKO!="")
			{
				NbrKO++;
				plw.writetolog(" - ERREUR Import des D_VSN - " + vObj._PSI3_TT_S_DEM_ID_SOURCE + " - " + vObj._PSI3_TT_S_CA_VSN_NUMBER + " n'est pas import e : " + MsgKO);
			}	
		}
		plw.writetolog(NbrTotal + " D_VSN trait es; " + NbrKO + " non import s");
	}
	vHash.clear();
	flux1_attr_ht.clear();
	plw.writetolog(" --- Fin de l'import des D_VSN --- : "+NbrTotal + " D_VSN trait es; " + NbrKO + " non import s");
}
psi3_js2_import_api_d_vsn.exportfunction();

// US2618 :
function psi3_js2_sel_config_support()
{
	var ht_pv=new hashtable("STRING");
	// US2618 : on definie la hashtable des projets de validations des demandes s lectionn es
	ht_pv=_psi3_js2_vect_prj_valid_sel_d_sv();
	
	// on vide la table temp pour ce user et la liste de conf sauvegard e dans le context
	var string vUser=context.callstringformula("$CURRENT_USER").ToUpperCase();
	for (var vTemp in plc._PSI3_TT_CONFIG_SUPPORT_V2 where vTemp.USER.ToUpperCase()==vUser) // && vTemp.ONB_DEMANDE==vDL.ONB)
	{
		with(plw.no_locking) { vTemp.delete(); }
	}
	context._PSI3_AA_S_TEMP_CS_NOM_LST="";
	context._PSI3_AA_S_FILTRE_DEM_INI="";

	for(var vPRJ_id in ht_pv)
		psi3_js2_charge_config_support(vPRJ_id,ht_pv.get(vPRJ_id));


	// Ouvrir le formulaire
	var vLink = new hyperlink("Fvalue",       
							"Attribute","ID",       
							"EditorType","_PSI3_RE_POPUP_SEL_CONFIG_SUPPORT",       
							"popup",true);       
	vLink.go(Context);
	ht_pv.clear();
}
psi3_js2_sel_config_support.exportfunction();

// US2618 : M j conf support sur les D_SV coch es
function psi3_ojs_config_support_selected_2()
{
	// US2618 : on definie le vector de demandes coch es
	var list_DSV=new vector();
	list_DSV=context._PSI3_AA_S_TEMP_CS_DL_LST.parselist(); 
	
	var vSelectedConfig=this.object;
	if(vSelectedConfig instanceof plc._PSI3_TT_CONFIG_SUPPORT_V2)
	{
		for(var DL_onb in list_DSV)
		{
			// US2229 : M j de chaque demande s lectionn e avant l'ouverture du formulaire avec config de support s lectionn e dans le formulaire
			var DL_select=plc._DEL_PT_DELIV_LINKS.get(DL_onb.parsenumber("####"));
			if(DL_select instanceof plc._DEL_PT_DELIV_LINKS)
			{
				// US1988 : EnginePower est maintenant un nombre 
				//var number vPower=(vSelectedConfig.ENGINEPOWER!=undefined && vSelectedConfig.ENGINEPOWER!="") ? vSelectedConfig.ENGINEPOWER.parsenumber("####") : 0;
				var number vPower=vSelectedConfig.ENGINEPOWER;
				//mise   jour des champs avec catch des champs non mis   jour via la function psi3_ojs_maj_dl
				with(plw.no_alerts) {psi3_ojs_maj_dl(DL_select,"_PSI3_AA_S_DEM_SUP_CONFIG",vSelectedConfig.NAME);} // US7381 : pour ne pas decloncher l'alerte de m j des D_SV CUK 
				psi3_ojs_maj_dl(DL_select,"_PSI3_AA_S_DEM_NOM_CONFIG",vSelectedConfig.CONFIGNAME);
				psi3_ojs_maj_dl(DL_select,"_PSI3_RA_DEM_TRANS",vSelectedConfig.AXLE);
				psi3_ojs_maj_dl(DL_select,"_PSI3_RA_DEM_TYP_BT_ALLCE",vSelectedConfig.BATTERY);
				psi3_ojs_maj_dl(DL_select,"_PSI3_LIV_RA_BT",vSelectedConfig.BATTERYRENAULT);
				psi3_ojs_maj_dl(DL_select,"_PSI3_RA_DEM_IND_BT",vSelectedConfig.BATTERYINDICE); //US1430
				psi3_ojs_maj_dl(DL_select,"_PSI3_LIV_RA_CAISSE",vSelectedConfig.BODY);
				psi3_ojs_maj_dl(DL_select,"_PSI3_RA_DEM_DIM",vSelectedConfig.DIMENSIONS);
				psi3_ojs_maj_dl(DL_select,"_PSI3_RA_DEM_CODE_DEPOL",vSelectedConfig.EMISSIONLEVEL);
				psi3_ojs_maj_dl(DL_select,"_PSI3_RA_DEM_TYP_MOT_ALLC",vSelectedConfig.ENGINE);
				psi3_ojs_maj_dl(DL_select,"_PSI3_LIV_RA_MOT",vSelectedConfig.ENGINERENAULT);
				psi3_ojs_maj_dl(DL_select,"_PSI3_RA_DEM_IND_MOT",vSelectedConfig.ENGINEINDICE); //US1430
				psi3_ojs_maj_dl(DL_select,"_PSI3_AA_N_POWER",vPower);
				psi3_ojs_maj_dl(DL_select,"_PSI3_RA_DEM_NIV_EQPT",vSelectedConfig.EQUIPMENTLEVEL);
				psi3_ojs_maj_dl(DL_select,"_PSI3_RA_DEM_TYP_CC_ALLCE",vSelectedConfig.GEARBOX);
				psi3_ojs_maj_dl(DL_select,"_PSI3_LIV_RA_CC",vSelectedConfig.GEARBOXRENAULT);
				psi3_ojs_maj_dl(DL_select,"_PSI3_RA_DEM_IND_CC",vSelectedConfig.GEARBOXINDICE); //US1430
				psi3_ojs_maj_dl(DL_select,"_PSI3_RA_DEM_MMAC",vSelectedConfig.GROSSVEHICLEWEIGHT);
				psi3_ojs_maj_dl(DL_select,"_PSI3_RA_DEM_DR_COTE",vSelectedConfig.HANDLE);
				psi3_ojs_maj_dl(DL_select,"_PSI3_RA_DEM_PAYS_COM",vSelectedConfig.MARKET);
				psi3_ojs_maj_dl(DL_select,"_PSI3_AA_N_DEM_NB_RANG",vSelectedConfig.NUMBEROFROW);
				psi3_ojs_maj_dl(DL_select,"_PSI3_AA_S_DEM_OPT_TEST",vSelectedConfig.OPTIONALTESTS);
				psi3_ojs_maj_dl(DL_select,"_PSI3_AA_S_DEM_SUSP",vSelectedConfig.SUSPENSION); 
				// US7458 :
				psi3_ojs_maj_dl(DL_select,"_PSI3_RA_S_MARQUE",vSelectedConfig.MARQUE); 
				psi3_ojs_maj_dl(DL_select,"_PSI3_AA_N_CHRGR_BT",vSelectedConfig.CHRGR_BT); 
				psi3_ojs_maj_dl(DL_select,"_PSI3_AA_N_CAPA_BT",vSelectedConfig.CAPA_BT); 
			}
		}
	} 
}

// US6972 : M j des champs config support sur une D_SV par appel de l'API
function psi3_js2_maj_conf_support_dsv_api(vDL,vConfSup) 
{
	if (vDL instanceof plc._DEL_PT_DELIV_LINKS && vDL.internal==false)
	{
		plw.writetolog(">>>>> CONFIG_SUPPORT_DETAIL : MAJ des champs config support sur une D_SV par API : "+vDL._PSI3_LIV_AA_S_NOM);
		if(vConfSup=="")
		{
			plw.writetolog(" CONFIG_SUPPORT_DETAIL : Erreur : ID conf supp est vide");
			return;
		}
		// V rifier si la conf est d j  dans le cache :
		//plw.alert("DEBUG : V rifier si la conf est d j  dans le cache");
		var vObjCS=plw.gettemporaryobject(vConfSup);
		if (vObjCS==undefined)
		{
			plw.writetolog(" CONFIG_SUPPORT_DETAIL : Appel de l'API avec : --"+vConfSup+"--");
			// Appel de l'API avec le premier arguemnt CONFIG_SUPPORT 
			var string vReq="sh /$HOME/vcours/bin/gps_api_oneval_new.sh 'CONFIG_SUPPORT_DETAIL' "+vConfSup;
			var vResult = systemklib.commandoutput(vReq); 
			plw.writetolog(" CONFIG_SUPPORT_DETAIL Retour shell : "+vResult);
			if (vResult==false)
				plw.writetolog(" CONFIG_SUPPORT_DETAIL : Erreur retournee par API : config support "+vConfSup);
			else
			{
				// recup du r sultat
				var vJsonObj=rest.parse(vResult[0]);
				//plw.writetolog(">>>> DEBUG >>>> vJsonObj="+vJsonObj);
				// objet liste des config support
				var vConfigSupList=vJsonObj.values;
				//plw.writetolog(">>>> DEBUG >>>> vConfigSupList="+vConfigSupList);
				if (vConfigSupList==undefined || vConfigSupList=="")
					plw.writetolog(" CONFIG_SUPPORT_DETAIL : Erreur : Aucune configuration n'est retournee par API");
				else
				{
					// liste des attributs   r cup rer
					var vector vListField=new vector("ID","configName","market","engine","engineRenault","enginePower","emissionLevel","battery","batteryRenault","gearbox","gearboxRenault","axle","equipmentLevel","handle","optionalTests","numberOfRow","suspension","body","dimensions","grossVehicleWeight","status","engineIndice","gearboxIndice","batteryIndice","brand","batteryCharger","batteryCapacity");
					 // config support
					for (var vObj in vConfigSupList where vObj.id==vConfSup)
					{
						vObjCS=vObj;
						for (var vField in vListField)
						{
							//nom du champ
							var vFieldName=vField;
							//valeur du champ
							var vValue="";
							//si cot  de direction on r cup re le r f rentiel (via le code interface) 
							if(vFieldName=="handle")
							{
								var vValueTemp=(vObj.get(vField)!=undefined && vObj.get(vField)!="Null" && vObj.get(vField)!=NIL) ? vObj.get(vField) : ""; 
								if(vValueTemp!="")
								{
									var tablekey_dl = new plw.keyattribute(plc._PSI3_PT_DR_SIDE,"_PSI3_AA_S_CODE_INTERFACE",vValueTemp);
									with(tablekey_dl.fromobject())
									{
										for (var plc._PSI3_PT_DR_SIDE vDir in plc._PSI3_PT_DR_SIDE where vDir._PSI3_AA_S_CODE_INTERFACE==vValueTemp)
										{
											vValue=vDir.printattribute();
										}
									}
								}
							} 
							else if(vFieldName=="brand") // US2690 : si Marque on r cup re le r f rentiel (via le code interface)
							{
								vValue=psi3_js2_calcule_dvsn_marque(vObj,vField);
							} 
							else
							{
								vValue=(vObj.get(vField)!=undefined && vObj.get(vField)!="Null" && vObj.get(vField)!=NIL) ? vObj.get(vField) : ""; 
							}
							vObjCS.set(vField,vValue);
						}
						vObjCS.storetemporaryobject(vConfSup);
						break;
					}
				}
			}
		}
		else
			plw.writetolog(" CONFIG_SUPPORT_DETAIL : CS trouve dans le cache : "+vObjCS.CONFIGNAME);
			
		if(vObjCS!=undefined)
		{
			// US7573 :
			var number vPower=(vObjCS.ENGINEPOWER!=undefined && vObjCS.ENGINEPOWER!="") ? vObjCS.ENGINEPOWER : 0;
			var number vNbRang=(vObjCS.NUMBEROFROW!=undefined && vObjCS.NUMBEROFROW!="") ? vObjCS.NUMBEROFROW : 0;
			var number vBatChgr=(vObjCS.batteryCharger!=undefined && vObjCS.batteryCharger!="") ? vObjCS.batteryCharger : 0;
			var number vBatCap=(vObjCS.batteryCapacity!=undefined && vObjCS.batteryCapacity!="") ? vObjCS.batteryCapacity : 0;
			with(plw.no_locking) { with(plw.no_alerts)
			{
				//plw.alert("DEBUG : M j CS");
				//mise   jour des champs avec catch des champs non mis   jour via la function psi3_ojs_maj_dl
				psi3_ojs_maj_dl(vDL,"_PSI3_AA_S_DEM_SUP_CONFIG",vObjCS.ID);
				psi3_ojs_maj_dl(vDL,"_PSI3_AA_S_DEM_NOM_CONFIG",vObjCS.CONFIGNAME);
				psi3_ojs_maj_dl(vDL,"_PSI3_RA_DEM_TRANS",vObjCS.AXLE);
				psi3_ojs_maj_dl(vDL,"_PSI3_RA_DEM_TYP_BT_ALLCE",vObjCS.BATTERY);
				psi3_ojs_maj_dl(vDL,"_PSI3_LIV_RA_BT",vObjCS.BATTERYRENAULT);
				psi3_ojs_maj_dl(vDL,"_PSI3_RA_DEM_IND_BT",vObjCS.BATTERYINDICE); //US1430
				psi3_ojs_maj_dl(vDL,"_PSI3_LIV_RA_CAISSE",vObjCS.BODY);
				psi3_ojs_maj_dl(vDL,"_PSI3_RA_DEM_DIM",vObjCS.DIMENSIONS);
				psi3_ojs_maj_dl(vDL,"_PSI3_RA_DEM_CODE_DEPOL",vObjCS.EMISSIONLEVEL);
				psi3_ojs_maj_dl(vDL,"_PSI3_RA_DEM_TYP_MOT_ALLC",vObjCS.ENGINE);
				psi3_ojs_maj_dl(vDL,"_PSI3_LIV_RA_MOT",vObjCS.ENGINERENAULT);
				psi3_ojs_maj_dl(vDL,"_PSI3_RA_DEM_IND_MOT",vObjCS.ENGINEINDICE); //US1430
				psi3_ojs_maj_dl(vDL,"_PSI3_AA_N_POWER",vPower);
				psi3_ojs_maj_dl(vDL,"_PSI3_RA_DEM_NIV_EQPT",vObjCS.EQUIPMENTLEVEL);
				psi3_ojs_maj_dl(vDL,"_PSI3_RA_DEM_TYP_CC_ALLCE",vObjCS.GEARBOX);
				psi3_ojs_maj_dl(vDL,"_PSI3_LIV_RA_CC",vObjCS.GEARBOXRENAULT);
				psi3_ojs_maj_dl(vDL,"_PSI3_RA_DEM_IND_CC",vObjCS.GEARBOXINDICE); //US1430
				psi3_ojs_maj_dl(vDL,"_PSI3_RA_DEM_MMAC",vObjCS.GROSSVEHICLEWEIGHT);
				psi3_ojs_maj_dl(vDL,"_PSI3_RA_DEM_DR_COTE",vObjCS.HANDLE);
				psi3_ojs_maj_dl(vDL,"_PSI3_RA_DEM_PAYS_COM",vObjCS.MARKET);
				psi3_ojs_maj_dl(vDL,"_PSI3_AA_N_DEM_NB_RANG",vNbRang);
				psi3_ojs_maj_dl(vDL,"_PSI3_AA_S_DEM_OPT_TEST",vObjCS.OPTIONALTESTS);
				psi3_ojs_maj_dl(vDL,"_PSI3_AA_S_DEM_SUSP",vObjCS.SUSPENSION); 
				// US7458 :
				psi3_ojs_maj_dl(vDL,"_PSI3_RA_S_MARQUE",vObjCS.BRAND); 
				psi3_ojs_maj_dl(vDL,"_PSI3_AA_N_CHRGR_BT",vBatChgr); 
				psi3_ojs_maj_dl(vDL,"_PSI3_AA_N_CAPA_BT",vBatCap); 
				}}
			//plw.alert(">>>>> M j des champs config support sur une D_SV par API "+vDL._PSI3_LIV_AA_S_NOM+" : nlle conf :"+vObjCS.id+" "+vObjCS.CONFIGNAME);
			plw.writetolog(">>>>> CONFIG_SUPPORT_DETAIL : MAJ des champs config support sur une D_SV par API "+vDL._PSI3_LIV_AA_S_NOM+" : nlle conf :"+vObjCS.id+" "+vObjCS.CONFIGNAME);
		}
	}
}
 
// PLWSCRIPT : _PSI3_JS2_ONEVAL_API_VA
// -------------------------------------
// /!\ Script V2 /!\
//
// v1.6 2021-08-18 David - v3.11.0_05
// Modification de _psi3_js2_set_attributes_pec_dva pour ne pas envoyer le prestatut pour le moment
//
// v1.5 2021-07-21 David - v3.11.0_04
// Modification de psi3_js2_api_pec_dva pour corriger un test
//
// v1.4 2021-07-13 sse - v3.11.0_03 US8361
// Modification de _psi3_js2_set_attributes_pec_dva, psi3_js2_api_pec_dva pour nouveau format de json
//
// v1.3 2021-07-05 sse - v3.11.0_02 US8438
// Modification de psi3_js2_api_pec_dva pour l'envoie de boolean schedulingConsideration=false
//
// v1.2 2021-07-05 David - v3.11.0_02
// Suppression de ActivityLine et utilisation d'une hashtable pour def les activity line dans _psi3_js2_set_attributes_pec_dva (pour g rer les majuscules/minuscules) et mettre le json entre ' dans psi3_js2_api_pec_dva
//
// v1.1 2021-06-22 David - v3.11.0_01
// Modification de _psi3_js2_set_attributes_pec_dva  pour prendre en compte l'argument en plus de _psi3_js2_format_date_api et pour n'envoyer que ce qui est n cessaire
//
// v1.0 2021-06-14 sse - v3.11.0_00 US8361
// Creation
// -------------------------------------
namespace _oneval;

// si vConsid vide o undefined, c'est un envoi pour prestatut sinon c'est un envoi Pris en compte
function _psi3_js2_set_attributes_pec_dva(vDva,vActId,vConsid)
{
	var attributes = new hashtable("string");
	var v_va = new hashtable("string");

	var vReturnActId=(vActId!=undefined && vActId!="") ? vActId : "" ;
	if ((vReturnActId==undefined || vReturnActId=="") && vDva!=undefined && vDva instanceof plc._DEL_PT_DELIV_LINKS) vReturnActId=vDva._PSI3_AA_S_DEM_ID_SOURCE;
	// Partie pris en compte
	if (vConsid!=undefined && vConsid!="" && vConsid instanceof boolean)
	{
		attributes.set("schedulingConsideration",vConsid);
		var cons_date=new date();
		attributes.set("considerationDate",_psi3_js2_format_date_api(cons_date,""));
	}	
	// partie prestatut (si on a une dva et si le bolleen consid est undefined)
	// non trait  pour l'instant
	else if (vDva!=undefined && vDva instanceof plc._DEL_PT_DELIV_LINKS)
	{
		// Ligne de VA :
		var v_activityLines  = new hashtable("string");
		v_activityLines.set("id","");
		v_activityLines.set("preStatut","");
		// A activer quand on traitera le prestatut avec les bonnes valeurs
		//attributes.set("activityLines",v_activityLines);
	}
	
	// dans tous les cas on envoi le activityid et le source
	v_va.set("activityId",vActId);
	attributes.set("validationActivity",v_va);
	attributes.set("sourceSystem","GPS");
	return attributes;
}	

// US8361 : API de prise en compte d'une D_VA
function psi3_js2_api_pec_dva(vActId,vConsid)
{
	var vDva=(this instanceof plc._DEL_PT_DELIV_LINKS) ? this : undefined;

	var res_api="";
	var vResult=false;
	var vJsonObj=undefined;
	var vResultRet=undefined;
	// hashtable pour  viter les doublons
	var vHashCheck=new hashtable("STRING");
		
	// si pas d j  trait 
	if (vDva==undefined || (vDva instanceof plc._DEL_PT_DELIV_LINKS && vHashCheck.get("PRINT_NUMBER".callmacro(vDva.onb,"####"))==undefined) )
	{
		var vName=(vDva instanceof plc._DEL_PT_DELIV_LINKS) ? vDva._PSI3_LIV_AA_S_NOM : vActId ;
		// Construction du vector json :
		with(plw.no_locking){
			vResultRet=_psi3_js2_set_attributes_pec_dva(vDva,vActId,vConsid); // cette fonction doit renvoyer une hashtable
		}
		vJsonObj=rest.json(vResultRet); 			
		// US8438 : traitement de boolean = false :
		vJsonObj=vJsonObj.replaceregexp("\"schedulingConsideration\":null","\"schedulingConsideration\":false");
			
		// Appel de l'API
		var string vReq="sh /$HOME/vcours/bin/gps_api_oneval_new.sh 'ACTIVITY_VALIDATION_CONSIDERATION' '"+vJsonObj+"'";
		plw.writetolog(vName+" - Appel ACTIVITY_VALIDATION_CONSIDERATION avec VA Json : "+vJsonObj);
		vResult = systemklib.commandoutput(vReq); 
		plw.writetolog(vName+" - Retour ACTIVITY_VALIDATION_CONSIDERATION : "+vResult);

		// Gestion des erreurs ?
		/*if (vResult!=false)
		{
			vResObj=rest.parse(vResult[0]);
			//Si erreur est retourn  par API :
			if(vResObj.get("errors")!=undefined)
			{
				var vErrList=vResObj.get("errors");
				res_api=psi3_js2_flux1_api_err(vErrList);
			} 
		}
		*/
		
		// on stocke les ONB pour ne pas envoyer des doublons
		if (vDva instanceof plc._DEL_PT_DELIV_LINKS) vHashCheck.set("PRINT_NUMBER".callmacro(vDva.onb,"####"),1);
	}		
	//return res_api;
} 
// PLWSCRIPT : _PSI3_JS2_TPM_API
// -------------------------------------
// /!\ Script V2 /!\
// -------------------------------------
//
// v1.0 2019-06-25 David - v3.05.0_00
// Creation
// -------------------------------------
namespace _apitpm;

// D finition du type retourn 
function psi3_api_post_return(){
	var RETURN_CODE = undefined;
	var RETURN_MSG = undefined;
}

// fonction post de l'api
function psi3_ojs_post_essai_end_forecast_date(vEntry)
{
	plw.writetolog("API psi3_api_essai_end_forecast - start");
	// def du retour
	var vReturnValue = new psi3_api_post_return();
	var string vRetC="1";
	var string vRetM="Invalid arguments";
	// recup des arguments en entr e
	var vCode=vEntry.ESS_CODE;
	var vDateStr=vEntry.END_TEST_FORECAST_DATE;
	
	if (vCode!=undefined && vDateStr!=undefined)
	{
		// transform date chaine en date date
		var vDate=vDateStr.parsedate("JJ/MM/AAAA");
		if (vDate!=undefined && vDate instanceof date)
		{
			// recup du livrable
			var vEss=plc._DEL_PT_DELIVERABLES.get(vCode);
			if (vEss!=undefined)
			{
				plw.writetolog("API psi3_api_essai_end_forecast - Modif essai "+vCode+" : "+vDateStr);
				with(plw.no_locking) { vEss._PSI3_AA_D_FE_PREV_OPE=vDate;}
				vRetC="200";
				vRetM="OK";
			}
			else
			{
				vRetC="3";
				vRetM="Not able to find the test "+vCode+" in GPS";
			}	
		}
		else 
		{
			vRetC="2";
			vRetM="Wrong format for END_TEST_FORECAST_DATE (must be DD/MM/YYYY)";
		}
	}
	// envoie code retour
	vReturnValue.RETURN_CODE=vRetC;
	vReturnValue.RETURN_MSG=vRetM;
	plw.writetolog("API psi3_api_essai_end_forecast - end : "+vReturnValue);
	return vReturnValue;
}
// d finition de l'api
plw.writetolog("Definition API : psi3_api_essai_end_forecast");
rest.defineapi("psi3_api_essai_end_forecast",false,psi3_ojs_post_essai_end_forecast_date);




 
// -*- coding: windows-1252 -*- 
//  COPYRIGHT (C) PLANISWARE 2018
//
//  All Rights Reserved
//
//  This program and the information contained herein are confidential to
//  and the property of PLANISWARE and are made available only to PLANISWARE
//  employees for the sole purpose of conducting PLANISWARE business.
//
//**************************************************************************

// PLWSCRIPT: _ROA_JS2_TIMESCALE | GENDEPS
// DEPENDENCIES: REPORT_LIB_JS,_ROA_JS_COMMON

namespace roamod;

function updateRoadmapDateStyleAccordingToDateStyleEditor(obj, objectEditor, fromEditor){
  if(obj instanceof plc._RE_PT_DATES_STYLE){
    fromEditor.object._roa_ra_prj_date_style = obj.printAttribute();
  }
}

function displayRoadmapDateStyle(origin){
  var roadmap = origin._roa_getRoadmap();
  if(roadmap instanceof plc.ordoProject){
    var dateStyle = roadmap._roa_getRoadmapDateStyle();
    var plc.report rep = plw.report_getreplace(this : "OpxReport", "_RE_STYLE_DATES_POPUP");
    if(dateStyle instanceof plc._RE_PT_DATES_STYLE){
      var hyperlink link = new hyperlink("FValue",
					 "Attribute","ID",
					 "Editortype",rep.NAME,
					 "Popup", true);
      if(link Instanceof hyperlink)  {
        link.go(dateStyle);
      }
    } else {
      editorklib.editobjectWithApplyCallback( this               : plc._RE_PT_DATES_STYLE,
                                              editor             : origin.editor,
                                              editor_type        : new symbol(rep.name,"KEYWORD"),
                                              callback           : updateRoadmapDateStyleAccordingToDateStyleEditor);
    }
  }
}
 
//Script to remove Actuals 
// Version 1.0 - RITM1408020 - ACTIME - Created the script to remove actuals befor the given date 
//creating function : _TT7_JS_FillTempTable, _TT7_JS_FillTempTableToExport, _TT7_JS_SelectActuals(d_DatePivot,b_exported)
//WST ITS-INC5390044 - 22/02 Modification of _TT7_JS_SelectActuals to change the is null with <>'1'
//
//




function  _TT7_JS_FillTempTable(v_result_actuals)
{

	var o_RES="opxResource".get(v_result_actuals[4]);
	var o_ACT="opxActivity".get(v_result_actuals[3]);
	var d_SD=v_result_actuals[1];
	var d_ED=v_result_actuals[2];
	var n_totalLoad = v_result_actuals[5];
	var o_unit = "opxCOST_UNIT".get(v_result_actuals[7]);
	//loading the temp table with the coreresponding values of resource and activity
	if ( o_RES instanceof opxresource && o_ACT instanceof opxactivity  && d_SD instanceof Date && d_ED instanceof Date)
	{
		var n_on = v_result_actuals[0];
		var s_role= "opxSkill".get(v_result_actuals[6]);
		var r_role= s_role.NAME;
		var n_totalLoads= n_totalLoad;
		var n_totalLoadDays ;
		var s_totalLoadHours ;
		var s_unit = o_unit.printAttribute();
		var r_unit = o_RES.FILLE_DE.FILLE_DE.NAME;
		var s_resId = o_RES.printAttribute();
		var s_resName = o_RES.NAME;
		
		var s_resFuntionName = o_RES._TT_FUNCTION;
		var s_resFistName = o_RES._TT_FIRST_NAME;
		var s_resLastName = o_RES._TT_LAST_NAME;
		//var vNonLie = (vltv instanceof OpxBreakdown_2) ? vltv._RFF_ORD_AA_B_LTV_LD : vltv._RFF_DEC_AA_B_LTV_LD ; 
		var s_resService =(o_RES._TT6_NF_S_SERVICE!="" ) ? o_RES._TT6_NF_S_SERVICE : "-";
		var s_resSite = o_RES._TT_SITE;
		var s_resDepartement= o_RES._TT_DEPT;
		var s_resAccouting = o_RES._TT6_NF_B_RES_PROJECT_ACCOUNTING;
		//coverting the value to YES/NO
		if(s_resAccouting==true){
			s_resAccouting="YES";
		}
		else{
			s_resAccouting="NO";
		}
		var s_resPhysicalSite = o_RES._TT6_AA_S_PHYSICAL_SITE;
		var s_resWorkLoadUnit = o_RES.CallStringFormula("TIME_UNIT");
		s_resWorkLoadUnit= s_resWorkLoadUnit.toUpperCase();
		//Based on the load unit the loadDays and the LoadHours should fill
		if(s_resWorkLoadUnit=="DAY")
		{
			n_totalLoadDays=n_totalLoads;
			s_totalLoadHours="";
		}
		else {
			n_totalLoadDays="";
			s_totalLoadHours=n_totalLoads;
		}
		var s_activity = o_ACT.printattribute();
		//fetching the identifier of activity without ".1"
		if ((s_activity.position("."))!=undefined)
		{
			s_activity =s_activity.substring(0,s_activity.position(".")); 
		} 
		var vDur = "DURATION".call("1j");
		var d_Start_Date="PRINT_DATE".call("PERIOD_START".call(d_SD,"MONTH",0),"JJ/MM/AAAA");
		var d_End_Date="PRINT_DATE".call("SUB_DURATION".call("PERIOD_START".call(d_SD,"MONTH",1),vDur,""),"JJ/MM/AAAA");
		
		var s_resScope = "";
		if (s_unit=="SCOPE")
			s_resScope="YES";
		if (s_unit=="NO_SCOPE")
			s_resScope="NO";
		if (s_unit=="SCOPE_I")
			s_resScope="I";
			
		//loading the data in the temp table
		var o_actualTemp = new Opx_TT_EXP_ACTUALS_TEMP_TAB("_TT_EXP_ACTUAL_TEMP_ATTRIB_ONB",n_on
															,"_TT_EXP_ACTUAL_TEMP_ATTRIB_ROLE",r_role
															,"_TT_EXP_ACTUAL_TEMP_ATTRIB_TOTAL_LOAD",n_totalLoads
															,"_TT_EXP_ACTUAL_TEMP_ATTRIB_LOAD_DAYS",n_totalLoadDays
															,"_TT_EXP_ACTUAL_TEMP_ATTRIB_LOAD_HOURS",s_totalLoadHours
															,"_TT_EXP_ACTUAL_TEMP_ATTRIB_UNIT",s_unit
															,"_TT_EXP_ACTUAL_TEMP_ATTRIB_RESSOURCE_ID",s_resId
															,"_TT_EXP_ACTUAL_TEMP_ATTRIB_NAME",s_resName
															,"NAME",s_resName
															,"_TT_EXP_ACTUAL_TEMP_ATTRIB_FUNCTION",s_resFuntionName
															,"_TT_EXP_ACTUAL_TEMP_ATTRIB_FIRST_NAME",s_resFistName
															,"_TT_EXP_ACTUAL_TEMP_ATTRIB_LAST_NAME",s_resLastName
															,"_TT_EXP_ACTUAL_TEMP_ATTRIB_SERVICE",s_resService
															,"_TT_EXP_ACTUAL_TEMP_ATTRIB_ADMIN_SITE",s_resSite
															,"_TT_EXP_ACTUAL_TEMP_ATTRIB_DEPARTMENT",s_resDepartement
															,"_TT_EXP_ACTUAL_TEMP_ATTRIB_PROJECT_ACCOUNTING",s_resAccouting.tostring()
															,"_TT_EXP_ACTUAL_TEMP_ATTRIB_PHYSICAL_SITE",s_resPhysicalSite
															,"_TT_EXP_ACTUAL_TEMP_ATTRIB_ID_ACTIVITY",s_activity
															,"_TT_EXP_ACTUAL_TEMP_ATTRIB_START_DATE",d_Start_Date
															,"_TT_EXP_ACTUAL_TEMP_ATTRIB_END_DATE",d_End_Date
															,"_TT_EXP_ACTUAL_TEMP_ATTRIB_SCOPE",s_resScope
															,"_TT_EXP_ACTUAL_TEMP_ATTRIB_WORKLOAD_UNIT",s_resWorkLoadUnit
															,"_TT_EXP_ACTUAL_TEMP_ATTRIB_RESOURCE_UNIT",r_unit);

	}
}

//function to fill the temp table with selected actuals
function _TT7_JS_FillTempTableToExport()
{
	writeln("start of _TT7_JS_FillTempTableToExport");
	var count=0;
	//cleaning the temp table
	for (var a in "Opx_TT_EXP_ACTUALS_TEMP_TAB") a.delete();
	
	var v_selectedActuals = _TT7_JS_SelectActuals(context._TT7_ST_D_ARCHIVE_ACTUAL_DATE,false);
	//filling the temp table with the selected actuals
	for (var v_selectedActual in v_selectedActuals )
	{
		_TT7_JS_FillTempTable(v_selectedActual);
		writeln("filing temp table... " + v_selectedActual);
		count++;
	}
	writeln("End of _TT7_JS_FillTempTableToExport - number of actuals to export"+count);
}
_TT7_JS_FillTempTableToExport.exportfunction();

//function to select the actuals where the end date less than _TT7_ST_D_ARCHIVE_ACTUAL_DATE	
function  _TT7_JS_SelectActuals(d_DatePivot,b_exported)
{		
		var s_sqlCondition="";
		var sql_result = new vector();
		var s_date = "PRINT_DATE".CallMacro(d_DatePivot,"YYYY-MM-DD");		
		//condition to select the actuals from actime database to fill the temp table Opx_TT_EXP_ACTUALS_TEMP_TAB
		s_sqlCondition ="END_DATE<=TO_DATE('"+s_date+"','YYYY-MM-DD') and dataset >0  and TOTAL_LOAD <>0 and opx2__TT7_AA_ARH_EXP_DONE";
		if(b_exported) s_sqlCondition +="=1";
		else s_sqlCondition +="<>1";
		sql_result = sqlselect("WORK_PERFORMED",{"ONB","start_date","end_date","WORK_STRUCTURE","OPX2_RESOURCE","TOTAL_LOAD","PRIMARY_SKILL","OTHER_UNIT"},{"integer","date","date","integer","integer","number","integer","integer"},s_sqlCondition);		
		return sql_result;
	
}
//_TT7_JS_FillTempTableToExport();


/*method _TT7_JS_DeleteActuals on opxwork_performed()
{
	if(this instanceof opxwork_performed && this.res instanceof opxresource && this.activity instanceof opxactivity  && this.ED instanceof Date && this.SD instanceof Date)
	{	
		var s_sqlCondition;
		var s_date = context._TT7_ST_D_DELETE_ACTUAL_DATE ;
		var d_end_date = "PRINT_DATE".CallMacro(this.ED,"YYYY-MM-DD");		
		var d_start_date = "PRINT_DATE".CallMacro(this.SD,"YYYY-MM-DD")		
		s_sqlCondition ="END_DATE<='"+s_date+"' and dataset >0  and TOTAL_LOAD>0 and opx2__TT7_AA_ARH_EXP_DONE =1";
		SqlWithDatabaseTransaction {
		var request = "update WORK_PERFORMED set dataset = -abs(dataset) where " +s_sqlCondition;
		SQLExecuteImmediate(request);
		SqlCommit();
		}
	}
	
}*/


//function to dlete the actual hour(update of dataset of actuals to negative)
function _TT7_JS_ACTUAL_HOUR_DEL ()
{
		var s_sqlCondition;
		//var s_sqlcondtion_after_update;
		var s_date = context._TT7_ST_D_DELETE_ACTUAL_DATE ;
		var count_before_deletion=new vector();
		//var count_after_deletion=new vector();
		//var d_end_date = "PRINT_DATE".CallMacro(this.ED,"YYYY-MM-DD");		
		//var d_start_date = "PRINT_DATE".CallMacro(this.SD,"YYYY-MM-DD")		
		s_sqlCondition ="END_DATE<='"+s_date+"' and dataset >0 and opx2__TT7_AA_ARH_EXP_DONE =1";
		//s_sqlcondtion_after_update="END_DATE<='"+s_date+"' and dataset <0  and TOTAL_LOAD>0 and opx2__TT7_AA_ARH_EXP_DONE =1";
		SqlWithDatabaseTransaction {
		count_before_deletion = sqlselect("WORK_PERFORMED",{"count(*)"},{"integer"},s_sqlCondition);
		var request = "update WORK_PERFORMED set dataset = -abs(dataset) where " +s_sqlCondition;
		//count_after_deletion = sqlselect("WORK_PERFORMED",{"count(*)"},{"integer"},s_sqlcondtion_after_update);
		SQLExecuteImmediate(request);
		SqlCommit();
		}
		
	alert("Actuals before "+context._TT7_ST_D_DELETE_ACTUAL_DATE+" has been deleted");
	alert("Total actual "+count_before_deletion[0]+" has been deleted(which includes negative load actuals too)");
	//alert("Total actual "+count_after_deletion[0]+" dataset has been ");
}
_TT7_JS_ACTUAL_HOUR_DEL.exportfunction();

//Making the exported value as true also the actuals where the end date less than  _TT7_ST_D_ARCHIVE_ACTUAL_DATE
function _TT7_JS_EXPORT_DONE_TRUE ()
{
		writetolog("Setting actuals export has been true");
		var s_sqlCondition="";
		var count=new vector();
		var s_sqlcondtion_after_update;
		var s_date = context._TT7_ST_D_ARCHIVE_ACTUAL_DATE ;
		s_sqlCondition ="END_DATE<='"+s_date+"' and dataset >0";
		s_sqlcondtion_after_update="END_DATE<='"+s_date+"' and dataset >0  and opx2__TT7_AA_ARH_EXP_DONE =1";
		SqlWithDatabaseTransaction {
		var request = "update WORK_PERFORMED set opx2__TT7_AA_ARH_EXP_DONE =1 where " +s_sqlCondition;
		SQLExecuteImmediate(request);
		SqlCommit();
		count = sqlselect("WORK_PERFORMED",{"count(*)"},{"integer"},s_sqlcondtion_after_update);
		}
		writetolog("number of actuals where the end date less than "+count[0]+" has been set to true(which includes the negative load also to delete those loads)");
}
_TT7_JS_EXPORT_DONE_TRUE.exportfunction();
//Script to remove Actuals 
// Version 1.0 - RITM1408020 - ACTIME - Created the script to remove actuals befor the given date 
//creating function : _TT7_JS_FillTempTable, _TT7_JS_FillTempTableToExport, _TT7_JS_SelectActuals(d_DatePivot,b_exported)
//WST ITS-INC5390044 - 22/02 Modification of _TT7_JS_SelectActuals to change the is null with <>'1'
//
//




function  _TT7_JS_FillTempTable(v_result_actuals)
{

	var o_RES="opxResource".get(v_result_actuals[4]);
	var o_ACT="opxActivity".get(v_result_actuals[3]);
	var d_SD=v_result_actuals[1];
	var d_ED=v_result_actuals[2];
	var n_totalLoad = v_result_actuals[5];
	var o_unit = "opxCOST_UNIT".get(v_result_actuals[7]);
	//loading the temp table with the coreresponding values of resource and activity
	if ( o_RES instanceof opxresource && o_ACT instanceof opxactivity  && d_SD instanceof Date && d_ED instanceof Date)
	{
		var n_on = v_result_actuals[0];
		var s_role= "opxSkill".get(v_result_actuals[6]);
		var r_role= s_role.NAME;
		var n_totalLoads= n_totalLoad;
		var n_totalLoadDays ;
		var s_totalLoadHours ;
		var s_unit = o_unit.printAttribute();
		var r_unit = o_RES.FILLE_DE.FILLE_DE.NAME;
		var s_resId = o_RES.printAttribute();
		var s_resName = o_RES.NAME;
		
		var s_resFuntionName = o_RES._TT_FUNCTION;
		var s_resFistName = o_RES._TT_FIRST_NAME;
		var s_resLastName = o_RES._TT_LAST_NAME;
		//var vNonLie = (vltv instanceof OpxBreakdown_2) ? vltv._RFF_ORD_AA_B_LTV_LD : vltv._RFF_DEC_AA_B_LTV_LD ; 
		var s_resService =(o_RES._TT6_NF_S_SERVICE!="" ) ? o_RES._TT6_NF_S_SERVICE : "-";
		var s_resSite = o_RES._TT_SITE;
		var s_resDepartement= o_RES._TT_DEPT;
		var s_resAccouting = o_RES._TT6_NF_B_RES_PROJECT_ACCOUNTING;
		//coverting the value to YES/NO
		if(s_resAccouting==true){
			s_resAccouting="YES";
		}
		else{
			s_resAccouting="NO";
		}
		var s_resPhysicalSite = o_RES._TT6_AA_S_PHYSICAL_SITE;
		var s_resWorkLoadUnit = o_RES.CallStringFormula("TIME_UNIT");
		s_resWorkLoadUnit= s_resWorkLoadUnit.toUpperCase();
		//Based on the load unit the loadDays and the LoadHours should fill
		if(s_resWorkLoadUnit=="DAY")
		{
			n_totalLoadDays=n_totalLoads;
			s_totalLoadHours="";
		}
		else {
			n_totalLoadDays="";
			s_totalLoadHours=n_totalLoads;
		}
		var s_activity = o_ACT.printattribute();
		//fetching the identifier of activity without ".1"
		if ((s_activity.position("."))!=undefined)
		{
			s_activity =s_activity.substring(0,s_activity.position(".")); 
		} 
		var vDur = "DURATION".call("1j");
		var d_Start_Date="PRINT_DATE".call("PERIOD_START".call(d_SD,"MONTH",0),"JJ/MM/AAAA");
		var d_End_Date="PRINT_DATE".call("SUB_DURATION".call("PERIOD_START".call(d_SD,"MONTH",1),vDur,""),"JJ/MM/AAAA");
		
		var s_resScope = "";
		if (s_unit=="SCOPE")
			s_resScope="YES";
		if (s_unit=="NO_SCOPE")
			s_resScope="NO";
		if (s_unit=="SCOPE_I")
			s_resScope="I";
			
		//loading the data in the temp table
		var o_actualTemp = new Opx_TT_EXP_ACTUALS_TEMP_TAB("_TT_EXP_ACTUAL_TEMP_ATTRIB_ONB",n_on
															,"_TT_EXP_ACTUAL_TEMP_ATTRIB_ROLE",r_role
															,"_TT_EXP_ACTUAL_TEMP_ATTRIB_TOTAL_LOAD",n_totalLoads
															,"_TT_EXP_ACTUAL_TEMP_ATTRIB_LOAD_DAYS",n_totalLoadDays
															,"_TT_EXP_ACTUAL_TEMP_ATTRIB_LOAD_HOURS",s_totalLoadHours
															,"_TT_EXP_ACTUAL_TEMP_ATTRIB_UNIT",s_unit
															,"_TT_EXP_ACTUAL_TEMP_ATTRIB_RESSOURCE_ID",s_resId
															,"_TT_EXP_ACTUAL_TEMP_ATTRIB_NAME",s_resName
															,"NAME",s_resName
															,"_TT_EXP_ACTUAL_TEMP_ATTRIB_FUNCTION",s_resFuntionName
															,"_TT_EXP_ACTUAL_TEMP_ATTRIB_FIRST_NAME",s_resFistName
															,"_TT_EXP_ACTUAL_TEMP_ATTRIB_LAST_NAME",s_resLastName
															,"_TT_EXP_ACTUAL_TEMP_ATTRIB_SERVICE",s_resService
															,"_TT_EXP_ACTUAL_TEMP_ATTRIB_ADMIN_SITE",s_resSite
															,"_TT_EXP_ACTUAL_TEMP_ATTRIB_DEPARTMENT",s_resDepartement
															,"_TT_EXP_ACTUAL_TEMP_ATTRIB_PROJECT_ACCOUNTING",s_resAccouting.tostring()
															,"_TT_EXP_ACTUAL_TEMP_ATTRIB_PHYSICAL_SITE",s_resPhysicalSite
															,"_TT_EXP_ACTUAL_TEMP_ATTRIB_ID_ACTIVITY",s_activity
															,"_TT_EXP_ACTUAL_TEMP_ATTRIB_START_DATE",d_Start_Date
															,"_TT_EXP_ACTUAL_TEMP_ATTRIB_END_DATE",d_End_Date
															,"_TT_EXP_ACTUAL_TEMP_ATTRIB_SCOPE",s_resScope
															,"_TT_EXP_ACTUAL_TEMP_ATTRIB_WORKLOAD_UNIT",s_resWorkLoadUnit
															,"_TT_EXP_ACTUAL_TEMP_ATTRIB_RESOURCE_UNIT",r_unit);

	}
}

//function to fill the temp table with selected actuals
function _TT7_JS_FillTempTableToExport()
{
	writeln("start of _TT7_JS_FillTempTableToExport");
	var count=0;
	//cleaning the temp table
	for (var a in "Opx_TT_EXP_ACTUALS_TEMP_TAB") a.delete();
	
	var v_selectedActuals = _TT7_JS_SelectActuals(context._TT7_ST_D_ARCHIVE_ACTUAL_DATE,false);
	//filling the temp table with the selected actuals
	for (var v_selectedActual in v_selectedActuals )
	{
		_TT7_JS_FillTempTable(v_selectedActual);
		writeln("filing temp table... " + v_selectedActual);
		count++;
	}
	writeln("End of _TT7_JS_FillTempTableToExport - number of actuals to export"+count);
}
_TT7_JS_FillTempTableToExport.exportfunction();

//function to select the actuals where the end date less than _TT7_ST_D_ARCHIVE_ACTUAL_DATE	
function  _TT7_JS_SelectActuals(d_DatePivot,b_exported)
{		
		var s_sqlCondition="";
		var sql_result = new vector();
		var s_date = "PRINT_DATE".CallMacro(d_DatePivot,"YYYY-MM-DD");		
		//condition to select the actuals from actime database to fill the temp table Opx_TT_EXP_ACTUALS_TEMP_TAB
		s_sqlCondition ="END_DATE<=TO_DATE('"+s_date+"','YYYY-MM-DD') and dataset >0  and TOTAL_LOAD <>0 and opx2__TT7_AA_ARH_EXP_DONE";
		if(b_exported) s_sqlCondition +="=1";
		else s_sqlCondition +="<>1";
		sql_result = sqlselect("WORK_PERFORMED",{"ONB","start_date","end_date","WORK_STRUCTURE","OPX2_RESOURCE","TOTAL_LOAD","PRIMARY_SKILL","OTHER_UNIT"},{"integer","date","date","integer","integer","number","integer","integer"},s_sqlCondition);		
		return sql_result;
	
}
//_TT7_JS_FillTempTableToExport();


/*method _TT7_JS_DeleteActuals on opxwork_performed()
{
	if(this instanceof opxwork_performed && this.res instanceof opxresource && this.activity instanceof opxactivity  && this.ED instanceof Date && this.SD instanceof Date)
	{	
		var s_sqlCondition;
		var s_date = context._TT7_ST_D_DELETE_ACTUAL_DATE ;
		var d_end_date = "PRINT_DATE".CallMacro(this.ED,"YYYY-MM-DD");		
		var d_start_date = "PRINT_DATE".CallMacro(this.SD,"YYYY-MM-DD")		
		s_sqlCondition ="END_DATE<='"+s_date+"' and dataset >0  and TOTAL_LOAD>0 and opx2__TT7_AA_ARH_EXP_DONE =1";
		SqlWithDatabaseTransaction {
		var request = "update WORK_PERFORMED set dataset = -abs(dataset) where " +s_sqlCondition;
		SQLExecuteImmediate(request);
		SqlCommit();
		}
	}
	
}*/


//function to dlete the actual hour(update of dataset of actuals to negative)
function _TT7_JS_ACTUAL_HOUR_DEL ()
{
		var s_sqlCondition;
		//var s_sqlcondtion_after_update;
		var s_date = context._TT7_ST_D_DELETE_ACTUAL_DATE ;
		var count_before_deletion=new vector();
		//var count_after_deletion=new vector();
		//var d_end_date = "PRINT_DATE".CallMacro(this.ED,"YYYY-MM-DD");		
		//var d_start_date = "PRINT_DATE".CallMacro(this.SD,"YYYY-MM-DD")		
		s_sqlCondition ="END_DATE<='"+s_date+"' and dataset >0 and opx2__TT7_AA_ARH_EXP_DONE =1";
		//s_sqlcondtion_after_update="END_DATE<='"+s_date+"' and dataset <0  and TOTAL_LOAD>0 and opx2__TT7_AA_ARH_EXP_DONE =1";
		SqlWithDatabaseTransaction {
		count_before_deletion = sqlselect("WORK_PERFORMED",{"count(*)"},{"integer"},s_sqlCondition);
		var request = "update WORK_PERFORMED set dataset = -abs(dataset) where " +s_sqlCondition;
		//count_after_deletion = sqlselect("WORK_PERFORMED",{"count(*)"},{"integer"},s_sqlcondtion_after_update);
		SQLExecuteImmediate(request);
		SqlCommit();
		}
		
	alert("Actuals before "+context._TT7_ST_D_DELETE_ACTUAL_DATE+" has been deleted");
	alert("Total actual "+count_before_deletion[0]+" has been deleted(which includes negative load actuals too)");
	//alert("Total actual "+count_after_deletion[0]+" dataset has been ");
}
_TT7_JS_ACTUAL_HOUR_DEL.exportfunction();

//Making the exported value as true also the actuals where the end date less than  _TT7_ST_D_ARCHIVE_ACTUAL_DATE
function _TT7_JS_EXPORT_DONE_TRUE ()
{
		writetolog("Setting actuals export has been true");
		var s_sqlCondition="";
		var count=new vector();
		var s_sqlcondtion_after_update;
		var s_date = context._TT7_ST_D_ARCHIVE_ACTUAL_DATE ;
		s_sqlCondition ="END_DATE<='"+s_date+"' and dataset >0";
		s_sqlcondtion_after_update="END_DATE<='"+s_date+"' and dataset >0  and opx2__TT7_AA_ARH_EXP_DONE =1";
		SqlWithDatabaseTransaction {
		var request = "update WORK_PERFORMED set opx2__TT7_AA_ARH_EXP_DONE =1 where " +s_sqlCondition;
		SQLExecuteImmediate(request);
		SqlCommit();
		count = sqlselect("WORK_PERFORMED",{"count(*)"},{"integer"},s_sqlcondtion_after_update);
		}
		writetolog("number of actuals where the end date less than "+count[0]+" has been set to true(which includes the negative load also to delete those loads)");
}
_TT7_JS_EXPORT_DONE_TRUE.exportfunction();
 
 
Introduction
This documentation describes the OPX2 script API. The OPX2 script language is derived from the Javascript language, it implements all the form and syntax of the language but only one part of the function API. OPX2 script provides some language extensions, the main language extension are the try catch form which allows to handler errors like in Java or the method form which allows to define methods in a much simpler way than in Javascript. Other extensions are related to specific OPX2 features, like Database management, Object management or Process management. Special conventions: we call a function a function which is called using the standard javascript function call convention, it means that the first argument is passed as the this object, the function can have different behavior depending of the class of this object, this behavior is implemented and described by methods. If a function regroup different methods we call it a generic function. The arguments of a function can be static, optional or an undefinite list of arguments, OPX2 script supports non finite arguments functions like Javascript, we use this feature to handle keyword arguments, the arguments are then a paired list of arguments where the first are a string describing a keyword and the second the value associated to the keyword. We call a form, a language form, like the if construct, the OPX2 script language add new powerful forms to the Javascript language like the for form. 
Cost management API
This chapter covers the basic cost management functions exported in the OPX2 script API 
Classes or Objects
aggregate
The aggregate object allows to aggregate cost information in order to compute a curve or value. It is an internal mechanism widely used in OPX2 to compute cost, resource load or user aggregations. The get and set methods are used with a date argument to retrieve and modify values in an aggregate object. The map method is also defined on an aggregate this allows to write the following statement: for (var x in agg1 where agg1.get(x) > 0) console.write("Between"+x.toString()+" and "+x.next("Month").toString()+" : "+agg1.get(x)+"n"); The clear method can be used to reset the values of an aggregate object 
Constructor Arguments
Argument
Documentation 
TIMEUNIT
String or undefined: specifies the time unit used to aggregate information 
Constructor syntax
new Aggregate("MONTH");
Attributes
Argument
Documentation 
TIMEUNIT
Time unit used in the aggregate 

dateVector
The DateVector object is very useful to use the OPX2 calendar mechanism in OPX2 script, it allows you to compute a vector of dates given a TimeUnit between two dates. Creating a date vector results in creating a vector of date objects 
Constructor Arguments
Argument
Documentation 
TIMEUNIT
String or undefined: specifies the time unit used to compute the dateVector 
STARTDATE
[optional] Date: date used for the beginning of the time period 
ENDDATE
[optional] Date: date used for the end of the time period 
Constructor syntax
new DateVector("MONTH");

opxCurve
A curve object is returned with the function ComputeCurves 
Attributes
Argument
Documentation 
TYPE
Curve type 
UNIT
Curve unit 
TIMEUNIT
Curve time unit 
CUMULATIVE
Boolean: indicates if the curve is cumulated 
STARTDATE
Date: start date used for the curve computation 
ENDDATE
Date: end date used for the curve computation 
OBJECT1
Object: primary object used for the curve computation 
OBJECT2
Object: secondary object used for the curve computation 
OBJECT3
Object: third object used for the curve computation 
OBJECT4
Object: fourth object used for the curve computation 
OBJECT5
Object: fifth object used for the curve computation 

Functions
add (value, date)
Add a value or an aggregate object into an aggregate object, the value can be added at one specific date or at all dates 
Arguments
Argument
 
Documentation 
VALUE

Number or aggregaye: the value or aggregate you want to add 
DATE
OPTIONAL
date the date where the value is added, if no date is specified then 

changeSign ()
Allows you to change the sign of all aggregate values, this function can be combined with the add function to perform soustractions 

checkProjectOutputs ()
Build all ouputs for a specific project 
Arguments
Argument
 
Documentation 
THIS

Project 

computeCost (object, costunit, ratetable)
Allows you to compute the cost of one OPX object in a specific Cost unit, using a specific rate table 
Arguments
Argument
 
Documentation 
OBJECT

Opx Object: can be a OpxPlannedHours, OpxActualHours, OpxPlannedExpenditure or OpxActualExpenditure 
COSTUNIT
OPTIONAL
OpxCostUnit, by default is the default cost unit 
RATETABLE
OPTIONAL
String: rate table name by default is the default rate table 

computeRate (source-unit, destination-unit, start-date, end-date, rate-table, rate-center)
Returns the rate on a specific period 
Arguments
Argument
 
Documentation 
SOURCE-UNIT

Source cost unit 
DESTINATION-UNIT

Destination cost unit 
START-DATE

Start date 
END-DATE

End date 
RATE-TABLE

Rate table or undefined 
RATE-CENTER

Variable arguments specifying the rate center 

computeRateWithCache (start-date, end-date)
Returns the rate on a specific period using the cost unit cache 
Arguments
Argument
 
Documentation 
START-DATE

Start date 
END-DATE

End date 

cost.ChangeCurveValue (curve, date, value, fixed_dates)
Allows to change the value of a curve at a specific date whenever it is possible 
Arguments
Argument
 
Documentation 
CURVE

Curve than needs to be changed 
DATE

Date where the value is changed 
VALUE

New value for the curve 
FIXED_DATES
OPTIONAL
Boolean if true the created objects are created with fixed dates 

cost.ComputeCurves (type, unit, time-unit, cumulated, start-date, end-date, objects1, objects2, objects3, objects4, objects5)
Returns a curve or an array of computed Opxcurve object that matches to the function arguments. Warning you have to carefully destroy the curves object after their usage to insure that memory used to compute this curves is reallocated correctly 
Arguments
Argument
 
Documentation 
TYPE

String: Identifies a curve type, the function FindCurveName can be used to retrieve a curve name 
UNIT

Cost unit or string: identifies the unit used to compute the curves 
TIME-UNIT

String: identifies the time unit used to compute the curves 
CUMULATED

Boolean: if true the curve is cumulated 
START-DATE

Date: start date for the curves computation 
END-DATE

Date: end date for the curves computation 
OBJECTS1

Object or array of objects: identifies the primary object or objects used to compute the curve or curves 
OBJECTS2

Object or array of objects: identifies the secondary object or objects used to compute the curve or curves 
OBJECTS3
OPTIONAL
Object or array of objects: identifies the third object or objects used to compute the curve or curves 
OBJECTS4
OPTIONAL
Object or array of objects: identifies the fourth object or objects used to compute the curve or curves 
OBJECTS5
OPTIONAL
Object or array of objects: identify the fifth object or objects used to compute the curve or curves 

currentActivityCurveAggregator ()
Returns the current curve aggregator used to compute a curve 

defineActivityCurveAggregator (canibalize)
Allows to define a class that is used to aggregate project or activities. The aggregation rule must be defined by implementing the map method on this class 
Arguments
Argument
 
Documentation 
CANIBALIZE
OPTIONAL
boolean canibalize, indicates if each aggregator must be computed separately 

defineoutput (name, comment, script)
Allow to define a new output definition. The script function will be called with the output definition as this when the outputs need to be created. 
Arguments
Argument
 
Documentation 
NAME

Name of the output definition 
COMMENT

Comment of the output definition 
SCRIPT

Script function or callable object. 

fillGridWithCurve (curve, start-date, end-date)
This function applies on a graphics or grid and fill the grid content with the objects used for the curve computation. Two dates can be passed to select a period in the curve. 
Arguments
Argument
 
Documentation 
CURVE

Curve object used to describe the table content 
START-DATE
OPTIONAL
date: start date of the period 
END-DATE
OPTIONAL
date: end date of the period 

filterOutputs (coordinates, start-date, end-date, scenario)
Return an outputs matching the BS, project and unit provided. 
Arguments
Argument
 
Documentation 
THIS

This : Output definition 
COORDINATES

List of project, BS and unit 
START-DATE

Start date. Optional 
END-DATE

End date. Optional 
SCENARIO

Scenario. Optional 

findCostTableItemValue (type, date, objects)
Find a cost table item value using some unique carateristics 
Arguments
Argument
 
Documentation 
THIS

cost table item 
TYPE

Name of the curve type or cost table index 
DATE

Date 
OBJECTS

When there is the column iteration, list of ids 

findCostTableSlotName (type, date, objects)
Find a cost table slot name using some of its carateristics 
Arguments
Argument
 
Documentation 
THIS

Name of the master table 
TYPE

Name of the curve type or cost table index 
DATE

Date of the field 
OBJECTS

When there is the column iteration, list of ids 

findCurve (wildcard, reference, expenditure_type, rate_table, version-or-portfolio)
Allows you to retrieve the internal curve representation of a non composite curve, specifying a wildcard for the main name, and specifying optionaly the reference, expenditure_type and rate_table. This function can be usefull to fill the list of possiblevalues of a report cell, to let the user choose between a given set of curves. The function returns the name of the curve if the curve exists and undefined if no curve exists 
Arguments
Argument
 
Documentation 
WILDCARD

String: wildcard allowing to retrieve the curve main name 
REFERENCE
OPTIONAL
OpxReference: specifies the reference the curve is computed in 
EXPENDITURE_TYPE
OPTIONAL
String: name of the expenditure type 
RATE_TABLE
OPTIONAL
String: name of the rate table 
VERSION-OR-PORTFOLIO
OPTIONAL
version number or portfolio simulation name of the project data displayed 

findCurveName (wildcard, reference, expenditure_type, rate_table, version-or-portfolio)
Allows you to retrieve the name of a non composite curve, specifying a wildcard for the main name, and specifying optionaly the reference, expenditure_type and rate_table. This function can be usefull to fill the list of possiblevalues of a report cell, to let the user choose between a given set of curves. The function returns the name of the curve if the curve exists and undefined if no curve exists 
Arguments
Argument
 
Documentation 
WILDCARD

String: wildcard allowing to retrieve the curve main name 
REFERENCE
OPTIONAL
OpxReference: specifies the reference the curve is computed in 
EXPENDITURE_TYPE
OPTIONAL
String: name of the expenditure type 
RATE_TABLE
OPTIONAL
String: name of the rate table 
VERSION-OR-PORTFOLIO
OPTIONAL
version number or portfolio simulation name of the project data displayed 

getCostUnitCache (source-unit, destination-unit, rate-table, rate-center)
Returns a cost unit cache 
Arguments
Argument
 
Documentation 
SOURCE-UNIT

Source cost unit 
DESTINATION-UNIT

Destination cost unit 
RATE-TABLE

Rate table or undefined 
RATE-CENTER

Variable arguments specifying the rate center 

getCurveObjects (date)
This function applies on a curve and returns a vector of elements used to compute its value 
Arguments
Argument
 
Documentation 
DATE
OPTIONAL
date: date for which we want the information 

getcurvetypecachecount ()
Returns the current curve type cache count. This value is incremented every time the internal curve type cache is resetted. 

getexistingoutput (def, startdate, enddate, wbs, rbs, obs, cbs, unit, refs, project, scenario)
Return an existing output if possible matchine the given coordinates. 
Arguments
Argument
 
Documentation 
DEF

This : Output definition 
STARTDATE

Start date 
ENDDATE

End date 
WBS

WBS 
RBS

RBS 
OBS

OBS 
CBS

CBS 
UNIT

Unit 
REFS

List of references 
PROJECT

Project 
SCENARIO
OPTIONAL
scenario 

getoutputnode (def, dataset, wbs, rbs, cbs, obs, unit, refs)
Return the output node of the output definition corresponding to given objects. 
Arguments
Argument
 
Documentation 
DEF

This : Output definition 
DATASET

Dataset 
WBS

WBS 
RBS

RBS 
CBS

CBS 
OBS

OBS 
UNIT

Unit 
REFS

List of references 

incrementcostversion ()
Increment the cost version of the object given as this 

insertBetweenDates (object, startdate, enddate, unit, useraggregation, ratetable)
This function is basically the same function than insert at the exception that the compputation is done between two dates, all cost information located outside these dates is ignored 
Arguments
Argument
 
Documentation 
OBJECT

Any object that need to be cost computed 
STARTDATE

date: start date of the period 
ENDDATE

date: end date of the period 
UNIT
OPTIONAL
String: timeunit or OpxCostunit: the unit used to perform the computation 
USERAGGREGATION
OPTIONAL
String: the user aggregation name if the computation depends 
RATETABLE
OPTIONAL
String: the rate table name used to perform the cost computation 

listallcurves (wildcard, reference, expenditure_type, rate_table, use-wildcards, map-all-language, return-basic, version-number)
Returns a list of all curves matching different wildcards 
Arguments
Argument
 
Documentation 
WILDCARD

String: wildcard allowing to retrieve the curve main name 
REFERENCE
OPTIONAL
OpxReference: specifies the reference the curve is computed in 
EXPENDITURE_TYPE
OPTIONAL
String: name of the expenditure type 
RATE_TABLE
OPTIONAL
String: name of the rate table 
USE-WILDCARDS
OPTIONAL
arguments reference expenditure_type rate_table are treated as wildcards if this argument is true 
MAP-ALL-LANGUAGE
OPTIONAL
if true (the default), test the wildcard in lall languages, if fals, only in the current language 
RETURN-BASIC
OPTIONAL
if true (the default), return also basic curves even when use-wildcards is true and arguments reference expenditure_type or rate_table are given 
VERSION-NUMBER
OPTIONAL
Integer : version of the projects displayed if any 

listallcurvesname (wildcard, reference, expenditure_type, rate_table, use-wildcards, return-basic, version)
Returns a list of all curves names matching different wildcards 
Arguments
Argument
 
Documentation 
WILDCARD

String: wildcard allowing to retrieve the curve main name 
REFERENCE
OPTIONAL
OpxReference: specifies the reference the curve is computed in 
EXPENDITURE_TYPE
OPTIONAL
String: name of the expenditure type 
RATE_TABLE
OPTIONAL
String: name of the rate table 
USE-WILDCARDS
OPTIONAL
arguments reference expenditure_type rate_table are treated as wildcards if this argument is true 
RETURN-BASIC
OPTIONAL
if this argument is true (the default), return also basic curves even when use-wildcards is true and arguments reference expenditure_type or rate_table are given 
VERSION
OPTIONAL
Integer : version of the projects displayed if any 

mostSpecificRateCenter (object, ratetable, resourceorunit)
Returns the escalation used to compute the cost one object, if you are using multiple OPX2 rate centers you can find difficult to know which combination or rate centers is used to compute the cost of one object. This function returns an escalation is there is one which carries the most specific rate centers used to compute the cost of one object. This function can be used on OpxPlannedHours, OpxActualHours, OpxPlannedExpenditure of OpxActualExpenditure 
Arguments
Argument
 
Documentation 
OBJECT

Opx Object: can be a OpxPlannedHours, OpxActualHours, OpxPlannedExpenditure or OpxActualExpenditure or an object used in user aggregation 
RATETABLE
OPTIONAL
String: name or the rate table used if not specified the default rate table is used 
RESOURCEORUNIT
OPTIONAL
Opx Object: resource or unit of the object, this argument is usefull 
Syntax examples
cost.MostSpecficRateCenter(My_alloc);

outputGetDef ()
Get output definition corresponding to the given output node. 
Arguments
Argument
 
Documentation 
THIS

Output node 

outputs (outputdef)
Return all outputs linked to the object and output definition. This includes scenario outputs. 
Arguments
Argument
 
Documentation 
THIS

This : object 
OUTPUTDEF

Output definition 

outputVersionAndDate (output-def, project)
Get the cost version and the date of the last generation of outputs. 
Arguments
Argument
 
Documentation 
OUTPUT-DEF

output definition 
PROJECT

project 

previous (timeunit)
Allows you to get the previous date before a given date in a given time unit 
Arguments
Argument
 
Documentation 
TIMEUNIT

String: Time unit 

printcftref (object)
Print cft-ref label 
Arguments
Argument
 
Documentation 
object

cft-ref 

recomputeBudget ()
Allows you to recompute all obsolete budget information in OPX2 

recomputeCost ()
Allows you to recompute all obsolete cost information in OPX2 

sup (ra2, key, start, end, threshold, type1, type2, all)
Arguments
Argument
 
Documentation 
RA2

second resource array to compare with 
KEY

Object use as a key to compute the total 
START

Start date 
END

End date 
THRESHOLD

the function compare the formula this>ra2*(1-threshold) 
TYPE1

Type of data for the first resource array 
TYPE2

Type of data for the second resource array 
ALL
OPTIONAL
default is false, indicates if all values should verify the formula 

total (key, start, end, type)
Arguments
Argument
 
Documentation 
KEY

Object use as a key to compute the total 
START

Start date 
END

End date 
TYPE

Type of data 

unComputeCost (object)
This function is usefull to indicate that the cost information on one object should be recomputed, cost information will be recomputed using the recomputeCost function. OPX2 will try to recompute only the necessary information analysing dependencies between objects 
Arguments
Argument
 
Documentation 
OBJECT
OPTIONAL
Opx Object: object where cost information is becoming obsolete, if 

usedEscalations (object, ratetable, resourceorunit, startdate, enddate)
Returns the list of escalations used to compute the cost of one specific object in a specific rate table, this function can be usefull to understand which escalations are used to compute the cost of one object 
Arguments
Argument
 
Documentation 
OBJECT

Opx Object: can be a OpxPlannedHours, OpxActualHours, OpxPlannedExpenditure or OpxActualExpenditure or an object used in user aggregation 
RATETABLE
OPTIONAL
String: name or the rate table used if not specified the default rate table is used 
RESOURCEORUNIT
OPTIONAL
Opx Object: resource or unit of the object, this argument is usefull 
STARTDATE
OPTIONAL
Date: start of the period used to search the escalations 
ENDDATE
OPTIONAL
Date: end of the period used to search the escalations 

Variables
cost
The cost module contains some usefull function to perform cost operations in OPX2 script 

Database anonymization
This chapter contains functions that allow database anonymization manipulation 
Functions
addAnonymizationType (type)
Add a new anonymization type to the anonymization allowed types 
Arguments
Argument
 
Documentation 
TYPE

A symbol representing the type (provided by FindSymbol) 

clearAnonymizationRules ()
Clear all anonymization rules, even the kernel default ones 

defineAnonymizationFinalization (body)
Define a anonymization function to call during anonymzation finalization 
Arguments
Argument
 
Documentation 
BODY
OPTIONAL
function to call to initialize finalization 

defineAnonymizationInitialization (body)
Define a anonymization function to call during anonymzation initialization 
Arguments
Argument
 
Documentation 
BODY
OPTIONAL
function to call to initialize anonymization 

defineAnonymizationRule (column, type, class, body)
Define an anonymization rule 
Arguments
Argument
 
Documentation 
COLUMN

column on which the anonymization rule is 
TYPE
OPTIONAL
type on which the anonymization rule is 
CLASS
OPTIONAL
class on which the anonymization rule is 
BODY
OPTIONAL
function to call to proceed the anymization, this function must always return a string 

findSymbol (name, package)
Find a symbol representation of a string 
Arguments
Argument
 
Documentation 
NAME

name of the searched symbol 
PACKAGE
OPTIONAL
package of the searched symbol 

printAnonymizationRules ()
Print all anonymization rules, even the kernel default ones 

removeAnonymizationRule (column, type, class)
Remove an anonymization rule 
Arguments
Argument
 
Documentation 
COLUMN

column on which the anonymization rule is 
TYPE
OPTIONAL
type on which the anonymization rule is 
CLASS
OPTIONAL
class on which the anonymization rule is 

resetAnonymizationFinalization ()
Reset / clear all function called during anonymzation finalization 

resetAnonymizationInitialization ()
Reset / clear all function called during anonymzation initialization 

Database management
This chapter covers the API dedicated to Database management, it implements the basic functions that will allow you to write any SQL request in the OPX2 database 
Classes or Objects
opxEnvDbConnection
Allows you to define a data source using an OPX2 db driver, the SQL api can use or an OpxEnvDbConnection or any other object. If another object is used then the current OPX2 connection will be used instead. It means that the request will occur on the database currently used by OPX2 
Constructor syntax
The OpxEnvDbConnection class is an OPX object class also accessible from the OPX2
interface (see importing data from a database in OPX2 pro documentation).
The constructor follows the same rules than any Opx Object constructor for example:
new OpxEnvDbConnection ("name","my connection","userName","mydb");
Attributes
Argument
Documentation 
NAME
String: name of the connection 
COMMENT
String: label of the connection 
USERNAME
String: user name of the database 
PASSWORD
String: password of the database 
DATABASETYPE
String: type of database the possible options are: 
MACHINE
String: server name 
DATASOURCEHOST
String: Data source host (host of the OPX2 db driver 
DATASOURCESERVICE
Integer: Data source port (port of the OPX2 db driver 

Syntax operators
sqlWithDatabaseTransaction
Allows to define a consistante series of request in a database transaction. The transaction must be finalized by a commit or rollback statement. It is possible in this form to define on which opxEnvDbConnection to work if no connection is defined the transaction are done on the current OPX2 connection. 
Syntax examples
SqlWithDatabaseConnection { .... Commit();  }
SqlWithDatabaseConnection (MyConnection) { ..... Rollback(); }

Functions
dbComplexTemplateSelect (template-name, classes-and-nicknames, arg)
Performs a complex select request (allow from a join) using a defined database template on the current database or an envDbConnection object. The function returns a vector of vectors with one vector per line and one value per column. 
Arguments
Argument
 
Documentation 
TEMPLATE-NAME

Symbol: name of the template, returned by defineDbTemplate. 
CLASSES-AND-NICKNAMES

list of cons: type ((class-name1 . nickname1) (class-name2 . nickname2)) 
ARG
OPTIONAL
String: where clause in SQL language 
Syntax examples
var result =  plw.dbComplexTemplateSelect(tr_template,new list(cl.cons(#DATABASE-IO:TRANSACTION-LOG#,"tl"),cl.cons(plc.transaction.name,"ot")),"transactions_where_clause_dataset".sql();

dbTemplateCount (template-name, where-clause)
Performs a count request using a defined database template on the current database or an envDbConnection object. The function returns an integer. 
Arguments
Argument
 
Documentation 
TEMPLATE-NAME

Symbol: name of the template, returned by defineDbTemplate. 
WHERE-CLAUSE
OPTIONAL
String: where clause in SQL language 
Syntax examples
var result = dbTemplateCount(mySelectTemplate_0);

dbTemplateDelete (template-name, rows)
Performs a delete request on a database server table, the rows are identified by a list of index columns and a vector of index values 
Arguments
Argument
 
Documentation 
TEMPLATE-NAME

Symbol: name of the template, returned by defineDbTemplate. 
ROWS

Vector of vector of values depending on the number of column index 
Syntax examples
var myNewCostUnits = new vector();
var myNewCostUnit = new vector();

myNewCostUnit.push(13061969);

myNewCostUnits.push(myNewCostUnit);

SqlwithDatabasetransaction {
  dbTemplateDelete(myDeleteTemplate_3, myNewCostUnits);
  sqlCommit();
}

dbTemplateInsert (template-name, rows)
Performs an insert request on a database server table, the rows to insert are defined by a vector of vector of column values 
Arguments
Argument
 
Documentation 
TEMPLATE-NAME

Symbol: name of the template, returned by defineDbTemplate. 
ROWS

Vector of vector of values 
Syntax examples
var myNewCostUnits = new vector();
var myNewCostUnit = new vector();

myNewCostUnit.push(13061969);
myNewCostUnit.push("MY TEST UNIT");
myNewCostUnit.push("My Test Unit Comment");
myNewCostUnit.push(1.3);
  
myNewCostUnits.push(myNewCostUnit);

SqlwithDatabasetransaction {
  dbTemplateInsert(myInsertTemplate_1, myNewCostUnits);
  sqlCommit();
}

dbTemplateSelect (template-name, where-clause)
Performs a select request using a defined database template on the current database or an envDbConnection object. The function returns a vector of vectors with one vector per line and one value per column. 
Arguments
Argument
 
Documentation 
TEMPLATE-NAME

Symbol: name of the template, returned by defineDbTemplate. 
WHERE-CLAUSE
OPTIONAL
String: where clause in SQL language 
Syntax examples
var result = dbTemplateSelect(mySelectTemplate_0);

dbTemplateUpdate (template-name, rows)
Performs an update request on a database server table, the rows to update are defined by a vector of vector of column values finishing by indexes values. 
Arguments
Argument
 
Documentation 
TEMPLATE-NAME

Symbol: name of the template, returned by defineDbTemplate. 
ROWS

Vector of vector of values 
Syntax examples
var myNewCostUnits = new vector();
var myNewCostUnit = new vector();

myNewCostUnit.push("MY TEST UNIT UPDATED");
myNewCostUnit.push("My Test Unit Comment Updated");
myNewCostUnit.push(3.3);
myNewCostUnit.push(13061969);

myNewCostUnits.push(myNewCostUnit);

SqlwithDatabasetransaction {
  dbTemplateUpdate(myUpdateTemplate_2, myNewCostUnits);
  sqlCommit();
}

defineDbComplexTemplate (database-type, args)
This method allows you to define a database template targeting a specific (or all) RDBMS using talbe-def-columns directly. It means allow columns from different table -> can be used for sql join 
Arguments
Argument
 
Documentation 
THIS

String: custom identifier of the request, to recall it later on 
DATABASE-TYPE

String: RDBMS targeted (postgresql, oracle, odbc-sql-server or all to target them all) 
ARGS

list of cons (class att) to insert table-def-col in tamplate specs 
Syntax examples
var my_template = "transaction_sql_template".defineDbComplexTemplate("ALL",cl.cons(#DATABASE-IO:TRANSACTION-LOG#,#TRN-NUMBER#),cl.cons(plc.transaction.name,#OBJECT-NUMBER#))

defineDbTemplate (database-type, table, other-arguments)
This method allows you to define a database template targeting a specific (or all) RDBMS. Used with sqlTable() and sqlColumn() it handles translating table and column name to the correct name for the RDBMS the request is executed on. The function return a symbol representing the template name. 
Arguments
Argument
 
Documentation 
THIS

String: custom identifier of the request, to recall it later on 
DATABASE-TYPE

String: RDBMS targeted (postgresql, oracle, odbc-sql-server or all to target them all) 
TABLE

String : call to sqlTable 
OTHER-ARGUMENTS

Strings : call to sqlColumn and sqlIndexColumn : As many as you want which will be concatenated to build the template. 
Syntax examples
var mySelectTemplate_0 = "SELECT_COST_UNIT_TEMPLATE".defineDbTemplate("ALL", "OpxCostUnit".sqlTable(), "OpxCostUnit".sqlColumn("onb"), "OpxCostUnit".sqlcolumn("name"), "OpxCostUnit".sqlcolumn("comment"), "OpxCostUnit".sqlcolumn("default_value"));
var myInsertTemplate_1 = "INSERT_INTO_COST_UNIT".defineDbTemplate("ALL", "OpxCostUnit".sqlTable(), "OpxCostUnit".sqlColumn("onb"), "OpxCostUnit".sqlcolumn("name"), "OpxCostUnit".sqlcolumn("comment"), "OpxCostUnit".sqlcolumn("default_value"));
var myUpdateTemplate_2 = "UPDATE_INTO_COST_UNIT".defineDbTemplate("ALL", "OpxCostUnit".sqlTable(), "OpxCostUnit".sqlcolumn("name"), "OpxCostUnit".sqlcolumn("comment"), "OpxCostUnit".sqlcolumn("default_value"), "OpxCostUnit".sqlIndexColumn("onb"));
var myDeleteTemplate_3 = "DELETE_FROM_COST_UNIT".defineDbTemplate("ALL", "OpxCostUnit".sqlTable(), "OpxCostUnit".sqlColumn("onb"));

defineDbWhereClause (database-type, arguments)
This method allows you to define a database where clause targeting a specific (or all) RDBMS. Used with sqlTable(),sqlColumn(), sqlColumnValue() and others... It handles translating table and column name to the correct name, column value to the correct value for the RDBMS the request is executed on. The function return a symbol representing the where clause name. 
Arguments
Argument
 
Documentation 
THIS

String, custom identifier of the request, to recall it later on 
DATABASE-TYPE

String, RDBMS targeted (postgresql, oracle, odbc-sql-server or all to target them all) 
ARGUMENTS

Strings, call to sqlColumn, sqlColumnValue, sqlInColumnValues : As many as you want which will be concatenated to build the where clause. 
Syntax examples
var myWhereCLause = "MY_SELECT_WHERECLAUSE".defineDbWhereClause("ALL","LNAME",MyClassSymbol.sqlColumn("NAME")," in ",MyClassSymbol.sqlColumn.sqlInColumnValues("NAME","LNAME"));
...
var myresult = dbTemplateSelect(mySelectTemplate, myWhereCLause, myValuesAsList);

defineSql (name, database-type, other-arguments)
This method allows you to define an sql statement targeting a specific (or all) RDBMS. Used with sqlTable() and sqlColumn() it handles translating table and column name to the correct name for the RDBMS the request is executed on. 
Arguments
Argument
 
Documentation 
NAME

String: custom identifier of the request, to recall it later on 
DATABASE-TYPE

String: RDBMS targeted (postgresql, oracle, odbc-sql-server or all to target them all) 
OTHER-ARGUMENTS

Strings or call to sqlTable and sqlColumn: As many as you want which will be concatenated to build the SQL request 
Syntax examples
"toto".definesql("ALL","SELECT * FROM ", "OpxUserParameter".sqlTable()," WHERE ", "OpxUserParameter".sqlColumn("key")," LIKE '%toto%'");

deleteDbTemplate (database-type)
This method allows you to delete a database template created with defineDBTemplate, targeting a specific (or all) RDBMS. The function returns true if succeeded. 
Arguments
Argument
 
Documentation 
THIS

Symbol: custom identifier of the template returned by defineDBTemplate 
DATABASE-TYPE

String: RDBMS targeted (postgresql, oracle, odbc-sql-server or all to target them all) 
Syntax examples
var mySelectTemplate_0 = "SELECT_COST_UNIT_TEMPLATE".defineDbTemplate("ALL", "OpxCostUnit".sqlTable(), "OpxCostUnit".sqlColumn("onb"), "OpxCostUnit".sqlcolumn("name"), "OpxCostUnit".sqlcolumn("comment"), "OpxCostUnit".sqlcolumn("default_value"));
mySelectTemplate.deleteDBTemplate();

getDbTemplate (database-type, class, other-arguments)
Work like defineDbTemplate, except the name, database-type and class (instead of table) are used as a key in a cache not to recreate the template everytime 
Arguments
Argument
 
Documentation 
THIS

String: custom identifier of the request, to recall it later on 
DATABASE-TYPE

String: RDBMS targeted (postgresql, oracle, odbc-sql-server or all to target them all) 
CLASS

String : a class 
OTHER-ARGUMENTS

Strings : call to sqlColumn and sqlIndexColumn : As many as you want which will be concatenated to build the template. 
Syntax examples
var mySelectTemplate_0 = "SELECT_COST_UNIT_TEMPLATE".getDbTemplate("ALL", "OpxCostUnit", "OpxCostUnit".sqlColumn("onb"), "OpxCostUnit".sqlcolumn("name"), "OpxCostUnit".sqlcolumn("comment"), "OpxCostUnit".sqlcolumn("default_value"));

isEncryptedDatabase ()
This method allows you to test if a database is an encrypted database. 
Arguments
Argument
 
Documentation 
THIS

nothing or a database object 
Syntax examples
isEncryptedDatabase();

readarglistfromlog (class, columns, data)
Decode transaction log data column 
Arguments
Argument
 
Documentation 
CLASS

Symbol: name of the class of the object concerned by transaction log 
COLUMNS

content of column "columns" of transaction log 
DATA

content of column "data" of transaction log 
Syntax examples
(JSPACKAGE::READARGLISTFROMLOG TEMP-TABLE::_BA_PT_BATCH
          (:OBJECT-NUMBER :MODIFY-VERSION :DATASET :NAME :COMMENT :_BA_AA_D_CREATION_DATE :_BA_AA_N_BATCH_VERSION :_INF_RA_USER_SCRIPT :_INF_AA_AT_FREQ :_BA_AA_N_BATCH_TYPE)
          #\)

sqlColumn ()
This method is used in conjonction with defineSql to translate an attribute name into the correct column name for the current RDBMS 
Syntax examples
See defineSql

sqlColumnValue ()
This method is used in conjonction with defineDbWhereClause to translate an attribute value into the correct column value for the current RDBMS, managing encryption if needed. 
Syntax examples
See defineDbWhereClause

sqlCommit ()
Commit the last request on the database server, to function the SqlCommit expression should be used inside a SqlWithDatabaseTransaction form.

sqlCounttuple (tablename, whereclause)
Allows you to count the number of tuples in a table 
Arguments
Argument
 
Documentation 
TABLENAME

String: name of the table 
WHERECLAUSE
OPTIONAL
String: where clause 

sqlDelete (table, index_column_names, index_types, vector)
Performs a delete SQL request on a list of rows, the rows are identified by a list of index columns and a vector of index values 
Arguments
Argument
 
Documentation 
TABLE

String: name of the table 
INDEX_COLUMN_NAMES

String or vector of strings: identifying the column(s) index 
INDEX_TYPES

String or vector of strings identifying the column(s) type 
VECTOR

Vector of values or vector of vector of values depending on the number of column index 
Syntax examples
SqlDelete("task","object_number","integer",{122222 122223})

sqldisablecommit (nil)
This method allows you to disable commit, for example if you are doing several exports and want to commit all exports at once 
Arguments
Argument
 
Documentation 
nil



sqlenablecommit (nil)
This method allows you to enable commit again after a call to disable_commit 
Arguments
Argument
 
Documentation 
nil



sqlExecuteImmediate (request)
Allows to execute any update or creation request 
Arguments
Argument
 
Documentation 
REQUEST

String: a SQL request 

sqlInColumnValues ()
This method is used in conjonction with defineDbWhereClause to translate an attribute value into the correct column value for the current RDBMS, managing encryption if needed. 
Syntax examples
See defineDbWhereClause

sqlIndexColumn ()
This method is used in conjonction with defineSqlor defineTemplate to translate an attribute name into the correct column name for the current RDBMS 
Syntax examples
See defineSql, defineDbTemplate

sqlInsert (table, column_names, column_types, vector)
Performs an insert SQl request on a list of rows, the rows are defined by a vector of vector or column values 
Arguments
Argument
 
Documentation 
TABLE

String: name of the table 
COLUMN_NAMES

Vector of strings: identifying the column(s) 
COLUMN_TYPES

Vector of strings identifying the column(s) type 
VECTOR

Vector of vector of values depending on the number of column index 
Syntax examples
SqlInsert("task",{"name"},{"string"},{{"T1"},{"T2"}}

sqlposition ()
This method is used in conjonction with defineSql to translate instr/position function for the current RDBMS 
Syntax examples
obj.onb.tostring().sqlposition(#DATABASE-IO:TRANSACTION-LOG#.sqlColumn("data"))

sqlProbeTable (tablename)
Tests if a table exists in the database 
Arguments
Argument
 
Documentation 
TABLENAME

String: name of the table 

sqlProbeTableColumn (tablename, columnname)
Tests if a table column exists in the database 
Arguments
Argument
 
Documentation 
TABLENAME

String: name of the table 
COLUMNNAME

String: name of the column 

sqlRollback ()
Rollback the last request on the database server, to function the Rollback expression should be used inside a WithDatabaseTransaction form.

sqlSelect (table, column_names, column_types, where-clause)
Performs a select request on the OPX2 database or envDbConnection. The function returns a vector of vectors with one vector per line and one value per column. It is possible to specify the column types, with a vector of strings, the types supported are: "NUMBER","INTEGER","DATE","STRING", the values are converted according to this types. If an error occurs during the conversion process, the undefined value is stored. 
Arguments
Argument
 
Documentation 
TABLE

String: name of the table 
COLUMN_NAMES

Vector of string: names of the columns 
COLUMN_TYPES
OPTIONAL
Vector of strings: types of the columns in "NUMBER","INTEGER","DATE","STRING" 
WHERE-CLAUSE
OPTIONAL
String: where clause in SQL language 
Syntax examples
Myconnection.SqlSelect("task",{"name","object_number","imposed_start"},
                     {"string","integer","date"},"name like '%XA%'")
returns the vector: {{"1A1",122222,#1/1/01#},
                     {"1A2",122223,#1/1/01#}}

sqlTable ()
This method is used in conjonction with defineSql to translate a class name into the correct table name for the current RDBMS 
Syntax examples
See defineSql

sqlTestConnection ()
Returns true if the connection is OK, false otherwise. Returns always true on the current OPX2 connection 

sqlUpdate (table, column_names, column_types, index_column_names, index_types, vector)
Performs a sql update request on a list of rows. For each row the index are send to retrieve the row and the values used to update the column updated. If you want to perform several updated at the same time this order is much more efficient than several execute-immediate 
Arguments
Argument
 
Documentation 
TABLE

String: name of the table to update 
COLUMN_NAMES

Vector of strings: names of the columns to update 
COLUMN_TYPES

Vector of strings: types of the columns to update 
INDEX_COLUMN_NAMES

String or Vector of strings: describing the column used as indexes 
INDEX_TYPES

String or Vector of strings: describing the types of the index columns 
VECTOR

Vector of vectors: vector of vector of values describing both index and values used to update 
Syntax examples
SqlUpdate("task",{"imposed_start"},{"date"},{"onb"},{"integer"},
{{#1/6/01#,12222},{#1/7/01#,122223}})   ;

Debugging tools
This chapter introduces some basic trace and debug functions that will facilitate the debugging of your OPX2 script program 
Functions
activatetraceronfunction ()
Takes a function name as this and activates the tracer on it. This is for debug purpose only, as it can really slow up the software and generates lots of log 

breakonformula ()
Breaks when the formula passed as this is called 
Arguments
Argument
 
Documentation 
THIS

Formula 

callprofiled (args)
Same as call but displays time and mem profiling of the function execution 
Arguments
Argument
 
Documentation 
ARGS

Arguments of the function 

deactivatetraceronfunction ()
Takes a function name as this and deactivates the tracer on it. 

inspect ()
Allows to inspect an object in the OPX2 console, enter :H to get the online help 

okprintpdfcallback ()
Print a pdf and return the file path in the server. 

profile ()
Profile the javascript function given as this. The profile traces will be displayed in the Intranet log. 
Arguments
Argument
 
Documentation 
THIS

Function to profile 

profiledisplayscripts (threshold)
Profiles calls to display script and handler functions whose execution time is greater than threshold 
Arguments
Argument
 
Documentation 
THRESHOLD
OPTIONAL
Threshold in ms. Default is 10 

replacedby ()
Returns the function that replaces the function given as this. This only works on functions marked as replaceable. 
Arguments
Argument
 
Documentation 
THIS

Function 

setBreak (after)
Allows to set a breakpoint on a function call 
Arguments
Argument
 
Documentation 
AFTER
OPTIONAL
boolean, by default is false 

startFormulaProfiler ()
Starts the formula profiler, that explains the amount of time spent in all formulas 

stopFormulaProfiler ()
Stops the formula profiler, see startformulaprofiler 

trace ()
Allows to set a trace on a function 

unbreakonformula ()
Remove the break on the formula define with BreakOnFormula 
Arguments
Argument
 
Documentation 
THIS

Formula 

unprofile ()
Deactivate the profiling on the function given as this. 
Arguments
Argument
 
Documentation 
THIS

Function to profile 

unprofiledisplayscripts ()
Deactivate js profiler 

unTrace ()
Allows to remove a trace on a function 

Document management API
This chapter contains an example of a script which restores OPX2 documents in a local file directory 
Classes or Objects
opxDocument
It the OPX document object, this object is visible in the OPX2 data menu, the attributes are described in the help on OPX classes. The load method allows to retrieve a document from the database and store it in a file. 

Functions
downloadDocumentFromServer (document)
Downloads the document to the client. 
Arguments
Argument
 
Documentation 
document

a document 

filename (path)
Extract the file name (with extension) from a path. 
Arguments
Argument
 
Documentation 
PATH

A string or a pathname object 

preview ()
Returns true if the document can be displayed in the annotation editor 
Arguments
Argument
 
Documentation 
this

a document 

Elastic search api
This chapter covers the API allowing to query elastic search 
Functions
deleteElasticIndexes ()
Delete the elastic search index associated to the current database, after this call, all objects will be reindexed afterward 

elasticBatchIndex ()
Run elastic indexation in a batch. It's only available if the elastic-batch-index is set in intranet.ini. It that case, the elastic indexation is disabled on the slaves. 

elasticClearScrollId ()
Clear the scroll Id 

elasticContent ()
This methods returns a list of strings or streamable objects sent to elastic when an object is indexed. This method can be specialized to configure which object content is visible in elastic. By default the method returns a list that can be concatened with the specialized method 

elasticContentMapper (object, slots, strvalue)
This method is called by elasticContent to map the attributes to index. It could return an object attribute or a list of object attribute and a utf8 string. It could return false, in that case the attribute and it value are not indexed. 
Arguments
Argument
 
Documentation 
OBJECT

Object being indexed 
SLOTS

an object attribute or a list of object attributes 
STRVALUE

the attribute value 

elasticEscapeQuery ()
Escape a query for an exact search 

elasticIndex ()
This methods indexes an object in elastic search, it can be called on an object if you want to have this object immediately visible in elastic, if you want to configure the content of the object, you must specialize the ElasticContent method 

elasticIndexationStatus ()
Returns the indexation status as a plist : database, date, progress, last_transaction, version, indexed_docs, total_docs. 

elasticIndexInfo ()
Get index information. 

elasticNbOfIndexedClasses ()
Get the number of indexed classes 

elasticScroll (sid, hide_shadowed_objects, test, asked_hits, size, classes, in_classes, project_types, in_project_types, search_persistency, bucket)
Launch a search using the Elastic Search service. Returns a structure that holds list of structure containing the result of the request, the scrollid if asked, the time (in ms) taken by elastic search to process the request, the total time (in ms) taken to execute the request, the lastest HTTP code, error if any and the number of request to the Elastic Search server. 
Arguments
Argument
 
Documentation 
SID

The scroll id generate by a previous call to elasticSearch 
HIDE_SHADOWED_OBJECTS
KEYWORD
argument] indicates if shadowed objects must be hidden 
TEST
KEYWORD
argument] filtering function 
ASKED_HITS
KEYWORD
argument] should be the same as the call to elasticSearch 
SIZE
KEYWORD
argument] should be the same as the call to elasticsearch 
CLASSES
KEYWORD
argument] if provided, used to build the bucket object. See elasticsearch 
IN_CLASSES
KEYWORD
argument] if provided, used to build the bucket object. See elasticsearch 
PROJECT_TYPES
KEYWORD
argument] if provided, used to build the bucket object. See elasticsearch 
IN_PROJECT_TYPES
KEYWORD
argument] if provided, used to build the bucket object. See elasticsearch 
SEARCH_PERSISTENCY
KEYWORD
argument] Number of minutes during wich the search context is kept in order to call nextsearch 
BUCKET
KEYWORD
argument] Create a bucket to store the results, similar to buckets returns by elasticSearchGroupBy. Default is false. 

elasticSearch (query, hide_shadowed_objects, test, asked_hits, classes, datasets, widget, search_persistency)
Launch a search request in elastic, the result is a list of structure containing the result of the request 
Arguments
Argument
 
Documentation 
QUERY

String query 
HIDE_SHADOWED_OBJECTS
KEYWORD
argument] indicates if shadowed objects must be hidden 
TEST
KEYWORD
argument] filtering function 
ASKED_HITS
KEYWORD
argument] number of objects you want to retrieve 
CLASSES
KEYWORD
argument] class or list of classes of searched objects 
DATASETS
KEYWORD
argument] dataset or list of datasets of searched objects, in a case of parent projets or attached projects, the search will be extended, the argument accepts virtual datasets of datasets 
WIDGET
KEYWORD
argument] in case you want to extend the search later-on with nextsearch, you must pass a widget, when the widget is destroyed the search context is cleaned up 
SEARCH_PERSISTENCY
KEYWORD
argument] Number of minutes during wich the search context is kept in order to call nextsearch 

elasticSearchGroupBy (query, hide_shadowed_objects, test, size, datasets, highlight)
Launch a search request in elastic. Returns a list of structure containing the result of the request grouped by classes. 
Arguments
Argument
 
Documentation 
QUERY

String query 
HIDE_SHADOWED_OBJECTS
KEYWORD
argument] indicates if shadowed objects must be hidden 
TEST
KEYWORD
argument] filtering function 
SIZE
KEYWORD
argument] number of objects you want to retrieve 
DATASETS
KEYWORD
argument] dataset or list of datasets of searched objects, in a case of parent projets or attached projects, the search will be extended, the argument accepts virtual datasets of datasets 
HIGHLIGHT
KEYWORD
argument] returns highlight matched text, default is set 

elasticSearchONB (query, onbs)
Launch a search request in elastic, the result is a list of structure containing the result of the request. The search is limited to the provided ONBs 
Arguments
Argument
 
Documentation 
QUERY

String query 
ONBS

List of object numbers 

gotoSmartSearch (value)
launch elastic search and navigate to it 
Arguments
Argument
 
Documentation 
value

string to search with elastic 

isElasticIndexationAvailable ()
Returns true if elastic is running and Planisware setup properly to connect to it 

mapHighLighedString (mapper)
Map a highlighed string 
Arguments
Argument
 
Documentation 
THIS

Search result 
MAPPER

A function that take a string and a boolean that indicate if the string is highlighed. 

mapSearchResultHighlight (mapper)
Map search extract and its corresponding attribute. Except a function of two arguments func(extract, attribute) where attribute can be an object attribute, a list of object attribute or an empty list. 
Arguments
Argument
 
Documentation 
THIS

Search result 
MAPPER

A function that take an extract and an object attribute or a list of object attribute 

nextSearch ()
Returns the next objects to be searched 

parseElasticQuery ()
Return a query and filters based on the provided string. All pairs of key:value are removed from the query and the key matching known filters are return in the filter return value. 
Arguments
Argument
 
Documentation 
THIS

Query to parse 

similarObjects (asked_hits)
Returns the similar objects to an object using the elasticsearch index 
Arguments
Argument
 
Documentation 
ASKED_HITS
KEYWORD
argument] number of objects you want to retrieve 

File Directory
This chapter contains functions on fiels and directories manipulations 
Functions
deletedirectory (string)
Delete, remove a directory 
Arguments
Argument
 
Documentation 
STRING

This : The full string pathname of the directory to remove. 

findnamespace (string)
Finds the namespace in a string representing v2 script with v1 -> returns nil. 
Arguments
Argument
 
Documentation 
STRING

This : the string 

makedirectory (string)
Make, create a directory 
Arguments
Argument
 
Documentation 
STRING

This : The full string pathname of the directory to create. 

Formula and macro API
This chapter describes the specific functions which allows to interact with the OPX2 macros and formulas 
Classes or Objects
formula
The formula object is used in all OPX2 graphics, there are 4 types of formulas: BOOLEAN, NUMBER, DATE, DURATION. Formulas are of type BOOLEAN by default. 
Constructor syntax
new formula("OpxTask","duration\<'1d'""BOOLEAN")
Attributes
Argument
Documentation 
STRINGDEF
String defining the formula 

Functions
callBooleanFormula (formula)
Calls a boolean formula represented by a string on an object, if the formula is not correct issues an error 
Arguments
Argument
 
Documentation 
FORMULA

Is a string 

callDateFormula (formula)
Call a date formula represented by a string on an object, if the formula is not correct issues an error 
Arguments
Argument
 
Documentation 
FORMULA

Is a string 

callDurationFormula (formula)
Call a duration formula represented by a string on an object, if the formula is not correct issues an error 
Arguments
Argument
 
Documentation 
FORMULA

Is a string 

callMacro (arguments)
Call an OPX2 macro, an OPX2 macro can be a syntax function, a menu action or a tool action 
Arguments
Argument
 
Documentation 
ARGUMENTS

[list of arguments] arguments of the macro 
Syntax examples
Mymacro.CallMacro();
Dataset.CallMacro("lock");
Vector_of_dataset.CallMacro("lock");

callNumberFormula (formula)
Call a number formula represented by a string on an object, if the formula is not correct issues an error 
Arguments
Argument
 
Documentation 
FORMULA

Is a string 

callStringFormula (formula)
Call a string formula represented by a string on an object, if the formula is not correct issues an error 
Arguments
Argument
 
Documentation 
FORMULA

Is a string 

exportFunction (argument_types, return_type, doc)
Allows to export an OPX2 script function as an OPX2 macro, if the function has no return value, it will appear as a macro or tool action depending if an argument is specified, if it has a return value it will appear in the OPX2 formula syntax. The types recognized by the syntax are: "BOOLEAN","DATE","DURATION","NUMBER" 
Arguments
Argument
 
Documentation 
ARGUMENT_TYPES

Vector of string describing the argument types 
RETURN_TYPE

String describing the return type 
DOC
OPTIONAL
string: documentation of the macro 

getMacro ()
Allows to retrieve a macro from a string 

importFunction (module, target)
Allows you to import a Lisp function in an OPX2 script module. The module is automaticaly created if it does not exist. It is possible to import all ANSI X3J13 Common Lisp function in OPX2 script. Please consult the ANSI XJ13 documentation before doing it 
Arguments
Argument
 
Documentation 
MODULE

String name of the module 
TARGET
OPTIONAL
string target name of the function in OPX2 script 
Syntax examples
"CL:DELETE-FILE".ImportFunction("CL","DELETEFILE"

iCalendar
This chapter covers the API used to manipulate iCalendar objects 
Functions
appendVal (label-or-value, value)
Add a subpart to an icalendar object, or an element at the end of an icalendar list 
Arguments
Argument
 
Documentation 
THIS

An ical-object or an ical-list 
LABEL-OR-VALUE

A string if 'this' is an ical-object, or an ical-value otherwise 
VALUE

Omitted if 'this' is an ical-object, or an ical-value otherwise 

convertToLocal ()
Convert a date object storing UTC an time to a date object storing the local time of the server 
Arguments
Argument
 
Documentation 
THIS

An ical-value storing a date 

convertToUTC ()
Convert a date object storing the local server time to a date object storing the equivalent UTC time 
Arguments
Argument
 
Documentation 
THIS

An ical-value storing a date 

decodeDate (ical-data)
Create a date object from an icalendar date element 
Arguments
Argument
 
Documentation 
THIS

An ical-value storing a date 
ICAL-DATA

An ical-object containing the timezone data, if any 

getICalLabel ()
Return the label associated to an icalendar object or element 
Arguments
Argument
 
Documentation 
THIS

An ical-object, ical-list or ical-value 

getval (path)
Return a sub-part of an icalendar object, or the internal value of an icalendar element 
Arguments
Argument
 
Documentation 
THIS

An ical-object, ical-list or ical-value 
PATH

A string: sequence of labels separated by spaces 

pushVal (value)
Add an element to an icalendar list (at the beginning of the list) 
Arguments
Argument
 
Documentation 
THIS

An ical-list 
VALUE

An ical-value 

setICalLabel (value)
Replaces the label associated to an icalendar object or element 
Arguments
Argument
 
Documentation 
THIS

An ical-object, ical-list or ical-value 
VALUE

A string 

setParam (label, value)
Adds or modifies a parameter value on an icalendar element 
Arguments
Argument
 
Documentation 
THIS

An ical-value 
LABEL

A string (parameter name) 
VALUE

A string (parameter value) 

setVal (value, path)
Set the value of an ical element or replaces a subpart of an icalendar object 
Arguments
Argument
 
Documentation 
THIS

An ical-object, ical-list or ical-value 
VALUE

An ical-object, ical-list, ical-value if a path is provided, a plist, a list or a string otherwise 
PATH

A string: sequence of labels separated by spaces 

toStr ()
Returns a string in iCalendar format from an icalendar object 
Arguments
Argument
 
Documentation 
THIS

An ical-object 

Indexation
This chapter covers the API used for indexation and retrival of OPX2 objects 
Functions
addIndexFieldsToMap (fields)
Allows to add a new set of field used to index objects of a class 
Arguments
Argument
 
Documentation 
THIS

Class name or class 
FIELDS

Variable arguments list, name of fields that will used for the indexation 

clearAllIndex ()
Clear all index tables 

closestObjects (class, numberofobjects, formula, hashtable, function, symbol)
Returns a list of the closest objects to a string or an object using the Jacquard distance 
Arguments
Argument
 
Documentation 
CLASS
OPTIONAL
class of the objects returned 
NUMBEROFOBJECTS
OPTIONAL
number of objects returned (default is 10) 
FORMULA
OPTIONAL
formula used to filter the objects returned 
HASHTABLE
OPTIONAL
hashtable storing the scores for each object 
FUNCTION
OPTIONAL
function to call on object to retrieve the words 
SYMBOL
OPTIONAL
algorithm to use to compute the scores. Default is :tf-idf, one can use :jaccard to revert to the old algorithm. 

displayedInChart ()
Indicates if an object is displayed in a chart visible by the user 

getIndexTable (language)
Returns the index table associated to a class or object 
Arguments
Argument
 
Documentation 
LANGUAGE

string, language used for the table 

indexAllObjects ()
Index all indexable objects, this function is already called in OPX2 pro and can be called by the programmer within OPX2 IntranetServer 

indexClasses (classes)
Index all objects that belongs to the classes passed as arguments 
Arguments
Argument
 
Documentation 
CLASSES

String, class or vector of classes to index 

indexRequest (classes)
Takes a string as this and returns a request object that allows to map all objects where the string specified can be found 
Arguments
Argument
 
Documentation 
CLASSES
OPTIONAL
class or vector of classes of objects 

insertIndex (language, table)
Inserts an object in an index table 
Arguments
Argument
 
Documentation 
LANGUAGE
OPTIONAL
string, languaged used 
TABLE
OPTIONAL
hashtable, table used 

isClassIndexed (class)
Returns true if a class is indexed 
Arguments
Argument
 
Documentation 
CLASS

class 

locateInChart ()
Locates an object in a chart where it is potentially displayed 

mapStrings (function)
Call the function passed as first argument on each string of an object used in the index 
Arguments
Argument
 
Documentation 
FUNCTION

Function called on each string 

mapWithMatchString (string, f, class, language)
Map on a list of object of the same class (this), matching the provided string 
Arguments
Argument
 
Documentation 
STRING

String searched 
F

function called 
CLASS
OPTIONAL
faster if you provide it): class of the elements in the list 
LANGUAGE
OPTIONAL
default to current language: language to search in 

matchString (string)
Takes an object as this and a string to match 
Arguments
Argument
 
Documentation 
STRING

String searched 

removeIndex (language, table)
Removes an object from an index table, by default objects are automatically removed from tables when they are removed, tables are also automatically updated when object's strings are modified 
Arguments
Argument
 
Documentation 
LANGUAGE
OPTIONAL
string, languaged used 
TABLE
OPTIONAL
hashtable, table used 

requestMatchString (string)
Takes a string or request object as this and a string as first argument returns true if this matches the string passed and false otherwise 
Arguments
Argument
 
Documentation 
STRING

String searched 

searchContext ()
Returns a search context associated to a page, the for in instruction or select method can be used on this search context 

searchString (object, display-matching-attribute)
Takes a string or request object as this and an object as first argument and returns the strings found that matches the request or string passed as this 
Arguments
Argument
 
Documentation 
OBJECT

Object where strings are searched 
DISPLAY-MATCHING-ATTRIBUTE
OPTIONAL
boolean, if true display the name of the attribute matching the string 

select (object)
Selects an object in a search context 
Arguments
Argument
 
Documentation 
OBJECT

Object selected 

setDifference ()
Returns the difference of two sets, a set is any object that can be mapped with the for in instruction 

setIndexFieldsToMap (vector)
Allows to define the fields used in the index tables on a class 
Arguments
Argument
 
Documentation 
VECTOR

Vector or list of fields or fields names 

setIntersection ()
Returns the intersection of two sets, a set is any object that can be mapped with the for in instruction 

setUnion ()
Returns the union of two sets, a set is any object that can be mapped with the for in instruction 

strings ()
Returns the strings associated to an object 

Interacting with form and graphics
This chapter describes the functions and classes which interacts with OPX2 reports and screens 
Classes or Objects
curve
Allows to display an histogram into a graphics, a curve object support one curve in the histogram see drawCurves 
Constructor Arguments
Argument
Documentation 
XPOINTS
Vector of number: x coordinates of the curve 
YPOINTS
Vector of number: y coordinates of the curve 
ARGS
[list of arguments] other curve properties: list of attribute, value where attribute can be: name : name of the curve (appears in the legent) LineColor: color line color of the curve LineWidth: line width of tre curve Color: color of the curve BarThickness: Thickness of curve bars ScaleOnLeft: boolean Plane: position of the curve in the histogram Type: string could be "curve", "bar" or "histo" Mousable: boolean is the curve clickable UpdateMethod: function called when clicking on the curve Data: Data binded to the curve 

graphics
The graphics object is provided when writing scripts inside a report cell. It allows to use drawing functions or to manipulate the content of a cell. A lot of graphics attributes are static, the other attributes are inherited from the editor object which contains the graphics 
Constructor
The constructor of a graphics allows to create a graphics for a specific name cell of a report 
Constructor syntax
New Graphics(cell_name)
Attributes
Argument
Documentation 
X
Integer: Left corner coordinate of the graphics 
Y
Integer: Top corner coordinate of the graphics 
WIDTH
Integer: Width of the graphics 
HEIGHT
Integer: Height of the graphics 
BACKGROUND
Color: Background color of the graphics see the color function (see [color] function) 
FOREGROUND
Color: Foreground color of the graphics (see [color] function) 
CONTOUR
Color: Contour color of the graphics (see [color] function) 
FONT
Font: Font of the graphics see font function (see [font] function) 
LINEWIDTH
Integer: Line With of the lines of the graphics see method drawline 
EDITOR
OpxEditor: Editor object which contains the graphics 
WIDGET
Widget: OPX2 widget which support the editor which contains the graphics 
HIDDEN
Boolean: indicates if the widgets contained if the graphics are hidden or not, this property can be modified in order to dynamic show or hide a cell content. This property only works for input cells, chart cells, grid cells or folder cells. 
POSSIBLEVALUES
Vector of the possible values which can be entered in an input cell, the possiblevalues property can be updated in OPX2 Script in order to compute dynamically the list of possible values of an input field 
FILTER
Returns a formula when it is possible used to filter the objects of a chart or grid, this filter can be updated in order to dynamically change the filter of the displayed chart or grid 
REGIONMANAGER
Returns the region manager object contained in the report cell, a region manager object is an object which can contain one or more temporal charts. It is possible to read and update the following attributes of a region manager object: TopTimeUnitForms, BottomTimeUnitForms, SeparatorWidth, TopStartDate, BottomSTartDate, TopEndDate, BottomEndDate, Calendar, RestReduction, RestColor, RegionDefinition, Font, LeftWindowWidth,SeparatorDAsh, SeparatorType, SeparatorColor, BottomShowIncompleteLines, TopShowIncompleteLines 
TREE
Returns the tree object contained in a report cell, a tree object is a graphical object which displays a tree structure. It is possible to read and update the following attributes of a tree object: boxChildrenRelation, boxEditorClass, LinkColor, font, backgroundcolor, textcolor, BoxClass, DefaultColor, DefaultShape, Title, FatherAttribute 
GRAPH
Returns the graph object contained in a report cell, a tree object is a graphical object which displays a pert graph structure. 
CROSSINGMATRIX
Returns the crossing matrix object contained in a report cell 
GANTT
gantt 
RESOURCEGANTT
resourceGantt 
HISTOGRAM
histogram 
CURVES
curves 
LOADARRAY
LoadArray 
GRID
grid 

hyperlink
Allows to define an hyperlink which can later be used with the go method. There are 8 kind of hyperlinks (to see the different kind of hyperlinks in function go in the hyperlink form of the report builder mode of OPX2): 
Attributes
Argument
Documentation 
TYPE
String: possible values are: Fvalue,Fformula,Url,Page,Macro,List,CreationForm,Script. The properties of the hyperlink object depend of its type: Link properties
Fvalue Attribute EditorType Reports Popup HideOrigin HelpBubble SaveUpdates) Fformula Formula EditorType Reports Popup HideOrigin HelpBubble SaveUpdates) Url Page Title Popup HideOrigin HelpBubble SaveUpdates Page IntranetPage Popup HideOrigin HelpBubble SaveUpdates) Macro Macro HelpBubble HideOrigin SaveUpdates RelationOnly CallMode List ClassOrRelation Style Filter OtherStyles Reports Popup HideOrigin RelationOnly HelpBubble SaveUpdates CreationForm Class EditorType Reports DefaultA1 DefaultV1 DefaultA2 DefaultV2 DefaultA3 DefaultV3 DefaultA4 DefaultV4 DefaultA5 DefaultV5 HideOrigin HelpBubble DefaultsAreImposed DefaultA6 DefaultV6 DefaultA7 DefaultV7 DefaultA8 DefaultV8 SaveUpdates Script Script HideOrigin HelpBubble SaveUpdates 
ATTRIBUTE

EDITORTYPE

REPORTS

POPUP

HIDEORIGIN

HELPBUBBLE

SAVEUPDATES

PAGE

TITLE

INTRANETPAGE

MACRO

CALLMODE

CLASSORRELATION

STYLE

FILTER

OTHERSTYLES

CLASS

DEFAULTA1

DEFAULTV1

DEFAULTA2

DEFAULTV2

DEFAULTA3

DEFAULTV3

DEFAULTA4

DEFAULTV4

DEFAULTA5

DEFAULTV5

DEFAULTA6

DEFAULTV6

DEFAULTA7

DEFAULTV7

DEFAULTA8

DEFAULTV8


opxEditor
Object that support a form build by the OPX2 report builder. You can with this object access to the current edited value of the form, each edited attributed is seen as an attribute of the editor. It is also possible to access to the current edited object using the object slot 
Attributes
Argument
Documentation 
OBJECT
Opx object: current edited object 

Syntax operators
withNoAppletRefresh
Enables you to avoid a refresh from the applet when performing a transaction 

Functions
activateContextMenu (widget, x, y)
Activate the context menu of the tool given in this at the given coordinates 
Arguments
Argument
 
Documentation 
THIS

Tool to activate 
WIDGET

Widget 
X

X coordinate 
Y

Y coordinate 

addAnnotationHandler (handler)
Add an annotation handler to a widget, the annotation handler returns the annotation displayed on a specific object cell 
Arguments
Argument
 
Documentation 
HANDLER

function or function name that is called on the object selectionned, if it returns true the standard annotation action is not called otherwise the standard action is called 

addAnnotationIconHandler (handler)
Add an annotation icon handler to a widget, the annotation icon handler returns the icon displayed on a specific object cell 
Arguments
Argument
 
Documentation 
HANDLER

function or function name that is called on the object selectionned, if it returns true the standard annotation action is not called otherwise the standard action is called 

addBackgroundDrawingHandler (drawing-handler)
Add a drawing handler on the background drawing of gantt of curve chart 
Arguments
Argument
 
Documentation 
DRAWING-HANDLER

function that is called on a graphics 

addBarAfterDrawingHandler (handler)
Add a bar drawing handler to a widget (currently only gantt), the this of the handler is a graphics object, that can be used to perform graphics operations, the handler is called with one argument the object displayed 
Arguments
Argument
 
Documentation 
HANDLER

function or function name that is called after the default bar has been drawn 

addBarColorHandler (handler)
Add a bar color handler to a widget (gantt,tree,pert), the this of the handler is the object represented in the bar or box, the handler should return or a color or false if the standard color has to be used 
Arguments
Argument
 
Documentation 
HANDLER

function or function name that is called to choose the color of a box, if the function returns false or undefined, the default bar drawing is used 

addBarDrawingHandler (handler)
Add a bar drawing handler to a widget (gantt,tree,pert), the this of the handler is a graphics object, that can be used to perform graphics operations, the handler is called with one argument the object displayed 
Arguments
Argument
 
Documentation 
HANDLER

function or function name that is called to display a bar or box, if the function returns false or undefined, the default bar drawing is used 

addBarEndDateHandler (handler)
Add a bar end date handler to a gantt, the this of the handler is the object displayed in the gantt chart, the function should return a date object or an integer or undefined if no date is defined 
Arguments
Argument
 
Documentation 
HANDLER

function or function name that is called to choose the end date of a bar 

addBarShapeHandler (handler)
Add a bar shape handler to a widget (gantt,tree,pert), the this of the handler is the object represented in the box, the handler should return or a string naming a specific symbol or shape or false if the standard shape has to be used 
Arguments
Argument
 
Documentation 
HANDLER

function or function name that is called to choose the shape of a box, if the function returns false or undefined, the default bar drawing is used 

addBarStartDateHandler (handler)
Add a bar start date handler to a gantt, the this of the handler is the object displayed in the gantt chart, the function should return a date object or an integer or undefined if no date is defined 
Arguments
Argument
 
Documentation 
HANDLER

function or function name that is called to choose the start date of a bar 

addBoxSizeHandler (function)
handler on graph on tree to pass box size for each box 
Arguments
Argument
 
Documentation 
THIS

graph or tree 
FUNCTION

function that will be called; function (this = box, dimensions = (:width|:height)). 

addBubbleChartAfterHandler (widget, function)
Add a function handler on a bubble chart widget, called after the data initialization. 
Arguments
Argument
 
Documentation 
WIDGET

This : widget on which the after handler is set 
FUNCTION

The function which will be called 

addBubbleChartBeforeHandler (widget, function)
Add a function handler on a bubble chart widget, called before the data initialization. 
Arguments
Argument
 
Documentation 
WIDGET

This : widget on which the before handler is set 
FUNCTION

The function which will be called 

addBubbleHandler (widget, function)
Add a function handler on a bubble chart widget, called during data (bubble) initialization. 
Arguments
Argument
 
Documentation 
WIDGET

This : widget on which the handler is set 
FUNCTION

The function which will be called 

addCellPropertiesHandler (handler)
Handler setting all properties of cell color, annotation, etc. It override any other handler 
Arguments
Argument
 
Documentation 
HANDLER

function or function name with prototype function(slot). this is the line object. slot is the column name. cellProperties is an already allocated cell-properties object 

addCellTypeHandler (handler)
Add a handler to a table widget that sets the cell type for the choosers (date, picklist, etc). 
Arguments
Argument
 
Documentation 
HANDLER

function or function name that is called on the object and attribute selectionned 

addClickHandler (handler)
Add a click handler to a widget, that returns the contour color for a given object 
Arguments
Argument
 
Documentation 
HANDLER

function or function name invoked on a clic, the object is the this for the function, the argument is the objectattribute displayed in the column 

addCluster (widget, axisstart, axisend, axis, label, color)
Add a cluster to a bubble chart widget 
Arguments
Argument
 
Documentation 
WIDGET

This : widget on which adding the cluster 
AXISSTART

The axis value from which the cluster starts 
AXISEND

The axis value to which the cluster ends 
AXIS

The axis on which the values refers, horizontal (0) or vertical (1) axis 
LABEL

Label of the cluster 
COLOR

Color of the cluster 

addCollapseHandler (handler)
Add a function called when the minys button is clicked in a table 
Arguments
Argument
 
Documentation 
HANDLER

function or function name with the following prototype: function(this, object, doubleClick), where this is the grid/gantt, objet the object of the line and doubleclick a boolean indicating wheter it was a double click or not. The function should return false to prevent the kernel default function 

addColorHandler (handler)
Add a color handler to a widget, that returns the fill color for a given object 
Arguments
Argument
 
Documentation 
HANDLER

function or function name that returns the color, the object is the this for the function, the argument is the objectattribute displayed in the column 

addContourColorHandler (handler)
Add a contour color handler to a widget, that returns the contour color for a given object 
Arguments
Argument
 
Documentation 
HANDLER

function or function name that returns the color, the object is the this for the function, the argument is the objectattribute displayed in the column 

addCopyHandler (handler)
Add a copy handler to a widget, the copy handler is called when the user clic on the copy button 
Arguments
Argument
 
Documentation 
HANDLER

function or function name that is called on the object selectionned, if it returns true the standard copy action is not called otherwise the standard action is called 

addCurveDrawingHandler (handler)
Add a curve drawing handler to a widget (gantt,tree,pert), the this of the handler is a graphics object, that can be used to perform graphics operations, the handler is called with one argument the object displayed 
Arguments
Argument
 
Documentation 
HANDLER

function or function name that is called to display a bar or box, if the function returns false or undefined, the default curve drawing is used 

addCurveType (name, reader, writer)
Adds a new computed curve types, values are computed or stored using a reader and an optinal writer function 
Arguments
Argument
 
Documentation 
NAME

string, name of the new curve type 
READER

reader function, the this is the curve object, the first argument is a date object 
WRITER
OPTIONAL
writer function, the this is the curve object, first argument is a date object, 

addCustomChooserHandler (handler)
Add a handler to a table widget that display a custom chooser 
Arguments
Argument
 
Documentation 
HANDLER

function or function name that is called on the object and attribute selectionned 

adddaydrawinghandler ()
Set the callback that is called after the drawing of the box date. The callback must have two arguments(date : the date of the box and objects : list des objects at this date. 
Arguments
Argument
 
Documentation 
THIS

graphics 

addDefaultStyleHandler (handler)
Override get-default-table-style on the provide object 
Arguments
Argument
 
Documentation 
HANDLER

function or function name with the following prototype : function (this), where this is the object (table-cell-mode/region-cell-mode) 

addDropHandler (handler)
Add a function that is called when an object is drag and dropped 
Arguments
Argument
 
Documentation 
HANDLER

function or function name that is called when the object is dropped. The this is the current dropped object, the first argument is the current line, the second argument is the group change arglist, the third argument is the gantt itself. If the function returns true , the standard drop action is not performed, if the function returns false or undefined, the standard drop action is performed 

addEditHandler (handler)
Add an edit handler to a widget, the edit handler is called when the user clic on the edit button 
Arguments
Argument
 
Documentation 
HANDLER

function or function name that is called on the object selectionned, if it returns true the standard edit action is not called otherwise the standard action is called 

addExpandHandler (handler)
Add a function called when the plus button is clicked in a table 
Arguments
Argument
 
Documentation 
HANDLER

function or function name with the following prototype: function(this, object, doubleClick), where this is the grid/gantt, objet the object of the line and doubleclick a boolean indicating wheter it was a double click or not. The function should return false to prevent the kernel default function 

addFilterChangedHandler (handler)
Adds a function called when the formula is updated 
Arguments
Argument
 
Documentation 
HANDLER

function or function name with the following prototype : function (this, old, new), where this is the grid/gantt, old the old filter and new the new filter 

addFormatHandler (handler)
Add a format handler to a table, that returns the format used for the given cell 
Arguments
Argument
 
Documentation 
HANDLER

function or function name that returns the format, the object is the this for the function, the argument is the object attribute displayed in the column 

addGridDropLineHandler (handler)
Add a drop handler to a table, called when changing line order 
Arguments
Argument
 
Documentation 
HANDLER

function or function name that will be called on drop of a table line (changing order of line), the object is the this for the function 

addGroupColorhandler (widget, function)
Add a function handler on a bubble chart widget, called during data (bubble group) initialization. 
Arguments
Argument
 
Documentation 
WIDGET

This : widget on which the handler is set 
FUNCTION

The function which will be called 

addGroupStyleHandler (handler)
Adds a function called to get group styles for a grid in report mode 
Arguments
Argument
 
Documentation 
HANDLER

function or function name with the following prototype : function (this, old, new), where this is the grid/gantt, old the old filter and new the new filter 

addHAlignHandler (handler)
Handler for setting vertical alignement. If returns a value distinct from nil, the alignement shadows the alignement from the formatting rule 
Arguments
Argument
 
Documentation 
HANDLER

function or function name with prototype function(this, object). this is a grid/gantt object. object is a line object. 

addHeaderHAlignHandler (handler)
Handler for setting header horizontal alignement. If returns a value distinct from nil, the alignement shadows the alignement from the formatting rule 
Arguments
Argument
 
Documentation 
HANDLER

function or function name with prototype function(this, object). this is a grid/gantt object. object is a line object. 

addIconHandler (handler)
Add an icon handler to a widget, that returns the icon displayed for a given object and attribute 
Arguments
Argument
 
Documentation 
HANDLER

function or function name invoked on a clic, the object is the this for the function, the argument is the objectattribute displayed in the column 

addInsertAnnotationHandler (handler)
Add an insert annotation handler to a widget, the annotation handler is called when the user clics on the annotation button 
Arguments
Argument
 
Documentation 
HANDLER

function or function name that is called on the object selectionned, if it returns true the standard annotation action is not called otherwise the standard action is called 

addInsertLineHandler (handler)
Add an insert line handler to a widget, the insert line handler is called when the user clic on the insert line button 
Arguments
Argument
 
Documentation 
HANDLER

function or function name that is called on the object selectionned, if it returns true the standard insertline action is not called otherwise the standard action is called 

addLabelHandler (handler)
Add a label handler on an Object attribute, executing a function that should return the comment/label of the field. 
Arguments
Argument
 
Documentation 
HANDLER

function or function name invoked to display the label/comment of a field, the argument is the objectattribute 

addLinePropertiesHandler (handler)
Handler setting line properties, only height property is available 
Arguments
Argument
 
Documentation 
HANDLER

function or function name with prototype function(slot). this is the line object 

addLineTo (widget, source-id, destination-id, color, alpha, style, thickness)
Add / Draw a line from one bubble to antoher one 
Arguments
Argument
 
Documentation 
WIDGET

This : widget on which adding the line 
SOURCE-ID

Id of the source bubble, depends on the widget linked class objects 
DESTINATION-ID

Id of the destination bubble, depends on the widget linked class objects 
COLOR

Color of the line 
ALPHA
OPTIONAL
Alpha of the line 
STYLE
OPTIONAL
Style of the line :
* Use simple line to link bubbles (1), default.
* Use simple pin with to link bubbles (2).
* Use double pin with to link bubbles (3).
* Use simple arrow with to link bubbles (4). 
THICKNESS
OPTIONAL
Thickness of the line 

addMiddleClickHandler (handler)
Add a function that is called when the middle mouse button is pressed 
Arguments
Argument
 
Documentation 
HANDLER

function or function name that is called when the middle button is pressed on the object 

addMousableArea (x1, y1, x2, y2, thickness, bubble-help, user-data, on-click, on-double-click, on-mouse-over, highlight-color, select-object, on-drag, on-resize, drop-mask, on-drop, drag-mask, drag-id, priority, in-unselect)
Add a mousable area in a graphics , this function has to used inside a display script or has to be used on a widget 
Arguments
Argument
 
Documentation 
X1

integer coordinate relative to the graphics coordinates 
Y1

integer coordinate relative to the graphics coordinates 
X2

integer coordinate relative to the graphics coordinates 
Y2

integer coordinate relative to the graphics coordinates 
THICKNESS

integer, value -1,0,1,2 
BUBBLE-HELP

string, string displayed when the mouse goes over the area 
USER-DATA

any, user data stored in the area, this data is used for all event functions as this 
ON-CLICK

function called when the users clicks on the area, the function is called on the area user-data 
ON-DOUBLE-CLICK

function called when the users double clicks on the area, the function is called on the area 
ON-MOUSE-OVER

function called when the mouse enter the area 
HIGHLIGHT-COLOR

color used to highlight the mouse when the mouse enter the area 
SELECT-OBJECT

object to select when the area is clicked 
ON-DRAG

function called when the area is dragged (with 4 coordonates, newx,newy,oldx,oldy) 
ON-RESIZE

function called when the area is resized (with 4 coordonates, x1,y1,x2,y2) 
DROP-MASK

integer used as a drop mask see treeviews drag mask 
ON-DROP

function called when an item is dropped (arguments drop-id,x,y) 
DRAG-MASK

integer used as a drag mask if the area can be dropped in another area or cell or treeview 
DRAG-ID

integer used in the drop event, when the are is dropped in another area 
PRIORITY

integer, default 0, highest priority areas are taken into account fist when an event occurs 
IN-UNSELECT

function called when the area is unselected 

addPaginationHandler (function)
Adds a function called on a multi report widget when the more button is clicked. 
Arguments
Argument
 
Documentation 
FUNCTION

Function of function name such as: function(widget, number-of-object-in-table) -> new-number-of-object, where widget is the current widget, number-of-object-in-table is the the current number of object displayed in the table. The return value new-number-of-object is the number of arguments that will be displayed after the refresh of the table 

addPasteHandler (handler)
Add a paste handler to a widget, the paste handler is called when the user clic on the paste button 
Arguments
Argument
 
Documentation 
HANDLER

function or function name that is called on the object selectionned, if it returns true the standard paste action is not called otherwise the standard action is called 

addPossibleValuesHandler (handler)
Add a possible values handler to a table widget, the possible values handler is called on each object and attribute of a grid, if the function returns a vector of values this vector is proposed to the user when he clics on the arrow next to the table cell 
Arguments
Argument
 
Documentation 
HANDLER

function or function name that is called on the object and attribute selectionned, if it a vector of values an arrow appears to select a value 

addRefreshHandler (handler)
handler to change widget refresh behavior. Only available for table-cell-mode 
Arguments
Argument
 
Documentation 
HANDLER

function or function name with prototype function(slot). this is a grid object 

addRemoveHandler (handler)
Add a remove handler to a widget, the remove handler is called when the user clic on the remove button 
Arguments
Argument
 
Documentation 
HANDLER

function or function name that is called on the object selectionned, if it returns true the standard remove action is not called otherwise the standard action is called 

addReportModeDropHandler (handler)
Add a function that is called when an object is drag and dropped on a table in report mode 
Arguments
Argument
 
Documentation 
HANDLER

function or function name that is called when the object is dropped. The this is the current dropped object, the first argument is the current line, the second argument is the group change arglist, the third argument is the gantt itself. If the function returns true , the standard drop action is not performed, if the function returns false or undefined, the standard drop action is performed 

addSelectionCellHandler (handler)
Add an selection cell handler to a widget, called when the user select a cell in a table 
Arguments
Argument
 
Documentation 
HANDLER

function or function name that is called on the object selectionned, Always call set-grid-selection-options to take into account when immediate selection 

addSelectionLineTextHandler (function)
Add a selection line text handler on an object grid. This function will be called on each line to set the text displayed in the selection line.. 
Arguments
Argument
 
Documentation 
THIS

An object grid 
FUNCTION

The handler function. This function will be called with the line object as this and the line number as argument. It must return a string that will be used as selection line text. 

addSpanHandler (handler)
Handler for setting cell row and col span 
Arguments
Argument
 
Documentation 
HANDLER

function or function name with prototype function(this, object). this is a grid/gantt object. object is a line object. 

addStatusHandler (handler)
Handler for setting cell status 
Arguments
Argument
 
Documentation 
HANDLER

function or function name with prototype function(this, object). this is a grid/gantt object. object is a line object. 

addStyleHandler (handler)
Allows to define a handler on a widget or chart that is called when the style is changed 
Arguments
Argument
 
Documentation 
HANDLER

function with one argument called on the widget or chart with the style as argument 

addsubwidgetwithname ()
Internal function called by the addwidgetwithname functions. It is better to use addwidgetwithname. 

addSuite (widget, x-lower-range, y-lower-range, x-upper-range, y-upper-range, id, label, color, thickness, style)
Add a suite to a bubble chart widget 
Arguments
Argument
 
Documentation 
WIDGET

This : widget on which adding the suite 
X-LOWER-RANGE

The lower x axis value of the suite 
Y-LOWER-RANGE

The lower y axis value of the suite 
X-UPPER-RANGE

The upper x axis value of the suite 
Y-UPPER-RANGE

The upper y axis value of the suite 
ID

Id of the suite 
LABEL

Label of the suite 
COLOR

Color of the suite shape 
THICKNESS
OPTIONAL
Integer, thickness of the suite shape, the default is 1 
STYLE
OPTIONAL
Style of the suite, the following values are allowed :
* Use a rectangle as a shape for the suite (0).
* Use a rounded rectangle as a shape for the suite (1).
* Use a 3D rectangle as a shape for the suite (2).
* Use a left to right diagonal as a shape for the suite (3).
* Use a right to left diagonal as a shape for the suite (4). 

addTableColumnMenuHandler (handler)
Add a column menu handler on a table, executing a function that should return the list of menus accessible. 
Arguments
Argument
 
Documentation 
HANDLER

function or function name invoked to return the final version of the column menu. It receive the grid, the default list of tools and the selected column information. 

addTableDropPossibleHandler (handler)
Add a function that is called to decide if drag and dropping an object inside a table is possible 
Arguments
Argument
 
Documentation 
HANDLER

function or function name that is called when the object is dropped. The this is the current object grid. If the function returns true, the standard drop action is performed, if the function returns false or undefined, nothing is performed 

addTextColorHandler (handler)
Add a text color handler to a widget, that returns the text color for a given object 
Arguments
Argument
 
Documentation 
HANDLER

function or function name that returns the color, the object is the this for the function, the argument is the objectattribute displayed in the column 

addTextEndDateHandler (handler)
Add a text end date handler to a gantt, the this of the handler is the object displayed in the gantt chart, the function should return a date object or an integer or undefined if no date is defined 
Arguments
Argument
 
Documentation 
HANDLER

function or function name that is called to choose the end date of a bar 

addTextFontHandler (handler)
Add a text font handler to a widget, that returns the text font for a given object 
Arguments
Argument
 
Documentation 
HANDLER

function or function name that returns the font, the object is the this for the function, the argument is the objectattribute displayed in the column 

addTextStartDateHandler (handler)
Add a text start date handler to a gantt, the this of the handler is the object displayed in the gantt chart, the function should return a date object or an integer or undefined if no date is defined 
Arguments
Argument
 
Documentation 
HANDLER

function or function name that is called to choose the start date of a bar 

addTimerScript (name, script, period)
Allows to evaluate a script periodically , this features works only under Intranet Server 
Arguments
Argument
 
Documentation 
NAME

[string] name of the timer 
SCRIPT

[string] OPX2 script string evaluated 
PERIOD
OPTIONAL
integer] periodicity in second of the timer 

addTitleBackgroundColorHandler (handler)
Handler for setting the table title background color 
Arguments
Argument
 
Documentation 
HANDLER

function or function name with prototype function(this). this is a grid/gantt object. If the handler returns false the default color is used 

addVAlignHandler (handler)
Handler for setting vertical alignement. If returns a value distinct from nil, the alignement shadows the alignement from the formatting rule 
Arguments
Argument
 
Documentation 
HANDLER

function or function name with prototype function(this, object). this is a grid/gantt object. object is a line object. 

addValueHandler (handler)
Handler overwriting content of a cell 
Arguments
Argument
 
Documentation 
HANDLER

function or function name with prototype function(slot). this is the line object. slot is the column name 

adjustedstringtofitpixwidthusingwords (font, string, length, pix-width)
Return the length of the string so that the string can fit in the given width once cut with the given word 
Arguments
Argument
 
Documentation 
FONT

The font to use 
STRING

the string to adjust 
LENGTH

the length of the string 
PIX-WIDTH

the length of the given space to draw the string 

adjustedStrlengthToFitPixWidth (string, length, start, length)
Returns the length of a string which can fit in a box 
Arguments
Argument
 
Documentation 
THIS

font or graphics (whose font will be used) to compute the length 
STRING

the string on which the width will be computed 
LENGTH

The length of the string 
START
OPTIONAL
start offset in the string 
LENGTH
OPTIONAL
end offset in the string 

adjustedStrlengthToFitPixWith (string, width, start, length)
Returns the length of a string which can fit in box 
Arguments
Argument
 
Documentation 
STRING

String: the string the length is computed on 
WIDTH

Number: width of the box 
START
OPTIONAL
Integer: start of the string 
LENGTH
OPTIONAL
Integer: length of the string 

apply ()
Applys information of an editor 

applyStyle (style)
Applies a style to the specified chart 
Arguments
Argument
 
Documentation 
STYLE

style object 

arc (x, y, radius, startangle, endangle, counterclockwise)
The arc() method creates a circular arc centered at (x, y) with a radius of radius. The path starts at startAngle, ends at endAngle, and travels in the direction given by counterclockwise (defaulting to clockwise). 
Arguments
Argument
 
Documentation 
THIS

A drawing path object 
X

Integer 
Y

Integer 
RADIUS

Integer 
STARTANGLE

Number 
ENDANGLE

Number 
COUNTERCLOCKWISE

Boolean 

arcTo (x1, y1, x2, y2)
Adds a circular arc to the current sub-path, using the given control points and radius. The arc is automatically connected to the path's latest point with a straight line, if necessary for the specified parameters. 
Arguments
Argument
 
Documentation 
THIS

A drawing path object 
X1

Integer 
Y1

Integer 
X2

Integer 
Y2

Integer 
Syntax examples
dp.quadraticCurveTo(30,30,10,10);

assignmentsFromUser (processtransaction)
Returns a vector of the assignments for a givent transaction. The user is the THIS 
Arguments
Argument
 
Documentation 
PROCESSTRANSACTION

the transaction on which we want to get the assignment 

availableFaceNames ()
Get the list of available face names 
Arguments
Argument
 
Documentation 
this

(GENERIC Add generic fonts to the list of available faces) 

availableFaces ()
Get the list of available faces 
Arguments
Argument
 
Documentation 
this

(GENERIC Add generic fonts to the list of available faces) 

bezierCurveTo (x1, y1, x2, y2, x3, y3)
Draw a bezier curve from the current point to the point (x3,y3) which becomes the new current point. The control points are (x1,y1) and (x2,y2) 
Arguments
Argument
 
Documentation 
THIS

A drawing path object 
X1

Integer 
Y1

Integer 
X2

Integer 
Y2

Integer 
X3

Integer 
Y3

Integer 
Syntax examples
dp.besizerCurveTo(10,11,20,22,30,33);

calltool (tool-name)
This method allows to call a proweb tool in IS in script 
Arguments
Argument
 
Documentation 
TOOL-NAME

name of the tool 

callToolOnSelection (tool-name)
Call a tool on the current selection 
Arguments
Argument
 
Documentation 
TOOL-NAME

name of the tool, see UserTools method 

callUserScript (string, on-display, graphics)
Call a string as a user script, with user script restrictions 
Arguments
Argument
 
Documentation 
STRING

String script 
ON-DISPLAY
OPTIONAL
boolean, indicates if the script is called on display 
GRAPHICS
OPTIONAL
graphics, if the this is not a graphics, the graphics must be provided in this argument 

changeplacement (widget)
Function called when modifying the widget placement 
Arguments
Argument
 
Documentation 
widget

The widget on which the function will be called 

changeversionicon ()
Display document version 

checkClientIsAlive ()
Check if the client is still open, stop and unwind the current transaction if the client does not answer 

chooseAndSelectStyle (list-of-styles)
allows to select a style in a list of styles and apply it on a chart, if the first argument is a list of styles then the list proposed is the list specified 
Arguments
Argument
 
Documentation 
LIST-OF-STYLES
OPTIONAL
list of styles 

chooseColor (use-palette, user-paint, selected-color, title, if-select)
Display a widget that allows to choose a color 
Arguments
Argument
 
Documentation 
USE-PALETTE
OPTIONAL
boolean indicates if the user can choose a color palette 
USER-PAINT
OPTIONAL
boolean indicates if the user can choose a brush 
SELECTED-COLOR
OPTIONAL
current color being selected 
TITLE
OPTIONAL
dialog title 
IF-SELECT
OPTIONAL
function called when the color is selected 

clipRect (x, y, w, h)
Set the current clipping rectangle for drawing operations. 
Arguments
Argument
 
Documentation 
THIS

graphics 
X

Integer 
Y

Integer 
W

Integer 
H

Integer 
Syntax examples
g.clipRect(10,10,90,90);

closePath ()
Close the current drawing path by drawing a line from the current point to the first point of the path. 
Arguments
Argument
 
Documentation 
this

A drawing path object 
Syntax examples
dp.closePath();

color (redorname, green, blue, alpha)
Returns a color object, this color object can then be used in a graphics object 
Arguments
Argument
 
Documentation 
REDORNAME

Integer or string: integer which gives the red component of the color of name of the color 
GREEN
OPTIONAL
Integer: green component of the color 
BLUE
OPTIONAL
Integer: blue component of the color 
ALPHA
OPTIONAL
Integer: transparency component of the color 

columnWidth (name)
returns the width of a table column 
Arguments
Argument
 
Documentation 
NAME

[string] column name 

content ()
Returns a list of vector representing the content of a chart 

controleditorchange (widget)
Checl if the editor contains some modified values 
Arguments
Argument
 
Documentation 
WIDGET

The widget to check 

copyObject ()
Launch a form with a copy of an object 

cost.ListAllCurves (map-reference, map-expenditure-type, map-rate-table)
List all curve types matching the specified wilcard (or list of wildcards separated by commas) 
Arguments
Argument
 
Documentation 
MAP-REFERENCE
OPTIONAL
List reference types 
MAP-EXPENDITURE-TYPE
OPTIONAL
List reference types 
MAP-RATE-TABLE
OPTIONAL
List rate tables types 

createmousablearea (x1, y1, x2, y2)
Create a mousable area object on the graphics given as this. You must then declare it with the declaremousablearea function. You can specify the following properties on the mousable area :
* thickness
* bubble-help
* on-click
* on-double-click
* data
* on-mouse-over
* highlight-color
* select-object
* on-drag
* on-resize
* drop-mask
* on-drop
* drag-mask
* drag-id
* priority
* on-unselect
* hover-image
* hover-image-x
* hover-image-y
* hover-image-w
* hover-image-h
* hover-image-callback
* hover-image-delay
* replaykey
* dragdirection
* on-right-click 
Arguments
Argument
 
Documentation 
THIS

Graphics or widget 
X1
OPTIONAL
Top left X coordinate 
Y1
OPTIONAL
Top left Y coordinate 
X2
OPTIONAL
Bottom right X coordinate 
Y2
OPTIONAL
Bottom right Y coordinate 

currentBackgroundProcess ()
Returns the current background process running 

currenttab ()
Returns the name of the currently selected tab of a folder 

curveTypeToRepresentation ()
Returns a representation representing a curve type (should be called on an element of the result of ListAllCurves) 

curveTypeToString ()
Returns a string representing a curve type (should be called on an element of the result of ListAllCurves) 

curveY (value)
Return the Y coordonate of curve value in the curve coordinates, this function is usefull for CurveDrawingHandlers 
Arguments
Argument
 
Documentation 
VALUE

number 

datetoX (date)
Returns the x coordinate associated to a date in a gantt chart graphics, the this should be a gantt object graphics 
Arguments
Argument
 
Documentation 
DATE

A date object or an integer 

declaremousablearea (graphics)
Declare the mousable area created by createmousablearea 
Arguments
Argument
 
Documentation 
THIS

Mousable area 
GRAPHICS

Graphics in which we want to add the mousable area. 

defmessage (key, value)
Defines a message that can be used in the application 
Arguments
Argument
 
Documentation 
KEY

String: key identifying the message 
VALUE

String: value of the message 

displayBubbleReportOn (report, report-object, attribute)
Display a bubble on the specified object if any 
Arguments
Argument
 
Documentation 
REPORT

Report used to display the bubble 
REPORT-OBJECT
OPTIONAL
object used to fill the report if any 
ATTRIBUTE
OPTIONAL
attribute of the object if any 

draw3dBubble (x, y, w)
Draws a 3D bubble inside a graphics 
Arguments
Argument
 
Documentation 
X
OPTIONAL
integer: x coordonate of the center of the bubble 
Y
OPTIONAL
integer: y coordonate of the center of the bubble 
W
OPTIONAL
integer: w radius of the bubble 

drawArc (x, y, w, h, angle1, angle2)
Draw an arc in a graphics 
Arguments
Argument
 
Documentation 
X
OPTIONAL
integer 
Y
OPTIONAL
integer 
W
OPTIONAL
integer 
H
OPTIONAL
integer 
ANGLE1
OPTIONAL
integer values is between 0 and 360*64 (angle minute) 
ANGLE2
OPTIONAL
integer values is between 0 and 360*64 (angle minute) 

drawCurves (curves, args)
Draw a vector of curves into a graphics 
Arguments
Argument
 
Documentation 
CURVES

Vector of curve objects 
ARGS

[list of arguments] properties of the histogram: Xmin: integer, min of the X axis Xmax: integer, max of the X axis Xvalues: vector f integer (values of the x axis) Xunit: string legend of the x axix NumberFormat: string format used to print numbers DateFormat: string format used to print dates YlMin: integer min of the Y axis Yl0level: integer YlMax: integer max of the Y axis YlValues: vector of integer listof values of the Y axis YLunit: string legend of the Y axis leftMargin: integer left margin rightMargin: integer right margin bottomMargin: integer bottom margin topMargin: integer top margin legendLines: integer number of lines allocated for the legend 3dThickness: thickness allocated for 3d effect NBplane: integer number of planes xRefpos: integer position of the timenow Drawlegend: boolean indicates if the legend is drawed XrefColor: color of the timenow 

drawdashboard (x, y, w, h)
Draw a dashboard in a graphics 
Arguments
Argument
 
Documentation 
X
OPTIONAL
Integer 
Y
OPTIONAL
Integer 
W
OPTIONAL
Integer 
H
OPTIONAL
Integer 

drawImage (imagename, x, y, transparent, dest-width, dest-height, keep-aspect-ratio, v-align, h-align)
Draws an image into a graphics 
Arguments
Argument
 
Documentation 
IMAGENAME

String: name of the image 
X
OPTIONAL
x coordinate of the image, default to 0 
Y
OPTIONAL
y coordinate of the image, default to 0 
TRANSPARENT
OPTIONAL
boolean indicating if the image is transparent, default to true 
DEST-WIDTH
OPTIONAL
width of the displayed image, default to the real width of the image. May be used to grow or shrink the image 
DEST-HEIGHT
OPTIONAL
height of the displayed image, default to the real height of the image. May be used to grow or shrink the image 
KEEP-ASPECT-RATIO
OPTIONAL
boolean, default to true. If true and the image needs to be resized, width or height will be adapted to keep the image aspect ratio 
V-ALIGN
OPTIONAL
vertical alignment (in the graphic area). Integer with the following values: 0 top, 1 middle, 2 bottom 
H-ALIGN
OPTIONAL
horizontal alignment (in the graphic area). Integer with the following values: 0 left, 1 center, 2 right 

drawingPath ()
Create a new drawing path context. When the path is complete, call drawPath and/or fillPath to actually draw something. Don't forget to delete it when you are done with it. 
Syntax examples
var dp = drawingPath();

drawLine (x1, y1, x2, y2)
Draws a line in a graphics 
Arguments
Argument
 
Documentation 
X1

Integer 
Y1

Integer 
X2

Integer 
Y2

Integer 

drawPath ()
Draw the contour of the path its called on with the current foreground color 
Arguments
Argument
 
Documentation 
THIS

A drawing path object 
Syntax examples
dp.drawPath();

drawPie (piedef, args)
Draws a piechart in a graphics 
Arguments
Argument
 
Documentation 
PIEDEF

vector of vectors: each vector contains in first position the value, in second position a string , in third,fourth and fifth position a color specification 
ARGS

[list of arguments] properties of the pie ShadowPieThickness : integer shadow thickness of the pie ShowPercents: boolean indicates if percentage are displayed ShowItems: boolean indicates if string are displayed CadreThickess: integer thickness of the frame surrounding the piechart CadreShadowThickness: shadow thickness of the frame ItemCadre: boolean indicates if a frame is present around items LabelDistance: integer distance between labels X: integer left coordinate Y: integer top coordinate Width: integer width of the piechart Height: ineteger height of the piechart 

drawRectangle (x, y, w, h)
Draw a rectangle frame in a graphics 
Arguments
Argument
 
Documentation 
X
OPTIONAL
Integer 
Y
OPTIONAL
Integer 
W
OPTIONAL
Integer 
H
OPTIONAL
Integer 

drawRectangleFrame (x, y, w, h)
Draw a rectangle frame in a graphics 
Arguments
Argument
 
Documentation 
X
OPTIONAL
Integer 
Y
OPTIONAL
Integer 
W
OPTIONAL
Integer 
H
OPTIONAL
Integer 

drawReport (report, object, x, y)
draw report inside a graphics object 
Arguments
Argument
 
Documentation 
REPORT

Report to be displayed 
OBJECT

Object displayed in the report 
X
OPTIONAL
integer, left coordinate of the report in the graphics 
Y
OPTIONAL
integer, top coordinate of the report in the graphics 

drawReportInBubble (x, y, report, object, hide-on-click, create-editor, w, h)
Display a report on the specified object in a bubble 
Arguments
Argument
 
Documentation 
X

Top left x position of the report 
Y

Top left y position of the report 
REPORT

Report used to display the bubble 
OBJECT

Object used to fill the report 
HIDE-ON-CLICK
OPTIONAL
default true. Hide bubble on click 
CREATE-EDITOR
OPTIONAL
default false. Display report in an editor (input field available) 
W
OPTIONAL
default report width. Width of the report displayed 
H
OPTIONAL
default report height for the object and the given width. Height of the report displayed 

drawRoundRect (x, y, w, h, shape, round-width, round-height)
Draw a round rectangle frame in a graphics 
Arguments
Argument
 
Documentation 
X
OPTIONAL
Integer 
Y
OPTIONAL
Integer 
W
OPTIONAL
Integer 
H
OPTIONAL
Integer 
SHAPE
OPTIONAL
string, can be "rounded","rounded-top","rounded-bottom","rounded-left","rounded-right","rounded-topleft-bottomright",'rounded-topright-bottomleft" 
ROUND-WIDTH
OPTIONAL
Integer 
ROUND-HEIGHT
OPTIONAL
Integer 

drawShadow (x, y, w, h, shadowthickness, outside)
Draw a rectangle frame in a graphics 
Arguments
Argument
 
Documentation 
X
OPTIONAL
Integer 
Y
OPTIONAL
Integer 
W
OPTIONAL
Integer 
H
OPTIONAL
Integer 
SHADOWTHICKNESS
OPTIONAL
Integer: shadow thickness 
OUTSIDE
OPTIONAL
Boolean: indicate if the shadow are in or out 

drawString (string, length, x, y, w, h, horizontaljustification, verticaljustification, wordbreak, underlined, insensitive)
Draws a string inside a graphics 
Arguments
Argument
 
Documentation 
STRING

string: stringtobe drawed 
LENGTH
OPTIONAL
integer: length of the string 
X
OPTIONAL
integer: x coordonate of the top let corner of the rectangle containing the string 
Y
OPTIONAL
integer: y coordonate of the top let corner of the rectangle containing the string 
W
OPTIONAL
integer: width of the rectangle containing the string 
H
OPTIONAL
integer: height of the rectangle containing the string 
HORIZONTALJUSTIFICATION
OPTIONAL
string: center,left,right 
VERTICALJUSTIFICATION
OPTIONAL
string: center,top,bottom 
WORDBREAK
OPTIONAL
boolean indicates if the string should be splitted in order to stay in the rectangle 
UNDERLINED
OPTIONAL
boolean indicates if the string should be underlined 
INSENSITIVE
OPTIONAL
boolean indicates if the string should be insensitive 

drawSymbol (name, content-color, x-scale, y-scale, x, y, w, h)
Draw a rectangle frame in a graphics 
Arguments
Argument
 
Documentation 
NAME
OPTIONAL
string: name of the symbol, list of possible symbols is: 
CONTENT-COLOR
OPTIONAL
color of the symbol 
X-SCALE
OPTIONAL
x-scale of the symbol 
Y-SCALE
OPTIONAL
y-scale of the symbol 
X
OPTIONAL
Integer x coordinate of the symbol 
Y
OPTIONAL
Integer y coordinate of the symbol 
W
OPTIONAL
Integer width of the symbol 
H
OPTIONAL
Integer height of the symbol 

duplicateEnvironmentObject (new-name, replace, dataset)
Duplicate an environment object, the duplicated object can then been modified 
Arguments
Argument
 
Documentation 
NEW-NAME
OPTIONAL
new object nameby default is prefixed by COPY_ 
REPLACE
OPTIONAL
boolean indicate if the duplicated report replaces the previous one (false by default) 
DATASET
OPTIONAL
by default undefined 

evalJavaScript (string)
Evaluate a javascript statement inside the client browser that supports the javascript language 
Arguments
Argument
 
Documentation 
STRING

string to evaluate 

excelConvertPropBorder (object)
Convert excel border to Planisware border 
Arguments
Argument
 
Documentation 
object

a cell-border-properties object 

excelId (object)
Compute an object stable Id. It's use by excel import/export to update existing data. 
Arguments
Argument
 
Documentation 
OBJECT

object 

fillArc (x, y, w, h, angle1, angle2)
Draws an arc in a graphics 
Arguments
Argument
 
Documentation 
X
OPTIONAL
integer 
Y
OPTIONAL
integer 
W
OPTIONAL
integer 
H
OPTIONAL
integer 
ANGLE1
OPTIONAL
integer values is between 0 and 360*64 (angle minute) 
ANGLE2
OPTIONAL
integer values is between 0 and 360*64 (angle minute) 

filldashedcolorrectangle (color, shape, spacing, x, y, width, height)
set the callback to add color in the legend. 
Arguments
Argument
 
Documentation 
THIS

graphics 
COLOR

color 
SHAPE

symbol, possible value :left :right :vertical :horizontal :filled :no 
SPACING

int 
X

int 
Y

int 
WIDTH

int 
HEIGHT

int 

fillPath ()
Fill the path its called on with the current foreground color 
Arguments
Argument
 
Documentation 
THIS

A drawing path object 
Syntax examples
dp.fillPath();

fillPolygon (xcoordinates, ycoordinates)
Fills a polygon defined by a vector of x coordinates and Y coordinates 
Arguments
Argument
 
Documentation 
XCOORDINATES

Vector of integer 
YCOORDINATES

Vector of integer 

fillRectangle (x, y, w, h)
Draw a rectangle frame in a graphics 
Arguments
Argument
 
Documentation 
X
OPTIONAL
Integer 
Y
OPTIONAL
Integer 
W
OPTIONAL
Integer 
H
OPTIONAL
Integer 

fillRoundRect (x, y, w, h, shape, round-width, round-height)
Fill a round rectangle frame in a graphics 
Arguments
Argument
 
Documentation 
X
OPTIONAL
Integer 
Y
OPTIONAL
Integer 
W
OPTIONAL
Integer 
H
OPTIONAL
Integer 
SHAPE
OPTIONAL
string, can be "rounded","rounded-top","rounded-bottom","rounded-left","rounded-right","rounded-topleft-bottomright",'rounded-topright-bottomleft" 
ROUND-WIDTH
OPTIONAL
Integer 
ROUND-HEIGHT
OPTIONAL
Integer 

fillShadowRectangle (x, y, w, h, shadowthickness, outside)
Draw a rectangle frame in a graphics 
Arguments
Argument
 
Documentation 
X
OPTIONAL
Integer 
Y
OPTIONAL
Integer 
W
OPTIONAL
Integer 
H
OPTIONAL
Integer 
SHADOWTHICKNESS
OPTIONAL
Integer: shadow thickness 
OUTSIDE
OPTIONAL
Boolean: indicate if the shadow are in or out 

findCellByID (cell-id)
Find a cell in the report by id 
Arguments
Argument
 
Documentation 
THIS

report 
CELL-ID

Cell id 

findwidget (name)
Look for a child widget of the given widget (or graphics) with the given name 
Arguments
Argument
 
Documentation 
name

[string/symbol] name of the widget 

flush ()
Flush the content of the graphics to the screen, this order is necessary to perform some animation 

focus (widget)
Focus the given widget 
Arguments
Argument
 
Documentation 
WIDGET

Widget to give the focus to 

font (family, size, bold, italic)
Returns a font object, this font object can then be used in graphics methods 
Arguments
Argument
 
Documentation 
FAMILY

String: family name of the font 
SIZE
OPTIONAL
Integer: size of the font 
BOLD
OPTIONAL
Boolean: bold 
ITALIC
OPTIONAL
Boolean: italic 

fontsynonym (ignore, font)
Returns the real font in case a generic font is used 
Arguments
Argument
 
Documentation 
IGNORE


FONT



getAppliedStyle ()
Returns the last applied style on a widget or chart 

getCellData (object, slot, property, default)
Method on a grid, allows to associate data linked to a cell property 
Arguments
Argument
 
Documentation 
OBJECT

Object that is displayed in a line 
SLOT

Column of the grid, the slot can be a string, symbol or slot object 
PROPERTY

A string, symbol or any data structure 
DEFAULT
OPTIONAL
default value returned if there is no data associated to the cell property 

getChartPagination (applet)
Returns the chart's report pagination from an applet. It expects to only find one chart 
Arguments
Argument
 
Documentation 
APPLET
OPTIONAL
applet or current applet if not provided 

getCurrentSelection ()
Returns the current selection 

getcurrentwidget ()
Returns the currentwidget 

getDashboardHeight ()
Return the width(in pixel) of the current dashboard 

getdashboardmousablearea ()
Return the mousable area of the current drawing dashboard 

getDashboardWidth ()
Return the width(in pixel) of the current dashboard 

getDefaultHeaderFontColor ()
Return the default title font for table 

getDefaultStyleHandler ()
return the function which override get-default-table-style on the provide object 

getFontHeight ()
get the height of a font in pixel 
Arguments
Argument
 
Documentation 
THIS

Font used to compute the height 

getFormulaFullExpansion ()
Return the expansion of the current formula 

getObjectFromSelection (widget, field)
Get object(s) from the current zoom selection of a bubble chart widget 
Arguments
Argument
 
Documentation 
WIDGET

This : widget on which getting the object(s) 
FIELD
OPTIONAL
The field of the object(s) to return, the default is the object(s) Id 

getPreviousSelection ()
Returns the previous selection 

getselectedcell ()
Returns a selectioncell object corresponding to the currently selected cell. If there is no selection or if more than one cell is selected, returns undefined. 

getselectedcells ()
Returns a vector of objects of type selectioncell, selectionline, selectionblock corresponding to the current selection 

getselectedobject ()
Returns the current selection if it's a standalone selection, ie only one selectioncell, one selectionline or one selectionblock 

getSelectionContext (ignore)
Catch the current context on which the selection is done 
Arguments
Argument
 
Documentation 
IGNORE

the current object 

getstyles ()
Returns the list of styles applicable to a stylable object 

go (object)
Allows you to invoke an hyperlink 
Arguments
Argument
 
Documentation 
OBJECT
OPTIONAL
object that the hyperlink is invoked on 

hasExcelAnnotation (object)
Return true if object allow to display annotation as Excel do. 
Arguments
Argument
 
Documentation 
OBJECT

Object 

helpFormula (class, type)
Shows a help dialog to enter an OPX2 formula 
Arguments
Argument
 
Documentation 
CLASS

String: name of an OPX object class 
TYPE
OPTIONAL
string: BOOLEAN,NUMBER,DATE,STRING or DURATION see [formula] objects 

image ()
Allows you to define an image associated to an object. If you specialize this method for one specific object class, you can redefine the icon associated to an OPX2 object, this icon will appear in the selection bar of a table 

imageHeightWithRatio (srcwidth, srcheight, dstwidth, dstheight, keepaspectratio)
Returns the height used to resize the image keeping ratio for a destination width and height 
Arguments
Argument
 
Documentation 
SRCWIDTH

Source image width 
SRCHEIGHT

Source image height 
DSTWIDTH

Destination image width 
DSTHEIGHT

Destination image height 
KEEPASPECTRATIO

Set to true to keep aspect ratio 

imageWidthWithRatio (srcwidth, srcheight, dstwidth, dstheight, keepaspectratio)
Returns the width used to resize the image keeping ratio for a destination width and height or false on error 
Arguments
Argument
 
Documentation 
SRCWIDTH

Source image width 
SRCHEIGHT

Source image height 
DSTWIDTH

Destination image width 
DSTHEIGHT

Destination image height 
KEEPASPECTRATIO

Set to true to keep aspect ratio 

inMaster (nil)
Returns true if we are in the OPX2 Intranet Server master process 
Arguments
Argument
 
Documentation 
nil



isColumnOrganizationToolDisplayed ()
Returns true if the organize column tool is displayed and false otherwise. To be called on the ottp mode 

isInDashboardEditMode ()
Return true if the current drawing dashboard is in edit mode 

isInMode4orIntranet (graphics, height)
Return true if we are in intranet mode or in pro <mode 4> 
Arguments
Argument
 
Documentation 
GRAPHICS

The graphic object 
HEIGHT

The new content height 

isParameterGraphToolDisplayed ()
Returns true if the parameter tool is displayed and false otherwise. To be called on the ottp mode 

isScriptV2 (string)
Indicates if a javascript string is V2 or not 
Arguments
Argument
 
Documentation 
STRING

String script 

isviewable ()
Return true if the component is visible 

keywordToHtmlColor (keyword)
Convert a color keyword to a string usable in CSS #xxxxxx. 
Arguments
Argument
 
Documentation 
KEYWORD

A color. 

lineTo (x, y)
Draw a line from the current position to the specified position. The specified position becomes the new current position 
Arguments
Argument
 
Documentation 
THIS

A drawing path object 
X

Integer 
Y

Integer 
Syntax examples
dp.lineTo(20,20);

listottpmodes ()
Returns the list of stylable objects contained in the given folder 

listtabs ()
Returns the name of all the tabs of a folder 

lockolapdocument ()
Lock the Olap document for update 

message (key)
Retrieves the string attached to a message 
Arguments
Argument
 
Documentation 
KEY

String: key identifying the message 

mouseLine (string)
Write or format a string in the mouse line 
Arguments
Argument
 
Documentation 
STRING

[string] string to be displayed in the mouse line 

moveTo (x, y)
move the cursor of the current path to the specify position (without drawing anything) 
Arguments
Argument
 
Documentation 
THIS

A drawing path object 
X

Integer 
Y

Integer 
Syntax examples
dp.moveTo(10,10);

newolapdocument ()
New Olap document 

olapdocumenteditwithexcel ()
Modify olap document with MsExcel 

olapdocumentproperties ()
Olap document properties 

parseHtmlColor (color-text)
Convert an html color to a string usable in PLW. 
Arguments
Argument
 
Documentation 
COLOR-TEXT

A HTML valid color. 

pprintFormula ()
Display a formula in a readable form for a User 

print (report, object, printer, format, orientation, destination, numcopies)
Prints a report 
Arguments
Argument
 
Documentation 
REPORT

Report to print 
OBJECT

Object to print 
PRINTER

String : Name of the printer (if unknown, the dialog will be displayed) 
FORMAT
OPTIONAL
String : Paper format name 
ORIENTATION
OPTIONAL
String : Orientation 
DESTINATION
OPTIONAL
String : Destination : filename for the HTML or PDF printer 
NUMCOPIES
OPTIONAL
Integer : number of copies (not yet implemented) 

printpresentation (presentation, object-or-list, printer, format, orientation, print-headers-and-footers, mode, group-by, saved-ctx-print-pres-on, encrypt)
Print a presentation 
Arguments
Argument
 
Documentation 
PRESENTATION

Presentation object to print 
OBJECT-OR-LIST

Object or objects array on which the presentation is applied 
PRINTER

Printer, for instance PDF-PRINTER, POWERPOINT-PRINTER 
FORMAT
KEYWORD
Paper format 
ORIENTATION
KEYWORD
Orientation of the paper, either LANDSCAPE or PORTRAIT 
PRINT-HEADERS-AND-FOOTERS
KEYWORD
Boolean: for instance PDF-PRINTER, POWERPOINT-PRINTER 
MODE
KEYWORD
mode 
GROUP-BY
KEYWORD
group by option, either BY-SLIDES or SELECTED-OBJECTS 
SAVED-CTX-PRINT-PRES-ON
KEYWORD
saved-ctx-print-pres-on 
ENCRYPT
KEYWORD
Boolean: on an encrypted dataset, generate an encrypted print (default is true) 

processInterrupt (script)
Allows to interrupt a running process 
Arguments
Argument
 
Documentation 
SCRIPT

[script] script 

processKill ()
Allows to kill a running process 

quadraticCurveTo (x1, y1, x2, y2)
Draw a quadratic curve from the current point to the point (x2,y2) which becomes the new current point. The control point is (x1,y1) 
Arguments
Argument
 
Documentation 
THIS

A drawing path object 
X1

Integer 
Y1

Integer 
X2

Integer 
Y2

Integer 
Syntax examples
dp.quadraticCurveTo(30,30,10,10);

recomputecosttable ()
Recompute the cost table used by the Olap document 

redrawAllWindow ()
Allows you to redraw all windows displayed in an Applet, Should be called if the applet is not redrawed correctly after an update 

refresh ()
Allows to refresh one specific chart or cell 

removeBarColorHandler ()
Remove a bar color handler of a widget (gantt,tree,pert), the this of the handler is the object represented in the bar or box 

removeBarDrawingHandler ()
Remove a bar drawing handler of a widget (gantt,tree,pert), the this of the handler is a graphics object 

removeBarShapeHandler ()
Remove a bar shape handler of a widget (gantt,tree,pert), the this of the handler is the object represented in the bar or box 

removeCluster (widget, id)
Remove a cluster from a bubble chart widget 
Arguments
Argument
 
Documentation 
WIDGET

This : widget on which removing the cluster 
ID

The cluster id, of the form axis@axisStart@axisEnd 

removecomments ()
Return script without comments 

removeLineTo (widget, id)
Remove a line from bubbles 
Arguments
Argument
 
Documentation 
WIDGET

This : widget on which removing the cluster 
ID

The cluster id, of the form source-id@destination-id 

removeMilestoneIconHandler ()
Remove a milestone icon handler of a widget (gantt chart) 

removeSuite (widget, id)
Remove a suite from a bubble chart widget 
Arguments
Argument
 
Documentation 
WIDGET

This : widget on which removing the suite 
ID

Id of the suite to remove 

removeTextColorHandler ()
Remove a text color handler of a widget, for a given object 

removeTextFontHandler ()
Remove a text font handler handler of a widget for a given object 

removeWidgetGenericHandler (handler-id, function)
Remove the handler function from the list of the handlers of a generic handler 
Arguments
Argument
 
Documentation 
HANDLER-ID

symbol of the generic handler 
FUNCTION

the function to be removed from the list of handlers functions of the given handler identifier 

removeWidgetHandler (handler-id)
Remove the handler function from a widget 
Arguments
Argument
 
Documentation 
HANDLER-ID

handler symbol 

remTimerScript (name)
Remove a timer script 
Arguments
Argument
 
Documentation 
NAME

[string] name of the timer 

renderHtml (string, x, y, w, h)
Renders a html string in a graphics 
Arguments
Argument
 
Documentation 
STRING

html string 
X
OPTIONAL
x origin 
Y
OPTIONAL
y origin 
W
OPTIONAL
width 
H

[optinal] h 

representationToCurveType ()
This function is the inverse of curveTypeToRepresentation 

resetClip ()
Reset the current clipping rectangle. No clipping is done after a call to resetClip 
Arguments
Argument
 
Documentation 
this

A graphics 
Syntax examples
g.resetClip()

resetClusters (widget)
Remove all the clusters from a bubble chart widget 
Arguments
Argument
 
Documentation 
WIDGET

This : widget on which removing the clusters 

resetGraphPositions ()
Resets the box positions of a PERT diagram 

resetLinesTo (widget)
Remove all the lines between bubbles from a bubble chart widget 
Arguments
Argument
 
Documentation 
WIDGET

This : widget on which removing the lines 

resetSuites (widget)
Remove all the suites from a bubble chart widget 
Arguments
Argument
 
Documentation 
WIDGET

This : widget on which removing the suites 

runBackgroundProcess (processes-name, script, priority, quantum)
Allows to start a thread that executes an OPX2 script, This function does not launch a background thread in OPX2 pro, the code is executed in the main thread 
Arguments
Argument
 
Documentation 
PROCESSES-NAME

[string] Name of the process 
SCRIPT

[string or function] OPX2 script launched inside the thread 
PRIORITY
OPTIONAL
number] Priority for the thread 
QUANTUM

[number] time without interruption 

saveolapdocument ()
Save Olap document 

searchWidget (parent, obj)
search a widget in an other widget 
Arguments
Argument
 
Documentation 
PARENT

the widget 
OBJ

the searched widget 

selectAttribute (string, type, callback, dialog-title, category, module, multiple, selected, writable-attributes)
Displays a dialog allowing to choose an attribute for a specific class. The object class it the THIS 
Arguments
Argument
 
Documentation 
STRING
OPTIONAL
String: default selected attribute or search string 
TYPE
OPTIONAL
String: attribute type, must be number,boolea,string,date or duration or undefined 
CALLBACK
OPTIONAL
function called on attribute selection 
DIALOG-TITLE
OPTIONAL
String: title of the dialog 
CATEGORY
OPTIONAL
String, filters on attribute category 
MODULE
OPTIONAL
String, filters on attribute module 
MULTIPLE
OPTIONAL
Allow selecting multiple attributes (default false) 
SELECTED
OPTIONAL
selected attribute 
WRITABLE-ATTRIBUTES
OPTIONAL
display only writable attributes 

selectcurves (curvelist, callback, selected-objects, title)
Select from a list of curves in a popup 
Arguments
Argument
 
Documentation 
CURVELIST

list of curve type objects to select from 
CALLBACK

callback function (see selectdata) 
SELECTED-OBJECTS

list of already selected objects 
TITLE
OPTIONAL
title of the popup 

selecttab (tabname)
Select a tab in a folder by its name 
Arguments
Argument
 
Documentation 
tabname

{string] name of the tab to select 

setCellData (object, slot, property, data)
Method on a grid, allows to associate data linked to a cell property 
Arguments
Argument
 
Documentation 
OBJECT

Object that is displayed in a line 
SLOT

Column of the grid, the slot can be a string, symbol or slot object 
PROPERTY

A string, symbol or any data structure 
DATA

Any data 

setDynamicPrintingContextAttribute (context-attribute, class)
Allows to define a context attributes that defines a printing context associated to a specific object class. When the printed document is associated to an object of this class, the context attributes is set to the ID of the associated object. The dynamic printing context attribute is associated with the current printing report 
Arguments
Argument
 
Documentation 
CONTEXT-ATTRIBUTE

String: name of the context attribute used 
CLASS

String: class of the object represented in the context attribute 

setInSensitive (attribute)
Allows you to set an editor or an editor attribute in the sensitive state 
Arguments
Argument
 
Documentation 
ATTRIBUTE
OPTIONAL
string: attribute name 

setPopupContentHeight (graphics, height)
Set the content height of the embedding popup 
Arguments
Argument
 
Documentation 
GRAPHICS

The graphic object 
HEIGHT

The new content height 

setSensitive (attribute)
Allows you to set an editor or an editor attribute in the sensitive state 
Arguments
Argument
 
Documentation 
ATTRIBUTE
OPTIONAL
string: attribute name 

setToolHandler (tool, function)
Allow to define a script handler on a tool. The script function will be called in place of the regular tool callback. If the script function returns false, the regular callback will still be called. 
Arguments
Argument
 
Documentation 
TOOL

A symbol representing the tool. 
FUNCTION

The script function that will be called by the tool. 
Syntax examples
var excelTool = new symbol ("EXCEL"); excelTool.setToolHandler(myhandler);

setUserPalette (error)
Allows to define a color palette specific to a user. The this should a parameter set or a string referencing a parameterset 
Arguments
Argument
 
Documentation 
ERROR

[boolean] if true generates an error if the palette is invalid 

showContextRichMenu (widget, report, object, x, y, autoclose, effect)
Display a report as a rich menu 
Arguments
Argument
 
Documentation 
WIDGET

A widget, parent of the rich menu 
REPORT

report to be displayed 
OBJECT

Object the report is to be displayed on 
X

x coordinate of the displayed rich menu 
Y

y coordinate of the rich menu 
AUTOCLOSE

Boolean, should the rich menu close itself when clicking on it 
EFFECT

Apparition effect (string) or false, see the rich menu link option for possible values 

startBatchProcess (user, function, logfile, timeout)
Allows to start a batch process that executes an OPX2 script or macro, the log file is written in the logfile argument. This function waits for the batch process to complete (or timeout) before returning. If you want to launch a batch process asynchronously, call StartBatchProcess from RunBackgroundProcess. 
Arguments
Argument
 
Documentation 
USER

[string] user name used to launch the batch process 
FUNCTION

[string or function] OPX2 script or macro launched inside the batch 
LOGFILE

[string] pathname of the file used to log batch information 
TIMEOUT
OPTIONAL
integer] time out for the batch proces in seconds 

stringToCurveType ()
This function is the inverse of curveTypeToString 

truncateOnInvalidCharacter (string)
Truncate string when an invalid character is met. See forbidden-chars-in-structure-names for forbidden characters. 
Arguments
Argument
 
Documentation 
STRING

String 

unlockolapdocument ()
Unlock the Olap document 

usertools ()
Returns a list of tools that can be applied on one class or object 

widgetChangedByAdvancedSettings ()
Returns true if a widget has been changed by a user using the advanced settings dialog 

widgetparentformdialog (widget)
Returns the first form dialog ancestor of widget 
Arguments
Argument
 
Documentation 
WIDGET

the widget 

widgetStyleHasAdvancedSettingsToSave ()
Returns true if the widget has advanced settings to save 

Java extensions
This chapter introduces functions that enables to create a JAVA-CONTAINER widget and add java components in this widget 
Functions
addJavaComponent (component)
This method is defined on the JAVA-CONTAINER widget enables to add a java object inheriting from the java.awt.component class in a JAVA-CONTAINER 
Arguments
Argument
 
Documentation 
COMPONENT

A java component, see JavaNew function 

addWidget (class, args)
This method defined on the graphics object enables to create an OPX2 widget in a form, any OPX2 widget can be created using this function. One example of widget that can be used is the Java-container widget that contains java objects 
Arguments
Argument
 
Documentation 
CLASS

[string] A string that represents a widget class 
ARGS

a list of attributes and values that specifies the widget attributes 

addWidgetWithPlist (class, plist)
This method defined on the graphics object enables to create an OPX2 widget in a form, any OPX2 widget can be created using this function. One example of widget that can be used is the Java-container widget that contains java objects 
Arguments
Argument
 
Documentation 
CLASS

[string] A string that represents a widget class 
PLIST

an array of attributes and values 

coerceToJavaVector (class, values)
Returns a java vector that can be passed to a java object 
Arguments
Argument
 
Documentation 
CLASS

[string] name of the class of the vector elements 
VALUES

array or opx2script vector of the vector values 

getcomponents ()
Return the Java component associated to the graphics. 
Arguments
Argument
 
Documentation 
THIS

graphics 

javaCall (method, args)
This function enables to call a java method on a java object, no value is returned 
Arguments
Argument
 
Documentation 
METHOD

[string] Method name of the java method 
ARGS

Arguments of the java method 

javaCallReturnObject (method, args)
This function enables to call a java method on a java object, a pointer on a java object is returned, this pointer can be a stub object referencing the java object on the client applet 
Arguments
Argument
 
Documentation 
METHOD

[string] Method name of the java method 
ARGS

Arguments of the java method 

javaFont ()
Returns a java font object identical to the OPX2 font 

javaImport (packages)
This function enables to import java package to create java objects 
Arguments
Argument
 
Documentation 
PACKAGES

list of packages to import, if not arguments are passed the list is resetted 

javaNew (class, args)
This function enables to create a java object 
Arguments
Argument
 
Documentation 
CLASS

[string] name of the java class 
ARGS

Arguments of the java method 

javaStaticValue (class, attribute)
This function enables to retrieve the static value of a java class 
Arguments
Argument
 
Documentation 
CLASS

[string] name of the class 
ATTRIBUTE

[string] name of the slot 

keepJavaStubObject ()
This function enables to keep a reference to a java object in memory for a future use outside a display script 

Javascript tests engine
This chapter covers the API used to generate automatic tests in Javascript 
Classes or Objects
testsuite
Allow to define a new test suite 
Constructor Arguments
Argument
Documentation 
NAME
Name of the test suite 
USER
[Optional] User used to run the test suite 
VARIABLES
[Optional] a js object storing locall variables of the test suite 
CLEANUP-VARIABLE
[Optional] a method on variables object than can clean this object. This function is called regardless of the result, Context is passed as parameter. 

Functions
addAction (function, args, description)
Adds an action to the test suite. 
Arguments
Argument
 
Documentation 
THIS

Test suite 
FUNCTION

Function to call 
ARGS
OPTIONAL
Vector of arguments passed to the function. This is always the context. The second argument is always test-suite-variables. The vector of arguments are then passed in order. 
DESCRIPTION
OPTIONAL
Description of the test 

assertequal (actual, expected, context)
Assert an equality during a test. If the two first arguments are not equals, the system will raise an error. 
Arguments
Argument
 
Documentation 
ACTUAL

Value to test 
EXPECTED

Expected value 
CONTEXT

Description of the test that will show in the error log 

assertfalse (expression)
Assert that a value is false. 
Arguments
Argument
 
Documentation 
EXPRESSION

Value to test 

assertnotequal (actual, expected, context)
Assert an inequality during a test. If the two first arguments are equals, the system will raise an error. 
Arguments
Argument
 
Documentation 
ACTUAL

Value to test 
EXPECTED

Expected value 
CONTEXT

Description of the test that will show in the error log 

asserttrue (expression)
Assert that a value is true. 
Arguments
Argument
 
Documentation 
EXPRESSION

Value to test 

asserttypeof (actual, expected-type)
Assert a typing test during a test. If the first argument is not of the type specified in the second argument, the system will raise an error. 
Arguments
Argument
 
Documentation 
ACTUAL

Value to test 
EXPECTED-TYPE

Expected type 

copyPrototype (prototype)
Allow to copy the methods of the prototype given in this to a new prototype. Should only be used in test engine functions. 
Arguments
Argument
 
Documentation 
THIS

Prototype to copy 
PROTOTYPE

Destination prototype 

errorReport (report, subject)
Sends an error report using the command defined in the error::script-to-call-on-error configuration variable 
Arguments
Argument
 
Documentation 
REPORT

Content of the error report 
SUBJECT

Subject of the error report 

ignoreFunctionInTestSuite (function)
Specifies that this function will be ignored, ie will do nothing, during the execution of the test suite. 
Arguments
Argument
 
Documentation 
THIS

Test suite 
FUNCTION

Function to ignore. 

replaceFunctionInTestSuite (function, replacement)
The specified function will be replaced by the given function during the execution of the test suite. 
Arguments
Argument
 
Documentation 
THIS

Test suite 
FUNCTION

Function to replace 
REPLACEMENT

Replacement function 

run ()
Runs the test suite 
Arguments
Argument
 
Documentation 
THIS

Test suite to run 

runSubaction (function, description)
Run a subaction in an action. 
Arguments
Argument
 
Documentation 
THIS

Test suite 
FUNCTION

Function to call 
DESCRIPTION
OPTIONAL
Description of the test 

test_endOfHistory ()
Test if there's still something in the undo list. 

test_historycommit ()
Commit a set of action in a history version. 

test_resetHistory ()
Reset current history. 

Object management
This chapter covers the part of the API which allows to manipulate OPX2 objects, OPX2 objects are the data the user can see in the data menu of OPX2, this API allows to write transactions on these objects and to alter the OPX2 object data model 
Classes or Objects
objectAttribute
This class represents the internal object describing an OPX object attributes, this object can be dynamicaly created , updated or removed to modify the OPX data model. Before modifying an OPXobject build in attribute please ask our technical team, the behavior of OPX2 can be completely changed 
Constructor Arguments
Argument
Documentation 
CLASS
String or object class, the attribute is defined on 
NAME
String: name of the attribute 
ALLOCATION
[optional] String with values: "NO","OPTIONAL","INSTANCE" defining how the attribute is allocated,the default is NO: the attribute is computed and not stored 
Constructor syntax
new ObjectAttribute (OpxActivity,"LOAD","NUMBER");
Attributes
Argument
Documentation 
NAME
[read only] String: name of the attribute 
COERCEMETHOD
Function with one argument used to convert the value of the attribute, before modifying the object 
READER
Function used to compute the value of the attribute for non allocated or dynamic attributes 
MODIFIER
Function used to modify the value of the attribute for non allocated or dynamic attributes 
INITIALIZER
Function used to initialize the value of the attribute for non allocated or dynamic attributes 
MODIFYBEFOREMETHOD
Function called before the modification of an object attribute, this function can perform some checking and call [CancelCurrentTransaction] after 
MODIFYAFTERMETHOD
Function called after the modification of an object attribute, this function can perform some checking and call [CancelCurrentTransaction] after 
COLUMNNAME
[optional] String that represent the column name used to store the attribute in the relational database, if undefined the attribute is not stored 
ALLOCATION
[read only] string indicating the allocation mode of the attribute values are: "no","instance","optional" 
LOCKER
Function used to test if an attribute is locked or not before making an object modification 
TYPE
String: type of the attribute should be an OPX2 predefined attribute type 
COMMENT
MessageString or String: label of the attribute 
DOCUMENTATION
MessageString or String: documentation of the attribute 
CONNECTING
Boolean indicating if OPX2 perform data consistency checking on this attribute when creating an object in a dataset or when moving the object between datasets 
DEFAULT
Any value consistent with the attribute type and the undefined value: default value of the attribute used when creating an object 
UNDEFINED
Any value which can represent the undefined value 
OPTIONAL
Boolean: indicates if the attribute can take the undefined value or nor 
READONLY
Boolean: indicates it the attribute is read only or not 
USERLENGTH
Integer: length by default used to display the attribute value in grids 
LENGTH
Integer: maximum length of the attribute value, used to define the length in the datamodel 
CONNECTEDTO
String: name of the relation the attribute is connected to 
DATABASELENGTH
[read only] Integer: length of the column in the database 

objectClass
This class represents the internal object describing an OPX class. This class can be used to read an modify object class properties 
Attributes
Argument
Documentation 
REQUESTABLE
Boolean: this slot indicates if the class is visible in report and request modules 

objectRelation
This class represents the internal object describing a relation between OPX objects. This object can be dynamicaly created, updated or removed to modify the OPX data model. There is two kind of relations:
* the relations which are stored, allocation=INSTANCE or OPTIONAL in this case the relation is dynamicaly updated by OPX2 when the attribute corresponding to the relation is filled (see ConnectedTo in ObjectAttribute class)
* the relations which are computed: allocation=NO, in this case the programmer has to provide a mapMethod to compute the content of the relation. Creating this type of relation (dynamic relations) can be very usefull to optimize reports, these relation can be used in reports for iteration purposes with an efficient iteration algorithm taking into account specific data model caracteristics 
Constructor Arguments
Argument
Documentation 
CLASS
String or class the relation is defined on 
NAME
String: name of the relation 
ALLOCATION
[optional] String: default is "NO", possible values are "NO","OPTIONAL","INSTANCE" 
Constructor syntax
new ObjectRelation ("OpxObsNode","ProdIndicators");
Attributes
Argument
Documentation 
NAME
String: name of the attribute 
COMMENT
MessageString or String: label of the attribute 
DOCUMENTATION
MessageString or String: documentation of the attribute 
ADDITEMBEFOREMETHOD
Function: called before an item is added in a relation 
ADDITEMAFTERMETHOD
Function: called after an item is added in a relation 
REMITEMBEFOREMETHOD
Function: called before an item is removed from a relation 
REMITEMAFTERMETHOD
Function: called after an item is removed from a relation 
ORDEREDBY
Function: used to sort the content of a stored relation 
MAPMETHOD
Function: used to compute the content of a relation, this function takes two arguments: the object the relation is computed on, the function called to map the relation 
CONNECTEDTOCLASS
String or class: Class of the OPX objects contained in the relation 
CONNECTEDATTRIBUTE
String: the attribute the relation is connected to for static allocated relations 

Syntax operators
fromObject
This form allows you to iterate on objects from one origin object. For example you can iterate on all planned hours of one project, or on all actual hours under an obs node 
Syntax examples
fromObject(MyProject) for (x in OpxPlannedHours) write(x.tostring()+"n");
fromObject(MyObsNode) {
      for (x in OpxActualExpenditure) write(x.tostring()+"n");
      for (x in OpxPlannedExpenditure) write(x.tostring()+"n");
 }

on
This form allows you to set a trigger on some special events. You can set a trigger on any OPX object transaction: New (object), Delete (object), ModifyBefore(object,locker), ModifyAfter(object,locker) on any iteration or search request on a class of object or a relation (GetObject(id) MapObject() MapRelation(object) which is usefull to populate a certain class of objects before iterating on it (implementing some kind of deffered load mechanism) or on some special OPX2 events: OpenDatasets (datasets): when opening some new datasets CloseDatasets (datasets): when closing some datasets SaveDatasets (datasets): after saing some datasets RemoveAllObjects (): when closing all objects or at the start of the application ComputeDates (): when computing OPX2 dates ComputeCost (): when computing cost CommandBefore (): before all User command CommandAfter (): after all User command 
Syntax examples
on SaveDatasets (datasets) alert("Datasets: "+datasets.tostring()+ " saved!");
on New OpxTask (task) alert("New task created: "?+task.toString());
on ModifyBefore (task slots) 
if (slots.duration != undefined && slots.duration \> 144000) {
  alert("Task duration is too long");
  CancelCurrentTransaction();
  }

withObjectLock
This form allows you to lock an object or a vector object while performing some specific transaction in order to insure that other parallel transaction will not affect these objects during the transaction. If the objects were previously locked the process will wait until the objects are released, to avoir infinite deadlocks OPX2 is using a time out which by default is setted to 30 seconds. The default value of the time out is stored in the Lisp variable OBJECT::REQUEST-WAIT-TIMEOUT. You can change the value of this variable using the setValue method on a variable object. In the case the time out is reached OPX2 issues an error, you can catch with our try catch mechanism. We strongly recommand to avoid embedding different ObjectLock or different ProcessLock and ObjectLock in order to avoid dead locks in your transactions. 
Syntax examples
var myobjects;
fromObject (MyProject) for (x in OpxActivity) myobjects.push(x);
WithObjectLock (Myobjects) Myobjects.do_my_request();

withoutAlerts
This form allows you to desactivate OPX2 alerts while performing a certain transaction on OPX objects. 
Syntax examples
WithoutAlerts do_my_trabsaction();

withoutDatabaseRecording
This form allows to desactivate the database recording mechanism of OPX2 pro and OPX2 intranet Server while performing a given transaction. It is usefull if you want to perform operations on objects without having these transactions replicated in the relational database, you have to keep in mind then that if you want to save updates to the database you have to implement your own save database mechanism using the OPX2 script SQL api 
Syntax examples
WithoutDatabaseRecording do_perform_transaction();

withoutLocking
Allows to disable lock control in the scope of the form. You have to use this form carefully, when using it OPX2 stop performing lock control, typically you have to use it inside a WithObjectLock form do avoid the locks that you have setted yourself 
Syntax examples
WithoutLocking {Expression *}
WithoutLocking Expression

Functions
activateapplyandstay (graphics)
This function enables you to activate the Apply button on a report in any graphics cell. 
Arguments
Argument
 
Documentation 
GRAPHICS

graphics cell 
Syntax examples
activateapplyandstay([GraphicsCell]);

activatecancel (graphics)
This function enables you to activate the Cancel button on a report in any graphics cell. 
Arguments
Argument
 
Documentation 
GRAPHICS

graphics cell 
Syntax examples
activatecancel([GraphicsCell]);

activatehomepage (widget)
This function enables you to activate the home page navigation button in any widget. 
Arguments
Argument
 
Documentation 
WIDGET

widget 
Syntax examples
[widget].activatehomepage();

activatenext (graphics)
This function enables you to activate the Next button on a report in any graphics cell. 
Arguments
Argument
 
Documentation 
GRAPHICS

graphics cell 
Syntax examples
activatenext([GraphicsCell]);

activatenextpage (widget)
This function enables you to activate the next page navigation button in any widget. 
Arguments
Argument
 
Documentation 
WIDGET

widget 
Syntax examples
[widget].activatenextpage();

activateok (graphics)
This function enables you to activate the OK button on a report in any graphics cell. 
Arguments
Argument
 
Documentation 
GRAPHICS

graphics cell 
Syntax examples
activateok([GraphicsCell]);

activateprevious (graphics)
This function enables you to activate the Previous button on a report in any graphics cell. 
Arguments
Argument
 
Documentation 
GRAPHICS

graphics cell 
Syntax examples
activateprevious([GraphicsCell]);

activatepreviouspage (widget)
This function enables you to activate the previous page navigation button in any widget. 
Arguments
Argument
 
Documentation 
WIDGET

widget 
Syntax examples
[widget].activatepreviouspage();

activateprint (graphics)
This function enables you to activate the Print button on a report in any graphics cell. 
Arguments
Argument
 
Documentation 
GRAPHICS

graphics cell 
Syntax examples
activateprint([GraphicsCell]);

addDpeClass ()
Add a class in a dpe file 

adddynamicportfoliofilters (widget)
add portfolio filters managed from administration 
Arguments
Argument
 
Documentation 
WIDGET

chart 

addDynamicVersionCurve (name, comment, function)
This function allows to create an alias for version curves -> version number used will depend on the project 
Arguments
Argument
 
Documentation 
NAME

String: alias name 
COMMENT

String: comment for curve 
FUNCTION

String: function returning the version for an object (use only this) 

archiveDataset (dataset_or_vector)
Archive a dataset or a vector or dataset in a file 
Arguments
Argument
 
Documentation 
DATASET_OR_VECTOR

Dataset of vector of dataset 

assign (resource, ratio)
Assign a planned hour object to a specific resource which could be returned by the availableResources method 
Arguments
Argument
 
Documentation 
RESOURCE

Resource to assign 
RATIO
OPTIONAL
Number, default is 100, percentage of load to assign 

attributeLocked (attribute, arglist)
Tests if a specific attribute of an object is locked. See locker in ObjectAttribute. 
Arguments
Argument
 
Documentation 
ATTRIBUTE

String: name of the attribute 
ARGLIST
OPTIONAL
Vector: list of the pending modification on the object, 

attributetype (class, attribute, type)
return the syntax type of an attribute or directy a type (for example return string for multiline string) 
Arguments
Argument
 
Documentation 
CLASS

class of the attribute used 
ATTRIBUTE

attribute 
TYPE

if you haven't class or attribute, you can precise a type directly 

availableResources (ratio)
Returns a list of possible resources to assign, method defined on planned hours objects. The function takes into account all resource assignment parameters 
Arguments
Argument
 
Documentation 
RATIO
OPTIONAL
Number, default is 100, percentage of load to assign 

backupids (fieldname, class)
Backup all internal ONBs linked to the objects described in the field passed in argument 
Arguments
Argument
 
Documentation 
FIELDNAME

Name of the attribute to be backuped 
CLASS

Class or name of the class of the objects described in the field 

cancelCurrentTransaction ()
This function allows to cancel a transaction for an object, it should be used inside an alert or a wrapper 

changeonb ()
Allocates to an object a new unique object number 

chooseObject (class, attributes, choose-function, vector-of-objects)
Displays a dialog allowing to choose one object (or multiple 
Arguments
Argument
 
Documentation 
CLASS

class of objects to choose in 
ATTRIBUTES

vector of attributes displayed in the dialog 
CHOOSE-FUNCTION

function called when an object is chosen 
VECTOR-OF-OBJECTS
OPTIONAL
vector of objects to choose in or any object that the map method is defined on 

cleanupPersistentObject ()
This method is called when a persistent object is removed 

combineFormulaAndFromObject ()
Returns a dynamic_binding structure that can be set in a fromobject in order to reduce the data mapped when using a for or select construct 
Arguments
Argument
 
Documentation 
THIS

a formula (instanceof formula) 
Syntax examples
var o_formula = new Formula ("opxwbselement","project in("myproject","mp2") and level=1");fromObject(o_formula.combineFormulaAndFromObject()){for (var x in opxtask) x.dosomething();}

compareprocessesversion (v1, v2)
Return t if version processes 1 is higher than processes 2 
Arguments
Argument
 
Documentation 
V1

string type of 7.1.1 
V2

string type of 7.1.1 

computeInsertAtSelectionPlist (classname)
returns a plist of arguments to create an object inserted at a given place in a table or a gantt 
Arguments
Argument
 
Documentation 
CLASSNAME

[string] the name of the class 

copy (arglist)
Copies an object with the new attributes specified in the arglist 
Arguments
Argument
 
Documentation 
ARGLIST

[list of arguments] List of arguments, attribute and values 

copyobjectwithrelations (args)
same as copywithrelations but returning the copied object 
Arguments
Argument
 
Documentation 
ARGS

[list of arguments] List of attribute names and values specifying the object that is created 

copyWithPlist (arglist)
Copy an OPX2 object, this method allows to copy an OPX2 Object with different attributes in the same transaction. The attributes and values are passed with a vector to the function. 
Arguments
Argument
 
Documentation 
ARGLIST

Is a vector of attributes and values 

copyWithRelations (args)
Copies an object with all its connected objects 
Arguments
Argument
 
Documentation 
ARGS

[list of arguments] List of attribute names and values specifying the object that is created 

createExtendedBS (child-class)
Create an extended breakdown 
Arguments
Argument
 
Documentation 
THIS

[objectClass] 
CHILD-CLASS

[objectClass] 

createGroupBS (child-class, grouping-class)
Create a grouping breakdown 
Arguments
Argument
 
Documentation 
THIS

[objectClass] 
CHILD-CLASS

[objectClass] 
GROUPING-CLASS

[objectClass] 

currentkeyinbatch ()
Return current key during call mapper on each bag 
Arguments
Argument
 
Documentation 
THIS

useless 

curvetypeattribute (curve-type)
Return the curve attribute linked to the curve type 
Arguments
Argument
 
Documentation 
curve-type

curve-type 

curvetypeforratetable (curve-type)
Return t if rate table curves are generated for the curve type 
Arguments
Argument
 
Documentation 
curve-type

curve-type 

declareContextStaticAttribute (dependances)
declares the dependances of a context dynamic attribute to allow formula optimizations 
Arguments
Argument
 
Documentation 
THIS

the slot object 
DEPENDANCES
OPTIONAL
names of dependances 

declareSubClassingAttribute (attribute)
Method on a class, that defines an attribute that caracterize objects in subclasses 
Arguments
Argument
 
Documentation 
ATTRIBUTE

Name of attribute that caracterize the class 

declareTempAttribute (attribute)
declares a temporary attribute living in the plist of the object 
Arguments
Argument
 
Documentation 
THIS

a class 
ATTRIBUTE

[symbol] the attribute 

defineObjectAttribute (name, desc, target-class, class-field, id-field, create-relation)
Allows to define an attribute that allows to store an object with a weak relation The method is called on an object class 
Arguments
Argument
 
Documentation 
NAME

String: name of the attribute 
DESC

String: description of the attribute 
TARGET-CLASS

String: class of the object that will be stored 
CLASS-FIELD
OPTIONAL
String: name of the attribute that will store the class of the object 
ID-FIELD
OPTIONAL
String: name of the attribute that will store the id of the object 
CREATE-RELATION
OPTIONAL
Boolean: create reverse relation to access objects of class from target class 
Syntax examples
"OpxComponentReport".defineObjectAttribute("GAUGE_OBJECT","Gauge object","OpxObject","_DM_AA_S_GCLASS","_DM_AA_S_GID"

defineRingAttribute (name, desc, relation, target-field, inverse-attribute, default-attributes, displayed-attributes)
Allows to define an attribute that allows to update a relation. The method is called on an object class 
Arguments
Argument
 
Documentation 
NAME

String: name of the attribute 
DESC

String: description of the attribute 
RELATION

String: name of the relationship 
TARGET-FIELD

String: name of the attribute of the ring that returns the connected object 
INVERSE-ATTRIBUTE
OPTIONAL
name of the inverse attribute to fill when a dynamic relation is used 
DEFAULT-ATTRIBUTES
OPTIONAL
Vector: default attributes and values of the ring 
DISPLAYED-ATTRIBUTES
OPTIONAL
Vector: list of the displayed attributes of the connected object 
Syntax examples
"OpxActivity".defineRingAttribute("FSSUCCESSORS","Finish start successors","RIGHT-CONSTRAINTS","RIGHT",{"TYPE","FINISH-START"})

difference (arg1, arg2)
This method allows you to get a list of elements of current object that do not appear in the second argument. 
Arguments
Argument
 
Documentation 
ARG1

a vector or an array of same type 
ARG2

a vector or an array of same type 
Syntax examples
[vector].difference([other vector]);

displayendofmilestoneasstart (object, attribute)
Value for End attributes displayed as Start 
Arguments
Argument
 
Documentation 
OBJECT

object (project or work-structure) 
ATTRIBUTE

attribute name 

editObject (object)
This method allows you to invoke the default report of an object for editing it. 
Arguments
Argument
 
Documentation 
OBJECT
OPTIONAL
object that the report is invoked on 

editopx2object (type, args_vector)
This method allows you to edit an existing object or to create a new one 
Arguments
Argument
 
Documentation 
TYPE

a string naming the editor type 
ARGS_VECTOR

a vector of attributes and values 
Syntax examples
OpxTask.editopx2object("default",[vector of attributes and values]);

encrypt (algo)
Encrypts a string to use as a password 
Arguments
Argument
 
Documentation 
THIS

[string] the string to encrypt 
ALGO
OPTIONAL
[symbol or string] the encryption algorithm 

expandObjectTable (size)
Expand the object index tables for big database 
Arguments
Argument
 
Documentation 
SIZE

Integer size of the table 

exportEnvironmentObject ()
Export an environment object in readable Lisp form (see read) 

filterrelationattribute (class, attribute)
Use to filter only fields pointing on objects 
Arguments
Argument
 
Documentation 
CLASS

Symbol :represent the name of the attribute class 
ATTRIBUTE

Symbol :represent the name of the attribute 

findClass ()
Returns the class associated to an object or class name 

findFolderFromReportForm (rf)
return the folder cell of this 
Arguments
Argument
 
Documentation 
RF

a report form 

get (key, default)
Returns a property attached to an object, the property can be a string representing an attribute or any object, the third argument is the value returned if the property does not exist. If the method is invoked on a class or on a string representing a class, the method returns the object identified by the key. 
Arguments
Argument
 
Documentation 
KEY

Could be an attribute name or a property [any object] 
DEFAULT
OPTIONAL
Is the value returned if the attribute of property is not initialized 

getattributefeature (attribute, feature)
This method allows you to access the OPX2 class attribute feature. The attribute features you can access are : CONNECTING, REPRESENTATION, COMMENT, USER-LENGTH, LENGTH, DEFAULT-VALUE, UNDEFINED-VALUE, DATABASE-DEFINITION, DOCUMENTATION, DEPENDANCE, SHADOWED, READ-ONLY, OPTIONAL, TYPE, PROPAGATE, INITIALIZABLE, RECOMPILE-OBJECT, CONNECTED-TO-RELATION. This method returns the value of the attribute feature requested. 
Arguments
Argument
 
Documentation 
ATTRIBUTE

a string containing the name of the attribute 
FEATURE

a string containing the feature name 
Syntax examples
OpxActivity.getattributefeature([attribute name],[attribute feature]);

getattributetype (attribute)
This method allows you to get an OPX2 class attribute script type. The list of possible script types returned are : STRING, NUMBER, DATE, BOOLEAN, DURATION. 
Arguments
Argument
 
Documentation 
ATTRIBUTE

a string containing the name of the attribute 
Syntax examples
OpxActivity.getattributetype([attribute name]);

getattributevalue (attribute)
This method enables you to get the attribute value in string format. If you do not specify the name of the attribute you want to use, the Identifier attribute is used by default. Except if you use this function on an OPX2 class. 
Arguments
Argument
 
Documentation 
ATTRIBUTE

attribute name 
Syntax examples
OpxActivity.getattributevalue([AttributeName]);

getCell (rf)
return the cell of this 
Arguments
Argument
 
Documentation 
RF

a report form 

getclassindex ()
This method allows you to get an OPX2 class index (code specification). This method returns a list of index components. 
Syntax examples
OpxWbsElement.getclassindex();

getDefaultNode ()
Return the root of a breakdown structure 

getExtendedGroupingArbo (child-class, grouping-class)
return an existing extended breakdown 
Arguments
Argument
 
Documentation 
THIS

[objectClass] 
CHILD-CLASS

[objectClass] 
GROUPING-CLASS
OPTIONAL
[objectClass] 

getfirstdefined (arglist)
This function allows you to get the first undefined value from an argument list. This function returns the first undefined value. 
Arguments
Argument
 
Documentation 
ARGLIST

arglist containing all the value to be tested 
Syntax examples
getfirstdefined(undefined,[number value],undefined);

getFolderCell (rf)
return the folder cell of this 
Arguments
Argument
 
Documentation 
RF

a report form 

getidslistfromouv (key, class)
get last lines in onb user value with the object reference and a provided key (attname column in DB) 
Arguments
Argument
 
Documentation 
THIS

object :represents the object stored in object reference in onb-user-value table 
KEY

string : actually an attname (attname column) but it's possible to use an other key 
CLASS

object or string :represents the class of the objects which are stored with their onb in value column 

getinotherdata (style, key)
Get value in style other data for the given symbol key 
Arguments
Argument
 
Documentation 
STYLE

Object : table-style 
KEY

Symbol in style other data 

getInternal (key, default)
Return objects of a class using its index (key); returns also shadowed objects 
Arguments
Argument
 
Documentation 
KEY

Could be any object index 
DEFAULT
OPTIONAL
Is the value returned if object is not found 

getInternalValue (attribute)
This method is implemented of OPX object it returns the internal value of an OPX object attribute. OPX object have internal and external representation for objects, internal representation can be any internal non documented OPX2 type, the external representation is always a number, a boolean, a date or a duration. When using standard object accessors or the get method OPX2 script converts the internal value to an external one, in some case it is interesting to access directly the internal value, one of the reason could be to write multi-lingual code where the external value depend on the current language used but the internal value is always the same 
Arguments
Argument
 
Documentation 
ATTRIBUTE

String: name of the attribute 

getLastAppliedStyleKey (prefix)
Return the Key of the parameter used to store the style of the object given in argument 
Arguments
Argument
 
Documentation 
PREFIX

A prefix that can be added to the key 

getlistofrootws (project)
Get real root wbs of a project (without not consolidated dates ws) 
Arguments
Argument
 
Documentation 
PROJECT

object project 

getmandatoryfields ()
This method allows you to produce a list of mandatory attributes for a given OPX2 class. This method return a list of mandatory field. 
Syntax examples
OpxWbsElement.getmandatoryfields();

getOrCreateTimeCard (resource-number, date, warn-on-creation, temporary)
Allows to get a timecard object (and create it if it does not exist yet) 
Arguments
Argument
 
Documentation 
THIS

ignored 
RESOURCE-NUMBER

[number] ONB of the resource 
DATE

[number] the start date in Planisware format (number of minutes since the epoch) 
WARN-ON-CREATION
OPTIONAL
[boolean] warn if the time card is created 
TEMPORARY
OPTIONAL
[boolean] true if the time card shall not be saved in the database 

getprojecttypes (ptypes)
return project type object from ptypes (list of index symbol) 
Arguments
Argument
 
Documentation 
PTYPES

list of index symbol 

getReference (key)
gets dataset reference. 
Arguments
Argument
 
Documentation 
THIS

dataset 
KEY

a keyword associated to a reference 

getSlot (attribute)
Allows to retrieve the ObjectAttribute or ObjectRelation identified by a name of an object or class 
Arguments
Argument
 
Documentation 
ATTRIBUTE

String: name of the attribute or relation 

getslotbyid (id)
Allows to retrieve the ObjectAttribute or ObjectRelation by its identifier only 
Arguments
Argument
 
Documentation 
THIS

Object class or name of an object class 
ID

Identifier of the attribute or relation 

gettablename ()
This method enables you to get table name for an OPX2 class. This method returns nothing if you use it on special OPX2 class like Activity which is a view and not a table. 
Syntax examples
OpxTask.getTableName();

getTimecardCalendar ()
Returns the calendar of a timecard 
Arguments
Argument
 
Documentation 
THIS

a timecard 

getUnitDuration ()
Returns the number of period in the time unit 
Arguments
Argument
 
Documentation 
THIS

a time unit 

hierarchicalcodeinferior (model)
compare hierarchical codes for the given objects 
Arguments
Argument
 
Documentation 
THIS

the first object 
MODEL

the second object 

importenvironmentobject (the-dataset)
This method allows you to import environment object from a file to a dataset. 
Arguments
Argument
 
Documentation 
THE-DATASET

an object containing the dataset 
Syntax examples
"[PathName]".importenvironmentobject([Dataset to import in]);

importImage (filename, dataset)
Import an image into an OPX2 dataset. 
Arguments
Argument
 
Documentation 
FILENAME

Path and name of the image file 
DATASET

OPX2 dataset to store the image in. 

inferior (object, attributes)
Tests if two objects are one before each other given the sort caracteristics of the attributes passed as arguments 
Arguments
Argument
 
Documentation 
OBJECT

Object the object is compared with 
ATTRIBUTES

[list of arguments] attributes names used to compare the two objects 

inheritfrom (other-class)
This method allows you to know if an OPX2 class inherits from another. This method returns true if the class inherits from the another or false if not. 
Arguments
Argument
 
Documentation 
OTHER-CLASS

other class specification 
Syntax examples
OpxWbsElement.inheritfrom(OpxActivity);

initializePersistentObject ()
This method is called when a persistent object is initialized 

insert (element, position)
This method allows you to insert an element into a string or vector in the specified position. 
Arguments
Argument
 
Documentation 
ELEMENT

an element to insert 
POSITION

a number defining the insert position (default value 0) 
Syntax examples
[vector].insert([element],[position]);[string].insert([string],[position]);

insertActivity (ws, historization)
Allows to add a line in a time card 
Arguments
Argument
 
Documentation 
THIS

a timecard 
WS

an activity 
HISTORIZATION
OPTIONAL
[boolean] should the operation be undoable 

instanceof (object, class)
Checks that the object is a member of the class given as argument. 
Arguments
Argument
 
Documentation 
OBJECT

the object to check 
CLASS

the name of the class 
Syntax examples
"test".instanceof("string");
myproject.instanceof("opxproject");

internalToExternal (attribute, value)
This method allows to convert any OPX object internal value in an external value, the method is defined on OPX object classes or OPX object 
Arguments
Argument
 
Documentation 
ATTRIBUTE

String: name of the attribute 
VALUE

Any value 

intersection (v1, v2)
Returns the intersection of 2 vectors 
Arguments
Argument
 
Documentation 
V1

vector 
V2

vector 

isChildOf (object)
Indicates if an object is the child of another, returns true or false 
Arguments
Argument
 
Documentation 
OBJECT

Object candidate for the parent 

isclassemptyfordataset (class-name, dataset)
return if class is empty in dataset 
Arguments
Argument
 
Documentation 
CLASS-NAME

class name 
DATASET

object dataset 

ismandatoryfield (attribute)
This method allows you to know if an attribute of an OPX2 class is a mandatory attribute. This method returns true if the attribute is mandatory or false if not. 
Arguments
Argument
 
Documentation 
ATTRIBUTE

a string containing the name of the attribute 
Syntax examples
OpxWbsElement.ismandatoryfield([attribute name]);

isrelationfield (attribute)
This method allows you to know if an attribute of an OPX2 class is a relation attribute. This method returns true if the attribute is a relation or false if not. 
Arguments
Argument
 
Documentation 
ATTRIBUTE

a string containing the name of the attribute 
Syntax examples
OpxWbsElement.isrelationfield([attribute name]);

join (separator, values)
This method allows you to add the current object content to a string, vector or hash table. The content is added with a specified delimiter. The second argument is used only with hash table, it enables you to define whether to join together the hash table keys or hash table values, depending on what is required. The second argument has no effect on a vector or list. 
Arguments
Argument
 
Documentation 
SEPARATOR

a string containing the result delimiter (default value ;) 
VALUES

a boolean defining elements used for join, key (false) or values (true), only for hash table 
Syntax examples
[vector].join([delimiter]);[list].join([delimiter]);[hash-table].join([delimiter]);[hash-table].join([delimiter],true);

listAttributes ()
Returns the list of attributes of an object or class 

listobjectcallers (object, list-of-classes)
List callers referencing object index in list of classes 
Arguments
Argument
 
Documentation 
OBJECT

object:object searched 
LIST-OF-CLASSES

list:list of classes where the object index is searched 

localOrderNumber ()
Method thar returns a number used to compute the hierarchical code of an object, this method can be customized using the method construct 

locked ()
This function allows to know is an object is currently locked or not 

lockobject (lock_slot, time_slot)
This method allows you to lock an object directly in the database 
Arguments
Argument
 
Documentation 
LOCK_SLOT

a string naming the slot which will receive the username 
TIME_SLOT

a string naming the slot which will receive the time 
Syntax examples
mytask.lock("lock_user","lock_time")

ltrim (string)
This method allows you to trim a specified character off the end of a specified string. It can be used, for example, to remove spaces at the end of strings. 
Arguments
Argument
 
Documentation 
STRING

a string containing the trim definition 
Syntax examples
[string].ltrim([string]);

makeattributedefaultformat (class, attribute)
Create a parameter for the default format of the attribute 
Arguments
Argument
 
Documentation 
CLASS

Symbol :represent the name of the attribute class 
ATTRIBUTE

Symbol :represent the name of the attribute 

makeattributedefaultparameter (class, attribute)
Create a parameter for the default value of the attribute 
Arguments
Argument
 
Documentation 
CLASS

Symbol :represent the name of the attribute class 
ATTRIBUTE

Symbol :represent the name of the attribute 

makeOpx2Object (arglist)
Allows to create an OPX2 object, the difference with new is that the class can be dynamically passed to the method 
Arguments
Argument
 
Documentation 
ARGLIST

List of arguments, attribute and values 
Syntax examples
Object.Modify(attribute1,value1,attribute2,value2 ....)

makeopx2objectwithplist (args_vector)
This method is the same as makeopx2object except that it only has an argument, which is a vector of attributes and values. This method returns the new object. 
Arguments
Argument
 
Documentation 
ARGS_VECTOR

a vector of attributes and values 
Syntax examples
OpxActivity.makeopx2objectwithplist([vector of attributes and values]);

mapdatasetbatch (datasets, mapper, mno)
make several bags from list of datasets and call mapper on each bag 
Arguments
Argument
 
Documentation 
DATASETS

vector or list : list of datasets 
MAPPER

function : call on each bag 
MNO

number : max number of object per bag 

maskregexp (regular-expression)
If you are using the same regexp often, use the regexp class instead. This method allows you to delete specified characters from an entire string matching a regular expression. For example, you could specify to delete from a string all capital letters from A to Z. This method returns a new string. 
Arguments
Argument
 
Documentation 
REGULAR-EXPRESSION

a string defining the regular expression to match 
Syntax examples
[string].maskregexp([Regular expression]);
"azerty1234uiopq5678sdfgh".maskregexp("[aA-zZ]+");

modify (arglist)
Modifies attributes an OPX2 object, this function allows to modify different attributes in the same transaction 
Arguments
Argument
 
Documentation 
ARGLIST

[list of arguments] List of arguments, attribute and values 

modifyPersistentObjectAfter (arglist)
This method is called after a persistent object is modified 
Arguments
Argument
 
Documentation 
ARGLIST

[list of arguments] List of arguments, attribute and values 

modifyPersistentObjectBefore (arglist)
This method is called before a persistent object is modified 
Arguments
Argument
 
Documentation 
ARGLIST

[list of arguments] List of arguments, attribute and values 

modifyWithPlist (plist)
Modifies attributes an OPX2 object, this function allows to modify different attributes in the same transaction. The attributes and values are passed with a vector to the function. 
Arguments
Argument
 
Documentation 
PLIST

Is a vector of attributes and values 

mpxImportFile ()
Allows you to import an MPX file inside OPX2 

parent ()
Returns the parent of an object in its breakdown structure 

parselist ()
This method allow you to convert a vector to a list. 
Syntax examples
var list = vector.parselist();

parsevector ()
This method allow you to convert a string or a list to a vector. 
Syntax examples
var vector = list.parsevector();

pathnameasdirectory (path)
create path directory string (works for each OS) 
Arguments
Argument
 
Documentation 
PATH

string: path 

positiveonb ()
Allocates to an object its unique object number if it is not yet done 

printattribute (attribute, value)
This method enables you to print the attribute value in string format. If you do not specify the name of the attribute you want to use, the Identifier attribute is used by default. Except if you use this function on an OPX2 class. 
Arguments
Argument
 
Documentation 
ATTRIBUTE

attribute name 
VALUE

value to print (optional) 
Syntax examples
OpxActivity.printattribute([AttributeName],[Value]);

printattributeinbase (attribute)
This method enables you to print the attribute value of the given object in string format as if it would be written in the database. 
Arguments
Argument
 
Documentation 
THIS

object 
ATTRIBUTE

attribute name 

printattributeWithFormat (class, attribute, value, format, language)
print internal value in a string with format and language 
Arguments
Argument
 
Documentation 
CLASS

name of the attribute class 
ATTRIBUTE

name of the attribute (provide the type of the value 
VALUE

internal value to print 
FORMAT

format of the value to print 
LANGUAGE

language to print the string value 

printStacktrace ()
log stack traces from errors caught in OPX2 Script 
Arguments
Argument
 
Documentation 
THIS

a condition 

probedirectory (path)
test if a path is a directory 
Arguments
Argument
 
Documentation 
PATH

string or pathname: path as this 

readattribute (attribute, value)
This method enables you to read the attribute string value in attribute type format. 
Arguments
Argument
 
Documentation 
ATTRIBUTE

attribute name 
VALUE

value to print 
Syntax examples
OpxActivity.readAtribute([AttributeName],[Value]);

readattributeinbase (attribute, value)
This method enables you to read the attribute string value in attribute type format. 
Arguments
Argument
 
Documentation 
ATTRIBUTE

attribute name 
VALUE

value to print 
Syntax examples
OpxActivity.readAtributeInBase([AttributeName],[Value]);

readAttributeWithFormat (string, class, attribute, format, language)
read internal value from a string with format and language 
Arguments
Argument
 
Documentation 
STRING

String to read 
CLASS

name of the attribute class 
ATTRIBUTE

attribute to set the internal value (provide the type of the value) 
FORMAT

format of the value to read 
LANGUAGE

language to read the internal value 

readlistofsymbols2 (string)
Create a list of symbol from string list with coma separator 
Arguments
Argument
 
Documentation 
STRING

string list with coma separator 

relationtargetclass (class, attribute)
Return the target class of field pointing on objects (not only relation -> ring, user attribute) 
Arguments
Argument
 
Documentation 
CLASS

Symbol :represent the name of the attribute class 
ATTRIBUTE

Symbol :represent the name of the attribute 

remDpeClass ()
Remove a class from a dpe file 

remove (element)
This method allows you to remove a part of an object string or vector. 
Arguments
Argument
 
Documentation 
ELEMENT

an element to remove. 
Syntax examples
[vector].remove([element]); [string].remove([character]);

removeduplicates ()
This method allows you remove duplicates entry inside a vector or a list. 
Syntax examples
[variable] = [vector].removeduplicates();[variable] = [list].removeduplicates();

removeObjects (lock-object, disable-daemons, disable-historization, nbthreads, monitor-string)
Remove a set of objects, which is much faster than making a loop to remove objects 
Arguments
Argument
 
Documentation 
LOCK-OBJECT
OPTIONAL
object or objects locked during the load process 
DISABLE-DAEMONS
OPTIONAL
defaut is true, disable all side effets linked to object creation/modification/removal like alsrts,workflows or on new,modify,delete triggers 
DISABLE-HISTORIZATION
OPTIONAL
default is true, disable historization while removing objects 
NBTHREADS
OPTIONAL
number of threads that are used during the computation, 
MONITOR-STRING
OPTIONAL
string that sends a progress message while objects are retrieved 

remPermanentLock (object)
Remove a permanent lock on a file 
Arguments
Argument
 
Documentation 
OBJECT

File or list of files 

replaceregexp (regular-expression, string)
If you are using the same regexp often, use the regexp class instead. This method allows you to replace specified characters from an entire string matching a regular expression. For example, you could specify to replace from a string all capital letters from A to Z with another string or character. This method returns a new string. 
Arguments
Argument
 
Documentation 
REGULAR-EXPRESSION

a string defining the regular expression to match 
STRING

a string containing the replacing string (default value "") 
Syntax examples
[string].replaceregexp([Regular expression],[replacing string]);
"azerty1234uiopq5678sdfgh".replaceregexp("[0-9]+","");

restoreDataset (dataset_or_vector, keep_internal_numbers, mode)
Restore a dataset or a vector of datasets from a file. The restoration mode allows to choose between merging, replacing , modifying the existing data. Please consult the OPX2 pro documentation to understand the various options of the restore dataset function 
Arguments
Argument
 
Documentation 
DATASET_OR_VECTOR

Dataset of vector of dataset 
KEEP_INTERNAL_NUMBERS
OPTIONAL
boolean default value is true 
MODE
OPTIONAL
string default value is "CREATE" possible values are 

restoreids (fieldname, class)
Restore all IDS linked to the objects described in the field passed in argument 
Arguments
Argument
 
Documentation 
FIELDNAME

Name of the attribute to be backuped 
CLASS

Class or name of the class of the objects described in the field 

rtrim (string)
This method allows you to trim a specified character off the start of a specified string. It can be used, for example, to remove spaces at the start of strings. 
Arguments
Argument
 
Documentation 
STRING

a string containing the trim definition 
Syntax examples
[string].rtrim([string]);

saveTC (headermodified, contentsmodified)
Saves a time card in the database 
Arguments
Argument
 
Documentation 
THIS

a timecard 
HEADERMODIFIED

[boolean] should we save the timecard object ? 
CONTENTSMODIFIED

[boolean] should we save the lines ? 

scheduleResources (resources-to-manage, alloc-filter-formula, start-date, end-date)
Launch the resource scheduling algorithm with a contextual approach 
Arguments
Argument
 
Documentation 
RESOURCES-TO-MANAGE
OPTIONAL
list of resources to manage 
ALLOC-FILTER-FORMULA
OPTIONAL
formula that enables to filter the resource allocation to manage 
START-DATE
OPTIONAL
start date for the resource scheduling algorithm 
END-DATE
OPTIONAL
end date for the resource scheduling algorithm 

searchObject (args)
Returns a vector of objects where attributes match the specified arguments 
Arguments
Argument
 
Documentation 
ARGS

[list of arguments] List of attribute names and values specifying the object retrieved 

searchObjectWithPlist (args_vector)
Same that SearchObject but take one argument wich is a vector of attributes and values 
Arguments
Argument
 
Documentation 
ARGS_VECTOR

Vector of attributes and values 

selectfile ()
This function enables you to select file with common select file dialog. 
Syntax examples
var FileList = SelectFile();

selectfilefordocfield (document-field, dialog-title, directory, pattern)
This function enables you to select file with common select file dialog. It will check that the selected file respects the limitations of the document field passed as argument (extensions, size) 
Arguments
Argument
 
Documentation 
document-field

The document field to use for checking 
dialog-title
OPTIONAL
The title of the dialog 
directory
OPTIONAL
The directory to store the file in 
pattern
OPTIONAL
The pattern of the file to select, for example : *.xlsx 

sendmail (list)
This method allows you to sned a mail with OPX2. Arguments are the specification of the mail formated as list. This list contains keywords and values. The keywords you can use are : TO, FROM, COPY, SUBJECT, BODY, IN-REPLY-TO, SMTP-SERVER, ATTACHMENTS. 
Arguments
Argument
Documentation 
LIST
OF 
Syntax examples
sendmail([keyword],[value],[keyword],[value],...);

sendmailwithplist (args_vector)
This method is the same as sendmail except that it only has an argument, which is a vector of keywords and values. 
Arguments
Argument
 
Documentation 
ARGS_VECTOR

a vector of keywords and values 
Syntax examples
sendmailwithplist([vector of keyword and values]);

setAttributeColumnName (name)
rename an attribute column name in the database 
Arguments
Argument
 
Documentation 
THIS

the slot object 
NAME

[string] the new database name 

setinotherdata (style, key, value)
Set a new value for the given key in style other data 
Arguments
Argument
 
Documentation 
STYLE

Object : table-style 
KEY

symbol key to retrieve the value 
VALUE

value to store in the style other data 

setInternalValue (attribute, value)
This method allow to modify an OPX object attribute with its internal value, you have to be careful before using this function which does not perform the type of checking done by the standard access function 
Arguments
Argument
 
Documentation 
ATTRIBUTE

String: name of the attribute 
VALUE

Any value 

setouvfromidslist (key, class, value)
set new lines in onb user value with the object reference, the value and a provided key (attname column in DB) 
Arguments
Argument
 
Documentation 
THIS

object :represents the object stored in object reference in onb-user-value table 
KEY

string : actually an attname (attname column) but it's possible to use an other key 
CLASS

object or string :represents the class of the objects which are stored with their onb in column value 
VALUE

string : represents the list of identifier to store in several line in onb-user-value 

setparametervalue (parameter, value)
Set a new value for the given parameter 
Arguments
Argument
 
Documentation 
PARAMETER

Object : parameter 
VALUE

value of the parameter 

setPermanentLock (object)
Create a permanent lock on a file 
Arguments
Argument
 
Documentation 
OBJECT

File or list of files 

shadow ()
This function allows to shadow an OPX object, attribute or an OPX class to the user 

splitregexp (regular-expression)
If you are using the same regexp often, use the regexp class instead. This method allows you to split into a list specified characters from an entire string matching a regular expression. For example, you could specify to split all words from a string. This method returns a new string. 
Arguments
Argument
 
Documentation 
REGULAR-EXPRESSION

a string defining the regular expression to match 
Syntax examples
[string].splitregexp([Regular expression]);
"Here is a sentence with few words".splitregexp("W");

splitregexptovector (regular-expression)
If you are using the same regexp often, use the regexp class instead. This method allows you to split into a vector specified characters from an entire string matching a regular expression. For example, you could specify to split all words from a string. This method returns a new vector. 
Arguments
Argument
 
Documentation 
REGULAR-EXPRESSION

a string defining the regular expression to match 
Syntax examples
[string].splitregexptovector([Regular expression]);
"Here is a sentence with few words".splitregexp("W");

trim (string)
This method allows you to trim a specified character off the start and end of a specified string. It can be used, for example, to remove spaces at the start and end of strings. 
Arguments
Argument
 
Documentation 
STRING

a string containing the trim definition 
Syntax examples
[string].trim([string]);

uncomputeDates ()
Tells OPX2 that dates should be recomputed, warning if this function is called outside a daemon or alert all dates might be recomputed thus creating performance issues 

unlockobject (lock_slot, time_slot)
This method allows you to edit an existing object or to create a new one 
Arguments
Argument
 
Documentation 
LOCK_SLOT

a string naming the slot which will receive the username 
TIME_SLOT

a string naming the slot which will receive the time 
Syntax examples
mytask.unlock("lock_user","lock_time")

unScheduleResources (resources-to-manage, alloc-filter-formula, start-date, end-date)
Cancel the resource scheduling algorithm with a contextual approach 
Arguments
Argument
 
Documentation 
RESOURCES-TO-MANAGE
OPTIONAL
list of resources to manage 
ALLOC-FILTER-FORMULA
OPTIONAL
formula that enables to filter the resource allocation to manage 
START-DATE
OPTIONAL
start date for the resource scheduling algorithm 
END-DATE
OPTIONAL
end date for the resource scheduling algorithm 

unShadow ()
This function allows to unshadow an OPX object, attribute or an OPX class to the user 

updatecurrentratescurves (ref-name, action)
Add or remove visibility on current rates curves 
Arguments
Argument
 
Documentation 
REF-NAME

Symbol :represent the name of the reference 
ACTION

Symbol :Check or Uncheck dedicated processes slot 

widgetparentshell (widget)
return the first shell widget 
Arguments
Argument
 
Documentation 
WIDGET

any widget son 

OPX2 extensions of the basic language
This chapter covers the OPX2 extension of Javascript, in the first part we see the general purpose extensions, in the following chapters we see the extensions which allows to handle specific OPX2 functions 
Classes or Objects
fileInputStream
Internal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseAllows to read a file 
Constructor
When creating a new fileOutputStream the file is opened in write mode 
Constructor Arguments
Argument
Documentation 
FILE
String: name of the file, can be a FTP path, in this case a password must be provided 
PASSWORD
String: the password is used only for FTP path 
Constructor syntax
new fileOutputStream(file,open_mode,[optional] password)
Attributes
Argument
Documentation 
Pathname
TYPE 
Password
TYPE 

fileOutputStream
Internal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseAllows to create or modify an existing file 
Constructor
When creating a new fileOutputStream the file is opened in write mode 
Constructor Arguments
Argument
Documentation 
FILE
String: name of the file, can be a FTP path, in this case a password must be provided 
OPEN_MODE
String that can take one of the following values: "OVERWRITE" or "APPEND" 
PASSWORD
String: the password is used only for FTP path 
Constructor syntax
new fileOutputStream(file,open_mode,[optional] password)
Attributes
Argument
Documentation 
Pathname
TYPE 
OpenOption
TYPE 
Password
TYPE 

funnelbar
Constructor
funnelbar objects are used in the DrawBarChartFunnel function 
Constructor Arguments
Argument
Documentation 
NAME
String: Name of the bar (written on top of the bar) 
VALUE
Number: [Optional] Value of the bar 
GROUP
String: [Optional] Group of the bar 
COLOR
Color: [Optional] Color of the bar (you should use the color function) 
HELP-BUBBLE
String: [Optional] Text displayed when mouse is over the bar 
THIS
Object: [Optional] object used as this in the click and double click functions. If not specified, the name of the bar is used 
Constructor syntax
new funnelbar("name", "value", "groupe", "color", "help bubble", "this");

hashTable
Provide an hashtable type of data structure, the methods set,get,rem and clear should be used to update the table, there are three type of hashtables "number" which can be used to use integer numbers and object pointer as keys , "string" where key can be strings and "object" where any Opx or OPX2 script object can be used as a key. NB the for form can be used to iterate on a hashtable 
Constructor Arguments
Argument
Documentation 
TYPE
[optional] string the default value is "Number" possible values are "number","string" and "object" 
SIZE
[optional] integer default value is 120 
Constructor syntax
new HashTable(); or new HashTable("string"); or new HashTable("string",0.5,1.4);
Attributes
Argument
Documentation 
COUNT
[read only] integer numner of entries in the hashtable 
TYPE
[read only] string returns the type of the hashtable 
SIZE
[read only] integer size of the hashtable 
REHASHTHRESHOLD
[read only] double float indicates the maximum ratio count/size accepted before expanding the table 
REHASHSIZE
[read only] double float indicating the expansion rate of the table when expanded 

icalserver
Allows to create a meetings processor associated to an email adress 
Constructor
Constructor Arguments
Argument
Documentation 
SERVER
String: imap server to connect to 
EMAIL
String: email associated to the imap account 
USER
String: User to log in as 
PASSWORD
String: Password 
MAILBOX
String: Mailbox you want to access 
PORT
Integer: [Optional] Port number. Default is 143 
SSL
Bool: [Optional] Imap server use ssl?. Default is false 
SMTPSERVER
String : name of the smtpserver to connect to 
SMTPPORT
Integer : port of the smtpserver to connect to 
SMTPMETHOD
String: smtp security seettings (ssl/tls, starttls, plain) 
ONPUBLISH
String: name of the callback handling PUBLISH event (see RFC 2446) 
ONREQUEST
String: name of the callback handling REQUEST event (see RFC 2446) 
ONREPLY
String: name of the callback handling REPLY event (see RFC 2446) 
ONADD
String: name of the callback handling ADD event (see RFC 2446) 
ONCANCEL
String: name of the callback handling CANCEL event (see RFC 2446) 
ONREFRESH
String: name of the callback handling REFRESH event (see RFC 2446) 
ONCOUNTER
String: name of the callback handling COUNTER event (see RFC 2446) 
ONDECLINECOUNTER
String: name of the callback handling DECLINECOUNTER event (see RFC 2446) 
Constructor syntax
new meetingprocessor("oahu", "troche\@planisware.com", "troche", "mypassword", "Inbox.test", 143, "onpublish", "onrequest", "onreply", "onadd", "oncancel", "onrefresh", "oncounter", "ondeclinecounter");

imapserver
Allows to connect to an imap server and retrieve messages from specified mailbox 
Constructor
delete method should be called on the imapserver object to close properly the connection when work is done 
Constructor Arguments
Argument
Documentation 
SERVER
String: server to connect to 
USER
String: User to log in as 
PASSWORD
String: Password 
MAILBOX
String: Mailbox you want to access 
PORT
Integer: [Optional] Port number. Default is 143 
FOLDER
String: [Optional] If defined, a copy of the email and its attachment will be stored on the server in this directory 
Constructor syntax
new imapserver("oahu", "troche", "mypassword", "Inbox.test", 143, "c:/web");

messageString
Multi lingual string used in OPX objects 
Constructor syntax
new MessageString
Attributes
Argument
Documentation 
FRENCH
String the value of the string in French 
ENGLISH
String the value of the string in English 
GERMAN
String the value of the string in German 

object
Any object 

ojsObject
Any Opx2 script object 

opxConsole
The OpxConsole allows you to display and read information in an OPX2 console window, using the write and readline methods 
Attributes
Argument
Documentation 
HIDDEN
Boolean indicating if the console is hidden or displayed 

opxDataset
Any Dataset object 

opxObject
Any Opx object 

pathname
Object describing a file pathname 
Constructor Arguments
Argument
Documentation 
NAME
String describing the pathname 
Constructor syntax
new pathname("c:\myfile.txt");
Attributes
Argument
Documentation 
DIRECTORY
[read only] returns a list of path describing the directory 
HOST
[read only] returns a string describing the host supporting the path 
NAME
[read only] returns a string describing the name of the file 
TYPE
[read only] returns a string describing the type or extension of the file 
DEVICE
[read only] returns a string describing the device or disk 

regexp
Creates an optimized regular expression from a string 
Constructor
Constructor Arguments
Argument
Documentation 
STRING
String: the regular expression to optimize 
Constructor syntax
var re = new regexp("[0-9+]")

symbol
Interface with Lisp symbols in OPX2 script, the interface allows to access to symbol properties like their value for a variable or their function code for a function 
Constructor Arguments
Argument
Documentation 
NAME
String: name of the symbol in upercase characters 
PACKAGE
[optional] string: name of the Common Lisp package the symbol is coming from 
Constructor syntax
new Symbol("DELETE-FILE","CL");
Attributes
Argument
Documentation 
VALUE
Value of the symbol 
FUNCTION
Function code associated to the symbol 

variable
Internal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal Use OnlyInternal Use OnlyInternal Use OnlyInternal Use OnlyInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseAllows to manipulate a Lisp variable in OPX2 script 

vector
A simple class which allows to contain a vector of objects 
Constructor Arguments
Argument
Documentation 
VALUES
[list of arguments] content of the vector 
Constructor syntax
New vector(1,2,3,4);
Attributes
Argument
Documentation 
LENGTH
The length of a vector is modifiable 

zipfile
Allows to read and write zip files 
Constructor
Constructor Arguments
Argument
Documentation 
FILENAME
String: the file to read or write 
Constructor syntax
new zipfile("c:\test.zip")

Syntax operators
for
The for form is used in Javascript to write various iteration code, it can be used in its classical form like in Java,C or Javascript or in a more elaborated form to iterate on a data structure, in the other part of the documentation we will talk about mapping the data structure. Iterating or mapping a data structure is performed using the map method, each time a map method is defined on an object it is possible to use the for form on it. It is for example possible to use the for expression on a vector, a hashtable, a list, an aggregation or a class or class named by its name. The for expression can in these cases use a where clause with a boolean expression selecting the value you want to map. In the specific case where we are using a class, the for form can take additional optional options which allows to map the objects in a certain order on attributes or an order using a tree structure. To have a good idea of what you can do with the for form on object class, the best is to write an iterative update macro using the data menu of OPX2 pro and to transform this update macro in OPX2 script code. Like in Java,C or Javascript the break and continue keywords allows to interrupt an exit a "for" loop or continue to the next iteration skipping the code to execute in the loop 
Syntax examples
Classical form: for (i=0;i\<10;i++) expression
Classical form: for (var i=0;i\<10;i++) expression
OPX2 form on an object where the map method is defined: for (x in My_vector) expression
OPX2 form an an object with a where clause: for (x in My_vectore where x\>10) expression
OPX2 form on an OPXobject class: for (x in OpxActivity where x.duration\>1440 order By {"Name",{"Inverse" "Duration"} group by OpxWbsElement

global var
The global var form is an extension of the classical "var" form. In OPX2 script, the use of var declaration declares a variable locally to a script, a file , a function or a for loop depending on the location of the declaration. If you want to declare a variable visible in all scripts and all code execution during an OPX2 pro or OPX2 is session you need to use the global var declaration. If you use global var, you need to keep in mind the fact that the variable is also shared by all OPX2 is processes, if you change its value in one process -one user transaction for OPX2 is- the value of the variable will be changed for all processes -all future user transactions-. If you need to store some global information during a user session which is not shared by all processes the best is to store this information in the OPX2 context object which is not shared by all users in OPX2 Is 
Syntax examples
Global var counter = 0 ;
context.mylocalsessionvar=0;

method
Allows to define a specific method which specializes a function on an object class, it is possible to define a method on any Opx Object, any OPX2 script build in class or any user defined class. Methods can also be used to define modules or package of functions 
Syntax examples
method WhoAreyou on OpxTask () write("I am a task"+this.toString()

super
The super keyword is used to call an inherited method on an object 

try
The try form is the same than the Java try form, the catch and throw forms are used to catch errors or exceptions and to emit exceptions. One strong difference with the Java form is the way the user can define its own exceptions, as there is no inheritance scheme defined for the user in OPX2 script (we are using one in OPX2 which is not exported in the language) the simples way to emit a user exception is to throw an OPX2 script object and to catch it with its class name. For example you can define:
function Myerror(content) this.content=content;
and after write the following expression:
try { .... throw new Myerror("Error1"); } catch (Myerror e) Console.write("My error: "+e.content+ "n");
The standard OPX2 script errors are the following: Warning,SeriousCondition,Error,ParseError,StorageCondition,Error CheckType,SimpleError,Signal,SimpleConditionFormatControl, SimpleConditionFormatArguments Warn,SimpleWarning,Break.
To have more information about the signification of these error classes please consult the X3J13 Ansi specification of Common-Lisp 

whenThrow
Allows to execute a portion of code even if an error has occured during the execution. This form is usefull to free a resource to reset a flag or unlock an object. If for example you lock an object and an error occurs in your treatment, without using a trycatch statement or a WhenThrow statement which unlock the object you will leave the object locked for ever 
Syntax examples
WhenThrow {Expression *} do {Code to execute anyway}

Functions
activatetool (tool)
Simulate a click on a tool from the main toolbar 
Arguments
Argument
 
Documentation 
TOOL

String or symbol identifying the tool 
Syntax examples
"pdf".activatetool();

addAnnotation (attribute, annotation)
Add an annotation associated to an object attribute 
Arguments
Argument
 
Documentation 
ATTRIBUTE

string 
ANNOTATION

string 

addattributeChooser (class, selectedattributes)
Adds a multiple attribute chooser widget on a graphics 
Arguments
Argument
 
Documentation 
THIS

graphics 
CLASS

class from which attributes are choosen 
SELECTEDATTRIBUTES
OPTIONAL
already selected attributes 

addbackgroundcolorhandler ()
Set the callback that defines the color of the background color of a box date. The callback must have two arguments(date : the date of the box and objects : list des objects at this date. 
Arguments
Argument
 
Documentation 
THIS

graphics 

addBackgroundImageHandler (handler)
Handler to specify the background image a a grid cell 
Arguments
Argument
 
Documentation 
THIS

Table (grid object) or Gantt 
HANDLER

function 

addBarPositionHandler (handler)
Add a handler to control bar position on a gantt chart 
Arguments
Argument
 
Documentation 
THIS

gantt chart 
HANDLER

function 

addCacheInitializationProcedure (function, formula)
Allows to initialize a cache on an object at intranet startup. The function is called on a class 
Arguments
Argument
 
Documentation 
FUNCTION

JS function to be called on each object 
FORMULA
OPTIONAL
formula to filter the objects 

addcheckscript (widget, function)
Script to be called on report form when clicking save/apply button. If anything is returned instead of false, it will be displayed as an error and modifications will not be saved. 
Arguments
Argument
 
Documentation 
WIDGET

Report form 
FUNCTION

Checking function 

addcomponentproject (project)
Add a component project to a project 
Arguments
Argument
 
Documentation 
this

a project 
project

the component project to add 

addComputeAfterHandler (function)
Add a function called after cost table's computation 
Arguments
Argument
 
Documentation 
THIS

[cost table] cost table 
FUNCTION

[function] function to called after computation 

addContourHandler ()
Add a function to be called when rendering a table cell, to determine if there are borders displayed or not for this cell 
Arguments
Argument
 
Documentation 
THIS

An object grid 

addCookieItem (cookie-container, hostname, path, name, value)
Add a cookie item to a cookie container 
Arguments
Argument
 
Documentation 
COOKIE-CONTAINER

A cookie container made by makeCookieJar 
HOSTNAME

Hostname for the cookie item 
PATH

Path for the cookie item 
NAME

Name of the cookie item 
VALUE

Value of the cookie item 

addCssRule (css, name, value)
Add or Modify a rule in a cell style object. Don't forget to call applyAllCss when all modifications are done. 
Arguments
Argument
 
Documentation 
CSS

cell style object 
NAME

Name of the attribute (string or symbol) 
VALUE

value for the attribute 
Syntax examples
css.addCssRule("DRAW-CONTOUR",false);

addDiffModeContextField ()
allows to add a new context field that is usable to make diffs 

addDrawingHandler (handler)
Add a drawing handler called after having drawn a gantt chart or a curve chart 
Arguments
Argument
 
Documentation 
THIS

gantt/curve chart 
HANDLER

function 

addDuration (date, duration, calendar-name)
This method is defined on date, it allows to add duration and it returns a date. 
Arguments
Argument
 
Documentation 
DATE

Date on which to add duration 
DURATION

Integer representing the duration to add 
CALENDAR-NAME

String representing the calendar to use ("" for default calendar) 
Syntax examples
date.AddDuration(duration,"Calendar")

addextrahiddeninputlinevalue (field-name, f, profile)
Adds an extra value to the input line, that will be used when integrating timecards and creating work performed objects. 
Arguments
Argument
 
Documentation 
FIELD-NAME

Name of the actual hour field to be populated 
F

A function that will return the value to use. The this of the function will be the input line and the argument the timecard profile 
PROFILE
OPTIONAL
The timecard profile in which this will be applied. If not specified, it will be applied to all timecard profiles. 

addformulaToFilter (formula, operator)
Add a formula to a filter 
Arguments
Argument
 
Documentation 
THIS

filter 
FORMULA

formula 
OPERATOR
OPTIONAL
Operator to use (by default AND) 

addFunctionToMonitor (wildcard, package)
Add a function or a list of function to the list of function to monitor 
Arguments
Argument
 
Documentation 
WILDCARD

[string] wildcard that matches the function name 
PACKAGE

[string or null] name or a package, by default the JS package 

addGanttLinkColorHandler (gantt, handler)
Add an handler to set link color in gantts 
Arguments
Argument
 
Documentation 
GANTT

A gantt 
HANDLER

A function which will be called with 2 arguments: a gantt and a link. It must return a color or false (which will fall back to the default behavior) 

addGanttLinkLineStyleHandler (gantt, handler)
Add an handler to set link line style (dashes) in gantts 
Arguments
Argument
 
Documentation 
GANTT

A gantt 
HANDLER

A function which will be called with 2 arguments: a gantt and a link. It must return a dash style (the symbols x:line-on-off-dash or x:line-solid) or false (which will fall back to the default behavior) 

addGridPropertyHandler (handler)
Handler called when a slot of a grid is changed 
Arguments
Argument
 
Documentation 
THIS

A table (grid object) 
HANDLER

A function 

addincurredlinevaluehandlerforclass (class, f)
For a given CBS2 class, this will define the function used to return the value an incurred line has for this CBS2 if none of its extra value are of the given class 
Arguments
Argument
 
Documentation 
CLASS


F

A function that will return the value to use. The this of the function will be the input line and the argument the timecard profile 

addlegendcolorhandler ()
set the callback to add color in the legend. 
Arguments
Argument
 
Documentation 
THIS

widget (treemap-chart) 

addMakeDaemon (function, class, function-id)
Add a make daemon to the given class. This function will be called when an object is created. 
Arguments
Argument
 
Documentation 
FUNCTION

Function to be called, the this will be the object. It should take no argument. The this will be the object. 
CLASS

Class 
FUNCTION-ID
OPTIONAL
A unique identifier to your function, to avoid adding multiple time the same wrappers. It is only useful when the function argument is a closure 

addMenuItem (item)
Append the given item to the menu or to another item 
Arguments
Argument
 
Documentation 
THIS

A menu or a menu item 
ITEM

A menu item 

addMilestoneIconHandler (function)
Enables you to specify a handler that returns an icon associated to a milestone in a gantt chart 
Arguments
Argument
 
Documentation 
THIS

Gantt object 
FUNCTION

Function that is called on the milestone and returns an icon or image object 

addModifyAfterDaemon (function, class, function-id)
Add a modify after daemon to the given class. This function will be called after modifying an object. The this will be the object. 
Arguments
Argument
 
Documentation 
FUNCTION

Function to be called, the this will be the object. It should take one argument, the arglist. 
CLASS

Class 
FUNCTION-ID
OPTIONAL
A unique identifier to your function, to avoid adding multiple time the same wrappers. It is only useful when the function argument is a closure 

addModifyBeforeDaemon (function, class, function-id)
Add a modify after daemon to the given class. This function will be called before modifying an object. 
Arguments
Argument
 
Documentation 
FUNCTION

Function to be called, the this will be the object. It should take one argument, the arglist. The this will be the object. 
CLASS

Class 
FUNCTION-ID
OPTIONAL
A unique identifier to your function, to avoid adding multiple time the same wrappers. It is only useful when the function argument is a closure 

addOutputArgumentsHandler (function)
Add an handler on P&L which allows to change tree structures at output creation 
Arguments
Argument
 
Documentation 
THIS

object on which the handler will be apply (false = all, project, rttable) 
FUNCTION

function called at output creation; it should return a list of tree structures which will replace the one computed by the P&L. ex: @this = output-def function outputChangeArgs(rttable, listofcomputedArbo, unit, start-date, end-date, other-args=other arbos, value) { return new list(arbo1, arbo2, ...); } 

addPlwScriptAction (text, action, param, style)
Adds a plw script action that can be later called with doPlwScriptAction. Returns the ID to be passed to doPlwScriptAction. 
Arguments
Argument
 
Documentation 
TEXT

text that will be used in html for the link 
ACTION

function to call 
PARAM

parameters of the function 
STYLE
OPTIONAL
style for the html tag 

addPrefixHandler (grid)
Add a function to be called when computing the prefix to append to a cell of a grid 
Arguments
Argument
 
Documentation 
GRID

An object grid 

addRemoveDaemon (function, class, function-id)
Add a remove daemon to the given class. This function will be called when an object is deleted. 
Arguments
Argument
 
Documentation 
FUNCTION

Function to be called, the this will be the object. It should take no argument. The this will be the object. 
CLASS

Class 
FUNCTION-ID
OPTIONAL
A unique identifier to your function, to avoid adding multiple time the same wrappers. It is only useful when the function argument is a closure 

addRule (rule, attributes-vector)
add a rule to a ruleset, a rule can be any object that will be returned by GetApplicableRules. If the rule has been already added, the rule is updated taking into account the new matching attributes. 
Arguments
Argument
 
Documentation 
RULE

Any data structure representing a rule 
ATTRIBUTES-VECTOR

A vector containing a succession of attribute names and values or any mappable data structure (see method map on an object) 

addSuffixHandler (grid)
Add a function to be called when computing the suffix to append to a cell of a grid 
Arguments
Argument
 
Documentation 
GRID

An object grid 

addTableHideParameterHandler (function)
Add a callback that will be used to filter displayed entries when right-clicking on a table column 
Arguments
Argument
 
Documentation 
THIS

widget -> object grid 
FUNCTION

function that will be called when building the menu. It should returns a boolean and takes current tool as 1st argument. Ex : function controlAccess(tool) { return true; } grid.addTableHideParameterHandler(controlAccess) 

addTableParameterAccessHandler (function)
Add a callback that will be used to filter displayed entries when right-clicking on a table column 
Arguments
Argument
 
Documentation 
THIS

widget -> object grid 
FUNCTION

function that will be called when building the menu. It should returns a boolean and takes current tool as 1st argument. Ex : function controlAccess(tool) { return true; } grid.addTableParameterAccessHandler(controlAccess) 

addtimeinputcellsavehandler (f)
This will defined a handler called when saving time input cell 
Arguments
Argument
 
Documentation 
F

A function that will do some post processing after timecard update. The this of the function will be a list of time input cells that have been updated, their time cards will be locked. There can be only one time input cell save handler 

addTimer (delay)
Create a timer on a callable object with a delay specified in its first argument 
Arguments
Argument
 
Documentation 
DELAY
OPTIONAL
delay, default is one second 

addtoclassesnottocopy (ignore, class)
Add the given class to the list of classes not to copy 
Arguments
Argument
 
Documentation 
IGNORE

Ignored 
CLASS

[string/class/object] the class or the class name or an object of the class we want 

addtoclasseswithiconinobjectlist (ignore, class)
Add the given class to the list of classes where icons are displayed in object lists 
Arguments
Argument
 
Documentation 
IGNORE

Ignored 
CLASS

[string/class/object] the class or the class name or an object of the class we want 

addtooltiphandler ()
Add a handler to return the tooltip used for an object 

addTypeDate (representation, start-date-handler, end-date-handler, date-handler)
Add a new date type 
Arguments
Argument
 
Documentation 
REPRESENTATION

Display name of the date type 
START-DATE-HANDLER

Handler to get the start date 
END-DATE-HANDLER

Handler to get the end date 
DATE-HANDLER
OPTIONAL
mapper to draw the working periods 

addwrapperafter (function, function-key)
Adds a wrapper to the function. The function will be called after the wrapped function with the same arguments. This can only be called on a function defined as wrappable. 
Arguments
Argument
 
Documentation 
THIS

Wrapped function 
FUNCTION

Wrapper function 
FUNCTION-KEY
OPTIONAL
Function key : an identifier of the wrapper function. It is used to avoid adding the same wrappers multiple times 

addwrapperbefore (function, function-key)
Adds a wrapper to the function. The function will be called before the wrapped function with the same arguments. This can only be called on a function defined as wrappable. 
Arguments
Argument
 
Documentation 
THIS

Wrapped function 
FUNCTION

Wrapper function 
FUNCTION-KEY
OPTIONAL
Function key : an identifier of the wrapper function. It is used to avoid adding the same wrappers multiple times 

addwrapperfunction (wrapper)
Applied on a function to add it to the list of functions launched by a given wrapper 
Arguments
Argument
Documentation 
WRAPPER
Name of the wrapper 
Syntax examples
AddWrapperFunction(NewOpxAppletWrapper,"MyFunction");

agile_SYNCHRONIZE (v_selectedsprint, s_mode, b_message)
Synchronize the requirement set for the given activities 
Arguments
Argument
 
Documentation 
v_selectedSprint

Vector of activities 
s_mode

"SPRINT" : the requirements are assigned to the given activities and the given portfolio is displayed in the "Board" page. "RELEASE" : the given portfolio is displayed in the "Board Planning" page 
b_message

Display a message to the user when the synchronisation succeed 

alert (string)
Generates an OPX2 script alert which contains the string passed as argument. 
Arguments
Argument
 
Documentation 
STRING

Label of the alert 

alignCellsBottom (ignore, cells)
Generic method that aligns two or more cells on the bottom. 
Arguments
Argument
 
Documentation 
IGNORE

ignore 
CELLS

selected cells 

alignCellsLeft (ignore, cells)
Generic method that aligns two or more cells on the left. 
Arguments
Argument
 
Documentation 
IGNORE

ignore 
CELLS

selected cells 

alignCellsRight (ignore, cells)
Generic method that aligns two or more cells on the right. 
Arguments
Argument
 
Documentation 
IGNORE

ignore 
CELLS

selected cells 

alignCellsTop (ignore, cells)
Generic method that aligns two or more cells on the top. 
Arguments
Argument
 
Documentation 
IGNORE

ignore 
CELLS

selected cells 

append (string, string)
This method allow to add the given file to the given zipfile. 
Arguments
Argument
 
Documentation 
STRING

The path of the file to add 
STRING

The name of the file will have in the zip file. 
Syntax examples
[zipfile].append("c:\temp\test.txt","test.txt");

appenddir (string, boolean)
This method allow to add the given directory to a zipfile. 
Arguments
Argument
 
Documentation 
STRING

The path to add. All files and subdirectorires will be recursively added. 
BOOLEAN
OPTIONAL
Include the root directory in the zip file or just all the files from this directory. 
Syntax examples
[zipfile].appenddir("c:\temp")

appendmenufromtree (parent-menu-item, class, formula-filter, label-formula, entry-points, menu-action, selected-points, navigation-reminder, show-icons, selected-parents)
Same as generateMenuFromTree but inserts the tree menu under an existing menu item 
Arguments
Argument
 
Documentation 
THIS

widget = java menu 
PARENT-MENU-ITEM

menu item under which tree will be inserted 
CLASS

tree structure 
FORMULA-FILTER

formula used to filter elements to be inserted 
LABEL-FORMULA

formula used to compute menu labels 
ENTRY-POINTS

list of elements posing as menu heads or false 
MENU-ACTION

Action done on click over a menu item 
SELECTED-POINTS
OPTIONAL
Element or vector of elements that need to appear as selected 
NAVIGATION-REMINDER
OPTIONAL

SHOW-ICONS
OPTIONAL
if true class icons will be shown 
SELECTED-PARENTS
OPTIONAL
if true parents of a selected element will be too 

appendToolItem (image, desc, callback, issensitive)
This method allows to add a subitem to a toolbar tool. Returns a script tool object. 
Arguments
Argument
 
Documentation 
IMAGE

The icon of the menu entry, or false 
DESC

The message string displayed for this menu entry 
CALLBACK

Script function to call when clicking on this entry 
ISSENSITIVE
OPTIONAL
script function called to check if the tool is displayed or not 
Syntax examples
"PDF".appendToolItem("OpxImage".get("MyImage"),"test","callback");

appletTools (applet)
return list of applet tools 
Arguments
Argument
 
Documentation 
APPLET

current applet 

applicableMethod (object)
Indicate if a method is defined for one specific object 
Arguments
Argument
 
Documentation 
OBJECT

Object the method should apply on 

applyAllCss ()
Apply all modified CSS to all loaded reports 
Syntax examples
applyAllCss()

applyCellProperties (cell)
Apply cell properties 
Arguments
Argument
 
Documentation 
CELL

cell 

applyDMRs ()
Return a new cons object(see example) modified by the DMRs @param class-and-arglist : a list with car as symbol of the class and cdr the plist on which the DMRs are applied ex : (TIME-CARD-BASE:TIME-CARD-LINE :TIME-CARD #{TIME-CARD-BASE:TIME-CARD@118074606999:16-DEC-2019} :WS #{KERNEL-ORDO:TASK@4d55fc68ac3b9a3b289efb167b0f7954})) 

applyfunction ()
Apply the function given as this with all the arguments given. The last argument must be a list that will be passed as arguments to the function. 

applyTimeZone (date, tz-name)
Get the local date in another time zone. If the timezone does not exist, the UTC time is returned. 
Arguments
Argument
 
Documentation 
DATE

date 
TZ-NAME

A timezone name such as "America/Los_Angeles" 

askforcompletion ()
Sends a prompt to an LLM to get a completion 

atbmod.INSTANCECLICKHANDLER (field, workbook, reporting)
Get the workbook template 
Arguments
Argument
 
Documentation 
field

[object attribute] object attribute 
workbook

[excel-workbook] workbook version 
reporting

[list] list of reportings where the workbook was published 

atbmod.INSTANCEICONHANDLER (workbook)
Get the image for the click handler 
Arguments
Argument
 
Documentation 
workbook

[excel-workbook] workbook version 
Syntax examples
var IconHandler = function() {return instanceIconHandler(workbook_version);

atbmod.MASKREGULAREXPRESSION ()
Sanitize string wrt to regular expression 
Syntax examples
var string str = MaskRegularExpression(somestring);

atbmod.MATCH_DATA (workbook, popup, create)
Trigger match date on the provided workbook 
Arguments
Argument
 
Documentation 
workbook

[excel-workbook] workbook version 
popup

[boolean] display the match data popup 
create

[boolean] create the missing dim_values if needed. Usually set to true 

attributeExists (attribute)
Test if an attribute exists on a class 
Arguments
Argument
 
Documentation 
THIS

class 
ATTRIBUTE

attribute 

attributeNameIsValidInFormulae (string)
chech if an attribute name is valid in a formula 
Arguments
Argument
 
Documentation 
THIS

ignore 
STRING

attribute name 

attribute_GETSLOT (vclass, attribute)
Gets the Objectattribute corresponding to a given attribute and a class 
Arguments
Argument
 
Documentation 
VCLASS

a class (symbol,objectclass or string) 
ATTRIBUTE

an attribute name or an attribute keyword 

attribute_ISLOCKED (attribute)
Return a boolean value indicating if the attribute is updatable on the current object 
Arguments
Argument
 
Documentation 
THIS

an opxObject 
ATTRIBUTE

an attribute name or an attribute keyword or an objectAttribute 

attribute_ISREADONLY (sattribute, sclass)
Returns true if an attribute is read-only for a given class 
Arguments
Argument
 
Documentation 
SATTRIBUTE

an attribute name 
SCLASS

a class name 

attribute_POSSIBLEVALUES (vclass, attribute)
Get the possible values in the current language corresponding to a given attribute on a class 
Arguments
Argument
 
Documentation 
VCLASS

a class (symbol,objectclass or string) 
ATTRIBUTE

an attribute name 

attribute_SLOTTYPE (vclass, attribute)
Get the slot type corresponding to a given attribute and a class 
Arguments
Argument
 
Documentation 
VCLASS

a class (symbol,objectclass or string) 
ATTRIBUTE

an attribute name 

bindAppletVariable (variable, value, persistent)
Allows to transform a lisp parameter or js global var in a variable where the value is specific to each applet. You need to use this function to declare the variable in a script, and you can use later or js binding like myvar=value; or use again bindappletvariable inside a transaction to bind locally the value to the applet 
Arguments
Argument
 
Documentation 
VARIABLE

String or symbol created with new symbol(string) 
VALUE

Initial value for the variable that is shared by all applet or value specific to the applet inside a transaction 
PERSISTENT
OPTIONAL
boolean, declare it the value or the variable should be stored in a user parameter set 

bot.BREAKDOWNACTIVITY ()
Function to be used by the chatbot to breakdown an activity into subtasks. 
Syntax examples
bot.breakdownActivity();

bot.CREATERISKSACTION ()
Function to be used by the chatbot to create risks. 
Syntax examples
bot.createRisksAction();

botfailure (user, date, query, answer, type)
Signals a bot failure 
Arguments
Argument
 
Documentation 
THIS

Ignored 
USER

The user the bot is having the conversation with 
DATE

The time at which the error occurs 
QUERY

The query at the origin of the bot message 
ANSWER

The answer given by the bot 
TYPE

The failure type 

breakdownactivityfromdesc (actdesc)
Breaks down an activity into subtasks, from a description of the activity and its project. Returns a string describing the WBS and a tree representing it. 
Arguments
Argument
 
Documentation 
THIS

String describing the project of the activity 
ACTDESC

String describing the WBS to generate (example: development of a new rocket engine that would make us capable of reaching planet mars) 

broadcaststream (streams)
Creates a single output stream from a list of other output streams. Bytes and chars written to this stream will be broadcasted to all provided streams. 
Arguments
Argument
 
Documentation 
THIS

Ignored 
STREAMS

The streams to broadcast to 

bulk_create_objects (function)
create objects and save treansactions to the database in parallel 
Arguments
Argument
 
Documentation 
FUNCTION

function or closure called 

bulk_create_references (reference-name, project-filter-formula, template, other-reference-attributes, nbthreads, save-every)
Creates references on a list of projects 
Arguments
Argument
 
Documentation 
REFERENCE-NAME

Name of the new reference (old will be removed) 
PROJECT-FILTER-FORMULA
OPTIONAL
filter on projects, by default all 
TEMPLATE
OPTIONAL
reference template 
OTHER-REFERENCE-ATTRIBUTES
OPTIONAL
property list of attributes for other properties of the reference to create 
NBTHREADS
OPTIONAL
number of threads used (by default 4) 
SAVE-EVERY
OPTIONAL
save in datavase every N reference created (by default 50) 

call (arguments)
This function allows to call a function,macro or formula on an object and pass various arguments 
Arguments
Argument
 
Documentation 
ARGUMENTS

[list of arguments] arguments of the [for] form 

callalert (object, alert, catch-cancel)
Call an alert on an object 
Arguments
Argument
 
Documentation 
object

The object to call the alert on 
alert

The alert to call 
catch-cancel

If this argument is false, the cancel-transaction-in-alert error is not catched 

callV2 (namespace, name, arguments)
Allows to call a script V2 function from script V1. Warning, this must used carefully as datamodels usually are not compatible between the two versions. 
Arguments
Argument
 
Documentation 
NAMESPACE

Namespace of the function to call 
NAME

Name of the function to call 
ARGUMENTS

Vector of arguments (including the this) to pass to the function. 

callwithbinding (name, value, arguments)
Set the variable given as the first argument to the value given by the second only for the call of the given function (this), which is called with the given arguments (you have to specify this). Value of the variable is fetched with getDynamicVariable 
Arguments
Argument
 
Documentation 
THIS

The function to call 
NAME

Name of the variable to bind (value will be fetched with getDynamicVariable) 
VALUE

Value of the variable 
ARGUMENTS

Arguments (this included) of the function to call 

callWithCache (function, args)
Call a function and cache the result during current transaction 
Arguments
Argument
 
Documentation 
FUNCTION

(this) function to call 
ARGS

Function arguments 

callWithCheckLoop (args)
Call a function and test if it is in an infinite loop, returns undefined if yes 
Arguments
Argument
 
Documentation 
ARGS

Function arguments 

callWithCurrentPageObject (current-object, arguments)
Bind the current page object in the scope of the function called 
Arguments
Argument
 
Documentation 
THIS

The function to call 
CURRENT-OBJECT

New current object 
ARGUMENTS

Arguments (this included) of the function to call 

callwithlanguage (language, arguments)
Call a js function in a specific language (different from current user's one) 
Arguments
Argument
 
Documentation 
THIS

The function to call 
LANGUAGE

language 
ARGUMENTS

Arguments (this included) of the function to call 

callwithlock (function, lock-id, args)
Call a function with a process lock 
Arguments
Argument
 
Documentation 
FUNCTION

(this) function to call 
LOCK-ID

id used to identify the lock 
ARGS

Function arguments 

callWithLoopChecking (function, loop-flags, loop-eq, args)
Call a function and use loop flags to figure out if we are in an infinite loop 
Arguments
Argument
 
Documentation 
FUNCTION

(this) function to call 
LOOP-FLAGS

flags use to know if we already call the function with the same "signature" 
LOOP-EQ

function to test if flags are =; if not provided it is eq 
ARGS

Function arguments 

callwithoutsmp (callable)
Does the same thing than call but desactivate SMP behavior inside the call 
Arguments
Argument
 
Documentation 
CALLABLE

Callable object 

cancelalert ()
Cancel the current alert. 

canEditPlanContent (plan)
Returns true if the content of the simulation plan can be modified by a user 
Arguments
Argument
 
Documentation 
PLAN

The studied plan 

cellicon (cell)
change cell icon depending on the type of the cell 
Arguments
Argument
 
Documentation 
cell

selected cell 

changeAllocation (line, allocation)
change allocation zone of a selected line container 
Arguments
Argument
 
Documentation 
LINE

Selected line cell 
ALLOCATION

Symbol of new allocation (header, footer ...) 

changeCellStyle (cell, cs)
Change style sheet (css) of a selected cell 
Arguments
Argument
 
Documentation 
CELL

selected cell 
CS

style sheet 

changeClassOnTableCell (widget, data, cdata)
Insert object into a report 
Arguments
Argument
 
Documentation 
WIDGET

widget 
DATA

ignore 
CDATA

ignore 

changeSimulationStatus (simulation, new-status, batch)
Changes the simulation status, with immediate save even if inside a batch 
Arguments
Argument
 
Documentation 
SIMULATION

the simulation 
NEW-STATUS

the new status to set 
BATCH

set to true if inside a batch. Default is nil 

char (charcode)
Returns the char associated to the given char code 
Arguments
Argument
 
Documentation 
CHARCODE

The character code 

charcode (charcode)
Returns the code associated to the given char 
Arguments
Argument
 
Documentation 
CHARCODE

The character 

checkattributesfordatabaseexport (target)
Checks that all import/export attributes that are associated to an import/export target that are not ignored during export have a valid database column name. Also checks that all database column names are used only once. This check is performed before exporting to database. Returns true if everything is ok, issues warnings and returns false otherwise. 
Arguments
Argument
 
Documentation 
TARGET

object, the opxImpexTarget instance whose attributes will be checked 

checkContextUpdate ()
Checks whether the values of the fields of the bookmark that can be restored are equal to those in the current context 
Arguments
Argument
 
Documentation 
THIS

Bookmark to check the context against 
Syntax examples
myBookmark.checkContextUpdate();

checkformula (formula, type, class)
Returns true if the formula has a correct syntax. 
Arguments
Argument
 
Documentation 
FORMULA

String, the formula to check 
TYPE

String, the return type of the formula : STRING, DATE, DURATION, BOOLEAN, NUMBER 
CLASS

Oject class on which the formula is 

checkFormulaAndSymbolicAttribute (style, tablecell)
Check formula and symbolic attribute 
Arguments
Argument
 
Documentation 
STYLE

L2 style 
TABLECELL

table cell 

checkimpextargetdatamodel (target, message)
Checks that the table in the target database is consistent with the import/export format definition. If not, alters the table. 
Arguments
Argument
 
Documentation 
TARGET

object, the opxImpexTarget instance whose attributes will be checked 
MESSAGE

string, a message 

checkobjectloaded ()
Checks that the object given as this is loaded in the current slave, and loads it if necessary 

checkojssyntax ()
Check the syntax of an ojs document. Return "" on success, and an error string on failure 

checkUScriptSyntax (cell)
Check whether user script syntax is correct or not 
Arguments
Argument
 
Documentation 
CELL

Cell containing user script or user script (string) 

chooseFile (title, pattern, directory, save)
Allows you to choose a file on the client (Web or OPX2 pro) 
Arguments
Argument
 
Documentation 
TITLE

String title of the choose file dialog 
PATTERN
OPTIONAL
regular expression allowing to filter the file to choose default is "*.*" 
DIRECTORY
OPTIONAL
string or pathname, path of the directory where the file is chosen 
SAVE
OPTIONAL
boolean (default value is false) indicating if the file is choosen for a save action 

classesConnectedByKernel (class-a, class-b)
chech if two classes are connected by kernel so object<classA>.get(classB) can return something 
Arguments
Argument
 
Documentation 
THIS

ignore 
CLASS-A

Class A 
CLASS-B

Class B 

classtomirror ()
In diff mode, define the class to use as a mirror class for the diff mode. 
Arguments
Argument
 
Documentation 
THIS

Object 

clear ()
This function allows to clear a data structure 

clearAll (rulesettable)
Clear all rule from the rule table. 
Arguments
Argument
 
Documentation 
RULESETTABLE

The rule table 

close ()
Allows to close a dataset or a list or vector of datasets 

closure (function, arguments)
Creates a closure callable object that will append the arguments passed to the closure to the arguments contained in the closure, and call the function contained in the closure with these arguments. This construct allows to emulate closures in Planisware script V1, it is now obsolete with the function construct in script V2. 
Arguments
Argument
 
Documentation 
FUNCTION

Function object that will be called 
ARGUMENTS

Variable arguments list, list of the arguments that will be concatenated to the closure call arguments 

cmsHasCheckedOutModification ()
Returns t if a checked out file has been modified and saved without being checked in yet. 
Arguments
Argument
 
Documentation 
THIS

A (kernel) document 
Syntax examples

collaborationIcon ()
This method returns on an object who contains collaboration data 

collectSimulationDependencies (formula)
Returns the current simulation attributes used in formula 
Arguments
Argument
 
Documentation 
formula

the studied formula 

colorToBgr ()
convert an RGB color to BGR 
Arguments
Argument
 
Documentation 
THIS

color 

commit ()
Generic method that commit a set a changes, it is implemented on tab-report to save the changes of the underlying pro report 

compareAttributesFromString (object, attribute-string, compress)
Compare the attributes values from the string generated by saveAttributesAsString to the current values 
Arguments
Argument
 
Documentation 
OBJECT

object to compare the attributes on 
ATTRIBUTE-STRING

string describing the attributes and their values, should be generated by saveAttributesAsString 
COMPRESS
OPTIONAL
default nil. Compress the resulting string 

compileAllScripts ()
This function allows to compile all OPX2 script existing in your OPX2 environment in a Fasl binary file you can load up at startup time. Compiling OPX2 script an result in a significant performance improvement for big OPX2 script programs. By default this function is not accessible to standard customer, one should purchase a specific compiler license to perform such operation. Please ask our sales representative to know the conditions to acquire such a licence. You have to keep in mind that in 98% of the case, compiling OPX2 script is not necessary because the language execution is fast compared with the transaction performed with it. 

compileojs ()
compile and run an ojs document. The document isn't recompiled if unchanged 

compilescripts (args_vector)
This method allows you to compile selected OPX2 script, existing in your OPX2 environment, into a fasl binary file, which you can then load when you start OPX2. Compiling OPX2 scripts improves performance significantly for large OPX2 script programs. This method does not come as standard, you need to purchase a compiler license to perform such operations. Please ask our sales representative how to acquire the license. You have to keep in mind that in 98% of cases, compiling OPX2 script is not necessary because the language execution is fast compared with the transaction performed with it. 
Arguments
Argument
 
Documentation 
ARGS_VECTOR

a vector object containing scripts list 
Syntax examples
[pathname].compilescripts([vector of script]);

computeCopyArglist (object, arglist)
Script that will give values that will be used as arglist when copying an object 
Arguments
Argument
 
Documentation 
OBJECT

Object 
ARGLIST

Args that will differ from the copy 

computeDatesAndCosts ()
Method that computes dates and costs on passed object (this) 
Arguments
Argument
 
Documentation 
THIS

A project, an object stored in a project or the context (=current portfolio) 
Syntax examples
project.computeDatesAndCosts();

computeload (resource, value, time-unit)
Convert the given load from the given time unit to the resource time unit 
Arguments
Argument
 
Documentation 
RESOURCE

We will convert the load into this resource time unit 
VALUE

The load value to convert 
TIME-UNIT

The load value unit 

computerule (rule, computecategory, listofkoobj)
Compute Rule 
Arguments
Argument
 
Documentation 
RULE

Rule relation 
COMPUTECATEGORY

Compute category percentage value. Default is false 
LISTOFKOOBJ

Vector list of KO Objects 
Syntax examples
var (totalKO, totalCases) = computeRule(this: proj , rule , computeCategory : rule); 

concatenateFormulae (f1, f2, operator)
concatenate 2 formulae using an operator 
Arguments
Argument
 
Documentation 
F1

formula 1 
F2

formula 2 
OPERATOR
OPTIONAL
Operator to use (by default AND) 

convertEmailTextForSending (html-content)
Converts email text content to regular HTML. Returns the new text if modifications were made, the old text otherwise, and a boolean indicating if there are changes. 
Arguments
Argument
 
Documentation 
HTML-CONTENT

html text to analyze 

convertl1styletol2 (l1style)
Change cells' class into the target class 
Arguments
Argument
 
Documentation 
l1style

Styles 

convertReceivedEmailText (html-content, inline-attachments-info, object)
Converts email text content to Planisware HTML (for example for inline images using CID). Returns the new text if modifications were made, the old text otherwise, and a boolean indicating if there are changes. 
Arguments
Argument
 
Documentation 
HTML-CONTENT

html text to analyze 
INLINE-ATTACHMENTS-INFO

List of hashtables containing the needed id and path of each inline attachment 
OBJECT

object to which the text is related (document created for the inline attachment will be connected to it 

convertToUTF8 ()
This function allow you to convert a string into its UTF-8 representation when Planisware is running in utf-8 mode. If Planisware is not running in utf-8 mode (as defined in your database.ini) this function does nothing. 
Syntax examples
"t?t?".convertToUTF8();

copyFile (destination)
Copies a file 
Arguments
Argument
 
Documentation 
DESTINATION

string: destination path 

copypropborder (dts, stc)
Copy the border properties between two cell propeties objects. 
Arguments
Argument
 
Documentation 
DTS

Destination 
STC

Source 

copyreportelement (elem, target)
Copy selected report element to the selected target, can be used to copy some report parts 
Arguments
Argument
 
Documentation 
ELEM

the element to copy 
TARGET

the target on which the copy will be made 

copytoclipboard ()
Copies a string to the clipboard 
Arguments
Argument
 
Documentation 
THIS

A string to copy 

correctString (language, old, new)
Corrects a string that has not been translated in the application in one specific language. This function must be used with care, all instances of the string will be changed in the application. If you do any correction, we recommend to contact the OPX2 development team to check if your correction is valid. 
Arguments
Argument
 
Documentation 
LANGUAGE

String The language where the correction is applied 
OLD

string the string that has to be modified 
NEW

String the new string that replaces the old one 

count ()
Return the number of objects in the hashtable given as this. 
Arguments
Argument
 
Documentation 
THIS

An hashtable 

countCSVLines (function, pathortarget, formatorhasheader, falseorcsvseparator, falseorstringdelimiter)
Counts the lines of a CSV file. 
Arguments
Argument
 
Documentation 
FUNCTION

JS function name, or a symbol bound to a function that takes a plist column_key->field_value, the line number (starting from 1) and the number of columns read on the line 
PATHORTARGET

path to the CSV file (as a string or filename) or an ImpexTarget 
FORMATORHASHEADER

boolean or ImpexFormat; if true the first line of the CSV will be used to generate the keys of the plist provided to the mapper otherwise the keys will be :COLUMN_1, :COLUMN_2, ..., :COLUMN_p. 
FALSEORCSVSEPARATOR

character or string (in which case only the first char is used), or false to use the ImpexFormat value or default value (comma) 
FALSEORSTRINGDELIMITER

character or string (in which case only the first char is used), or false to use the ImpexFormat value or default value (double quote) 

counthash ()
Return the number of elements stored in a hashtable 
Arguments
Argument
 
Documentation 
THIS

A hashtable 

createFormulaAttribute (name, class, formula)
This functions allows to add a formule as an attribute on a class 
Arguments
Argument
 
Documentation 
NAME

Attribute name as displayed for instance in column headers 
CLASS

Class on which the attribute should be created 
FORMULA

Formula evaluated to compute the attribute value 
Syntax examples
createFormulaAttribute("Value", "OpxProject", myFormula);

createL1StyleFromExtractedPane (ep)
create l1-style from extracted-pane 
Arguments
Argument
 
Documentation 
EP

extracted pane 

createL2Style (cell, name)
Create l2 style 
Arguments
Argument
 
Documentation 
CELL

Cell 
NAME

Table cell name 

createMeeting (team-connector, nom-meeting, meeting-notes, timezone, location, meeting-from, meeting-to, organizer)
create meeting from plw to teams 
Arguments
Argument
 
Documentation 
TEAM-CONNECTOR

channel belong to this team-id 
NOM-MEETING

the channel wich we try to find the folder name of 
MEETING-NOTES

notes 
TIMEZONE

timezone 
LOCATION

location 
MEETING-FROM

meeting-from 
MEETING-TO

meeting-to 
ORGANIZER

organizer 

createMenuItem (string, script)
Create a new entry for a menu. It's not added without calling addmenuitem 
Arguments
Argument
 
Documentation 
THIS

Anything 
STRING

String, the label of the menu entry 
SCRIPT

String, the script called when clicking on this menu entry 

createPngOverlay ()
create an image which is the superposition of all the images given as argument and returns it 
Arguments
Argument
 
Documentation 
THIS

Vector of images 

createRankingAttribute (class, attribute, filter, ranking-attribute-name, comment, documentation, decrease-order, local-to-project)
Allows to create a ranking attribute from a score attribute and a filter formula, the ranking attribute give the position of the object given the value of the score attribute 
Arguments
Argument
 
Documentation 
CLASS

[string] class name 
ATTRIBUTE

[string] name of the score attribute 
FILTER

[string] filter formula 
RANKING-ATTRIBUTE-NAME

[string] name of the ranking attribute 
COMMENT
OPTIONAL
comment of the ranking attribute 
DOCUMENTATION
OPTIONAL
documentation of the ranking attribute 
DECREASE-ORDER
OPTIONAL
boolean that indicates if ranking is computed in decrease order 
LOCAL-TO-PROJECT
OPTIONAL
boolean that indicates if ranking is computed locally to one project 

createRawHTMLField (attributename, realattributename, readonly)
Create a new field on class class, called attribute name which mirrors the rich text content of real attribute name but displayed it in raw html form 
Arguments
Argument
 
Documentation 
THIS

A string or a class, the class the attribute is to be created on 
ATTRIBUTENAME

Name of the attribute to create 
REALATTRIBUTENAME

Name of the attribute to read/write the rich text content from/to 
READONLY
OPTIONAL
Boolean, Allow modifying the attribute, by default the attribute is created read/write 
Syntax examples

createsamplewbsdesc ()
Generates a WBS from a description. Returns a string describing the WBS and a tree representing it. 
Arguments
Argument
 
Documentation 
THIS

String describing the WBS to generate (example: development of a new rocket engine that would make us capable of reaching planet mars) 

createScriptAlert (type, class, alert_id, function, slots)
Create an alert in dataset unbound that behaves like a regular Planisware alert. The function returns the created alert. 
Arguments
Argument
 
Documentation 
TYPE

The type of the alert, can be : "make" "remove" "modify-after" "modify-before" 
CLASS

The class of the alert 
ALERT_ID

The id of the alert, used to only create it once 
FUNCTION

The script callback function. The this will be the modified object. For modify-after and modify-before alerts, the function must take one argument, the arglist 
SLOTS
OPTIONAL
A vector of slots on the class (strings or symbols). If this is specified when creating a modify-before or modify-after alert, the alert will only be called on modifications of these slots. In other cases, the argument is ignored. If one or more slot do not exist, the function will raise an error. 

createsequencegenerator (index, start)
Create a sequence generator based on key given as a string 
Arguments
Argument
 
Documentation 
THIS

object 
INDEX

string used as key for the sequence generator 
START

initial incrementation value 

createSlackChannel (slack-connector, workspace-id, nom-channel, desc-channel, owner, members)
Create new channel in Slack interface 
Arguments
Argument
 
Documentation 
SLACK-CONNECTOR

connector with slack information 
WORKSPACE-ID

workspace where to sendcreate the new channel 
NOM-CHANNEL

name of the new channel 
DESC-CHANNEL

descritpion of the new channel 
OWNER

user who is creating the new channel 
MEMBERS

members of the new channel 

createSlackMessage (conversation, message-content, owner, list-attachments)
Send message in Slack channel 
Arguments
Argument
 
Documentation 
CONVERSATION

channel where to send newly created message 
MESSAGE-CONTENT

content of message 
OWNER

owner of message 
LIST-ATTACHMENTS

list of potential attachments 

createsvgImage (filename, width, height)
create a Planisware image from a svg file (by default stored in undefined) 
Arguments
Argument
 
Documentation 
this

unused 
filename

path to the svg file on the server 
width
OPTIONAL
width of the generated image 
height
OPTIONAL
height of the generated image 

createwbsfromdesc (activitybuilder, desc, parsed)
Builds a WBS from a string description. 
Arguments
Argument
 
Documentation 
THIS

Parent WBS Element below which we create the WBS 
ACTIVITYBUILDER

A function (parentactivity, name, duration, isatask) -> activity 
DESC

A description as returned by createsamplewbsdesc 
PARSED
OPTIONAL
the second returned value of createsamplewbsdesc 

create_LINK (file, pred, succ, ignore, lag, type)
Create a link based on parameters given as arguments 
Arguments
Argument
 
Documentation 
FILE

A file 
PRED

The predecessor activity 
SUCC

The successor activity 
IGNORE

Boolean value for Ignore property on link 
LAG

A lag value 
TYPE

Link type 

create_REFERENCE_WITH_PARAMETER (refname, refdesc, prjobj, budgeted, actexceptionformula)
Creates a baseline, based on configurable parameters 
Arguments
Argument
 
Documentation 
REFNAME

[String] Baseline name 
REFDESC

[String] Baseline description 
PRJOBJ

[Object] Targeted project 
BUDGETED

[Boolean] Should be true for Approved baseline 
ACTEXCEPTIONFORMULA

[String] Filter on activities for partial baseline 
Syntax examples
var newRef = plw.create_reference_with_parameter(ReferenceName,context._PM_AA_S_REF_DESC,prj,Context._PM_AA_B_APPROVED_BASELINE,actExceptionFormula);

crtmod.DISPLAY_RATE_INPUT_LOAD_ARRAY (useglobalrate)
Display a load array view in the rate input screen 
Arguments
Argument
 
Documentation 
USEGLOBALRATE

[Boolean] 
Syntax examples
namespace crtMod; display_rate_input_load_array(false);

cstmod.ADDCLASSTOTRANSMITTALAPPROVELIST (objclass)
Display the Send transmittal button on any report of the given class when shown as a popup. Default behavior is to show the button for classes with an object type displayed in Configuration 
Arguments
Argument
 
Documentation 
OBJCLASS

[Object class] 
Syntax examples
cstmod.addClassToTransmittalApproveList(plc._CRT_PT_CONTRACT_OBJECT)

cstmod.ADDCLASSTOTRANSMITTALDENYLIST (objclass)
Prevent any report of the given class from displaying the Send transmittal button when shown as a popup. Default behavior is to show the button for class with an object type displayed in Configuration. 
Arguments
Argument
 
Documentation 
OBJCLASS

[Object class] 
Syntax examples
cstmod.addClassToTransmittalDenyList(plc._BM_PT_BUDGET_STYLE_TABLE)

cstmod.ADDREPORTTOTRANSMITTALDENYLIST (rep)
Prevent the given report from displaying the Send transmittal button when shown as a popup. 
Arguments
Argument
 
Documentation 
REP

[Report] 
Syntax examples
cstmod.addReportToTransmittalDenyList(plc.report.get("_RB_REP_POP_NEWTABLE_CLASS"))

cstmod.REMOVECLASSFROMTRANSMITTALAPPROVELIST (objclass)
Return to the default behavior which is to show the button for classes with an object type displayed in Configuration. 
Arguments
Argument
 
Documentation 
OBJCLASS

[Object class] 
Syntax examples
cstmod.removeClassFromTransmittalApproveList(plc._CRT_PT_CONTRACT_OBJECT)

cstmod.REMOVECLASSFROMTRANSMITTALDENYLIST (objclass)
Return to the default behavior which is to show the button for classes with an object type displayed in Configuration. 
Arguments
Argument
 
Documentation 
OBJCLASS

[Object class] 
Syntax examples
cstmod.removeClassFromTransmittalDenyList(plc._BM_PT_BUDGET_STYLE_TABLE)

cstmod.REMOVEREPORTFROMTRANSMITTALDENYLIST (rep)
Return to the default behavior is which depends on the report class 
Arguments
Argument
 
Documentation 
REP

[Report] 
Syntax examples
cstmod.removeReportFromTransmittalDenyList(plc.report.get("_RB_REP_POP_NEWTABLE_CLASS"))

csvprintattribute (stream, value, class, att)
Used to export an internal value printed in the type of the slot with the current format 
Arguments
Argument
 
Documentation 
STREAM

stream 
VALUE

internal value 
CLASS

attribute class 
ATT

attribute used to print the value in the correct type 
Syntax examples
lispstream.cvsprintattribute(28026720 , plc.transaction.name, #DATE#);

csvwriteseparator (stream)
Used to write the csv separator 
Arguments
Argument
 
Documentation 
STREAM

stream 
Syntax examples
 lispstream.csvwriteseparator();

csvwritevalue (stream, value)
Used to escape some forbidden char and write string in a stream 
Arguments
Argument
 
Documentation 
STREAM

stream 
VALUE

string to write 
Syntax examples
lispstream.csvwritevalue( dataset_name );

currentopx2user ()
This function returns the current Opx2 user without having to do a request on the context 
Syntax examples
currentopx2user() returns #{GENERIC-IO:OPX2-USER\@\@\@\@SITE:INTRANET}

currentpageobject ()
Returns the object used in the current page 

currentpageobjectonb (id)
Returns current page object's onb 
Arguments
Argument
 
Documentation 
ID

(Useless argument) 

currentProjectTypes ()
Returns the list of project types active in the current environment. It takes into account the project types of the current page or the current object if the current object is a project 

curveTypeDefaultValue (curve-type)
Return the default value relating to a curve type for example 0.0d, -1, "" 
Arguments
Argument
 
Documentation 
CURVE-TYPE

time unit 

curvetypetype ()
return base type of a curve type (number, string, ...) 
Arguments
Argument
 
Documentation 
THIS

curve type 

curve_FETCH_ON_LABEL (curvelabel)
Returns the correct curve based on curve label 
Arguments
Argument
 
Documentation 
CURVELABEL

Label of the curve 

curve_FETCH_ON_NAME (curvename)
Returns the correct curve based on curve name 
Arguments
Argument
 
Documentation 
CURVENAME

Name of the curve 

curve_LABEL_CURRENT_LANGUAGE ()
Returns the curve label 

datevector (time-unit, startdate, enddate)
Fills a vector with dates from startdate to enddate by timeunit 
Arguments
Argument
 
Documentation 
THIS

An empty vector 
TIME-UNIT

A time unit 
STARTDATE
OPTIONAL
Start date 
ENDDATE
OPTIONAL
End date 
Syntax examples
var v = new vector(); return v.datevector("YEAR", new date("01/01/2016"), new date("01/01/2020"));
Return  :  [Array] : #(#01/01/16# #01/01/17# #01/01/18# #01/01/19# #01/01/20#)

debugCBreak (level, message, args)
Issue a break if a certain debug level is reached for a module 
Arguments
Argument
 
Documentation 
THIS

Module 
LEVEL

minimum level needed to display the message 
MESSAGE

message -> Format directive 
ARGS

arguments used for the format 

debugLog (level, message, args)
Display a message in the log if a certain debug level is reached for a module 
Arguments
Argument
 
Documentation 
THIS

Module 
LEVEL

minimum level needed to display the message 
MESSAGE

message -> Format directive 
ARGS

arguments used for the format 

decodedateformat ()
Create a new date format according to the description string.
Specification :
Any part of dates separated by a date separator. part of dates can be like :
* yy : Year in 2 digits
* yyyy : Year in 4 digits
* qq : Quarter in 2 digits
* m : Month in 1 digit
* mm : Month in 2 digits
* mmm : Months in 3 letters
* mmmm : Full name of the month
* w : Number of the week
* n : Number of the day in week (1-7)
* d : Day in 1 digit
* dd : Day in 2 digits
* ddd : Day of the week in three letters
* dddd : Full day of the week
* h : Hour in one digit
* hh : Hour in 2 digits
* i : Minute in 1 digit
* ii : Minutes in 2 digits
* s : Seconds in 1 digit
* ss : Seconds in 2 digits
* AM/PM : AM or PM
date separators can be either :
* any text between " (including numbers)
* any suite of characters excluding the ones above, except if they are escaped by a \
For month and day, you can use :
* ddd -> day in lower case
* Ddd -> day with first letter upcased
* DDD -> day in upper case

decodenumberformat ()
Create a new number format according to the description string.
Specification : We read a sequence like this : unitbefore entire part decimal separator decimal part unit after
Only the entire part is mandatory.
The entire part must be like this #_### where _ can be , or . or a space and will be used a thousand separator The decimal separator can be . or , The decimal part can be any number of 0 or the sequence max for maximum precision The units can be any sequence between "" or the $ sign You can add a prefix K or M to define exponents number formats
Example : 
####.00"euro" will print 1 234.56euro

defaultworkflowmessage (pt, role)
Returns the default workflow message for the given process transactions and role 
Arguments
Argument
 
Documentation 
PT

Process transaction 
ROLE

Role : must be one of consulted, informed, responsible, accountant 

defineAttributeCategory (pattern, category, priority)
Method on a class that helps to define a category name on an attribute pattern 
Arguments
Argument
 
Documentation 
PATTERN

[string] wildcard string that matches or the internal representation or the description of the attribute 
CATEGORY

[string] multilingual strings that defines the attribute category 
PRIORITY

[integer] priority that helps to solve conflicts between attribute categories 

defineAttributeModule (pattern, module, priority)
Method on a class that helps to define a module name on an attribute pattern 
Arguments
Argument
 
Documentation 
PATTERN

[string] wildcard string that matches or the internal representation or the description of the attribute 
MODULE

[string] multilingual strings that defines the attribute module 
PRIORITY

[integer] priority that helps to solve conflicts between attribute modules 

definebinarydataurl (name, gethandler, posthandler)
Defines a URL that accepts GET and POST requests to get/send chunked binary data. Chunks of the same piece of data are identified using a key. For GET requests, two query arguments must be passed: a unique key that allows associating chunks to the same piece of data, and a chunk size (key=some_key&size=some_size). Additional query arguments qill be provided to the get handler, who must return either a file, a stream or a dm::document to be transfered. The stream will be closed automatically at the end of the transfer. The transfer is considered complete when there is less than the specified chunk size to be sent back to the client. For POST requests, the key is stored in the first 36 bytes of data; the next 8 bytes give the chunk size. The next bytes are the chunk content. The data is considered complete when we receive a chunk with a length less than the specified chunk size. When the data is complete, the post handler is called with the full content as first argument, and the response stream as second argument. 
Arguments
Argument
 
Documentation 
THIS

Ignored 
NAME

The name of the url 
GETHANDLER

The function called before a transfer to return the content to be sent back to the client 
POSTHANDLER

The function called with the full posted content at the end of a transfer 

defineConsolidationAttribute (attribute)
Allows to consolidate data on an attribute whos type is a consolidation class 
Arguments
Argument
 
Documentation 
ATTRIBUTE

Attribute used to perform the consolidation 

definecustomworkflowreport (workflow, report)
Define a report that will be displayed in place of the standard one when displaying a workflow. 
Arguments
Argument
 
Documentation 
WORKFLOW

Workflow 
REPORT

Report on the process transaction class. 

defineExtractedPaneName (obj, chart-label)
define extracted pane name for L1 region chart cells 
Arguments
Argument
 
Documentation 
OBJ

tab_report or region chart 
CHART-LABEL

Predefined name 

defineHoverImage (graphics, image, x, y, w, h)
Define an image which will appear when hovering over the specified part of a graphics area 
Arguments
Argument
 
Documentation 
THIS

A graphics area 
GRAPHICS

The graphics the area has been declared on 
IMAGE

An image which will appear when hovering 
X

Integer, x position of the hover zone 
Y

Integer, y position of the hover zone 
W

Integer, width of the hover zone 
H

Integer, height of the hover zone 
Syntax examples

defineNewSimulationPlan ()
Allow to define a new montecarlo simulation plan 

defineRuleSet (class)
Allows to define a ruleset for a given OpxClass 
Arguments
Argument
 
Documentation 
CLASS

Class of objects 

defineTransactionThreshold (memory-limit, time-limit, track-global-maps)
Defines thresholds for the max time and max memory consumption acceptable for one IS transaction. Sends a message to the user when the limit is exceeded 
Arguments
Argument
 
Documentation 
MEMORY-LIMIT
OPTIONAL
memory limit in kilobytes or false to desactivate the function 
TIME-LIMIT
OPTIONAL
time limit in milliseconds 
TRACK-GLOBAL-MAPS
OPTIONAL
display a message when a table is mapped without selection on indexes 

defineVirtualConsolidationClass (attribute, desc)
Allows to define a virtual consolidation class on any field of any table. This class can be then used as a consolidation class in any Planisware report: cost table, load arrays, curves,matrix,cost cells... The this of the function is the real class, the first argument is the target attribute. 
Arguments
Argument
 
Documentation 
ATTRIBUTE

String, an attribute name 
DESC
OPTIONAL
string, class label 

deleteFile (password)
Deletes a file 
Arguments
Argument
 
Documentation 
PASSWORD
OPTIONAL
string: password if the path is an ftp path 

deleteMeeting (team-connector, teams-meeting-id, organizer-id)
delete meeting Teams 
Arguments
Argument
 
Documentation 
TEAM-CONNECTOR

Teams and Planisware meeting connector 
TEAMS-MEETING-ID

teams meeting id 
ORGANIZER-ID

organizer id 

deserializeFromJson (json-text)
Deserialize a JSON string to an hash table 
Arguments
Argument
 
Documentation 
json-text

JSON string 

dfequal (number, number)
Compare two numbers returning true if there are close enough from one another. 
Arguments
Argument
 
Documentation 
NUMBER

[Number] first number to compare 
NUMBER

[Number] second number to compare 

diffDate (date1, date2)
This method is defined on date, it allows to compute difference between two date and it returns a duration. 
Arguments
Argument
 
Documentation 
DATE1

Date on which to compute the difference 
DATE2

Date to use to compute the difference 
Syntax examples
date1.DiffDate(date2)

diffid ()
In diff mode, returns an ID that identifies the object in the current table. 
Arguments
Argument
 
Documentation 
THIS

Object 

diffModeAvailableOn ()
Indicates if the diff mode is available on the current screen displayed, the function returns the object where the diff mode applies. If the diff mode is not available, the function returns undefined. 

diffModeOn ()
Indicates if the diff mode is set on the current screen displayed 

displayMonitoringResults ()
Displays the OpxMonitoringInfo table 

displaystageandgate_L1VALID ()
Draws Stage & Gate in a report. Called as display script on report cell. In order to activate the Stage or Gate selection on click: call enableAdvancedClickFctOnStageGate before current function, in same script content. 
Syntax examples
namespace _test;
                                                                            plw.enableAdvancedClickFctOnStageGate(this : this,this.report);
                                                                            plw.displayStageAndGate_L1valid(this : this);

displayWorkflowChart (process, user)
Display the workflow chart, the method can be called on an object or an object transaction 
Arguments
Argument
 
Documentation 
PROCESS
OPTIONAL
process displayed 
USER
OPTIONAL
used displayed 

docfieldlib.GENERATEDOCATTACHEMENTFIELD (o_class)
Generate fields to handle attachments. A symbolic field and a pseudo doc field to add file to the wanted class 
Arguments
Argument
 
Documentation 
o_class

An objectclass (plc.xxx) 
Syntax examples
docfield.generateDocAttachementField(plc.task)

documentfunction ()
Document a function 

documentPath ()
This function returns the document path of an opx2 document 
Syntax examples
document.documentPath

doexport (commit)
Export data to an identified target (see class opxImpexTarget). The function returns an Import/Export event, the filed commited indicates if the transaction has been performed 
Arguments
Argument
 
Documentation 
COMMIT
OPTIONAL
boolean, default is true, by default data is really exported 

doExportWithFormatAndTarget (format, target)
Export data to an identified target (see class opxImpexTarget) and an identified format. The function returns an Import/Export event, the filed commited indicates if the transaction has been performed 
Arguments
Argument
 
Documentation 
FORMAT

format to use for the export 
TARGET

target touse for the export 

doimport (commit)
Import data from an identified target (see class opxImpexTarget). The function returns an Import/Export event, the filed commited indicates if the transaction has been performed 
Arguments
Argument
 
Documentation 
COMMIT
OPTIONAL
boolean, default is true, by default data is really imported 

doImportWithFormatAndTarget (format, target, commit, string)
Import data from an identified target and an identified and an identified format (see class opxImpexTarget). The function returns an Import/Export event, the filed commited indicates if the transaction has been performed 
Arguments
Argument
 
Documentation 
FORMAT

format to use for the import 
TARGET

target touse for the import 
COMMIT
OPTIONAL
boolean, default is true, by default data is really imported 
STRING

Data to import with a string 

donotstoreinbookmarks (regexp)
Any user parameters whose name matches this regexp will not be stored in bookmarks / presentations. 
Arguments
Argument
 
Documentation 
REGEXP

A regular expression 

doPlwScriptAction (action, param)
Launch the action as ojs/pjs function with param as only parameter 
Arguments
Argument
 
Documentation 
ACTION

string that represent the ojs/pjs function to launch 
PARAM

string pass as the only parameter to the ojs/pjs function given as action to launch 

doPreviewExport (format, target)
Refresh table of preview export Cloud replica. 
Arguments
Argument
 
Documentation 
FORMAT

An impex format (this) 
TARGET

An impex target 

doRequest ()
Call a rest request. 

doubletofloat (doubl)
Cast a double into a float 
Arguments
Argument
 
Documentation 
DOUBL

Double 

downloadastextfile (filename)
Download the string given as this as a textfile. 
Arguments
Argument
 
Documentation 
THIS

String 
FILENAME
OPTIONAL
Filename for the downloaded file. It will be suffixed with some unique info 

downloadFileFromServer (filename, displayedname, type)
Tell the client to download the given file from the server, optionally displaying the given name to the user 
Arguments
Argument
 
Documentation 
FILENAME

Full path of the file on the server 
DISPLAYEDNAME
OPTIONAL
Name of the file that will appear to the user 
TYPE
OPTIONAL
Type of the file, by default it's the extension of the filename parameter 

downloadFileWithoutDoc (applet, path)
Generate an Excel export and return the path of the generated file 
Arguments
Argument
 
Documentation 
APPLET

The applet 
PATH

The path 

drawlib.DRAWPROGRESSBAR (graphics, value, minimum, maximum)
Draw a simple progress bar 
Arguments
Argument
 
Documentation 
GRAPHICS

the graphics the draw is done on 
VALUE

value 
MINIMUM

minimum 
MAXIMUM

maximum 
Syntax examples
drawlib.drawProgressBar(this, 2, 0, 5)

dump (directory, filename)
Dump script code into a file 
Arguments
Argument
 
Documentation 
DIRECTORY
OPTIONAL
directory where the script is dumped 
FILENAME
OPTIONAL
filename where the script is dumped 

dumpbytes (tostream)
Dumps bytes to an output stream. The source can be a string, an array of bytes or a binary input stream. The destination can be a path or a binary output stream. 
Arguments
Argument
 
Documentation 
THIS

Source data: an array of bytes, a string or a binary input stream. 
TOSTREAM

Destination: a path or a binary output stream. 

dumpdatabase (mode, filename, options)
Dump database into a file 
Arguments
Argument
 
Documentation 
MODE

[mandatory] must be "full", "environment" or "module" 
FILENAME

[mandatory] filename where the database is dumped 
OPTIONS
OPTIONAL
dump options list 

dynamicfield_GENERATE (targetclass, type, newslotname, comment, reader, modifier)
Generate a dynamic field on a given class if it does not exist, update it (reader, modifier, comment) CAREFUL : The given name is case insensitive and should stay that way 
Arguments
Argument
 
Documentation 
TARGETCLASS

a variable that can be converted into a class 
TYPE

type of the dynamic field to generate DATE, END-DATE, STRING, ... 
NEWSLOTNAME

name of the created slot 
COMMENT

label of the created slot 
READER

a function that will be used as reader for the dynamic slot 
MODIFIER

a function that will be used as modifier for the dynamic slot 

dynamicfield_GENERATEFIELDNAME (fieldname)
Convert a string into a string usable as a field name 
Arguments
Argument
 
Documentation 
FIELDNAME

a string to convert into a string that can be used as field name 

dynamicfield_GENERATEMULTIPLEVALUEFIELD (targetclass, typeclass, newslotname, comment, reader, modifier)
Generate a multiple value(with ...) field on a given class 1)the field generated by this function can be used in table(with ... displayed) 2)you can also used getinternalValue to get the matching vector of objects 
Arguments
Argument
 
Documentation 
TARGETCLASS

a variable that can be converted into a class 
TYPECLASS

a variable that can be converted into a class 
NEWSLOTNAME

name of the created slot 
COMMENT

label of the created slot 
READER

a function that will be used as reader for the dynamic slot 
MODIFIER

a function that will be used as modifier for the dynamic slot 

editCell (cell)
launch popup up to edit selected object (warning : do not use for blocks or lines 
Arguments
Argument
 
Documentation 
cell

cell to be edited 

editDocument (object)
Edit a document. 
Arguments
Argument
 
Documentation 
object

Kernel document object to edit 

editGrid ()
Displays a grid on a specific object class 

emptyalloc (id)
Return true if there is at least one allocation attached to a resource 
Arguments
Argument
 
Documentation 
THIS

A resource 
ID

(Useless argument) 

emptyallocdashboard (id)
Return true if there is at least one allocation attached to a resource and stored in current page object 
Arguments
Argument
 
Documentation 
THIS

A resource 
ID

(Useless argument) 

enableadvancedclickfctonstagegate (report)
Enables the Stage or Gate selection on click: this function has to be called before displayStageAndGate_L1valid, in same script content. Then, when a gate or stage is selected, its identifier is set in context field _PM_AA_S_SELECTED_TODO_ACT. 
Arguments
Argument
 
Documentation 
REPORT

[Object] Current report object 
Syntax examples
namespace _test;
                                                                            plw.enableAdvancedClickFctOnStageGate(this : this,this.report);
                                                                            plw.displayStageAndGate_L1valid(this : this);

encodestringtourl (string)
Encode a string into a url 
Arguments
Argument
 
Documentation 
STRING

The string to encode 

equal (object, start1, end1, start2, end2)
Test the equality between two strings or vectors 
Arguments
Argument
 
Documentation 
OBJECT

String or vector to compare with 
START1
OPTIONAL
integer start of the first string to compare 
END1
OPTIONAL
integer end of the first string to compare 
START2
OPTIONAL
integer start of the second string to compare 
END2
OPTIONAL
integer end of the second string to compare 

equalizeHeightRb ()
Function to equalize height between 2 or more cells 

equalizeWidthRb ()
Function to equalize width between 2 or more cells 

equalvalues (object, val1, val2)
compare two values 
Arguments
Argument
 
Documentation 
OBJECT

object 
VAL1

first value 
VAL2

second value 

equations_INITEQUATIONSFROMTEMPLATE ()
Apply equation template to a set of equations. It is used to massively initialize equations in a table after bulk creation. 
Arguments
Argument
 
Documentation 
THIS

Can be a single equation (Opx_PE_PT_EQUA_EQUATION) or if false it will use current selection. 
Syntax examples
equations_initequationsFromTemplate();

error (string)
Generates an OPX2 script error which contains the string passed as argument. This error can be trapped with a try catch construction 
Arguments
Argument
 
Documentation 
STRING

Label of the error 

errormessage ()
Returns the error message associated to the this, which must be an error object. This is meant to be used in a catch block 
Arguments
Argument
 
Documentation 
THIS

Error object 

escapehtml (string)
This function converts a plain text into a html formated string 
Arguments
Argument
 
Documentation 
STRING

plain text string to be converted 
Syntax examples
"Toto\>Tata".escapehtml()
-\> Returns Toto>Tata

evalaftercommand ()
call the script given as this at the end of the report's display 

evalaftercommandbeforedaemons (function)
Call a function inside finish-update-commands but before after daemons 
Arguments
Argument
 
Documentation 
FUNCTION

function to call after commands but before daemon 

evalojs ()
parse and evaluate an ojs document. The document isn't reparsed if unchanged 

execute (arguments, wait)
Executes a windows or unix program or open a document on windows 
Arguments
Argument
 
Documentation 
ARGUMENTS
OPTIONAL
vector of string describing the program arguments 
WAIT
OPTIONAL
boolean, default is false , indicates if OPX2 should wait 

executeGraphAPIrequest (graph-api-connector, path, method, list-content, full-url, content-type)
Sends a request to MS Graph API using application-level access. Returns request result, result code, header and URI 
Arguments
Argument
 
Documentation 
GRAPH-API-CONNECTOR

Connector to use 
PATH

Endpoint path combined to the Graph API url obtained through the connector to send the query 
METHOD

HTTP method to use 
LIST-CONTENT

Request content, optional 
FULL-URL
OPTIONAL
used to force the full http url to query, instead of combining the Graph API url obtained through the connector and the given path 
CONTENT-TYPE

Request content type. Default is application/json 

executeGraphAPIrequestWEncoding (graph-api-connector, path, method, list-content, full-url, content-type)
Sends a request to MS Graph API using application-level access. Returns request result, result code, header and URI 
Arguments
Argument
 
Documentation 
GRAPH-API-CONNECTOR

Connector to use 
PATH

Endpoint path combined to the Graph API url obtained through the connector to send the query 
METHOD

HTTP method to use 
LIST-CONTENT

Request content, optional 
FULL-URL
OPTIONAL
used to force the full http url to query, instead of combining the Graph API url obtained through the connector and the given path 
CONTENT-TYPE

Request content type. Default is application/json 

exit (code)
Exit the current process with a specified code 
Arguments
Argument
 
Documentation 
CODE

return code 

expandFormula ()
Expands a formula 

exportallenvironment (directory, processes)
Export all environment objects in given directory with following convention : Directory/Dataset/Class/ObjedID_onb.lsp 
Arguments
Argument
 
Documentation 
DIRECTORY

[String] Directory in which the objects will be exported 
PROCESSES

[Boolean] If true, only object in Processes files will be exported, if false all objects will be exported 

exportallenvironmentincvs (directory, processes, cvs-export-module, cvs-export-root)
Export all environment objects in given directory with following convention : Directory/Dataset/Class/ObjedID_onb.lsp, and commits in CVS the changes. The directory must already be under version control, this function will not do the initial import 
Arguments
Argument
 
Documentation 
DIRECTORY

[String] Directory in which the objects will be exported 
PROCESSES

[Boolean] If true, only object in Processes files will be exported, if false all objects will be exported 
CVS-EXPORT-MODULE

[String] CVS module in which the export files must be commited 
CVS-EXPORT-ROOT

[String] CVS root, for example : :pserver:troche@milos:/home/cvsroot 

exportAsPNG (object, destination, width, height)
Export the report as a PNG image 
Arguments
Argument
 
Documentation 
THIS

A report 
OBJECT

An object to display the report on 
DESTINATION
OPTIONAL
the path of the generated png 
WIDTH
OPTIONAL
Integer, width of the generated image 
HEIGHT
OPTIONAL
Integer, height of the generated image 

exportCostTableIntoOutput (cost-table, output-def)
Export values of a cost table into an output. Goal is to be able to take snapshots of different states or aggregate data so the computation will run faster 
Arguments
Argument
 
Documentation 
COST-TABLE

cost table to export 
OUTPUT-DEF

output def into which cost table's values will be exported 

exportdatasets (directory, datasets-list)
Export environment objects of given datasets in given directory with following convention : Directory/Dataset/Class/ObjedID_onb.lsp 
Arguments
Argument
 
Documentation 
DIRECTORY

[String] Directory in which the objects will be exported 
DATASETS-LIST

[Vector] List of datasets to export 

exportdatasetsincvs (directory, datasets-list, cvs-export-module, cvs-export-root)
Export environment objects of given datasets in given directory with following convention : Directory/Dataset/Class/ObjedID_onb.lsp, and commits in CVS the changes. The directory must already be under version control, this function will not do the initial import 
Arguments
Argument
 
Documentation 
DIRECTORY

[String] Directory in which the objects will be exported 
DATASETS-LIST

[Vector] List of datasets to export 
CVS-EXPORT-MODULE

[String] CVS module in which the export files must be commited 
CVS-EXPORT-ROOT

[String] CVS root, for example : :pserver:troche@milos:/home/cvsroot 

exportexcelwithoutsendingfile (applet)
Generate an Excel export and return the path of the generated file 
Arguments
Argument
 
Documentation 
applet

The applet 

exportPreviewCompareSlot (request, slot)
Refresh table of preview export Cloud replica. 
Arguments
Argument
 
Documentation 
REQUEST

An impex request (this) 
SLOT

Slot class of request 

exportReportToPDF (report, paper-format, orientation)
convert a report to a pdf file 
Arguments
Argument
 
Documentation 
REPORT

report 
PAPER-FORMAT

paper format such as A4, A3 ... 
ORIENTATION

landscape or portrait 

exporturl (url)
Export the url in so that it can be accessed 
Arguments
Argument
 
Documentation 
URL

The url to expor 

exportUserParameters (file)
Export the user parameters associated to an user in a file or web page 
Arguments
Argument
 
Documentation 
THIS

User name or user 
FILE
OPTIONAL
file name, if not specified, parameters are exported in a web page 

extensionratioformula ()
Customizable method, returns the extension ratio to be applied to data (delays are multiplied, rate are divided) 

extentrmod.FETCHALLREQUESTSUPDATES ()
Checks whether extended requests have new data to import from the partners. 

extentrmod.FETCHREQUESTSUPDATESINPROJECT (project)
Checks whether extended requests have new data to import from the partners in a given project. 
Arguments
Argument
 
Documentation 
PROJECT

projects to check for updates 

extentrmod.FETCHREQUESTUPDATES (request)
Checks whether a given extended request has data to import from the partner. 
Arguments
Argument
 
Documentation 
REQUEST

An extended request 

extentrmod.IMPORTREQUESTLATESTDATA (request)
Imports the latest data associated with a request. 
Arguments
Argument
 
Documentation 
REQUEST

An extended request 

extentrmod.UPDATEEXTENDEDREQUESTSINPROJECT (request)
Imports the latest data for all requests in a given project. 
Arguments
Argument
 
Documentation 
REQUEST

An extended request 

extract (string, string)
This method allow you to extract files from a ZIP. It allows to either extract all the given zip file, or just one file. 
Arguments
Argument
 
Documentation 
STRING

The destination directory 
STRING
OPTIONAL
The name in the zip file of the one file to extract. If not given, the whole zip file will be extracted. 
Syntax examples
[zipfile].extract("c:\temp");

extractExchangeEmailText (text-contents-htable)
Extracts text from exchange online email text contents 
Arguments
Argument
 
Documentation 
text-contents-htable

Text contents 

extractfilterfromformula (string)
returns a list containing the main filter and the user filter from a table filter 
Arguments
Argument
 
Documentation 
STRING

the table filter 
Syntax examples
var filters = extractfilterfromformula(grid.formula.stringdef)

filegeturl (filename)
Returns an URL suitable to download the file given in argument 
Arguments
Argument
 
Documentation 
FILENAME

the file which we want to download 

fileLength (file)
file Length 
Arguments
Argument
 
Documentation 
file



fileWriteDate (password)
Returns the last date of modification of a file 
Arguments
Argument
 
Documentation 
PASSWORD
OPTIONAL
string: password if the path is an ftp path 

findclosestwbstemplate ()
From a description, returns the closest template project or activity library. 
Arguments
Argument
 
Documentation 
THIS

String describing the WBS to generate (example: development of a new rocket engine that would make us capable of reaching planet mars) 

findentities (entities)
Extract entities from a string 
Arguments
Argument
 
Documentation 
THIS

String from which entities are extracted 
ENTITIES

(key) List of entities to look for 

findFastPath (target)
Finds out if 2 classes are linked together in an optimized way 
Arguments
Argument
 
Documentation 
THIS

Class from where we will make the from-object 
TARGET

Class we will map 
Syntax examples
"OpxOrdo-Project".findfastpath("OpxActivity"); -\> we check if there is an optimized way to map activities using projects; answer is yes.

finishes ()
Return the end date associated with an object 
Arguments
Argument
 
Documentation 
THIS

object 

forceUnlockSimulation (simulation)
Removes the lock on a simulation in database. Impossible on a running simulation 
Arguments
Argument
 
Documentation 
SIMULATION

the simulation to unlock 

format (format_directive, format_arguments)
Format a string in a stream or a string, the format directive follows the ANSI X3J13 of Common-Lisp specification. Please consult this documentation to know what format directive can be used. 
Arguments
Argument
 
Documentation 
FORMAT_DIRECTIVE

String defining the format directive 
FORMAT_ARGUMENTS

[list of arguments] arguments of the format directive 

formatVector (format_directive, format_vector)
Format a string in a stream or a string, the format directive follows the ANSI X3J13 of Common-Lisp specification. Please consult this documentation to know what format directive can be used. 
Arguments
Argument
 
Documentation 
FORMAT_DIRECTIVE

String defining the format directive 
FORMAT_VECTOR

Vector of arguments of the format directive 

formatXML (cdata, indent, utf8encoding)
Outputs an XML form to a file 
Arguments
Argument
 
Documentation 
CDATA
OPTIONAL
generate cdata tags (default false) 
INDENT
OPTIONAL
indent XML result (default false) 
UTF8ENCODING
OPTIONAL
output in UTF-8 (default depends on the database mode) 

forwardExchangeOnlineEmail (connector, account-email, message-id, to)
Function to forward previous an email by using the exchange online connector 
Arguments
Argument
 
Documentation 
CONNECTOR

Talk connector to use 
ACCOUNT-EMAIL

Email of the connectd account (in the the connector parameters) 
MESSAGE-ID

message-id of the email to reply to 
TO

The email address of recipients 
Syntax examples
(forwardExchangeOnlineEmail T connector talklab\@plw.com \<1234\@mail.com\> (list "alice\@contoso.com"))

functionExist ()
Indicate if a function referenced by a string exists in OPX2 

funitduration (ignore, object)
Returns the load in minute in the given time unit 
Arguments
Argument
 
Documentation 
IGNORE

Ignored 
OBJECT

Time unit 

gantt_HIDEWPKMANAGERFIELD ()
Hide field _WPM_RO_WORKPACKAGE_MANAGER in Gantt when Workpackage module is inactive 
Syntax examples
plw.gantt_hideWpkManagerField();

gantt_HIGHLIGHTDATESCHANGES ()
On a Gantt, highlight dates cells that are impacted by a date or duration modification. 
Syntax examples
plw.gantt_HighlightDatesChanges();

gantt_MANAGESLIDINGTIMESCALE ()
Manages sliding time scales on Gantt charts 
Syntax examples
plw.Gantt_ManageSlidingTimeScale();

gantt_SETPROPERTIESFORDISPLAY (gantt)
Displays a Gantt according to the options selected by the user in the view menu. 
Arguments
Argument
 
Documentation 
GANTT

[opxGanttDelta] A Gantt chart 
Syntax examples
plw.gantt_setPropertiesForDisplay(this.Gantt);

generatefilename (applet, prefix, extension)
Generate a file name with the given prefix and extension 
Arguments
Argument
 
Documentation 
APPLET

The applet 
PREFIX

the prefix to use 
EXTENSION

the file extension 

generateMenuFromTree (class, formula-filter, label-formula, entry-points, menu-action, selected-points, navigation-reminder, show-icons, selected-parents)
Add a tree to a javamenu mapped from a tree-structured class 
Arguments
Argument
 
Documentation 
THIS

widget = java menu 
CLASS

tree structure 
FORMULA-FILTER

formula used to filter elements to be inserted 
LABEL-FORMULA

formula used to compute menu labels 
ENTRY-POINTS

list of elements posing as menu heads or false 
MENU-ACTION

Action done on click over a menu item 
SELECTED-POINTS
OPTIONAL
Element or vector of elements that need to appear as selected 
NAVIGATION-REMINDER
OPTIONAL

SHOW-ICONS
OPTIONAL
if true class icons will be shown 
SELECTED-PARENTS
OPTIONAL
if true parents of a selected element will be too 

generateStaticDataForMap (object)
Method on the opxxmlmapping object that returns a xml file that holds data and data source definition 
Arguments
Argument
 
Documentation 
OBJECT
OPTIONAL
object displayed in the xml data 

generateStyleManagerReport (cell)
Binding to generate style manager report (case there are more than one folder cell in the report) 
Arguments
Argument
 
Documentation 
CELL

current cell (folder cell) 

generateUrlForMap (object)
Method on the opxxmlmapping object that returns an url that retrieve xml data 
Arguments
Argument
 
Documentation 
OBJECT
OPTIONAL
object displayed in the xml data 

get-bloc-selection-area-color (line, color)
change bloc color depending on whether there is a filter on it or not 
Arguments
Argument
 
Documentation 
LINE

bloc 
COLOR

returned color of line mselection area 

get-line-selection-area-color (line, color)
change line color depending on whether there is a filter on it or not 
Arguments
Argument
 
Documentation 
LINE

line 
COLOR

returned color of line mselection area 

getAllApplicableRules (object)
returns all the rules that can be applied to an object given their attribute match for a given ruleset 
Arguments
Argument
 
Documentation 
OBJECT

object on which the rules can be applied 

getAllContextDependencies ()
Returns the list of context attributes used to display a screen. This list is used to restore the screen context in the bookmark engine. If you do not want to have a slot appearing in this list, you have to set the slot property "DoNotStoreInBookmarks". 

getAllFolderCells (object)
Returns all folder cells (or subform cells) of a report/tab report 
Arguments
Argument
 
Documentation 
OBJECT

report, tab report 

getAnnotation (attribute)
returns the annotation associated to an object attribute 
Arguments
Argument
 
Documentation 
ATTRIBUTE

string 

getAnnotationDataset ()
Allows you to define a specific annotation dataset associated to an object. If you specialize this method for one specific object class, you can redefine the way the annotation is stored 

getAnnotationID ()
Defines a secondary ID associated to the annotation object that is used to store and retrieve one annotation. Usefull if your annotation depends on a screen state and/or another object that the object currently displayed 

getAnnotationObject ()
Defines on which object associated to an object annotations are defined. Usefull if you want to store annotations on objects that are not directly stored in the database 

getannotationurl (object, object, object)
Get the annotation URL of the given object. 
Arguments
Argument
 
Documentation 
OBJECT

Object 
OBJECT

Version 
OBJECT

Version id 

getApplicableRules (object)
returns the rules that can be applied to an object given their attribute match for a given ruleset 
Arguments
Argument
 
Documentation 
OBJECT

object on which the rules can be applied 

getAttributeChooserSelection ()
On an attribute chooser widget (added using addattributeChooser), returns current selection 
Arguments
Argument
 
Documentation 
THIS

widget on which we should retrieve the selection 

getblue ()
Returns the blue part of the given color 
Arguments
Argument
 
Documentation 
THIS

Color 

getCellClassList (cell)
returns list of class of the selected attribute cell 
Arguments
Argument
 
Documentation 
cell

selected attribute cell 

getCell_uScript (cell)
Get this cell user script 
Arguments
Argument
 
Documentation 
CELL

Cell 

getClassArbo ()
return the arbo object associated to a class 
Arguments
Argument
 
Documentation 
THIS

class 

getClassOrRelationComment (bloc, class-or-rel)
Get class or relation comment 
Arguments
Argument
 
Documentation 
BLOC

table-cell object 
CLASS-OR-REL

class 

getClassOrRelationList (data)
Insert object into a report 
Arguments
Argument
 
Documentation 
data

table cell 

getClassParent ()
return the first parent of a class 
Arguments
Argument
 
Documentation 
THIS

class 

getContextData ()
Returns a string describing the context attributes and user settings 

getContextDependencies ()
Return all references to the context found in the given formula 
Arguments
Argument
 
Documentation 
THIS

A formula 

getCostObject (keys)
Get a temporary object that has been previously stored using StoreCostObject 
Arguments
Argument
 
Documentation 
KEYS

Keys used to retrieve the stored object 

getCostTableItems (keys)
Retrieves the list of cost table elements referenced by the keys passes as argument. A key can be any combination of date and objects 
Arguments
Argument
 
Documentation 
KEYS

Multiple arguments 

getCostTableSelectionDetails (show-grid)
Returns a list of attributes and values or displays an object-grid widget that allows to display the detail of a cost table selection 
Arguments
Argument
 
Documentation 
SHOW-GRID
OPTIONAL
display the grid if true returns a list of grid attributes if false 

getCurrentApplyEditor ()
Returns the current editor in a "script called after a save action on form" 

getCurrentApplyEdtior ()
Return the current editor in a "script called after a save action on form" 

getCurrentApplyWidget ()
Returns the current widget in a "script called after a save action on form" 

getcurrentformattingruleset (ottp-mode)
Return the formatting rule set for the current table, creating it if needed 
Arguments
Argument
 
Documentation 
this

ignored 
ottp-mode

the ottp-mode of the table you want to create a formatting rule on 

getcurrenthistorystate ()
returns current history navigation state 

getcurrentitemanchorkey ()
Returns the anchor key from the widget 

getCurrentTableLineValue (table, attribute)
Fetch the value of the given attribute on the current line in the given table 
Arguments
Argument
 
Documentation 
TABLE

Table to fetch value from 
ATTRIBUTE

Attribute to fetch the value of 

getdatabaseoffset ()
Returns the offset of the current database, or 0 if there is no current database. 

getDefaultCellProperties (cell)
get default 'CSS' 
Arguments
Argument
 
Documentation 
CELL

cell 

getdefaulttablestylekey (ottp-mode)
Return anthe user parameter key associated to a default table style 
Arguments
Argument
 
Documentation 
OTTP-MODE

ottp-mode 

getDropObject (id)
Returns the current file or the current object dropped on the graphics area its called from. 
Arguments
Argument
 
Documentation 
id

Interger: -1 to get a file, if any and -2 to get a list of objects, if any 
Syntax examples

getDynamicVariable (default)
Get the value of a variable bound with callWithBinding 
Arguments
Argument
 
Documentation 
THIS

the name of the variable to fetch 
DEFAULT
OPTIONAL
value to return if the variable is not bound (default to undefined) 

geteditorplist (editor, marker, default-value)
Allow to get the value associated to the editor plist 
Arguments
Argument
 
Documentation 
EDITOR

(this) editor, the editor in which we query the plist 
MARKER

string or symbol, the key used to query the plist 
DEFAULT-VALUE
OPTIONAL
value returned if the key is not in the plist 

getElapsedTime ()
returns as an integer the current time in milliseconds, relative to an arbitrary time base. The difference between the values of two calls to this function is the amount of elapsed real time (i.e., clock time) between the two calls. 

getentityicon (entity, object)
Runs the icon script of a bot dictionary entity on a given object 
Arguments
Argument
 
Documentation 
ENTITY

A bot dictionary object 
OBJECT

The object on which to call the icon script 

getentityurl (entity, object)
Runs the URL script of a bot dictionary entity on a given object 
Arguments
Argument
 
Documentation 
ENTITY

A bot dictionary object 
OBJECT

The object on which to call the URL script 

getEnv (var-name)
Get the value of a system environment variable 
Arguments
Argument
 
Documentation 
VAR-NAME

name of the variable 

getEnvironmentVariable ()
Get an environment variable by name 

getExcelFile (xmlmapping, object)
Embedds the xml mapping it is called on into an Excel 2007 file and downloads or opens it on the user machine 
Arguments
Argument
 
Documentation 
XMLMAPPING

XML mapping object to embedd 
OBJECT

Object to compute the XML on 
Syntax examples
myXMLMapping.getExcelFile();

getExchangeOnlineConversationAccountEmails (conversation)
Returns a list of email adresses to use when sending email messages via Graph API. In most cases it should contain only one element. 
Arguments
Argument
 
Documentation 
conversation

current conversation 

getfilenamefrompath (path)
Returns filename associated to a path 
Arguments
Argument
 
Documentation 
PATH

[String] The file path 
Syntax examples
var the_path = "D:/Projects/Web Services/As Server/the_file.jpg";
getfilenamefrompath(the_path);

getFileRelatedSimulations (file)
Returns the simulations pertaining to a given dataset (project) 
Arguments
Argument
 
Documentation 
FILE

the dataset we want to get simulations for 

getFontWithName (font)
Get a font by name 
Arguments
Argument
 
Documentation 
FONT

font name 

getGlobalMousePosition ()
On click callback of graphics area, get the global mouse coordinates the click occured on 

getgreen ()
Returns the green part of the given color 
Arguments
Argument
 
Documentation 
THIS

Color 

getHighlight (attribute)
returns the highlight status associated to an object attribute 
Arguments
Argument
 
Documentation 
ATTRIBUTE

string 

gethistorydatafromactivities (listofactivities)
Gets history data for a list of activities 
Arguments
Argument
 
Documentation 
LISTOFACTIVITIES

A list of activities 

getHtmlHeight (html-string, width)
For a given html string and a width, it returns height of the text 
Arguments
Argument
 
Documentation 
HTML-STRING

[string] html string to paginate 
WIDTH

[integer] available height to paginate 
Syntax examples
getHtmlHeight("\this is a test\", 150);

getHyperlinkUserScript (cell)
get hyperlink user script defined on cell 
Arguments
Argument
 
Documentation 
CELL

cell containing user script 

getimagepath (image)
Return the path of an exported image (path in the temp dir) 
Arguments
Argument
 
Documentation 
IMAGE

the image to get the path from 

getimagesrcbase64 (ignore, object)
Get the base64 source string to use in <img> HTML tags to embed pictures. 
Arguments
Argument
 
Documentation 
IGNORE

Ignored this 
OBJECT

An image object (png, native icon, gdi image, document, ...). 

getInputUserScript (cell)
get user script defined on cell 
Arguments
Argument
 
Documentation 
CELL

cell containing user script 

getIntranetUser ()
Returns user that has been used to start the intranet 

getL1OriginTableStyle (ottpmode)
Found l1 table style based on ottpmode 
Arguments
Argument
 
Documentation 
OTTPMODE

table-cell-mode or region-chart-mode 

getlanguagedescription ()
Returns the description of a language in the language itself (:english => English, :french => French, ... 
Arguments
Argument
 
Documentation 
this

a language symbol 

getlispcallable ()
Returns the lisp callable object associated to the this. This is used for example for mappers in java menus 

getMainBlockOnReport (report)
get main block on report 
Arguments
Argument
 
Documentation 
report

report (L2) 

getmatchingformattingrules (ruleset, objects, columns)
Return the formatting rules that apply to the lists of objects and columns provided 
Arguments
Argument
 
Documentation 
ruleset

the rule set that will be used to list formatting rules 
objects

The list of objects the rules should apply to 
columns

The list of columns the rules should apply to 

getmessage (package)
Returns the message associated to the id given in this. It can be the identifier of a text key or of an internal message. 
Arguments
Argument
 
Documentation 
THIS

Identifier of the message 
PACKAGE
OPTIONAL
The package the message is in. 

getMousePosition ()
On click callback of graphics area, get the mouse coordinates the click occured on 

getMultiLingualModeState (ignore)
Is multi lingual mode activated in L1 report builder (i.e. display textkeys?) 
Arguments
Argument
 
Documentation 
ignore

ignored 

getNewEmails (obj, $server, $login, $password, $tmpdir, $fromdate, $filter)
Function to get new emails, specifying which method (imap, exchange...) to use 
Arguments
Argument
 
Documentation 
OBJ

Method to use 
$SERVER

Mail server url 
$LOGIN

Mail server login 
$PASSWORD

Mail server password 
$TMPDIR

Directory to download attachments in 
$FROMDATE

Date filter 
$FILTER

String used to filter emails, looks in subject 
Syntax examples
(getNewEmails :imap "stmp.domain.com" "login\@domain.com" "SuperPwd" (io-ordo::local-storage-directory) :$filters (list "HEADER" "expected-header-name" "expected-header-value" "SUBJECT" "subject content filter")

getnewmessages (callback, keep-messages)
This function will call the callback function on every message. The this of the callback function will be a javascript object representing the message. It will have the following slots : from, to, cc, bcc, replyto (all those fields are vectors of email addresses. Each address is represented by a vector (address, name) or (address)), date (as a javascript date object), raw-date (as a string), subject, inreplyto, messageid, body, attachments (a vector of full pathnames to attachments, available only the folder argument was used when creating the imapserver object), message-filename (a full pathname to the html file of the email, available only the folder argument was used when creating the imapserver object) 
Arguments
Argument
 
Documentation 
CALLBACK

Name of the callback function that will be called 
KEEP-MESSAGES
OPTIONAL
If true, messages won't be marked as read by the function 

getnumberofnewmessages ()
Returns number of unread messages in the mailbox of the imapserver given as this 

getObjectClass ()
Return an object class associated to an object(objects, classes, symbols, strings, objectSlots 
Arguments
Argument
 
Documentation 
THIS

object 

getorderedlanguages ()
returns the list of languages 

getPaperFormat (printer, report)
Returns the paper format given a printer and a report 
Arguments
Argument
 
Documentation 
PRINTER

Printer used for printing, either a string or printer-object 
REPORT

Printed report 

getPaperHeigth (paper, scale, orientation, resolution, printable-zone-only)
This function returns the heigth of a paper format in tenth of mm 
Arguments
Argument
 
Documentation 
PAPER

Paper name, string or symbol 
SCALE

Scale 
ORIENTATION

String or symbol, :LANDSCAPe or :PORTRAIT 
RESOLUTION
OPTIONAL
default is 100 
PRINTABLE-ZONE-ONLY
OPTIONAL
when t, takes margin into account 

getPaperOrientation (printer, report)
Returns the orientation given a printer and a report 
Arguments
Argument
 
Documentation 
PRINTER

Printer used for printing, either a string or printer-object 
REPORT

Printed report 

getPaperWidth (paper, scale, orientation, resolution, printable-zone-only)
This function returns the width of a paper format in tenth of mm 
Arguments
Argument
 
Documentation 
PAPER

Paper name, string or symbol 
SCALE

Scale 
ORIENTATION

String or symbol, :LANDSCAPe or :PORTRAIT 
RESOLUTION
OPTIONAL
default is 100 
PRINTABLE-ZONE-ONLY
OPTIONAL
when t, takes margin into account 

getPatchVersion (string)
Returns the patch version (a string) if the given patch is loaded. 
Arguments
Argument
 
Documentation 
STRING

Name of the patch 

getpathfromimage (image)
Get the path to an image on the server, as a string. Returns false for unsupported objects (objects that are not images or have no file cache on the server). 
Arguments
Argument
 
Documentation 
IMAGE

An image object (png, native icon, gdi image, document, ...). 

getplaintextheight (str, font, width, maxlines, length, start)
Returns the height required to display a text in a given width 
Arguments
Argument
 
Documentation 
THIS

ignored 
STR

The text whose height is computed 
FONT

The font or font id in which the text will be displayed 
WIDTH

The width of the area in which the text will be displayed 
MAXLINES
KEYWORD
defaults to no limit) Maximum number of lines 
LENGTH
KEYWORD
defaults to str length) Length of the string to consider 
START
KEYWORD
default to 0) Start of the string 

getPlist (object, marker, default-value)
getPlist searches the property list stored in an object for an indicator eq to marker. If one is found, then the corresponding value is returned; otherwise default is returned. If default is not specified, then false is used for default. Note that there is no way to distinguish an absent property from one whose value is default. 
Arguments
Argument
 
Documentation 
OBJECT

object where to search into the plist 
MARKER

marker 
DEFAULT-VALUE
OPTIONAL
default value 
Syntax examples
object.getplist("property")

getpresentationobject (object)
Callback that returns the object used to print a presentation 
Arguments
Argument
 
Documentation 
OBJECT

current page object 

getProcessesVersion ()
returns the current processes version 

getPublishReqText ()
Returns the text for notifying the user the he/she has to operate directly from the app 

getred ()
Returns the red part of the given color 
Arguments
Argument
 
Documentation 
THIS

Color 

getreferencedobject (object-reference)
Retrieve the referenced object 
Arguments
Argument
 
Documentation 
OBJECT-REFERENCE

the Object reference 

getRegistryKeyValue ()
Gets value from registry 

getreplayversion ()
Return the current replay key version 

getReportPrinter (report)
Returns report printer 
Arguments
Argument
 
Documentation 
REPORT

printer 

getrequirementpopup (finalpopupname)
Retrieve the edition pop up on Requirements 
Arguments
Argument
 
Documentation 
FINALPOPUPNAME

[String] Name of the pop up report to display 
Syntax examples
var oPopup = plw.getRequirementPopup(popUpName);

getRuleSet (name)
Returns the associated ruleset for a given name 
Arguments
Argument
 
Documentation 
NAME

Any data structure representing a ruleset 

getRuleTable ()
Get the rule table. 

getSimulationProgress (simulation)
Returns the simulation progress as a percentage. Based on number of drawings done vs total number of drawings asked. 
Arguments
Argument
 
Documentation 
SIMULATION

The studied simulation 

getSlotButtonList ()
Compute all possible options from an attribute type, usually to be called to know all possible options in a radio button 
Arguments
Argument
 
Documentation 
THIS

slot (type <object-attribute>) on which we want to compute possible values 

getstructureclasses ()
Return the list of classes used to separate synthesis 

getsynchronizationrule (ws)
Returns the synchronization rule applicable on an activity 
Arguments
Argument
 
Documentation 
WS

[object] Activity 

getTeamsAppInstallText ()
Returns the text notifying the installation of the Teams app 

getTeamsAppRemoveText ()
Returns the text notifying the removal of the Teams app 

getTeamsInstallIssueText ()
Returns the text notifying an issue with a Teams app 

getTeamsInvalidCredText ()
Returns the text notifying invalid credentials 

getTemporaryAttribute (attribute, default-value)
Get a value for a dynamic field on an object that have been set using setTemporaryAttribute 
Arguments
Argument
 
Documentation 
THIS

object 
ATTRIBUTE

attribute name 
DEFAULT-VALUE
OPTIONAL
returned value if attribute is not initialized 

getTemporaryObject (keys)
Get a temporary object that has been previously stored using StoreTemporaryObject 
Arguments
Argument
 
Documentation 
KEYS

Keys used to retrieve the stored object 

getTemporaryObjectWithDefault (default, keys)
Get a temporary object that has been previously stored using StoreTemporaryObject. Properly handle false not like GetTemporaryObject 
Arguments
Argument
 
Documentation 
DEFAULT

Default value to return if not object is stored for this key 
KEYS

Keys used to retrieve the stored object 

geturl (dispatch)
This method returns, if possible, an url (http:// or file://) representing on the given object 
Arguments
Argument
 
Documentation 
THIS

Anything which can have an url 
DISPATCH
OPTIONAL
default false), if true returns an URL using Planisware dispatch instead of a direct link to the current slave 
Syntax examples
object.geturl();

getuserconfigurationuserfilter (string)
returns the user filter stored in the user parameters for a given grid 
Arguments
Argument
 
Documentation 
STRING

the object grid 
Syntax examples
var userFilter = getuserconfigurationuserfilter(grid)

getUserEnvironmentDataset ()
returns current user environment dataset 

getUserFilter ()
Return the user customisable part of a table filter 
Arguments
Argument
 
Documentation 
THIS

An ottp-mode 

getUserPaperFormat ()
Returns user paper format 

getUserPaperOrientation ()
Returns user paper orientation 

getUserParameter (key, value, user)
Set an information linked to the user and a key, the key can be any data 
Arguments
Argument
 
Documentation 
KEY

an object defining the parameter 
VALUE

value stored for the parameter 
USER
OPTIONAL
opx2 user object 

getUserScript (cell)
get user script defined on cell 
Arguments
Argument
 
Documentation 
CELL

cell containing user script 

getValue ()
Allows to retrieve the value of a variable 

getVersionNumber (object)
get version number (useful for retrocompatibility) 1 is default 
Arguments
Argument
 
Documentation 
OBJECT

object with a version number 

getViewDetailsButtonText ()
Just returns a basic text for a details button in teams notifications 

getWidgetParentReportForm (widget)
find parent report form widget 
Arguments
Argument
 
Documentation 
WIDGET

widget 

getWithDefault (attribute, default-value)
Get a value of an attribute on an object, if the attribute does not exists, return the default value 
Arguments
Argument
 
Documentation 
THIS

class 
ATTRIBUTE

attribute 
DEFAULT-VALUE
OPTIONAL
default-value 

getXMLelement (elementname)
Return an element belonging to an XML schema 
Arguments
Argument
 
Documentation 
ELEMENTNAME

Name of the element to retrieve 

getXMLtype (elementname)
Return a type or an element belonging to an XML schema 
Arguments
Argument
 
Documentation 
ELEMENTNAME

Name of the element to retrieve 

get_NEXT_PHASE (prj, gate)
Returns the next phase for a given gate 
Arguments
Argument
 
Documentation 
PRJ

Targeted project 
GATE

Activity 
Syntax examples
var oNextPhase = plw.Get_Next_Phase(oProject,oGate);

get_SELECTED_ELEMENT (class)
This function retrieve the index of the selected object in a table 
Arguments
Argument
 
Documentation 
CLASS

[String] Class of the object 
Syntax examples
Get_Selected_Element("Resource")

gkbmod.DRAWKANBANWITHHANDLER (graphics, styletemplate)
Draw the kanban on graph Pert and Gantt 
Arguments
Argument
 
Documentation 
GRAPHICS

Graphic to consider 
STYLETEMPLATE

Element of Kanban styles table 
Syntax examples
gkbmod.DrawKanbanWithHandler(oGraphics,plc._KB_PT_KANBAN_STYLE.get(5533507199));

globalVarExist ()
Indicate if a global var referenced by a string exists in OPX2 

goToHomePage (nil)
Simulate a click on the 'home' button 
Arguments
Argument
 
Documentation 
nil



gotoversion (version)
Allow to restore a state store in an history version 
Arguments
Argument
 
Documentation 
version

The history version object to restore 

grid_ADDCOLUMNS (slotspec, mode)
Adds a single slot or a vector of slots to a grid 
Arguments
Argument
 
Documentation 
THIS

An object grid or a Graphics object to pick the grid from or a gantt 
SLOTSPEC

A string representing the REAL ID of a slot, or a vector containing strings representing REAL IDs of slots. When passing a vector, any non-string will be discarded 
MODE
OPTIONAL
A mode. Supported modes are: 

grid_ALLOWNEWLINES (enableordisable)
Enables or disables the "Plus line" at the end of a grid 
Arguments
Argument
 
Documentation 
THIS

An object grid or a Graphics object to pick the grid from, or a gantt 
ENABLEORDISABLE

Whether the "Plus line" should be enabled or not 

grid_APPLYSTYLE (style)
Applies the given style to the grid 
Arguments
Argument
 
Documentation 
THIS

An object grid or a Graphics object to pick the grid from 
STYLE

A customization style (as opposed to user-defined styles aka table styles) 

grid_COLUMNPOSITION (slotid)
Returns the position of a particular slot in the grid 
Arguments
Argument
 
Documentation 
THIS

An object grid or a Graphics object to pick the grid from, or a gantt 
SLOTID

A string representing the REAL ID of a slot 

grid_EXPANDORCOLLAPSE (action, grid)
Expands or collapses the specified grid 
Arguments
Argument
 
Documentation 
ACTION

action to perform, should be EXPAND or COLLAPSE 
GRID

the object grid 

grid_EXPANDORCOLLAPSEATLEVEL (action, grid, level)
Expands or collapses the specified grid 
Arguments
Argument
 
Documentation 
ACTION

action to perform, should be EXPAND or COLLAPSE 
GRID

the object grid 
LEVEL

Level to which we will collapse 

grid_GETATTRIBUTES ()
Return the grid attribute list 
Arguments
Argument
 
Documentation 
THIS

An object grid or a Graphics object to pick the grid from or a gantt 

grid_GETATTRIBUTESSTARTWITH (searchpattern)
Return the grid attributes that start with a given pattern 
Arguments
Argument
 
Documentation 
THIS

An object grid or a Graphics object to pick the grid from or a gantt 
SEARCHPATTERN

a pattern that will be used to search the grid attributes 

grid_GETGRID ()
Return the grid 
Arguments
Argument
 
Documentation 
THIS

An object grid or a Graphics object to pick the grid from or a gantt 

grid_GETUSERFILTER ()
get the current user filter of a grid 
Arguments
Argument
 
Documentation 
THIS

an object grid or a graphics who got a grid of type objectgrid 

grid_INSERTCOLUMNS (slotspec, pos)
Inserts a single slot or a vector of slots into a grid at the given position 
Arguments
Argument
 
Documentation 
THIS

An object grid or a Graphics object to pick the grid from or a gantt 
SLOTSPEC

A string representing the REAL ID of a slot, or a vector containing strings representing REAL IDs of slots. When passing a vector, any non-string will be discarded 
POS

The position at which the columns should be added 

grid_MODIFYFILTER (newfilter, mode)
Modifies the filter of a grid 
Arguments
Argument
 
Documentation 
THIS

An object grid or a Graphics object to pick the grid from 
NEWFILTER

A Boolean formula string containing a filter 
MODE
OPTIONAL
How the filter is integrated into the current grid filter: 

grid_REMOVECOLUMNS (slotspec)
Removes a slot or a list of slots from the specified grid 
Arguments
Argument
 
Documentation 
THIS

An object grid or a Graphics object to pick the grid from, or a gantt 
SLOTSPEC

A string representing the REAL ID of a slot, or a vector containing strings representing REAL IDs of slots. When passing a vector, any non-string will be discarded 

grid_REPLACEUSERFILTER (newfilter)
Replace the current user filter of a grid by the new filter given as parameter 
Arguments
Argument
 
Documentation 
THIS

an object grid or a graphics who got a grid of type objectgrid 
NEWFILTER

a string representing a boolean formula (can be empty to reset the user filter) 

grid_SETCOLUMNWIDTH (columnname, newwidth)
Forces a column in a grid (a table) to have the specified width 
Arguments
Argument
 
Documentation 
THIS

an object grid or a graphics who got a grid of type objectgrid 
COLUMNNAME

The name of the column, or a keyword symbol representing it 
NEWWIDTH

The width as a positive integer 

grid_SETSPLIT (attribute, percentage)
Set a split on a grid 
Arguments
Argument
 
Documentation 
THIS

An object grid or a Graphics object to pick the grid from 
ATTRIBUTE

Name of the attribute before which the split will be set 
PERCENTAGE

percentage of the screen at which the split will be set by default 

grid_SETUPMATRIX (prefix, slotids)
Sets up a grid matrix with the provided vector of slot IDs 
Arguments
Argument
 
Documentation 
THIS

An object grid or a Graphics object to pick the grid from, or a gantt 
PREFIX
OPTIONAL
A prefix. If defined, existing slots in the grid that are not specified 
SLOTIDS

A vector of slot IDs (strings) to add 

grid_UNSETSPLIT ()
Remove a split on a grid 
Arguments
Argument
 
Documentation 
THIS

An object grid or a Graphics object to pick the grid from 

groupingcolors (ignore, bckcolor, fontcolor)
Create a grouping color object with both colors 
Arguments
Argument
 
Documentation 
IGNORE

Ignored 
BCKCOLOR

Color used for the grouping background color 
FONTCOLOR

Color used for the grouping font color 

grouplabel ()
Customizable method, allows to specify the label of an object when it is used in a group bar of a table 

guimod._IHM_SETMODULETONEWTOOLINREMINDERLIST (moduleid)
Define the tool present in the reminder list of the module 
Arguments
Argument
Documentation 
MODULEID
Module id (STRING) 
Syntax examples
_ihm_setmoduleToNewToolInReminderList("MODULEID",1111111111)

hasCollaboration ()
This method indicates if an object has collaboration data linked to it 

hash ()
compute the hash of a value 
Arguments
Argument
 
Documentation 
THIS

value 

hash_COPY ()
The copy method for hash tables 
Arguments
Argument
 
Documentation 
THIS

A hash table 

hash_KEYS ()
Retrieves a vector with the keys of the given hash table 
Arguments
Argument
 
Documentation 
THIS

A hash table 

hash_PRETTYPRINT ()
Returns a somewhat human-readable string representation of a hash table 
Arguments
Argument
 
Documentation 
THIS

A hash table 

hash_TOPLIST ()
Retrieves a plist (i.e., a vector with key-value pairs in it) out of a hash table 
Arguments
Argument
 
Documentation 
THIS

A hash table 

hideAllNotifications ()
Hide all notification in the browser 

htmlToText (string)
This function converts a string formated in html into plain text 
Arguments
Argument
 
Documentation 
STRING

Html string to be converted 
Syntax examples
HtmlToText("\\This an example\\
-\> Returns "This an example"

html_COLOR (scolor)
Return the html code of a color 
Arguments
Argument
 
Documentation 
SCOLOR

Color - string 

html_CONVERTHTMLTOSTRING (htmlstring)
Return string result from html conversion 
Arguments
Argument
 
Documentation 
HTMLSTRING

Html string 

html_FINDCLASS (htmlstring, class)
Results returned as a vector 
Arguments
Argument
 
Documentation 
HTMLSTRING

Html string 
CLASS

Class - symbol 

html_FINDTAG (htmlstring, tag)
Results returned as a vector 
Arguments
Argument
 
Documentation 
HTMLSTRING

Html string 
TAG

Tag - string 

html_GETCIDINFOFROMHTMLMAILBODY (body)
Returns results in a vector 
Arguments
Argument
 
Documentation 
BODY

Body 

html_IMGUPDATE ()
Return an updated list 

html_INNERCONTENT (parsed)
Return inner content 
Arguments
Argument
 
Documentation 
PARSED

Array 

html_OBJECTURL ()
Return an url corresponding to the current object (this). 

html_PAGEURL (pageid)
Return an url corresponding to a page Id 
Arguments
Argument
 
Documentation 
PAGEID

Page Id 

html_PAGEURLWITHDISPATCH (pageid)
Return an url corresponding to a page Id, using the dispatch 
Arguments
Argument
 
Documentation 
PAGEID

Page Id 

html_PARSEHTMLSTRING (string)
Return parse html result 
Arguments
Argument
 
Documentation 
STRING

String to parse 

html_RECURCIVEUPDATE (parsed, searchedtag, updatefunction)
Return recurcively updated results 
Arguments
Argument
 
Documentation 
PARSED

Array 
SEARCHEDTAG

Searched tag 
UPDATEFUNCTION

Update function 

html_REMOVETAGSBYNAME (string, tagname)
Remove all tags <tag> and </tag> inside a string. 
Arguments
Argument
 
Documentation 
STRING

string to update - String 
TAGNAME

tag to remove - string 

html_TAGAONIMG (href, imgtagsrc, imgtagheight, imgtagwidth, imgtagalt, imgtagborder, linkcss, target)
Return a valid <a> tag with inside a <img> tag 
Arguments
Argument
 
Documentation 
HREF

Href 
IMGTAGSRC

Img source 
IMGTAGHEIGHT

Img height 
IMGTAGWIDTH

Img width 
IMGTAGALT

Img alt 
IMGTAGBORDER

Img border 
LINKCSS

CSS 
TARGET

Target 

httpistream (url, auth, query, chunksize)
Creates an HTTP stream to download chunked binary data. A series of GET requets will be issued to receive chunks of data, which are then accessed by reading byes from the string. When a chunk has been fully read, a new request is issued to get a new chunk. The transfer is considered complete when reading bytes returns nil. 
Arguments
Argument
 
Documentation 
THIS

Ignored 
URL

The url to which chunks of data will be sent (a planisware binary-data-url) 
AUTH

The authentication object for the target url (keyword argument, defaults to nil) 
QUERY

A plist of query arguments to identify the data to download (specific to the handler installed with the binary-data-url, keyword argument, defaults to nil) 
CHUNKSIZE

The size of chunks to get (keyword arguments, defaults to 2^20) 

httpistreammessage ()
Returns the content of the last response when failing to read from an http istream 
Arguments
Argument
 
Documentation 
THIS

An http istream 

httpistreamstatus ()
Returns the HTTP status of the last request performed when reading from an http istream 
Arguments
Argument
 
Documentation 
THIS

An http istream 

httpostream (url, auth, chunksize)
Creates an HTTP stream to send chunked binary data. Every chunk-size bytes written to the stream, a POST request will be issued to the specified URL (which is expected to be a Planisware binary data URL) with the last chunk of data. The buffer is flushed when closing the stream, which ccompletes the transfer. 
Arguments
Argument
 
Documentation 
THIS

Ignored 
URL

The url to which chunks of data will be sent (a planisware binary-data-url) 
AUTH

The authentication object for the target url (keyword argument, defaults to nil) 
CHUNKSIZE

The size of chunks to post (keyword arguments, defaults to 2^20) 

httpostreammessage ()
Returns the content of the response to the last request performed when sending bytes to an http ostream 
Arguments
Argument
 
Documentation 
THIS

An http ostream 

httpostreamstatus ()
Returns the HTTP status of the last request performed when sending bytes to an http ostream 
Arguments
Argument
 
Documentation 
THIS

An http ostream 

imageFromFile ()
Generates an image from a file. 

impexmod.CLEARERRORSELECTIONTABLE ()
Clear Impex selected errors table 
Syntax examples
impexmod.clearErrorSelectionTable();

impexmod.EXPORTIMPEXTARGET (target, format)
Export with an impex target object 
Arguments
Argument
 
Documentation 
TARGET

[Object] Target to import 
FORMAT

[Object] Format to export 
Syntax examples
impexmod.exportImpexTarget(otarget);

impexmod.FILLERRORTABLE ()
Fill errors table based on a given Impex event 
Syntax examples
impexmod.fillErrorTable();

impexmod.IMPORTIMPEXTARGET (target)
Import an Impex Target object 
Arguments
Argument
 
Documentation 
TARGET

[Object] Target to import 
Syntax examples
impexmod.importImpexTarget(oTarget);

impexmod.PERFORMIMPEXIMPORTAPI ()
Perform an Impex import 
Syntax examples
impexmod.performImpexImportAPI();

impextruncatetargettable (target, format)
Truncates the destination table of an impex format 
Arguments
Argument
 
Documentation 
TARGET

An impex target (this) 
FORMAT

An impex format 

importUserParameters (file)
Import a set of user parameters backuped in a file build with exportUserParameters 
Arguments
Argument
 
Documentation 
THIS

User name or user 
FILE
OPTIONAL
file name, if not specified a dialog is open 

importWord (docx-name, insert-point, id-field, text-field, dataset, get-id-fun)
This function inserts an OBS build from the structure of the Word 2007 document 
Arguments
Argument
 
Documentation 
DOCX-NAME

Path to the docx file 
INSERT-POINT

Object that will be the root of the tree of object that is to be created 
ID-FIELD

Name of the field the id of the item will be inserted in [default : NAME] 
TEXT-FIELD

Name of the field the text of the item will be inserted in [default : NOTE-PAD] 
DATASET

Dataset in which created objects are inserted [default : return value of gio::default-dataset] 
GET-ID-FUN

String name of a script function that returns a unique ID each time it is called [default : function that returns ITEM-index-value% with index-value% being incremented] 
Syntax examples
importWord("C:/Temp/MyDocXFile.docx" treeFather 
 0 );
WriteToLog("No need to concatenate ~a and ~a before logging, I just need to use a ~a format string","a first string","a second string","correct");

indexAllDocuments ()
Generate indexes for all documents stored in a database. This function is usefull to index documents that have not been uploaded throw a P5SP1 

initcalendardata ()
Init the hashtable of the widget, with the objects defines with the mapper of the widget and refresh the widget. 
Arguments
Argument
 
Documentation 
THIS

graphics 

inLanguage (language, attribute)
Returns a string which is a print form of an object attribute in the specified language 
Arguments
Argument
 
Documentation 
LANGUAGE

String the langiage used to print the object attribute 
ATTRIBUTE

String, the name of the attribute 

insertElement (class, object, after)
Insert cell 
Arguments
Argument
 
Documentation 
CLASS

class of the cell 
OBJECT

Cell where the object should be added 
AFTER

Insert left or right of the object 

insertObjectInReport (widget, class, obj, insert-after?)
Insert object into a report 
Arguments
Argument
 
Documentation 
WIDGET

widget 
CLASS

class of the cell 
OBJ

object 
INSERT-AFTER?

Insert left or right 

installTeamsAppForThisUser (teams-connector, user-teams-id, teams-app-id-from-manifest)
Install the Teams Notification application for this user 
Arguments
Argument
 
Documentation 
TEAMS-CONNECTOR

Talk Teams Connector 
USER-TEAMS-ID

The user Teams ID (or Microsoft ID) 
TEAMS-APP-ID-FROM-MANIFEST

This is the ID from the application manifest (also known as external App ID) 

internalState ()
Returns information about the internal state of the application (intranet mode, initialiazing intranet, etc). You can access every information returned by the object directly : return internalstate().intranet; for example. 

interrupt (string)
Cause the current OPX2 script program to be interrupted, usefull to debug programs 
Arguments
Argument
 
Documentation 
STRING
OPTIONAL
information given when the program interrupts 

ip (data)
Returns a string that is a deep inspection of this 
Arguments
Argument
 
Documentation 
DATA

(this) data to inspect 

isanextendedscreenset ()
Returns true if called on a presentation that is used for extended enterprise. 

isanextendedserver ()
Returns true if the current process is running in Planisware Extended mode. 

isAttributeInitializable ()
Return true if an attribute can be set at object initialization. 

isClassBreakdownstructure ()
check if a class is a tree structure 
Arguments
Argument
 
Documentation 
THIS

class 

isdirectory ()
Tests if the pathname given as this is a directory 

isearch ()
searches for objects of a given class given a rough identifier or description 

isEmailSentByAccountServiceUser (graph-connector, email-htable)
Function to check if an email was sent from a service account 
Arguments
Argument
 
Documentation 
GRAPH-CONNECTOR

Exchange Graph API connector to use 
EMAIL-HTABLE

The email as defined by the Graph API 

isempty (key)
Indicates if an entry of a resource array is empty 
Arguments
Argument
 
Documentation 
THIS

Resource array 
KEY

Entry of the resource array 

isExceptionNumber (number)
Test if a number is an exception excl::exceptional-floating-point-number-p/excl::nan-p 
Arguments
Argument
 
Documentation 
NUMBER

number to test 

isFiscalUnit (time-unit)
determines if a time unit is a fiscal one 
Arguments
Argument
 
Documentation 
TIME-UNIT

time unit to assess 

isFormulaAlwaysTrue ()
Check if a boolean formula will always be evaluated as true (ex "", TRUE) 
Arguments
Argument
 
Documentation 
THIS

formula 

isGantt (gantt)
is Gantt 
Arguments
Argument
 
Documentation 
gantt

extracted pane chart 

ishtml (string)
Assert if a text is an html one 
Arguments
Argument
 
Documentation 
STRING

[string] text to test 
Syntax examples
ishtml("\this is a test\");

isimage ()
Return true if the image if of a supported format, false otherwise 
Syntax examples
"image.png".isimage()

isIterativeBlock (object, widget)
Returns report printer 
Arguments
Argument
 
Documentation 
OBJECT

Block to be tested 
WIDGET

Report builder widget 

isL1PopupBuilder (object)
Returns a boolean indicating whether the object is an element of an L1 Form 
Arguments
Argument
 
Documentation 
OBJECT

report, cell or tabreport 

isL1ReportBuilder (object)
Returns a boolean indicating whether the object is an element of a tab report 
Arguments
Argument
 
Documentation 
OBJECT

report, cell or tabreport 

isLoadArray (load-array)
is Load Array 
Arguments
Argument
 
Documentation 
load-array

extracted pane chart 

isLoadChart (load-chart)
is load chart 
Arguments
Argument
 
Documentation 
load-chart

extracted pane chart 

isLocked (specification)
Method you can implement on your class to define dynamically when an object is locked 
Arguments
Argument
 
Documentation 
THIS

An object 
SPECIFICATION

A list of field to test the lock against 

isMonitoringEnabled ()
Returns true if the monitoring has been activated false otherwise 

isObjectBeingRemoved ()
Return true if the object used as this is currently being removed, either directly of because another object is being removed 

isObjectCompatible (object)
Check whether an object can be added to a presentation. It can be added if and only if the object type is compatible with the types of the objects the slides of the presentation apply to. Objects are compatible of there are of the same type. OPX2 context is compatible with any other object type. Therefore, a presentation is compatible with only one type of object, but slides on the context can always be added 
Arguments
Argument
 
Documentation 
OBJECT

Object to check 
Syntax examples
myPresentation.isObjectCompatible(pageObject);

isReportEmpty (object)
Generic method that commit a set a changes, it is implemented on tab-report to save the changes of the underlying pro report 
Arguments
Argument
 
Documentation 
object

report or tabreport 

isResourceAllocationGantt (alloc-gantt)
is resource allocation Gantt 
Arguments
Argument
 
Documentation 
alloc-gantt

extracted pane chart 

isResourceLoadChart (resource-load-chart)
is resource load chart 
Arguments
Argument
 
Documentation 
resource-load-chart

extracted pane chart 

isSimulationFlagLocked (simulation)
Checks if there is a lock on a given simulation in database 
Arguments
Argument
 
Documentation 
SIMULATION

the simulation which we want to check 

isSlot (slot)
Returns true if the argument is a slot on the given object class 
Arguments
Argument
 
Documentation 
THIS

Object class 
SLOT

Identifier of the slot 

isTalkPythonActivated ()
Checks whether Python is activated or not, to know if we can send and receive emails. 

isTeamsAppInstalledForThisUser (teams-connector, user-teams-id, teams-app-id-from-manifest)
Check if the Teams Notification application is installed for this user 
Arguments
Argument
 
Documentation 
TEAMS-CONNECTOR

Talk Teams Connector 
USER-TEAMS-ID

The user Teams ID (or Microsoft ID) 
TEAMS-APP-ID-FROM-MANIFEST

This is the ID from the application manifest (also known as external App ID) 

isTempAttribute (attribute)
Tell if an attribute has been declared using declaretempattribute on a class 
Arguments
Argument
 
Documentation 
THIS

class 
ATTRIBUTE

attribute name 

isTouchEnabledClient ()
returns true if the client is a mobile device 

isValidUrl ()
Check if the given string is a valid url. Returns true if it is valid, false otherwise. See RFC 2396 
Arguments
Argument
 
Documentation 
THIS

the string to check 
Syntax examples
"http://server/path?query".isValidUrl

isvisibleindataset ()
Returns True if an this is visible in the dataset in argument 
Arguments
Argument
 
Documentation 
THIS

Dataset 

iterAsString (string)
iter over string character as string. Handle utf8 characters 
Arguments
Argument
 
Documentation 
STRING

a string 

jsondeserialize (stream)
Deserialize a json into a structure of cons, see jsonserialize. Objects are not dumped, only their type and identifier is exported. 
Arguments
Argument
 
Documentation 
STREAM

stream 

jsonserialize (object, stream)
Serialize a structure of cons into json. Objects are not ddumped, only their type and identifier is exported. 
Arguments
Argument
 
Documentation 
OBJECT

object 
STREAM

stream 

jsonversionsmod.CREATENEWPROJECTVERSION (project, allinterprojectlinks, asyncinterprojectlinks, versionstatus, versiondoc)
Creates a project version 
Arguments
Argument
 
Documentation 
PROJECT

A project 
ALLINTERPROJECTLINKS

[Boolean] Defines if all inter-project links are copied in version 
ASYNCINTERPROJECTLINKS

[Boolean] Defined if asynchroneous inter-project links are copied in version 
VERSIONSTATUS

[String] Content of version status 
VERSIONDOC

[String] Content of version documentation 
Syntax examples
vers = jsonversionsMod.createNewProjectVersion(plc.OrdoProject.get("SOME_PROJECT"))
vers = jsonversionsMod.createNewProjectVersion(
plc.OrdoProject.get("SOME_PROJECT"),
allInterProjectLinks : false,
asyncInterProjectLinks : true,
versionStatus : #Working#,
versionDoc : "Some doc for this version");

jsonversionsmod.GETLATESTPROJECTVERSION (project)
Gets latest version object associated to a project 
Arguments
Argument
 
Documentation 
PROJECT

A project 
Syntax examples
var oLatestVersion = jsonversionsmod.getLatestProjectVersion(oProject);

jsonversionsmod.MERGEVERSIONINPROJECT ()
Merge selected version with the current project 
Syntax examples
jsonversionsmod.mergeVersionInProject();

jsonversionsmod.PREVIEWRESTORATIONOFVERSIONINPROJECT ()
Merge or restore selected version with preview of restoration errors 
Syntax examples
jsonversionsmod.PreviewRestorationOfVersionInProject();

jsonversionsmod.RESTOREVERSIONINPROJECT (optionspopup, askconfirmation)
Restore selected version on current project 
Arguments
Argument
 
Documentation 
OPTIONSPOPUP
OPTIONAL
default = true): if true, a popup will allow to override some global restoration settings 
ASKCONFIRMATION
OPTIONAL
default = true): if true, a popup will ask whether we really want to restore the project 
Syntax examples
jsonversionsmod.restoreVersionInProject();

kernelJsonVersionsEnabled ()
Returns true of the kernel handles version creations using json import export 
Arguments
Argument
 
Documentation 
THIS

ignored 

kernelProfilerStatus ()
Indicates the status of the kernel profile 

keywordformat (str, arglist)
Substitutes identified substrings with values passed in an argglist. Example: "I'm with {{who}}".keywordFormat(new vector("who", "the band")) 
Arguments
Argument
 
Documentation 
STR

(this) string, the string into which the substrings will be replaced 
ARGLIST

vector or list, the values used to perform the substitutions 

lastpublishedversion ()
Get the last published version from a template 
Syntax examples
var plc.excelworkbook version = template.LastPublishedVersion();

lasttransaction ()
Returns the last transaction on an object that is not hidden. 

launch ()
Launches a MonteCarlo simulation 

library_INSERTSELECTEDACTIVITIESANDLINKS ()
Launch insertion of activities and related links from selected library (context.WBS_LIBRARY_FORM) 
Arguments
Argument
 
Documentation 
THIS

Context 
Syntax examples
context.library_InsertSelectedActivitiesAndLinks()

lineToY (line)
Give the y coordinates of the given line of a gantt 
Arguments
Argument
 
Documentation 
THIS

A graphics (the first gantt in it will be used) or a gantt 
LINE

A multiline object 

lispeval (string)
Internal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal Use OnlyInternal Use OnlyInternal Use OnlyInternal Use OnlyInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseEvaluate a Lisp expression contained in a string 
Arguments
Argument
 
Documentation 
STRING

String to evaluate 

lisptype (value)
Returns the lisp type of a value 
Arguments
Argument
 
Documentation 
VALUE

The value you want to know the lisp type of 

listPossibleValues (string)
Method on a class that returns the list of possible internal values of an attribute 
Arguments
Argument
 
Documentation 
STRING

a string object representing an attribute name 

listPossibleValuesStrings (string)
Method on a class that returns the list of possible external values (strings) of an attribute 
Arguments
Argument
 
Documentation 
STRING

a string object representing an attribute name 

listPossibleValueStrings (string)
Method on a class that returns the list of possible external values (strings) of an attribute 
Arguments
Argument
 
Documentation 
STRING

a string object representing an attribute name 

listreplaceablefunctions ()
Lists all available wrappable functions. 

listSlots (object)
List slot(s) of an object or a class 
Arguments
Argument
 
Documentation 
OBJECT

This : an object or a class on which listing slot(s) 

listwrappablefunctions ()
Lists all available wrappable functions. 

listwrappers ()
Returns the list of wrappers defined on a wrappable function. 
Arguments
Argument
 
Documentation 
THIS

A wrappable function 

load (directory)
Loads a lisp lsp, OPX2 script ojs, Binary fasl, Archive opx or MPX mpx file, can also load an OPXDocument, in this last case the document is loaded from the OPX2 database and stored in a file in a directory. The directory can be specified with the directory argument, and the path of the document file is returned from the function 
Arguments
Argument
 
Documentation 
DIRECTORY
OPTIONAL
string directory where the file is loaded or the document restored 

loadDocumentTo (path)
Dump the content of a document to the given file 
Arguments
Argument
 
Documentation 
THIS

A document 
PATH

String, path to store the document content 

loadopx2usersparametersifneeded (user)
Load user parameters for the specified user 
Arguments
Argument
 
Documentation 
USER

The user selected for the user parameter load 

lom_UPDATELASTSELECTEDMENU (class, slotid, idlist, object)
For example, for a field which is a selection of WBS, the last opened menu must be different for each project 
Arguments
Argument
 
Documentation 
CLASS

String class of the slot 
SLOTID

String ID of the slot 
IDLIST

String Value to add to the menu 
OBJECT

Object object use to differenciate menus 

lsp_EXPORTMULTIPLEOBJECTS (selection)
Return result file 
Arguments
Argument
 
Documentation 
SELECTION

selection 

makeAppletState (intranet-page, object, report, context-attributes, folders)
This function creates an object representing the state of the applet (which report is displayed on which object...) 
Arguments
Argument
 
Documentation 
INTRANET-PAGE

The intranet page the applet is displaying 
OBJECT

The applet current object 
REPORT
OPTIONAL
the report currently displayed 
CONTEXT-ATTRIBUTES
OPTIONAL
A plist of essential attributes to be set on the context when restoring this state. This argument can also be a string, in which case it will be interpreted as the result of a call to getcontextdata, and restored as such. 
FOLDERS
OPTIONAL
A list of selected elements (folder description) in the displayed folders 
Syntax examples
makeAppletState(page,object);

makeCookieJar ()
Make / Create a cookie container, return the cookie container 

makeCostFieldInternal (args)
Create a cost fields without any checking on the arguments provided 
Arguments
Argument
 
Documentation 
ARGS

multiple arguments (slot, internal value) (as in makeopx2object) 

makeexportmacro (target, name)
Creates a macro to export data to an identified target (see class opxImpexTarget). 
Arguments
Argument
 
Documentation 
TARGET

string, the opxImpexTarget instance used for the data import 
NAME

string, a name that identifies the macro 

makeimportmacro (target, name, commit)
Creates a macro to import data from an identified target (see class opxImpexTarget). 
Arguments
Argument
 
Documentation 
TARGET

string, the opxImpexTarget instance used for the data import 
NAME

string, a name that identifies the macro 
COMMIT
OPTIONAL
boolean, default is true, by default data is really imported 

makeSelection (objects)
Select the objects in the given table 
Arguments
Argument
 
Documentation 
THIS

A table (grid object) 
OBJECTS

List of object to select 

makestatusreportnlpdict (words, statusreportname, dataset)
Adds an attribute entry in the bot dictionnary for a given status report 
Arguments
Argument
 
Documentation 
THIS

ignored 
WORDS

list of words that identify the attribute in a sentence 
STATUSREPORTNAME

name of the status report 
DATASET

dataset where the entry will be stored 

maketimeunitform (name, time-unit, printer, presentation)
Create a new time unit form according to the arg list. 
Arguments
Argument
 
Documentation 
NAME

name of time unit form 
TIME-UNIT

smallest time unit used, for ex YY/MM -> month 
PRINTER

function used to print the result 
PRESENTATION

presentation displayed in picklist, for ex YY-MM 

map (function, arguments)
This function is used in the for form, if you want to use the for iterator form on a specific class, you have define a map method for this class 
Arguments
Argument
 
Documentation 
FUNCTION

any function object, see [call] function 
ARGUMENTS

[list of arguments] arguments of the [for] form 

mapc (function)
Script V2 Apply the function to all the elements of the iterable object given as this and returns a list with all the elements returned by the function 
Arguments
Argument
 
Documentation 
THIS

An iterable object (ie the method map must be defined on it) 
FUNCTION

The function that will be called on all elements. The element will be the this 
Syntax examples
[1,2,3].mapc(function () { return this * 3;});
Returns : (3 6 9)

mapcompletionlines ()
Calls a function on each line of a completion, with an optional regexp that can be used to filter the lines 

mapCSVLines (function, path, csvseparator, stringdelimiter, hasheader)
Maps the lines of a CSV file. 
Arguments
Argument
 
Documentation 
FUNCTION

JS function name, or a symbol bound to a function that takes a plist column_key->field_value, the line number (starting from 1) and the number of columns read on the line 
PATH

path to the CSV file (as a string or filename) 
CSVSEPARATOR

character or string (in which case only the first char is used), or false to use the default value (comma) 
STRINGDELIMITER

character or string (in which case only the first char is used), or false to use the default value (double quote) 
HASHEADER

boolean; if true the first line of the CSV will be used to generate the keys of the plist provided to the mapper otherwise the keys will be :COLUMN_1, :COLUMN_2, ..., :COLUMN_p. 

mapDocsToIndex (object, f)
Map string and slot of an index. Used by indexation 
Arguments
Argument
 
Documentation 
OBJECT

object 
F

A function that take an object attribute and a string 

mapSlotStrings (object, f)
Map string and slot of an index. Used by indexation 
Arguments
Argument
 
Documentation 
OBJECT

object 
F

A function that take an object attribute and a string 

mapSlotStringsRelation (object, f)
Use to implement mapslotstrings on new classes. It calls mapslotsting on relation attribute with slots path to the object in relation 
Arguments
Argument
 
Documentation 
OBJECT

func 
F

A function that take an object attribute and a string 

mapTypeDate (mapper)
Call the mapper given as argument on all existing date types. 
Arguments
Argument
 
Documentation 
MAPPER

a mapper function 
Syntax examples
maptypedate(toto.closure())

mapusernewattributetype (mapper)
Call the mapper given as argument on all existing user new attribute types. 
Arguments
Argument
 
Documentation 
MAPPER

a mapper function 
Syntax examples
plw.mapusernewattributetype(function(l) { plw.pr(this,l); }

mapwithfunction (function)
Map a vector/list, apply a function on each element and returns a vector/list of results 
Arguments
Argument
 
Documentation 
THIS

vector/list 
FUNCTION

function 

matchregexp (regexp, start, end)
Matches a regexp on the string given as this. Returns the matched string or false if there is no match. 
Arguments
Argument
 
Documentation 
THIS

String 
REGEXP

Regexp 
START
OPTIONAL
Start of the search 
END
OPTIONAL
End of the search 

matchtofilter (filter)
test if an object matches a filter (type filter) 
Arguments
Argument
 
Documentation 
THIS

object 
FILTER

filter to match against 

md5 (string)
Generate the md5 for the given argument 
Arguments
Argument
 
Documentation 
STRING

the string to encode 

md5hash ()
Get the MD5 hash of a file 
Arguments
Argument
 
Documentation 
THIS

object 

mergeCellsRb ()
Generic method that merge two or more cells. 

mergeFilters (filter1, filter2, mode)
merge 2 filter using AND operator 
Arguments
Argument
 
Documentation 
FILTER1

filter 1 
FILTER2

filter 2 
MODE
OPTIONAL
Overwrite if needed 

mergeItems (items, id, operator, shadowed)
Allows to merge a set of lines of cost table in one line applying an aggregation operator (see defineMeasureAggregator. The this is the cost table used. The function returns the MergedItem 
Arguments
Argument
 
Documentation 
ITEMS

set of items mappable using the map method 
ID
OPTIONAL
ID used to replace the merged objects 
OPERATOR

String of symbol representing the ID of a measure aggregator, see definemeasureaggregator 
SHADOWED
OPTIONAL
boolean indicates if the merged objects is visible by default 

messagestring (language)
Returns the the current language string associated to a message-string object. If this is a string, returns the string. 
Arguments
Argument
 
Documentation 
THIS

The message string object 
LANGUAGE
OPTIONAL
The wanted language. By default the current language. 

messageStringAppend (message-strings)
Build a message-string from a message-string list 
Arguments
Argument
 
Documentation 
THIS

Unused 
MESSAGE-STRINGS

List of message-string 

messageStringFormat (format, values)
Build a message-string from a message-string format directive and values 
Arguments
Argument
 
Documentation 
FORMAT

A message string representing a multilingual format directive 
VALUES

Any number of message-strings as values 

mkDir ()
Allows you to create a new directory in the file system 

modifywithobject (source, vector)
Modifies an object with the contents of another object 
Arguments
Argument
 
Documentation 
SOURCE

Source object 
VECTOR
OPTIONAL
vector of attributes not no be copied 

modulo ()
Return the modulo of arg1 and arg2.NB: it works with negative numbers.(Example : modulo(-380,360)=> -20 and -380%360 => 340 

multipleintegratelines (lines)
Integrates the lines given as argument 
Arguments
Argument
 
Documentation 
lines

The list of lines to integrate 

nan ()
Return a valid NAN value (double precision). 

nativeComment (ignore, object-attribute, language)
Returns native commment of a cost table field; before it being modified by id-handler function 
Arguments
Argument
 
Documentation 
IGNORE

ignore 
OBJECT-ATTRIBUTE

object attribute of a cost table 
LANGUAGE
OPTIONAL
language of the result 

next (timeunit)
Allows you to get the next date after a given date in a given time unit 
Arguments
Argument
 
Documentation 
TIMEUNIT

String: Time unit 

normalizeMS (data)
Given a polymorphic message string (string, text key, SEXp (eval ....) or message string ), returns a regular message string 
Arguments
Argument
 
Documentation 
DATA


Syntax examples
 //To retrieve a curve label as a message string:
var label = lispcall "dod-curves::dod-curve-type-string-ms" (obj) ;
  if(label instanceof String){
    label = get_text_key_message_string(label);
  }
  if(label instanceof Array){
    label = normalizeMS(label);
  }

notifyUserViaTeams (teams-user-id, message)
Notify a user by sending a message 
Arguments
Argument
 
Documentation 
TEAMS-USER-ID

User ID provided by Teams 
MESSAGE

Message to send. It must be in JSON format 

numberof (sequence, item, start, end, test, key)
count number of times an item is present inside a sequence 
Arguments
Argument
 
Documentation 
SEQUENCE

sequence in which item is to be count 
ITEM

item to count 
START
OPTIONAL
start of count in sequence 
END
OPTIONAL
end of count in sequence 
TEST
OPTIONAL
test function 
KEY
OPTIONAL
accessor function 

numberofactivities ()
Return the number of activities in a project or a virtual dataset 
Arguments
Argument
 
Documentation 
THIS

A project or a virtual dataset 

numberofObjects ()
Method that gives number of objects for a class (this) 
Arguments
Argument
 
Documentation 
THIS

An object class 
Syntax examples
"Opxproject".findclass().numberofObjects();

objectAppletState ()
This method must return the result of makeAppletState to describe the page an report to be displayed when linking to this object 
Syntax examples
return makeAppletState("OpxIntranetPage".get("PM_HOME"),this);

objectLabelInPopupTitle ()
Customizable method, returns the label to be used when displaying a modification popup on an object 

objectlib.EXCLUDEDRELATIONSORIGINCLASS ()
exclude relation of object class that have those origin class (ObjectRelation.descriptor.origin_class). Should return a vector of class (plc. ...). 
Syntax examples
objectLib.excludedRelationsOriginClass();

objectSet (set)
Create an object set that can be used in a fromobject statement 
Arguments
Argument
 
Documentation 
SET

defined as multiple arguments 

offlineExport (page, object, excelversion)
Allows to export a page in Excel 
Arguments
Argument
 
Documentation 
PAGE

Intranet page to be exported 
OBJECT

Object to export the page on 
EXCELVERSION

Version to be used, either "XL97", "XML" or "OOXML". If any of these, system default XML export is used 

onAutoLoad ()
Method called when autoloading an object. 
Arguments
Argument
 
Documentation 
THIS

This : Object being autoloaded 

oncellmodification (cell, sheet)
Called when cell value is set 
Arguments
Argument
 
Documentation 
CELL

cell 
SHEET

sheet 

oncopyworkbook (new, old)
Called when a workbook is copied 
Arguments
Argument
 
Documentation 
NEW

newly created workbook 
OLD

source workbook 

ondoubleclickoncontainer (obj)
Called when double click on container while in level1 report-builder 
Arguments
Argument
 
Documentation 
OBJ

selected container 

ondropOutsidecells (widget, dropid, x, y)
change cell icon depending on the type of the cell 
Arguments
Argument
 
Documentation 
WIDGET

widget 
DROPID

drop id 
X

x axis 
Y

y axis 

onremoveworkbook (excel-workbook)
Called when remove-object is call on an excelworkbook. Cancel transaction of it returns false. 
Arguments
Argument
 
Documentation 
EXCEL-WORKBOOK

excelworkbook 

open (read_only)
Allows to open a dataset or a list or vector of datasets 
Arguments
Argument
 
Documentation 
READ_ONLY
OPTIONAL
boolean null by default 

openlistofprojects (projectslist)
Open a list of projects 
Arguments
Argument
 
Documentation 
PROJECTSLIST

Vector of projects 

openproject ()
Activate the hyperlink used to open a project 

opximage_CHOOSEIMAGEFILE (popuplabeltextkey)
Select an image to import 
Arguments
Argument
 
Documentation 
POPUPLABELTEXTKEY

Text key for pop up message 

pac_GET_NEXT_TO_SUBMIT_GATE_ON_PROJECT ()
Stage and Gate: retrieve next gate to submit in a project 
Arguments
Argument
 
Documentation 
THIS

[Object] Targeted project 
Syntax examples
var oNextGate = plw.pac_get_next_to_submit_gate_on_project(this : oProject)

parallelCall (set, other-args, copy-context, lock-object, monitor-string, disable-daemons, disable-historization, nbthreads, optimize-data-loading-and-creation)
Call any object where the call method is defined on, on an object belonging to the set object passed as argument. In V6 each call is done on a separate thread, the function returns when the computation is done. 
Arguments
Argument
 
Documentation 
SET

Set of objects where the map method is defined on, each object is the first argument of the call 
OTHER-ARGS
OPTIONAL
set of other arguments passed to the called object 
COPY-CONTEXT
OPTIONAL
boolean, copy the context if true, so changes on the context are not repercuted on the initial context, default value is false 
LOCK-OBJECT
OPTIONAL
object or set of objects to lock while during the computation, 
MONITOR-STRING
OPTIONAL
message that displays progress of the computation 
DISABLE-DAEMONS
OPTIONAL
defaut is true, disable all side effets linked to object creation/modification/removal like alsrts,workflows or on new,modify,delete triggers 
DISABLE-HISTORIZATION
OPTIONAL
default is true, disable historization while removing objects 
NBTHREADS
OPTIONAL
number of threads that are used during the computation, 
OPTIMIZE-DATA-LOADING-AND-CREATION
OPTIONAL
if set to true, data creation and loading performance will be improved but it will cost some time to initialize. 

parseDate (format, start, end)
Parse a string and returns a date 
Arguments
Argument
 
Documentation 
FORMAT
OPTIONAL
string representing an OPX2 date format 
START
OPTIONAL
integer start of the string to parse 
END
OPTIONAL
integer end of the string to parse 

parseDuration (format, start, end)
Parse a string and returns a duration (integer in minutes) 
Arguments
Argument
 
Documentation 
FORMAT
OPTIONAL
string representing an OPX2 duration format 
START
OPTIONAL
integer start of the string to parse 
END
OPTIONAL
integer end of the string to parse 

parsehtml (string)
Parse the html string 
Arguments
Argument
 
Documentation 
string

tThe string to parse 

parseInt (format, start, end)
Parse a string and returns an integer 
Arguments
Argument
 
Documentation 
FORMAT
OPTIONAL
string representing an OPX2 number format 
START
OPTIONAL
integer start of the string to parse 
END
OPTIONAL
integer end of the string to parse 

parsejavastring (string)
Parse string value of a script content 
Arguments
Argument
 
Documentation 
STRING

string 

parseNumber (format, start, end)
Parse a string and returns a number 
Arguments
Argument
 
Documentation 
FORMAT
OPTIONAL
string representing an OPX2 number format 
START
OPTIONAL
integer start of the string to parse 
END
OPTIONAL
integer end of the string to parse 

parseObject (start, end)
Parse a string and returns an OPX object 
Arguments
Argument
 
Documentation 
START
OPTIONAL
integer start of the string to parse 
END
OPTIONAL
integer end of the string to parse 

parseRequest ()
Parse a request. 

pasteContainerLevel1 (target, item)
Paste query/layout/kanban cells 
Arguments
Argument
 
Documentation 
TARGET

position where object are pasted 
ITEM

object in clipboard 

pasteto (object)
Paste clipboard object in the selection 
Arguments
Argument
 
Documentation 
OBJECT

The object to paste on 

pasteto_fulllist (obj)
Returns the complete list of pasted item 
Arguments
Argument
 
Documentation 
OBJ

the object to paste 

pbp (date)
return payback period of a curve or aggregation 
Arguments
Argument
 
Documentation 
THIS

Curve or aggregation 
DATE

reference date 

periodstart (date, time-unit-name, nbperiods)
Returns the start of the period according to the given time unit. 
Arguments
Argument
 
Documentation 
DATE

The date. 
TIME-UNIT-NAME

The time unit 
NBPERIODS
OPTIONAL
The number of periods, by default 0. 

plist ()
Returns a plist object you can iterate on. In script V2, you can use a double iterator. For example : Script v2 : for (var (k,v) in myobject.plist()) { plw.pr(k,v);} 
Arguments
Argument
 
Documentation 
THIS

An array, vector, list or object 

plm_CREATIONFORM_DRAWPRODUCTIMAGE ()
On an editor, draws the product image linked to current editor object (Activity, user or BOM Configuration) 
Syntax examples
this.editor.setPlist("PLM_CREATIONFORM_CURRENTPRODUCTIMAGE", plw.plm_creationForm_drawProductImage(this : this));

pmmod.ACTSYNCHRONISEWITHLINKONOBJ (oobject)
Synchronizes a set of selected activities, or all activities in a project if no selection 
Arguments
Argument
 
Documentation 
OOBJECT

A project or virtual dataset 
Syntax examples
pmmod.actSynchroniseWithlinkOnObj(oProject);

pmmod.CREATELISTOBJECTSREPRESENTATION (oclass, slotsymbol)
Create an html representation of a field of type list 
Arguments
Argument
 
Documentation 
oClass

The object class on which the field is to be read and created 
slotSymbol

#SLOT_NAME#, internal name of the field that need to be represented. 
Syntax examples
pmMod.createListRepresentation(plc.OrdoProject, #PROJECT_MANAGER#);

pmmod.INSERTTEMPLOBJECTSTOOL (setting_id)
Used in a toolbar tool to enable the multiple template objects insertion feature on a defined class. Triggers the display of an insertion pop up whose layout should be configured by a setting in Admin module data table "Template objects insertion parameters". 
Arguments
Argument
 
Documentation 
SETTING_ID

[String] Identifier of the administration setting that sets the insertion pop up parameters. 
Syntax examples
pmmod.insertTemplObjectsTool("sAdminSettingId");

pmmod.TIMELINESELECTDATE ()
Select end or start date in double calendar widget 

pngIsEnable ()
Return true if a png is building. It is useful to know if you need to use colorToBgr(that means the color are inverted) 
Arguments
Argument
 
Documentation 
THIS

ignore 

pnlFormulaHasAnExcelImplentation ()
given a PNL function name, return true when this function can be translated into Excel and false otherwise 
Arguments
Argument
 
Documentation 
THIS

String that is the name of a PNL function 
Syntax examples
"PREVIOUS_YEAR".pnlFormulaHasAnExcelImplentation(); will return true
                                           "FOO_DUMMY_BAR.pnlFormulaHasAnExcelImplentation(); will return false"

pop ()
Pop a value from a vector 

populateUserMicrosftID (groups)
populate microsoft id for opx2-user 
Arguments
Argument
 
Documentation 
GROUPS

list of group the user as to be a part of to be consider 

position (object, from-end)
Returns the position of an object in a string or vector 
Arguments
Argument
 
Documentation 
OBJECT

Object to search 
FROM-END
OPTIONAL
boolean indicates if the search start from the end 

print-report-to-pdf (report, printer, paper-format, orientation)
convert a report to a pdf file 
Arguments
Argument
 
Documentation 
REPORT

report 
PRINTER

pdf-printer 
PAPER-FORMAT

paper format such as A4, A3 ... 
ORIENTATION

landscape or portrait 

printAttributeValue ()
Apply the printer of the <field>(of this <class>) to the value in argument 

printCurrentApplet (paperformat, orientation, destination, printer)
Generate a file from an existing applet. See print 
Arguments
Argument
 
Documentation 
THIS

Ignored 
PAPERFORMAT

Paper format 
ORIENTATION

Orientation 
DESTINATION

File destination 
PRINTER

Printer 

printCurrentAppletToPNG (firstpageonly, pngwidth, pngheight, destination)
Generate a PNG file from an existing applet 
Arguments
Argument
 
Documentation 
THIS

Ignored 
FIRSTPAGEONLY

Generate only the first page 
PNGWIDTH

Width of the destination PNG in pixels 
PNGHEIGHT

Height of the destination PNG in pixels 
DESTINATION

Destination path; if none specified, one is generated and the file is then sent to the client for download 

printKernelIndex (string, start, end)
Print an index with the default class index printer 
Arguments
Argument
 
Documentation 
STRING
OPTIONAL
string where the index is printed, if no string is passed the function returns a string 
START
OPTIONAL
integer, beginning of the index string 
END
OPTIONAL
integer, end of the index string 

printodatadate ()
Returns the date encoded in the odata format : /Date(<ticks>)/ 
Arguments
Argument
 
Documentation 
this

a javascript date object 

printReportToPDF (report, printer, paper-format, orientation, paginate, first-page, last-page)
convert a report to a pdf file 
Arguments
Argument
 
Documentation 
REPORT

report 
PRINTER

pdf-printer 
PAPER-FORMAT

paper format such as A4, A3 ... 
ORIENTATION

landscape or portrait 
PAGINATE

select page to print 
FIRST-PAGE

first page to be printer 
LAST-PAGE

last page to be printed 

printsymbol ()
Returns a string: the symbol prefixed by its package 
Arguments
Argument
 
Documentation 
THIS

symbol 

printUrlToPDF (url, user, screen-width, screen-height, paper-format, page-orientation, destination)
Prints the content of a URL to a PDF as it would appear if a specified user navigated to this URL from the browser 
Arguments
Argument
 
Documentation 
URL

A string such as "home/Meetings/Meetings" 
USER

A user object, or a user identifier, or false (in which case the current user is used) 
SCREEN-WIDTH

Width in pixels of the virtual screen in which to render the page before printing 
SCREEN-HEIGHT

Height in pixels of the virtual screen in which to render the page before printing 
PAPER-FORMAT

Paper format name, as strings or symbols 
PAGE-ORIENTATION

Page orientation (portrait or landscape, as strings or symbols) 
DESTINATION

Destination path; if none specified, one is generated and the file is then sent to the client for download 

printUrlToPNG (url, user, screen-width, screen-height, png-width, png-height, destination)
Prints the content of a URL to a PNG as it would appear if a specified user navigated to this URL from the browser 
Arguments
Argument
 
Documentation 
URL

A string such as "home/Meetings/Meetings" 
USER

A user object, or a user identifier, or false (in which case the current user is used) 
SCREEN-WIDTH

Width in pixels of the virtual screen in which to render the page before printing 
SCREEN-HEIGHT

Height in pixels of the virtual screen in which to render the page before printing 
PNG-WIDTH

Width of the destination PNG in pixels 
PNG-HEIGHT

Height of the destination PNG in pixels 
DESTINATION

Destination path; if none specified, one is generated and the file is then sent to the client for download 

probeFile (password)
Tests if a file exists 
Arguments
Argument
 
Documentation 
PASSWORD
OPTIONAL
string: password if the path is an ftp path 

processesVersionAtLeast (major, minor, maintenance)
Check that current processes version is superior to the one passed as arguments 
Arguments
Argument
 
Documentation 
MAJOR

major version 
MINOR

minor version 
MAINTENANCE

maintenance version 

profileFunction (function, args)
Profiles the time consumed in a specific script function call 
Arguments
Argument
 
Documentation 
FUNCTION

String,symbol or function object 
ARGS

[unlimited arguments] arguments of the function 

profileFunctionMemory (function, args)
Profiles the memory consumed in a specific script function call 
Arguments
Argument
 
Documentation 
FUNCTION

String,symbol or function object 
ARGS

[unlimited arguments] arguments of the function 

profileMemory (set)
Analyse the memory consumed inside a function call 
Arguments
Argument
 
Documentation 
SET
OPTIONAL
Boolean set the time trace or remove it 

profileTime (set)
Analyse the time inside a function call 
Arguments
Argument
 
Documentation 
SET
OPTIONAL
Boolean set the time trace or remove it 

project_GETCOMMONDATASETSDEFAULTLIST ()
Returns list of common datasets that are set by default at project creation by the system 
Syntax examples
return project_getCommonDatasetsDefaultList();

project_WRITABLE (project)
Return true if the project given as argument is writable 
Arguments
Argument
 
Documentation 
PROJECT

A project 

prompt (string, string, string)
Expose dialog prompting for a value, the value is returned as a string. If no answer is entered undefined is returned 
Arguments
Argument
 
Documentation 
STRING

Label of the question prompted in the dialog 
STRING
OPTIONAL
default value returned 
STRING
OPTIONAL
Popup title 

propagateparameters (page, model)
Propagate parameters from the template to the page 
Arguments
Argument
 
Documentation 
PAGE

the intranet page 
MODEL

the page template 

psettinglib.CREATEPROJECTSETTING (name, desc, category)
Generate project boolean field that identify a project define setting linked to for example the activation of a screen 
Arguments
Argument
 
Documentation 
NAME

Name of the field 
DESC

Description of the field 
CATEGORY

Category of the setting (open) 
Syntax examples
psettingLib.createProjectSetting("VIEW_GANTT","View Gantt","My setting")

push (value)
Push a value in a vector or list 
Arguments
Argument
 
Documentation 
VALUE

Value pushed in the vector 

pushnew (item)
push only new elements in a vector/list 
Arguments
Argument
 
Documentation 
THIS

vector/list 
ITEM

item 

queryGraphAPIOnBehalf (graph-api-connector, path, method, body, full-url, content-type, content-range, content-length)
Sends a request to MS Graph API using delegated access. Returns request result, result code, header and URI 
Arguments
Argument
 
Documentation 
GRAPH-API-CONNECTOR

Connector to use 
PATH

Endpoint path combined to the Graph API url obtained through the connector to send the query 
METHOD

HTTP method to use 
BODY

Request content 
FULL-URL
OPTIONAL
used to force the full http url to query, instead of combining the Graph API url obtained through the connector and the given path 
CONTENT-TYPE

Request content type. Default is application/json 
CONTENT-RANGE


CONTENT-LENGTH



question (string)
Ask a yes or no question to the user, answer is true or false 
Arguments
Argument
 
Documentation 
STRING

String: label of the question 

read ()
Read a lisp expression or lisp object in an input stream 

readChar ()
Read a character in a stream, returns undefined if the stream is empty or closed 

readContent ()
Read the content of a stream and returns a string 

readimagesize ()
return a list (with height) of the given image, if it is of a supported format 
Syntax examples
"image.png".readimagesize()

readKernelIndex (string, start, end)
Read an index with the default class index reader 
Arguments
Argument
 
Documentation 
STRING

Index read by the function 
START
OPTIONAL
integer, beginning of the index string 
END
OPTIONAL
integer, end of the index string 

readLine ()
allows you to read a string line in an input stream 

readlistofobjects (str, cls, onlyfound, start, end, delim)
Reads a string of comma separated identifiers. Returns a list of objects. 
Arguments
Argument
 
Documentation 
STR

the input string 
CLS

the class of objects to read 
ONLYFOUND

removes elements of the list where no object was found 
START

read from this position 
END

reads up to this position 
DELIM

the separator used in the input string  comma by default 

readodatadate ()
Returns the date decoded from the odata format : /Date(<ticks>)/ 
Arguments
Argument
 
Documentation 
this

a string representing an odata date. 

readsymbol (start, end)
Read a symbol from the string given in argument. Returns undefined if no symbol can be read. 
Arguments
Argument
 
Documentation 
THIS

String 
START
OPTIONAL
Start of the string, by default 0 
END
OPTIONAL
End of the string, by default the length of the string 

recodify (class, exclude-custom-tables)
Renames all objects of a database using their ONB. It is a good way to anonimize a database 
Arguments
Argument
 
Documentation 
CLASS
OPTIONAL
root class to recodify 
EXCLUDE-CUSTOM-TABLES
OPTIONAL
boolean, indicates if custom tables should be excluded 

recomputeCostandDate (incremental)
This function enables you to recompute cost and dates on a specific set of projects You can call it on a project, on a vector of projects or on a Processes portfolio 
Arguments
Argument
 
Documentation 
INCREMENTAL
OPTIONAL
incremental, default is the value of the parameter "Do not recompute all dates " 
Syntax examples
project.recomputeCostandDate

redrawwidgetwithnewsize (widget)
Compute new sizes for widget then redraw widget 
Arguments
Argument
 
Documentation 
WIDGET

The widget to redraw 

refreshWidget ()
Refresh the widget. It's advised to use Refresh() instead. 

regexpSearch (string)
Returns the substring of a string matching a regular expression 
Arguments
Argument
 
Documentation 
STRING

String to search in 
Syntax examples
"[0-9]+".RegexpSearch("AAAA12345BBBB") returns "12345"

regmask (string)
This method allows you to delete specified characters from an entire string matching a regular expression. For example, you could specify to delete from a string all capital letters from A to Z. This method returns a new string. 
Arguments
Argument
 
Documentation 
STRING

source string 
Syntax examples
[regexp].regmaskp([source string]);
re.regmask("azerty1234uiopq5678sdfgh");

regmatch (string)
Test if a regexp created using expression <new regexp> corresponds to Regexp V2 of allegro matches part of a string 
Arguments
Argument
 
Documentation 
THIS

regexp 
STRING

string to look into 

regreplace (source-string, replace-string)
Replace matches of a regexp created using expression <new regexp> corresponds to Regexp V2 of allegro with a new string 
Arguments
Argument
 
Documentation 
THIS

regexp 
SOURCE-STRING

String in which we will perform the replaces 
REPLACE-STRING
OPTIONAL
by default ""; string to replace matches 

regsplit (string)
Split a string into a list using as separator a regexp created using expression <new regexp> corresponds to Regexp V2 of allegro 
Arguments
Argument
 
Documentation 
THIS

regexp 
STRING

string to be splitted 

regsplittovector (string)
Split a string into a vector using as separator a regexp created using expression <new regexp> corresponds to Regexp V2 of allegro 
Arguments
Argument
 
Documentation 
THIS

regexp 
STRING

string to be splitted 

relation (slot-name)
Return a relation object you can iterate on using the relation mapper 
Arguments
Argument
 
Documentation 
THIS

An object 
SLOT-NAME

object relation 

rem (key)
This function allows to remove property from an object (see set and get) 
Arguments
Argument
 
Documentation 
KEY

any object representing an attribute or a key 

remCssRule (css, name)
Remove a rule in a cell style object. Don't forget to call applyAllCss when all modifications are done. 
Arguments
Argument
 
Documentation 
CSS

cell style object 
NAME

Name of the attribute (string or symbol) 
Syntax examples
css.remCssRule("DRAW-CONTOUR");

remFunctionToMonitor (wildcard, package)
Remove a function or a list of function to the list of function to monitor 
Arguments
Argument
 
Documentation 
WILDCARD

[string] wildcard that matches the function name 
PACKAGE

[string or null] name or a package, by default the JS package 

removeAttributeCategory (pattern)
Method on a class that remove an attribute category definition 
Arguments
Argument
 
Documentation 
PATTERN

[string] wildcard string that matches or the internal representation or the description of the attribute 

removeAttributeModule (pattern)
Method on a class that remove an attribute module definition 
Arguments
Argument
 
Documentation 
PATTERN

[string] wildcard string that matches or the internal representation or the description of the attribute 

removecomponentproject (project)
Remove a component project from a project 
Arguments
Argument
 
Documentation 
this

a project 
project

the component project to remove 

removeComputeAfterHandler (function)
Remove a function from the ones called after cost table's computation 
Arguments
Argument
 
Documentation 
THIS

[cost table] cost table 
FUNCTION

[function] function to remove from computation after daemons 

removeDiffModeContextField ()
disable a context field used to make diffs 

removeFordiddenCharactersFromName (string)
remove chars that are forbidden for names of a string 
Arguments
Argument
 
Documentation 
THIS

ignore 
STRING

the string 

removefromclassesnottocopy (ignore, class)
Remove the given class from the list of classes not to copy 
Arguments
Argument
 
Documentation 
IGNORE

Ignored 
CLASS

[string/class/object] the class or the class name or an object of the class we want 

removefromclasseswithiconinobjectlist (ignore, class)
Remove the given class from the list of classes where icons are displayed in object lists 
Arguments
Argument
 
Documentation 
IGNORE

Ignored 
CLASS

[string/class/object] the class or the class name or an object of the class we want 

remRule (rule)
remove a rule from a ruleset 
Arguments
Argument
 
Documentation 
RULE

Any data structure representing a rule 

renameFile (newname)
Renames a file 
Arguments
Argument
 
Documentation 
NEWNAME

string new name of the file 

renderHtmlBox (html-box)
After having paginated a html string using getHtmlHeight, the paginated box is given to you and you can use this function to display it without having to repaginate 
Arguments
Argument
 
Documentation 
HTML-BOX

[html-box] html-box given by getHtmlHeight 

replaceablefunction ()
Returns true if the function is replaceable. 
Arguments
Argument
 
Documentation 
THIS

Function 

replacecurrentpagehistory ()
replaces current history navigation state by object 

replacefunction (function)
Replace the function by the given replacement. This can only be called on a function defined as replaceable. 
Arguments
Argument
 
Documentation 
THIS

Function 
FUNCTION

Replacement 

replyToExchangeOnlineEmail (connector, message-id-to-reply-to, to, subject, content-type, content, reply-to, misc-headers, attachments)
Function to reply to a previous email by using the exchange online connector 
Arguments
Argument
 
Documentation 
CONNECTOR

Talk connector to use 
MESSAGE-ID-TO-REPLY-TO

UID of the message to reply to 
TO

The email address of recipients 
SUBJECT

The subject 
CONTENT-TYPE

Type of content sent by the user. "Text" by default 
CONTENT

The 'body' of the email 
REPLY-TO

The email address of the user to reply to 
MISC-HEADERS

Some extra headers you can add if it is necessary. 
ATTACHMENTS

List of attachments 
Syntax examples
(replyToExchangeOnlineEmail :message-id \<1234\@mail.com\> :to (list "alice\@contoso.com") :subject "lorem" :content "foo" :reply-to "bob\@contoso.com"

reportelementsdefaultvalues (prop, value)
report element default values 
Arguments
Argument
 
Documentation 
PROP

property 
VALUE

value 

report_GETREPLACE ()
From a report or an Intranet page, returns the one that replaces it (will be displayed in its place) 
Arguments
Argument
Documentation 
THIS
Class 
Syntax examples
"OpxReport".report_getreplace("ID_OF_REPORT")

requirePatch (string, string)
abort loading of the current script if the given patch is not loaded in a version greater or equal to the given version. 
Arguments
Argument
 
Documentation 
STRING

Name of the patch to check 
STRING
OPTIONAL
version. If not given, just check the patch is loaded, without checking its version. 

resetHistory ()
This function enables you to reset the history. 
Syntax examples
resetHistory()

resetMonitoring ()
Resets performance monitoring data 

resetselectionongridorgantt ()
Allow to reset the selection on a grid or a gantt 
Arguments
Argument
 
Documentation 
THIS

A grid or a graphic-window 

resetSimulation (simulation)
Cleans the content of the simulation 
Arguments
Argument
 
Documentation 
simulation

Simulation to clean 

resetWorkflow ()
Reset the workflow on an object 

restoreAttributesFromString (object, attribute-string, compress)
Restore the attributes values from the string generated by saveAttributesAsString 
Arguments
Argument
 
Documentation 
OBJECT

object to restore the attributes on 
ATTRIBUTE-STRING

string describing the attributes and their values, generated by saveAttributesAsString 
COMPRESS
OPTIONAL
default nil. The string is compressed (see optional argument compress of saveAttributesAsString 

restoreContextData ()
Restore context attributes and user settings with a context data string 

restoreportfoliosimulation (activityfilter, keep-actuals-in-origin, keep-budget-in-origin, do-not-remove-activities, do-not-restore-references)
Restore updates done in a portfolio simulation in its origin projects 
Arguments
Argument
 
Documentation 
ACTIVITYFILTER
OPTIONAL
string or formula filtering the acitivity to synchronize 
KEEP-ACTUALS-IN-ORIGIN
OPTIONAL
boolean (default true) 
KEEP-BUDGET-IN-ORIGIN
OPTIONAL
boolean (default true) 
DO-NOT-REMOVE-ACTIVITIES
OPTIONAL
boolean (default true) 
DO-NOT-RESTORE-REFERENCES
OPTIONAL
boolean (default true) 

retrieveMeetings (team-connector, organizer)
retrieve all meetings 
Arguments
Argument
 
Documentation 
TEAM-CONNECTOR

teams connector 
ORGANIZER

organizer 

retrieveObjects (lock-object, target-dataset, read-object-numbers, disable-daemons, monitor-string)
Retrieves a set of objects stored in a file or document 
Arguments
Argument
 
Documentation 
LOCK-OBJECT
OPTIONAL
object or objects locked during the load process 
TARGET-DATASET
OPTIONAL
dataset where the retrieved objects will be created, by default it is undefined 
READ-OBJECT-NUMBERS
OPTIONAL
boolean false, indicates if object numbers should be read from the file 
DISABLE-DAEMONS
OPTIONAL
defaut is true, disable all side effets linked to object creation/modification/removal like alsrts,workflows or on new,modify,delete triggers 
MONITOR-STRING
OPTIONAL
string that sends a progress message while objects are retrieved 

retrieveOnlineMeeting (team-connector, organizer-id, meeting-teams-uid)
retrieve an online meeting 
Arguments
Argument
 
Documentation 
TEAM-CONNECTOR

teams connector 
ORGANIZER-ID

organizer identifier 
MEETING-TEAMS-UID

organizer identifier 

retrieveRecurrentMeetingInstances (team-connector, organizer-id, timerange, meeting-teams-uid, start-date, end-date)
retrieve all meeting instances 
Arguments
Argument
 
Documentation 
TEAM-CONNECTOR

teams connector 
ORGANIZER-ID

organizer identifier 
TIMERANGE

timerange in day 
MEETING-TEAMS-UID

organizer identifier 
START-DATE

organizer identifier 
END-DATE

date from when we start to retrieve meetings 

returnConsolidationClass (to-consolidate)
Returns a class or consolidation class that allows to consolidate the class specified as this on the class specified as the first argument 
Arguments
Argument
 
Documentation 
TO-CONSOLIDATE

Class you want to consolidate in 

returnDNS (ip)
Execute the DNS query on an ip. 
Arguments
Argument
 
Documentation 
ip

The ip to convert 

returnToDefaultCellStyle (cell)
return selected cell to default cell style in L1 report builder 
Arguments
Argument
 
Documentation 
CELL

Current report cell 

richText (string)
returns the rich text associated with a field if it exists 
Arguments
Argument
 
Documentation 
STRING

field name 

richTextConcatenate (s2)
This function concatenates two strings into a new one, with respect to html strings. It means that body contents are moved accordingly and not html strings are wrapped within a <p> when required, ie if at least one of the strings is a rich text one 
Arguments
Argument
 
Documentation 
S2

String to append 
Syntax examples
richTextContent.richTextConcatenate("\\Another dummy content\\")

riskmod.RISK_DISPLAY_SCRIPT_ON_TABLE ()
Handler on risk table 
Syntax examples
riskmod.risk_display_script_on_table();

riskmod.RISK_DRAW_MATRIX (graphics)
Draw the Risks matrix 
Arguments
Argument
Documentation 
GRAPHICS
Current graphics element 
Syntax examples
riskmod.risk_draw_matrix(this : this, this, true, false);

riskmod.RISK_DRAW_MATRIX_WITH_FILTER (graphics)
Draw the Risks matrix 
Arguments
Argument
Documentation 
GRAPHICS
Current graphics element 
Syntax examples
riskmod.risk_draw_matrix(this : this, this, true, false, "true");

riskmod.RISK_DRAW_OPPORTUNITY_MATRIX (graphics)
Draw the Opportunities matrix 
Arguments
Argument
Documentation 
GRAPHICS
Current graphics element 
Syntax examples
riskmod.risk_draw_opportunity_matrix(this : this, this, true, false);

riskmod.RISK_DRAW_OPPORTUNITY_MATRIX_WITH_FILTER (graphics)
Draw the Opportunities matrix 
Arguments
Argument
Documentation 
GRAPHICS
Current graphics element 
Syntax examples
riskmod.risk_draw_opportunity_matrix(this : this, this, true, false, "true"));

rollback ()
Generic method that rollback changes to a previous saved state, it is implemented on tab-report to set the underlying report to the previous saved state 

safemod.SAFEDRAWARTANDPICOMMENTS ()
Draw ART and PI labels 

safemod.SAFEDRAWEDITICON ()
Draw image for PI 

safemod.SAFEDRAWNUMBEROFDEPENDENCIES ()
Draw number of PI risks 

safemod.SAFEDRAWNUMBEROFRISKS ()
Draw number of PI risks 

safemod.SAFEDRAWPIMAXPROGRESS ()
Draw PI progress bar 

safemod.SAFEDRAWPIMAXPROGRESSPERCENTAGE ()
Draw PI progress max percentage 

safemod.SAFEEDITPI ()
Display popup to edit PI 

safemod.SAFEOPENTEAMWORKSPACE ()
Open team workspace in safe modules 

save ()
Allows to save a dataset or a list or vector of datasets 

saveAttributesAsString (object, attribute-list, compress)
Save the current list of attributes and their values in a string, to be restored later on with restoreAttributesFromString 
Arguments
Argument
 
Documentation 
OBJECT

object to save attributes of 
ATTRIBUTE-LIST

list of attributes to save 
COMPRESS
OPTIONAL
default nil. Compress the resulting string 

savedatasetas (editorname, new-name)
displays a creation popup that will copy the dataset given as this (save as action) 
Arguments
Argument
 
Documentation 
THIS

the dataset to save as 
EDITORNAME

name of the popup to display 
NEW-NAME
OPTIONAL
new name for the project 

scalecomponent (dashboard, w, h, c)
Gives the correct scaled values for a component dropped in a dashboard 
Arguments
Argument
 
Documentation 
DASHBOARD

Dashboard on which the scale is applied 
W

source width 
H

source height 
C

component to scale 

scenario ()
Customizable method, returns the scenario associated to an object when performing simulations 

scoringmod.SCORECARDSCORECUSTOCOMPUTE (elt)
Compute score of a scorecard element 
Arguments
Argument
Documentation 
ELT
[_SCA_PT_SCT] Scorecard element 
Syntax examples
var score = scoringMod.scorecardScoreCustoCompute(sct, info, user, correction, multi_user, average, strategy, _this, current_scorecard, lvl1sct); // score = 6

scriptCompile ()
Compile and load a script referenced by a script object or a file name 

search (string, start, end)
Search a string in another string 
Arguments
Argument
 
Documentation 
STRING

String to search 
START
OPTIONAL
integer: start of the research 
END
OPTIONAL
integer: end of the research 

searchattributetoken (class, attribute, formula)
Search an extract matching an attribute in a formula 
Arguments
Argument
 
Documentation 
CLASS

class of the formula 
ATTRIBUTE

attribute to look for 
FORMULA

formula 

searchAvailableResource ()
Search for available resources for a resource allocation or time summary object. The function takes into account all parameters defined in the 'Automatic resource assignment' category 

searchchar (character, start, end)
Searches a character in a string. Returns the position of the character if found, or false if not found. 
Arguments
Argument
 
Documentation 
THIS

String 
CHARACTER

Character. If this is a string, the first character of the string is used. 
START
OPTIONAL
Start of the search 
END
OPTIONAL
End of the search 

searchWidgetsFromType (vector, start-widget, widget-type, check-for-shell)
Returns the vector given as argument, filling it up with all widget on screen of the given type 
Arguments
Argument
 
Documentation 
VECTOR

the vector to fill up 
START-WIDGET

A widget to start the search from. If it's not a widget, the search will start from the toplevel widget 
WIDGET-TYPE

The type of widget to search for (object-grid, opx2-folder, ...) or false to return all widgets 
CHECK-FOR-SHELL
OPTIONAL
false by default. If specified, the search will not cross to popups or other special widgets (transaprent-frame, ...) 

selectclasses (selection, callback, filter)
Opens a dual picklist to select a bunch of classes 
Arguments
Argument
 
Documentation 
THIS

ignored 
SELECTION

the list of already selected classes 
CALLBACK

function called with the selection when clicking on OK 
FILTER

a function to filter the classes that can be selected 

selectContainer (widget, id, ctrl-shift-flag)
select container (bloc-line text-cel etc ...) according to id 
Arguments
Argument
 
Documentation 
WIDGET

report-builder widget 
ID

id-onb of the cell 
CTRL-SHIFT-FLAG

flag of click-handler 

selectData (message, columns, current_selection)
This function allows to select one or more item into a list of item. Returns the list of selected items 
Arguments
Argument
 
Documentation 
MESSAGE
OPTIONAL
string, message provided to the user 
COLUMNS
OPTIONAL
vector of attributes displayed 
CURRENT_SELECTION
OPTIONAL
current item selected by default in the list 

selectDatum (message, columns, current_selection)
This function allows to select one item into a list of item 
Arguments
Argument
 
Documentation 
MESSAGE
OPTIONAL
string, message provided to the user 
COLUMNS
OPTIONAL
vector of attributes displayed 
CURRENT_SELECTION
OPTIONAL
current item selected by default in the list 

selectInWidget (widget, object)
Look for an object in a widget and select it 
Arguments
Argument
 
Documentation 
WIDGET

The widget to look into 
OBJECT

Object to look for 

selection_FILTERWITHCLASS (oclass)
Returns a vector of all elements of a specific class present in the current selection 
Arguments
Argument
 
Documentation 
OCLASS

Class used to filter 
Syntax examples
return selection_filterWithClass("OpxActivity");

selectobject (object, reset-selection)
Add the given object to the current selection for the given widget 
Arguments
Argument
 
Documentation 
THIS

Widget,gantt or grid 
OBJECT

Object to be selected 
RESET-SELECTION
OPTIONAL
Empty the selection before adding the object to it, default to true 

sendcancel (uid, subject, organizer, attendee)
Send a canceling mail to attendee 
Arguments
Argument
 
Documentation 
UID

String : unique id idenfifying the request 
SUBJECT

String : the subject of the mail 
ORGANIZER

String : organizer email 
ATTENDEE

String : attendee email 

sendExchangeOnlineEmail (connector, to, subject, content-type, content, reply-to, misc-headers, attachments)
Function to send an email by using the exchange online connector 
Arguments
Argument
 
Documentation 
CONNECTOR

Talk connector to use 
TO

The email address of recipients 
SUBJECT

The subject 
CONTENT-TYPE

Type of content sent by the user. "Text" by default 
CONTENT

The 'body' of the email 
REPLY-TO

The email address of the user to reply to 
MISC-HEADERS

Some extra headers you can add if it is necessary. 
ATTACHMENTS

List of attachments 
Syntax examples
(sendExchangeOnlineEmail :to (list "alice\@contoso.com") :subject "lorem" :content "foo" :reply-to "bob\@contoso.com"

sendpublish (subject, dtstart, dtend, organizer, attendee, attendees-list, location, description, timezone, sequence, uid)
Send a publish mail (modification) to attendee. Return the uid (generates one if non is provided). 
Arguments
Argument
 
Documentation 
SUBJECT

String : the subject of the mail 
DTSTART

Integer : the starting date in the PLW format 
DTEND

Integer : the end date in the PLW format 
ORGANIZER

String : organizer email 
ATTENDEE

String : attendee email 
ATTENDEES-LIST

Array : list of all the attendees email 
LOCATION

The meeting location 
DESCRIPTION

The meeting description 
TIMEZONE

The meeting timezone 
SEQUENCE

Integer : modification sequence id 
UID
OPTIONAL
String : unique id idenfifying the request 

sendrequest (subject, dtstart, dtend, organizer, attendee, attendees-list, location, description, timezone, sequence, uid)
Send a request mail (invitation) to attendee. Return the uid (generates one if non is provided). 
Arguments
Argument
 
Documentation 
SUBJECT

String : the subject of the mail 
DTSTART

Integer : the starting date in the PLW format 
DTEND

Integer : the end date in the PLW format 
ORGANIZER

String : organizer email 
ATTENDEE

String : attendee email 
ATTENDEES-LIST

Vector : list of all the attendees email 
LOCATION

The meeting location 
DESCRIPTION

The meeting description 
TIMEZONE

The meeting timezone 
SEQUENCE

Integer : modification sequence id 
UID
OPTIONAL
String : unique id idenfifying the request 

serializeToJson (htable)
Serialize an hash table object to JSON 
Arguments
Argument
 
Documentation 
htable

The content of the hash table 

set (key, value)
This function is a generic function used to update a data structure, the key used can be an attribute or a property (see get and rem) 
Arguments
Argument
 
Documentation 
KEY

any object representing an attribute or a key 
VALUE

any value stored in the object 

setAsReportContainingtabs (tabreport, value)
Flag report as being the one with tabs (in popup) 
Arguments
Argument
 
Documentation 
TABREPORT

current tabreport 
VALUE

true if report must be defined as report with tabs 

setAutoRefresh (onmake, onmodify, onremove)
Control whether the screen is refreshed when an object of the class is created/modified/removed 
Arguments
Argument
 
Documentation 
THIS

A string, symbol, object or object-class. This is used to determine the class the function is called on 
ONMAKE

Boolean. Refresh the screen when creating an object of this class 
ONMODIFY

Boolean. Refresh the screen when modifying an object of this class 
ONREMOVE

Boolean. Refresh the screen when removing an object of this class 
Syntax examples

setBatchErrorCode (code)
change the value of main::exit-code 
Arguments
Argument
 
Documentation 
CODE

the value of the code we want to set 

setBrowserTitle (title)
This function enables you to change the browser window title in IS. Does nothing when ran from Planisware PRO. 
Arguments
Argument
 
Documentation 
TITLE

The page title 
Syntax examples
setBrowserWindow("My great page")

setBSRoleDaemon ()
Sets a role daemon for a class on a slot. It means that when modifying the given slot on the class, the cache related to the given role will be updated on the object and dependant objects. If you use role inheritance for workpackage management, you will want to set up the daemon like this (you can replace OBS by the slot corresponding of the arbo you use for role inheritance) : "opxworkstructure".setbsroledaemon("_WPM_RO_WORKPACKAGE_MANAGER", "OBS"); 

setCacheOnReader ()
Method on an ObjectAttribute object that allows to set a cache on the reader function of the attribute 

setCurrentBookmark (bookmark)
Sets the bookmark as the current selected one 
Arguments
Argument
 
Documentation 
BOOKMARK

Bookmark that is the current bookmark 

setcurrentstate (applet, data)
Set the applet state with the data 
Arguments
Argument
 
Documentation 
APPLET

The applet 
DATA

The data to set 

setcurvedescription (expenditure-type, curve-type, string)
Set a specific description on a curve 
Arguments
Argument
 
Documentation 
EXPENDITURE-TYPE

targeted expenditure type 
CURVE-TYPE

targeted curve type 
STRING

curve description content 

setCustomCostTableOrderinMergedSet (function)
Add an order on cost tables that will be used when exporting to excel. This helps ensure that cost tables will be browsed using user's definition and not order of creation which is somewhat random 
Arguments
Argument
 
Documentation 
THIS

cost table 
FUNCTION

[Number] order 

setDebugLevel (level)
Set debug level of a module to a certain value 
Arguments
Argument
 
Documentation 
THIS

Module from where you want to see the traces 
LEVEL

value to be used as current debug level 

setDisplayScript (cell, user-script)
set display script on cell (based on user script) 
Arguments
Argument
 
Documentation 
CELL

cell containing user script 
USER-SCRIPT

user script defined on the cell 

setDownloadHandler (handler)
Sets the download handler, that will be called before downloading an export file (XLS, PDF, PPT). If it returns true, the file will not be downloaded. Calling this function with false as argument will reset the download handler. 
Arguments
Argument
 
Documentation 
HANDLER

Function or function name that is called on the context, with the path to the file on the server and the type of the file as an argument 

setexitcode (code)
Sets the exit code that will be returned by the current process 
Arguments
Argument
 
Documentation 
CODE

return code 

setFieldText (field, text)
Set the value for the given widget as if the user had entered it (calling any script set up in the cell or widget definition) 
Arguments
Argument
 
Documentation 
FIELD

widget 
TEXT

string, the value to set 

setFindResourceForIntegrationHandler (resource, activity)
Handler called when finding the resource on which to integrate for a given activity 
Arguments
Argument
 
Documentation 
RESOURCE

start resource (the one from the input line) 
ACTIVITY

activity to integrate on 

setfunctionreplaceable (documentation)
Sets the functions given as this as replaceable, which means you can then call replacefunction on it. This function can only be called in the definition script of the function. 
Arguments
Argument
 
Documentation 
THIS

The function to define as replaceable 
DOCUMENTATION

Documentation about the replaceable function. 

setfunctionwrappable (documentation)
Sets the functions given as this as wrappable, which means you can then call addwrapperbefore or addwrapperafter on it. This function can only be called in the definition script of the function. 
Arguments
Argument
 
Documentation 
THIS

The function to define as wrappable 
DOCUMENTATION

Documentation about the wrappable function. 

setHyperlinkUserScript (cell, value)
set hyperlink user script defined on cell 
Arguments
Argument
 
Documentation 
CELL

cell containing user script 
VALUE

user-script 

setIndexPrinter (function)
Allows to redefine the index printer of a class 
Arguments
Argument
 
Documentation 
FUNCTION

Function that returns an index for an object 

setIndexReader (function)
Allows to redefine the index reader of a class 
Arguments
Argument
 
Documentation 
FUNCTION

Function that read an index and returns an object if it exists 

setInputUserScript (cell, value)
set user script defined on cell 
Arguments
Argument
 
Documentation 
CELL

cell containing user script 
VALUE

user-script 

setKernelJsonVersionsEnabled (enabled)
Activates or deactivates the management of project versions based on json import/export by the kernel 
Arguments
Argument
 
Documentation 
THIS

ignored 
ENABLED

boolean, if true, the kernel handles the version creation 

setmaintenancemode (wait)
Enables the maintenance mode on the server 
Arguments
Argument
 
Documentation 
wait

[OPTIONAL] If true, wait for the maintenance mode to be propagated to other instances. Useful when this function is called from a command line batch. 

setMultiLingualModeState (ignore, state)
Is multi lingual mode activated in L1 report builder (i.e. display textkeys?) 
Arguments
Argument
 
Documentation 
IGNORE

ignored 
STATE

boolean to indicate if multi lingual textkeys should be displayed or not 

setPlist (object, marker, value)
setPlist sets a value into the property list stored in an object for an indicator eq to marker. It returns the plist. It should always be assigned back to the plist itself in case it was null on the first call 
Arguments
Argument
 
Documentation 
OBJECT

object 
MARKER

marker 
VALUE

value 
Syntax examples
object.setplist("property", value)

setPreferredColors ()
Give the list of the preferred color names to be displayed at the top of the color chooser 

setPropAlign (prop, align)
Set the alignment of the cell properties object. 
Arguments
Argument
 
Documentation 
PROP

Cell properties object 
ALIGN

Vector of 2 items representing the horizontal and vertical aligment. 

setPropannotation (prop, annotation)
Set the annotation of the cell properties object. 
Arguments
Argument
 
Documentation 
PROP

Cell properties object 
ANNOTATION

Annotation 

setPropArrow (prop, arrowcode)
Set the arrow of the cell properties object. 
Arguments
Argument
 
Documentation 
PROP

Cell properties object 
ARROWCODE

Arrow code 

setPropBackgroundColor (prop, color)
Set the background color of the cell properties object. 
Arguments
Argument
 
Documentation 
PROP

Cell properties object 
COLOR

Color 

setPropBorderColor (prop, bordercolor)
Set the border color of the cell properties object. 
Arguments
Argument
 
Documentation 
PROP

Cell properties object 
BORDERCOLOR

Border color. 

setPropBorderStyle (prop, borderstyle)
Set the border style of the cell properties object. 
Arguments
Argument
 
Documentation 
PROP

Cell properties object 
BORDERSTYLE

Border style. 

setPropBorderWidth (prop, borderwidth)
Set the border width of the cell properties object. 
Arguments
Argument
 
Documentation 
PROP

Cell properties object 
BORDERWIDTH

Border width. 

setPropFont (prop, font)
Set the font of the cell properties object. 
Arguments
Argument
 
Documentation 
PROP

Cell properties object 
FONT

Font 

setPropForegroundColor (prop, color)
Set the foreground color of the cell properties object. 
Arguments
Argument
 
Documentation 
PROP

Cell properties object 
COLOR

Color 

setPropFormat (prop, format)
Set the number format of the cell properties object. 
Arguments
Argument
 
Documentation 
PROP

Cell properties object 
FORMAT

Number format 

setPropHighlight (prop, highlight)
Set the highlight of the cell properties object. 
Arguments
Argument
 
Documentation 
PROP

Cell properties object 
HIGHLIGHT

Highlight 

setPropIndent (prop, align)
Set the indentation of the cell properties object. 
Arguments
Argument
 
Documentation 
PROP

Cell properties object 
ALIGN

Indentation 

setPropReadOnly (prop, readonly)
Set the read only state of the cell properties object. 
Arguments
Argument
 
Documentation 
PROP

Cell properties object 
READONLY

Boolean 

setPropSpan (prop, span)
Set the span of the cell properties object. 
Arguments
Argument
 
Documentation 
PROP

Cell properties object 
SPAN

A vector of 4 elements representing the column span, row span, rest column span and rest row span. 

setPropStatus (prop, align)
Set the status of the cell properties object. 
Arguments
Argument
 
Documentation 
PROP

Cell properties object 
ALIGN

Status 

setreplaceicon (key, value)
Set the replacement icon for a given icon in the replacement table 
Arguments
Argument
 
Documentation 
KEY

The key in the hashtable 
VALUE

The value to set 

setReportAndObject (report-form, report, object)
This method allows to change the report and the object displayed by a report form at the same time. 
Arguments
Argument
 
Documentation 
REPORT-FORM

A report form widget 
REPORT

The report to display 
OBJECT

The object to display in the report 
Syntax examples

setReportFooterHandler (handler-name)
Set the function that defines which report is used as footer when printing a report. Note that this function has only one parameter, the context. 
Arguments
Argument
 
Documentation 
HANDLER-NAME

String or closure : a function taking the context, and returning a report used has footer. 

setReportHeaderHandler (handler-name)
Set the function that defines which report is used as header when printing a report. Note that this function has only one parameter, the context. 
Arguments
Argument
 
Documentation 
HANDLER-NAME

String or closure : a function taking the context, and returning a report used has header. 

setScrollableImposedHeight (height)
Imposed the height of a report form when contained in a subform cell with do-not-resize option 
Arguments
Argument
 
Documentation 
THIS

Report form 
HEIGHT

height 

setScrollableImposedWidth (width)
Imposed the width of a report form when contained in a subform cell with do-not-resize option 
Arguments
Argument
 
Documentation 
THIS

Report form 
WIDTH

width 

setSearchCompletion (class, formula, from-object, mapper)
Defines a search completion context, to help search propose possible completions dynamically to the user 
Arguments
Argument
 
Documentation 
CLASS

defines the class on which the search is performed 
FORMULA
OPTIONAL
a formula used to filter objects 
FROM-OBJECT
OPTIONAL
a from-object context to reduce the scope of data mapped 
MAPPER
OPTIONAL
a mapping function that map the objects, by default all objects are mapped 

setSqlCheckOnRemove (value)
No sql check is done for outside dependencies when removing an object of the tree structure given as argument 
Arguments
Argument
 
Documentation 
THIS

A string, symbol, object or object-class. This is used to determine the class the function is called on 
VALUE

Boolean. 
Syntax examples

setTableFilter (formula)
Set a new table filter 
Arguments
Argument
 
Documentation 
THIS

table 
FORMULA

string 

setTemporaryAttribute (attribute, value, default-value)
Sets a value for a dynamic field on an object without having to use declaretempattribute. Careful <object.attribute_name> won't be able to retrieve the value; you have to use getTemporaryAttribute 
Arguments
Argument
 
Documentation 
THIS

object 
ATTRIBUTE

attribute name <can be a non-existing marker> 
VALUE

value to be set 
DEFAULT-VALUE
OPTIONAL
default value 

setUserParameter (key, value)
Allows to set a user parameter to a specific value 
Arguments
Argument
 
Documentation 
KEY

String, key of the parameter 
VALUE

Any type: value of the parameter 

setUserScript (cell, value)
set user script defined on cell 
Arguments
Argument
 
Documentation 
CELL

cell containing user script 
VALUE

user-script 

setValue ()
Allows to set the value of a variable 

shift ()
removes first element of sequence and returns that element 

showcontextmenu (menu, x, y)
This method allows to display a context like menu. The object on which the method is called is given back to the callbacks as 'this'. 
Arguments
Argument
 
Documentation 
MENU

A menu built with createmenuitem and appendmenuitem 
X
OPTIONAL
x position to display the menu at 
Y
OPTIONAL
y position to display the menu at 
Syntax examples

showDiffdialog (hook)
displays the diff mode dialog 
Arguments
Argument
 
Documentation 
HOOK
OPTIONAL
function called on each object-grid that is refreshed 

showNotification (message, icon, delay, on-click, on-close)
Show a notification in the browser 
Arguments
Argument
 
Documentation 
MESSAGE

message to display 
ICON

Image to display next to the message, optional 
DELAY

Delay in s before the notification disappear, optional, default is 5s 
ON-CLICK

function called when clicking on the notification 
ON-CLOSE

function called when clicking on the close button of the notification 
Syntax examples
"foo".showNotification();

simulationdateformula ()
Customizable method, returns the start date of the simulation. Weight, ratio and time-shift will only apply after this date 

slice (object, start, end)
Returns a subsequence of the this object. 
Arguments
Argument
 
Documentation 
OBJECT

A sequence object (list or string) 
START

Start 
END

End 

slot_GETDEFAULTVALUE ()
Gets the default value of a slot 
Arguments
Argument
 
Documentation 
THIS

The slot to be inspected 

slot_GETPROPERTY (property)
Return the slot property 
Arguments
Argument
 
Documentation 
THIS

A slot 
PROPERTY

The name of a slot plist property 

slot_GETTYPE ()
Returns the type of a slot 
Arguments
Argument
 
Documentation 
THIS

A slot 

slot_ISHIDDENINIS ()
Determines whether the slot hidden in Intranet Server 
Arguments
Argument
 
Documentation 
THIS

The slot to inspect 

slot_ISVISIBLEINIS ()
Determines whether the slot is visible in Intranet Server 
Arguments
Argument
 
Documentation 
THIS

The slot to inspect 

slot_POSSIBLEVALUES ()
Returns a plist of possible values of a slot with internal and current language values values 
Arguments
Argument
 
Documentation 
THIS

A slot 

slot_POSSIBLEVALUESLABEL ()
Returns a vector of possible values Labels of a slot with internal and current language values values 
Arguments
Argument
 
Documentation 
THIS

A slot 

solveResourcesConflicts (start-date, end-date, fixed-task-filter)
Solves resources conflicts 
Arguments
Argument
 
Documentation 
START-DATE
OPTIONAL
start of the time window 
END-DATE
OPTIONAL
end of the time window 
FIXED-TASK-FILTER
OPTIONAL
formula identifying the fixed tasks 

sort (test, accessor)
Sort a vector according to the test function, the second argument can be an accessor function to access a value in the vector. The test and accessor function can be strings representing a function or the name of the function which contains a function object. 
Arguments
Argument
 
Documentation 
TEST

Is a string or a function object allowing to compare 2 values,in fact any object that the method call is defined on 
ACCESSOR

Is a method allowing to access one value of the array in order to compare it, in fact any object that the method call is defined one 

splitCellsRb (nblines, nbcol)
Generic method that splits selected cell into two or more cells (depending on the number of lines and columns defined as parameters). 
Arguments
Argument
 
Documentation 
THIS

Cell that is splitted 
NBLINES

Number of lines of the splitted cell 
NBCOL

Number of columns of the splitted cell 

startKernelProfiler (profile-memory)
Starts the kernel profiler engine 
Arguments
Argument
 
Documentation 
PROFILE-MEMORY
OPTIONAL
boolean, indicates if the profiler analyses memory consumption or time consumption 

startMonitoring ()
Starts the performance monitoring system 

starts ()
Returns the start date assicoated with an object 
Arguments
Argument
 
Documentation 
THIS

object 

statusreport_SHOWCONTEXTMENU (obj)
Method allowing to display status report selection list on a click 
Arguments
Argument
 
Documentation 
THIS

Element of class Status report 
OBJ

Targeted object 
Syntax examples
plw.statusReport_showContextMenu(this : statusReport, obj);

stopKernelProfiler ()
Stops the kernel profiler engine 

stopMonitoring ()
Stops the performance monitoring system 

storeCostObject (keys)
Store a temporary object in a table, the object is deleted when the cost version of the current displayed projet has changed If not project is displayed, the function calls StoreTemporaryObject 
Arguments
Argument
 
Documentation 
KEYS

Keys used to retrieve the stored object 

storeObjects (set, nthreads, monitor-string)
Stores a set of objects in a file or document 
Arguments
Argument
 
Documentation 
SET

Set of objects to store 
NTHREADS
OPTIONAL
number of threads that will be used to retrieve the objects 
MONITOR-STRING
OPTIONAL
string that sends a progress message while objects are retrieved 

storeTemporaryObject (keys)
Store a temporary object in a table, the object is deleted at the end of the transaction 
Arguments
Argument
 
Documentation 
KEYS

Keys used to retrieve the stored object 

storeValueClientSide (name, formula)
Allow storing on the client the result of a context formula, to be later on fetched via getStoredClientSideValue 
Arguments
Argument
 
Documentation 
NAME

Identifier to pass on to getStoredClientSideValue to fetch the value 
FORMULA

Context formula to compute the value to store 

stratmod.ADDOVERRIDDENREPORTINGNAMES (reportingname)
Strategic portfolios: add a reporting name to the overridden reportings list 
Arguments
Argument
 
Documentation 
REPORTINGNAME

Name of the reporting to add 
Syntax examples
stratMod.addOverriddenReportingNames("_BM_REPORT_WATERLINE");

stringnat_INF ()
Compare two strings using the natural sort algorithm. See https://github.com/sourcefrog/natsort 

stringnat_SUP ()
Compare two strings using the natural sort algorithm. See https://github.com/sourcefrog/natsort 

stringReferenceToObject ()
Gets back the object from the string reference (inverse of toStringReference) 

stringsimilarity (str1, str2)
Returns a similarity measure between two pieces of text. 
Arguments
Argument
 
Documentation 
STR1

(this) first string 
STR2

second string 

stylemanagerv7.CLEANOLDINDEXFORCURRENTUSERONCURRENTREPORT ()
Clean user parameters related to the style manager for the current user and the current reporting 

stylemanagerv7.CLEANOLDTABINDEX ()
Clean user parameters related to the style manager for all the users 

subDuration (date, duration, calendar-name)
This method is defined on date, it allows to remove duration and it returns a date. 
Arguments
Argument
 
Documentation 
DATE

Date on which to add duration 
DURATION

Integer representing the duration to remove 
CALENDAR-NAME

String representing the calendar to use ("" for default calendar) 
Syntax examples
date.SubDuration(duration,"Calendar")

substitute (old, new, start, end)
Subsitute the value of a vector or string by other values 
Arguments
Argument
 
Documentation 
OLD

Character or object to replace 
NEW

Character or object replacing the old char 
START
OPTIONAL
Integer start of the substitution 
END
OPTIONAL
Integer end of the substitution 

substitutestring (old, new)
In a string subtitute a string with another 
Arguments
Argument
 
Documentation 
THIS

string 
OLD

old string 
NEW

new string 

synchrolinkmod.SYNCHRONIZE_LINK (link)
Synchronizes a smooth link. Returns an integer return code 
Arguments
Argument
Documentation 
link
A link in class plc.constraint 
Syntax examples
synchroLinkMod.synchronize_link(oLink, #SUCC#)

synchronizebotdictwithexamples (add, modify, remove)
go through all dictionary entries and make sure they are aligned with default config. 
Arguments
Argument
 
Documentation 
THIS

ignored 
ADD

if true, examples that dont exist will be created (default is true) 
MODIFY

if true, entries that exist will be modify to match default configuration (default is true) 
REMOVE

if true, entries that are not part of the default connfiguration will be removed (use with care, default is false) 

synchronizeProjectInPorfolio (portfolio)
Method on projects: Synchronize or add given project in the consolidated portfolio given as argument. 
Arguments
Argument
 
Documentation 
PORTFOLIO

Consolidated portfolio 

syslog (level, category, number, message)
Send a message to the system log 
Arguments
Argument
 
Documentation 
LEVEL

Error level, one of "error", "warning", "notice", "info", "debug" 
CATEGORY

The category of the message 
NUMBER

The error number on 5 digits, the first number giving the level 
MESSAGE

string to be sent to the system log 

tabReportToBeSaved (ignore, tr)
Return true if the tab report has been modified but not saved yet 
Arguments
Argument
 
Documentation 
IGNORE

Ignored 
TR

[tab report] the tab report we want to check the status of 

teamsmod.getTeamsNotifDefaultDataset ()
Returns default dataset for Teams module. Redefined in processes to use a setting. 

teamsmod.NOTIFYTEAMSUSER (user)
Notifies Teams user 
Arguments
Argument
Documentation 
USER
a Planisware user 
Syntax examples
teamsmod.notifyTeamsUser(plw.getcurrentuser(), "TestMessage");

template ()
Get the workbook template 

template_APPLYHTMLON (templatehtml, obj)
Apply an HTML template on an object 
Arguments
Argument
 
Documentation 
TEMPLATEHTML

Id of an HTML template 
OBJ

Object on which the template will be applied 
Syntax examples
plw.template_applyHTMLOn(idTemplate,obj);

terpri (stream)
Used to start new line in a stream 
Arguments
Argument
 
Documentation 
STREAM

stream 
Syntax examples
lispstream.terpri()

testTargetConnection (target)
Checks that an impex target has correct parameters to connect to a database 
Arguments
Argument
 
Documentation 
TARGET

An impex target (this) 

textWidth (string, length)
Returns the length in pixel of a string 
Arguments
Argument
 
Documentation 
STRING

String: the string the length is computed on 
LENGTH
OPTIONAL
Integer: length of the string 

tilesmod.SETINDICATORTILEDEF (s_id, js_tiledef)
Update the list of indicator tile 
Arguments
Argument
 
Documentation 
s_id

An identifier for a set of tiles 
js_tileDef

{} object that define a set of tiles 
Syntax examples
tilesMod.setIndicatorTileDef("_EA_DA_TT_TILE_SELECTION",{
  contextFieldName :"_EA_DA_TT_TILE_SELECTION",
  cardWidth : 240,
  cardHeight : 150,
  indicatorFormat : {
    size : 18
  },
  tiles : [
    {
      index : "id1",
      image : "ic_Large_Applications",
      sLabel : "Applications",
      sContent : "EAMod.indicCardApp",
      entity : plc._ea_pt_app_axis,
      indicCondition1 : "_EA_AA_B_TO_ELIMINATE",
      indicCondition2 : "",
      report: "_EA_RE_APP_AXIS_TABLE",
      small : true,
      cantBeHide : true
    },
    {
      index : "id2",
      image : "ic_Large_Technologies",
      sLabel : "Technologies",
      sContent : "EAMod.indicCardTech",
      entity : plc._ea_pt_tech_axis,
      indicCondition1 : "_EA_AA_B_OBSOLETE",
      indicCondition2 : "",
      report : "_EA_RE_TECH_AXIS_TABLE",
      small : true
    }
  ]
})

timecard_ADDACTIVITYTOCURRENTTIMESHEET ()
Add an activity to the current timesheet (context._tc_da_current_tc) 
Arguments
Argument
 
Documentation 
THIS

[Object] Activity 
Syntax examples
Activity.timecard_addActivityToCurrentTimeSheet();

timecard_GOTOFIRSTNOTHANDLED (triggernavigation)
Navigate to the first not handled timesheet of a resource 
Arguments
Argument
 
Documentation 
THIS

[Object] Resource 
TRIGGERNAVIGATION

[Boolean] Actually navigate to TC reporting, if not only contextual parameters will be set (can be useful if you are already on the page or you want to navigate to a custom page) 
Syntax examples
Resource.timecard_goToFirstNotHandled(true);

timecard_SETCURRENTTIMECARD ()
Set a TimeCard to be displayed as current TimeCard for the user 
Arguments
Argument
 
Documentation 
THIS

[Object] Timecard 
Syntax examples
timecardObject.timecard_setCurrentTimeCard();

timecard_SETDISPLAYDATE ()
When on the Timecard input screen, allow to change current time sheet using passed date. 
Arguments
Argument
 
Documentation 
THIS

[Js date] date 
Syntax examples
var date = new date(); date.timecard_setDisplayDate();

timecard_VALIDATETC ()
Validate timesheet 
Arguments
Argument
 
Documentation 
THIS

[Object] Timecard 
Syntax examples
timecardObject.timecard_validateTC();

timeshiftformula ()
Customizable method, returns the timeshift (duration) or a timeshift formula associated to an object, in order to perform simulations on this object 

timeUnitSynonym ()
for genric time units like time unit #1, return the value behind it 
Arguments
Argument
 
Documentation 
THIS

time unit 

timeWindowEnd ()
Return the end of the time window 

timeWindowStart ()
Return the begin of the time window 

time_UNIT_VALUES ()
Return a vector of available time units 
Syntax examples
plw.time_unit_values();

toolbarmod.DRAWTOOLBAR (o_graphic, o_toolbar, o_toolbarstate, h_toolsgroups, b_ismock, b_nodraw, b_mandatoryfieldsneeded)
draw toolbar 
Arguments
Argument
 
Documentation 
O_GRAPHIC

Graphics element 
O_TOOLBAR

Toolbar object 
O_TOOLBARSTATE

For instance :FOLDER 
H_TOOLSGROUPS

hashtable containing toolbar groups 
B_ISMOCK

Boolean. Is Mock 
B_NODRAW
OPTIONAL
Default value is false 
B_MANDATORYFIELDSNEEDED
OPTIONAL
Default value is true 
Syntax examples
drawtoolbar(this,toolbarmodel,toolBarState,toolbartoolgroups,false)

top_LEVEL_WS (object)
Return the top level work structure for a file, a project, or an activity 
Arguments
Argument
 
Documentation 
OBJECT

A file or a project or an activity 

toStringReference ()
Gets a string reference from an object. That reference can be reused in future sessions, and in different languages. (inverse of stringReferenceToObject) 

trackTime (set)
Analyse the time for a function call 
Arguments
Argument
 
Documentation 
SET
OPTIONAL
Boolean set the time trace or remove it 

transformCellTo (target-class, cell)
Change cells' class into the target class 
Arguments
Argument
 
Documentation 
TARGET-CLASS

class of the cell 
CELL

container-with-parent 

transformSelectedCells (target-class)
Change cells' class into the target class 
Arguments
Argument
 
Documentation 
target-class

class of the cell 

transformxml (string, string, string)
This method allow you apply an XSLT on an input xml. 
Arguments
Argument
 
Documentation 
STRING

[this] A string specifying the path of the XSL to apply 
STRING

[input-xml] A string specifying the path of the input XML file 
STRING

[output-xml] A string specifying the path of the output (generated) XML file 
Syntax examples
"c:\test.xsl".transformxml("c:\tempinput.xml","c:\tempoutput.xml");

translateDateForSimulation (date, time-shift-formula, simulation-date-formula, extension-ratio-formula)
This method translates dates for a simulation according to the various formula passed as arguments 
Arguments
Argument
 
Documentation 
DATE

Date you want to translate 
TIME-SHIFT-FORMULA
OPTIONAL
duration formula computing the time translation, if no formula is defined, the method timeshiftformula is used 
SIMULATION-DATE-FORMULA
OPTIONAL
date formula indicating the date where the simulation starts, if no formula is defined, the method simulationdateformula is used 
EXTENSION-RATIO-FORMULA
OPTIONAL
number formula computing the extension ratio, if no formula is defined, the method extensionratioformula is used 

treeDo ()
Display the treedo chart which enables you to compare version 

typedatecomparaisonexists (datetype)
Method on activity and time synthesis to know if the date type given can be used to make comparison. 
Arguments
Argument
 
Documentation 
THIS

an activity or a time synthesis 
DATETYPE

a date type 
Syntax examples
object.typedatecomparaisonexists(datetype)

uninstallTeamsAppForThisUser (teams-connector, user-teams-id, teams-app-id-from-manifest)
Uninstall the Teams Notification application for this user 
Arguments
Argument
 
Documentation 
TEAMS-CONNECTOR

Talk Teams Connector 
USER-TEAMS-ID

The user Teams ID (or Microsoft ID) 
TEAMS-APP-ID-FROM-MANIFEST

This is the ID from the application manifest (also known as external App ID) 

unitsynonym (unit)
Return the synonym of a unit 
Arguments
Argument
 
Documentation 
UNIT

unit 
Syntax examples
var unit = new symbol("UNIT1", "KEYWORD"); unitSynonym(unit) =\> #{DOD:COST-UNIT\@CF_DATA:EUR}

unit_VALUES ()
Return a vector of available cost units 
Syntax examples
plw.unit_values();

unselectAllWithoutRefreshing ()
Unselect all the item without refreshing the widgets 
Arguments
Argument
 
Documentation 
THIS

ignore 

unsetmaintenancemode ()
Disables the maintenance mode on the server 

unshift ()
Pushes the value in front of the vector or list. Returns the sequence. 

updateAllConversations (new-msg-callback)
TODO 
Arguments
Argument
 
Documentation 
new-msg-callback

script callback to call when new msg 

updateBookmarkWithPlist (plist)
Updates a bookmark with arguments passed as a plist 
Arguments
Argument
 
Documentation 
PLIST

Plist where keys are the pargraph of the bookmark, like :context and values are alists. (:context ((:key1 val1 [val2]))) 
Syntax examples
myBookmark.updateBookmarkWithPlist()

updateMeeting (team-connector, teams-meeting-id, meeting-id, meeting-new-name, meeting-new-notes, timezone, new-location, meeting-from, meeting-to, organizer-id)
update meeting from plw to teams 
Arguments
Argument
 
Documentation 
TEAM-CONNECTOR

channel belong to this team-id 
TEAMS-MEETING-ID

teams meeting id 
MEETING-ID

meeting id 
MEETING-NEW-NAME

meeting new name 
MEETING-NEW-NOTES

meeting new notes 
TIMEZONE

timezone 
NEW-LOCATION

new location 
MEETING-FROM

meeting-from 
MEETING-TO

meeting-to 
ORGANIZER-ID

organizer id 

updateMeetingAttendees (team-connector, meeting-id, attendees, organizer)
update meeting attendees from plw to teams 
Arguments
Argument
 
Documentation 
TEAM-CONNECTOR

the teams meeting linked to planisware meeting 
MEETING-ID

the meeting id in Teams 
ATTENDEES

the meeting attendees 
ORGANIZER

the meeting organizer 

updateMonitoringProgress (noop-spec)
Increment progress inside a with(plw.monitoring(<>)) form 
Arguments
Argument
 
Documentation 
NOOP-SPEC
OPTIONAL
Name of the controller (allow to manage multiple progress bars) 

updateTalk (conversation-mapping-func, new-msg-callback, timeout)
Checks for updates on all Talk connectors 
Arguments
Argument
 
Documentation 
CONVERSATION-MAPPING-FUNC

script callback called when new msg is found to determine which conversation it belongs to. Takes a hashtable of message parts, the connector used and ??, returns a conversation. 
NEW-MSG-CALLBACK

script callback to call when new msg is found, takes a hastable of message parts and a conversation, returns the created message and two booleans telling if everything went well and if it's a new message or not. 
TIMEOUT

Connexion and message reading timeout in seconds 

upgradeOrInstallTeamsAppForThisUser (teams-connector, user-teams-id, teams-app-id-from-manifest)
Upgrade or Install the Teams Notification application for this user 
Arguments
Argument
 
Documentation 
TEAMS-CONNECTOR

Talk Teams Connector 
USER-TEAMS-ID

The user Teams ID (or Microsoft ID) 
TEAMS-APP-ID-FROM-MANIFEST

This is the ID from the application manifest (also known as external App ID) 

upgradeTeamsAppForThisUser (teams-connector, user-teams-id, teams-app-id-from-manifest)
Upgrade the Teams Notification application for this user 
Arguments
Argument
 
Documentation 
TEAMS-CONNECTOR

Talk Teams Connector 
USER-TEAMS-ID

The user Teams ID (or Microsoft ID) 
TEAMS-APP-ID-FROM-MANIFEST

This is the ID from the application manifest (also known as external App ID) 

uridecodestring (str)
Decode the uriencoded string 
Arguments
Argument
 
Documentation 
str

The string to decode 

uriencodestring (str)
Encode the given string using uri encoding 
Arguments
Argument
 
Documentation 
str

The string to encode 

useringroup (string, string)
Script version of user_in_group 
Arguments
Argument
 
Documentation 
STRING

a user identifier 
STRING

a list of group identifiers 

userquestion ()
Ask question to the user, returns true/false if the user clicked on the yes/no button, or the label of any other added buttons. If the dialog is closed without clicking on any button, the symbol noanswer is returned. 
Syntax examples
"question text".userquestion("tiltle","yes label","no label","vector of other button labels")

user_IN_LIST_OF_GROUPS (testedgroups)
Test if the current user is in a list of groups 
Arguments
Argument
 
Documentation 
TESTEDGROUPS

List of user groups 

useuserscript ()
defines if user scripts are applicable to an object 
Arguments
Argument
 
Documentation 
THIS

object 

utilscountelement (object)
Return the number of elements in an object 
Arguments
Argument
 
Documentation 
OBJECT

An object 

vectorEquals (arg2)
test if 2 vectors have the same elements (independently from their respective orders) 
Arguments
Argument
 
Documentation 
THIS

vector1 
ARG2

vector2 

vector_PLUS (vect_a, vect_b)
Add two vectors 
Arguments
Argument
 
Documentation 
VECT_A

First vector 
VECT_B

Second vector 

viewDocument (object)
View a document. 
Arguments
Argument
 
Documentation 
object

Kernel document object to view 

warning_ALERT (text)
Alert a text one time per transaction 
Arguments
Argument
 
Documentation 
TEXT

The message display in alert 

warning_ALERT_OR_WRITETOLOG (stext)
Return a string in alert or writetolog 
Arguments
Argument
 
Documentation 
STEXT

String content to return 

warning_LOG (text)
Log a text one time per transaction 
Arguments
Argument
 
Documentation 
TEXT

The message display in the log 

weightformula ()
Customizable method, returns the weight (float) or a weight formula associated to an object, in order to perform simulations on this object 

wfmod.DISPLAY_MESSAGES (gr)
Display workflow transaction messages 
Arguments
Argument
 
Documentation 
gr

Current graphics element 
Syntax examples
namespace wfmod; display_messages(this);

wfmod.DRAWKERNELWORKFLOW (graphic, transaction)
Draw workflow 
Arguments
Argument
 
Documentation 
graphic

Current graphics element 
transaction

Current process transaction 
Syntax examples
namespace wfmod; drawkernelworkflow(this, transaction);

wf_WORKFLOW_ACTION (object)
function that simulate a specific action on the selected workflow without using the workflow form 
Arguments
Argument
Documentation 
Object
The object 

wildcardMatch (wildcard)
Check if a string matches a wildcard string expression 
Arguments
Argument
 
Documentation 
THIS

string to be checked 
WILDCARD

wildcard 

workstructurefinish (datetype)
Method on activity to get the end date of the given date type. 
Arguments
Argument
 
Documentation 
THIS

an activity 
DATETYPE

a date type 
Syntax examples
activity.typedatecomparaisonexists(datetype)

workstructurestart (datetype)
Method on activity to get the start date of the given date type. 
Arguments
Argument
 
Documentation 
THIS

an activity 
DATETYPE

a date type 
Syntax examples
activity.workstructurestart(datetype)

wrappablefunction ()
Returns true if the function is wrappable. 
Arguments
Argument
 
Documentation 
THIS

Function 

write (string, start, end)
Write is a method which write a string in a specific stream, the stream can be a file stream, an OpxConsole or the OPX2 console. In the write method the special character convention n allows to generate a new line 
Arguments
Argument
 
Documentation 
STRING

a string object 
START
OPTIONAL
integer start of the string you want to write 
END
OPTIONAL
integer end of the string you want to write 

writeln (string)
Write the string to the standard output with a newline added at the end 
Arguments
Argument
 
Documentation 
STRING

The string to write 

writeraw (string, start, end)
This function works the same way as the write function except it does not transform n into linefeeds. 
Arguments
Argument
 
Documentation 
STRING

a string object 
START
OPTIONAL
integer start of the string you want to write 
END
OPTIONAL
integer end of the string you want to write 

writeToLog (string, optional)
In intranet, this function allow sending traces directly to the log file, as the intranet would do. Under Planisware PRO, logging is done in the console. 
Arguments
Argument
 
Documentation 
STRING

format string 
OPTIONAL

format arguments 
Syntax examples
WriteToLog("A single string");
WriteToLog("This is the value of variable toto ~s",toto);
WriteToLog("No need to concatenate ~a and ~a before logging, I just need to use a ~a format string","a first string","a second string","correct");

xCoordinateCell (object, widget)
returns x coordinate of a given cell (according to a widget) 
Arguments
Argument
 
Documentation 
OBJECT

cell 
WIDGET

graphic where the cell is displayed (and reference) 

xmlvalue (object)
Get the xml value of an object 
Arguments
Argument
 
Documentation 
OBJECT

xmlelement or jscript-object 

xToDate (x)
Convert the x coordinate on a gantt into the corresponding date 
Arguments
Argument
 
Documentation 
THIS

A graphics (the first gantt in it will be used) or a gantt 
X

Integer 

yasonParse (input)
Parse a string representing a JSON and returns a hashtable 
Arguments
Argument
 
Documentation 
INPUT

the string to parse 

yCoordinateCell (object, widget)
returns y coordinate of a given cell (according to a viewer) 
Arguments
Argument
 
Documentation 
OBJECT

cell 
WIDGET

graphic where the cell is displayed (and reference) 

yToGroup (y)
Fetch the gantt group which is at the given position 
Arguments
Argument
 
Documentation 
THIS

A graphics (the first gantt in it will be used) or a gantt 
Y

Integer 

yToLine (y)
Fetch the gantt line which is at the given position 
Arguments
Argument
 
Documentation 
THIS

A graphics (the first gantt in it will be used) or a gantt 
Y

Integer 

zipdir (filename)
Download the string given as this as a textfile. 
Arguments
Argument
 
Documentation 
THIS

String: the path of the directory zip 
FILENAME

String : path of the generated zip file 

zipextract (targetpath)
Extract the content of a zip file to a specific target directory 
Arguments
Argument
 
Documentation 
THIS

path to the source zip file 
TARGETPATH

target directory to extract to 

_DM_CAMPAIGN_SELECTION_TO_IDEA_WALL ()
Open an idea campaign 
Syntax examples
plw._dm_campaign_selection_to_idea_wall(this : oTopCampaign);

_DM_DRAWCOMMENTS ()
Draw Comments icon for idea cards 

_DM_DRAWCOMMENTSNUMBER ()
Draw comments number for idea cards 

_DM_DRAWCONTENT ()
Draw content for idea cards 

_DM_DRAWDISLIKE ()
Draw likes for idea cards 

_DM_DRAWDISLIKESNUMBER ()
Draw dislikes number for idea cards 

_DM_DRAWEDITMENU ()
Draw edit button for idea cards 

_DM_DRAWFAVORITE ()
Draw score for idea cards 

_DM_DRAWLIKE ()
Draw likes for idea cards 

_DM_DRAWLIKESNUMBER ()
Draw likes number for idea cards 

_DM_DRAWOTHERACTIONS ()
Display 3 dot icon for idea cards 

_DM_DRAWSCORE ()
Draw score for idea cards 

_DM_DRAWSTATUS ()
Draw status for idea cards 

_DM_DRAWTITLE ()
Draw title for idea cards 

_DM_DRAWWORKFLOWBUTTON ()
Draw workflow button for idea cards 

_DM_DRAW_IMAGE_MULTI_CHOICE ()
Draw image for idea 

_DM_INIT_UPDATE_LIKES ()
Draw image for idea 

_DM_NEW_VOTE_DISLIKE (projectslist)
Dislike an idea 
Arguments
Argument
 
Documentation 
PROJECTSLIST

Vector of projects 

_DM_NEW_VOTE_LIKE (projectslist)
Like an idea 
Arguments
Argument
 
Documentation 
PROJECTSLIST

Vector of projects 

_DM_ONCLICKCOMMENTS ()
on click on comments for idea cards 

_DM_ONCLICKCONTENT ()
Click on content for idea cards 

_DM_ONCLICKDISLIKE ()
Click on likes for idea cards 

_DM_ONCLICKEDITMENU ()
Click on edit button for idea cards 

_DM_ONCLICKFAVORITE ()
add/remove idea from favorite 

_DM_ONCLICKLIKE ()
Click on likes for idea cards 

_DM_ONCLICKOTHERACTIONS ()
Click on 3 dot menu for idea cards 

_DM_ONCLICKSCORE ()
Draw status for idea cards 

_DM_ONCLICKTITLE ()
on click on title for idea cards 

_GANTTMANAGESCALE ()
Manage time scale color and font for the Gantt 
Syntax examples
plw._GanttManageScale();

_GUIDRAWDROPPEDDATESTYLEMENU ()
Draw the date style context menu 
Syntax examples
plw._GuiDrawDroppedDateStyleMenu();

_GUIGOTOMODULEOBJECTANDREPORT (moduleid, moduleobject, reportingname, reportinstance, reportobject)
Navigate to a particular reporting in a module 
Arguments
Argument
 
Documentation 
MODULEID

ID of the module 
MODULEOBJECT

Module object 
REPORTINGNAME

Name of the targeted reporting 
REPORTINSTANCE

Instance report 
REPORTOBJECT

Object report 

_GUIGOTOMODULEOBJECTREPORTANDTAB (moduleid, moduleobject, reportingname, reportinstance, reportobject, newtab)
Add a tab and navigate to a particular reporting in a module 
Arguments
Argument
 
Documentation 
MODULEID

ID of the module 
MODULEOBJECT

Module object 
REPORTINGNAME

Name of the targeted reporting 
REPORTINSTANCE

Instance report 
REPORTOBJECT

Object report 
NEWTAB

Boolean to display in a new tab 

_GUIOPENNEWLYCREATEDPROJECT (functionforopen)
Open newly created project just after creation. The newly created project replace the current one if any. The link is done only when creating, and if no project type is defined, the project is opened in the current module. Argument functionForOpen is not used. 
Arguments
Argument
 
Documentation 
functionForOpen

Name of the project opening function, unused. 
Syntax examples
plw._GuiOpenNewlyCreatedProject(this : newProject, "_inf_open_project");

_IHM_CONTEXTMAPPERADDRIGHTCLICKANDREMOVE (toolclass, function)
On module Homepage, add current toolbar tools and specific tools to menu available on right click on table 
Arguments
Argument
 
Documentation 
TOOLCLASS

Internal argument 
FUNCTION

Internal argument 

_IHM_CURRENTFILTER_LINK_DEACTIVATE_CHILDRENS (id)
Reset filter from filter panel 
Arguments
Argument
 
Documentation 
ID

[String] Identifier of a filter from current filter panel 
Syntax examples
plw._ihm_currentFilter_link_deactivate_childrens(ID));

_IHM_EXPOSETOOLBARMENU ()
Expose toolbar menu (i.e. menu that display unfolded or folded toolbar and so on) 
Syntax examples
plw._ihm_exposeToolbarMenu();

_IHM_GETCURRENTGRIDCURRENTFILTER ()
Retrieve current filter from filter panel 
Syntax examples
plw._ihm_getCurrentGridCurrentFilter();

_IHM_OPENPROJECTCLICKHANDLER (slot)
Click handler for project opening from a project 
Arguments
Argument
 
Documentation 
SLOT

A slot 
Syntax examples
oSymbolicField.AddClickHandler(_Ihm_OpenProjectClickHandler);

_IHM_TB_CURRENT_OBJECT_IN_TOOLBAR_IN_POPUP ()
Get current popup object 
Syntax examples
var oActivity = plw._ihm_tb_current_object_in_toolbar_in_popup();

_IHM_TB_GETTOOLBARTOOLSFROMPARAM ()
Get toolbar tools 
Arguments
Argument
Documentation 
THIS
Graphics element or context 
Syntax examples
plw._ihm_tb_getToolBarToolsFromParam(o_toolbar, o_toolBarState, inGroups)

_IHM_TB_MAINDRAWANYTOOLBAR ()
Draw any toolbar 
Arguments
Argument
Documentation 
THIS
Graphics element or context 
Syntax examples
this._ihm_tb_mainDrawAnyToolbar(toolbar, uniqueKey);

_IHM_TB_SETCURRENTLYEDITEDTOOLFROMONBWITHREFRESH (o_tool)
Technical function for tools displayed in Admin toolbar editor 
Arguments
Argument
 
Documentation 
o_tool

Mockup toolbar tool 

_IMPEX_CHECKPEXQUERYCOSTTABLE (query)
Build cost tables for a query. 
Arguments
Argument
 
Documentation 
QUERY

PEX Query 

_IMPEX_EXPORTPEXQUERYCOSTTABLE (portfolio, query, format, target, startdate, enddate)
Export a PEX query's cost table using a L1 impex format and target. 
Arguments
Argument
 
Documentation 
PORTFOLIO

Portfolio used to export the query 
QUERY

Query to export 
FORMAT

L1 Impex format 
TARGET

L1 Impex target 
STARTDATE

Start date 
ENDDATE

End date 

_IMPEX_REFRESHPEXQUERYCOSTTABLES (query, startdate, enddate)
Refreshes a PEX query's cost table before an export for instance. 
Arguments
Argument
 
Documentation 
QUERY

Query to refresh 
STARTDATE

Start date 
ENDDATE

End date 

_IND_COMPUTE_RATE_BETWEEN_UNITS (unit1)
Returns the rate between two monetary units for a given date 
Arguments
Argument
Documentation 
Unit1
Identifier of the first cost unit 
Syntax examples
plw._ind_compute_rate_between_units(s_Unit_Id1,s_Unit_Id2,dDate);

_INF_JS_COMPUTE_PORTFOLIO_FILTER ()
Retrieve current portfolio filters 
Syntax examples
var vFilters = plw._inf_js_compute_portfolio_filter();

_INF_OPEN_PROJECT ()
Open a project in the project module 
Arguments
Argument
 
Documentation 
THIS

[Object] Project 
Syntax examples
project._inf_open_project();

_INF_OPEN_PROJECTS_IN_PORTFOLIO ()
Open a virtual dataset based on the projects from current selected portfolio 
Syntax examples
plw._inf_open_projects_in_portfolio();

_LINKSACTIVATELINK (linkid)
Activate a navigation link associated to the hyperlink 
Arguments
Argument
 
Documentation 
LINKID

ONB of the targeted hyperlink 

_LINKSDRAWLINKS (linkonb)
Draw the hyperlink highlight 
Arguments
Argument
 
Documentation 
LinkOnb

ONB of the targeted hyperlink 

_PEX_JS_BUILDCOSTTABLES (this)
Build cost tables issued from a PEX query 
Arguments
Argument
 
Documentation 
this

Query 

_PEX_JS_SETDISPLAYEDTIMEUNIT (this, s_timeunitlist)
Set the displayed time unit for the given time unit form 
Arguments
Argument
 
Documentation 
this

Time unit form 
s_timeUnitList

a string list of time unit (ex : "YEAR,MONTH") 

_PM_GETREFERENCE (project, name)
Return the reference in the given project corresponding to the given name 
Arguments
Argument
 
Documentation 
PROJECT

a project (ordo-project) 
NAME

a reference name (string) 

_PM_JS_TODO_RESET_MAIL_FIELDS ()
Reset e-mail fields on context 

_PM_JS_TODO_SEND_REMINDER_LINK ()
On a deliverable or graphic linked to deliverable class, triggers the display of the for used to send an email reminder. 
Syntax examples
oObj._pm_js_todo_send_reminder_link();

_RM_REVIEW_JS_COPY_SUPPLY_TO_PLANNING ()
Replace forecast with supply on selection 

_RM_REVIEW_JS_FORWARD_UP_RM ()
In supply/demand RM side, this forwards the selection 

_RM_REVIEW_JS_PH_POPUP_INIT ()
On planned hour creation form, used as field update script on input cells to keep the form content consistent 
Syntax examples
plw._rm_review_js_ph_popup_init();

_RM_REVIEW_JS_PM_ASSIGN_HES_TO_RES (hes, indivres, droppedoncolumn, partialassign)
Assign the time synthesis to the given resource 
Arguments
Argument
 
Documentation 
HES

The time synthesis to assign 
INDIVRES

The target resource 
DROPPEDONCOLUMN

False if the whole synthesis is assigned, the column symbol to assign only for the column time period 
PARTIALASSIGN

True if you want to see the partial assignment popup, false otherwise 

_RM_REVIEW_JS_PM_ASSIGN_ROLE_TO_RES (role, indivres, droppedoncolumn, partialassign)
Assign the time synthesis to the given resource 
Arguments
Argument
 
Documentation 
ROLE

The role to assign 
INDIVRES

The target resource 
DROPPEDONCOLUMN

Not relevant for role assignment 
PARTIALASSIGN

Not relevant for role assignment 

_RM_REVIEW_JS_PUBLISH_UP_PM (currentobject)
In supply/demand PM side, this publishes the selection 
Arguments
Argument
 
Documentation 
CURRENTOBJECT

The file we will check write access on 

_RM_REVIEW_JS_PUBLISH_UP_RM ()
In supply/demand RM side, this publishes the selection 

_RM_REVIEW_JS_REJECT_UP_RM ()
In supply/demand RM side, this rejects the selection 

_RM_REVIEW_JS_UNPUBLISH_UP_PM (currentobject)
In supply/demand PM side, this unpublishes the selection 
Arguments
Argument
 
Documentation 
CURRENTOBJECT

The file we will check write access on 

_RM_REVIEW_JS_UNPUBLISH_UP_RM ()
In supply/demand RM side, this unpublishes the selection 

_SOCIAL_RETURN_USER_PORTRAIT (user)
Return the avatar image of a user 
Arguments
Argument
 
Documentation 
USER

User 
Syntax examples
plw._social_return_user_portrait();

_SOCIAL_STATUS_REPORT_TO_PUBLISH (status_report)
Display status report post pop-up 
Arguments
Argument
 
Documentation 
STATUS_REPORT

Element of class Status report 
Syntax examples
plw._social_status_report_to_publish(statusReport);

_SOC_JS_STATUS_REPORT_CLICKHANDLER (fields, statusreport)
Display status report selection list on a click, if field is writable 
Arguments
Argument
 
Documentation 
FIELDS

Field to update 
STATUSREPORT

Element of class Status report 

_TC_DISPLAY_ACT_QUICK_SEARCH ()
Setup activity grid for TC 

_UTILCLEANUSERUSERPARAMETERS (user)
Reset user parameters for a specific user 
Arguments
Argument
 
Documentation 
USER

A user identifier 

_UTILCURRENTPAGEISONSINGLEPROJECT (currentpageobject)
Return true if current page object is a project or a virtual dataset with only one project 
Arguments
Argument
 
Documentation 
CURRENTPAGEOBJECT

Current page object 

_UTILCURRENTPAGEISONVIRTUALDATASET (currentpageobject)
Return true if current page object is a virtual dataset 
Arguments
Argument
 
Documentation 
CURRENTPAGEOBJECT

Current page object 

_UTILGENERATEVDPROJECTSLIST (objectid)
Generate a list containing the virtual dataset projects 
Arguments
Argument
 
Documentation 
OBJECTID

Virtual dataset ID 

_UTILSCLEANUSERPARAMETERSSELECTION ()
Reset user parameters for a selection of users 

_UTILSCOMPUTERELATION (relation)
count number of elements in a relation 
Arguments
Argument
 
Documentation 
RELATION

A relation 

_UTILSGETTOPLEVEL (project)
Return the top level workstructure on a project 
Arguments
Argument
 
Documentation 
PROJECT

A project 

_UTILSISINPROJECTLIST (objectid, project)
Return true if the object project is in the current virtualdataset 
Arguments
Argument
 
Documentation 
OBJECTID

Virtual dataset ID 
PROJECT

Project ID 

_UTILS_ACTIVITY_TABLE_PM_DISPLAY_SCRIPT ()
Called on display of standard activity table to add handler & graphical properties 
Syntax examples
this._utils_activity_table_pm_display_script();

_UTILS_COMPLETERESET ()
Reset user, pages and navigation parameters for a specific user 

_UTILS_COMPUTECURVEWITHCACHE (composite_curve, object, cumulative, startdate, enddate, cost_unit, time_unit, cache)
Return a curve computed with cache 
Arguments
Argument
 
Documentation 
COMPOSITE_CURVE

Composite curve 
OBJECT

Object 
CUMULATIVE

Cumulative boolean 
STARTDATE

Start date 
ENDDATE

End date 
COST_UNIT

Cost unit 
TIME_UNIT

Time unit 
CACHE

Cache 

_UTILS_COMPUTE_FTE (resource, load, date1, date2, calendar)
Function that compute the fte for a specified resource and load between two dates, the calendar can be specified Exemple: _Utils_Compute_Fte(Resource,Load,date1,Date2,Calendar) 
Arguments
Argument
 
Documentation 
RESOURCE

Resource ID 
LOAD

Load value 
DATE1

First date 
DATE2

Second date 
CALENDAR

A calendar object 

_UTILS_FINDCLASS (searched_class)
Look for a class 
Arguments
Argument
 
Documentation 
SEARCHED_CLASS

Name of the class to look for (string) 

_UTILS_GANTT_PM_DISPLAY_SCRIPT ()
Called on display of standard Gantt to add handler & graphical properties 
Syntax examples
plw._utils_gantt_pm_display_script();

_UTILS_GETDEFAULTVALUE ()
Retrieve default value of an object attribute 
Arguments
Argument
 
Documentation 
THIS

An object attribute 

_UTILS_GET_EMAILS_FROM_GROUP_LIST (groupslist)
Get user emails from a groups list 
Arguments
Argument
 
Documentation 
GROUPSLIST

List of user groups 

_UTILS_JS_SEND_MAIL (messagedisplayed)
Send mail with a message to be displayed when mail has been actually sent 
Arguments
Argument
 
Documentation 
MESSAGEDISPLAYED

Message to display 

_UTILS_MAKEDYNRELATION (name, comment, opxclassid, connectedtoclass, mapmethod)
Create a dynamic relation based on given arguments 
Arguments
Argument
 
Documentation 
NAME

Relation name 
COMMENT

Relation comment 
OPXCLASSID

Class on which rthe relation will be defined 
CONNECTEDTOCLASS

Target class 
MAPMETHOD

Function for mapping method 

_UTILS_RESOLVERELATIVEURL (base_url, relative_url)
Function _Utils_resolveRelativeURL 
Arguments
Argument
 
Documentation 
BASE_URL

Base URL 
RELATIVE_URL

Relative URL 

_UTILS_SEND_MAIL (dest, sender, subject, body, attachment)
Send mail based on parameters 
Arguments
Argument
 
Documentation 
DEST

Recipient(s) 
SENDER

Sender 
SUBJECT

Subject 
BODY

Body 
ATTACHMENT

Attachment 

_UTILS_SPLIT (list_of_seps)
Split a string based on given separators 
Arguments
Argument
 
Documentation 
THIS

String to be splitted 
LIST_OF_SEPS

List of separators 

Variables
context
This constant allows to access to the current OPX2 context of the working session 

Other functions
Other javascript functions 
Functions
adddMenuItem (item)
Add an already existing menu-item structure to a menu or as a child of another existing menu-item 
Arguments
Argument
 
Documentation 
ITEM

The menu-item to add 

addExcelCellDatahandler (handler)
Adds a cell data handler called at excel export on each couple object/attribute of exported data 
Arguments
Argument
 
Documentation 
HANDLER

function or function name invoked on export of a table widget 

addExcelFooterHandler (handler)
Adds an Excel export handler for footer to a widget 
Arguments
Argument
 
Documentation 
HANDLER

function or function name invoked on export of a table widget 

addExcelHeaderHandler (handler)
Adds an Excel export handler for header to a widget 
Arguments
Argument
 
Documentation 
HANDLER

function or function name invoked on export of a table widget 

addGraphPositionHandler ()

addKeyboardShortcut (key)
Declare a new (global) keyword shortcut (Control + Key) for the given tool 
Arguments
Argument
 
Documentation 
THIS

String or Symbol: name of the tool 
KEY

One character string, key to bind the tool to 

addPageHistory ()
Allows to add object to pages history, when the user clicks on the previous or next button the "go" method is invoked on the object added in the history. 

addThumbnailImageHandler (function)
Adds a thumbnail image handler that can return the image to be displayed for an object in a thumbnail when applicable 
Arguments
Argument
 
Documentation 
FUNCTION

Valid OJS function whose this is the object and that should return either false or an image 

appendMenuItem (string, script, existing-option)
Append a new menu item into a menu or menu item, the method applies on menu widgets or menu item objects, it returns a menu item object.On a menu item object, the slots: image,font,div,align,alignvertical,borders,background,foreground,backgroundover and foregroundover are updatable to change the default presentation of the menu item. To reset the menu-items of a menu, you have to call this method with two empty strings 
Arguments
Argument
 
Documentation 
STRING

String displayed in the menu item 
SCRIPT

Script called when the user choose the menu, the script is evaluated in the context of the graphics of the menu 
EXISTING-OPTION
OPTIONAL
String: exsiting option where the menu item is appended 

currentSelection ()
Return table display selection in order to be mapped 

defork ()
In Intranet Server, sends the connected applet to the server it was connected with before forking. If not called in a fork, it won't do anything. All the code after the call to defork won't be executed. You can defork whenever you want, but be aware that you may loose some data on the client side if you do not think where you defork. Indeed, the client will be asked to go back to the server it previously was on, but this server does not know him anymore. The session will be rebuild on the destination server based on where the applet was before deforking. But session resuming won't be able to restore currently modified but not save entries in a table for example. Thus, to be sae, the best place to defork is after a go on an hyperlink. 
Syntax examples
defork();

displayProcess ()
Display the process associated to a workflow transaction 

drawBarChartFunnel (bars, args)
Draw a funnel containing bars in a graphics 
Arguments
Argument
 
Documentation 
BARS

Vector of funnelbar objects 
ARGS

[Unlimited arguments] properties of the barchart funnel: GroupOrder: vector of groups displayed GroupSeparatorImage: image used to separate groups GroupSeparatorColor: used if no group separator image is defined GroupSeparatorWidth: width of the group separator if no image is defined GroupSeparatorSymbol: symbol used for the group separator GroupBackgroundColor: color used for the group background GroupContourColor: color used for the contour GroupCornerRadius: radius or the rounded edge of the group GroupTitleFont: font used for the group title GroupTitleColor: color used for the group title GroupContourColor: color used for the group contour BarTitleAngle: texte angle used for the bar title BarTitleFont: font used for the bar title BarTitleColor: color used for the bar title BarCountFont: font used for the bar count text BarCountColor: color used for the bar count text BarContourColor: color used for the contour of the bar BarWidth: width of bars displayed OnClick: function invoked when the user clicks on a bar, this is defined in the funnelbar object OnDoubleClick: function invoked on double click on a bar GroupMargin: space between group in addition to the group separator image TopMargin: top margin LeftMargin: left margin BottomMargin: bottom margin RightMargin: right margin VerticalInnerMargin: vertical inner margin of bars inside a group LineColor: color of lines and contours 

executeInFork (script)
On UNIX, executes the given script in a fork process. The client is forced to wait for the completion of the script, as if the script was not ran in a fork. On Windows, executes the script in the client's thread as if the it was called directly. 
Arguments
Argument
 
Documentation 
SCRIPT

String, script that is ran in the forked process 
Syntax examples
executeinfork("createVersion("+ my_project.printattribute() + ")");

exportToXMLFile (project, format, file-path)
Export the given project to a file. Returns the path of the export file or nil in case of error 
Arguments
Argument
 
Documentation 
PROJECT

the project to export 
FORMAT
OPTIONAL
a format for the export 
FILE-PATH
OPTIONAL
path where the file will be generated (on the server). If not given a temp file is 

fork (auto-defork)
In Intranet Server, fork a new process and run all code after this point in the forked process. If for some reason the fork fails, everything is executed in the main process. It this function is called in a forked process, it just executes the code without reforking again. Returns t when fork in successful, nil otherwise. 
Arguments
Argument
 
Documentation 
AUTO-DEFORK
OPTIONAL
boolean (default true). When true, the fork will end as soon as the current page object changes. 
Syntax examples
fork();

generateTemporaryFile (filename, directory)
Return the pathname of a file in system temporary directory 
Arguments
Argument
 
Documentation 
FILENAME

string, name of the file to be generated 
DIRECTORY
OPTIONAL
string, to put the file in a subdirectory 

getExcelCursor ()
Returns a cursor to Excel data that is an empty line 

getFolderURL (indexfile, prefix)
Returns an URL that can be used to access the contents of a folder 
Arguments
Argument
 
Documentation 
INDEXFILE
OPTIONAL
Name of the index file of the folder 
PREFIX
OPTIONAL
string to prefix the url 

getlocalfile (path)
Transfer a local file to the server and return its path on the server 
Arguments
Argument
 
Documentation 
PATH

string, path of the local file 

getServerFiles (list, locateonclient, file-name-format)
Copy the files listed in list on the intranet server. Returns a list with the path of the files on the server 
Arguments
Argument
 
Documentation 
LIST

List: A list of files path to copy onto the intranet server 
LOCATEONCLIENT

Boolean: The files will be copied on the server only if this args is set to true 
FILE-NAME-FORMAT

String: The new files on the server will be created according to this format. Your format must include "~~A" so that a unique id will be appended to your file name 

getShortCutEvent ()
Inside the code of a tool called with a keyboard shortcut, returns an object describing the window and the x&y of the mouse at the time the shortcut was called 

importExcelFile (file)
Import an excel file into a widget. this is the widget 
Arguments
Argument
 
Documentation 
FILE

File to import 

importFromXMLFile (path, dest-project, format, mode)
import the given XML file into a project 
Arguments
Argument
 
Documentation 
PATH

path (accessible from the server) 
DEST-PROJECT

project the file will be restored into (object or string) 
FORMAT

format to use for the import 
MODE
OPTIONAL
ignored at this time 

importProjectFromXMLFile (path, restore-mode, delete-objects, import-in-foreign, do-global-search, new-project-name)
import the given file 
Arguments
Argument
 
Documentation 
PATH

path (accessible from the server) 
RESTORE-MODE

restoration mode: :|new| :|version| :|in-place| 
DELETE-OBJECTS

boolean, delete objects not referenced in the xml file from the target project 
IMPORT-IN-FOREIGN

boolean, import foreign objects in a separate and shared dataset (for all exports from the same database) 
DO-GLOBAL-SEARCH

boolean, look for foreign objects globally 
NEW-PROJECT-NAME

string, if restore-mide is :|new|, name of the new project to create 

isActionFeasible (action)
Tests if an action is feasible on an object, if no action is specified the broadcast action is tested 
Arguments
Argument
 
Documentation 
ACTION
OPTIONAL
workflow action to be tested 

isCurveWritable (dodarray, startdate, enddate, inputmode, workstructurepresent, resourcepresent, allowinputbefore, allowinputafter, inputfixeddates)
Returns wether a curve is writable or not 
Arguments
Argument
 
Documentation 
DODARRAY

Load Array, is nullable 
STARTDATE

Start date 
ENDDATE

End date 
INPUTMODE

Dod array Input Mode 
WORKSTRUCTUREPRESENT

Defines whether there is a work structure on the load array 
RESOURCEPRESENT

Defines whether there is resource on the load array 
ALLOWINPUTBEFORE

Defines whether Input is possible before the start of activity 
ALLOWINPUTAFTER

Defines whether Input is possible after the end of activity 
INPUTFIXEDDATES

Input are made using fixed dates 

isVisible (context)
Indicates if an object is visible in the current context 
Arguments
Argument
 
Documentation 
CONTEXT

Object describing the context where the object is visible 

ldapimport (synchro-name)
run the <synchro-name> LDAP Synchro. 
Arguments
Argument
 
Documentation 
SYNCHRO-NAME

LDAP Synchro name 

ldapimportfromfilter (synchro-name, filter)
run the <synchro-name> LDAP Synchro with the specified ldap <filter>. The macro should have one and only one defined table mapping. 
Arguments
Argument
 
Documentation 
SYNCHRO-NAME

LDAP Synchro name 
FILTER

ldap filter 

ldapimportgroupfromfilter (synchro-name, filter)
run the <synchro-name> LDAP Synchro with the specified ldap <filter>. The macro should have one and only one defined table mapping. This function must be used when dealing with group macros. 
Arguments
Argument
 
Documentation 
SYNCHRO-NAME

LDAP Synchro name 
FILTER

ldap filter 

logw7 (action, perfdata, info)
log custom/user events in the W7. 
Arguments
Argument
 
Documentation 
ACTION

action comment (string) 
PERFDATA

number value (string) 
INFO

action notepad (string) 

makePngWithDrawingScript (drawing-info, cache-indo, width, height)
Create a PNG image that is filled with instructions provided in drawing script, the drawing script is called with a graphics objects that draws directly in the png image. The programmer can specify cache information, a vector of data that identifies the PNG image as a unique object, thus only one PNG image is generated for on instance of the cache vector. The method has to be called on a graphics object 
Arguments
Argument
 
Documentation 
DRAWING-INFO

String, script that draws inside the png image when it is generated 
CACHE-INDO
OPTIONAL
vector of data that identifies a unique key for the png image, 
WIDTH
OPTIONAL
Integer, width of the PNG image, by default width of the graphics object 
HEIGHT
OPTIONAL
Integer, height of the PNG image, by default height of the graphics object 
Syntax examples
graphics.MakePngWithDrawingScript("this.fillrectangle();");

newExcelLine ()
Adds a line to an Excel cursor 

performAction (action)
Performs a workflow action on an object, if no action is specified the broadcast action is performed Returns true if the action has been performed successfully and false otherwise 
Arguments
Argument
 
Documentation 
ACTION
OPTIONAL
workflow action to be performed 

recordAllPositions ()

remCurveType (name)
Allows to remove a newly added curve type using addcurvetype 
Arguments
Argument
 
Documentation 
NAME

string, name of the new curve type 

selectclientfile ()
call selectfile except in ajax where it does nothing (but returns :ok as if selectfile was a success 

sendfiletoclient (server-path, client-path, type, clean)
Sends a file to the client. Works in IS by sending the file to the applet or in pro where it just copies the file 
Arguments
Argument
 
Documentation 
SERVER-PATH

string, path of the source file (on the sever in IS, local file in pro) 
CLIENT-PATH

string, path of the destination file (on the client in IS, local file in pro) 
TYPE
OPTIONAL
symbol, file type of the destination file (default: xml) 
CLEAN
OPTIONAL
boolean. If true remove the source file in pro. Do nothing in IS 

setUserParameterWithInfo (key, value, info, stored-on-applet)
Allows to set a user parameter with an info string 
Arguments
Argument
 
Documentation 
KEY

key for the parameter 
VALUE

value for the parameter 
INFO

info string 
STORED-ON-APPLET

Send the parameter value to the applet to be restored in case of session resuming 

writeExcelCell (data, format-plist)
Adds an Excel export handler for footer to a widget 
Arguments
Argument
 
Documentation 
DATA

Data to be written in the cell as expected in excel 
FORMAT-PLIST

Stroes format arguments which are : 

Planisware tour
This chapters covers the functions used to interact with Planisware Tour 
Functions
applettourcontext (applet)
Return the applet tour context 
Arguments
Argument
 
Documentation 
APPLET

the applet to check 

drawplaniswaretouritem (item)
Draw the Planisware tour item given as argument 
Arguments
Argument
 
Documentation 
ITEM

the item to draw 

gotoursequence (sequence)
launch a Planisware Tour sequence 
Arguments
Argument
 
Documentation 
SEQUENCE

the sequence to launch 

Predictive estimation
This chapter covers the API used to train and use predictive models 
Functions
getClassStyles ()
Get class style 

Process management
This chapter introduces some special forms dedicated to multi process management, it is important to read this API documentation if you intend to write OPX2 script for OPX2 Intranet Server 
Syntax operators
whenTimeOut
This form is very usefull, it is the only way to insure that your IntranetServer program which use process lock mechanism will not enter in an infinite deadlock which can block definitively the server. You have to use this form in conjonction with the WithProcessLock mechanism this will insure that after a certain delay if the system is blocked it will stop waiting and perform another operation: for example sending an error message to the user. The timeout specified is expressed in seconds 
Syntax examples
WhenTimeOut(10) do_my_transaction(); do send_error_if_timeout();
WhenTimeOut(10) {
    do_my_transaction1();
    do_my_transaction2();
    } do {
    send_error_if_timeout();
    throw Myerror("Time our problem");
    }

withMonitoring
This form allows you to display some progress information in the OPX2 information bar (at the bottom left of the OPX2 pro application or browser) while performing a long operation. There is a first condition statement which allows to decide if the progress information should be shown or not (it is for example not necessary to monitor a transaction on 5 objects but become necessary if the transaction runs on 5000 objects), the body statement contains the transaction which in most of the case is a kind of loop, to have the withmonitoring statement work properly you have to combine itself with a call to the monitor function which is the function that perform the monitoring message 
Syntax examples
WithMonitoring (MyObjects.length \> 100) for (x in Myobjects) { 
x.do_my_transaction(); 
"Performing op on objects".Monitor(MyObjects.length);
}

withoutInterrupts
This form allows to block all processes while performing a certain operation on objects, it is quite usefull and dangerous. Usefull because it is the best way to insure that a shared resource can not be modified by different process at the same time, dangerous because if the transaction you perform inside a withoutInterrupts is long, your server will not be able to respond while performing the transaction. We recommand to use this form only for very small,fast and localized transactions, if you want to protect a resource for a longer transaction, it is much better to use the withProcessLock form or withObjectLock form 
Syntax examples
WithoutInterrupts do_my_trabsaction();

withProcessLock
This form allows you to lock a flag in order to stop all processes who want to use this flag. This form is very usefull if you want to write some OPX2 script code inside OPX2 intranet server. For example you are writing a transaction which is modifying a specific resource a file for example, which is shared by all users, if you do not garanty that only one process at one time can modify this file you will enter in deep troubles, two processes can modify the same file at the same time and the behavior of your program will become unpredictable. To avoid this kind of problem you can use WithProcessLock and use the file descriptor as object to lock, then the first process will lock the file descriptor and run, the second one will try to lock the file descriptor and wait until the file desc is freed by the first one. We strongly recommand to use this construct with a WhenTimeOut construct in order to avoid dead locks in your program 
Syntax examples
WithProcessLock (MyFile) { my program ...}

Functions
monitor (total_of_pass, increment, delay)
This function is used in conjonction with the WithMonitoring form. The monitor function will perform a message in the OPX2 information bar given certain condition of increment and delay (see the arguments of the function 
Arguments
Argument
 
Documentation 
TOTAL_OF_PASS

Integer: total number of pass for the loop, this number is used in conjonction with the percentage increment to decide when displaying a message 
INCREMENT
OPTIONAL
Integer: increment percentage which is decide 
DELAY
OPTIONAL
Integer: minimum delay between message, which prevents 

processSleep (seconds)
Set a process in sleep mode during N seconds 
Arguments
Argument
 
Documentation 
SECONDS

Integer: number of seconds 

processes api
This chapter covers function from processes that are published for use in user scripts 
Functions
actcomparebyplannedstart ()
Undocumented function (but callable in user scripts) 

actionbeforereferencecreation ()
Undocumented function (but callable in user scripts) 

addparsedobject ()
Undocumented function (but callable in user scripts) 

add_SELECTED_ACTIVITY_TO_FILTER ()
Undocumented function (but callable in user scripts) 

applycurrentequation ()
Undocumented function (but callable in user scripts) 

applyequation ()
Undocumented function (but callable in user scripts) 

applyequations ()
Undocumented function (but callable in user scripts) 

apply_EQUATION ()
Undocumented function (but callable in user scripts) 

attr_REF_COMP_FIELDS_CHOOSER ()
Undocumented function (but callable in user scripts) 

batchapimod.BATCH_API_DEFINITION ()
Undocumented function (but callable in user scripts) 

batchapimod.BATCH_STATUS ()
Undocumented function (but callable in user scripts) 

batchapimod.GENERATE_JSON_STATUS ()
Undocumented function (but callable in user scripts) 

batchapimod.PAUSE_BATCH ()
Undocumented function (but callable in user scripts) 

batchapimod.START_BATCH ()
Undocumented function (but callable in user scripts) 

batchapimod.UNLOCK_BATCH ()
Undocumented function (but callable in user scripts) 

batchapimod.UNPAUSE_BATCH ()
Undocumented function (but callable in user scripts) 

canapplyequation ()
Undocumented function (but callable in user scripts) 

canapplyequationwithbasefilter ()
Undocumented function (but callable in user scripts) 

checkifprogramisused ()
Undocumented function (but callable in user scripts) 

checkonapply ()
Undocumented function (but callable in user scripts) 

check_FIELDS_TO_ARCHIVE_CACHE ()
Undocumented function (but callable in user scripts) 

class_ARECLASSESEQUAL ()
Undocumented function (but callable in user scripts) 

class_BREAKDOWNSTRUCTUREPARENTSLOT ()
Undocumented function (but callable in user scripts) 

class_BREAKDOWNSTRUCTUREPARENTSLOTOBJ ()
Undocumented function (but callable in user scripts) 

class_COMMONANCESTOR ()
Undocumented function (but callable in user scripts) 

class_DESCRIPTION ()
Undocumented function (but callable in user scripts) 

class_FORMULANAME ()
Get the string representing a class in formulae 
Arguments
Argument
 
Documentation 
this

[string/symbol/objectClass] A variable that correspond to a Planisware object class 
Syntax examples
"Activity".class_formulaName()

class_GETALLREQUESTABLECLASSES ()
Undocumented function (but callable in user scripts) 

class_GETALLREQUESTABLEDESCRIPTIONS ()
Undocumented function (but callable in user scripts) 

class_GETARBO ()
Undocumented function (but callable in user scripts) 

class_GETCLASSNAME ()
Undocumented function (but callable in user scripts) 

class_GETCONNECTEDCLASSES ()
Undocumented function (but callable in user scripts) 

class_GETCONNECTEDCLASSESFIELDNAMESHASHTABLE ()
Undocumented function (but callable in user scripts) 

class_GETCONNECTEDCLASSESNAMES ()
Undocumented function (but callable in user scripts) 

class_GETOBJECTCLASS ()
Undocumented function (but callable in user scripts) 

class_GETONLYTABLEDEFINEDSLOTNAMES ()
Undocumented function (but callable in user scripts) 

class_GETONLYTABLEDEFINEDSLOTS ()
Undocumented function (but callable in user scripts) 

class_GETPARENT ()
Undocumented function (but callable in user scripts) 

class_GETSLOTSOFTYPES ()
Undocumented function (but callable in user scripts) 

class_GETTEMPID ()
Undocumented function (but callable in user scripts) 

class_GETUSERDEFINEDATTRIBUTE ()
Undocumented function (but callable in user scripts) 

class_HIERARCHICALGET ()
Undocumented function (but callable in user scripts) 

class_INHERIT ()
Undocumented function (but callable in user scripts) 

class_INHERITFROM ()
Undocumented function (but callable in user scripts) 

class_INIT_CLASS_OBJECT ()
Undocumented function (but callable in user scripts) 

class_ISBREAKDOWNSTRUCTURE ()
Undocumented function (but callable in user scripts) 

class_ISTABLEDEFINEDSLOT ()
Undocumented function (but callable in user scripts) 

class_MAP ()
Undocumented function (but callable in user scripts) 

class_MULTIPLEGET (ids)
Get multiple objects of the same class whose IDs or ONBs are stored in the specified vector
Arguments
Argument
 
Documentation 
this

[string/symbol/objectClass/...] A variable that correspond to a Planisware object class 
ids

[vector] A vector of IDs or ONBs of the class THIS 

class_PARSESYMBOL (object)
Get the symbol corresponding to a string 
Arguments
Argument
 
Documentation 
object

[string] A string that could be a symbol 

class_SCRIPTNAME ()
Get the string representing a class in Opx2Script 
Arguments
Argument
 
Documentation 
this

[string/symbol/objectClass/...] A variable that correspond to a Planisware object class 

class_SETUSERDEFINEDATTRIBUTE ()
Undocumented function (but callable in user scripts) 

class__GETCONNECTEDATTRIBUTES ()
Undocumented function (but callable in user scripts) 

clearaftercommand ()
Undocumented function (but callable in user scripts) 

clearafterequation ()
Undocumented function (but callable in user scripts) 

clearequationstree ()
Undocumented function (but callable in user scripts) 

clearrulestree ()
Undocumented function (but callable in user scripts) 

color_ASSETBITSVALUE ()
Undocumented function (but callable in user scripts) 

color_CHOOSECOLORWITHMORECONTRAST ()
Undocumented function (but callable in user scripts) 

color_CONTRASTBETWEENCOLORS ()
Undocumented function (but callable in user scripts) 

color_DRAWCOLORFROMFIELD ()
Undocumented function (but callable in user scripts) 

color_DRAWCOLORSTOREDINFIELD ()
Undocumented function (but callable in user scripts) 

color_GENERATEBRUSHFROMCOLORWITHPERCENTOPACITY ()
Undocumented function (but callable in user scripts) 

color_GENERATECOLORFROMKEY ()
Undocumented function (but callable in user scripts) 

color_GENERATECOLORFROMOBJECT ()
Undocumented function (but callable in user scripts) 

color_GENERATECOLORSTRINGFROMKEY ()
Undocumented function (but callable in user scripts) 

color_GENERATECOLORSYMBOLICFIELD (class, fieldname, targetfieldname)
Generates a symbolic field representing the color stored in a string field linked to an object 
Arguments
Argument
 
Documentation 
this


class

[string,objectClass,symbol] The object class on which the field will be created 
fieldname

[string] Field where the user color is stored on the object 
targetfieldname

[string] Name of the symbolic field 
Syntax examples
plw.color_generateColorSymbolicField(plc._wf_pt_risks, "CUSTO_AA_S_COLOR","CUSTO_SF_COLOR");

color_GENERATECOLORSYMBOLICFIELDWITHDEFAULT ()
Undocumented function (but callable in user scripts) 

color_GENERATECOLORTEXTFINALFIELD ()
Undocumented function (but callable in user scripts) 

color_GETCOLORBRUSHFROMCOLORWITHPERCENTOPACITY ()
Undocumented function (but callable in user scripts) 

color_GETCOLOROFOBJECT ()
Undocumented function (but callable in user scripts) 

color_GETNUMBEROFPREDIFINEDCOLORS ()
Undocumented function (but callable in user scripts) 

color_GETRGBVALUES ()
Undocumented function (but callable in user scripts) 

color_HSLTORGB ()
Undocumented function (but callable in user scripts) 

color_HSVTORGB ()
Undocumented function (but callable in user scripts) 

color_HTMLCOLOR ()
Undocumented function (but callable in user scripts) 

color_HTMLCOLORFROMSTRING ()
Undocumented function (but callable in user scripts) 

color_HTMLTRUECOLOR ()
Undocumented function (but callable in user scripts) 

color_INVERTCOLOR ()
Undocumented function (but callable in user scripts) 

color_ISCOLOR ()
Undocumented function (but callable in user scripts) 

color_LUMINOSITY ()
Undocumented function (but callable in user scripts) 

color_RESETCACHE ()
Undocumented function (but callable in user scripts) 

color_RGBTOHSL ()
Undocumented function (but callable in user scripts) 

color_RGBTOHSV ()
Undocumented function (but callable in user scripts) 

color_RGBVECTOR ()
Undocumented function (but callable in user scripts) 

color_SETCOLORINCONTEXTFIELD ()
Undocumented function (but callable in user scripts) 

color_SETCOLORINCONTEXTFIELDWITHOUTPAINT ()
Undocumented function (but callable in user scripts) 

color_SETLUMINOSITY ()
Undocumented function (but callable in user scripts) 

color_SETLUMINOSITY_FIXED ()
Undocumented function (but callable in user scripts) 

color_SETOPACITY ()
Undocumented function (but callable in user scripts) 

color_STOREINFIELD ()
Undocumented function (but callable in user scripts) 

color_STOREINFIELDCLICKHANDLER ()
Undocumented function (but callable in user scripts) 

color_STOREINFIELD_EXT ()
Undocumented function (but callable in user scripts) 

compile_REFERENCE_ACTIVITY_FILTER ()
Undocumented function (but callable in user scripts) 

compile_REFERENCE_ACTIVITY_FILTER_EXT ()
Undocumented function (but callable in user scripts) 

computeconnectorformula ()
Undocumented function (but callable in user scripts) 

computeequationarglist ()
Undocumented function (but callable in user scripts) 

computelinktopaste ()
Undocumented function (but callable in user scripts) 

computerelationlist ()
Undocumented function (but callable in user scripts) 

computesubordinatedresources ()
Undocumented function (but callable in user scripts) 

compute_PROPAGATION_FOR_REF_CREATION ()
Undocumented function (but callable in user scripts) 

compute_SELECTION ()
Undocumented function (but callable in user scripts) 

copylibrarylink ()
Undocumented function (but callable in user scripts) 

copypaste_GETCLIPBOARD ()
Undocumented function (but callable in user scripts) 

copypaste_ISPASTABLE ()
Undocumented function (but callable in user scripts) 

copypaste_PASTE ()
Undocumented function (but callable in user scripts) 

copypaste_PASTEITEM ()
Undocumented function (but callable in user scripts) 

createopxobject ()
Undocumented function (but callable in user scripts) 

create_ESTIMATED_ATTRIBUTE ()
Undocumented function (but callable in user scripts) 

create_OR_UPDATE_REFERENCE_WITH_PARAMETER ()
Undocumented function (but callable in user scripts) 

dataset_ISLINKED ()
Undocumented function (but callable in user scripts) 

dataset_LINK ()
Undocumented function (but callable in user scripts) 

dataset_OBJ_READABLE ()
Undocumented function (but callable in user scripts) 

dataset_OBJ_WRITABLE ()
Undocumented function (but callable in user scripts) 

dataset_READABLE ()
Undocumented function (but callable in user scripts) 

dataset_WRITABLE ()
Undocumented function (but callable in user scripts) 

date_ADDMONTH ()
Undocumented function (but callable in user scripts) 

date_ADDTIMEUNIT ()
Undocumented function (but callable in user scripts) 

date_AGENDAGROUP ()
Undocumented function (but callable in user scripts) 

date_AGENDAGROUPWITHORDER ()
Undocumented function (but callable in user scripts) 

date_AGOFORMAT ()
Undocumented function (but callable in user scripts) 

date_AGOFORMATFIELDS ()
Undocumented function (but callable in user scripts) 

date_AGOFORMATWITHDEFAUTSTARTHOUR ()
Undocumented function (but callable in user scripts) 

date_CALENDARTIME ()
Undocumented function (but callable in user scripts) 

date_CALENDARTIMEFIELD ()
Undocumented function (but callable in user scripts) 

date_CALENDARTIMEFULL ()
Undocumented function (but callable in user scripts) 

date_CALENDARTIMEFULLFIELD ()
Undocumented function (but callable in user scripts) 

date_CALENDARTIME_DATEFORMAT_FULL ()
Undocumented function (but callable in user scripts) 

date_CONVERTINTOJDATE ()
Undocumented function (but callable in user scripts) 

date_CONVERTINTOKERNELDATE ()
Undocumented function (but callable in user scripts) 

date_CREATEHOURATTRIBUTE ()
Undocumented function (but callable in user scripts) 

date_CREATELTATTRIBUTE ()
Undocumented function (but callable in user scripts) 

date_CREATEMINUTEATTRIBUTE ()
Undocumented function (but callable in user scripts) 

date_DDDDFORMAT ()
Undocumented function (but callable in user scripts) 

date_DIFFSECS ()
Undocumented function (but callable in user scripts) 

date_HOURCHOOSER ()
Undocumented function (but callable in user scripts) 

date_HOURSTRING ()
Undocumented function (but callable in user scripts) 

date_LASTGRPDATE ()
Undocumented function (but callable in user scripts) 

date_LASTGRPDATEWITHORDER ()
Undocumented function (but callable in user scripts) 

date_LTATTRIBUTEGETHOUR ()
Undocumented function (but callable in user scripts) 

date_LTATTRIBUTEGETMINUTE ()
Undocumented function (but callable in user scripts) 

date_LTCHOOSER ()
Undocumented function (but callable in user scripts) 

date_LTFORMAT ()
Undocumented function (but callable in user scripts) 

date_LTNUMBERTOSTRING ()
Undocumented function (but callable in user scripts) 

date_LTPOSSIBLEVALUES ()
Undocumented function (but callable in user scripts) 

date_MINUTECHOOSER ()
Undocumented function (but callable in user scripts) 

date_MINUTESTRING ()
Undocumented function (but callable in user scripts) 

date_MMMFORMAT ()
Undocumented function (but callable in user scripts) 

date_MONTHFORMAT ()
Undocumented function (but callable in user scripts) 

date_PRINTENDDATE ()
Undocumented function (but callable in user scripts) 

date_PRINTMILESTONEDATE ()
Undocumented function (but callable in user scripts) 

date_TIMEWINDOWEND ()
Undocumented function (but callable in user scripts) 

date_TIMEWINDOWSTART ()
Undocumented function (but callable in user scripts) 

date_WEEKNUMBER ()
Undocumented function (but callable in user scripts) 

defaultactivityonissuecreation ()
Undocumented function (but callable in user scripts) 

delete_REFERENCE ()
Undocumented function (but callable in user scripts) 

delete_REFERENCE_EXT ()
Undocumented function (but callable in user scripts) 

display_LIBRARY ()
Undocumented function (but callable in user scripts) 

do_INSERT_LIBRARY ()
Undocumented function (but callable in user scripts) 

draw_IMAGE_CHANGE_IMAGE ()
Undocumented function (but callable in user scripts) 

draw_IMAGE_DISPLAY_IMAGE ()
Undocumented function (but callable in user scripts) 

draw_IMAGE_DRAWIMAGEWITHMARGIN ()
Undocumented function (but callable in user scripts) 

dynsymfield_CREATE (objclass, name, desc, iconhandler, clickhandler)
Creates a dynamic symbolic field (on the undefined dataset) with the provided icon and click handlers. Returns the symbolic field in case of success, undefined otherwise 
Arguments
Argument
 
Documentation 
OBJCLASS

[String or Object class] The object class to create the symbolic field on 
NAME

[String] The technical name of the symbolic field 
DESC

[String or MessageString] The description of the symbolic field 
ICONHANDLER

[Function iconhandler] The function acting as icon handler. The function's THIS is of the same type the symbolic field has been created on. 
CLICKHANDLER

[Function clickHandler] The function acting as a click handler. The function's THIS is of the same type the symbolic field has been created on. The function expects a parameter of type ObjectAttribute (a slot). 
Syntax examples
plw.dynSymField_create(plc.workstructure, "DYN_SF_NAME", #projectVersion.resetPrjBaselineColor#, functionIconHandler, functionClickHandler);

dynsymfield_GETSYMBFIELD (objclass, name)
Get a symbolic field on the provided class with the given name. Returns the symbolic field in case of success, undefined otherwise. 
Arguments
Argument
 
Documentation 
OBJCLASS

[String or Object class] The object class to create the symbolic field on 
NAME

[String] The technical name of the symbolic field 
Syntax examples
plw.dynSymField_getSymbField(plc.workstructure, "DYN_SF_NAME");

editor_CLEARATTRIBUTEWIDGETS ()
Undocumented function (but callable in user scripts) 

editor_GETATTRIBUTE ()
Undocumented function (but callable in user scripts) 

editor_SETATTRIBUTE ()
Undocumented function (but callable in user scripts) 

equationtimestart ()
Undocumented function (but callable in user scripts) 

equationtimestop ()
Undocumented function (but callable in user scripts) 

escapedoublebackslash ()
Undocumented function (but callable in user scripts) 

evaluate_BOOLEAN_ON_OBJECT ()
Undocumented function (but callable in user scripts) 

evaluate_DATE_ON_OBJECT ()
Undocumented function (but callable in user scripts) 

evaluate_DURATION_ON_OBJECT ()
Undocumented function (but callable in user scripts) 

evaluate_NUMBER_ON_OBJECT ()
Undocumented function (but callable in user scripts) 

evaluate_STRING_ON_OBJECT ()
Undocumented function (but callable in user scripts) 

export_COMMON ()
Undocumented function (but callable in user scripts) 

export_EXCEL ()
Undocumented function (but callable in user scripts) 

export_GENERATE ()
Undocumented function (but callable in user scripts) 

export_GENERATE_WITH_NAME ()
Undocumented function (but callable in user scripts) 

export_GETNEWFILENAME ()
Undocumented function (but callable in user scripts) 

export_GETPATH ()
Undocumented function (but callable in user scripts) 

export_GETREPORT ()
Undocumented function (but callable in user scripts) 

export_PDF ()
Undocumented function (but callable in user scripts) 

export_PPT ()
Undocumented function (but callable in user scripts) 

export_SETEXTENSION ()
Undocumented function (but callable in user scripts) 

export_SETOBJECT ()
Undocumented function (but callable in user scripts) 

export_SETPRINTER ()
Undocumented function (but callable in user scripts) 

export_SETREPORTANDOBJECT ()
Undocumented function (but callable in user scripts) 

export_SETREPORTNAME ()
Undocumented function (but callable in user scripts) 

export_SETREPORTOPTIONS ()
Undocumented function (but callable in user scripts) 

fastgetapplicableequation ()
Undocumented function (but callable in user scripts) 

filterlibraryrelation ()
Undocumented function (but callable in user scripts) 

fin_JS_READPNLVALUE (project, pnl, equation, date)
Get a value from a cell in a P&L 
Arguments
Argument
 
Documentation 
this


project

[project] A project 
pnl

[Pnl] A pnl 
equation

[equation] A name of an equation in the P&L model 
date

[jsdate] A date or false for the total 
Syntax examples
fin_js_readpnlvalue("OpxProject".get("PRJ"), "Opx_FIN_PT_PNL".get("DEFAULT_PNL"), "NPV", false, "OpxNETWORK".get("NTW01"))

formula_ADDANDFORMULATOFILTER ()
Undocumented function (but callable in user scripts) 

formula_CALLWITHCHECKING ()
Undocumented function (but callable in user scripts) 

formula_CHECK ()
Undocumented function (but callable in user scripts) 

formula_CONCATENATEFORMULAE ()
Undocumented function (but callable in user scripts) 

formula_MERGEFILTERS ()
Undocumented function (but callable in user scripts) 

formula_MERGEFILTERS_EXTENDED ()
Undocumented function (but callable in user scripts) 

formula_VERIFYSYNTAX ()
Undocumented function (but callable in user scripts) 

fte_COMPUTERATEDAYHOUR ()
Undocumented function (but callable in user scripts) 

fte_SWITCHLOADFTE ()
Undocumented function (but callable in user scripts) 

fte_SWITCHLOADFTE_FORMULA ()
Undocumented function (but callable in user scripts) 

generateinsertedactivitieslist ()
Undocumented function (but callable in user scripts) 

generateprogramdeletionalert ()
Undocumented function (but callable in user scripts) 

getallapplicablerulesets ()
Undocumented function (but callable in user scripts) 

getchar ()
Undocumented function (but callable in user scripts) 

getcolorfromindex ()
Undocumented function (but callable in user scripts) 

getcurrentfromfile ()
Undocumented function (but callable in user scripts) 

getlistestimatedattributes ()
Undocumented function (but callable in user scripts) 

getprojectreferenceinparameters ()
Undocumented function (but callable in user scripts) 

getprojectreferenceobject ()
Undocumented function (but callable in user scripts) 

getstageorgatetolinkondel ()
Undocumented function (but callable in user scripts) 

getvirtualdatasetprojectlist ()
Undocumented function (but callable in user scripts) 

get_ATTRIBUTE ()
Undocumented function (but callable in user scripts) 

get_CALENDARS_FOR_FTE ()
Undocumented function (but callable in user scripts) 

get_DEFAULT_UNIT_DEFINED_IN_CHART ()
Undocumented function (but callable in user scripts) 

get_ESCALATION_AVERAGE_FOR_COST_UNIT ()
Undocumented function (but callable in user scripts) 

get_HISTORY_ATTRIBUTE_LIST ()
Undocumented function (but callable in user scripts) 

get_LIBRARY_SELECTION ()
Undocumented function (but callable in user scripts) 

get_LIBRARY_SELECTION_OBJ ()
Undocumented function (but callable in user scripts) 

go_LINK_REFERENCE ()
Undocumented function (but callable in user scripts) 

hasparent ()
Undocumented function (but callable in user scripts) 

hassameurl ()
Undocumented function (but callable in user scripts) 

homemod.FORMAT_AGGREGATORCONTENT ()
Undocumented function (but callable in user scripts) 

initializeequationintree ()
Undocumented function (but callable in user scripts) 

initializeequationstree ()
Undocumented function (but callable in user scripts) 

initializeonwrapper ()
Undocumented function (but callable in user scripts) 

initializerule ()
Undocumented function (but callable in user scripts) 

initializerulestree ()
Undocumented function (but callable in user scripts) 

initialize_LIBRARY_FORM ()
Undocumented function (but callable in user scripts) 

inlist ()
Undocumented function (but callable in user scripts) 

insertandcopylinkfromlibrary ()
Undocumented function (but callable in user scripts) 

inverseplist ()
Undocumented function (but callable in user scripts) 

isapplicableequation ()
Undocumented function (but callable in user scripts) 

isavalidresponse ()
Undocumented function (but callable in user scripts) 

is_D2_COMMONOF_D1 ()
Undocumented function (but callable in user scripts) 

is_OBJECT_IN_PORTFOLIO ()
Undocumented function (but callable in user scripts) 

jiramod.ADDBODYVALUES ()
Undocumented function (but callable in user scripts) 

jiramod.ADDDEFAULTVALUES ()
Undocumented function (but callable in user scripts) 

jiramod.ADDERROR ()
Undocumented function (but callable in user scripts) 

jiramod.ADDINFORMATIONFIELDS ()
Undocumented function (but callable in user scripts) 

jiramod.ADDINUPDATINGIDENTIFIERS ()
Undocumented function (but callable in user scripts) 

jiramod.ADDPLWVALUETOPLIST ()
Undocumented function (but callable in user scripts) 

jiramod.ADDQUERYPARAM ()
Undocumented function (but callable in user scripts) 

jiramod.ADDTOCREATEDIDENTIFIERS ()
Undocumented function (but callable in user scripts) 

jiramod.ADDTOCREATINGIDENTIFIERS ()
Undocumented function (but callable in user scripts) 

jiramod.ADDTOCREATINGOBJECTS ()
Undocumented function (but callable in user scripts) 

jiramod.ADDTODPECLASSES ()
Undocumented function (but callable in user scripts) 

jiramod.ASKFORDELETION ()
Undocumented function (but callable in user scripts) 

jiramod.BUILDCONSOBJECT ()
Undocumented function (but callable in user scripts) 

jiramod.BUILDURI ()
Undocumented function (but callable in user scripts) 

jiramod.CLEANALLTEMPORARYBOARDS ()
Undocumented function (but callable in user scripts) 

jiramod.CLEANALLTEMPORARYPROJECTS ()
Undocumented function (but callable in user scripts) 

jiramod.CLEANALLTEMPORARYSPRINTS ()
Undocumented function (but callable in user scripts) 

jiramod.CLEANUPARGS ()
Undocumented function (but callable in user scripts) 

jiramod.COMPLETEURI ()
Undocumented function (but callable in user scripts) 

jiramod.CREATEANDUPDATE ()
Undocumented function (but callable in user scripts) 

jiramod.CREATEINFORMATIONATIMPORT ()
Undocumented function (but callable in user scripts) 

jiramod.CREATEJIRABOARD ()
Undocumented function (but callable in user scripts) 

jiramod.CREATEJIRAFILTER ()
Undocumented function (but callable in user scripts) 

jiramod.CREATEJIRAPROJECT ()
Undocumented function (but callable in user scripts) 

jiramod.CREATEJIRASPRINT ()
Undocumented function (but callable in user scripts) 

jiramod.CREATEMAPPINGVALUEINFORMATION ()
Undocumented function (but callable in user scripts) 

jiramod.CREATEPLISTFORISSUECREATION ()
Undocumented function (but callable in user scripts) 

jiramod.CREATEREQUIREMENTLINKINFORMATION ()
Undocumented function (but callable in user scripts) 

jiramod.CREATERESOURCE ()
Undocumented function (but callable in user scripts) 

jiramod.CREATERESTOBJECT ()
Undocumented function (but callable in user scripts) 

jiramod.CREATETO ()
Undocumented function (but callable in user scripts) 

jiramod.DEBUG ()
Undocumented function (but callable in user scripts) 

jiramod.DEBUGMODEACTIVE ()
Undocumented function (but callable in user scripts) 

jiramod.DELETEANDCREATE ()
Undocumented function (but callable in user scripts) 

jiramod.DELETEBOARD ()
Undocumented function (but callable in user scripts) 

jiramod.DELETEFILTER ()
Undocumented function (but callable in user scripts) 

jiramod.DELETEISSUE ()
Undocumented function (but callable in user scripts) 

jiramod.DELETELINKS ()
Undocumented function (but callable in user scripts) 

jiramod.DELETEPROJECT ()
Undocumented function (but callable in user scripts) 

jiramod.DELETERESOURCE ()
Undocumented function (but callable in user scripts) 

jiramod.DELETESPRINT ()
Undocumented function (but callable in user scripts) 

jiramod.DISPLAYERRORMESSAGES ()
Undocumented function (but callable in user scripts) 

jiramod.ENDPOINTSMANAGERICHTEXT ()
Undocumented function (but callable in user scripts) 

jiramod.EQUALEXPORTVALUE ()
Undocumented function (but callable in user scripts) 

jiramod.EQUALSFOREXPORT ()
Undocumented function (but callable in user scripts) 

jiramod.EQUALVALUES ()
Undocumented function (but callable in user scripts) 

jiramod.EVALCONDITION ()
Undocumented function (but callable in user scripts) 

jiramod.GENERATEMAPPINGSTATUSTRANSITION ()
Undocumented function (but callable in user scripts) 

jiramod.GETALLBOARDSFROMJIRA ()
Undocumented function (but callable in user scripts) 

jiramod.GETALLBOARDSFROMJIRA_DEPRECATED ()
Undocumented function (but callable in user scripts) 

jiramod.GETALLBOARDSPRINTSFROMJIRA ()
Undocumented function (but callable in user scripts) 

jiramod.GETALLBOARDSPRINTSFROMJIRA_DEPRECATED ()
Undocumented function (but callable in user scripts) 

jiramod.GETALLJQLFORMULAISSUESFROMJIRA ()
Undocumented function (but callable in user scripts) 

jiramod.GETALLPRIORITY ()
Undocumented function (but callable in user scripts) 

jiramod.GETALLPROJECTS ()
Undocumented function (but callable in user scripts) 

jiramod.GETALLPROJECTSFROMJIRA ()
Undocumented function (but callable in user scripts) 

jiramod.GETALLSERVERS ()
Undocumented function (but callable in user scripts) 

jiramod.GETALLSPRINTISSUESFROMJIRA ()
Undocumented function (but callable in user scripts) 

jiramod.GETALLSTATUSES ()
Undocumented function (but callable in user scripts) 

jiramod.GETAPIAGILE ()
Undocumented function (but callable in user scripts) 

jiramod.GETAPIV2 ()
Undocumented function (but callable in user scripts) 

jiramod.GETAPPLICATIONFIELD ()
Undocumented function (but callable in user scripts) 

jiramod.GETATTRIBUTENAME ()
Undocumented function (but callable in user scripts) 

jiramod.GETATTRIBUTETYPECLASS ()
Undocumented function (but callable in user scripts) 

jiramod.GETATTRITEBUTES ()
Undocumented function (but callable in user scripts) 

jiramod.GETBOARDFILTER ()
Undocumented function (but callable in user scripts) 

jiramod.GETBOARDPROJECTS ()
Undocumented function (but callable in user scripts) 

jiramod.GETBOARDS ()
Undocumented function (but callable in user scripts) 

jiramod.GETBOARDSPROJECT ()
Undocumented function (but callable in user scripts) 

jiramod.GETBYSLOTFUNCTION ()
Undocumented function (but callable in user scripts) 

jiramod.GETCHILDRENINJIRA ()
Undocumented function (but callable in user scripts) 

jiramod.GETCHILDRENINPLW ()
Undocumented function (but callable in user scripts) 

jiramod.GETCLASSMAPPINGFROMJIRACLASS ()
Undocumented function (but callable in user scripts) 

jiramod.GETCLASSMAPPINGFROMMAPPING ()
Undocumented function (but callable in user scripts) 

jiramod.GETCLASSMAPPINGFROMPLWCLASS ()
Undocumented function (but callable in user scripts) 

jiramod.GETCOMPLETEPARSEDOBJECT ()
Undocumented function (but callable in user scripts) 

jiramod.GETCOMPONENTS ()
Undocumented function (but callable in user scripts) 

jiramod.GETCREATEDOBJECT ()
Undocumented function (but callable in user scripts) 

jiramod.GETCREATINGSYMBOL ()
Undocumented function (but callable in user scripts) 

jiramod.GETCURRENTSERVER ()
Undocumented function (but callable in user scripts) 

jiramod.GETCUSTOMFIELDIDFROMNAME ()
Undocumented function (but callable in user scripts) 

jiramod.GETCUSTOMFIELDJQLIDFROMNAME ()
Undocumented function (but callable in user scripts) 

jiramod.GETDEFAULTSERVER ()
Undocumented function (but callable in user scripts) 

jiramod.GETDEFAULTVALUE ()
Undocumented function (but callable in user scripts) 

jiramod.GETDELIMITER ()
Undocumented function (but callable in user scripts) 

jiramod.GETEPICCUSTOMFIELDID ()
Undocumented function (but callable in user scripts) 

jiramod.GETEPICLINKCUSTOMFIELDID ()
Undocumented function (but callable in user scripts) 

jiramod.GETEPICSISSUES ()
Undocumented function (but callable in user scripts) 

jiramod.GETEPICSISSUESINBOARD ()
Undocumented function (but callable in user scripts) 

jiramod.GETEVALUATEDFORMULA ()
Undocumented function (but callable in user scripts) 

jiramod.GETEXPORTMODEFIELD ()
Undocumented function (but callable in user scripts) 

jiramod.GETEXPORTMODEPROJECTFIELD ()
Undocumented function (but callable in user scripts) 

jiramod.GETFIELDMAPPINGFIELD ()
Undocumented function (but callable in user scripts) 

jiramod.GETFIELDOBJECT ()
Undocumented function (but callable in user scripts) 

jiramod.GETFIELDSISSUELIST ()
Undocumented function (but callable in user scripts) 

jiramod.GETFIELDSLIST ()
Undocumented function (but callable in user scripts) 

jiramod.GETFIELDSMETADATA ()
Undocumented function (but callable in user scripts) 

jiramod.GETFIELDTYPE ()
Undocumented function (but callable in user scripts) 

jiramod.GETFLATOBJECTSINJIRA ()
Undocumented function (but callable in user scripts) 

jiramod.GETFORMULA ()
Undocumented function (but callable in user scripts) 

jiramod.GETIDINARGS ()
Undocumented function (but callable in user scripts) 

jiramod.GETIDINURI ()
Undocumented function (but callable in user scripts) 

jiramod.GETIMPORTFIELDLIST ()
Undocumented function (but callable in user scripts) 

jiramod.GETIMPORTMAPPINGFIELD ()
Undocumented function (but callable in user scripts) 

jiramod.GETINALISTOFPLIST ()
Undocumented function (but callable in user scripts) 

jiramod.GETINFORMATION ()
Undocumented function (but callable in user scripts) 

jiramod.GETINFORMATIONFIELDSMAPPING ()
Undocumented function (but callable in user scripts) 

jiramod.GETINFORMATIONFROMJIRAKEY ()
Undocumented function (but callable in user scripts) 

jiramod.GETINFORMATIONS ()
Undocumented function (but callable in user scripts) 

jiramod.GETINHH ()
Undocumented function (but callable in user scripts) 

jiramod.GETININFORMATIONOBJECT ()
Undocumented function (but callable in user scripts) 

jiramod.GETINPARSEDOBJECT ()
Undocumented function (but callable in user scripts) 

jiramod.GETISSUELINKIDFROMPLIST ()
Undocumented function (but callable in user scripts) 

jiramod.GETISSUELINKS ()
Undocumented function (but callable in user scripts) 

jiramod.GETISSUERELATIONOBJECTS ()
Undocumented function (but callable in user scripts) 

jiramod.GETISSUES ()
Undocumented function (but callable in user scripts) 

jiramod.GETISSUESFORVERSIONID ()
Undocumented function (but callable in user scripts) 

jiramod.GETISSUESINBOARD ()
Undocumented function (but callable in user scripts) 

jiramod.GETJIRACHILDRENFIELD ()
Undocumented function (but callable in user scripts) 

jiramod.GETJIRACLASS ()
Undocumented function (but callable in user scripts) 

jiramod.GETJIRACLASSFIELD ()
Undocumented function (but callable in user scripts) 

jiramod.GETJIRAFIELDCLASS ()
Undocumented function (but callable in user scripts) 

jiramod.GETJIRAFLATRELATIONFIELD ()
Undocumented function (but callable in user scripts) 

jiramod.GETJIRAPARENTCLASS ()
Undocumented function (but callable in user scripts) 

jiramod.GETJIRAPARENTCLASSMAPPING ()
Undocumented function (but callable in user scripts) 

jiramod.GETJQLISSUES ()
Undocumented function (but callable in user scripts) 

jiramod.GETJQLISSUESINBOARD ()
Undocumented function (but callable in user scripts) 

jiramod.GETJSOBJECTCACHE ()
Undocumented function (but callable in user scripts) 

jiramod.GETJSOBJECTFROMJIRAKEY ()
Undocumented function (but callable in user scripts) 

jiramod.GETKEYWORDS ()
Undocumented function (but callable in user scripts) 

jiramod.GETKEYWORDSPARENTSVALUE ()
Undocumented function (but callable in user scripts) 

jiramod.GETKEYWORDSVALUE ()
Undocumented function (but callable in user scripts) 

jiramod.GETKEYWORDSVALUES ()
Undocumented function (but callable in user scripts) 

jiramod.GETKEYWORDSVALUESINSUFFIX ()
Undocumented function (but callable in user scripts) 

jiramod.GETLINKS ()
Undocumented function (but callable in user scripts) 

jiramod.GETMANDATORYFIELDSIDINJIRA ()
Undocumented function (but callable in user scripts) 

jiramod.GETMAPPINGDESC ()
Undocumented function (but callable in user scripts) 

jiramod.GETMAXRESULTDEFAULT ()
Undocumented function (but callable in user scripts) 

jiramod.GETMETADATAFORCREATINGISSUE ()
Undocumented function (but callable in user scripts) 

jiramod.GETMISSINGKEYWORDS ()
Undocumented function (but callable in user scripts) 

jiramod.GETNOVALUESYMBOL ()
Undocumented function (but callable in user scripts) 

jiramod.GETOBJECT ()
Undocumented function (but callable in user scripts) 

jiramod.GETOBJECTFROMSTARS ()
Undocumented function (but callable in user scripts) 

jiramod.GETOBJECTFROMUSERINPUT ()
Undocumented function (but callable in user scripts) 

jiramod.GETOBJECTS ()
Undocumented function (but callable in user scripts) 

jiramod.GETONFIELDORINPLIST ()
Undocumented function (but callable in user scripts) 

jiramod.GETPARENTFROMPARSEDPARENTS ()
Undocumented function (but callable in user scripts) 

jiramod.GETPARENTINPLW ()
Undocumented function (but callable in user scripts) 

jiramod.GETPARENTMAPPINGFIELD ()
Undocumented function (but callable in user scripts) 

jiramod.GETPARSEDPARENTARGSLIST ()
Undocumented function (but callable in user scripts) 

jiramod.GETPATH ()
Undocumented function (but callable in user scripts) 

jiramod.GETPLWCHILDRENFIELD ()
Undocumented function (but callable in user scripts) 

jiramod.GETPLWCLASSFIELD ()
Undocumented function (but callable in user scripts) 

jiramod.GETPLWFIELDCLASS ()
Undocumented function (but callable in user scripts) 

jiramod.GETPLWOBJECT ()
Undocumented function (but callable in user scripts) 

jiramod.GETPLWOBJECTFROMPARSEDOBJECT ()
Undocumented function (but callable in user scripts) 

jiramod.GETPLWOBJECTFROMPARSEDOBJECTCACHE ()
Undocumented function (but callable in user scripts) 

jiramod.GETPLWPARENTFIELD ()
Undocumented function (but callable in user scripts) 

jiramod.GETPLWSLOT ()
Undocumented function (but callable in user scripts) 

jiramod.GETPOSITIONFROMEND ()
Undocumented function (but callable in user scripts) 

jiramod.GETPROJECTFROMBOARD ()
Undocumented function (but callable in user scripts) 

jiramod.GETPROJECTISSUES ()
Undocumented function (but callable in user scripts) 

jiramod.GETPROJECTKEY ()
Undocumented function (but callable in user scripts) 

jiramod.GETPROJECTKEYFIELD ()
Undocumented function (but callable in user scripts) 

jiramod.GETPROJECTKEYFROMPARSEDPARENTS ()
Undocumented function (but callable in user scripts) 

jiramod.GETPROJECTLIST ()
Undocumented function (but callable in user scripts) 

jiramod.GETPROJECTNAMEFIELD ()
Undocumented function (but callable in user scripts) 

jiramod.GETPROJECTS ()
Undocumented function (but callable in user scripts) 

jiramod.GETPROPERTY ()
Undocumented function (but callable in user scripts) 

jiramod.GETQUERYPARAMETERS ()
Undocumented function (but callable in user scripts) 

jiramod.GETREQUESTCACHE ()
Undocumented function (but callable in user scripts) 

jiramod.GETREQUESTCACHEKEY ()
Undocumented function (but callable in user scripts) 

jiramod.GETRESOURCE ()
Undocumented function (but callable in user scripts) 

jiramod.GETRESOURCEFROMMAIL ()
Undocumented function (but callable in user scripts) 

jiramod.GETRESTOBJECT ()
Undocumented function (but callable in user scripts) 

jiramod.GETROOT ()
Undocumented function (but callable in user scripts) 

jiramod.GETSERVERFIELD ()
Undocumented function (but callable in user scripts) 

jiramod.GETSERVERFROMUSERINPUT ()
Undocumented function (but callable in user scripts) 

jiramod.GETSPRINTS ()
Undocumented function (but callable in user scripts) 

jiramod.GETSTOREDFIELD ()
Undocumented function (but callable in user scripts) 

jiramod.GETSTRINGFIELDS ()
Undocumented function (but callable in user scripts) 

jiramod.GETSUCCESSCODE ()
Undocumented function (but callable in user scripts) 

jiramod.GETSYMBOLFROMEDITOR ()
Undocumented function (but callable in user scripts) 

jiramod.GETTEMPORARYFIELDIDS ()
Undocumented function (but callable in user scripts) 

jiramod.GETTRANSITIONIDFROMSTATUSID ()
Undocumented function (but callable in user scripts) 

jiramod.GETTRANSITIONSFROMBOARD ()
Undocumented function (but callable in user scripts) 

jiramod.GETTYPE ()
Undocumented function (but callable in user scripts) 

jiramod.GETUPDATEID ()
Undocumented function (but callable in user scripts) 

jiramod.GETURLFROMPARSEDOBJECT ()
Undocumented function (but callable in user scripts) 

jiramod.GETVALUE ()
Undocumented function (but callable in user scripts) 

jiramod.GETVALUEFROMPLW ()
Undocumented function (but callable in user scripts) 

jiramod.GETVALUEINPATH ()
Undocumented function (but callable in user scripts) 

jiramod.GETVECTOROFUPDATEID ()
Undocumented function (but callable in user scripts) 

jiramod.GETVERSIONSFORPROJECTID ()
Undocumented function (but callable in user scripts) 

jiramod.GOTO ()
Undocumented function (but callable in user scripts) 

jiramod.HASFLATSERVERS ()
Undocumented function (but callable in user scripts) 

jiramod.HASHPRIORITYMAPPING ()
Undocumented function (but callable in user scripts) 

jiramod.HTML_REMOVEALLTAGS ()
Undocumented function (but callable in user scripts) 

jiramod.INITIALIZECREATEDIDENTIFIERS ()
Undocumented function (but callable in user scripts) 

jiramod.INITINFORMATIONHASHTABLES ()
Undocumented function (but callable in user scripts) 

jiramod.ISACHILDOBJECT ()
Undocumented function (but callable in user scripts) 

jiramod.ISANAUTHENTIFICATIONERROR ()
Undocumented function (but callable in user scripts) 

jiramod.ISANERROR ()
Undocumented function (but callable in user scripts) 

jiramod.ISANOBJECTFIELD ()
Undocumented function (but callable in user scripts) 

jiramod.ISASUCCESSSFULREQUEST ()
Undocumented function (but callable in user scripts) 

jiramod.ISCREATING ()
Undocumented function (but callable in user scripts) 

jiramod.ISEQUAL ()
Undocumented function (but callable in user scripts) 

jiramod.ISLINKED ()
Undocumented function (but callable in user scripts) 

jiramod.ISUPDATING ()
Undocumented function (but callable in user scripts) 

jiramod.JIRAISACTIVE ()
Undocumented function (but callable in user scripts) 

jiramod.JIRAISINMIGRATION ()
Undocumented function (but callable in user scripts) 

jiramod.JIRA_BUILDLINKFROMJSOBJECT ()
Undocumented function (but callable in user scripts) 

jiramod.JIRA_BUILDONLYREQUIREMENTFROMJSOBJECT ()
Undocumented function (but callable in user scripts) 

jiramod.JIRA_BUILDREQUIREMENTFROMJIRAANDPLWPLIST ()
Undocumented function (but callable in user scripts) 

jiramod.JIRA_BUILDREQUIREMENTFROMJIRAPLIST ()
Undocumented function (but callable in user scripts) 

jiramod.JIRA_BUILDREQUIREMENTFROMJSOBJECT ()
Undocumented function (but callable in user scripts) 

jiramod.JIRA_DELETE ()
Undocumented function (but callable in user scripts) 

jiramod.JIRA_DOREQUEST ()
Undocumented function (but callable in user scripts) 

jiramod.JIRA_GET ()
Undocumented function (but callable in user scripts) 

jiramod.JIRA_GETFIELDTOSTOREJIRAID ()
Undocumented function (but callable in user scripts) 

jiramod.JIRA_GETINFORMATIONFROMJIRAID ()
Undocumented function (but callable in user scripts) 

jiramod.JIRA_GETININFORMATION ()
Undocumented function (but callable in user scripts) 

jiramod.JIRA_GETJIRACLASS ()
Undocumented function (but callable in user scripts) 

jiramod.JIRA_GETLINKTYPEFROMJSOBJECT ()
Undocumented function (but callable in user scripts) 

jiramod.JIRA_GETLINKTYPEFROMNAME ()
Undocumented function (but callable in user scripts) 

jiramod.JIRA_GETLINKTYPEFROMPARSEDJSON ()
Undocumented function (but callable in user scripts) 

jiramod.JIRA_GETLIST ()
Undocumented function (but callable in user scripts) 

jiramod.JIRA_GETPLANISWARECLASS ()
Undocumented function (but callable in user scripts) 

jiramod.JIRA_GETPLWOBJECTFROMJIRAID ()
Undocumented function (but callable in user scripts) 

jiramod.JIRA_GETPLWOBJECTFROMJIRAVALUE ()
Undocumented function (but callable in user scripts) 

jiramod.JIRA_GETPROPERTIESFROMJSOBJECT ()
Undocumented function (but callable in user scripts) 

jiramod.JIRA_GETREQUIREMENTFROMID ()
Undocumented function (but callable in user scripts) 

jiramod.JIRA_GETREQUIREMENTFROMJSOBJECT ()
Undocumented function (but callable in user scripts) 

jiramod.JIRA_GETREQUIREMENTFROMKEY ()
Undocumented function (but callable in user scripts) 

jiramod.JIRA_GETSPRINTFROMID ()
Undocumented function (but callable in user scripts) 

jiramod.JIRA_GETSPRINTINFORMATIONFROMID ()
Undocumented function (but callable in user scripts) 

jiramod.JIRA_GETSPRINTSTATUSFROMJIRANAME ()
Undocumented function (but callable in user scripts) 

jiramod.JIRA_GOTOJIRARESTURI ()
Undocumented function (but callable in user scripts) 

jiramod.JIRA_ISABOOLEANTYPE ()
Undocumented function (but callable in user scripts) 

jiramod.JIRA_ISANARRAYTYPE ()
Undocumented function (but callable in user scripts) 

jiramod.JIRA_ISANDATETYPE ()
Undocumented function (but callable in user scripts) 

jiramod.JIRA_ISANHTMLTYPE ()
Undocumented function (but callable in user scripts) 

jiramod.JIRA_ISANOBJECTTYPE ()
Undocumented function (but callable in user scripts) 

jiramod.JIRA_ISANUMBERTYPE ()
Undocumented function (but callable in user scripts) 

jiramod.JIRA_ISASTRINGTYPE ()
Undocumented function (but callable in user scripts) 

jiramod.JIRA_LINK ()
Undocumented function (but callable in user scripts) 

jiramod.JIRA_POST ()
Undocumented function (but callable in user scripts) 

jiramod.JIRA_POSTCOMPONENT ()
Undocumented function (but callable in user scripts) 

jiramod.JIRA_POSTISSUE ()
Undocumented function (but callable in user scripts) 

jiramod.JIRA_POSTSPRINT ()
Undocumented function (but callable in user scripts) 

jiramod.JIRA_UPDATE ()
Undocumented function (but callable in user scripts) 

jiramod.JIRA_UPDATEISSUE ()
Undocumented function (but callable in user scripts) 

jiramod.JSON_GETQUERYWITHMONITORING ()
Undocumented function (but callable in user scripts) 

jiramod.JSON_GETQUERYWITHMONITORINGWITHISLAST ()
Undocumented function (but callable in user scripts) 

jiramod.JSON_GETQUERYWITHMONITORINGWITHTOTAL ()
Undocumented function (but callable in user scripts) 

jiramod.MANAGEARRAY ()
Undocumented function (but callable in user scripts) 

jiramod.MANAGEARRAYFORMAT ()
Undocumented function (but callable in user scripts) 

jiramod.MANAGEDATEFORMAT ()
Undocumented function (but callable in user scripts) 

jiramod.MANAGEEMPTYPARENT ()
Undocumented function (but callable in user scripts) 

jiramod.MANAGEEPICLINK ()
Undocumented function (but callable in user scripts) 

jiramod.MANAGEISSUETYPE ()
Undocumented function (but callable in user scripts) 

jiramod.MANAGEJIRARULESATCREATIONONISSUE ()
Undocumented function (but callable in user scripts) 

jiramod.MANAGEJIRARULESONISSUE ()
Undocumented function (but callable in user scripts) 

jiramod.MANAGENUMBERFORMAT ()
Undocumented function (but callable in user scripts) 

jiramod.MANAGEOBJECT ()
Undocumented function (but callable in user scripts) 

jiramod.MANAGEOBJECTFORMAT ()
Undocumented function (but callable in user scripts) 

jiramod.MANAGESTRING ()
Undocumented function (but callable in user scripts) 

jiramod.MANAGESTRINGFORMAT ()
Undocumented function (but callable in user scripts) 

jiramod.MANAGETYPES ()
Undocumented function (but callable in user scripts) 

jiramod.MIGRATETEXTKEY ()
Undocumented function (but callable in user scripts) 

jiramod.MIGRATEURI ()
Undocumented function (but callable in user scripts) 

jiramod.MOVETOSPRINT ()
Undocumented function (but callable in user scripts) 

jiramod.ONPLWOBJECTCREATION ()
Undocumented function (but callable in user scripts) 

jiramod.ONPLWOBJECTMODIFICATION ()
Undocumented function (but callable in user scripts) 

jiramod.PARSEDATE ()
Undocumented function (but callable in user scripts) 

jiramod.PARSESPRINT ()
Undocumented function (but callable in user scripts) 

jiramod.POSTPROJECT ()
Undocumented function (but callable in user scripts) 

jiramod.REMOVEINFORMATIONS ()
Undocumented function (but callable in user scripts) 

jiramod.REMOVEISSUEEPICLINK ()
Undocumented function (but callable in user scripts) 

jiramod.REMOVEISSUELINKSFIELD ()
Undocumented function (but callable in user scripts) 

jiramod.REMOVEOPTIONS ()
Undocumented function (but callable in user scripts) 

jiramod.REMOVESTATEFROMBODY ()
Undocumented function (but callable in user scripts) 

jiramod.REMOVESTATUSFIELD ()
Undocumented function (but callable in user scripts) 

jiramod.REPLACEFIELDSVALUE ()
Undocumented function (but callable in user scripts) 

jiramod.REPLACEFIELDSVALUEINISSUELIST ()
Undocumented function (but callable in user scripts) 

jiramod.REPLACEFORBIDDENCHARS ()
Undocumented function (but callable in user scripts) 

jiramod.REPLACEHTMLTAG ()
Undocumented function (but callable in user scripts) 

jiramod.REPLACEINTERNALVALUE ()
Undocumented function (but callable in user scripts) 

jiramod.REPLACEKEYWORDS ()
Undocumented function (but callable in user scripts) 

jiramod.REPLACESPRINTTOJSON ()
Undocumented function (but callable in user scripts) 

jiramod.REPLACESPRINTTOJSONINISSUE ()
Undocumented function (but callable in user scripts) 

jiramod.SENDTOJIRA ()
Undocumented function (but callable in user scripts) 

jiramod.SENDTOJIRAFLAT ()
Undocumented function (but callable in user scripts) 

jiramod.SETATTRIBUTENAME ()
Undocumented function (but callable in user scripts) 

jiramod.SETFIELD ()
Undocumented function (but callable in user scripts) 

jiramod.SETFORMULA ()
Undocumented function (but callable in user scripts) 

jiramod.SETINHH ()
Undocumented function (but callable in user scripts) 

jiramod.SETJSOBJECTCACHE ()
Undocumented function (but callable in user scripts) 

jiramod.SETPLWOBJECTFROMPARSEDOBJECTCACHE ()
Undocumented function (but callable in user scripts) 

jiramod.SETREQUESTCACHE ()
Undocumented function (but callable in user scripts) 

jiramod.SETTEMPORARYFIELDIDS ()
Undocumented function (but callable in user scripts) 

jiramod.TEST_GETBOARDFILTER ()
Undocumented function (but callable in user scripts) 

jiramod.TEST_GETEPICINBOARDFILTER ()
Undocumented function (but callable in user scripts) 

jiramod.TOFUNCTION ()
Undocumented function (but callable in user scripts) 

jiramod.UPDATEFROM ()
Undocumented function (but callable in user scripts) 

jiramod.UPDATEINFORMATION ()
Undocumented function (but callable in user scripts) 

jiramod.UPDATEISSUESTATUS ()
Undocumented function (but callable in user scripts) 

jiramod.UPDATEISSUETYPE ()
Undocumented function (but callable in user scripts) 

jiramod.UPDATENAMEBYONB ()
Undocumented function (but callable in user scripts) 

jiramod.UPDATERESOURCE ()
Undocumented function (but callable in user scripts) 

jiramod.UPDATESPRINT ()
Undocumented function (but callable in user scripts) 

jiramod.UPDATETO ()
Undocumented function (but callable in user scripts) 

jiramod.USEREQUESTCACHE ()
Undocumented function (but callable in user scripts) 

jiramod.VALIDATEPROJECTKEY ()
Undocumented function (but callable in user scripts) 

jiramod.__GETKEYWORDSVALUE__ ()
Undocumented function (but callable in user scripts) 

jiramod.__JIRA_SEND__ ()
Undocumented function (but callable in user scripts) 

jira_ADDCREATION ()
Undocumented function (but callable in user scripts) 

jira_ADDDELETION ()
Undocumented function (but callable in user scripts) 

jira_ADDMODIFICATION ()
Undocumented function (but callable in user scripts) 

jira_BUILD_PLWOBJECTFROMJIRAOBJECT ()
Undocumented function (but callable in user scripts) 

jira_CALLENDPOINT ()
Undocumented function (but callable in user scripts) 

jira_COMMITCHANGES ()
Undocumented function (but callable in user scripts) 

jira_CREATEINBOARD ()
Undocumented function (but callable in user scripts) 

jira_CREATEINFORMATION ()
Undocumented function (but callable in user scripts) 

jira_CREATEORUPDATEPLWOBJECTS ()
Undocumented function (but callable in user scripts) 

jira_CREATETEMPFIELDMAPPING ()
Undocumented function (but callable in user scripts) 

jira_DELETE ()
Undocumented function (but callable in user scripts) 

jira_DIFFDISPLAYED ()
Undocumented function (but callable in user scripts) 

jira_DISPLAYGRID ()
Undocumented function (but callable in user scripts) 

jira_EXPORTCHILDREN ()
Undocumented function (but callable in user scripts) 

jira_EXPORTTO ()
Undocumented function (but callable in user scripts) 

jira_GETACTIVEFIELD ()
Undocumented function (but callable in user scripts) 

jira_GETACTUALMODIFICATIONPLIST ()
Undocumented function (but callable in user scripts) 

jira_GETANCESTORS ()
Undocumented function (but callable in user scripts) 

jira_GETAPI ()
Undocumented function (but callable in user scripts) 

jira_GETAPPLICATION ()
Undocumented function (but callable in user scripts) 

jira_GETATTRIBUTE ()
Undocumented function (but callable in user scripts) 

jira_GETATTRIBUTEVALUEFROMSERVER ()
Undocumented function (but callable in user scripts) 

jira_GETAUTHORIZATION ()
Undocumented function (but callable in user scripts) 

jira_GETBOARDID ()
Undocumented function (but callable in user scripts) 

jira_GETCACHEDMAPPING ()
Undocumented function (but callable in user scripts) 

jira_GETCACHEKEY ()
Undocumented function (but callable in user scripts) 

jira_GETCHILDREN ()
Undocumented function (but callable in user scripts) 

jira_GETCHILDRENFROMJIRA ()
Undocumented function (but callable in user scripts) 

jira_GETCLASS ()
Undocumented function (but callable in user scripts) 

jira_GETCLASSFORCREATION ()
Undocumented function (but callable in user scripts) 

jira_GETCLASSNAME ()
Undocumented function (but callable in user scripts) 

jira_GETCLASSSYMBOL ()
Undocumented function (but callable in user scripts) 

jira_GETCONDITIONFORMULA ()
Undocumented function (but callable in user scripts) 

jira_GETCONDITIONFORMULAFOREXPORT ()
Undocumented function (but callable in user scripts) 

jira_GETCONDITIONFORMULAFORIMPORT ()
Undocumented function (but callable in user scripts) 

jira_GETCREATEENDPOINT ()
Undocumented function (but callable in user scripts) 

jira_GETDEFAULTFORMULAFOREXPORT ()
Undocumented function (but callable in user scripts) 

jira_GETDEFAULTPLWCLASS ()
Undocumented function (but callable in user scripts) 

jira_GETDEFAULTVALUES ()
Undocumented function (but callable in user scripts) 

jira_GETDEFINITIONREPORT ()
Undocumented function (but callable in user scripts) 

jira_GETDELETEDCHILDREN ()
Undocumented function (but callable in user scripts) 

jira_GETDELETEENDPOINT ()
Undocumented function (but callable in user scripts) 

jira_GETDIRECTION ()
Undocumented function (but callable in user scripts) 

jira_GETDIRECTPARENT ()
Undocumented function (but callable in user scripts) 

jira_GETENDPOINTFROMCLASS ()
Undocumented function (but callable in user scripts) 

jira_GETENDPOINTFROMNAME ()
Undocumented function (but callable in user scripts) 

jira_GETEVALUATEDFORMULAFOREXPORT ()
Undocumented function (but callable in user scripts) 

jira_GETEXPORTEDINFORMATION ()
Undocumented function (but callable in user scripts) 

jira_GETEXPORTEDINFORMATIONS ()
Undocumented function (but callable in user scripts) 

jira_GETEXPORTPLISTFROMPLWOBJECT ()
Undocumented function (but callable in user scripts) 

jira_GETF ()
Undocumented function (but callable in user scripts) 

jira_GETFIELDMAPPING ()
Undocumented function (but callable in user scripts) 

jira_GETFIELDMAPPINGS ()
Undocumented function (but callable in user scripts) 

jira_GETFIELDMAPPINGSFOREXPORT ()
Undocumented function (but callable in user scripts) 

jira_GETFIELDMAPPINGSFORIMPORT ()
Undocumented function (but callable in user scripts) 

jira_GETFIELDOBJECT ()
Undocumented function (but callable in user scripts) 

jira_GETFIELDSMAPPINGWITHFORMULAFOREXPORT ()
Undocumented function (but callable in user scripts) 

jira_GETFIELDTOGETOBJECT ()
Undocumented function (but callable in user scripts) 

jira_GETFILE ()
Undocumented function (but callable in user scripts) 

jira_GETFIRSTSERVER ()
Undocumented function (but callable in user scripts) 

jira_GETFLATENDPOINT ()
Undocumented function (but callable in user scripts) 

jira_GETFORMULAFOREXPORT ()
Undocumented function (but callable in user scripts) 

jira_GETFORMULAFORIMPORT ()
Undocumented function (but callable in user scripts) 

jira_GETGETENDPOINT ()
Undocumented function (but callable in user scripts) 

jira_GETGOTOENDPOINT ()
Undocumented function (but callable in user scripts) 

jira_GETHIERARCHICALMAPPINGS ()
Undocumented function (but callable in user scripts) 

jira_GETHIERARCHICALSTOREDFIELDS ()
Undocumented function (but callable in user scripts) 

jira_GETID ()
Undocumented function (but callable in user scripts) 

jira_GETIDFORUPDATING ()
Undocumented function (but callable in user scripts) 

jira_GETIDFROMINFORMATION ()
Undocumented function (but callable in user scripts) 

jira_GETIDPATH ()
Undocumented function (but callable in user scripts) 

jira_GETIMPORTPLISTFROMJIRAOBJECT ()
Undocumented function (but callable in user scripts) 

jira_GETINFORMATIONCLASS ()
Undocumented function (but callable in user scripts) 

jira_GETINFORMATIONS ()
Undocumented function (but callable in user scripts) 

jira_GETINFORMATIONSFROMATTRIBUTEVALUE ()
Undocumented function (but callable in user scripts) 

jira_GETINFORMATIONSFROMSERVER ()
Undocumented function (but callable in user scripts) 

jira_GETINFORMATIONSLOTSYMBOL ()
Undocumented function (but callable in user scripts) 

jira_GETINHERITEDSERVERDESCRIPTION ()
Undocumented function (but callable in user scripts) 

jira_GETISANOBJECTFUNCTION ()
Undocumented function (but callable in user scripts) 

jira_GETISSUEFIELDLISTFORMAPPING ()
Undocumented function (but callable in user scripts) 

jira_GETISSUEID ()
Undocumented function (but callable in user scripts) 

jira_GETISSUEKEY ()
Undocumented function (but callable in user scripts) 

jira_GETJIRACLASS ()
Undocumented function (but callable in user scripts) 

jira_GETJIRACLASSOBJECT ()
Undocumented function (but callable in user scripts) 

jira_GETJIRAID ()
Undocumented function (but callable in user scripts) 

jira_GETJIRANAME ()
Undocumented function (but callable in user scripts) 

jira_GETJIRAOBJECTFROMINDEXES ()
Undocumented function (but callable in user scripts) 

jira_GETJQLCHILDREN ()
Undocumented function (but callable in user scripts) 

jira_GETJQLFORMULA ()
Undocumented function (but callable in user scripts) 

jira_GETJQLFORMULAFROMSERVER ()
Undocumented function (but callable in user scripts) 

jira_GETJQLID ()
Undocumented function (but callable in user scripts) 

jira_GETJSOBJECT ()
Undocumented function (but callable in user scripts) 

jira_GETJSOBJECTWITHOUTCACHE ()
Undocumented function (but callable in user scripts) 

jira_GETKEY ()
Undocumented function (but callable in user scripts) 

jira_GETKEYPATH ()
Undocumented function (but callable in user scripts) 

jira_GETLISTENDPOINT ()
Undocumented function (but callable in user scripts) 

jira_GETMATCHINGFIELDINPLW ()
Undocumented function (but callable in user scripts) 

jira_GETNAME ()
Undocumented function (but callable in user scripts) 

jira_GETNAMEFROMSERVER ()
Undocumented function (but callable in user scripts) 

jira_GETNAMEPATH ()
Undocumented function (but callable in user scripts) 

jira_GETOBJECT ()
Undocumented function (but callable in user scripts) 

jira_GETOBJECTCLASS ()
Undocumented function (but callable in user scripts) 

jira_GETOBJECTFROMATTRIBUTEVALUE ()
Undocumented function (but callable in user scripts) 

jira_GETOBJECTINCLASS ()
Undocumented function (but callable in user scripts) 

jira_GETORIGINCLASS ()
Undocumented function (but callable in user scripts) 

jira_GETPARENT ()
Undocumented function (but callable in user scripts) 

jira_GETPARENTCLASS ()
Undocumented function (but callable in user scripts) 

jira_GETPARENTRELATION ()
Undocumented function (but callable in user scripts) 

jira_GETPLWCLASS ()
Undocumented function (but callable in user scripts) 

jira_GETPLWFIELD ()
Undocumented function (but callable in user scripts) 

jira_GETPLWFORMULACLASS ()
Undocumented function (but callable in user scripts) 

jira_GETPLWOBJECTFROMINDEXES ()
Undocumented function (but callable in user scripts) 

jira_GETPLWTYPE ()
Undocumented function (but callable in user scripts) 

jira_GETPROPERTYFIELD ()
Undocumented function (but callable in user scripts) 

jira_GETPROXYSERVER ()
Undocumented function (but callable in user scripts) 

jira_GETPTCLASS ()
Undocumented function (but callable in user scripts) 

jira_GETREFERENCE ()
Undocumented function (but callable in user scripts) 

jira_GETRELATIONENDPOINT ()
Undocumented function (but callable in user scripts) 

jira_GETRESOURCEINPLW ()
Undocumented function (but callable in user scripts) 

jira_GETRESOURCEMATCHINGFORMULA ()
Undocumented function (but callable in user scripts) 

jira_GETRESTCLASS ()
Undocumented function (but callable in user scripts) 

jira_GETRESTOBJECT ()
Undocumented function (but callable in user scripts) 

jira_GETRETURNCLASS ()
Undocumented function (but callable in user scripts) 

jira_GETROOT ()
Undocumented function (but callable in user scripts) 

jira_GETROOTANDAPIANDCLASS ()
Undocumented function (but callable in user scripts) 

jira_GETSERVER ()
Undocumented function (but callable in user scripts) 

jira_GETSERVERTOSTOREINFILE ()
Undocumented function (but callable in user scripts) 

jira_GETSPRINTID ()
Undocumented function (but callable in user scripts) 

jira_GETSTOREDFIELD ()
Undocumented function (but callable in user scripts) 

jira_GETSTOREDFIELDFROMNAME ()
Undocumented function (but callable in user scripts) 

jira_GETSTRINGIMPORTFIELD ()
Undocumented function (but callable in user scripts) 

jira_GETSYMBOLFORJIRA ()
Undocumented function (but callable in user scripts) 

jira_GETTEMPFIELDHASH ()
Undocumented function (but callable in user scripts) 

jira_GETTEMPFIELDMAPPING ()
Undocumented function (but callable in user scripts) 

jira_GETTEMPLATESERVER ()
Undocumented function (but callable in user scripts) 

jira_GETTYPE ()
Undocumented function (but callable in user scripts) 

jira_GETTYPECLASS ()
Undocumented function (but callable in user scripts) 

jira_GETTYPEFROMSERVER ()
Undocumented function (but callable in user scripts) 

jira_GETTYPEPATH ()
Undocumented function (but callable in user scripts) 

jira_GETUPDATEENDPOINT ()
Undocumented function (but callable in user scripts) 

jira_GETUPDATEPATH ()
Undocumented function (but callable in user scripts) 

jira_GETURI ()
Undocumented function (but callable in user scripts) 

jira_GETURL ()
Undocumented function (but callable in user scripts) 

jira_GETURLPATH ()
Undocumented function (but callable in user scripts) 

jira_GETURLTOUSEINUI ()
Undocumented function (but callable in user scripts) 

jira_GETVALUE ()
Undocumented function (but callable in user scripts) 

jira_GOTOJIRA ()
Undocumented function (but callable in user scripts) 

jira_HASINDEXFIELDMAPPING ()
Undocumented function (but callable in user scripts) 

jira_HASVALUEINSLOT ()
Undocumented function (but callable in user scripts) 

jira_IMPORTFROM ()
Undocumented function (but callable in user scripts) 

jira_INSTANCEOF ()
Undocumented function (but callable in user scripts) 

jira_ISA ()
Undocumented function (but callable in user scripts) 

jira_ISACLASSMAPPING ()
Undocumented function (but callable in user scripts) 

jira_ISACTIVE ()
Undocumented function (but callable in user scripts) 

jira_ISAFIELDMAPPING ()
Undocumented function (but callable in user scripts) 

jira_ISALINKCLASS ()
Undocumented function (but callable in user scripts) 

jira_ISAMAPPINGRULE ()
Undocumented function (but callable in user scripts) 

jira_ISANADDINGCONTAINERCLASS ()
Undocumented function (but callable in user scripts) 

jira_ISANAPPLICATION ()
Undocumented function (but callable in user scripts) 

jira_ISANATTRIBUTETYPE ()
Undocumented function (but callable in user scripts) 

jira_ISANAUTHENTICATIONMODE ()
Undocumented function (but callable in user scripts) 

jira_ISANAUTHORIZATION ()
Undocumented function (but callable in user scripts) 

jira_ISANDATEINPLW ()
Undocumented function (but callable in user scripts) 

jira_ISANENDPOINT ()
Undocumented function (but callable in user scripts) 

jira_ISANEPIC ()
Undocumented function (but callable in user scripts) 

jira_ISANINFORMATION ()
Undocumented function (but callable in user scripts) 

jira_ISANOBJECTINJIRA ()
Undocumented function (but callable in user scripts) 

jira_ISANOBJECTINPLW ()
Undocumented function (but callable in user scripts) 

jira_ISANUMBERINPLW ()
Undocumented function (but callable in user scripts) 

jira_ISAPTCLASS ()
Undocumented function (but callable in user scripts) 

jira_ISASERVER ()
Undocumented function (but callable in user scripts) 

jira_ISASUBTASK ()
Undocumented function (but callable in user scripts) 

jira_ISCHANGELOGIMPORTED ()
Undocumented function (but callable in user scripts) 

jira_ISCLOUD ()
Undocumented function (but callable in user scripts) 

jira_ISCOMMONDATA ()
Undocumented function (but callable in user scripts) 

jira_ISCREATING ()
Undocumented function (but callable in user scripts) 

jira_ISDEFAULTFORSERVER ()
Undocumented function (but callable in user scripts) 

jira_ISDELETEDREQEXPORTED ()
Undocumented function (but callable in user scripts) 

jira_ISDISPLAYEDINMENU ()
Undocumented function (but callable in user scripts) 

jira_ISENDDATE ()
Undocumented function (but callable in user scripts) 

jira_ISEXPORTABLE ()
Undocumented function (but callable in user scripts) 

jira_ISEXPORTED ()
Undocumented function (but callable in user scripts) 

jira_ISFLAT ()
Undocumented function (but callable in user scripts) 

jira_ISINTERNAL ()
Undocumented function (but callable in user scripts) 

jira_ISJIRA ()
Undocumented function (but callable in user scripts) 

jira_ISMANDATORY ()
Undocumented function (but callable in user scripts) 

jira_ISPRESENTINJIRA ()
Undocumented function (but callable in user scripts) 

jira_ISRESOLVED ()
Undocumented function (but callable in user scripts) 

jira_ISROOT ()
Undocumented function (but callable in user scripts) 

jira_ISSYNCHRONIZEDDELETION ()
Undocumented function (but callable in user scripts) 

jira_ISUPDATABLE ()
Undocumented function (but callable in user scripts) 

jira_ISUSED ()
Undocumented function (but callable in user scripts) 

jira_MAPTEMPORARYFIELDS ()
Undocumented function (but callable in user scripts) 

jira_MODIFYOBJECT ()
Undocumented function (but callable in user scripts) 

jira_MODIFYWITHPLIST ()
Undocumented function (but callable in user scripts) 

jira_MOVEINFOSTOSERVER ()
Undocumented function (but callable in user scripts) 

jira_ONCREATE ()
Undocumented function (but callable in user scripts) 

jira_PARSELIST ()
Undocumented function (but callable in user scripts) 

jira_POST ()
Undocumented function (but callable in user scripts) 

jira_PUT ()
Undocumented function (but callable in user scripts) 

jira_REMOVE.DELETE ()
Undocumented function (but callable in user scripts) 

jira_REMOVEINJIRA ()
Undocumented function (but callable in user scripts) 

jira_RESETCACHE ()
Undocumented function (but callable in user scripts) 

jira_RESOLVEREFERENCE ()
Undocumented function (but callable in user scripts) 

jira_SEND ()
Undocumented function (but callable in user scripts) 

jira_SETACTIVE ()
Undocumented function (but callable in user scripts) 

jira_SETACTIVEFIELD ()
Undocumented function (but callable in user scripts) 

jira_SETATTRIBUTEVALUEFROMSERVER ()
Undocumented function (but callable in user scripts) 

jira_SETCACHE ()
Undocumented function (but callable in user scripts) 

jira_SETCACHEDMAPPING ()
Undocumented function (but callable in user scripts) 

jira_SETCONDITIONFORMULAFOREXPORT ()
Undocumented function (but callable in user scripts) 

jira_SETCONDITIONFORMULAFORIMPORT ()
Undocumented function (but callable in user scripts) 

jira_SETDEFAULTPLWCLASS ()
Undocumented function (but callable in user scripts) 

jira_SETENDPOINT ()
Undocumented function (but callable in user scripts) 

jira_SETF ()
Undocumented function (but callable in user scripts) 

jira_SETFORMULA ()
Undocumented function (but callable in user scripts) 

jira_SETFORMULAFOREXPORT ()
Undocumented function (but callable in user scripts) 

jira_SETFORMULAFORIMPORT ()
Undocumented function (but callable in user scripts) 

jira_SETJIRAID ()
Undocumented function (but callable in user scripts) 

jira_SETLASTUPDATE ()
Undocumented function (but callable in user scripts) 

jira_SETNAME ()
Undocumented function (but callable in user scripts) 

jira_SETNAMEFROMSERVER ()
Undocumented function (but callable in user scripts) 

jira_SETOBJECTBYFIELD ()
Undocumented function (but callable in user scripts) 

jira_SETVALUE ()
Undocumented function (but callable in user scripts) 

jira_TOHEADER ()
Undocumented function (but callable in user scripts) 

jira_TOSTRING ()
Undocumented function (but callable in user scripts) 

jira_TOSYMBOL ()
Undocumented function (but callable in user scripts) 

jira_UPDATE ()
Undocumented function (but callable in user scripts) 

jira_UPDATEFROM ()
Undocumented function (but callable in user scripts) 

jira_UPDATEJIRAFROMPLW ()
Undocumented function (but callable in user scripts) 

jira_UPDATEPLWCHILDRENFROMJIRA ()
Undocumented function (but callable in user scripts) 

jira_UPDATEPLWFROMJIRA ()
Undocumented function (but callable in user scripts) 

jira_UPDATEPLWFROMJIRAWITHPLIST ()
Undocumented function (but callable in user scripts) 

jira_USECACHE ()
Undocumented function (but callable in user scripts) 

jira_USEJQL ()
Undocumented function (but callable in user scripts) 

libcopyclassfromlibrary ()
Undocumented function (but callable in user scripts) 

libcopydocumentfromlibrary ()
Undocumented function (but callable in user scripts) 

libcreateorclearcorrespondingactivityhashtable ()
Undocumented function (but callable in user scripts) 

libfillcorrespondingactivityhashtable ()
Undocumented function (but callable in user scripts) 

libgetdocduplicationnextindice ()
Undocumented function (but callable in user scripts) 

libpasteactivity ()
Undocumented function (but callable in user scripts) 

librarycopyadditionnalclassfromlibrary ()
Undocumented function (but callable in user scripts) 

libraryfillconnectors ()
Undocumented function (but callable in user scripts) 

librarygetselectedrelation ()
Undocumented function (but callable in user scripts) 

libraryinitializerelationdynamicattributes ()
Undocumented function (but callable in user scripts) 

libraryrelationpossiblevalues ()
Undocumented function (but callable in user scripts) 

libraryrelationselectioncallback ()
Undocumented function (but callable in user scripts) 

list_MAP ()
Undocumented function (but callable in user scripts) 

list_MEMBER ()
Undocumented function (but callable in user scripts) 

list_ORDEREDUNION ()
Undocumented function (but callable in user scripts) 

list_PUSH ()
Undocumented function (but callable in user scripts) 

list_PUSHNEW ()
Undocumented function (but callable in user scripts) 

list_SETPLIST ()
Undocumented function (but callable in user scripts) 

lock_BUDGET ()
Undocumented function (but callable in user scripts) 

logical_AND ()
Undocumented function (but callable in user scripts) 

logical_BOOLAND ()
Undocumented function (but callable in user scripts) 

logical_BOOLOR ()
Undocumented function (but callable in user scripts) 

logical_BOOLXOR ()
Undocumented function (but callable in user scripts) 

logical_OR ()
Undocumented function (but callable in user scripts) 

logical_XOR ()
Undocumented function (but callable in user scripts) 

mail_GETEMAILSFROMGROUPLIST ()
Undocumented function (but callable in user scripts) 

mail_GETEMAILSFROMUSERSANDGROUPSLIST ()
Undocumented function (but callable in user scripts) 

mail_GETEMAILSFROMUSERSLIST ()
Undocumented function (but callable in user scripts) 

mail_SEND ()
Undocumented function (but callable in user scripts) 

mail_SENDFROMINFO ()
Undocumented function (but callable in user scripts) 

makeestimatedattributecomment ()
Undocumented function (but callable in user scripts) 

makeestimatedattributedefaultvalue ()
Undocumented function (but callable in user scripts) 

makeestimatedattributename ()
Undocumented function (but callable in user scripts) 

makeestimatedfunction ()
Undocumented function (but callable in user scripts) 

makeestimatedfunctionname ()
Undocumented function (but callable in user scripts) 

makeestimatedvalue ()
Undocumented function (but callable in user scripts) 

mask_HIERARCHICAL_CODE ()
Undocumented function (but callable in user scripts) 

math_1_2_5_SERIES ()
Undocumented function (but callable in user scripts) 

math_AFFINEFUNCTIONPASSINGBYTWOPOINTS ()
Undocumented function (but callable in user scripts) 

math_CEIL ()
Undocumented function (but callable in user scripts) 

math_CLAMP ()
Undocumented function (but callable in user scripts) 

math_DISPERSEINTEGER ()
Undocumented function (but callable in user scripts) 

math_FLOOR ()
Undocumented function (but callable in user scripts) 

math_LINEAR_REGRESSION ()
Undocumented function (but callable in user scripts) 

math_LINEAR_REGRESSION_FORCEAPOINT ()
Undocumented function (but callable in user scripts) 

math_LOG ()
Undocumented function (but callable in user scripts) 

math_NORMALIZE ()
Undocumented function (but callable in user scripts) 

math_NORMALIZENUM ()
Undocumented function (but callable in user scripts) 

math_POLYNOMIAL_REGRESSION ()
Undocumented function (but callable in user scripts) 

math_POW ()
Undocumented function (but callable in user scripts) 

math_ROUND ()
Undocumented function (but callable in user scripts) 

math_ROUNDTO ()
Undocumented function (but callable in user scripts) 

math_SCALE_POINTS ()
Undocumented function (but callable in user scripts) 

math_SQRT ()
Undocumented function (but callable in user scripts) 

max_DATE ()
Undocumented function (but callable in user scripts) 

mergeplist ()
Undocumented function (but callable in user scripts) 

min_DATE ()
Undocumented function (but callable in user scripts) 

modifyopxobject ()
Undocumented function (but callable in user scripts) 

modify_REFERENCE ()
Undocumented function (but callable in user scripts) 

modulegetcurrentmodulename ()
Undocumented function (but callable in user scripts) 

modulegetmodule ()
Undocumented function (but callable in user scripts) 

multilingual_CURRENTLANGUAGE ()
Undocumented function (but callable in user scripts) 

multilingual_GETCURRENTLANGUAGESTRING ()
Undocumented function (but callable in user scripts) 

multilingual_GETLANGUAGESTRING ()
Undocumented function (but callable in user scripts) 

multilingual_GETLANGUAGEVALUE ()
Undocumented function (but callable in user scripts) 

multilingual_GETTEXTKEYMESSAGESTRING (id)
Return message string behind a text key 
Arguments
Argument
 
Documentation 
id

[string] Identifier of the text key 

multilingual_ISMULTILINGUALVALUE ()
Undocumented function (but callable in user scripts) 

multilingual_STRINGAPPEND ()
Undocumented function (but callable in user scripts) 

multilingual_WRITETEXTKEY (id)
Write a text key in the current language 
Arguments
Argument
 
Documentation 
id

[string] Identifier of the text key 

multilingual_WRITETEXTKEYINLANGUAGE (id, selectedlanguage)
Write a text key in a given language 
Arguments
Argument
 
Documentation 
id

[string] Identifier of the text key 
selectedlanguage

[string] Language 

multilingual_WRITETEXTKEYWITHPLACEHOLDERS ()
Undocumented function (but callable in user scripts) 

number_FORMAT_VALUE ()
Undocumented function (but callable in user scripts) 

pmmod.INIT_PM_SF_SELECT_REF ()
Undocumented function (but callable in user scripts) 

pmmod.SETBUDGETREFERENCE ()
Undocumented function (but callable in user scripts) 

pmmod.SETBUDGETREFERENCE_FROM_LIST ()
Undocumented function (but callable in user scripts) 

pmmod.SETREFERENCEONCLICK ()
Undocumented function (but callable in user scripts) 

pmmod.SET_POSSIBLE_VALUES_FOR_BUDGET ()
Undocumented function (but callable in user scripts) 

pmmod.TAKE_REFERENCE_ON_FORM_SAVE ()
Undocumented function (but callable in user scripts) 

pm_SENDNEWBUDGET_WF ()
Undocumented function (but callable in user scripts) 

portfolio_GET_PROJECTS ()
Undocumented function (but callable in user scripts) 

portfolio_IS_OBJECT_IN_CURRENT_PORT ()
Undocumented function (but callable in user scripts) 

portfolio_IS_OBJECT_IN_PORT ()
Undocumented function (but callable in user scripts) 

portfolio_PROJECT_BELONGS_PORT ()
Undocumented function (but callable in user scripts) 

portfolio_RESOURCE_BELONGS_PORT ()
Undocumented function (but callable in user scripts) 

portfolio_SUBPROJECT_BELONGS_PORT ()
Undocumented function (but callable in user scripts) 

portfolio_TASK_BELONGS_PORT ()
Undocumented function (but callable in user scripts) 

printequationstree ()
Undocumented function (but callable in user scripts) 

processcurrentequationonanotherclass ()
Undocumented function (but callable in user scripts) 

processcurrentequationoncreation ()
Undocumented function (but callable in user scripts) 

processcurrentequationonsameclass ()
Undocumented function (but callable in user scripts) 

processes_GET_INVERSE_RELATION ()
Undocumented function (but callable in user scripts) 

readlibraryrelation ()
Undocumented function (but callable in user scripts) 

removechildren ()
Undocumented function (but callable in user scripts) 

removerule ()
Undocumented function (but callable in user scripts) 

removeunchangedvalues ()
Undocumented function (but callable in user scripts) 

removewrongvalue ()
Undocumented function (but callable in user scripts) 

rename_COLUMN ()
Undocumented function (but callable in user scripts) 

resetbudgetthresholdtoadminforalluser ()
Undocumented function (but callable in user scripts) 

resetselectionafterinsert ()
Undocumented function (but callable in user scripts) 

restmod.CREATE (o_object)
Create a rest object in o_server. Returns : 1)list plist(fieldname,value,..) sent to REST 2)list rest response from the server 3)integer return code 4)list response header from the REST server 
Arguments
Argument
Documentation 
O_OBJECT
[Object] Target Planisware object 
Syntax examples
return restmod.create(plc.project.get( "JIRA_ACT_7"),plc._JIRA_URI.get("JIRA_EXPORT_PRJ"));

restmod.ISLINKED (o_object)
return true if o_object is linked to a rest object. Returns : 1)boolean true if o_object is linked to a rest object 2)link vector of links 
Arguments
Argument
Documentation 
O_OBJECT
[Object] Target Planisware object 
Syntax examples
return restmod.islinked(plc.project.get("JIRA_ACT_7"),plc._JIRA_URI.get("JIRA_EXPORT_PRJ"));

restmod.LINK (o_object)
Link a rest object with a PLW o_object. Returns : 1)the parsed rest object 2)the link between PLW object and rest object 3)the file in which the link has been created 4)The date when the link has been created 
Arguments
Argument
Documentation 
O_OBJECT
[Object] Target Planisware object 
Syntax examples
restmod.link(plc.project.get("JIRA_ACT_7"),plc._JIRA_URI.get"JIRA_EXPORT_PRJ"),#ID# : "ACT");

restmod.PULL (o_object)
Update a PLW object from o_server 
Arguments
Argument
Documentation 
O_OBJECT
[Object] Target Planisware object 
Syntax examples
return restmod.pull(plc.project.get("JIRA_ACT_6"),plc._JIRA_URI.get("JIRA_ACT"));

restmod.PUSH (o_object)
Update a rest object to o_server 
Arguments
Argument
Documentation 
O_OBJECT
[Object] Target Planisware object 
Syntax examples
restmod.push(plc.project.get("JIRA_ACT_6"),plc._JIRA_URI.get("JIRA_ACT"));

restmod.REMOVE (o_object)
Delete a rest object in o_server 
Arguments
Argument
Documentation 
O_OBJECT
[Object] Target Planisware object 
Syntax examples
return restmod.remove(plc.project.get( "JIRA_ACT_7"),plc._JIRA_URI.get("JIRA_EXPORT_PRJ"));

restmod.UNLINK (o_object)
Remove the links between PLW o_object and its rest objects 
Arguments
Argument
Documentation 
O_OBJECT
[Object] Target Planisware object 
Syntax examples
restmod.unlink(plc.project.get("JIRA_ACT_7"),plc._JIRA_URI.get"JIRA_EXPORT_PRJ"),#ID# : "ACT");

return_TO_CHART_DEFAULT_UNIT ()
Undocumented function (but callable in user scripts) 

rnd ()
Undocumented function (but callable in user scripts) 

selection_FIRST ()
Undocumented function (but callable in user scripts) 

selection_GET ()
Undocumented function (but callable in user scripts) 

selection_LENGTH ()
Undocumented function (but callable in user scripts) 

selection_REPLACE_FILTER_BY_SELECTION ()
Undocumented function (but callable in user scripts) 

selection_SECOND ()
Undocumented function (but callable in user scripts) 

selection_STRING ()
Undocumented function (but callable in user scripts) 

selection_VECTOR ()
Undocumented function (but callable in user scripts) 

select_CURVES ()
Undocumented function (but callable in user scripts) 

setfieldvalueinplist ()
Undocumented function (but callable in user scripts) 

set_CURRENT_EQUATION ()
Undocumented function (but callable in user scripts) 

set_FTE ()
Undocumented function (but callable in user scripts) 

set_FTE_FOR_WIZARD ()
Undocumented function (but callable in user scripts) 

set_FTE_ON ()
Undocumented function (but callable in user scripts) 

set_FTE_ON_CROSSINGMATRIX ()
Undocumented function (but callable in user scripts) 

set_FTE_ON_JAVABAR ()
Undocumented function (but callable in user scripts) 

set_POSSIBLE_VALUES_FOR_BUDGET ()
Undocumented function (but callable in user scripts) 

set_REFERENCE_NAME_VALUE ()
Undocumented function (but callable in user scripts) 

set_REFERENCE_NAME_VALUE_FROM_SETTING ()
Undocumented function (but callable in user scripts) 

set_UNIT ()
Undocumented function (but callable in user scripts) 

slot_GETDEFAULTFORMAT ()
Get the default format of a slot 
Arguments
Argument
 
Documentation 
this

[ObjectAttribute] The slot to be inspected 
Syntax examples
plw.slot_getDefaultFormat(this : MySlot);

slot_SETDEFAULTFORMAT (_genericformat)
Set the default format of a slot 
Arguments
Argument
 
Documentation 
this

[ObjectAttribute] The slot to be modified 
_genericformat

[opxGenericFormat-or-String] The format object or a format ID to set on the slot 
Syntax examples
plw.slot_setDefaultFormat(this : MySlot, "# ###");

sortfieldlistequa ()
Undocumented function (but callable in user scripts) 

storeprojectreferenceinparameters ()
Undocumented function (but callable in user scripts) 

string_CODE_CHAR ()
Undocumented function (but callable in user scripts) 

string_COMPUTEADESCANDCONTENT ()
Undocumented function (but callable in user scripts) 

string_ESCAPEDOUBLEQUOTES ()
Undocumented function (but callable in user scripts) 

string_ESCAPESTRING ()
Undocumented function (but callable in user scripts) 

string_FITTOWIDTH ()
Undocumented function (but callable in user scripts) 

string_GETMULTILINETEXTWIDTH ()
Undocumented function (but callable in user scripts) 

string_GETNONDEFAULTVALUE ()
Undocumented function (but callable in user scripts) 

string_GETPLAINTEXTHEIGHT ()
Undocumented function (but callable in user scripts) 

string_GETSYMBOL ()
Undocumented function (but callable in user scripts) 

string_GETTEXTHEIGHT ()
Undocumented function (but callable in user scripts) 

string_GETTEXTWIDTH ()
Undocumented function (but callable in user scripts) 

string_KEYWORD ()
Undocumented function (but callable in user scripts) 

string_MESSAGESTRING ()
Undocumented function (but callable in user scripts) 

string_NFFORMAT ()
Undocumented function (but callable in user scripts) 

string_OGET ()
Undocumented function (but callable in user scripts) 

string_PADDING ()
Undocumented function (but callable in user scripts) 

string_REPLACEBYCOMMA ()
Undocumented function (but callable in user scripts) 

string_REPLACECHARSBY ()
Undocumented function (but callable in user scripts) 

string_REPLACEFORBIDDENCHAR ()
Undocumented function (but callable in user scripts) 

string_REPLACEFORBIDDENCHARBY ()
Undocumented function (but callable in user scripts) 

string_REPLACEFORBIDDENCHARINPROJECTNAMEBY ()
Undocumented function (but callable in user scripts) 

string_SUBSTITUTE ()
Undocumented function (but callable in user scripts) 

string_TRUNCATE ()
Undocumented function (but callable in user scripts) 

string_TRUNCATESTRINGOUTOFBOX ()
Undocumented function (but callable in user scripts) 

string_UNESCAPEDOUBLEQUOTES ()
Undocumented function (but callable in user scripts) 

synchro_FETCHSYNCHRONIZEFROM ()
Undocumented function (but callable in user scripts) 

synchro_FETCHSYNCHRONIZEWITH ()
Undocumented function (but callable in user scripts) 

synchro_LISTSYNCHRONIZEFROM ()
Undocumented function (but callable in user scripts) 

synchro_LISTSYNCHRONIZEWITH ()
Undocumented function (but callable in user scripts) 

sync_DOSYNCHRONIZATIONFROM ()
Undocumented function (but callable in user scripts) 

sync_DOSYNCHRONIZATIONWITH ()
Undocumented function (but callable in user scripts) 

sync_INITIALIZELASTSYNCDATEFIELDONPROJECT ()
Undocumented function (but callable in user scripts) 

sync_INITIALIZESYNCHRONIZEDFROMRELATION ()
Undocumented function (but callable in user scripts) 

sync_INITIALIZESYNCHRONIZEDWITHRELATION ()
Undocumented function (but callable in user scripts) 

sync_ISTHERESOMETHINGTOSYNCONPRJFROM ()
Undocumented function (but callable in user scripts) 

sync_ISTHERESOMETHINGTOSYNCONPRJWITH ()
Undocumented function (but callable in user scripts) 

sync_LASTSYNCDATEFROMCOLORHANDLER ()
Undocumented function (but callable in user scripts) 

sync_LASTSYNCDATEWITHCOLORHANDLER ()
Undocumented function (but callable in user scripts) 

sync_READLASTSYNCDATEONPROJECT ()
Undocumented function (but callable in user scripts) 

sync_READLASTSYNCDATEONPROJECTWITH ()
Undocumented function (but callable in user scripts) 

sync_SYNCHRONIZEFROM ()
Undocumented function (but callable in user scripts) 

sync_SYNCHRONIZEWITH ()
Undocumented function (but callable in user scripts) 

take_PROJECT_REFERENCE ()
Undocumented function (but callable in user scripts) 

take_PROJECT_REFERENCE_IN_BATCH ()
Undocumented function (but callable in user scripts) 

take_REFERENCE ()
Undocumented function (but callable in user scripts) 

take_REFERENCE_WITH_PARAMETER_IN_BATCH ()
Undocumented function (but callable in user scripts) 

take_REFERENCE_WITH_PARAMETER_IN_BATCH_BULK_MODE ()
Undocumented function (but callable in user scripts) 

take_REFERENCE_WITH_PARAMETER_IN_BATCH_EXT ()
Undocumented function (but callable in user scripts) 

texttohtml ()
Undocumented function (but callable in user scripts) 

unlock_BUDGET ()
Undocumented function (but callable in user scripts) 

updatebudgetthresholdatstartup ()
Undocumented function (but callable in user scripts) 

update_BUDGET_THRESHOLD ()
Undocumented function (but callable in user scripts) 

vector_ADD ()
Undocumented function (but callable in user scripts) 

vector_ADDDIMENSIONS ()
Undocumented function (but callable in user scripts) 

vector_BUILDMATRIX ()
Undocumented function (but callable in user scripts) 

vector_BUILDVECTOR ()
Undocumented function (but callable in user scripts) 

vector_COPY ()
Undocumented function (but callable in user scripts) 

vector_ELEMENTPUSH ()
Undocumented function (but callable in user scripts) 

vector_EVERY ()
Undocumented function (but callable in user scripts) 

vector_EVERYOBJECTSFROMCLASS ()
Undocumented function (but callable in user scripts) 

vector_FILTER ()
Undocumented function (but callable in user scripts) 

vector_GETCLASSOFALLELEMENTS ()
Undocumented function (but callable in user scripts) 

vector_GETIDVECTOR ()
Undocumented function (but callable in user scripts) 

vector_GETMD5 ()
Undocumented function (but callable in user scripts) 

vector_GETOBJECTSFROMCLASS ()
Undocumented function (but callable in user scripts) 

vector_GETPLISTORDER ()
Undocumented function (but callable in user scripts) 

vector_INSERT ()
Undocumented function (but callable in user scripts) 

vector_MAP ()
Undocumented function (but callable in user scripts) 

vector_NMAP ()
Undocumented function (but callable in user scripts) 

vector_PLISTKEYS ()
Undocumented function (but callable in user scripts) 

vector_PLISTTOHASH ()
Undocumented function (but callable in user scripts) 

vector_PLISTVALUES ()
Undocumented function (but callable in user scripts) 

vector_PUSH ()
Undocumented function (but callable in user scripts) 

vector_PUSHNEW ()
Undocumented function (but callable in user scripts) 

vector_REMOVEAT ()
Undocumented function (but callable in user scripts) 

vector_REMOVEBETWEEN ()
Undocumented function (but callable in user scripts) 

vector_REMOVEIFNOT ()
Undocumented function (but callable in user scripts) 

vector_REVERSE ()
Undocumented function (but callable in user scripts) 

vector_SORTPLISTBYKEY ()
Undocumented function (but callable in user scripts) 

vector_SORTPLISTBYVALUE ()
Undocumented function (but callable in user scripts) 

vector_TOHASH ()
Undocumented function (but callable in user scripts) 

vector_TRANSPOSE ()
Undocumented function (but callable in user scripts) 

verifysyntaxformula ()
Undocumented function (but callable in user scripts) 

verifysyntaxformulawitherror ()
Undocumented function (but callable in user scripts) 

version_CREATE ()
Undocumented function (but callable in user scripts) 

version_GETVERSIONSFROMPROJECTSLIST ()
Undocumented function (but callable in user scripts) 

version_GETVERSIONSIDFROMPROJECTSLIST ()
Undocumented function (but callable in user scripts) 

version_LISTEXISTINGVERSIONNUMBERS ()
Undocumented function (but callable in user scripts) 

version_LISTEXISTINGVERSIONS ()
Undocumented function (but callable in user scripts) 

virtualdatasetgetminmaxdate ()
Undocumented function (but callable in user scripts) 

virtualdatasetselectproject ()
Undocumented function (but callable in user scripts) 

virtualdataset_COMPUTEACTIVITYFROMOBJECT ()
Undocumented function (but callable in user scripts) 

virtualdataset_COMPUTEFILEFROMSCREEN ()
Undocumented function (but callable in user scripts) 

virtualdataset_GETFILES ()
Undocumented function (but callable in user scripts) 

wf_WORKFLOWACTIONANDTASKINFO (processid, taskname)
Get a vector containing the transaction todo on an object on a given workflow and on a specific task if given, and also: the report name linked to transaction to do, vector of actions linked to transaction to do, number of possible transactions. 
Arguments
Argument
 
Documentation 
this


processid

[string] A workflow id or an empty string 
taskname

[string] A workflow task name or an empty string 
Syntax examples
var vResult = object.wf_workflowActionAndTaskInfo(ProcessId,taskName);

write_ALIGN ()
Undocumented function (but callable in user scripts) 

write_KEYWORDS_TEXT_KEY ()
Undocumented function (but callable in user scripts) 

_ADMINREFINITCURRENTRATESATSTARTUP ()
Undocumented function (but callable in user scripts) 

_ADMIN_REFBATCHCLICKHANDLER ()
Undocumented function (but callable in user scripts) 

_ADMIN_REFBATCHISINBULKMODE ()
Undocumented function (but callable in user scripts) 

_ADMIN_REFCASCADEREF ()
Undocumented function (but callable in user scripts) 

_ADMIN_REFCHECKACTFILTERVALUE ()
Undocumented function (but callable in user scripts) 

_ADMIN_REFCHECKBACKUPNAMEVALUE ()
Undocumented function (but callable in user scripts) 

_ADMIN_REFCHECKNAMEVALUE ()
Undocumented function (but callable in user scripts) 

_ADMIN_REFCHECKTEMPLATEVALUE ()
Undocumented function (but callable in user scripts) 

_ADMIN_REFCREATEBATCH ()
Undocumented function (but callable in user scripts) 

_ADMIN_REFDISPLAYACTIVITYFILTER ()
Undocumented function (but callable in user scripts) 

_ADMIN_REFDISPLAYDATASETOPTIONINFIRST ()
Undocumented function (but callable in user scripts) 

_ADMIN_REFDRAWNEWBUTTON ()
Undocumented function (but callable in user scripts) 

_ADMIN_REFDYNFIELDGENERATE ()
Undocumented function (but callable in user scripts) 

_ADMIN_REFFILTERREFFORPM ()
Undocumented function (but callable in user scripts) 

_ADMIN_REFGENERATEOJSANDADD ()
Undocumented function (but callable in user scripts) 

_ADMIN_REFGENERATEPORTFOLIOFILTER ()
Undocumented function (but callable in user scripts) 

_ADMIN_REFGENERATEPROJECTFILTER ()
Undocumented function (but callable in user scripts) 

_ADMIN_REFGENERATEREFNAME ()
Undocumented function (but callable in user scripts) 

_ADMIN_REFGENERATESCRIPTFILE ()
Undocumented function (but callable in user scripts) 

_ADMIN_REFGETCASCADEREF ()
Undocumented function (but callable in user scripts) 

_ADMIN_REFGETCOMMONPARENTPRJTYP ()
Undocumented function (but callable in user scripts) 

_ADMIN_REFGETPORTFOLIOOBJECT ()
Undocumented function (but callable in user scripts) 

_ADMIN_REFGETREFFROMPROJECTTYPESTR ()
Undocumented function (but callable in user scripts) 

_ADMIN_REFGETREFNAMEFORPM ()
Undocumented function (but callable in user scripts) 

_ADMIN_REFGETREFNAMEFROMPRJTYPES ()
Undocumented function (but callable in user scripts) 

_ADMIN_REFGETREFNAMEFROMPRJTYPESEXT ()
Undocumented function (but callable in user scripts) 

_ADMIN_REFHANDLERTEMPLATE ()
Undocumented function (but callable in user scripts) 

_ADMIN_REFHYPERLINKNEWADMINREF ()
Undocumented function (but callable in user scripts) 

_ADMIN_REFINITIALIZEACTIVITYONREPORT ()
Undocumented function (but callable in user scripts) 

_ADMIN_REFISLOADEDININTRANET ()
Undocumented function (but callable in user scripts) 

_ADMIN_REFLINEFILTERONFORM ()
Undocumented function (but callable in user scripts) 

_ADMIN_REFMAPPROJECTTYP ()
Undocumented function (but callable in user scripts) 

_ADMIN_REFONMODIFYLINE ()
Undocumented function (but callable in user scripts) 

_ADMIN_REFONNEWLINE ()
Undocumented function (but callable in user scripts) 

_ADMIN_REFPORTFOLIOMODIFIER ()
Undocumented function (but callable in user scripts) 

_ADMIN_REFPORTFOLIOREADER ()
Undocumented function (but callable in user scripts) 

_ADMIN_REFPOSSIBLETEMPLATEVALUES ()
Undocumented function (but callable in user scripts) 

_ADMIN_REFRDDCOMPUTEGOODNAME ()
Undocumented function (but callable in user scripts) 

_ADMIN_REFRESETOJSDOC ()
Undocumented function (but callable in user scripts) 

_ADMIN_REFSTRICTCURRENTPRJTYP ()
Undocumented function (but callable in user scripts) 

_ADMIN_REFUPDATECURRENTRATESCURVES ()
Undocumented function (but callable in user scripts) 

_ADMIN_REF_RDD ()
Undocumented function (but callable in user scripts) 

_ADMIN_US_REFBATCHISINBULKMODE ()
Undocumented function (but callable in user scripts) 

_ADMIN_US_REFGENERATEPORTFOLIOFILTER ()
Undocumented function (but callable in user scripts) 

_ADMIN_US_REFGENERATEPROJECTFILTER ()
Undocumented function (but callable in user scripts) 

_ADMIN_US_REFGENERATEREFNAME ()
Undocumented function (but callable in user scripts) 

_ADMIN_US_REFGENERATESCRIPTFILE ()
Undocumented function (but callable in user scripts) 

_ATTRREFCOMP_DISPLAYSLOTSELECTDIALOGCALLBACK ()
Undocumented function (but callable in user scripts) 

_GUI_FINDMODULEFOROBJECT ()
Undocumented function (but callable in user scripts) 

_GUI_GETREPORTINGFROMMODULE ()
Undocumented function (but callable in user scripts) 

_GUI_GETREPORTINGFROMREPORTANDOBJECT ()
Undocumented function (but callable in user scripts) 

_GUI_GETREPORTINGFROMREPORTOBJECTDATASETCLASS ()
Undocumented function (but callable in user scripts) 

_GUI_GETSMARTERREPORTING ()
Undocumented function (but callable in user scripts) 

_GUI_GOTOMODULEFOROBJECT ()
Undocumented function (but callable in user scripts) 

_GUI_GOTOREPORTFOROBJECT ()
Undocumented function (but callable in user scripts) 

_GUI_GOTOREPORTFROMCURRENTMODULEANDOBJECT ()
Undocumented function (but callable in user scripts) 

_GUI_GOTOREPORTINGFOROBJECT ()
Undocumented function (but callable in user scripts) 

_INFCOLORLOCKER ()
Undocumented function (but callable in user scripts) 

_INFDISPLAYOTHERREPORTS ()
Undocumented function (but callable in user scripts) 

_INFGENERATESEARCHMENU ()
Undocumented function (but callable in user scripts) 

_INFGENERICSEARCHFORMULA ()
Undocumented function (but callable in user scripts) 

_INFGENERICSTRINGSEARCH ()
Undocumented function (but callable in user scripts) 

_INFGETATTRIBUTENAMEFROMDESC ()
Undocumented function (but callable in user scripts) 

_INFLISTACCESSOR ()
Undocumented function (but callable in user scripts) 

_INFMODIFYCOLOR ()
Undocumented function (but callable in user scripts) 

_INFREADCOLOR ()
Undocumented function (but callable in user scripts) 

_INFRESETGENERICFILTER ()
Undocumented function (but callable in user scripts) 

_INF_ACTIVITY_FIELDS_TO_ARCHIVE ()
Undocumented function (but callable in user scripts) 

_LIBCLEANCOPYOFFIELD ()
Undocumented function (but callable in user scripts) 

_PEAPPLYEQUATION ()
Undocumented function (but callable in user scripts) 

_PM_EXPOSEUPDATEBASELINEDIALOG ()
Undocumented function (but callable in user scripts) 

_PM_GETBACKUPREFERENCENAME ()
Undocumented function (but callable in user scripts) 

_PM_GETBACKUPREFERENCENAMEFROMSETTING ()
Undocumented function (but callable in user scripts) 

_PM_ISTHEREBACKUPBASELINE ()
Undocumented function (but callable in user scripts) 

_PM_ISTHEREBACKUPBASELINEFROMSETTING ()
Undocumented function (but callable in user scripts) 

_PM_REFGETTEMPLATEFROMREFNAME ()
Undocumented function (but callable in user scripts) 

_PM_UPDATEREFERENCE ()
Undocumented function (but callable in user scripts) 

_PM_UPDATEREFERENCEEXT ()
Undocumented function (but callable in user scripts) 

_PM_USEADMINREFTABLE ()
Undocumented function (but callable in user scripts) 

_SYNC_ADDSYNCHROTYPEDATE ()
Undocumented function (but callable in user scripts) 

_SYNC_MAPSYNCHRONIZEWITH ()
Undocumented function (but callable in user scripts) 

_SYNC_SYNCHROENDDATE ()
Undocumented function (but callable in user scripts) 

_SYNC_SYNCHROSTARTDATE ()
Undocumented function (but callable in user scripts) 

_SYN_MAPSYNCHRONIZEDFROM ()
Undocumented function (but callable in user scripts) 

_UTILISVIRTUALDATASET ()
Undocumented function (but callable in user scripts) 

_UTILS_RETURN_FTE_CALENDAR ()
Undocumented function (but callable in user scripts) 

<strong>COLOR_CONVERTCOLORINTOSTRING</strong> ()
Undocumented function (but callable in user scripts) 

<strong>COLOR_GENERATECOLORFROMOBJECT</strong> ()
Undocumented function (but callable in user scripts) 

<strong>COLOR_HUE2RGB</strong> ()
Undocumented function (but callable in user scripts) 

<strong>COLOR_RELATIVELUMINANCE</strong> ()
Undocumented function (but callable in user scripts) 

<strong>DATASET_ISLINKED</strong> ()
Undocumented function (but callable in user scripts) 

<strong>DATE_CREATEHOURATTRIBUTE_LOCKER</strong> ()
Undocumented function (but callable in user scripts) 

<strong>DATE_CREATEHOURATTRIBUTE_MODIFIER</strong> ()
Undocumented function (but callable in user scripts) 

<strong>DATE_CREATEHOURATTRIBUTE_READER</strong> ()
Undocumented function (but callable in user scripts) 

<strong>DATE_CREATELTATTRIBUTE_LOCKER</strong> ()
Undocumented function (but callable in user scripts) 

<strong>DATE_CREATELTATTRIBUTE_MODIFIER</strong> ()
Undocumented function (but callable in user scripts) 

<strong>DATE_CREATELTATTRIBUTE_READER</strong> ()
Undocumented function (but callable in user scripts) 

<strong>DATE_CREATEMINUTEATTRIBUTE_LOCKER</strong> ()
Undocumented function (but callable in user scripts) 

<strong>DATE_CREATEMINUTEATTRIBUTE_MODIFIER</strong> ()
Undocumented function (but callable in user scripts) 

<strong>DATE_CREATEMINUTEATTRIBUTE_READER</strong> ()
Undocumented function (but callable in user scripts) 

<strong>DATE_TIMEDIFFLIMIT</strong> ()
Undocumented function (but callable in user scripts) 

<strong>GETSERVER</strong> ()
Undocumented function (but callable in user scripts) 

<strong>JIRA_CREATEINFOANDUPDATESPRINTFROMJIRAINFO</strong> ()
Undocumented function (but callable in user scripts) 

<strong>JIRA_GETSERVER</strong> ()
Undocumented function (but callable in user scripts) 

<strong>JIRA_SETSERVER</strong> ()
Undocumented function (but callable in user scripts) 

<strong>LOGICAL_TRUE</strong> ()
Undocumented function (but callable in user scripts) 

<strong>MATH_GRADIENT_DESCENT</strong> ()
Undocumented function (but callable in user scripts) 

<strong>MATH_POLYNOMIAL_ESTIMATION_UNSCALED</strong> ()
Undocumented function (but callable in user scripts) 

<strong>MATH_POLYNOMIAL_ESTIMATION</strong> ()
Undocumented function (but callable in user scripts) 

<strong>MATH_POLYNOMIAL_REGRESSION_COSTFUNCTION</strong> ()
Undocumented function (but callable in user scripts) 

<strong>MATH_POLYNOMIAL_REGRESSION_GRAD</strong> ()
Undocumented function (but callable in user scripts) 

<strong>STRING_UPDATEFORDIDDENCHARACTERSINNAMES</strong> ()
Undocumented function (but callable in user scripts) 

<strong>STRING_UPDATEFORDIDDENCHARACTERSINPROJECTNAMES</strong> ()
Undocumented function (but callable in user scripts) 

<strong>VECTOR_OBJECTFROMCLASS</strong> ()
Undocumented function (but callable in user scripts) 

<strong>VECTOR_SORTPLIST_SORT</strong> ()
Undocumented function (but callable in user scripts) 

Rest/Json api
This chapter overs the api used to export and/or use a rest/json api within Planisware. All the rest api is defined in the module REST, so each function of the api: get/post/defineApi/parse/json/select should be called on the rest object: rest.get(url,authorization) for example. The basic concept of the Planisware rest api is that each function passes or returns js objects that are send or retrieved to a web application translating these objects using the json format. The API can be used without using the json/parse functions, because the defineApi,get and post functions performs automatically all necessary conversions 
Classes or Objects
opxBasicAuthorization
Defines a basic authorization object 
Attributes
Argument
Documentation 
NAME
String user name 
PASSWORD
String password 

opxCertificateAuthorization
Defines a certificate authorization object 
Attributes
Argument
Documentation 
CERTIFICATEPATH
String path to a certificate and key in PEM format 
PASSWORD
String (optional) password protecting the private key 
CAFILE
String (optional) path to a certificate that must be the certificate authority of the server endpoint 
CADIRECTORY
String (optional) path to a directory containing hashed CA files 

opxDigestAuthorization
Defines a digest authorization object 
Attributes
Argument
Documentation 
NAME
String user name 
PASSWORD
String password 

Functions
defineOdataImportFunction (name, class-or-code)
Create an import function for the Odata interface. 
Arguments
Argument
 
Documentation 
NAME

function name 
CLASS-OR-CODE

object class or callable object 

odataError (type, message)
Allows to issue a odata error inside a request defined by an odataImportfunction 
Arguments
Argument
 
Documentation 
TYPE

Error type 
MESSAGE

Error message 

rest.defineApi (name, get-function, post-function)
Defines an url that is defining an interface, the url can handler GET and/or POST request that are triggering a JS function. In the case of a GET request, the function is called with the number of arguments defined in the url using the ?arg1+arg2+argn syntax. In the case of a POST request the functino is called with a JS object where each slot is filled with the POST request. 
Arguments
Argument
 
Documentation 
NAME

String url name 
GET-FUNCTION

Function or closure or any callable object that is handling the get request, if false or undefined is passed, the url is not able to handle get requests and will return an error. The this of the function is bound to the session object the other arguments are the arguments passed to the url using the ?arg1+arg2+argn syntax 
POST-FUNCTION

Function oe closure or any callable object the is handling the post request, if flase or undefined is passed, the url is not able to handle post requests and will return an error. The this of the function is bound to the session object the first argument of the function is a js object which a set of slots containing the detail of the post request 
Syntax examples
//example1: returns a simple project list
function my_request(formula) {
   return rest.select(opxProject,{"name","desc"},formula);
   }

rest.defineapi("projects_list",my_request) ;
//example2: returns the WBS a structure of a project
function get_project_content(id) {
        var p = OpxProject.get(id);
    if (p InstanceOf OpxProject) {
    var res;
    fromobject(p) {res=rest.select("opxWbsElement",{"name","desc","workstructures"},"level=1");}
    return res;
    } else {
    return("Unknown project:"+id);
    }
    }

rest.defineapi("get_project_content",get_project_content);
//example3: generic request using a post request object
function generic_request(request) {
return rest.select(request.class,request.attributes,request.formula);
}

rest.defineapi("generic_request",false,generic_request); //post request

rest.get (url, auth, errorp)
Executes a get request on an url, using an authorization object, the function returns a JS object that is the parsed result of the request. If the JSON format is incorrect the function returns a string that is the content generated by the url request 
Arguments
Argument
 
Documentation 
URL

Url called with arguments formated using the the ?arg1+arg2 syntax 
AUTH
OPTIONAL
authorization object 
ERRORP
OPTIONAL
if true the function issues an error if the returned format is not json compatible, if in case of error 
Syntax examples
//example2 using the get_project_content api
global var auth = new OpxBasicAuthorization("name","claire","password","");
rest.get("http://localhost/p6/OPX2/localhost:8400/get_project_content?PROJ-C",auth) ;

rest.json (object)
Transform any JS object to a string using the json format 
Arguments
Argument
 
Documentation 
OBJECT

JS object 

rest.parse (string, slots-are-upercase)
Parse a string in the Json format and returns a JS object or an array of JS object 
Arguments
Argument
 
Documentation 
STRING

String to parse 
SLOTS-ARE-UPERCASE
OPTIONAL
Boolean which is true by default. When true all Json attributes 

rest.post (url, post-data, auth, errorp)
Executes a post request on an url, using an authorization object, the function returns a JS object that is the parsed result of the request. If the JSON format is incorrect the function returns a string that is the content generated by the url request 
Arguments
Argument
 
Documentation 
URL

Url used for the post request 
POST-DATA

Js object containing the post data 
AUTH
OPTIONAL
authorization object 
ERRORP
OPTIONAL
if true the function issues an error if the returned format is not json compatible, if in case of error 
Syntax examples
//example3 using the generic_request api
//defines a request object that will used as POST data for the request
function request(class,attributes,formula) {
 this.class=class;
 this.attributes=attributes;
 this.formula=formula;
}

rest.post("http://localhost/p6/OPX2/localhost:8400/generic_request",new request("OpxNetwork",{"name","desc"},"level=1"),auth) ;

rest.put (url, put-data, auth, errorp)
Executes a put request on an url, using an authorization object, the function returns a JS object that is the parsed result of the request. If the JSON format is incorrect the function returns a string that is the content generated by the url request 
Arguments
Argument
 
Documentation 
URL

Url used for the post request 
PUT-DATA

Js object containing the post data 
AUTH
OPTIONAL
authorization object 
ERRORP
OPTIONAL
if true the function issues an error if the returned format is not json compatible, if in case of error 
Syntax examples

rest.select (class, attributes, formula)
Returns an array of Js objects that represents the result of the select request. If a relation is specified in the attribute list, the request will return an array of Js object for each object represented. 
Arguments
Argument
 
Documentation 
CLASS

String or class object to select 
ATTRIBUTES

List or array of attributes or string representing the attributes to select 
FORMULA

String or formula object that filters the selected objects 
Syntax examples
fromobject(p) {res=rest.select("opxWbsElement",{"name","desc","workstructures"},"level=1");} //is returning the recursive content of a project

rest.standard_parse (string, slots-are-upercase)
Parse a string in the Json standard format and returns a JS object or an array of JS object 
Arguments
Argument
 
Documentation 
STRING

String to parse 
SLOTS-ARE-UPERCASE
OPTIONAL
Boolean which is true by default. When true all Json attributes 

SAP interface
This chapter contains functions that allow to manipulate SAP interface 
Functions
callBAPI (sap-web-service, operation-parameters)
Call a SAP BAPI from within a SAP Web service 
Arguments
Argument
 
Documentation 
SAP-WEB-SERVICE

The name of the environment SAP Web service 
OPERATION-PARAMETERS

The Sap Web service operation and BAPI parameters 

callBapiMacro (object, macro)
Call a SAP BAPI from an object 
Arguments
Argument
 
Documentation 
OBJECT

Object on which calling the BAPI macro 
MACRO
OPTIONAL
Name of the BAPI macro to call 

connect (sap-web-service)
Connect to a SAP web service, returns the SAP web service associated connection number 
Arguments
Argument
 
Documentation 
SAP-WEB-SERVICE

The name of the environment SAP Web service 

disconnect (sap-web-service)
Disconnect from a SAP web service, using the SAP Web Service associated connection numbre 
Arguments
Argument
 
Documentation 
SAP-WEB-SERVICE

The name of the environment SAP Web service 

SOAP interface
This chapter contains functions that allow to create web services in OPX2script 
Functions
addattachement (path, name)
Add an attachement to an operation in a web service 
Arguments
Argument
 
Documentation 
THIS

an SOAP operation object 
PATH

[string] the local path of the attachement 
NAME

[string, optional] the name of the attachement 
Syntax examples
var o_the_operation = "OPXSoapOperation".findclass().get("TestWebService");
var the_path = "D:/Projects/Web Services/As Server/the_file.jpg";
the_operation.addattachement(the_path, getfilenamefrompath(the_path));

explainUnitConversions (target, rate-center, rate-table)
Explain how units are converted which each other 
Arguments
Argument
 
Documentation 
THIS

source unit 
TARGET

target unit 
RATE-CENTER

[list of objects] Rate center 
RATE-TABLE

[Symbol] rate-table 

exportWebDocument (url, name, inputmsg, outputmsg, doc, opx2script-mode, faultmsg, headersin, headersout, headersfault)
exports a function as an operation in a web service 
Arguments
Argument
 
Documentation 
THIS

a function object 
URL

[OPXSoapURL] the URL associated with the web service 
NAME

[string] the name of the operation 
INPUTMSG

[schema type] type of the input message 
OUTPUTMSG

[schema type] type of the output message 
DOC

[string] documentation 
OPX2SCRIPT-MODE

[boolean] should be set to true 
FAULTMSG

[schema type] type of the fault message 
HEADERSIN

headers in 
HEADERSOUT

headers out 
HEADERSFAULT

headers fault 

Standard Javascript functions
This chapter covers the basic Javascript functionalities implemented in OPX2 script 
Classes or Objects
date
A date object represent a date, in OPX2 the internal representation of dates for efficiency reason is an integer, they are two kind of dates in OPX2: simple dates which are used for scheduling and cost computations which are an integer counting the number of minutes since January 1st 1970, archive dates which is a number of seconds. This explains why OPX2 can schedule with a precision of more than one minute 
Constructor Arguments
Argument
Documentation 
STRING_OR_YEAR
Could be or a string that OPX2 will parse to build a date or an integer representing a year 
FORMAT_OR_MONTH
[optional] Could be or a string representing an OPX2 date format or an integer representing a month 
DAY
[optional] number of days 
HOURS
[optional] number of hours 
MINUTES
[optional] number of minutes 
SECONDS
[optional] number of seconds 
Constructor syntax
new date("1/2/01"); or new date(2001,2,1); or new date("2-1-2001","MM-DD-YYYY");
Attributes
Argument
Documentation 
SDATE
integer which present the date in number of minutes since January 1st 1970 
DATE
integer which present the date in number of seconds since January 1st 1970 

function
Function object can be used in call, map methods 
Attributes
Argument
Documentation 
CODE
Internal structure used to store the code of the function 

integer
Any integer 

math
Class used to regroup mathematical functions 
Attributes
Argument
Documentation 
E
[read only] contains the value of e 
LN10
[read only] contains the value of LN10 
PI
[read only] contains the value of PI 
SQRT1_2
[read only] contains the value of Sqrt(2)/2 
SQRT2
[read only] contains the value of Sqrt(2) 

string
The string class support the string objects, the length property can not be changed in an OPX2 string 
Constructor Arguments
Argument
Documentation 
LENGTH
integer representing the length of the string created 
INITIAL_ELEMENT
[optional] string of one character used as initial element of the string created 
Constructor syntax
new string(20,"a"); or new string(30);
Attributes
Argument
Documentation 
LENGTH
integer representing the length of a string, it can be modified 

Syntax operators
delete
Internal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseDelete is a special form which allows to delete an object. Deleting an OpxObject really suppress it from the system memory, it frees the allocated resources associated, deleting an OPX2 script object has by default no effect, in fact resources associated with OPX2 script objects are collected by OPX2 using a garbage collection mechanism. If you want to free some specific resources associated to a specific OPX2 script object class, you can define the delete method on this class, using the "method" form 

function
Allows to define a function in OPX2 script, in OPX2 script like in Javascript the first argument of a function is always passed as the object of a method, to retrieve this object you have to use the this keyword. Internally a function can be implemented by different methods , a method is a specialized function that will be used on a specific object. It is possible to define methods in OPX2 script using the method form 
Syntax examples
function fact(n) if n==0 return 1; else return n*fact(n-1);

if
It is the classical if then else clause with the same syntax than C,Java or Javascript 

instanceof
This form allows to test if an object belongs to a certain object class, it can be used to test the type of an object before operating on it. InstanceOf can be used on any object 

switch
The switch form is mostly the same than in C or Java. The difference is that an implicit break is added for each case (all cases are mutually exclusive). 

typeOf
This form returns a string defining the type or class of an object 

var
Declares a variable locally to a file, a script, a function or a for loop, if you want to use a global variable see the global var or context documentation. If no value is given the variable when the variable is declared then an unknown javascript object is assigned to the variable, this unknown assigned object can be later transformed in a vector: it is the Javascript way of defining vectors 
Syntax examples
var i = 0;
var i;
function test () { var x=0; ]
for (var x=0;x\<10;x++) expression
var vector; vector[0]=1; vector[1]=2;

while
The while form is the same than in Java or Javascript 

Functions
abs ()
Complies with Javascript standard 

acos ()
Complies with Javascript standard 

addionalloadmacrodimensions (context)
Additionnal dimansion available in compact load macro 
Arguments
Argument
 
Documentation 
context



addparsingtags (storage, tag, specs)
This Function is used to add a new tag 
Arguments
Argument
 
Documentation 
STORAGE

Object 
TAG

String 
SPECS

String 

almostEqual (a, b, precision)
Compare two number with respect to a given precision 
Arguments
Argument
 
Documentation 
A

Number 
B

Number 
PRECISION
OPTIONAL
number. By default is double float precision. It can not be more precise that double float precision. 

asin ()
Complies with Javascript standard 

atan ()
Complies with Javascript standard 

ceil ()
Complies with Javascript standard 

charAt (position)
Returns the character stored at one given position in a string 
Arguments
Argument
 
Documentation 
POSITION

Integer: position of the character 

checkObjectGrid ()
Check if an object grid has errors 
Arguments
Argument
 
Documentation 
THIS

object grid or widget containing object grids 

cmsAfterchangeRootFolder (storage, current-object, key, uid)
This Function is used to rename folder root 
Arguments
Argument
 
Documentation 
STORAGE

String 
CURRENT-OBJECT

String 
KEY

String 
UID

String 

cmschangeRootfolderProperty (storage, old-value, key, value, current-object)
This Function is used to rename folder root 
Arguments
Argument
 
Documentation 
STORAGE

String 
OLD-VALUE

String 
KEY

String 
VALUE

String 
CURRENT-OBJECT

String 

cmscheckinitem (cms-connector, document, path-or-id, major, comment)
use to checkin document inside document field with connector 
Arguments
Argument
 
Documentation 
CMS-CONNECTOR

object cms connector 
DOCUMENT

kernel document 
PATH-OR-ID

object-id of the kernel document 
MAJOR

version major 
COMMENT

modif comment 

cmscheckoutitem (cms-connector, document, path-or-id)
use to checkout document inside document field with connector 
Arguments
Argument
 
Documentation 
CMS-CONNECTOR

object cms connector 
DOCUMENT

kernel document 
PATH-OR-ID

object-id of the kernel document 

cmsgetitemlockedby (cms-connector, document)
use to know if a doc is already checkout/lockedby 
Arguments
Argument
 
Documentation 
CMS-CONNECTOR

object cms connector 
DOCUMENT

kernel document 

computefterate (res, start-date, end-date)
use to compute fte rate between dates 
Arguments
Argument
 
Documentation 
RES

resource 
START-DATE

start date computation 
END-DATE

end date computation 

connectedToBS (bs-class, obj)
return the BS value for the given object 
Arguments
Argument
 
Documentation 
THIS

Ignored 
BS-CLASS

[string/Class] a breakdown structure 
OBJ

an object 

cos ()
Complies with Javascript standard 

currentmodificationarglist (context)
return current modification arglist on table line 
Arguments
Argument
 
Documentation 
context



decodeToFile ()
This function is used to decode a string with base64 algorithm and generate a file with it 
Syntax examples
var sPath = "/tmp/mydoc.docx";
decodeToFile(Base64content, sPath);

eval (string, object)
Internal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal Use OnlyInternal Use OnlyInternal Use OnlyInternal Use OnlyInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseInternal UseEvaluate an OPX2 script expression contained in a string 
Arguments
Argument
 
Documentation 
STRING

String to evaluate 
OBJECT

Object bound to "this" in the evaluated script [optional]. If not specified, the current context will be used as "this". 

exp ()
Complies with Javascript standard 

floor ()
Complies with Javascript standard 

getDate ()
Returns the date (number of day of the month) of a date object 

getDay ()
Returns the day of the week of a date object 

getEditMode ()
This Function is used to get the user edit mode 

getexpirationdate ()
return the expiration date of the key 

getHours ()
Returns the hour of a specific date 

getMinutes ()
Returns the minutes of a specific date 

getMonth ()
Returns the month of a specific date 

getPathwithEmptyDoc (extension)
This Function is used to get a path with an empty doc 
Arguments
Argument
 
Documentation 
EXTENSION

String 

getSeconds ()
Returns the seconds of a specific date 

getTime ()
Returns the time in milliseconds associated to a date 

getTimeZoneOffset ()
Returns the time zone offset of a date 

getYear ()
Returns the year of a specific date 

ignoreslotforchecksum (att-name)
Ignore slot in checksum 
Arguments
Argument
 
Documentation 
att-name

[symbol] 

indexOf (string)
Returns the position a string in the string passed in argument (see search) 
Arguments
Argument
 
Documentation 
STRING

String to search in 

lastIndexOf (string)
Returns the position a string in the string passed in argument computed from the end of the string 
Arguments
Argument
 
Documentation 
STRING

String to search in 

log ()
Complies with Javascript standard 

makearray (size)
Create a array with a given length 
Arguments
Argument
 
Documentation 
SIZE

size of the array, can be a either an interger or a list of interger for multidimensionnal array 

makedocumentwithpath ()
This function is used to make a kernel document with a file 
Syntax examples
var sPath = "/tmp/mydoc.docx";
var o_doc_elt = "Opx_COL_PT_DOCUMENT_TABLE".get("mydoc");
o_doc_elt.makedocumentwithpath(sPath,"ISSUE_DOCUMENT");

max ()
Complies with Javascript standard 

min ()
Complies with Javascript standard 

paramRange ()
Use param Range in PEX V0 

parsefilter (filter)
Parse filter structure in hashtable with class name as key and formula as value 
Arguments
Argument
 
Documentation 
FILTER

filter structure 

pow ()
Complies with Javascript standard 

random ()
Complies with Javascript standard 

refreshcurrentapplet (context)
really refresh the current applet 
Arguments
Argument
 
Documentation 
context



remparsingtags (storage, tag)
This Function is used to delete a tag 
Arguments
Argument
 
Documentation 
STORAGE

Object 
TAG

String 

resetallcostunitcache (context)
Reset all cost unit cache 
Arguments
Argument
 
Documentation 
context



round ()
Complies with Javascript standard 

setDate (nday)
Set the date (number of day of the month) of a date object 
Arguments
Argument
 
Documentation 
NDAY

Integer 

setdiffmode (compare-with-object, context-values, hook)
Allows to set the current screen displayed in diff mode. The first argument of the function is an object that should be of the same class that the object returned by diffModeAvailableOn or should have the undefined value. If the value is undefined, it means that the screen is the comparison between the screen on the current object displayed and a screen displaying the same object with different context values. The context values are specified in a second argument with a list of pairs, context attribute name and context value. If undefined is specified for the compare-with-object argument and no list is specified for the context values, the system quits the diff mode. The diff mode is automatically removed when the grids supporting the diffmode are deleted. 
Arguments
Argument
 
Documentation 
COMPARE-WITH-OBJECT

an object to compare with or undefined 
CONTEXT-VALUES
OPTIONAL
list of values of the context to set in the diff mode 
HOOK
OPTIONAL
function called on each grid that is refreshed 

setHours (hour)
Change the hour of a specific date 
Arguments
Argument
 
Documentation 
HOUR

Integer 

setMinutes (minute)
Change the minutes of a specific date 
Arguments
Argument
 
Documentation 
MINUTE

Integer 

setMonth (month)
Set the month of a specific date 
Arguments
Argument
 
Documentation 
MONTH

Integer 

setSeconds (seconds)
Change the seconds of a specific date 
Arguments
Argument
 
Documentation 
SECONDS

Integer 

setTime ()
Set the time in milliseconds into a date object 

setToString (separator, accessor)
Arguments
Argument
 
Documentation 
SEPARATOR
OPTIONAL
seperator by default a , 
ACCESSOR
OPTIONAL
callable object called on each object of the set 

setYear (year)
Set the year of a specific date 
Arguments
Argument
 
Documentation 
YEAR

Integer 

sin ()
Complies with Javascript standard 

split (sep, start, end)
Splits a string separated by the string passed as argument, returns a vector of strings 
Arguments
Argument
 
Documentation 
SEP

String: separator string 
START

Integer: start of the split 
END

Integer: end of the split 

sqrt ()
Complies with Javascript standard 

substring (start, end)
Returns a substring of a string (see extract) 
Arguments
Argument
 
Documentation 
START

Integer: start of the string 
END

Integer: end of the string 

tan ()
Complies with Javascript standard 

test (string)
Tests if a regular expression matches a string 
Arguments
Argument
 
Documentation 
STRING

String to match with the regular expression 

toLowerCase ()
Transform a string in a lower case character string 

tostring ()
This method is defined on all objects,it allows to transform an OPX2 script object in a form understandable by the user or OPX2 developper 

toUpperCase ()
Transform a string in a lower case character string 

updatedocumentwithpath ()
This function is used to update a kernel document with a file 
Syntax examples
var sPath = "/tmp/mydoc.docx";
var o_doc_elt = "Opx_COL_PT_DOCUMENT_TABLE".get("mydoc");
o_doc_elt.ISSUE_DOCUMENT.updatedocumentwithpath(sPath);

Variables
math
Variable containing the Math object used to regroup mathematical functions 

XML interface
This chapter contains functions that allow to manipulate XML from OPX2script 
Functions
generateXML (values, add-schema-location)
This functions creates a list representing an XML document from a schema type and a script object 
Arguments
Argument
 
Documentation 
THIS

an instance of the class xml-schema-type 
VALUES

the object(s) to converto to XML 
ADD-SCHEMA-LOCATION

[boolean] add schema info to the generated xml 

getRootObject ()
This function returns the root object of a schema 
Arguments
Argument
 
Documentation 
THIS

an XML schema 

getSchemaInstance ()
This function allows to retrieve the schema associated with an XML document 
Arguments
Argument
 
Documentation 
THIS

a list representing an XML document (as returned by loadXML for example 

setXMLAttribute (attribute, value)
This function sets an XML attribute on an object representing an XML node 
Arguments
Argument
 
Documentation 
THIS

a jscript object or an xmlelement structure 
ATTRIBUTE

[string or symbol] name of the attributee 
VALUE

value to set 

xmlAttributes ()
This function returns the XML attributes associated with an object representing an XML node 
Arguments
Argument
 
Documentation 
THIS

a jscript object or an xmlelement structure 


 
namespace _AcpStrat;

/* 
 * Fonction acp_pjs_GenerateBucketFilterMenu
 * -----------------------------------------
 * Cette fonction génère le menu pour filtrer les « buckets » (regroupements / sous-ensembles)
 * dans le contexte de la synchronisation budgétaire. Elle ajoute également des options de
 * réinitialisation du filtre.
 */
function acp_pjs_GenerateBucketFilterMenu() {
  // Si le contexte de synchronisation n’est pas déjà "_BM_BS", on l’assigne
  if (context._BM_AA_S_BREAKDOWN_TO_SYNCHRONIZE != "_BM_BS") {
    context._BM_AA_S_BREAKDOWN_TO_SYNCHRONIZE = "_BM_BS";
  }

  // On récupère la langue courante et on l’assigne pour le menu
  this.string = context._BM_DA_SYNCHRO_CLASS_CURRENT_LANGUAGE;

  var Root = this;

  // Ajoute l'option pour remplacer le filtre actuel par la sélection
  var ReplaceItem = Root.Appendmenuitem(
    plw.write_text_key("BudgetManager.replace_current_filter_by_the_selection"),
    "_BmReplaceCurrentFilterBySelection()"
  );
  ReplaceItem.image = plc.image.get("import2");

  // Ajoute l'option pour réinitialiser le filtre
  var ResetItem = Root.Appendmenuitem(
    plw.write_text_key("reset"),
    "resetbucketfilter()"
  );

  // Le reset complet de la structure est autorisé uniquement s’il n’existe pas de version
  if (context._BM_AA_S_BUDGET_VERSION == "") {
    var CompleteResetItem = Root.Appendmenuitem(
      plw.write_text_key("BudgetManager.reset_structure"),
      "callv2(\"_AcpStrat\",\"acp_pjs_SynchronizeBmStructure\");"
    );
    CompleteResetItem.image = plc.image.get("warning_small");
  }
}

Fonction acp_pjs_GetCurrentSynchroClass
---------------------------------------
Récupère la classe à synchroniser (SynchroClass) à partir du nom stocké
dans le contexte (_BM_AA_S_BREAKDOWN_TO_SYNCHRONIZE). Si elle n’existe
pas, on revient par défaut sur "_BM_BS".

function acp_pjs_GetCurrentSynchroClass(){
  var UserClass = context._BM_AA_S_BREAKDOWN_TO_SYNCHRONIZE;
  var ClassJs = "Opx" + UserClass;
  var UserClassObject = ClassJs.FindClass();

  if (!(UserClassObject instanceof ObjectClass)) {
    context._BM_AA_S_BREAKDOWN_TO_SYNCHRONIZE = "_BM_BS";
    UserClassObject = "Opx_BM_BS".findClass();
  }
  return UserClassObject;
}

Fonction acp_pjs_ComputeBucketFilterObject
------------------------------------------
Cette fonction calcule la liste des objets qui seront affichés dans le menu
déroulant correspondant au filtre « bucket ». Elle utilise une formule
de filtrage (FilterFormula) pour ne récupérer que les objets pertinents.

function acp_pjs_ComputeBucketFilterObject(){
  var SelectedClass = context._BM_AA_S_BREAKDOWN_TO_SYNCHRONIZE;
  var SynchroClassObject = acp_pjs_GetCurrentSynchroClass(this : context);
  var list = new vector();

  if (SynchroClassObject instanceof ObjectClass) {
    var SynchroClassSymbol = SynchroClassObject.name;
    var FilterFormula = "";
    // Récupère les formules de filtrage (portfolio) 
    var FilterFormulaVector = plw._inf_js_compute_portfolio_filter();

    if (FilterFormulaVector instanceof vector) {
      FilterFormula = FilterFormulaVector.getplist(SelectedClass);
      if (FilterFormula instanceof String && FilterFormula != "") {
        // Création d’une formule conditionnelle
        var FilterForm = new formula(SynchroClassObject, FilterFormula, "BOOLEAN", false);
        with (FilterForm.fromobject()) {
          for (var elt in SynchroClassObject) {
            list.push(elt);
          }
        }
      }
    }
  }
  return list;
}

Fonction acp_pjs_GetPorttfolioValues
------------------------------------
Récupère les valeurs de portefeuille éventuellement associées à la classe.
Retourne la valeur stockée s'il y en a une, ou une chaîne vide sinon.

function acp_pjs_GetPorttfolioValues(){
  var SelectedClass = context._BM_AA_S_BREAKDOWN_TO_SYNCHRONIZE;
  var SynchroClassObject = acp_pjs_GetCurrentSynchroClass(this : context);
  var FavFilterInfos = plw.getFavorFilterAllInfo__hashtable.get(SynchroClassObject);

  if (FavFilterInfos instanceof vector){
    var PortfolioField = FavFilterInfos.getplist("PORTFOLIO_FIELD");
    var PortfolioFieldObj = plc._FF_PT_FAVOR_FILTERS.getslotbyid(PortfolioField);
    if (PortfolioFieldObj instanceof ObjectAttribute) {
      var CurrPorfolio = plc._FF_PT_FAVOR_FILTERS.get(context._FF_AA_S_LIST_NAME);
      if (CurrPorfolio instanceof plc._FF_PT_FAVOR_FILTERS) {
        return CurrPorfolio.get(PortfolioField);
      }
    }
  }
  return "";
}

Fonction acp_pjs_ComputeUserParameterKey
----------------------------------------
Construit la clé utilisée pour stocker/récupérer le filtre Bucket (UserParameterKey)
en se basant sur la classe choisie et l’object courant.

function acp_pjs_ComputeUserParameterKey(){
  return context._BM_AA_S_BREAKDOWN_TO_SYNCHRONIZE + "_BM_AA_S_BUCKET_FILTER"
         + plw.CurrentPageObject().printattribute();
}

Fonction acp_pjs_ACP_DA_BM_AA_S_BUCKET_FILTER_Reader
----------------------------------------------------
Lecture (reader) du champ dynamique « _BM_AA_S_BUCKET_FILTER ». Si aucune valeur
n’est définie, on prend par défaut celle du portefeuille récupérée par
acp_pjs_GetPorttfolioValues.

function acp_pjs_ACP_DA_BM_AA_S_BUCKET_FILTER_Reader(){
  var UserParameterKey = acp_pjs_ComputeUserParameterKey();
  var CurFilter = plw.GetUserParameter(UserParameterKey);

  if (CurFilter == "" || CurFilter == undefined) {
    CurFilter = acp_pjs_GetPorttfolioValues();
    context._BM_AA_S_BUCKET_FILTER = CurFilter;
  } else if (CurFilter != context._BM_AA_S_BUCKET_FILTER) {
    context._BM_AA_S_BUCKET_FILTER = CurFilter;
  }
  plw.SetUserParameter(UserParameterKey, CurFilter);
  return CurFilter;
}

Fonction acp_pjs_ACP_DA_BM_AA_S_BUCKET_FILTER_Modifier
------------------------------------------------------
Modifier (writer) du champ dynamique « _BM_AA_S_BUCKET_FILTER ». Met à jour la valeur
du filtre dans le contexte ainsi que dans le paramètre utilisateur (UserParameter).

function acp_pjs_ACP_DA_BM_AA_S_BUCKET_FILTER_Modifier(value){
  var UserParameterKey = acp_pjs_ComputeUserParameterKey();
  if (value == "") { 
    value = acp_pjs_GetPorttfolioValues();
  }
  context._BM_AA_S_BUCKET_FILTER = value;
  plw.SetUserParameter(UserParameterKey, value);
  return value;
}

Fonction acp_pjs_GetReportedFilesReader
---------------------------------------
Récupère la liste des projets rapportés pour l’affichage. Si le contexte est un projet,
on récupère son identifiant et on y ajoute éventuellement une liste de versions.

function acp_pjs_GetReportedFilesReader(){
  var CurStrat = plw.currentpageobject();
  var Filter = "";

  if (CurStrat instanceof plc.ordoproject) {
    Filter = CurStrat.printattribute();
    var SelectedVersions = context.ACP_DA_BM_AA_VERSION_LIST_TO_COMPARE;
    if (SelectedVersions != "") {
      Filter += "," + SelectedVersions;
    }
  }
  return Filter;
}

Fonction acp_pjs_OpenProject
----------------------------
Reçoit en paramètre une liste d’identifiants de projets (séparés par des virgules),
récupère chacun d’eux et ouvre les projets qui ne sont pas déjà ouverts.

function acp_pjs_OpenProject(String PrjList){
  var PrjVect = PrjList.split(",");
  var PrjToOpen = new vector();

  for (var PrjId in PrjVect where PrjId != ""){
    var Prj = plc.ordoproject.get(PrjId);
    if (Prj instanceof plc.ordoproject && Prj.open == false) {
      PrjToOpen.push(Prj);
    }
  }
  if (PrjToOpen.length > 0) {
    PrjToOpen.callmacro("OPEN");
  }
}

Fonction acp_pjs_BucketVersion_Reader / acp_pjs_BucketVersion_Modifier
----------------------------------------------------------------------
Gère la lecture et la modification d’une version de bucket via les UserParameters.
Permet par exemple de basculer d’une version budgétaire à l’autre.

function acp_pjs_BucketVersion_Reader(FieldId){
  var UserParameterKey = FieldId + plw.CurrentPageObject().printattribute();
  var CurVersion = plw.GetUserParameter(UserParameterKey);

  if (CurVersion instanceof String){
    if (CurVersion != context.get(FieldId)) {
      context.set(FieldId, CurVersion);
    }
    return CurVersion;
  }
  return "";
}

function acp_pjs_BucketVersion_Modifier(value, FieldId){
  var UserParameterKey = FieldId + plw.CurrentPageObject().printattribute();
  context.set(FieldId, value);
  plw.SetUserParameter(UserParameterKey, value);
  return value;
}

Fonction acp_pjs_GenerateBucketFilterDynAttr
--------------------------------------------
Génère les champs dynamiques nécessaires au fonctionnement du filtre Bucket :
ACP_DA_BM_AA_S_BUCKET_FILTER, ACP_DA_BM_AA_S_FILE_FILTER, etc.
Chaque champ est défini avec son reader/modifier et diverses propriétés.

function acp_pjs_GenerateBucketFilterDynAttr() {
  var BmBucketFilterField = context.getslotbyid("ACP_DA_BM_AA_S_BUCKET_FILTER");
  if (!(BmBucketFilterField instanceof ObjectAttribute)) {
    BmBucketFilterField = new ObjectAttribute(
      plc.contextopx2, "ACP_DA_BM_AA_S_BUCKET_FILTER", "STRING"
    );
  }
  BmBucketFilterField.reader = acp_pjs_ACP_DA_BM_AA_S_BUCKET_FILTER_Reader;
  BmBucketFilterField.modifier = acp_pjs_ACP_DA_BM_AA_S_BUCKET_FILTER_Modifier;
  BmBucketFilterField.comment = "Bucket Filter";
  BmBucketFilterField.length = 4000;

  var BmFileFilterField = context.getslotbyid("ACP_DA_BM_AA_S_FILE_FILTER");
  if (!(BmFileFilterField instanceof ObjectAttribute)) {
    BmFileFilterField = new ObjectAttribute(
      plc.contextopx2, "ACP_DA_BM_AA_S_FILE_FILTER", "STRING"
    );
  }
  BmFileFilterField.reader = acp_pjs_GetReportedFilesReader;
  BmFileFilterField.comment = "Bucket File Filter";
  BmFileFilterField.length = 4000;

  var BmVersionField = context.getslotbyid("ACP_DA_BM_AA_S_BUDGET_VERSION");
  if (!(BmVersionField instanceof ObjectAttribute)) {
    BmVersionField = new ObjectAttribute(
      plc.contextopx2, "ACP_DA_BM_AA_S_BUDGET_VERSION", "STRING"
    );
  }
  BmVersionField.reader = acp_pjs_BucketVersion_Reader.closure("_BM_AA_S_BUDGET_VERSION");
  BmVersionField.modifier = acp_pjs_BucketVersion_Modifier.closure("_BM_AA_S_BUDGET_VERSION");
  BmVersionField.comment = "Budget Version";
  BmVersionField.length = 4000;

  var BmVersionsField = context.getslotbyid("ACP_DA_BM_AA_VERSION_LIST_TO_COMPARE");
  if (!(BmVersionsField instanceof ObjectAttribute)) {
    BmVersionsField = new ObjectAttribute(
      plc.contextopx2, "ACP_DA_BM_AA_VERSION_LIST_TO_COMPARE", "STRING"
    );
  }
  BmVersionsField.reader = acp_pjs_BucketVersion_Reader.closure("_BM_AA_VERSION_LIST_TO_COMPARE");
  BmVersionsField.modifier = acp_pjs_BucketVersion_Modifier.closure("_BM_AA_VERSION_LIST_TO_COMPARE");
  BmVersionsField.comment = "Budget Versions";
  BmVersionsField.length = 4000;
}

-----------------------------------------------------------------------
Les fonctions suivantes gèrent la synchronisation d’objets de type
portfolio/wp (Bucket) avec des objets de structure budgétaire Planisware.
Elles permettent de créer ou rechercher les activités associées,
ainsi que de propager certaines informations entre les deux niveaux.
-----------------------------------------------------------------------

Fonction acp_pjs_GetParentFieldValue
------------------------------------
Cherche le nom du champ parent (PARENT ou autre attribut, par ex. "PARENT"
ou "AXXX") utilisé pour structurer la hiérarchie.

function acp_pjs_GetParentFieldValue(){
  var UserClass = Context._BM_AA_S_BREAKDOWN_TO_SYNCHRONIZE;
  var SelectedClass = acp_pjs_GetCurrentSynchroClass(this : context);
  if (SelectedClass instanceof ObjectClass) {
    var TestSlot = SelectedClass.getslotbyid(UserClass);
    if (TestSlot instanceof ObjectAttribute) {
      return UserClass;
    } else {
      TestSlot = SelectedClass.getslotbyid("PARENT");
      if (TestSlot instanceof ObjectAttribute) {
        return "PARENT";
      }
    }
  }
  return "_BM_BS";
}

Fonction acp_pjs_GetActivityFieldValue
--------------------------------------
Cherche le champ correspondant à la classe user (UserClass) dans la classe
des activités (workstructure). Sert à lier l’activité à l’objet synchro.

function acp_pjs_GetActivityFieldValue(){
  var UserClass = Context._BM_AA_S_BREAKDOWN_TO_SYNCHRONIZE;
  var TestSlot = plc.workstructure.getslotbyid(UserClass);
  if (TestSlot instanceof ObjectAttribute) return UserClass;
  return "";
}

Fonction acp_pjs_GetParentBucketElt
-----------------------------------
Récupère l’objet parent d’un bucket (Xbs) selon le champ parent (par ex. "PARENT").
Permet de retrouver la hiérarchie existante.

function acp_pjs_GetParentBucketElt(SynchroClassObject, Xbs){
  var parentFieldName = acp_pjs_GetParentFieldValue();
  if (Xbs instanceof plc.object && Xbs.instanceof(SynchroClassObject)) {
    var ParentFieldObject = SynchroClassObject.getslotbyid(parentFieldName);
    if (ParentFieldObject instanceof ObjectAttribute) {
      return Xbs.get(parentFieldName);
    }
  }
  return false;
}

Fonction acp_pjs_GetBucketActivity
----------------------------------
Permet de retrouver (ou d’actualiser) l’activité associée à un bucket (Xbs),
dans le projet « stratégie » (StratPrj).

- IsAConsoLevel : true si on manipule un niveau de consolidation.
- IsAReserve    : true s’il s’agit d’une réserve budgétaire.

function acp_pjs_GetBucketActivity(CurrenStratProject, Xbs, IsAConsoLevel, IsAReserve) {
  var UserClass = Context._BM_AA_S_BREAKDOWN_TO_SYNCHRONIZE;  
  if(UserClass != "" && Xbs instanceof plc.object && CurrenStratProject instanceof plc.ordo_project) {
    var onbStr = Xbs.get("onb").tostring("####");
    var Tablekey = new keyattribute("OpxWbselement", "_BM_AA_N_LINKED_OBJECT", onbStr);
    with(CurrenStratProject.fromObject()) {
      with(Tablekey.fromObject()) {
        for(var Activity in plc.network 
            where (Activity._BM_AA_N_LINKED_OBJECT == onbStr)
              && Activity.Project == CurrenStratProject
              && Activity._BM_AA_B_IS_A_CONSO_LEVEL == IsAConsoLevel
              && Activity._BM_AA_B_RESERVE == IsAReserve
              && Activity._BM_AA_S_SYNCHRONISE_WITH.ToUpperCase() == UserClass.ToUpperCase()) {

          // Met à jour le nom et la description pour refléter la notion de Reserve si besoin
          var TargetName = (IsAReserve == true) ? "RESERVE (" + Xbs.name + ")" : Xbs.name;
          if (Activity.name != TargetName) { 
            Activity.name = TargetName; 
          }

          var TargetDesc = (IsAReserve == true) ? "RESERVE (" + Xbs.desc + ")" : Xbs.desc;
          if (Activity.desc != TargetDesc) {
            Activity.desc = TargetDesc;
          }

          // Lien entre l’activité et l’objet bucket
          var ActivityFieldName = acp_pjs_GetActivityFieldValue();
          if (Activity.get(ActivityFieldName) != Xbs) {
            Activity.set(ActivityFieldName, Xbs);
          }
          return Activity;
        }
      }
    }
  }
  return false;
}

Fonction acp_pjs_CreateBucketActivity
-------------------------------------
Crée une nouvelle activité dans le projet (StratPrj) associée à un bucket (Xbs).

- IsAConsoLevel : indique si c’est un niveau de consolidation
- IsAReserve    : indique s’il s’agit d’une réserve
- FilterFormula : filtre pour s’assurer qu’on ne crée pas d’activité hors
périmètre voulu (ex. top-level).

function acp_pjs_CreateBucketActivity(CurrenStratProject, SynchroClassObject, Xbs, IsAConsoLevel, IsAReserve, FilterFormula){
  var parentFieldName = acp_pjs_GetParentFieldValue();

  if (Xbs instanceof plc.object 
      && Xbs.instanceof(SynchroClassObject) 
      && CurrenStratProject instanceof plc.ordo_project) {

    var FatherXbs = acp_pjs_GetParentBucketElt(SynchroClassObject, Xbs);
    var FatherAct = undefined;
    var ActName = Xbs.name;
    var ActDesc = Xbs.desc;

    if (IsAReserve) {
      FatherAct = acp_pjs_GetBucketActivity(this : context, CurrenStratProject, Xbs, false, false);
      ActName = "RESERVE (" + Xbs.name + ")";
      ActDesc = "RESERVE (" + Xbs.desc + ")";
    } else if (FatherXbs == SynchroClassObject.GetDefaultNode() 
               || FatherXbs.callbooleanformula(FilterFormula) == false) {
      // Si le parent n’est pas pertinent, on le met au top-level
      FatherAct = plw.top_level_ws(CurrenStratProject);
    } else {
      FatherAct = acp_pjs_GetBucketActivity(
        this : context,
        CurrenStratProject,
        FatherXbs,
        false,
        false
      );
    }

    plw.writetolog(" FatherAct " + FatherAct);

    if (FatherAct instanceof plc.workstructure) {
      var SynchedAct = new plc.network(
        NAME : ActName,
        DATASET : CurrenStratProject,
        DESC : ActDesc,
        _BM_RA_WBS_USER : plw.currentopx2user().printattribute(),
        _BM_AA_S_BM_MANAGER : plw.currentopx2user().printattribute(),
        _BM_AA_N_LINKED_OBJECT : Xbs.onb.ToString("####"),
        _BM_AA_S_SYNCHRONISE_WITH : Context._BM_AA_S_BREAKDOWN_TO_SYNCHRONIZE.ToUpperCase(),
        _BM_AA_B_NO_INPUT : true,
        DATES_CONS : false,
        _BM_AA_B_RESERVE : IsAReserve,
        _BM_AA_B_IS_A_CONSO_LEVEL : IsAConsoLevel,
        WBS_ELEMENT : FatherAct
      );

      var ActivityFieldName = acp_pjs_GetActivityFieldValue();
      SynchedAct.set(ActivityFieldName.ToUpperCase(), Xbs);
      SynchedAct._ROA_DA_B_RPS_HIDE = true;
      return SynchedAct;
    }
  }
  return false;
}

Fonction acp_pjs_GetReserveActivity
-----------------------------------
Recherche l’activité de réserve correspondant à un bucket parent. Si elle
n’existe pas, la crée au besoin.

function acp_pjs_GetReserveActivity(CurrenStratProject, SynchroClassObject, Xbs, FilterFormula){
  var ParentXbs = acp_pjs_GetParentBucketElt(SynchroClassObject, Xbs);
  if (ParentXbs.instanceof(SynchroClassObject) 
      && FilterFormula instanceof string 
      && ParentXbs.callbooleanformula(FilterFormula) == true) {

    var ReservedAct = acp_pjs_GetBucketActivity(
      this : context,
      CurrenStratProject,
      ParentXbs,
      false,
      true
    );
    if (!(ReservedAct instanceof plc.workstructure)) {
      ReservedAct = acp_pjs_CreateBucketActivity(
        CurrenStratProject,
        SynchroClassObject,
        ParentXbs,
        false,
        true,
        FilterFormula
      );
    }
    return ReservedAct;
  }
  return false;
}

Fonction acp_pjs_SynchronizeBmStructure
---------------------------------------
Lance la synchronisation complète de la structure budgétaire (Bucket) pour
un projet stratégique courant (StratPrj). Parcourt tous les objets (SynchroClassObject),
crée ou met à jour les activités associées, gère les réserves et supprime
les activités devenues obsolètes.

function acp_pjs_SynchronizeBmStructure(){
  var question = plw.write_text_key("BudgetManager.synchronization_message");
  if(plw.question(question)){
    var CurrenStratProject = plw.currentpageobject();
    if (CurrenStratProject instanceof plc.ordo_project) {
      var SelectedClass = context._BM_AA_S_BREAKDOWN_TO_SYNCHRONIZE;
      plw.writetolog("Starting Bucket Structure Synchronization on " + SelectedClass);

      var SynchroClassObject = acp_pjs_GetCurrentSynchroClass(this : context);
      if (SynchroClassObject instanceof ObjectClass) {
        var SynchroClassSymbol = SynchroClassObject.name;
        // Récupération du filtre
        var FilterFormulaVector = plw._inf_js_compute_portfolio_filter();
        if (FilterFormulaVector instanceof vector) {
          var FilterFormula = FilterFormulaVector.getplist(SelectedClass);
          if (FilterFormula instanceof String && FilterFormula != "") {
            var FilterForm = new formula(SynchroClassObject, FilterFormula, "BOOLEAN", false);
            var msg = "Synchro....";

            // Bloc sans verrou (no_locking) pour ignorer les restrictions
            with (plw.no_locking) {
              with(FilterForm.fromobject(), plw.monitoring(title: msg)) {
                for (var elt in SynchroClassObject order by ['LEVEL']) {
                  var SynchedAct = acp_pjs_GetBucketActivity(this : context, CurrenStratProject, elt, false, false);
                  if (!(SynchedAct instanceof plc.workstructure)) {
                    SynchedAct = acp_pjs_CreateBucketActivity(
                      CurrenStratProject,
                      SynchroClassObject,
                      elt,
                      false,
                      false,
                      FilterFormula
                    );
                  } else {
                    // Vérifie le parent correct
                    var ParentXbs = acp_pjs_GetParentBucketElt(SynchroClassObject, elt);
                    var ParentAct = acp_pjs_GetBucketActivity(
                      this : context,
                      CurrenStratProject,
                      ParentXbs,
                      false,
                      false
                    );
                    if (ParentAct instanceof plc.workstructure 
                        && SynchedAct.wbs_element != ParentAct) {
                      SynchedAct.wbs_element = ParentAct;
                    }
                  }
                  if (SynchedAct instanceof plc.workstructure) {
                    var ReserveAct = acp_pjs_GetReserveActivity(
                      CurrenStratProject,
                      SynchroClassObject,
                      elt,
                      FilterFormula
                    );
                  }
                  msg.monitor(0);
                }
              }

              plw.writetolog("Checking for Bucket activities to remove");
              // Parcours pour supprimer les activités qui ne sont plus dans le filtre
              with(CurrenStratProject.fromobject()){
                for (var Act in plc.workstructure 
                     where Act._BM_AA_S_SYNCHRONISE_WITH == SelectedClass.ToUpperCase()
                           && Act._BM_AA_B_IS_A_CONSO_LEVEL == false
                     order by [['INVERSE','LEVEL']]) {

                  var XbsElt = SynchroClassObject.get(
                    Act._BM_AA_N_LINKED_OBJECT.parseint()
                  );
                  plw.writetolog("XbsElt " + XbsElt);

                  if ((!(XbsElt.instanceof(SynchroClassObject))) 
                      || XbsElt.callbooleanformula(FilterFormula) == false) {
                    plw.writetolog("XbsElt deleted" + XbsElt);
                    Act.delete();
                  }
                }
              }
            }
            plw.writetolog("Bucket Structure Synchronization Completed");
          }
        }
      }
    }
  }
}

Fonction generate_strategic_user_portfolio
------------------------------------------
Crée un « user portfolio » (filtre utilisateur) à partir d’un
objet « strat_axis ». Associe un certain nombre de champs
(NAME, DESC, etc.), puis renvoie l’objet nouvellement créé
ou déjà existant.

function generate_strategic_user_portfolio(strat_axis){
  var name = strat_axis.name + "_strategic_portfolio";
  var desc = strat_axis.desc;
  var portfolioWP = strat_axis.ACP_UA_S_PORTFOLIO_WP;

  var UserPortfolio = plc._FF_PT_FAVOR_FILTERS.get(name);

  if (!(UserPortfolio instanceof plc._FF_PT_FAVOR_FILTERS)){
    UserPortfolio = new plc._FF_PT_FAVOR_FILTERS(
      NAME : name,
      DESC : desc,
      _FF_AA_S_PROJECT_TYPE : "Project,Project.Workpackage,Strategic Project",
      _FF_AA_B_EXPORTED : true,
      _FF_AA_S_CATEGORY : "Strategic Portfolio",
      _FF_AA_S_GROUP_WRITE : "ACP_PRF_ADMIN",
      _FF_AA_S_GROUP_READ : "ALL",
      _FF_AA_S_PROGRAM_FILTER : portfolioWP.printattribute("ID"),
      _FF_AA_S_PRJ_STATUS : "Initiative,Running",
      _FF_RA_USER_FF   : "INTRANET",
      #DATASET# : "ACP_CF_D_MASTER_DATA"
    );
  }
  return UserPortfolio;
}

Fonction dcma_initialize_lines
------------------------------
Initialise dans le projet (prj) des règles de check (DCMA) basées
sur la table __USER_TABLE_ACP_UT_CHECK_PROJECT_RULE. Crée pour
chaque règle un objet __USER_TABLE_ACP_UT_CHECK_PROJECT_RULE_PROJECT_VALUE
si non existant.

function dcma_initialize_lines(prj) {
  if (!(prj instanceof plc.ordoproject)) return false;

  for (var rule in plc.__USER_TABLE_ACP_UT_CHECK_PROJECT_RULE) {
    var cpt_total = 0;
    var cpt_ok = 0;
    var result;

    var combinedId = rule.printattribute("ID") + "@" + prj.NAME;
    var existing = plc.__USER_TABLE_ACP_UT_CHECK_PROJECT_RULE_PROJECT_VALUE.get(combinedId);
    if (existing instanceof plc.__USER_TABLE_ACP_UT_CHECK_PROJECT_RULE_PROJECT_VALUE) {
      continue;
    } else {
      result = new plc.__USER_TABLE_ACP_UT_CHECK_PROJECT_RULE_PROJECT_VALUE(
        NAME: combinedId,
        ACP_UA_CHECK_RULE: rule,
        ACP_UA_N_THRESHOLD: rule.ACP_UA_N_THRESHOLD,
        #DATASET# : prj,
        ACP_UA_B_IS_ACTIVE: true,
        ACP_UA_N_TARGET: rule.ACP_UA_N_TARGET_PERC
      );
    }
  }
  return true;
}

Fonction dcma_compute_lines
---------------------------
Calcule, pour chaque ligne de règle active (ACP_UA_B_IS_ACTIVE),
le nombre total d’objets concernés et le nombre d’objets
ne satisfaisant pas la règle (ACP_UA_N_TOTAL_KO).

function dcma_compute_lines(prj) {
  if (!(prj instanceof plc.ordoproject)) return false;

  if (prj.ACP_UA_S_SANITY_CHECK_BASELINE == "") {
    plw.alert("Please, select a baseline");
    return false;
  }

  with (prj.fromobject()) {
    for (var prj_rule in plc.__USER_TABLE_ACP_UT_CHECK_PROJECT_RULE_PROJECT_VALUE 
         where prj_rule.ACP_UA_B_IS_ACTIVE) {

      var target = prj_rule.ACP_UA_N_TARGET;
      var formula = prj_rule.ACP_UA_CHECK_RULE.ACP_UA_S_ACTIVITY_FORMULA;
      var Replaced_Formula = (prj_rule.ACP_UA_N_THRESHOLD != 0)
        ? formula.replaceregexp("ACP_UA_N_THRESHOLD", "'" + prj_rule.ACP_UA_N_THRESHOLD.ToString("####") + "d'")
        : formula;

      var scope_formula = (prj_rule.ACP_UA_CHECK_RULE.ACP_UA_S_DATA_SCOPE == "") 
        ? "TRUE"
        : prj_rule.ACP_UA_CHECK_RULE.ACP_UA_S_DATA_SCOPE;

      var cpt_total = 0;
      var cpt_ok = 0;

      if (prj_rule.ACP_UA_CHECK_RULE.ACP_UA_S_ON_CLASS == "project") {
        prj_rule.ModifyWithPlist([
          "ACP_UA_N_TOTAL", 1,
          "ACP_UA_N_TOTAL_KO", prj.callNumberformula(Replaced_Formula)
        ]);
      } else {
        for (var obj in plc.get(prj_rule.ACP_UA_CHECK_RULE.ACP_UA_S_ON_CLASS)
             where obj.callbooleanformula(scope_formula)){
          cpt_total++;
        }
        for (var obj in plc.get(prj_rule.ACP_UA_CHECK_RULE.ACP_UA_S_ON_CLASS)
             where obj.callbooleanformula(scope_formula) 
                   && !obj.callbooleanformula(Replaced_Formula)) {
          cpt_ok++;
        }
        prj_rule.ModifyWithPlist([
          "ACP_UA_N_TOTAL", cpt_total,
          "ACP_UA_N_TOTAL_KO", cpt_total - cpt_ok
        ]);
      }
    }

    // Pour les règles inactives, on remet à zéro
    for (var prj_rule in plc.__USER_TABLE_ACP_UT_CHECK_PROJECT_RULE_PROJECT_VALUE 
         where !prj_rule.ACP_UA_B_IS_ACTIVE) {
      prj_rule.ModifyWithPlist([
        "ACP_UA_N_TOTAL", 0,
        "ACP_UA_N_TOTAL_KO", 0
      ]);
    }
  }
  return true;
}

Fonction dcma_reset_lines
-------------------------
Réinitialise complètement les lignes de check d’un projet (supprime
toutes les lignes, puis relance l’initialisation).

function dcma_reset_lines(prj){
  with(prj.fromobject()){
    for (var line in plc.__USER_TABLE_ACP_UT_CHECK_PROJECT_RULE_PROJECT_VALUE) {
      line.delete();
    }
  }
  dcma_initialize_lines(prj);
  return true;
}

Fonction referenceField_Reader
------------------------------
Permet de lire un champ de référence (baseline) pour un objet donné,
selon la classe, l’attribut, et le nom de la référence (refName).

function referenceField_Reader(object, Attclass, fieldSlot, refName){
  var value = undefined;
  var type = fieldSlot.type;

  // Pour un projet, vérifie si la baseline est chargée
  if (object instanceof plc.project) {
    for (var vRef in object.get(#REFERENCES#) where vRef.name == refName){
      if (vRef.loaded != true) return undefined;
    }
  }

  if (type == "NUMBER") {
    value = object.callnumberformula(
      "REFERENCE_NUMBER_VALUE(\"" + Attclass + "\",\"" + object.printattribute() + "\",\"" 
      + fieldSlot.representation + "\",\"" + refName + "\")"
    );
  } else if (type == "STRING") {
    value = object.callstringformula(
      "REFERENCE_STRING_VALUE(\"" + Attclass + "\",\"" + object.printattribute() + "\",\""
      + fieldSlot.representation + "\",\"" + refName + "\")"
    );
  } else if (type == "BOOLEAN") {
    value = object.callbooleanformula(
      "REFERENCE_BOOLEAN_VALUE(\"" + Attclass + "\",\"" + object.printattribute() + "\",\""
      + fieldSlot.representation + "\",\"" + refName + "\")"
    );
  } else if (type == "DATE") {
    value = object.calldateformula(
      "REFERENCE_DATE_VALUE(\"" + Attclass + "\",\"" + object.printattribute() + "\",\""
      + fieldSlot.representation + "\",\"" + refName + "\")"
    );
  } else if (type == "DURATION") {
    value = object.calldurationformula(
      "REFERENCE_DURATION_VALUE(\"" + Attclass + "\",\"" + object.printattribute() + "\",\""
      + fieldSlot.representation + "\",\"" + refName + "\")"
    );
  } else if (type != undefined && type.findclass() instanceof ObjectClass){
    value = object.callstringformula(
      "REFERENCE_STRING_VALUE(\"" + Attclass + "\",\"" + object.printattribute() + "\",\""
      + fieldSlot.representation + "\",\"" + refName + "\")"
    );
  }
  return value;
}

Fonction GenerateReferenceSlot
------------------------------
Crée un nouveau slot (champ) de référence pour une baseline (RefName),
à partir d'un attribut existant (AttributeName) dans une classe
(Attclass). Associe un reader pour récupérer la valeur depuis
la baseline.

function GenerateReferenceSlot(RefName, Attclass, AttributeName){
  var Sclass = "Opx" + Attclass;
  var Oclass = Sclass.findclass();
  var attribute = Oclass.getslotbyid(AttributeName);

  if (attribute == undefined){
    plw.writetolog("Attribute ~a doesn't exist. Remove it from ref template ~a"
                   .format(AttributeName, RefName));
    return true;
  }

  var attribute_type = (attribute.type.search("Opx") != false) ? "STRING" : attribute.type;
  if (attribute.descriptor.type.name.name == "END-DATE") {
    attribute_type = "end-date";
  }

  var RefAttributeName = "ACP_DA_REF_" + attribute.representation + "_" + RefName;
  var RefAttributeDesc = attribute.comment + " " + RefName;

  plw.writetolog("Generate attribute ~a on class ~a for reference ~a"
                 .format(RefAttributeName, Attclass, RefName));

  var ReferenceSlotAttribute = Oclass.getslot(RefAttributeName);
  if (!(ReferenceSlotAttribute instanceof ObjectAttribute)){
    ReferenceSlotAttribute = new ObjectAttribute(Oclass, RefAttributeName, attribute_type);
  }

  ReferenceSlotAttribute.reader = function () {
    return referenceField_Reader(this, Attclass, attribute, RefName);
  };
  ReferenceSlotAttribute.comment = RefAttributeDesc;
  ReferenceSlotAttribute.module = "Baselines";
  ReferenceSlotAttribute.hiddenInIntranetServer = false;
  return true;
}

Fonction acp_pjs_ReadRefDate
----------------------------
Permet de lire la date de référence (startdate ou enddate) depuis
la relation "referenced_dates".

function acp_pjs_ReadRefDate(type) {
  if (this instanceof plc.REFERENCE_WORK_STRUCTURE){
    var DatePlist = this.getinternalvalue("referenced_dates");
    if (DatePlist instanceof list && DatePlist.length > 0) {
      var CompactRefDate = DatePlist[0];
      return CompactRefDate.get(type);
    }
  }
  return -1;
}

Fonction relaxed_link_after_command
-----------------------------------
Exemple : ignore le lien si "arg.right.file != arg.left.file"
en forçant arg.ignored = true.

function relaxed_link_after_command(arg) {
  with(plw.no_locking){
    if (arg.right.file != arg.left.file) {
      arg.ignored = true;
    }
  }
}

Fonction relaxed_link
---------------------
Appelle la fonction relaxed_link_after_command après la commande,
pour l’exécuter "post-lien".

function relaxed_link(arg){
  var check_function =  function() { relaxed_link_after_command(arg); };
  check_function.evalaftercommand();
}

Fonction publish_MnT_PNL
------------------------
Wrapper pour la publication des PNL (Profit & Loss) M&T
(Manufacturing & Technology), via un script interne
(plw._fin_publish_a_PnL).

function publish_MnT_PNL(){
  plw.writetolog("Wrapper publish_MnT_PNL, publish M&T PNL, script ACP_PJS_PNL_FIX");
  plw._fin_publish_a_PnL("ACP_PNL_MT");
}

Fonction snow_create_user_get
-----------------------------
Exemple de fonction GET sur un web service SNOW_USER_CREATION.
Ici, ne fait qu’un return symbolique.

function snow_create_user_get(json){
  return plc.opx2user.get(json).desc;
}

Fonction snow_create_user
-------------------------
Exemple de fonction POST sur le même web service. Crée un user
dans Planisware (OPX2_USER) selon les paramètres passés en JSON.

function snow_create_user(json){
  plw.writetolog("Web service SNOW_USER_CREATION with parameters ~a".format(json));

  // Vérifications
  if (json.NAME == "" || json.NAME == undefined){
    return "NAME missing";
  }
  if (plc.opx2user.get(json.NAME) != undefined){
    return "User ~a already exist".format(json.NAME);
  }
  if (json.DESC == "" || json.DESC == undefined){
    return "Desc missing";
  }
  if (json.EMAIL_ADDRESS == "" || json.EMAIL_ADDRESS == undefined){
    return "email missing";
  }
  if (plc.user_group.get(json._PRJ_DA_PROFILE_NAME) == undefined 
      || !plc.user_group.get(json._PRJ_DA_PROFILE_NAME)._PRF_AA_B_PROFILE ){
    return "profile not correct";
  }
  if (json.LOGIN == "" || json.LOGIN == undefined){
    return "LOGIN missing";
  }
  if (plc.5bs.get(json.ACP_DA_PORTFOLIO_WP_READ) == undefined){
    return "ACP_DA_PORTFOLIO_WP_READ ~a is not correct".format(json.ACP_DA_PORTFOLIO_WP_READ);
  }
  if (plc.5bs.get(json.ACP_DA_PORTFOLIO_WP_READ_WRITE) == undefined){
    return "ACP_DA_PORTFOLIO_WP_READ_WRITE ~a is not correct".format(json.ACP_DA_PORTFOLIO_WP_READ_WRITE);
  }

  // Récupère les groupes passés en liste
  var vGroups = [];
  vGroups.push(json._PRJ_DA_PROFILE_NAME);
  vGroups.push("ALL");
  if (json.LIST_OF_GROUPS != undefined){
    for (var OtherGroups in json.LIST_OF_GROUPS.parsevector()){
      if (plc.user_group.get(OtherGroups) instanceof plc.user_group){
        vGroups.push(OtherGroups);
      } else {
        return "Group ~a is not correct".format(OtherGroups);
      }
    }
  }

  // Création de l’utilisateur
  try {
    var user = new plc.OPX2_USER(
      NAME : json.NAME,
      COMMENT : json.DESC,
      EMAIL_ADDRESS : json.EMAIL_ADDRESS,
      LOGIN : json.LOGIN,
      OPX2_INTRANET_ACCESS : true,
      ACP_UA_B_SEND_EMAIL_NEXT_BATCH : true,
      LIST_OF_GROUPS : vGroups.join(",")
    );
    user.modifywithplist([
      "ACP_DA_PORTFOLIO_WP_READ", json.ACP_DA_PORTFOLIO_WP_READ,
      "ACP_DA_PORTFOLIO_WP_READ_WRITE", json.ACP_DA_PORTFOLIO_WP_READ_WRITE
    ]);
  } catch (error e){
    plw.writeln(e.printStackTrace());
    return e;
  }
  return "User ~a has been created".format(json.NAME);
}

Relation dynamique (map_bm_bs_childrens) pour remonter les children
d’un portfolio (5bs).

function map_bm_bs_childrens(f){
  if(this instanceof plc.5bs){
    with(this.fromobject()){
      for (var child in plc.5bs) {
        f.call(child);
      }
    }
  }
}

Méthodes acp_pjs_scenario_portfolio_reader / acp_pjs_scenario_portfolio_modifier
------------------------------------------------------------------------------
Gèrent la lecture et la modification d’une liste de « Scénarios » de portefeuille
attachés à un projet (OrdoProject).

method acp_pjs_scenario_portfolio_reader on plc.OrdoProject(){
  var result = [];
  var prj = this;
  for (var Scenario in plc._FF_PT_FAVOR_FILTERS 
       where Scenario._KP_AA_B_IS_A_SCENARIO
         && Scenario._ff_aa_s_proj_list.parsevector(",").position(prj.printattribute()) instanceof Number){
    result.push(Scenario.printattribute());
  }
  return result.removeduplicates().join(",");
}

method acp_pjs_scenario_portfolio_modifier on plc.OrdoProject(val){
  var CurrentScenario = this.acp_pjs_scenario_portfolio_reader();
  var vCurrentScenario = [];
  CurrentScenario.parsevector(",").map(function () {
    vCurrentScenario.push(plc._FF_PT_FAVOR_FILTERS.get(this));
  });

  var vNewScenario = [];
  val.parsevector(",").map(function () {
    vNewScenario.push(plc._FF_PT_FAVOR_FILTERS.get(this));
  });

  // Nettoyage des anciens scénarios
  if (vCurrentScenario != undefined){
    var vRemovedScenario = vCurrentScenario.difference(vNewScenario);
    for (var RemovedScenario in vRemovedScenario){
      plw.alert(RemovedScenario);
      RemovedScenario.set(
        "_ff_aa_s_proj_list",
        RemovedScenario.get("_ff_aa_s_proj_list")
          .parsevector(",")
          .remove(this.name)
          .join(",")
      );
    }
  }

  // Ajout des nouveaux
  for (var o_scenario in vNewScenario){
    if (o_scenario != undefined){
      var vProjects = o_scenario.get("_ff_aa_s_proj_list").parsevector(",");
      vProjects.push(this.printattribute("ID"));
      o_scenario.set("_ff_aa_s_proj_list", vProjects.join(","));
    }
  }
  return true;
}

Fonction create_portfolio_scenarios_slot_project
------------------------------------------------
Crée le champ dynamique ACP_DA_SCENARIOS_LIST sur la classe OrdoProject,
utilisant les méthodes de lecture/écriture définies ci-dessus.

function create_portfolio_scenarios_slot_project(){
  var slot = plw.getslotbyid(this : plc.OrdoProject, "ACP_DA_SCENARIOS_LIST");
  if(!(slot instanceof objectAttribute)){
    slot = new objectAttribute(plc.OrdoProject, "ACP_DA_SCENARIOS_LIST", #TEMP-TABLE::..._FF_PT_FAVOR_FILTERS#);
  }

  if(slot instanceof objectAttribute) {
    slot.setPlist(#LIST-CLASS#, new symbol("_FF_PT_FAVOR_FILTERS","TEMP-TABLE"));
    slot.comment  = "Scenarios";
    slot.reader   = function (){ return this.acp_pjs_scenario_portfolio_reader();};
    slot.modifier = function (val){ return this.acp_pjs_scenario_portfolio_modifier(val);};
    slot.hiddeninintranetserver = false;
    slot.length = 9999999;
  }
}

Fonctions utilitaires pour récupérer le projet source d’un WP,
retrouver l’activité top-level, etc.

function acp_ojs_GetSourceProject(_bm_bs){
  if (_bm_bs instanceof plc.5bs) {
    for (var prj in _bm_bs.PROJECTS 
         where (prj.dataset_class == plc.projecttype.get("Project") 
                || prj.dataset_class == plc.projecttype.get("Project.Workpackage"))
               && prj._PM_NF_B_IS_A_VERSION == false) {
      return prj;
    }
  }
  return undefined;
}

function acp_ojs_GetSourceTopLevelActivity(act){
  if (act instanceof plc.workstructure) {
    var Prj = acp_ojs_GetSourceProject(act._bm_bs);
    if (Prj instanceof plc.ordo_project){
      var DestAct = plw.top_level_ws(Prj);
      if (DestAct instanceof plc.workstructure) {
        return DestAct;
      }
    }
  }
  return undefined;
}

Fonction acp_ojs_PrjName_Reader / acp_ojs_TopLvlAct_Reader
----------------------------------------------------------
Champs dynamiques pour lier un portfolio/WP à son projet,
et pour récupérer le nom de l’activité top-level.

function acp_ojs_PrjName_Reader(){
  if (this instanceof plc.5bs) {
    var Prj = acp_ojs_GetSourceProject(this);
    if (Prj instanceof plc.ordoproject) {
      return Prj.printattribute();
    }
  }
  return "";
}

function acp_ojs_TopLvlAct_Reader(){
  if (this instanceof plc.5bs) {
    var Prj = acp_ojs_GetSourceProject(this);
    if (Prj instanceof plc.ordoproject) {
      var act = plw.top_level_ws(Prj);
      if (act instanceof plc.workstructure) {
        return act.printattribute();
      }
    }
  }
  return "";
}

function acp_ojs_RelatedPrjAttr_Reader(){
  if (this instanceof plc.workstructure){
    var Prj = acp_ojs_GetSourceProject(this._bm_bs);
    if(Prj instanceof plc.ordo_project){ 
      return Prj.name; 
    }
  }
  return "";
}

Fonction acp_ojs_GenerateDa
---------------------------
Crée 3 champs dynamiques pour les portfolios/WP :
- ACP_DA_S_PRJ (Projet associé)
- ACP_DA_S_TOP_LVL_ACT (Activité top-level associée)
- ACP_DA_S_BM_SOURCE_PRJ (Champ sur workstructure pour pointer le projet source)

function acp_ojs_GenerateDa() {
  var PrjAttrName = "ACP_DA_S_PRJ";
  var PrjAttr = plc.5bs.getslotbyid(PrjAttrName);
  if (!(PrjAttr instanceof ObjectAttribute))  {
    PrjAttr = new ObjectAttribute(plc.5bs,PrjAttrName,"STRING");
  }
  PrjAttr.comment = "Portfolio/WP associated project/WP";
  PrjAttr.reader = acp_ojs_PrjName_Reader;
  PrjAttr.setcacheonreader();

  var ActAttrName = "ACP_DA_S_TOP_LVL_ACT";
  var ActAttr = plc.5bs.getslotbyid(ActAttrName);
  if (!(ActAttr instanceof ObjectAttribute))  {
    ActAttr = new ObjectAttribute(plc.5bs,ActAttrName,"STRING");
  }
  ActAttr.comment = "Portfolio/WP associated top level activity";
  ActAttr.reader = acp_ojs_TopLvlAct_Reader;
  ActAttr.setcacheonreader();

  var RelatedPrjName = "ACP_DA_S_BM_SOURCE_PRJ";
  var RelatedPrjAttr = plc.workstructure.getslotbyid(RelatedPrjName);
  if (!(RelatedPrjAttr instanceof ObjectAttribute))  {
    RelatedPrjAttr = new ObjectAttribute(plc.workstructure,RelatedPrjName,"STRING");
  }
  RelatedPrjAttr.comment = "Portfolio/WP Project";
  RelatedPrjAttr.reader = acp_ojs_RelatedPrjAttr_Reader;
  RelatedPrjAttr.setcacheonreader();
}

Fonctions acp_pjs_GetActVectors / acp_pjs_ComputeAndIndexCurves
---------------------------------------------------------------
Permettent de récupérer les activités associées à un projet stratégique
et de calculer des courbes (budgets) sur une période donnée (SDate, EDate).

function acp_pjs_GetActVectors(plc.ordo_project StratPrj, boolean GetSource){
  var ActVectHt = new hashtable("STRING");
  if (StratPrj instanceof plc.ordo_project){
    var ActVect = new vector();
    var DestActVect = new vector();
    with(StratPrj.fromobject()){
      for (var Act in plc.workstructure 
           where Act._BM_AA_B_RESERVE == false
                 && Act._BM_AA_B_IS_A_CONSO_LEVEL == false
                 && Act._BM_AA_S_SYNCHRONISE_WITH == "_BM_BS"
                 && Act._BM_AA_N_LINKED_OBJECT != ""){
        var BmElt = plc.5bs.get(Act._BM_AA_N_LINKED_OBJECT.parseInt());
        if (BmElt instanceof plc.5bs) {
          ActVect.push(Act);
          if (GetSource){
            var DestAct = acp_ojs_GetSourceTopLevelActivity(Act);
            if (DestAct instanceof plc.workstructure) {
              DestActVect.push(DestAct);
            }
          }
        }
      }
    }
    ActVectHt.set("Source", ActVect);
    ActVectHt.set("Dest", DestActVect);
  }
  return ActVectHt;
}

==================================================================
FONCTIONS POUR LA PUBLICATION DE BUDGET TARGET DANS LES PROJETS
(acp_pjs_PublishBudgetTarget, etc.)
==================================================================

Fonction acp_pjs_PublishBudgetTarget
------------------------------------
Extrait un projet « stratégique » (StratPrj) depuis la page courante,
puis calcule et publie la cible budgétaire (target) vers des projets
« sources ». Parcourt les activités, recalcule les valeurs (courbes)
et applique des modifications sur la période (SDate, EDate).

function acp_pjs_PublishBudgetTarget(date Sdate, date Edate){
  var StratPrj = plw.currentpageobject();
  if (StratPrj instanceof plc.ordoproject && StratPrj.DATASET_CLASS == plc.projecttype.get("Strategic Project")) {
    if (StratPrj._TM_NF_B_USER_CAN_WRITE_ON_PROJECT) {

      // Récupération du vecteur d’activités dans le projet strat.
      var ActVectHt = acp_pjs_GetActVectors(StratPrj, true);
      var ActVect = ActVectHt.get("Source");
      var DestActVect = ActVectHt.get("Dest");

      // Calcule la courbe "BLANKET_ARCHIVED_PREDICTED_COST" (type budget)
      var SourceCurveAndSumHt = acp_pjs_ComputeAndIndexCurves(
        StratPrj, "BLANKET_ARCHIVED_PREDICTED_COST", "_BM_ET_BUDGET",
        Sdate, Edate, ActVect, false, true
      );
      var CurveSourceHt = SourceCurveAndSumHt.get("CurveHt");
      var CurveSourceChildrenHt = SourceCurveAndSumHt.get("SumHt");

      // Référence sur cost account / cost category
      var CostAccount = plc.cbs_node.get(context.ACP_SET_DEFAULT_TARGET_COST_ACCOUNT);
      var CostCategory = plc.ACP_PT_CBS_SUPP_2.get(context.ACP_SET_DEFAULT_TARGET_COST_CATEGORY);

      var DestCurveAndSumHt = acp_pjs_ComputeAndIndexCurves(
        StratPrj, "BLANKET_ARCHIVED_PREDICTED_COST", "ACP_ET_TARGET",
        Sdate, Edate, DestActVect, false, false,
        object2Target : CostAccount, 
        object3Target : CostCategory
      );
      var CurveDestHt = DestCurveAndSumHt.get("CurveHt");

      // Écrit les valeurs calculées dans la curve de destination
      with([plw.no_locking, plw.no_alerts]){
        context.ACP_UA_DO_NOT_LOCK_TARGET = true;
        for (var Act in CurveSourceHt){
          var ValueToSet = (CurveSourceHt.get(Act) instanceof plc.curve) 
            ? CurveSourceHt.get(Act).get(Sdate) 
            : 0;

          var ChildrenCurveVect = CurveSourceChildrenHt.get(Act);
          if (ChildrenCurveVect instanceof array){
            for (var Curve in ChildrenCurveVect) {
              ValueToSet = ValueToSet - Curve.get(Sdate);
            }
          }
          var DestAct = acp_ojs_GetSourceTopLevelActivity(Act);
          var DestCurve = CurveDestHt.get(DestAct);
          if (DestCurve instanceof plc.curve){
            DestCurve.set(Sdate, ValueToSet, true, Edate);
            DestAct.project.ACP_UA_D_LAST_TARGET_PUBLICATION_DATE = new date();
            DestAct.project.ACP_UA_S_LAST_TARGET_PUBLICATION_USER = context.applet.user.name;
          }
        }
        context.ACP_UA_DO_NOT_LOCK_TARGET = false;
        StratPrj.ACP_UA_D_LAST_TARGET_PUBLICATION_DATE = new date();
        StratPrj.ACP_UA_S_LAST_TARGET_PUBLICATION_USER = context.applet.user.name;
      }
      plw.alert("Budget target was published for year ~a".format(Sdate.getYear()));
    } else {
      plw.alert("You do not have write access to Strategic Portfolio.");
    }
  }
}

Fonctions d’enchaînement de publication (ex. acp_ojs_PublishCurYearBudgetTarget,
acp_ojs_PublishNextYearBudgetTarget, etc.) pour couvrir différentes
périodes de temps (année courante, années suivantes, etc.).

function acp_ojs_PublishCurYearBudgetTarget(){
  var Check = plw.question("Publish Current Year Budget Target to Projects/WP?");
  if (Check) {
    acp_pjs_PublishBudgetTarget(
      plw.periodstart(new date(), "Year", 0),
      plw.periodstart(new date(), "Year", 1)
    );
  }
}

function acp_ojs_PublishNextYearBudgetTarget(){
  var Check = plw.question("Publish Next Year Budget Target to Projects/WP?");
  if (Check) {
    acp_pjs_PublishBudgetTarget(
      plw.periodstart(new date(), "Year", 1),
      plw.periodstart(new date(), "Year", 2)
    );
  }
}

function acp_ojs_PublishNext5YearBudgetTarget(){
  var Check = plw.question("Publish Next 5 Years Budget Target to Projects/WP?");
  if (Check) {
    for (var integer i = 1; i <= 5; i++){
      acp_pjs_PublishBudgetTarget(
        plw.periodstart(new date(),"Year",i),
        plw.periodstart(new date(),"Year",i+1)
      );
    }
  }
}

==================================================================
EXEMPLES DE FONCTIONS POUR OUVERTURE DE VERSIONS BUDGÉTAIRES, ETC.
==================================================================

function acp_pjs_OpenSelectedVersion(){
  var currentVersion = context._BM_AA_S_BUDGET_VERSION;
  var Prj = (currentVersion != "") ? plc.ordoproject.get(currentVersion) : plw.currentpageobject();
  if(Prj instanceof plc.ordoproject && Prj.open == false) {
    Prj.open();
  }
}

Fonction SynchronizeJiraProjects
--------------------------------
Parcourt les projets qui ont ACP_UA_B_JIRA_AUTO_SYNC = true,

function SynchronizeJiraProjects(){
  for (var project in plc.ordoProject where project.ACP_UA_B_JIRA_AUTO_SYNC){
    if (project.ACP_UA_S_JIRA_PROJECT != ""){
      with([plw.no_alerts, plw.no_locking]){
        acp_import_jiraAPI(project);
      }
      plw.writeln("Project ~a has been treated".format(project.printattribute("NAME")));
    } else {
      plw.writeln("No Jira project selected for the project ~a".format(project.printattribute("NAME")));
    }
  }
}

Fonction acp_js_actuals_import_prechecks
-----------------------------------------
Vérifie si des lignes existent pour un certain year/month,
crée éventuellement la référence sur cost center group / entity
si elles n’existent pas. Retourne un booléen (check).

function acp_js_actuals_import_prechecks(sYear, CurrentEvent){
  var check = false;

  // Création hashtable cost center group
  var hCostCenterGroup = new hashtable("string");
  for (var oCCG in plc._inf_pt_cbs6){
    hCostCenterGroup.set(oCCG.get("ACP_UA_S_CODE"),oCCG.get("IDENTIFIER"));
  }

  var hEntity = new hashtable("string");
  for (var oEntity in plc._inf_pt_cbs4){
    hEntity.set(oEntity.get("ACP_UA_S_CODE"), oEntity.get("IDENTIFIER"));
  }

  // Parcourt la TT
  for (var each in plc.ACP_TT_ACTUALS_IMPORT where each.get("EVENT") == CurrentEvent){
    if (each.get("CALENDAR_YEARMONTH").substring(0,4) == sYear 
        && each.get("CALENDAR_YEARMONTH").substring(4,6) == "01"){
      check = true;
    }

    var newCCG = undefined;
    if (hCostCenterGroup.get(each.get("COST_CENTER_GROUP")) == undefined){
      newCCG = plc._inf_pt_cbs6.makeOpx2Object(
        "NAME", each.get("COST_CENTER_GROUP"),
        "DESC", each.get("COST_CENTER_GROUP"),
        "ACP_UA_S_CODE", each.get("COST_CENTER_GROUP"),
        "PARENT", "ORPHAN_CCG",
        "FILE", "ACP_CF_D_MASTER_DATA"
      );
      hCostCenterGroup.set(each.get("COST_CENTER_GROUP"), each.get("COST_CENTER_GROUP"));
    }

    var newEntity = undefined;
    if (hEntity.get(each.get("ENTITY")) == undefined ){
      newEntity = plc._inf_pt_cbs4.makeOpx2Object(
        "NAME", each.get("ENTITY"),
        "DESC", each.get("ENTITY"),
        "ACP_UA_S_CODE", each.get("ENTITY"),
        "PARENT", "ORPHAN_ENTITY",
        "FILE", "ACP_CF_D_MASTER_DATA"
      );
      hEntity.set(each.get("ENTITY"), each.get("ENTITY"));
    }
  }
  return check;
}

Fonctions pour enlever toutes les actuals sur l’année sYear,
et les commitments (Committed).

function acp_js_actuals_import_remove_actuals_in_scope(sYear){
  var count = 0;
  for (var oActualExpenditure in plc.INCURRED_EXPENDITURE 
       where oActualExpenditure.get("ACP_UA_N_YEAR").tostring("####") == sYear) {
    count++;
    oActualExpenditure.delete();
  }
  plw.writeln(count.tostring("####") + " actuals expenditures deleted for year " + sYear);
}

function acp_js_actuals_import_remove_all_commitments(){
  var count = 0;
  for (var oActualExpenditure in plc.INCURRED_EXPENDITURE 
       where oActualExpenditure.get("TYPE") == "Committed") {
    count++;
    oActualExpenditure.delete();
  }
  plw.writeln(count.tostring("####") + " commitments  deleted");
}

Fonctions pour gérer l’upload, refresh, delete, download d’un fichier
d’import d’actuals.

function acp_js_actuals_import_upload_button(){
  var sTempDir = context.callstringformula("$TEMPORARY_FILES_DIRECTORY");
  var sDestinationDir = sTempDir + "actuals_ifrp/";

  // Choix et upload du fichier CSV
  var vTmpPathsObject = plw.selectfile("Actual import file","","*.csv").getserverfiles();
  if (vTmpPathsObject == false) return false;
  var vTmpPaths = vTmpPathsObject[0];
  var sTmpPath = vTmpPaths[0];
  var sFileName = vTmpPaths[1].split("\\").pop();
  var sDestinationPath = sDestinationDir + sFileName;

  var oFileToMove = new pathname(sTmpPath);
  if (oFileToMove.probefile() != false) {
    oFileToMove.copyFile(sDestinationPath, true);
    oFileToMove.deleteFile();
  }
  acp_js_actuals_import_refresh_button();
}

function acp_js_actuals_import_refresh_button(){
  // Nettoie la table
  for (var obj in plc.__USER_TABLE_ACP_UT_ACTUALS_IMPORT_FILE_MANAGEMENT) {
    obj.delete();
  }

  // Réactualise la liste
  var sTempDir = context.callstringformula("$TEMPORARY_FILES_DIRECTORY");
  var sInputDirectory = sTempDir + "actuals_ifrp/";
  var oInputDirectory = new pathname(sInputDirectory);

  if (sInputDirectory.probefile() == false) {
    sInputDirectory.mkdir();
  }

  for (var oPath in oInputDirectory){
    var oFile = plc.__USER_TABLE_ACP_UT_ACTUALS_IMPORT_FILE_MANAGEMENT.makeOpx2Object(
      "NAME", oPath.tostring(),
      "ACP_UA_S_FILEPATH", oPath.tostring(),
      "ACP_UA_D_FILE_LAST_DATE", oPath.fileWriteDate(),
      "FILE", "ACP_CF_D_OTHER_DATA"
    );
  }
}

function acp_js_actuals_import_delete_button(){
  for (var each in plw.currentselection()){
    each.acp_js_actuals_import_delete_file();
  }
  acp_js_actuals_import_refresh_button();
}

function acp_js_actuals_import_download_button(){
  for (var each in plw.currentselection()){
    each.acp_js_actuals_import_download_file();
  }
}
